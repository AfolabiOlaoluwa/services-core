set $xhost $host_project_service_api;

# GET /payments
location ~ "^/v1/projects(?:\/)?$" {
	if ($request_method = POST) {
		set $xhost $host_common_service_api;
	}
	proxy_set_header Host $xhost;

	if ($request_method = GET) {
		proxy_pass $env_proto_schema://project_service_api_server/projects$is_args;
	}

	if ($request_method = POST) {
		proxy_pass $env_proto_schema://common_api_service_server/v1/projects$is_args;
	}
}

# GET|POST /projects/UUID
location ~ "^/v1/projects/([\w\d\-]+)(?:\/)?$" {
	proxy_set_header 'Accept' 'application/vnd.pgrst.object+json';
	set $project_id $1;
	if ($request_method ~ "(PUT|DELETE)") {
		set $xhost $host_common_service_api;
	}
	proxy_set_header Host $xhost;

	if ($request_method = GET) {
		set $args "${args}${token}id=eq.$1";
		proxy_pass $env_proto_schema://project_service_api_server/projects$is_args$args;
	}
	if ($request_method ~ "(PUT|DELETE)") {
		proxy_pass $env_proto_schema://common_api_service_server/v1/projects/$project_id$is_args;
	}
}

# GET /projects/UUID/goals
location ~ "^/v1/projects/([\w\d\-]+)/goals$" {
	set $project_id $1;
	if ($request_method = GET) {
		set $args "${args}${token}project_id=eq.$project_id";
		proxy_pass $env_proto_schema://project_service_api_server/goals$is_args$args;
	}

	if ($request_method = POST) {
		# TODO: sent request to new rails api to update rewards from project
		proxy_pass $env_proto_schema://project_service_api_server/rpc/reward$is_args;
	}
}

# GET /projects/UUID/rewards
location ~ "^/v1/projects/([\w\d\-]+)/rewards$" {
	set $project_id $1;

	if ($request_method = GET) {
		set $args "${args}${token}project_id=eq.$project_id";
		proxy_pass $env_proto_schema://project_service_api_server/rewards$is_args$args;
	}

	if ($request_method = POST) {
		rewrite_by_lua_block {
			ngx.req.read_body()
				ngx.req.set_method(ngx.HTTP_POST)

				local cjson = require "cjson"
				local body = ngx.req.get_body_data()

				if not body then
					return
						end

						local encbody = cjson.decode(body)
						encbody.data["project_id"] = ngx.var.project_id
						ngx.req.set_body_data(cjson.encode(encbody))
		}
		proxy_pass $env_proto_schema://project_service_api_server/rpc/reward$is_args;
	}
}

# GET /projects/UUID/rewards/UUID
location ~ "^/v1/projects/([\w\d\-]+)/rewards/([\w\d\-]+)$" {
	proxy_set_header 'Accept' 'application/vnd.pgrst.object+json';
	set $project_id $1;
	set $reward_id $2;

	if ($request_method = GET) {
		set $args "${args}${token}id=eq.$reward_id&project_id=eq.$project_id";
		proxy_pass $env_proto_schema://project_service_api_server/rewards$is_args$args;
	}

	if ($request_method = PUT) {
		rewrite_by_lua_block {
			ngx.req.read_body()
				ngx.req.set_method(ngx.HTTP_POST)

				local cjson = require "cjson"
				local body = ngx.req.get_body_data()

				if not body then
					return
						end

						local encbody = cjson.decode(body)
						encbody.data["id"] = ngx.var.reward_id
						encbody.data["project_id"] = ngx.var.project_id
						ngx.req.set_body_data(cjson.encode(encbody))
		}
		proxy_pass $env_proto_schema://project_service_api_server/rpc/reward$is_args;
	}
}

# GET /projects/UUID/finish
location ~ "^/v1/projects/([\w\d\-]+)/finish$" {
	set $args "${args}${token}id=$1";
	proxy_pass $env_proto_schema://project_service_api_server/rpc/finish_project$is_args$args;
}

# GET /projects/UUID/subscriptions
location ~ "^/v1/projects/([\w\d\-]+)/subscriptions$" {
	set $args "${args}${token}project_id=eq.$1";
	proxy_pass $env_proto_schema://payment_service_api_server/subscriptions$is_args$args;
}

# GET /projects/UUID/subscribers
location ~ "^/v1/projects/([\w\d\-]+)/subscribers$" {
	set $args "${args}${token}project_id=eq.$1";
	proxy_pass $env_proto_schema://project_service_api_server/subscribers$is_args$args;
}

# GET /projects/UUID/fund_stats
location ~ "^/v1/projects/([\w\d\-]+)/fund_stats$" {
	proxy_set_header Host $host_analytics_service_api;
	proxy_method GET;
	set $args "${args}${token}id=$1";
	proxy_pass $env_proto_schema://analytics_service_api_server/rpc/project_subscribers_info$is_args$args;
}

# GET /projects/UUID/subscriptions_per_day
location ~ "^/v1/projects/([\w\d\-]+)/subscriptions_per_day$" {
	proxy_set_header Host $host_analytics_service_api;
	proxy_method GET;
	set $args "${args}${token}project_id=eq.$1";
	proxy_pass $env_proto_schema://analytics_service_api_server/project_subscriptions_per_day$is_args$args;
}

# GET /projects/UUID/subscriptions
location ~ "^/v1/projects/([\w\d\-]+)/subscriptions_per_month$" {
	set $args "${args}${token}project_id=eq.$1";
	proxy_pass $env_proto_schema://payment_service_api_server/subscriptions_per_month$is_args$args;
}
