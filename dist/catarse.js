var c = (function (m$1,I18n$1,postgrest$1,replaceDiacritics,_$1,moment$1,Chart) {
  'use strict';

  m$1 = 'default' in m$1 ? m$1['default'] : m$1;
  I18n$1 = 'default' in I18n$1 ? I18n$1['default'] : I18n$1;
  postgrest$1 = 'default' in postgrest$1 ? postgrest$1['default'] : postgrest$1;
  replaceDiacritics = 'default' in replaceDiacritics ? replaceDiacritics['default'] : replaceDiacritics;
  _$1 = 'default' in _$1 ? _$1['default'] : _$1;
  moment$1 = 'default' in moment$1 ? moment$1['default'] : moment$1;
  Chart = 'default' in Chart ? Chart['default'] : Chart;

  var babelHelpers = {};

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers;

  var _dataCache = {};
  var hashMatch = function hashMatch(str) {
      return window.location.hash === str;
  };
  var paramByName = function paramByName(name) {
      var normalName = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]'),
          regex = new RegExp('[\\?&]' + normalName + '=([^&#]*)'),
          results = regex.exec(location.search);
      return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  };
  var selfOrEmpty = function selfOrEmpty(obj) {
      var emptyState = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

      return obj ? obj : emptyState;
  };
  var setMomentifyLocale = function setMomentifyLocale() {
      moment.locale('pt', {
          monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_')
      });
  };
  var existy = function existy(x) {
      return x != null;
  };
  var momentify = function momentify(date, format) {
      format = format || 'DD/MM/YYYY';
      return date ? moment(date).locale('pt').format(format) : 'no date';
  };
  var storeAction = function storeAction(action) {
      if (!sessionStorage.getItem(action)) {
          return sessionStorage.setItem(action, action);
      }
  };
  var storeObject = function storeObject(sessionKey, obj) {
      return sessionStorage.setItem(sessionKey, JSON.stringify(obj));
  };
  var getStoredObject = function getStoredObject(sessionKey) {
      if (sessionStorage.getItem(sessionKey)) {
          return JSON.parse(sessionStorage.getItem(sessionKey));
      } else {
          return undefined;
      }
  };
  var callStoredAction = function callStoredAction(action, func) {
      if (sessionStorage.getItem(action)) {
          func.call();
          return sessionStorage.removeItem(action);
      }
  };
  var discuss = function discuss(page, identifier) {
      var d = document,
          s = d.createElement('script');
      window.disqus_config = function () {
          this.page.url = page;
          this.page.identifier = identifier;
      };
      s.src = '//catarseflex.disqus.com/embed.js';
      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
      return m('');
  };
  var validateEmail = function validateEmail(email) {
      var re = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
      return re.test(email);
  };
  var validateCpf = function validateCpf(strCPF) {
      var sum = 0,
          remainder = void 0;

      if (strCPF == '00000000000') return false;

      for (var i = 1; i <= 9; i++) {
          sum = sum + parseInt(strCPF.substring(i - 1, i)) * (11 - i);
      }
      remainder = sum * 10 % 11;

      if (remainder == 10 || remainder == 11) {
          remainder = 0;
      }

      if (remainder != parseInt(strCPF.substring(9, 10))) {
          return false;
      }

      sum = 0;

      for (var _i = 1; _i <= 10; _i++) {
          sum = sum + parseInt(strCPF.substring(_i - 1, _i)) * (12 - _i);
      }

      remainder = sum * 10 % 11;

      if (remainder == 10 || remainder == 11) {
          remainder = 0;
      }

      if (remainder != parseInt(strCPF.substring(10, 11))) {
          return false;
      }

      return true;
  };
  var validationErrors = m.prop([]);
  var resetValidations = function resetValidations() {
      return validationErrors([]);
  };
  var validate = function validate() {
      var errorFields = m.prop([]);

      return {
          submit: function submit(fields, fn) {
              return function () {
                  resetValidations();

                  _.map(fields, function (field) {
                      if (field.rule === 'email') {
                          if (!validateEmail(field.prop())) {
                              validationErrors().push({ field: field.prop, message: 'E-mail inválido.' });
                          }
                      }

                      if (field.rule === 'text') {
                          if (field.prop().trim() === '') {
                              validationErrors().push({ field: field.prop, message: 'O campo não pode ser vazio.' });
                          }
                      }
                  });

                  return !validationErrors().length > 0 ? fn() : false;
              };
          },
          hasError: function hasError(fieldProp) {
              return _.reduce(validationErrors(), function (memo, fieldError) {
                  return fieldError.field() === fieldProp() || memo;
              }, false);
          }
      };
  };
  var momentFromString = function momentFromString(date, format) {
      var european = moment(date, format || 'DD/MM/YYYY');
      return european.isValid() ? european : moment(date);
  };
  var translatedTimeUnits = {
      days: 'dias',
      minutes: 'minutos',
      hours: 'horas',
      seconds: 'segundos'
  };
  var translatedTime = function translatedTime(time) {
      var translatedTime = translatedTimeUnits,
          unit = function unit() {
          var projUnit = translatedTime[time.unit || 'seconds'];

          return time.total <= 1 ? projUnit.slice(0, -1) : projUnit;
      };

      return {
          unit: unit(),
          total: time.total
      };
  };
  var generateFormatNumber = function generateFormatNumber(s, c) {
      return function (number, n, x) {
          if (!_.isNumber(number)) {
              return null;
          }

          var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
              num = number.toFixed(Math.max(0, ~ ~n));
          return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));
      };
  };
  var formatNumber = generateFormatNumber('.', ',');
  var toggleProp = function toggleProp(defaultState, alternateState) {
      var p = m.prop(defaultState);
      p.toggle = function () {
          return p(p() === alternateState ? defaultState : alternateState);
      };

      return p;
  };
  var idVM = postgrest.filtersVM({
      id: 'eq'
  });
  var getCurrentProject = function getCurrentProject() {
      if (_dataCache.currentProject) return _dataCache.currentProject;

      var root = document.getElementById('project-show-root'),
          data = root && root.getAttribute('data-parameters');
      if (data) {
          return _dataCache.currentProject = JSON.parse(data);
      } else {
          return false;
      }
  };
  var getRdToken = function getRdToken() {
      if (_dataCache.rdToken) return _dataCache.rdToken;

      var meta = _.first(document.querySelectorAll('[name=rd-token]'));
      return meta ? _dataCache.rdToken = meta.content : undefined;
  };
  var getUser = function getUser() {
      if (_dataCache.user) return _dataCache.user;

      var body = document.getElementsByTagName('body'),
          data = _.first(body).getAttribute('data-user');
      if (data) {
          return _dataCache.user = JSON.parse(data);
      } else {
          return false;
      }
  };
  var getApiHost = function getApiHost() {
      if (_dataCache.apiHost) return _dataCache.apiHost;

      var el = document.getElementById('api-host');
      return _dataCache.apiHost = el && el.getAttribute('content');
  };
  var locationActionMatch = function locationActionMatch(action) {
      var act = window.location.pathname.split('/').slice(-1)[0];
      return action === act;
  };
  var useAvatarOrDefault = function useAvatarOrDefault(avatarPath) {
      return avatarPath || '/assets/catarse_bootstrap/user.jpg';
  };
  var loader = function loader() {
      return m('.u-text-center.u-margintop-30 u-marginbottom-30', [m('img[alt="Loader"][src="https://s3.amazonaws.com/catarse.files/loader.gif"]')]);
  };
  var newFeatureBadge = function newFeatureBadge() {
      return m('span.badge.badge-success.margin-side-5', I18n$1.t('projects.new_feature_badge'));
  };
  var fbParse = function fbParse() {
      var tryParse = function tryParse() {
          try {
              window.FB.XFBML.parse();
          } catch (e) {
              console.log(e);
          }
      };

      return window.setTimeout(tryParse, 500); //use timeout to wait async of facebook
  };
  var pluralize = function pluralize(count, s, p) {
      return count > 1 ? count + p : count + s;
  };
  var strip = function strip(html) {
      var tmp = document.createElement('div');
      tmp.innerHTML = html;
      return tmp.textContent || tmp.innerText || '';
  };
  var simpleFormat = function simpleFormat() {
      var str = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

      str = str.replace(/\r\n?/, '\n');
      if (str.length > 0) {
          str = str.replace(/\n\n+/g, '</p><p>');
          str = str.replace(/\n/g, '<br />');
          str = '<p>' + str + '</p>';
      }
      return str;
  };
  var rewardSouldOut = function rewardSouldOut(reward) {
      return reward.maximum_contributions > 0 ? reward.paid_count + reward.waiting_payment_count >= reward.maximum_contributions : false;
  };
  var rewardRemaning = function rewardRemaning(reward) {
      return reward.maximum_contributions - (reward.paid_count + reward.waiting_payment_count);
  };
  var parseUrl = function parseUrl(href) {
      var l = document.createElement('a');
      l.href = href;
      return l;
  };
  var UIHelper = function UIHelper() {
      return function (el, isInitialized) {
          if (!isInitialized && window.$) {
              window.UIHelper.setupResponsiveIframes($(el));
          }
      };
  };
  var toAnchor = function toAnchor() {
      return function (el, isInitialized) {
          if (!isInitialized) {
              var hash = window.location.hash.substr(1);
              if (hash === el.id) {
                  window.location.hash = '';
                  setTimeout(function () {
                      window.location.hash = el.id;
                  });
              }
          }
      };
  };
  var navigateToDevise = function navigateToDevise() {
      window.location.href = '/pt/login';
      return false;
  };
  var navigateTo = function navigateTo(path) {
      window.location.href = path;
      return false;
  };
  var cumulativeOffset = function cumulativeOffset(element) {
      var top = 0,
          left = 0;
      do {
          top += element.offsetTop || 0;
          left += element.offsetLeft || 0;
          element = element.offsetParent;
      } while (element);

      return {
          top: top,
          left: left
      };
  };
  var closeModal = function closeModal() {
      var el = document.getElementsByClassName('modal-close')[0];
      if (_.isElement(el)) {
          el.onclick = function (event) {
              event.preventDefault();

              document.getElementsByClassName('modal-backdrop')[0].style.display = 'none';
          };
      };
  };
  var closeFlash = function closeFlash() {
      var el = document.getElementsByClassName('icon-close')[0];
      if (_.isElement(el)) {
          el.onclick = function (event) {
              event.preventDefault();

              el.parentElement.remove();
          };
      };
  };
  var i18nScope = function i18nScope(scope, obj) {
      obj = obj || {};
      return _.extend({}, obj, { scope: scope });
  };
  var redrawHashChange = function redrawHashChange(before) {
      var callback = _.isFunction(before) ? function () {
          before();
          m.redraw();
      } : m.redraw;

      window.addEventListener('hashchange', callback, false);
  };
  var authenticityToken = function authenticityToken() {
      var meta = _.first(document.querySelectorAll('[name=csrf-token]'));
      return meta ? meta.content : undefined;
  };
  var animateScrollTo = function animateScrollTo(el) {
      var scrolled = window.scrollY;

      var offset = cumulativeOffset(el).top,
          duration = 300,
          dFrame = (offset - scrolled) / duration,

      //EaseInOutCubic easing function. We'll abstract all animation funs later.
      eased = function eased(t) {
          return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
      },
          animation = setInterval(function () {
          var pos = eased(scrolled / offset) * scrolled;

          window.scrollTo(0, pos);

          if (scrolled >= offset) {
              clearInterval(animation);
          }

          scrolled = scrolled + dFrame;
      }, 1);
  };
  var scrollTo = function scrollTo() {
      var setTrigger = function setTrigger(el, anchorId) {
          el.onclick = function () {
              var anchorEl = document.getElementById(anchorId);

              if (_.isElement(anchorEl)) {
                  animateScrollTo(anchorEl);
              }

              return false;
          };
      };

      return function (el, isInitialized) {
          if (!isInitialized) {
              setTrigger(el, el.hash.slice(1));
          }
      };
  };
  var projectStateTextClass = function projectStateTextClass(state) {
      var statusText = {
          online: {
              cssClass: 'text-success',
              text: 'NO AR'
          },
          successful: {
              cssClass: 'text-success',
              text: 'FINANCIADO'
          },
          failed: {
              cssClass: 'text-error',
              text: 'NÃO FINANCIADO'
          },
          waiting_funds: {
              cssClass: 'text-waiting',
              text: 'AGUARDANDO'
          },
          rejected: {
              cssClass: 'text-error',
              text: 'RECUSADO'
          },
          draft: {
              cssClass: '',
              text: 'RASCUNHO'
          },
          in_analysis: {
              cssClass: '',
              text: 'EM ANÁLISE'
          },
          approved: {
              cssClass: 'text-success',
              text: 'APROVADO'
          }
      };

      return statusText[state];
  };
  var RDTracker = function RDTracker(eventId) {
      return function (el, isInitialized) {
          if (!isInitialized) {
              var integrationScript = document.createElement('script');
              integrationScript.type = 'text/javascript';
              integrationScript.id = 'RDIntegration';

              if (!document.getElementById(integrationScript.id)) {
                  document.body.appendChild(integrationScript);
                  integrationScript.onload = function () {
                      return RdIntegration.integrate(getRdToken(), eventId);
                  };
                  integrationScript.src = 'https://d335luupugsy2.cloudfront.net/js/integration/stable/rd-js-integration.min.js';
              }

              return false;
          }
      };
  };
  var analyticsEvent = function analyticsEvent(eventObj) {
      var fn = arguments.length <= 1 || arguments[1] === undefined ? Function.prototype : arguments[1];

      //https://developers.google.com/analytics/devguides/collection/analyticsjs/command-queue-reference#send
      if (!eventObj) {
          return fn;
      }

      return function () {
          try {
              if (!eventObj.project) eventObj.project = getCurrentProject();
              if (!eventObj.user) eventObj.user = getUser();
              CatarseAnalytics.event(eventObj);
          } catch (e) {
              console.error('[h.analyticsEvent] error:', e);
          }
          fn();
      };
  };
  var _analyticsOneTimeEventFired = {};
  var analyticsOneTimeEvent = function analyticsOneTimeEvent(eventObj, fn) {
      if (!eventObj) {
          return fn;
      }

      var eventKey = _.compact([eventObj.cat, eventObj.act]).join('_');
      if (!eventKey) {
          throw new Error('Should inform cat or act');
      }
      return function () {
          if (!_analyticsOneTimeEventFired[eventKey]) {
              //console.log('oneTimeEvent',eventKey);
              _analyticsOneTimeEventFired[eventKey] = true;
              var fireEvent = analyticsEvent(eventObj, fn);
              fireEvent();
          }
      };
  };
  var monetaryToFloat = function monetaryToFloat(propValue) {
      return parseFloat(propValue().replace('.', '').replace(',', '.'));
  };
  var applyMonetaryMask = function applyMonetaryMask(number) {
      var onlyNumbers = String(number).replace(/[^0-9]|[.,]/g, ''),
          integerPart = onlyNumbers.slice(0, onlyNumbers.length - 2),
          decimalPart = onlyNumbers.slice(onlyNumbers.length - 2);

      integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

      return integerPart + ',' + decimalPart;
  };
  var addChar = function addChar(position, maskChar) {
      return function (char) {
          return function (string) {
              if (string.length === position && char !== maskChar) {
                  return string + maskChar;
              }
              return string;
          };
      };
  };
  var readMaskDefinition = function readMaskDefinition(maskCharDefinitions) {
      return function (maskDefinition) {
          return _.compact(_.map(maskDefinition, function (letter, index) {
              return letter in maskCharDefinitions ? null : [index, letter];
          }));
      };
  };
  var isCharAllowed = function isCharAllowed(maskCharDefinitions) {
      return function (maskDefinition) {
          return function (position, newChar) {
              if (position >= maskDefinition.length) {
                  return false;
              }

              var maskChar = maskDefinition.charAt(position);
              if (maskChar in maskCharDefinitions) {
                  return maskCharDefinitions[maskChar].test(newChar);
              } else {
                  return newChar === maskChar || isCharAllowed(maskCharDefinitions)(maskDefinition)(position + 1, newChar);
              }
          };
      };
  };
  var applyMask = function applyMask(maskDefinition) {
      var maskFunctions = _.map(maskDefinition, function (maskChar) {
          return addChar(maskChar[0], maskChar[1]);
      });
      return function (string, newChar) {
          var addNewCharFunctions = _.map(maskFunctions, function (el) {
              return el(newChar);
          });
          var applyMaskFunctions = _.reduce(addNewCharFunctions, function (memo, f) {
              return _.isFunction(memo) ? _.compose(f, memo) : f;
          });
          return applyMaskFunctions(string);
      };
  };
  var mask = function mask(maskDefinition, value) {
      var maskCharDefinitions = {
          '9': /\d/,
          'A': /[a-zA-Z]/
      },
          readMask = readMaskDefinition(maskCharDefinitions),
          isStrCharAllowed = isCharAllowed(maskCharDefinitions),
          applyValueMask = applyMask(readMask(maskDefinition)),
          restrictInput = isStrCharAllowed(maskDefinition);

      return _.reduce(value, function (memo, chr) {
          if (restrictInput(memo.length, chr)) {
              memo = applyValueMask(memo, chr) + chr;
          }
          return memo;
      }, '');
  };
  var removeStoredObject = function removeStoredObject(sessionKey) {
      return sessionStorage.removeItem(sessionKey);
  };
  var currentProject = m.prop();
  var setProject = function setProject(project) {
      currentProject(project);
  };
  var getProject = function getProject() {
      return currentProject;
  };
  var currentReward = m.prop();
  var setReward = function setReward(reward) {
      currentReward(reward);
  };
  var getReward = function getReward() {
      return currentReward;
  };
  var buildLink = function buildLink(link, refStr) {
      return '/' + link + (refStr ? '?ref=' + refStr : '');
  };
  var analyticsWindowScroll = function analyticsWindowScroll(eventObj) {
      if (eventObj) {
          (function () {
              var fired = false;
              window.addEventListener('scroll', function (e) {
                  //console.log('windowScroll');
                  if (!fired && window.$ && $(document).scrollTop() > $(window).height() * (3 / 4)) {
                      fired = true;
                      var fireEvent = analyticsEvent(eventObj);
                      fireEvent();
                  }
              });
          })();
      }
  };
  var analytics = {
      event: analyticsEvent,
      oneTimeEvent: analyticsOneTimeEvent,
      windowScroll: analyticsWindowScroll
  };
  var projectFullPermalink = function projectFullPermalink(project) {
      var permalink = void 0;
      if (typeof project === 'function') {
          permalink = project().permalink;
      } else {
          permalink = project.permalink;
      }

      return 'https://www.catarse.me/' + permalink;
  };
  var isProjectPage = function isProjectPage() {
      var path = window.location.pathname,
          isOnInsights = path.indexOf('/insights') > -1,
          isOnEdit = path.indexOf('/edit') > -1,
          isOnContribution = path.indexOf('/contribution') > -1;

      return !isOnEdit && !isOnInsights && !isOnContribution;
  };
  setMomentifyLocale();
  closeFlash();
  closeModal();

  var h = {
      authenticityToken: authenticityToken,
      buildLink: buildLink,
      cumulativeOffset: cumulativeOffset,
      discuss: discuss,
      existy: existy,
      validateEmail: validateEmail,
      validateCpf: validateCpf,
      momentify: momentify,
      momentFromString: momentFromString,
      formatNumber: formatNumber,
      idVM: idVM,
      getUser: getUser,
      getApiHost: getApiHost,
      getCurrentProject: getCurrentProject,
      toggleProp: toggleProp,
      loader: loader,
      newFeatureBadge: newFeatureBadge,
      fbParse: fbParse,
      pluralize: pluralize,
      simpleFormat: simpleFormat,
      translatedTime: translatedTime,
      rewardSouldOut: rewardSouldOut,
      rewardRemaning: rewardRemaning,
      parseUrl: parseUrl,
      hashMatch: hashMatch,
      redrawHashChange: redrawHashChange,
      useAvatarOrDefault: useAvatarOrDefault,
      locationActionMatch: locationActionMatch,
      navigateToDevise: navigateToDevise,
      navigateTo: navigateTo,
      storeAction: storeAction,
      callStoredAction: callStoredAction,
      UIHelper: UIHelper,
      toAnchor: toAnchor,
      paramByName: paramByName,
      i18nScope: i18nScope,
      RDTracker: RDTracker,
      selfOrEmpty: selfOrEmpty,
      scrollTo: scrollTo,
      projectStateTextClass: projectStateTextClass,
      validationErrors: validationErrors,
      validate: validate,
      analytics: analytics,
      strip: strip,
      storeObject: storeObject,
      getStoredObject: getStoredObject,
      removeStoredObject: removeStoredObject,
      setProject: setProject,
      getProject: getProject,
      setReward: setReward,
      getReward: getReward,
      applyMonetaryMask: applyMonetaryMask,
      monetaryToFloat: monetaryToFloat,
      mask: mask,
      projectFullPermalink: projectFullPermalink,
      isProjectPage: isProjectPage
  };

  var models = {
      country: postgrest$1.model('countries'),
      state: postgrest$1.model('states'),
      contributionDetail: postgrest$1.model('contribution_details'),
      contributionActivity: postgrest$1.model('contribution_activities'),
      projectDetail: postgrest$1.model('project_details'),
      userDetail: postgrest$1.model('user_details'),
      balance: postgrest$1.model('balances'),
      balanceTransaction: postgrest$1.model('balance_transactions'),
      balanceTransfer: postgrest$1.model('balance_transfers'),
      user: postgrest$1.model('users'),
      bankAccount: postgrest$1.model('bank_accounts'),
      rewardDetail: postgrest$1.model('reward_details'),
      projectReminder: postgrest$1.model('project_reminders'),
      projectReport: postgrest$1.model('project_reports'),
      contributions: postgrest$1.model('contributions'),
      directMessage: postgrest$1.model('direct_messages'),
      teamTotal: postgrest$1.model('team_totals'),
      projectAccount: postgrest$1.model('project_accounts'),
      projectAccountError: postgrest$1.model('project_account_errors'),
      projectContribution: postgrest$1.model('project_contributions'),
      projectContributiorsStat: postgrest$1.model('project_stat_contributors'),
      projectPostDetail: postgrest$1.model('project_posts_details'),
      projectContributionsPerDay: postgrest$1.model('project_contributions_per_day'),
      projectContributionsPerLocation: postgrest$1.model('project_contributions_per_location'),
      projectContributionsPerRef: postgrest$1.model('project_contributions_per_ref'),
      projectTransfer: postgrest$1.model('project_transfers'),
      project: postgrest$1.model('projects'),
      projectSearch: postgrest$1.model('rpc/project_search'),
      category: postgrest$1.model('categories'),
      categoryTotals: postgrest$1.model('category_totals'),
      categoryFollower: postgrest$1.model('category_followers'),
      teamMember: postgrest$1.model('team_members'),
      notification: postgrest$1.model('notifications'),
      statistic: postgrest$1.model('statistics'),
      successfulProject: postgrest$1.model('successful_projects'),
      finishedProject: postgrest$1.model('finished_projects'),
      userFriend: postgrest$1.model('user_friends'),
      userFollow: postgrest$1.model('user_follows'),
      followAllFriends: postgrest$1.model('rpc/follow_all_friends'),
      contributor: postgrest$1.model('contributors'),
      userFollower: postgrest$1.model('user_followers'),
      creatorSuggestion: postgrest$1.model('creator_suggestions'),
      userContribution: postgrest$1.model('user_contributions')
  };

  models.teamMember.pageSize(40);
  models.rewardDetail.pageSize(false);
  models.project.pageSize(30);
  models.category.pageSize(50);
  models.contributionActivity.pageSize(40);
  models.successfulProject.pageSize(9);
  models.finishedProject.pageSize(9);
  models.country.pageSize(false);
  models.state.pageSize(false);
  models.projectContribution.pageSize(9);
  models.contributor.pageSize(9);

  var userListVM = postgrest.paginationVM(models.user, 'id.desc', { 'Prefer': 'count=exact' });

  var vm = postgrest.filtersVM({
      full_text_index: '@@',
      deactivated_at: 'is.null'
  });
  var paramToString = function paramToString(p) {
      return (p || '').toString().trim();
  };
  // Set default values
  vm.deactivated_at(null).order({
      id: 'desc'
  });

  vm.deactivated_at.toFilter = function () {
      var filter = JSON.parse(vm.deactivated_at());
      return filter;
  };

  vm.full_text_index.toFilter = function () {
      var filter = paramToString(vm.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  var filterMain = {
      view: function view(ctrl, args) {
          var inputWrapperClass = args.inputWrapperClass || '.w-input.text-field.positive.medium',
              btnClass = args.btnClass || '.btn.btn-large.u-marginbottom-10';

          return m$1('.w-row', [m$1('.w-col.w-col-10', [m$1('input' + inputWrapperClass + '[placeholder="' + args.placeholder + '"][type="text"]', {
              onchange: m$1.withAttr('value', args.vm),
              value: args.vm()
          })]), m$1('.w-col.w-col-2', [m$1('input#filter-btn' + btnClass + '[type="submit"][value="Buscar"]')])]);
      }
  };

  var adminFilter = {
      controller: function controller() {
          return {
              toggler: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var filterBuilder = args.filterBuilder,
              data = args.data,
              label = args.label || '',
              main = _$1.findWhere(filterBuilder, {
              component: filterMain
          });

          return m$1('#admin-contributions-filter.w-section.page-header', [m$1('.w-container', [m$1('.fontsize-larger.u-text-center.u-marginbottom-30', label), m$1('.w-form', [m$1('form', {
              onsubmit: args.submit
          }, [main ? m$1.component(main.component, main.data) : '', m$1('.u-marginbottom-20.w-row', m$1('button.w-col.w-col-12.fontsize-smallest.link-hidden-light[style="background: none; border: none; outline: none; text-align: left;"][type="button"]', {
              onclick: ctrl.toggler.toggle
          }, 'Filtros avançados  >')), ctrl.toggler() ? m$1('#advanced-search.w-row.admin-filters', [_$1.map(filterBuilder, function (f) {
              return f.component !== filterMain ? m$1.component(f.component, f.data) : '';
          })]) : ''])])])]);
      }
  };

  var adminItem = {
      controller: function controller(args) {
          return {
              displayDetailBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var item = args.item;

          return m$1('.w-clearfix.card.u-radius.u-marginbottom-20.results-admin-items', [m$1.component(args.listItem, {
              item: item,
              key: args.key
          }), m$1('button.w-inline-block.arrow-admin.fa.fa-chevron-down.fontcolor-secondary', {
              onclick: ctrl.displayDetailBox.toggle
          }), ctrl.displayDetailBox() ? m$1.component(args.listDetail, {
              item: item,
              key: args.key
          }) : '']);
      }
  };

  var adminList = {
      controller: function controller(args) {
          var list = args.vm.list;

          if (!list.collection().length && list.firstPage) {
              list.firstPage().then(null, function (serverError) {
                  args.vm.error(serverError.message);
              });
          }
      },
      view: function view(ctrl, args) {
          var list = args.vm.list,
              error = args.vm.error,
              label = args.label || '';

          return m$1('.w-section.section', [m$1('.w-container', error() ? m$1('.card.card-error.u-radius.fontweight-bold', error()) : [m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-9', [m$1('.fontsize-base', list.isLoading() ? 'Carregando ' + label.toLowerCase() + '...' : [m$1('span.fontweight-semibold', list.total()), ' ' + label.toLowerCase() + ' encontrados'])])]), m$1('#admin-contributions-list.w-container', [list.collection().map(function (item) {
              return m$1.component(adminItem, {
                  listItem: args.listItem,
                  listDetail: args.listDetail,
                  item: item,
                  key: item.id
              });
          }), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-2.w-col-push-5', [list.isLoading() ? h.loader() : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais')])])])])])])]);
      }
  };

  var adminUser = {
      view: function view(ctrl, args) {
          var user = args.item;

          return m$1('.w-row.admin-user', [m$1('.w-col.w-col-3.w-col-small-3.u-marginbottom-10', [m$1('img.user-avatar[src="' + h.useAvatarOrDefault(user.profile_img_thumbnail) + '"]')]), m$1('.w-col.w-col-9.w-col-small-9', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-10', [m$1('a.alt-link[target="_blank"][href="/users/' + user.id + '/edit"]', user.name || user.email)]), m$1('.fontsize-smallest', 'Usuário: ' + user.id), m$1('.fontsize-smallest.fontcolor-secondary', 'Email: ' + user.email), args.additional_data])]);
      }
  };

  var adminUserItem = {
      view: function view(ctrl, args) {
          return m$1('.w-row', [m$1('.w-col.w-col-4', [m$1.component(adminUser, args)])]);
      }
  };

  var adminResetPassword = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              error = m$1.prop(false),
              fail = m$1.prop(false),
              key = builder.property,
              data = {},
              item = args.item;

          builder.requestOptions.config = function (xhr) {
              if (h.authenticityToken()) {
                  xhr.setRequestHeader('X-CSRF-Token', h.authenticityToken());
              }
          };

          var l = m$1.prop(false),
              load = function load() {
              return m$1.request(_$1.extend({}, { data: data }, builder.requestOptions));
          },
              newPassword = m$1.prop(''),
              error_message = m$1.prop('');

          var requestError = function requestError(err) {
              l(false);
              error_message(err.errors[0]);
              complete(true);
              error(true);
          };
          var updateItem = function updateItem(res) {
              l(false);
              _$1.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              l(true);
              data[key] = newPassword();
              load().then(updateItem, requestError);
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
              };
          };

          return {
              complete: complete,
              error: error,
              error_message: error_message,
              l: l,
              newPassword: newPassword,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m$1('label', data.innerLabel), m$1('input.w-input.text-field[type="text"][name="' + data.property + '"][placeholder="' + data.placeholder + '"]', {
              onchange: m$1.withAttr('value', ctrl.newPassword),
              value: ctrl.newPassword()
          }), m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', 'Senha alterada com sucesso.')])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', ctrl.error_message())])])]) : '']);
      }
  };

  var adminInputAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              error = m$1.prop(false),
              fail = m$1.prop(false),
              data = {},
              item = args.item,
              key = builder.property,
              forceValue = builder.forceValue || null,
              newValue = m$1.prop(forceValue);

          h.idVM.id(item[builder.updateKey]);

          var l = postgrest.loaderWithToken(builder.model.patchOptions(h.idVM.parameters(), data));

          var updateItem = function updateItem(res) {
              _.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              data[key] = newValue();
              l.load().then(updateItem, function () {
                  complete(true);
                  error(true);
              });
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
                  newValue(forceValue);
              };
          };

          return {
              complete: complete,
              error: error,
              l: l,
              newValue: newValue,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m$1('label', data.innerLabel), data.forceValue === undefined ? m$1('input.w-input.text-field[type="text"][placeholder="' + data.placeholder + '"]', {
              onchange: m$1.withAttr('value', ctrl.newValue),
              value: ctrl.newValue()
          }) : '', m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', data.successMessage)])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', 'Houve um problema na requisição. ' + data.errorMessage)])])]) : '']);
      }
  };

  var adminNotificationHistory = {
      controller: function controller(args) {
          var notifications = m$1.prop([]),
              getNotifications = function getNotifications(user) {
              var notification = models.notification;
              notification.getPageWithToken(postgrest.filtersVM({
                  user_id: 'eq',
                  sent_at: 'is.null'
              }).user_id(user.id).sent_at(!null).order({
                  sent_at: 'desc'
              }).parameters()).then(notifications);
          };

          getNotifications(args.user);

          return {
              notifications: notifications
          };
      },
      view: function view(ctrl) {
          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Histórico de notificações'), ctrl.notifications().map(function (cEvent) {
              return m$1('.w-row.fontsize-smallest.lineheight-looser.date-event', [m$1('.w-col.w-col-24', [m$1('.fontcolor-secondary', h.momentify(cEvent.sent_at, 'DD/MM/YYYY, HH:mm'), ' - ', cEvent.template_name, cEvent.origin ? ' - ' + cEvent.origin : '')])]);
          })]);
      }
  };

  var adminUserDetail = {
      controller: function controller() {
          return {
              actions: {
                  reset: {
                      property: 'password',
                      callToAction: 'Redefinir',
                      innerLabel: 'Nova senha de Usuário:',
                      outerLabel: 'Redefinir senha',
                      placeholder: 'ex: 123mud@r',
                      model: models.user
                  },
                  reactivate: {
                      property: 'deactivated_at',
                      updateKey: 'id',
                      callToAction: 'Reativar',
                      innerLabel: 'Tem certeza que deseja reativar esse usuário?',
                      successMessage: 'Usuário reativado com sucesso!',
                      errorMessage: 'O usuário não pôde ser reativado!',
                      outerLabel: 'Reativar usuário',
                      forceValue: null,
                      model: models.user
                  }
              }
          };
      },
      view: function view(ctrl, args) {
          var actions = ctrl.actions,
              item = args.item,
              details = args.details,
              addOptions = function addOptions(builder, id) {
              return _$1.extend({}, builder, {
                  requestOptions: {
                      url: '/users/' + id + '/new_password',
                      method: 'POST'
                  }
              });
          };

          return m$1('#admin-contribution-detail-box', [m$1('.divider.u-margintop-20.u-marginbottom-20'), m$1('.w-row.u-marginbottom-30', [m$1.component(adminResetPassword, {
              data: addOptions(actions.reset, item.id),
              item: item
          }), item.deactivated_at ? m$1.component(adminInputAction, { data: actions.reactivate, item: item }) : '']), m$1('.w-row.card.card-terciary.u-radius', [m$1.component(adminNotificationHistory, {
              user: item
          })])]);
      }
  };

  var dropdown = {
      view: function view(ctrl, args) {
          var opts = _$1.isFunction(args.options) ? args.options() : args.options;

          return m$1('select' + args.classes + '[id="' + args.id + '"]', {
              onchange: m$1.withAttr('value', args.valueProp),
              value: args.valueProp()
          }, _$1.map(opts, function (data) {
              return m$1('option[value="' + data.value + '"]', data.option);
          }));
      }
  };

  var filterDropdown = {
      view: function view(ctrl, args) {
          var wrapper_c = args.wrapper_class || '.w-col.w-col-3.w-col-small-6';
          return m$1(wrapper_c, [m$1('label.fontsize-smaller[for="' + args.index + '"]', args.custom_label ? m$1.component(args.custom_label[0], args.custom_label[1]) : args.label), m$1.component(dropdown, {
              id: args.index,
              classes: '.w-select.text-field.positive',
              valueProp: args.vm,
              options: args.options
          })]);
      }
  };

  var adminUsers = {
      controller: function controller() {
          var listVM = userListVM,
              filterVM = vm,
              error = m$1.prop(''),
              itemBuilder = [{
              component: adminUser,
              wrapperClass: '.w-col.w-col-4'
          }],
              filterBuilder = [{ //name
              component: filterMain,
              data: {
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por nome, e-mail, Ids do usuário...'
              }
          }, { //status
              component: filterDropdown,
              data: {
                  label: 'Com o estado',
                  index: 'status',
                  name: 'deactivated_at',
                  vm: filterVM.deactivated_at,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: null,
                      option: 'ativo'
                  }, {
                      value: !null,
                      option: 'desativado'
                  }]
              }
          }],
              submit = function submit() {
              listVM.firstPage(filterVM.parameters()).then(null, function (serverError) {
                  error(serverError.message);
              });
              return false;
          };

          return {
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              listVM: {
                  list: listVM,
                  error: error
              },
              submit: submit
          };
      },
      view: function view(ctrl) {
          var label = 'Usuários';

          return [m$1.component(adminFilter, {
              form: ctrl.filterVM.formDescriber,
              filterBuilder: ctrl.filterBuilder,
              label: label,
              submit: ctrl.submit
          }), m$1.component(adminList, {
              vm: ctrl.listVM,
              label: label,
              listItem: adminUserItem,
              listDetail: adminUserDetail
          })];
      }
  };

  var contributionListVM = postgrest.paginationVM(models.contributionDetail, 'id.desc', { 'Prefer': 'count=exact' });

  var vm$1 = postgrest$1.filtersVM({
      full_text_index: '@@',
      state: 'eq',
      gateway: 'eq',
      value: 'between',
      created_at: 'between'
  });
  var paramToString$1 = function paramToString(p) {
      return (p || '').toString().trim();
  };
  // Set default values
  vm$1.state('');
  vm$1.gateway('');
  vm$1.order({
      id: 'desc'
  });

  vm$1.created_at.lte.toFilter = function () {
      var filter = paramToString$1(vm$1.created_at.lte());
      return filter && h.momentFromString(filter).endOf('day').format('');
  };

  vm$1.created_at.gte.toFilter = function () {
      var filter = paramToString$1(vm$1.created_at.gte());
      return filter && h.momentFromString(filter).format();
  };

  vm$1.full_text_index.toFilter = function () {
      var filter = paramToString$1(vm$1.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  var adminProject = {
      view: function view(ctrl, args) {
          var project = args.item;
          return m$1('.w-row.admin-project', [m$1('.w-col.w-col-3.w-col-small-3.u-marginbottom-10', [m$1('img.thumb-project.u-radius[src=' + project.project_img + '][width=50]')]), m$1('.w-col.w-col-9.w-col-small-9', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-10', [m$1('a.alt-link[target="_blank"][href="/' + project.permalink + '"]', project.project_name)]), m$1('.fontsize-smallest.fontweight-semibold', project.project_state), m$1('.fontsize-smallest.fontcolor-secondary', h.momentify(project.project_online_date) + ' a ' + h.momentify(project.project_expires_at))])]);
      }
  };

  var adminContribution = {
      view: function view(ctrl, args) {
          var contribution = args.item;
          return m$1('.w-row.admin-contribution', [m$1('.fontweight-semibold.lineheight-tighter.u-marginbottom-10.fontsize-small', 'R$' + contribution.value), m$1('.fontsize-smallest.fontcolor-secondary', h.momentify(contribution.created_at, 'DD/MM/YYYY HH:mm[h]')), m$1('.fontsize-smallest', ['ID do Gateway: ', m$1('a.alt-link[target="_blank"][href="https://dashboard.pagar.me/#/transactions/' + contribution.gateway_id + '"]', contribution.gateway_id)])]);
      }
  };

  var adminContributionUser = {
      view: function view(ctrl, args) {
          var item = args.item,
              user = {
              profile_img_thumbnail: item.user_profile_img,
              id: item.user_id,
              name: item.user_name,
              email: item.email
          };

          var additionalData = m$1('.fontsize-smallest.fontcolor-secondary', 'Gateway: ' + item.payer_email);
          return m$1.component(adminUser, { item: user, additional_data: additionalData });
      }
  };

  //Add translations to payment state.
  var I18nScope = _.partial(h.i18nScope, 'projects.payment');

  var paymentStatus = {
      controller: function controller(args) {
          var payment = args.item,
              card = null,
              displayPaymentMethod = void 0,
              paymentMethodClass = void 0,
              stateClass = void 0;

          card = function card() {
              if (payment.gateway_data) {
                  switch (payment.gateway.toLowerCase()) {
                      case 'moip':
                          return {
                              first_digits: payment.gateway_data.cartao_bin,
                              last_digits: payment.gateway_data.cartao_final,
                              brand: payment.gateway_data.cartao_bandeira
                          };
                      case 'pagarme':
                          return {
                              first_digits: payment.gateway_data.card_first_digits,
                              last_digits: payment.gateway_data.card_last_digits,
                              brand: payment.gateway_data.card_brand
                          };
                  }
              }
          };

          displayPaymentMethod = function displayPaymentMethod() {
              switch (payment.payment_method.toLowerCase()) {
                  case 'boletobancario':
                      return m$1('span#boleto-detail', '');
                  case 'cartaodecredito':
                      var cardData = card();
                      if (cardData) {
                          return m$1('#creditcard-detail.fontsize-smallest.fontcolor-secondary.lineheight-tight', [cardData.first_digits + '******' + cardData.last_digits, m$1('br'), cardData.brand + ' ' + payment.installments + 'x']);
                      }
                      return '';
              }
          };

          paymentMethodClass = function paymentMethodClass() {
              switch (payment.payment_method.toLowerCase()) {
                  case 'boletobancario':
                      return '.fa-barcode';
                  case 'cartaodecredito':
                      return '.fa-credit-card';
                  default:
                      return '.fa-question';
              }
          };

          stateClass = function stateClass() {
              switch (payment.state) {
                  case 'paid':
                      return '.text-success';
                  case 'refunded':
                      return '.text-refunded';
                  case 'pending':
                  case 'pending_refund':
                      return '.text-waiting';
                  default:
                      return '.text-error';
              }
          };

          return {
              displayPaymentMethod: displayPaymentMethod,
              paymentMethodClass: paymentMethodClass,
              stateClass: stateClass
          };
      },
      view: function view(ctrl, args) {
          var payment = args.item;

          return m$1('.w-row.payment-status', [m$1('.fontsize-smallest.lineheight-looser.fontweight-semibold', [m$1('span.fa.fa-circle' + ctrl.stateClass()), ' ' + I18n$1.t(payment.state, I18nScope())]), m$1('.fontsize-smallest.fontweight-semibold', [m$1('span.fa' + ctrl.paymentMethodClass()), ' ', m$1('a.link-hidden[href="#"]', payment.payment_method)]), m$1('.fontsize-smallest.fontcolor-secondary.lineheight-tight', [ctrl.displayPaymentMethod()])]);
      }
  };

  var adminContributionItem = {
      controller: function controller() {
          return {
              itemBuilder: [{
                  component: adminContributionUser,
                  wrapperClass: '.w-col.w-col-4'
              }, {
                  component: adminProject,
                  wrapperClass: '.w-col.w-col-4'
              }, {
                  component: adminContribution,
                  wrapperClass: '.w-col.w-col-2'
              }, {
                  component: paymentStatus,
                  wrapperClass: '.w-col.w-col-2'
              }]
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-row', _.map(ctrl.itemBuilder, function (panel) {
              return m$1(panel.wrapperClass, [m$1.component(panel.component, {
                  item: args.item,
                  key: args.key
              })]);
          }));
      }
  };

  var adminRadioAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              data = {},
              error = m$1.prop(false),
              fail = m$1.prop(false),
              item = args.item(),
              description = m$1.prop(item.description || ''),
              key = builder.getKey,
              newID = m$1.prop(''),
              getFilter = {},
              setFilter = {},
              radios = m$1.prop([]),
              getAttr = builder.radios,
              getKey = builder.getKey,
              getKeyValue = args.getKeyValue,
              updateKey = builder.updateKey,
              updateKeyValue = args.updateKeyValue,
              validate = builder.validate,
              selectedItem = builder.selectedItem || m$1.prop();

          setFilter[updateKey] = 'eq';
          var setVM = postgrest.filtersVM(setFilter);
          setVM[updateKey](updateKeyValue);

          getFilter[getKey] = 'eq';
          var getVM = postgrest.filtersVM(getFilter);
          getVM[getKey](getKeyValue);

          var getLoader = postgrest.loaderWithToken(builder.getModel.getPageOptions(getVM.parameters()));

          var setLoader = postgrest.loaderWithToken(builder.updateModel.patchOptions(setVM.parameters(), data));

          var updateItem = function updateItem(data) {
              if (data.length > 0) {
                  var newItem = _$1.findWhere(radios(), {
                      id: data[0][builder.selectKey]
                  });
                  selectedItem(newItem);
              } else {
                  error({
                      message: 'Nenhum item atualizado'
                  });
              }
              complete(true);
          };

          var populateRadios = function populateRadios(data) {
              var emptyState = builder.addEmpty;

              radios(data);

              if (!_$1.isUndefined(emptyState)) {
                  radios().unshift(emptyState);
              }
          };

          var fetch = function fetch() {
              getLoader.load().then(populateRadios, error);
          };

          var submit = function submit() {
              if (newID()) {
                  var validation = validate(radios(), newID());
                  if (_$1.isUndefined(validation)) {
                      data[builder.selectKey] = newID() === -1 ? null : newID();
                      setLoader.load().then(updateItem, error);
                  } else {
                      complete(true);
                      error({
                          message: validation
                      });
                  }
              }
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
                  newID('');
              };
          };

          var setDescription = function setDescription(text) {
              description(text);
              m$1.redraw();
          };

          fetch();

          return {
              complete: complete,
              description: description,
              setDescription: setDescription,
              error: error,
              setLoader: setLoader,
              getLoader: getLoader,
              newID: newID,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload,
              radios: radios
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              item = args.item(),
              btnValue = ctrl.setLoader() || ctrl.getLoader() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [ctrl.radios() ? _$1.map(ctrl.radios(), function (radio, index) {
              return m$1('.w-radio', [m$1('input#r-' + index + '.w-radio-input[type=radio][name="admin-radio"][value="' + radio.id + '"]', {
                  checked: radio.id === (item[data.selectKey] || item.id),
                  onclick: function onclick() {
                      ctrl.newID(radio.id);
                      ctrl.setDescription(radio.description);
                  }
              }), m$1('label.w-form-label[for="r-' + index + '"]', 'R$' + radio.minimum_value)]);
          }) : h.loader(), m$1('strong', 'Descrição'), m$1('p', ctrl.description()), m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', 'Recompensa alterada com sucesso!')])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', ctrl.error().message)])])]) : '']);
      }
  };

  var adminExternalAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              error = m$1.prop(false),
              fail = m$1.prop(false),
              data = {},
              item = args.item;

          builder.requestOptions.config = function (xhr) {
              if (h.authenticityToken()) {
                  xhr.setRequestHeader('X-CSRF-Token', h.authenticityToken());
              }
          };

          var reload = _$1.compose(builder.model.getRowWithToken, h.idVM.id(item[builder.updateKey]).parameters),
              l = m$1.prop(false);

          var reloadItem = function reloadItem() {
              return reload().then(updateItem);
          };

          var requestError = function requestError(err) {
              l(false);
              complete(true);
              error(true);
          };

          var updateItem = function updateItem(res) {
              _$1.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              l(true);
              m$1.request(builder.requestOptions).then(reloadItem, requestError);
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
              };
          };

          return {
              l: l,
              complete: complete,
              error: error,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m$1('label', data.innerLabel), m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', 'Requisição feita com sucesso.')])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', 'Houve um problema na requisição.')])])]) : '']);
      }
  };

  var adminTransaction = {
      view: function view(ctrl, args) {
          var contribution = args.contribution;
          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Detalhes do apoio'), m$1('.fontsize-smallest.lineheight-looser', ['Valor: R$' + h.formatNumber(contribution.value, 2, 3), m$1('br'), 'Taxa: R$' + h.formatNumber(contribution.gateway_fee, 2, 3), m$1('br'), 'Aguardando Confirmação: ' + (contribution.waiting_payment ? 'Sim' : 'Não'), m$1('br'), 'Anônimo: ' + (contribution.anonymous ? 'Sim' : 'Não'), m$1('br'), 'Id pagamento: ' + contribution.gateway_id, m$1('br'), 'Apoio: ' + contribution.contribution_id, m$1('br'), 'Chave: \n', m$1('br'), contribution.key, m$1('br'), 'Meio: ' + contribution.gateway, m$1('br'), 'Operadora: ' + (contribution.gateway_data && contribution.gateway_data.acquirer_name), m$1('br'), contribution.is_second_slip ? [m$1('a.link-hidden[href="#"]', 'Boleto bancário'), ' ', m$1('span.badge', '2a via')] : ''])]);
      }
  };

  var adminTransactionHistory = {
      controller: function controller(args) {
          var contribution = args.contribution,
              mapEvents = _$1.reduce([{
              date: contribution.paid_at,
              name: 'Apoio confirmado'
          }, {
              date: contribution.pending_refund_at,
              name: 'Reembolso solicitado'
          }, {
              date: contribution.refunded_at,
              name: 'Estorno realizado'
          }, {
              date: contribution.created_at,
              name: 'Apoio criado'
          }, {
              date: contribution.refused_at,
              name: 'Apoio cancelado'
          }, {
              date: contribution.deleted_at,
              name: 'Apoio excluído'
          }, {
              date: contribution.chargeback_at,
              name: 'Chargeback'
          }], function (memo, item) {
              if (item.date !== null && item.date !== undefined) {
                  item.originalDate = item.date;
                  item.date = h.momentify(item.date, 'DD/MM/YYYY, HH:mm');
                  return memo.concat(item);
              }

              return memo;
          }, []);

          return {
              orderedEvents: _$1.sortBy(mapEvents, 'originalDate')
          };
      },
      view: function view(ctrl) {
          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Histórico da transação'), ctrl.orderedEvents.map(function (cEvent) {
              return m$1('.w-row.fontsize-smallest.lineheight-looser.date-event', [m$1('.w-col.w-col-6', [m$1('.fontcolor-secondary', cEvent.date)]), m$1('.w-col.w-col-6', [m$1('div', cEvent.name)])]);
          })]);
      }
  };

  var adminReward = {
      view: function view(ctrl, args) {
          var reward = args.reward(),
              available = parseInt(reward.paid_count) + parseInt(reward.waiting_payment_count);

          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Recompensa'), m$1('.fontsize-smallest.lineheight-looser', reward.id ? ['ID: ' + reward.id, m$1('br'), 'Valor mínimo: R$' + h.formatNumber(reward.minimum_value, 2, 3), m$1('br'), m$1.trust('Disponíveis: ' + available + ' / ' + (reward.maximum_contributions || '&infin;')), m$1('br'), 'Aguardando confirmação: ' + reward.waiting_payment_count, m$1('br'), 'Descrição: ' + reward.description] : 'Apoio sem recompensa')]);
      }
  };

  var adminContributionDetail = {
      controller: function controller(args) {
          var l = void 0;
          var loadReward = function loadReward() {
              var model = models.rewardDetail,
                  reward_id = args.item.reward_id,
                  opts = model.getRowOptions(h.idVM.id(reward_id).parameters()),
                  reward = m$1.prop({});

              l = postgrest.loaderWithToken(opts);

              if (reward_id) {
                  l.load().then(_$1.compose(reward, _$1.first));
              }

              return reward;
          };

          return {
              reward: loadReward(),
              actions: {
                  transfer: {
                      property: 'user_id',
                      updateKey: 'id',
                      callToAction: 'Transferir',
                      innerLabel: 'Id do novo apoiador:',
                      outerLabel: 'Transferir Apoio',
                      placeholder: 'ex: 129908',
                      successMessage: 'Apoio transferido com sucesso!',
                      errorMessage: 'O apoio não foi transferido!',
                      model: models.contributionDetail
                  },
                  reward: {
                      getKey: 'project_id',
                      updateKey: 'contribution_id',
                      selectKey: 'reward_id',
                      radios: 'rewards',
                      callToAction: 'Alterar Recompensa',
                      outerLabel: 'Recompensa',
                      getModel: models.rewardDetail,
                      updateModel: models.contributionDetail,
                      selectedItem: loadReward(),
                      addEmpty: { id: -1, minimum_value: 10, description: 'Sem recompensa' },
                      validate: function validate(rewards, newRewardID) {
                          var reward = _$1.findWhere(rewards, { id: newRewardID });
                          return args.item.value >= reward.minimum_value ? undefined : 'Valor mínimo da recompensa é maior do que o valor da contribuição.';
                      }
                  },
                  refund: {
                      updateKey: 'id',
                      callToAction: 'Reembolso direto',
                      innerLabel: 'Tem certeza que deseja reembolsar esse apoio?',
                      outerLabel: 'Reembolsar Apoio',
                      model: models.contributionDetail
                  },
                  remove: {
                      property: 'state',
                      updateKey: 'id',
                      callToAction: 'Apagar',
                      innerLabel: 'Tem certeza que deseja apagar esse apoio?',
                      outerLabel: 'Apagar Apoio',
                      forceValue: 'deleted',
                      successMessage: 'Apoio removido com sucesso!',
                      errorMessage: 'O apoio não foi removido!',
                      model: models.contributionDetail
                  }
              },
              l: l
          };
      },
      view: function view(ctrl, args) {
          var actions = ctrl.actions,
              item = args.item,
              reward = ctrl.reward;

          var addOptions = function addOptions(builder, id) {
              return _$1.extend({}, builder, {
                  requestOptions: {
                      url: '/admin/contributions/' + id + '/gateway_refund',
                      method: 'PUT'
                  }
              });
          };

          return m$1('#admin-contribution-detail-box', [m$1('.divider.u-margintop-20.u-marginbottom-20'), m$1('.w-row.u-marginbottom-30', [m$1.component(adminInputAction, {
              data: actions.transfer,
              item: item
          }), ctrl.l() ? h.loader : m$1.component(adminRadioAction, {
              data: actions.reward,
              item: reward,
              getKeyValue: item.project_id,
              updateKeyValue: item.contribution_id
          }), m$1.component(adminExternalAction, {
              data: addOptions(actions.refund, item.id),
              item: item
          }), m$1.component(adminInputAction, {
              data: actions.remove,
              item: item
          })]), m$1('.w-row.card.card-terciary.u-radius', [m$1.component(adminTransaction, {
              contribution: item
          }), m$1.component(adminTransactionHistory, {
              contribution: item
          }), ctrl.l() ? h.loader : m$1.component(adminReward, {
              reward: reward,
              key: item.key
          })])]);
      }
  };

  var filterNumberRange = {
      view: function view(ctrl, args) {
          return m$1('.w-col.w-col-3.w-col-small-6', [m$1('label.fontsize-smaller[for="' + args.index + '"]', args.label), m$1('.w-row', [m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[id="' + args.index + '"][type="text"]', {
              onchange: m$1.withAttr('value', args.first),
              value: args.first()
          })]), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m$1('.fontsize-smaller.u-text-center.lineheight-looser', 'e')]), m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[type="text"]', {
              onchange: m$1.withAttr('value', args.last),
              value: args.last()
          })])])]);
      }
  };

  var filterDateRange = {
      view: function view(ctrl, args) {
          return m$1('.w-col.w-col-3.w-col-small-6', [m$1('label.fontsize-smaller[for="' + args.index + '"]', args.label), m$1('.w-row', [m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[id="' + args.index + '"][type="text"]', {
              onchange: m$1.withAttr('value', args.first),
              value: args.first()
          })]), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m$1('.fontsize-smaller.u-text-center.lineheight-looser', 'e')]), m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[type="text"]', {
              onchange: m$1.withAttr('value', args.last),
              value: args.last()
          })])])]);
      }
  };

  var adminContributions = {
      controller: function controller() {
          var listVM = contributionListVM,
              filterVM = vm$1,
              error = m$1.prop(''),
              filterBuilder = [{ //full_text_index
              component: filterMain,
              data: {
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por projeto, email, Ids do usuário e do apoio...'
              }
          }, { //state
              component: filterDropdown,
              data: {
                  label: 'Com o estado',
                  name: 'state',
                  vm: filterVM.state,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: 'paid',
                      option: 'paid'
                  }, {
                      value: 'refused',
                      option: 'refused'
                  }, {
                      value: 'pending',
                      option: 'pending'
                  }, {
                      value: 'pending_refund',
                      option: 'pending_refund'
                  }, {
                      value: 'refunded',
                      option: 'refunded'
                  }, {
                      value: 'chargeback',
                      option: 'chargeback'
                  }, {
                      value: 'deleted',
                      option: 'deleted'
                  }]
              }
          }, { //gateway
              component: filterDropdown,
              data: {
                  label: 'gateway',
                  name: 'gateway',
                  vm: filterVM.gateway,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: 'Pagarme',
                      option: 'Pagarme'
                  }, {
                      value: 'MoIP',
                      option: 'MoIP'
                  }, {
                      value: 'PayPal',
                      option: 'PayPal'
                  }, {
                      value: 'Credits',
                      option: 'Créditos'
                  }]
              }
          }, { //value
              component: filterNumberRange,
              data: {
                  label: 'Valores entre',
                  first: filterVM.value.gte,
                  last: filterVM.value.lte
              }
          }, { //created_at
              component: filterDateRange,
              data: {
                  label: 'Período do apoio',
                  first: filterVM.created_at.gte,
                  last: filterVM.created_at.lte
              }
          }],
              submit = function submit() {
              error(false);
              listVM.firstPage(filterVM.parameters()).then(null, function (serverError) {
                  error(serverError.message);
              });
              return false;
          };

          return {
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              listVM: {
                  list: listVM,
                  error: error
              },
              data: {
                  label: 'Apoios'
              },
              submit: submit
          };
      },
      view: function view(ctrl) {
          return [m$1.component(adminFilter, {
              form: ctrl.filterVM.formDescriber,
              filterBuilder: ctrl.filterBuilder,
              submit: ctrl.submit
          }), m$1.component(adminList, {
              vm: ctrl.listVM,
              listItem: adminContributionItem,
              listDetail: adminContributionDetail
          })];
      }
  };

  var landingSignup = {
      controller: function controller(args) {
          var builder = args.builder,
              email = m$1.prop(''),
              error = m$1.prop(false),
              submit = function submit() {
              if (h.validateEmail(email())) {
                  return true;
              } else {
                  error(true);
                  return false;
              }
          };
          return {
              email: email,
              submit: submit,
              error: error
          };
      },
      view: function view(ctrl, args) {
          var errorClasses = !ctrl.error ? '.positive.error' : '';
          return m$1('form.w-form[id="email-form"][method="post"][action="' + args.builder.customAction + '"]', {
              onsubmit: ctrl.submit
          }, [m$1('.w-col.w-col-5', [m$1('input' + errorClasses + '.w-input.text-field.medium[name="EMAIL"][placeholder="Digite seu email"][type="text"]', {
              config: h.RDTracker('landing-flex'),
              onchange: m$1.withAttr('value', ctrl.email),
              value: ctrl.email()
          }), ctrl.error() ? m$1('span.fontsize-smaller.text-error', 'E-mail inválido') : '']), m$1('.w-col.w-col-3', [m$1('input.w-button.btn.btn-large[type="submit"][value="Cadastrar"]')])]);
      }
  };

  var error = m.prop('');
  var rewards = m.prop([]);
  var noReward = {
      id: -1,
      description: 'Obrigado. Eu só quero ajudar o projeto.',
      minimum_value: 10
  };
  var contributionValue = m.prop(noReward.minimum_value + ',00');
  var selectedReward = m.prop(noReward);
  var vm$3 = postgrest$1.filtersVM({
      project_id: 'eq'
  });
  var rewardsLoader = function rewardsLoader(project_id) {
      vm$3.project_id(project_id);

      return postgrest$1.loaderWithToken(models.rewardDetail.getPageOptions(vm$3.parameters()));
  };

  var fetchRewards = function fetchRewards(project_id) {
      return rewardsLoader(project_id).load().then(rewards);
  };

  var selectReward = function selectReward(reward) {
      return function () {
          if (rewardVM.selectedReward() !== reward) {
              rewardVM.selectedReward(reward);

              contributionValue(h.applyMonetaryMask(reward.minimum_value + ',00'));
          }
      };
  };

  var applyMask$1 = _.compose(contributionValue, h.applyMonetaryMask);

  var rewardVM = {
      error: error,
      rewards: rewards,
      applyMask: applyMask$1,
      noReward: noReward,
      fetchRewards: fetchRewards,
      selectReward: selectReward,
      selectedReward: selectedReward,
      contributionValue: contributionValue,
      rewardsLoader: rewardsLoader,
      getValue: contributionValue,
      setValue: contributionValue
  };

  var idVM$2 = h.idVM;
  var userDetails$1 = m$1.prop([]);
  var currentUser = m$1.prop();
  var createdVM = postgrest$1.filtersVM({ user_id: 'eq' });
  var getUserCreatedProjects = function getUserCreatedProjects(user_id) {
      createdVM.user_id(user_id).order({ project_id: 'desc' });

      models.projectDetail.pageSize(3);

      var lUserCreated = postgrest$1.loaderWithToken(models.projectDetail.getPageOptions(createdVM.parameters()));

      return lUserCreated.load();
  };

  var getUserContributedProjects = function getUserContributedProjects(user_id) {
      var contextVM = postgrest$1.filtersVM({
          user_id: 'eq',
          state: 'in'
      });

      contextVM.user_id(user_id).order({
          created_at: 'desc'
      }).state(['refunded', 'pending_refund', 'paid']);

      models.userContribution.pageSize(3);

      var lUserContributed = postgrest$1.loaderWithToken(models.userContribution.getPageOptions(contextVM.parameters()));

      return lUserContributed.load();
  };

  var fetchUser = function fetchUser(user_id) {
      var handlePromise = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
      var customProp = arguments.length <= 2 || arguments[2] === undefined ? currentUser : arguments[2];

      idVM$2.id(user_id);

      var lUser = postgrest$1.loaderWithToken(models.userDetail.getRowOptions(idVM$2.parameters()));

      return !handlePromise ? lUser.load() : lUser.load().then(_$1.compose(customProp, _$1.first));
  };

  var userVM = {
      getUserCreatedProjects: getUserCreatedProjects,
      getUserContributedProjects: getUserContributedProjects,
      currentUser: currentUser,
      fetchUser: fetchUser
  };

  var idVM$1 = h.idVM;
  var currentProject$1 = m$1.prop();
  var userDetails = m$1.prop();
  var vm$2 = postgrest$1.filtersVM({ project_id: 'eq' });
  var init = function init(project_id, project_user_id) {
      vm$2.project_id(project_id);

      var lProject = postgrest$1.loaderWithToken(models.projectDetail.getRowOptions(vm$2.parameters()));

      fetchParallelData(project_id, project_user_id);

      return lProject.load().then(function (data) {
          return currentProject$1(_$1.first(data));
      });
  };

  var fetchParallelData = function fetchParallelData(project_id, project_user_id) {
      userVM.fetchUser(project_user_id, true, userDetails);

      rewardVM.fetchRewards(project_id);
  };

  var getCurrentProject$1 = function getCurrentProject() {
      var root = document.getElementById('application'),
          data = root && root.getAttribute('data-parameters');

      if (data) {
          var _currentProject = currentProject$1(JSON.parse(data));

          var project_id = _currentProject.project_id;
          var project_user_id = _currentProject.project_user_id;


          m$1.redraw(true);

          fetchParallelData(project_id, project_user_id);

          return currentProject$1();
      } else {
          return false;
      }
  };

  var routeToProject = function routeToProject(project, ref) {
      return function () {
          console.log('Routing to project: ', project);
          currentProject$1(project);

          return m$1.route(h.buildLink(project.permalink, ref), { project_id: project.project_id, project_user_id: project.project_user_id });
      };
  };

  var projectVM = {
      userDetails: userDetails,
      getCurrentProject: getCurrentProject$1,
      currentProject: currentProject$1,
      rewardDetails: rewardVM.rewards,
      routeToProject: routeToProject,
      init: init
  };

  var projectFriends = {
      controller: function controller(args) {
          var project = args.project,
              friendsSample = m$1.prop([]),
              listVM = postgrest$1.paginationVM(models.contributor, 'user_id.desc', {
              'Prefer': 'count=exact'
          }),
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq',
              is_follow: 'eq'
          }).project_id(project.project_id).is_follow(true);

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters()).then(function () {
                  friendsSample(_$1.sample(listVM.collection(), 2));
              });
          }
          return {
              project: project,
              listVM: listVM,
              friendsSample: friendsSample
          };
      },
      view: function view(ctrl, args) {
          var project = ctrl.project,
              friendsCount = ctrl.listVM.collection().length;
          return m$1('.friend-backed-card', [m$1('.friend-facepile', [_$1.map(ctrl.friendsSample(), function (user) {
              var profile_img = _$1.isEmpty(user.data.profile_img_thumbnail) ? '/assets/catarse_bootstrap/user.jpg' : user.data.profile_img_thumbnail;
              return m$1('img.user-avatar[src=\'' + profile_img + '\']');
          })]), m$1('p.fontsize-smallest.friend-namepile.lineheight-tighter', [m$1('span.fontweight-semibold', _$1.map(ctrl.friendsSample(), function (user) {
              return user.data.name.split(' ')[0];
          }).join(friendsCount > 2 ? ', ' : ' e ')), friendsCount > 2 ? [' e ', m$1('span.fontweight-semibold', 'mais ' + (friendsCount - ctrl.friendsSample().length))] : '', friendsCount > 1 ? ' apoiaram' : ' apoiou'])]);
      }
  };

  var I18nScope$1 = _$1.partial(h.i18nScope, 'projects.card');
  var projectCard = {
      controller: function controller(args) {
          var project = args.project,
              progress = project.progress.toFixed(2),
              remainingTextObj = h.translatedTime(project.remaining_time),
              elapsedTextObj = h.translatedTime(project.elapsed_time),
              type = args.type || 'small';

          var css = function css() {
              var cssClasses = {
                  'small': {
                      wrapper: '.w-col.w-col-4',
                      innerWrapper: '.card-project.card.u-radius',
                      thumb: '.card-project-thumb',
                      descriptionWrapper: '',
                      description: '.card-project-description.alt',
                      title: '.fontweight-semibold.u-text-center-small-only.lineheight-tight.u-marginbottom-10.fontsize-base',
                      author: '.w-hidden-small.w-hidden-tiny.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.w-hidden-small.w-hidden-tiny.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden-small.w-hidden-tiny.card-project-author.altt'
                  },
                  'medium': {
                      wrapper: '.w-col.w-col-6',
                      innerWrapper: '.card-project.card.u-radius',
                      thumb: '.card-project-thumb.medium',
                      descriptionWrapper: '',
                      description: '.card-project-description.alt',
                      title: '.fontsize-large.fontweight-semibold.u-marginbottom-10',
                      author: '.w-hidden-small.w-hidden-tiny.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.w-hidden-small.w-hidden-tiny.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden-small.w-hidden-tiny.card-project-author.altt'
                  },
                  'big': {
                      wrapper: '.card.u-radius.card-project',
                      innerWrapper: '.w-row',
                      thumb: '.w-col.w-col-8.w-col-medium-6.card-project-thumb.big',
                      descriptionWrapper: '.w-col.w-col-4.w-col-medium-6',
                      description: '.card-project-description.big',
                      title: '.fontsize-large.fontweight-semibold.u-marginbottom-10',
                      author: '.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden'
                  }
              };

              return cssClasses[type];
          };

          var cardMeter = function cardMeter() {
              var failed = function failed() {
                  return project.state === 'failed' ? 'card-secondary' : '';
              };

              return '.card-project-meter.' + project.mode + '.' + project.state + '.' + progress + '.' + failed();
          };

          var link = '/' + project.permalink + (args.ref ? '?ref=' + args.ref : '');

          return {
              css: css,
              link: link,
              type: type,
              progress: progress,
              remainingTextObj: remainingTextObj,
              elapsedTextObj: elapsedTextObj,
              cardMeter: cardMeter
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1(ctrl.css().wrapper, [m$1(ctrl.css().innerWrapper, [m$1('a' + ctrl.css().thumb + '[href="javascript:void(0);"]', {
              onclick: projectVM.routeToProject(project, args.ref),
              style: {
                  'background-image': 'url(' + project.project_img + ')',
                  'display': 'block'
              }
          }), m$1(ctrl.css().descriptionWrapper, [m$1(ctrl.css().description, [m$1(ctrl.css().title, [m$1('a.link-hidden[href="javascript:void(0);"]', {
              onclick: projectVM.routeToProject(project, args.ref)
          }, project.project_name)]), m$1(ctrl.css().author, I18n$1.t('by', I18nScope$1()) + ' ' + project.owner_name), m$1(ctrl.css().headline, [m$1('a.link-hidden[href="javascript:void(0);"]', {
              onclick: projectVM.routeToProject(project, args.ref)
          }, project.headline)])]), m$1(ctrl.css().city, [m$1('.fontsize-smallest.fontcolor-secondary', [m$1('span.fa.fa-map-marker.fa-1', ' '), ' ' + (project.city_name ? project.city_name : '') + ', ' + (project.state_acronym ? project.state_acronym : '')])]), m$1(ctrl.cardMeter(), [_$1.contains(['successful', 'failed', 'waiting_funds'], project.state) ? m$1('div', project.state === 'successful' && ctrl.progress < 100 ? I18n$1.t('display_status.flex_successful', I18nScope$1()) : I18n$1.t('display_status.' + project.state, I18nScope$1())) : m$1('.meter', [m$1('.meter-fill', {
              style: {
                  width: (ctrl.progress > 100 ? 100 : ctrl.progress) + '%'
              }
          })])]), m$1('.card-project-stats', [m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4', [m$1('.fontsize-base.fontweight-semibold', Math.ceil(project.progress) + '%')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.u-text-center-small-only', [m$1('.fontsize-smaller.fontweight-semibold', 'R$ ' + h.formatNumber(project.pledged)), m$1('.fontsize-smallest.lineheight-tightest', 'Levantados')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.u-text-right', project.expires_at ? [m$1('.fontsize-smaller.fontweight-semibold', ctrl.remainingTextObj.total + ' ' + ctrl.remainingTextObj.unit), m$1('.fontsize-smallest.lineheight-tightest', ctrl.remainingTextObj.total > 1 ? 'Restantes' : 'Restante')] : [m$1('.fontsize-smallest.lineheight-tight', ['Iniciado há', m$1('br'), ctrl.elapsedTextObj.total + ' ' + ctrl.elapsedTextObj.unit])])])])]), args.showFriends && ctrl.type === 'big' ? m$1('.w-col.w-col-4.w-col-medium-6', [m$1.component(projectFriends, { project: project })]) : '']), args.showFriends && ctrl.type !== 'big' ? m$1.component(projectFriends, { project: project }) : '']);
      }
  };

  var projectRow = {
      view: function view(ctrl, args) {
          var collection = args.collection,
              title = args.title || collection.title,
              ref = args.ref,
              showFriends = args.showFriends,
              wrapper = args.wrapper || '.w-section.section.u-marginbottom-40';

          if (collection.loader() || collection.collection().length > 0) {
              return m$1(wrapper, [m$1('.w-container', [!_$1.isUndefined(collection.title) || !_$1.isUndefined(collection.hash) ? m$1('.w-row.u-marginbottom-30', [m$1(showFriends ? '.w-col.w-col-8.w-col-small-6.w-col-tiny-6' : '.w-col.w-col-10.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-large.lineheight-looser', title)]), m$1(showFriends ? '.w-col.w-col-4.w-col-small-6.w-col-tiny-6' : '.w-col.w-col-2.w-col-small-6.w-col-tiny-6', [m$1('.w-row', [showFriends ? m$1('.w-col.w-col-6', [m$1('a.btn.btn-no-border.btn-small.btn-terciary[href="/connect-facebook?ref=' + ref + '"]', "Encontrar amigos")]) : '', m$1(showFriends ? '.w-col.w-col-6' : '.w-col.w-col-12', m$1('a.btn.btn-small.btn-terciary[href="javascript:void(0);"]', {
                  onclick: function onclick() {
                      return m$1.route('/explore', { ref: ref, filter: collection.hash });
                  }
              }, 'Ver todos'))])])]) : '', collection.loader() ? h.loader() : m$1('.w-row', _$1.map(collection.collection(), function (project) {
                  return m$1.component(projectCard, {
                      project: project,
                      ref: ref,
                      showFriends: showFriends
                  });
              }))])]);
          } else {
              return m$1('div');
          }
      }
  };

  var landingQA = {
      controller: function controller(args) {
          return {
              showAnswer: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('.card.qa-card.u-marginbottom-20.u-radius.btn-terciary', [m$1('.fontsize-base', {
              onclick: function onclick() {
                  ctrl.showAnswer.toggle();
                  args.onclick && args.onclick();
              }
          }, args.question), ctrl.showAnswer() ? m$1('p.u-margintop-20.fontsize-small', m$1.trust(args.answer)) : '']);
      }
  };

  var Flex = {
      controller: function controller() {
          var stats = m$1.prop([]),
              projects = m$1.prop([]),
              l = m$1.prop(),
              sample3 = _.partial(_.sample, _, 3),
              builder = {
              customAction: 'http://fazum.catarse.me/obrigado-landing-catarse-flex'
          },
              addDisqus = function addDisqus(el, isInitialized) {
              if (!isInitialized) {
                  h.discuss('https://catarse.me/flex', 'flex_page');
              }
          },
              flexVM = postgrest$1.filtersVM({
              mode: 'eq',
              state: 'eq',
              recommended: 'eq'
          }),
              statsLoader = postgrest$1.loaderWithToken(models.statistic.getRowOptions());

          flexVM.mode('flex').state('online').recommended(true);

          var projectsLoader = postgrest$1.loader(models.project.getPageOptions(flexVM.parameters()));

          statsLoader.load().then(stats);

          projectsLoader.load().then(_.compose(projects, sample3));

          return {
              addDisqus: addDisqus,
              builder: builder,
              statsLoader: statsLoader,
              stats: stats,
              projectsLoader: projectsLoader,
              projects: {
                  loader: projectsLoader,
                  collection: projects
              }
          };
      },
      view: function view(ctrl, args) {
          var stats = _.first(ctrl.stats());

          return [m$1('.w-section.hero-full.hero-zelo', [m$1('.w-container.u-text-center', [m$1('img.logo-flex-home[src=\'/assets/logo-flex.png\'][width=\'359\']'), m$1('.w-row', [m$1('.w-col.fontsize-large.u-marginbottom-60.w-col-push-2.w-col-8', 'Vamos construir uma nova modalidade de crowdfunding! Cadastre seu email e saiba como inscrever o seu projeto no flex!')]), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1.component(landingSignup, {
              builder: ctrl.builder
          }), m$1('.w-col.w-col-2')])])]), [m$1('.section', [m$1('.w-container', [m$1('.fontsize-largest.u-margintop-40.u-text-center', 'Pra quem será?'), m$1('.fontsize-base.u-text-center.u-marginbottom-60', 'Iniciaremos a fase de testes com categorias de projetos específicas'), m$1('div', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-6', [m$1('.u-text-center.u-marginbottom-20', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e393a01b66e250aca67cb_icon-zelo-com.png\'][width=\'210\']'), m$1('.fontsize-largest.lineheight-loose', 'Causas')]), m$1('p.fontsize-base', 'Flexibilidade para causas de impacto! Estaremos abertos a campanhas de organizações ou pessoas físicas para arrecadação de recursos para causas pessoais, projetos assistenciais, saúde, ajudas humanitárias, proteção aos animais, empreendedorismo socioambiental, ativismo ou qualquer coisa que una as pessoas para fazer o bem.')]), m$1('.w-col.w-col-6', [m$1('.u-text-center.u-marginbottom-20', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e3929a0daea230a5f12cd_icon-zelo-pessoal.png\'][width=\'210\']'), m$1('.fontsize-largest.lineheight-loose', 'Vaquinhas')]), m$1('p.fontsize-base', 'Campanhas simples que precisam de flexibilidade para arrecadar dinheiro com pessoas próximas. Estaremos abertos a uma variedade de campanhas pessoais que podem ir desde cobrir custos de estudos a ajudar quem precisa de tratamento médico. De juntar a grana para fazer aquela festa a comprar presentes para alguém com a ajuda da galera. ')])])])])]), m$1('.w-section.section.bg-greenlime.fontcolor-negative', [m$1('.w-container', [m$1('.fontsize-largest.u-margintop-40.u-marginbottom-60.u-text-center', 'Como funcionará?'), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39c578b284493e2a428a_zelo-money.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Fique com quanto arrecadar'), m$1('p.u-text-center.fontsize-base', 'O flex é para impulsionar campanhas onde todo dinheiro é bem vindo! Você fica com tudo que conseguir arrecadar.')]), m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39d37c013d4a3ee687d2_icon-reward.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Não precisa de recompensas'), m$1('p.u-text-center.fontsize-base', 'No flex oferecer recompensas é opcional. Você escolhe se oferecê-las faz sentido para o seu projeto e campanha.')])]), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39fb01b66e250aca67e3_icon-curad.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Você mesmo publica seu projeto'), m$1('p.u-text-center.fontsize-base', 'Todos os projetos inscritos no flex entram no ar. Agilidade e facilidade para você captar recursos através da internet.')]), m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39e77c013d4a3ee687d4_icon-time.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Encerre a campanha quando quiser'), m$1('p.u-text-center.fontsize-base', 'Não há limite de tempo de captação. Você escolhe  quando encerrar sua campanha e receber os valores arrecadados.')])])])]), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-editable.fontsize-larger.u-margintop-40.u-margin-bottom-40.u-text-center', 'Conheça alguns dos primeiros projetos flex'), ctrl.projectsLoader() ? h.loader() : m$1.component(projectRow, { collection: ctrl.projects, ref: 'ctrse_flex', wrapper: '.w-row.u-margintop-40' })])]), m$1('.w-section.divider'), m$1('.w-section.section', [m$1('.w-container', [m$1('.fontsize-larger.u-text-center.u-marginbottom-60.u-margintop-40', 'Dúvidas'), m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-6', [m$1.component(landingQA, {
              question: 'Quais são as taxas da modalidade flexível? ',
              answer: 'Como no Catarse, enviar um projeto não custa nada! A taxa cobrada no serviço Catarse flex é de 13% sobre o valor arrecadado.'
          }), m$1.component(landingQA, {
              question: 'De onde vem o dinheiro do meu projeto?',
              answer: 'Família, amigos, fãs e membros de comunidades que você faz parte são seus maiores colaboradores. São eles que irão divulgar sua campanha para as pessoas que eles conhecem, e assim o círculo de apoiadores vai aumentando e a sua campanha ganha força.'
          }), m$1.component(landingQA, {
              question: 'Qual a diferença entre o flexível e o "tudo ou nada"?',
              answer: 'Atualmente o Catarse utiliza apenas o modelo "tudo ou nada", onde você só fica com o dinheiro se bater a meta de arrecadação dentro do prazo da campanha. O modelo flexível é diferente pois permite que o realizador fique com o que arrecadar, independente de atingir ou não a meta do projeto no prazo da campanha. Não haverá limite de tempo para as campanhas. Nosso sistema flexível será algo novo em relação aos modelos que existem atualmente no mercado.'
          })]), m$1('.w-col.w-col-6', [m$1.component(landingQA, {
              question: 'Posso inscrever projetos para a modalidade flexível já?',
              answer: 'Sim. Cadastre seu email e saiba como inscrever o seu projeto no flex!'
          }), m$1.component(landingQA, {
              question: 'Por quê vocês querem fazer o Catarse flex?',
              answer: 'Acreditamos que o ambiente do crowdfunding brasileiro ainda tem espaço para muitas ações, testes e experimentações para entender de fato o que as pessoas precisam. Sonhamos com tornar o financiamento coletivo um hábito no Brasil. O Catarse flex é mais um passo nessa direção.'
          }), m$1.component(landingQA, {
              question: 'Quando vocês irão lançar o Catarse flex?',
              answer: 'Ainda não sabemos quando abriremos o flex para o público em geral, mas você pode cadastrar seu email nessa página e receber um material especial de como inscrever seu projeto.'
          })])])])]), m$1('.w-section.section-large.u-text-center.bg-purple', [m$1('.w-container.fontcolor-negative', [m$1('.fontsize-largest', 'Inscreva seu projeto!'), m$1('.fontsize-base.u-marginbottom-60', 'Cadastre seu email e saiba como inscrever o seu projeto no flex!'), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1.component(landingSignup, {
              builder: ctrl.builder
          }), m$1('.w-col.w-col-2')])])]), m$1('.w-section.section-one-column.bg-catarse-zelo.section-large[style="min-height: 50vh;"]', [m$1('.w-container.u-text-center', [m$1('.w-editable.u-marginbottom-40.fontsize-larger.lineheight-tight.fontcolor-negative', 'O flex é um experimento e iniciativa do Catarse, maior plataforma de crowdfunding do Brasil.'), m$1('.w-row.u-text-center', ctrl.statsLoader() ? h.loader() : [m$1('.w-col.w-col-4', [m$1('.fontsize-jumbo.text-success.lineheight-loose', h.formatNumber(stats.total_contributors, 0, 3)), m$1('p.start-stats.fontsize-base.fontcolor-negative', 'Pessoas ja apoiaram pelo menos 01 projeto no Catarse')]), m$1('.w-col.w-col-4', [m$1('.fontsize-jumbo.text-success.lineheight-loose', h.formatNumber(stats.total_projects_success, 0, 3)), m$1('p.start-stats.fontsize-base.fontcolor-negative', 'Projetos ja foram financiados no Catarse')]), m$1('.w-col.w-col-4', [m$1('.fontsize-jumbo.text-success.lineheight-loose', stats.total_contributed.toString().slice(0, 2) + ' milhões'), m$1('p.start-stats.fontsize-base.fontcolor-negative', 'Foram investidos em ideias publicadas no Catarse')])])])]), m$1('.w-section.section.bg-blue-one.fontcolor-negative', [m$1('.w-container', [m$1('.fontsize-large.u-text-center.u-marginbottom-20', 'Recomende o Catarse flex para amigos! '), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.w-row', [m$1('.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle', [m$1('div', [m$1('img.icon-share-mobile[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/53a3f66e05eb6144171d8edb_facebook-xxl.png\']'), m$1('a.w-button.btn.btn-large.btn-fb[href="http://www.facebook.com/sharer/sharer.php?u=https://www.catarse.me/flex?ref=facebook&title=' + encodeURIComponent('Conheça o novo Catarse Flex!') + '"][target="_blank"]', 'Compartilhar')])]), m$1('.w-col.w-col-6.w-col-small-6.w-col-tiny-6', [m$1('div', [m$1('img.icon-share-mobile[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/53a3f65105eb6144171d8eda_twitter-256.png\']'), m$1('a.w-button.btn.btn-large.btn-tweet[href="http://twitter.com/?status=' + encodeURIComponent('Vamos construir uma nova modalidade de crowdfunding para o Catarse! Junte-se a nós, inscreva seu email!') + 'https://www.catarse.me/flex?ref=twitter"][target="_blank"]', 'Tuitar')])])])]), m$1('.w-col.w-col-2')])])]), m$1('.w-section.section-large.bg-greenlime', [m$1('.w-container', [m$1('#participe-do-debate.u-text-center', { config: h.toAnchor() }, [m$1('h1.fontsize-largest.fontcolor-negative', 'Construa o flex conosco'), m$1('.fontsize-base.u-marginbottom-60.fontcolor-negative', 'Inicie uma conversa, pergunte, comente, critique e faça sugestões!')]), m$1('#disqus_thread.card.u-radius[style="min-height: 50vh;"]', {
              config: ctrl.addDisqus
          })])])]];
      }
  };

  var tooltip = {
      controller: function controller(args) {
          var parentHeight = m$1.prop(0),
              width = m$1.prop(args.width || 280),
              top = m$1.prop(0),
              left = m$1.prop(0),
              opacity = m$1.prop(0),
              parentOffset = m$1.prop({ top: 0, left: 0 }),
              tooltip = h.toggleProp(0, 1),
              toggle = function toggle() {
              tooltip.toggle();
              m$1.redraw();
          };

          var setParentPosition = function setParentPosition(el, isInitialized) {
              if (!isInitialized) {
                  parentOffset(h.cumulativeOffset(el));
              }
          },
              setPosition = function setPosition(el, isInitialized) {
              if (!isInitialized) {
                  var elTop = el.offsetHeight + el.offsetParent.offsetHeight;
                  var style = window.getComputedStyle(el);

                  if (window.innerWidth < el.offsetWidth + 2 * parseFloat(style.paddingLeft) + 30) {
                      //30 here is a safe margin
                      el.style.width = window.innerWidth - 30; //Adding the safe margin
                      left(-parentOffset().left + 15); //positioning center of window, considering margin
                  } else if (parentOffset().left + el.offsetWidth / 2 <= window.innerWidth && parentOffset().left - el.offsetWidth / 2 >= 0) {
                          left(-el.offsetWidth / 2); //Positioning to the center
                      } else if (parentOffset().left + el.offsetWidth / 2 > window.innerWidth) {
                              left(-el.offsetWidth + el.offsetParent.offsetWidth); //Positioning to the left
                          } else if (parentOffset().left - el.offsetWidth / 2 < 0) {
                                  left(-el.offsetParent.offsetWidth); //Positioning to the right
                              }
                  top(-elTop); //Setting top position
              }
          };

          return {
              width: width,
              top: top,
              left: left,
              opacity: opacity,
              tooltip: tooltip,
              toggle: toggle,
              setPosition: setPosition,
              setParentPosition: setParentPosition
          };
      },
      view: function view(ctrl, args) {
          var width = ctrl.width();
          return m$1(args.el, {
              onclick: ctrl.toggle,
              config: ctrl.setParentPosition,
              style: { cursor: 'pointer' }
          }, ctrl.tooltip() ? [m$1('.tooltip.dark[style="width: ' + width + 'px; top: ' + ctrl.top() + 'px; left: ' + ctrl.left() + 'px;"]', {
              config: ctrl.setPosition
          }, [m$1('.fontsize-smallest', args.text)])] : '');
      }
  };

  var I18nScope$3 = _$1.partial(h.i18nScope, 'projects.dashboard_nav');
  var linksScope = _$1.partial(h.i18nScope, 'projects.dashboard_nav_links');

  var projectDashboardMenu = {
      controller: function controller(args) {
          var body = document.getElementsByTagName('body')[0],
              editLinksToggle = h.toggleProp(true, false),
              showPublish = h.toggleProp(true, false),
              bodyToggleForNav = h.toggleProp('body-project open', 'body-project closed');

          if (args.project().is_published) {
              editLinksToggle.toggle(false);
          }

          if (args.hidePublish) {
              showPublish.toggle(false);
          }

          return {
              body: body,
              editLinksToggle: editLinksToggle,
              showPublish: showPublish,
              bodyToggleForNav: bodyToggleForNav
          };
      },
      view: function view(ctrl, args) {
          var project = args.project(),
              projectRoute = '/projects/' + project.id,
              editRoute = projectRoute + '/edit',
              editLinkClass = 'dashboard-nav-link-left ' + (project.is_published ? 'indent' : '');
          var optionalOpt = m$1('span.fontsize-smallest.fontcolor-secondary', ' (opcional)');

          ctrl.body.className = ctrl.bodyToggleForNav();

          return m$1('#project-nav', [m$1('.project-nav-wrapper', [m$1('nav.w-section.dashboard-nav.side', [m$1('a#dashboard_preview_link.w-inline-block.dashboard-project-name[href="' + (project.is_published ? '/' + project.permalink : editRoute + '#preview') + '"]', [m$1('img.thumb-project-dashboard[src="' + (_$1.isNull(project.large_image) ? '/assets/thumb-project.png' : project.large_image) + '"][width="114"]'), m$1('.fontcolor-negative.lineheight-tight.fontsize-small', project.name), m$1('img.u-margintop-10[src="/assets/catarse_bootstrap/badge-' + project.mode + '-h.png"][width=80]')]), m$1('#info-links', [m$1('a#dashboard_home_link[class="dashboard-nav-link-left ' + (h.locationActionMatch('insights') ? 'selected' : '') + '"][href="' + projectRoute + '/insights"]', [m$1('span.fa.fa-bar-chart.fa-lg.fa-fw'), I18n$1.t('start_tab', I18nScope$3())]), project.is_published ? [m$1('a#dashboard_reports_link.dashboard-nav-link-left[href="' + projectRoute + '/contributions_report"]', [m$1('span.fa.fa.fa-table.fa-lg.fa-fw'), I18n$1.t('reports_tab', I18nScope$3())]), m$1('a#dashboard_reports_link.dashboard-nav-link-left.u-marginbottom-30[href="' + editRoute + '#posts' + '"]', [m$1('span.fa.fa-bullhorn.fa-fw.fa-lg'), I18n$1.t('posts_tab', I18nScope$3()), m$1('span.badge', project.posts_count)])] : '']), m$1('.edit-project-div', [!project.is_published ? '' : m$1('button#toggle-edit-menu.dashboard-nav-link-left', {
              onclick: ctrl.editLinksToggle.toggle
          }, [m$1('span.fa.fa-pencil.fa-fw.fa-lg'), I18n$1.t('edit_project', I18nScope$3())]), ctrl.editLinksToggle() ? m$1('#edit-menu-items', [m$1('#dashboard-links', [!project.is_published || project.is_admin_role ? [m$1('a#basics_link[class="' + editLinkClass + '"][href="' + editRoute + '#basics' + '"]', I18n$1.t(project.mode + '.basics_tab', linksScope())), m$1('a#goal_link[class="' + editLinkClass + '"][href="' + editRoute + '#goal' + '"]', I18n$1.t(project.mode + '.goal_tab', linksScope()))] : '', m$1('a#description_link[class="' + editLinkClass + '"][href="' + editRoute + '#description' + '"]', I18n$1.t(project.mode + '.description_tab', linksScope())), m$1('a#video_link[class="' + editLinkClass + '"][href="' + editRoute + '#video' + '"]', ['Vídeo', m$1('span.fontsize-smallest.fontcolor-secondary', ' (opcional)')]), m$1('a#budget_link[class="' + editLinkClass + '"][href="' + editRoute + '#budget' + '"]', I18n$1.t(project.mode + '.budget_tab', linksScope())), m$1('a#card_link[class="' + editLinkClass + '"][href="' + editRoute + '#card' + '"]', I18n$1.t(project.mode + '.card_tab', linksScope())), m$1('a#dashboard_reward_link[class="' + editLinkClass + '"][href="' + editRoute + '#reward' + '"]', ['Recompensas', optionalOpt]), m$1('a#dashboard_user_about_link[class="' + editLinkClass + '"][href="' + editRoute + '#user_about' + '"]', I18n$1.t(project.mode + '.about_you_tab', linksScope())), project.is_published || project.state === 'draft' || project.is_admin_role ? [m$1('a#dashboard_user_settings_link[class="' + editLinkClass + '"][href="' + editRoute + '#user_settings' + '"]', I18n$1.t(project.mode + '.account_tab', linksScope()))] : '', !project.is_published ? [m$1('a#dashboard_preview_link[class="' + editLinkClass + '"][href="' + editRoute + '#preview' + '"]', [m$1('span.fa.fa-fw.fa-eye.fa-lg'), I18n$1.t(project.mode + '.preview_tab', linksScope())])] : ''])]) : '', !project.is_published && ctrl.showPublish() ? [m$1('.btn-send-draft-fixed', project.mode === 'aon' ? [project.state === 'draft' ? m$1('a.btn.btn-medium[href="/projects/' + project.id + '/validate_publish"]', [I18n$1.t('publish', I18nScope$3()), m$1.trust('&nbsp;&nbsp;'), m$1('span.fa.fa-chevron-right')]) : ''] : [project.state === 'draft' ? m$1('a.btn.btn-medium[href="/flexible_projects/' + project.id + '/validate_publish"]', [I18n$1.t('publish', I18nScope$3()), m$1.trust('&nbsp;&nbsp;'), m$1('span.fa.fa-chevron-right')]) : ''])] : [project.mode === 'flex' && project.is_published ? [m$1('.btn-send-draft-fixed', _$1.isNull(project.expires_at) ? m$1('a.w-button.btn.btn-medium.btn-secondary-dark[href="/projects/' + project.id + '/edit#announce_expiration"]', I18n$1.t('announce_expiration', I18nScope$3())) : '')] : '']])])]), m$1('a.btn-dashboard href="js:void(0);"', {
              onclick: ctrl.bodyToggleForNav.toggle
          }, [m$1('span.fa.fa-bars.fa-lg')])]);
      }
  };

  var modalBox = {
      view: function view(ctrl, args) {
          return m$1('.modal-backdrop', [m$1('.modal-dialog-outer', [m$1('.modal-dialog-inner.modal-dialog-small', [m$1('a.w-inline-block.modal-close.fa.fa-close.fa-lg[href="javascript:void(0);"]', {
              onclick: args.displayModal.toggle
          }), m$1.component(args.content[0], args.content[1])])])]);
      }
  };

  var adminProjectDetailsCard = {
      controller: function controller(args) {
          var project = args.resource,
              isFinalLap = function isFinalLap() {
              // @TODO: use 8 days because timezone on js
              return !_.isNull(project.expires_at) && moment$1().add(8, 'days') >= moment$1(project.zone_expires_at);
          };
          return {
              project: project,
              remainingTextObj: h.translatedTime(project.remaining_time),
              elapsedTextObj: h.translatedTime(project.elapsed_time),
              isFinalLap: isFinalLap
          };
      },
      view: function view(ctrl) {
          var project = ctrl.project,
              progress = project.progress.toFixed(2),
              statusTextObj = h.projectStateTextClass(project.state),
              remainingTextObj = ctrl.remainingTextObj,
              elapsedTextObj = ctrl.elapsedTextObj;

          return m$1('.project-details-card.card.u-radius.card-terciary.u-marginbottom-20', [m$1('div', [m$1('.fontsize-small.fontweight-semibold', [m$1('span.fontcolor-secondary', 'Status:'), ' ', m$1('span', {
              class: statusTextObj.cssClass
          }, ctrl.isFinalLap() && project.open_for_contributions ? 'RETA FINAL' : statusTextObj.text), ' ']), project.is_published ? [m$1('.meter.u-margintop-20.u-marginbottom-10', [m$1('.meter-fill', {
              style: {
                  width: (progress > 100 ? 100 : progress) + '%'
              }
          })]), m$1('.w-row', [m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'financiado'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', progress + '%')]), m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'levantados'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', ['R$ ' + h.formatNumber(project.pledged, 2)])]), m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'apoios'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', project.total_contributions)]), m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [_.isNull(project.expires_at) ? [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'iniciado há'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', elapsedTextObj.total + ' ' + elapsedTextObj.unit)] : [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'restam'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', remainingTextObj.total + ' ' + remainingTextObj.unit)]])])] : ''])]);
      }
  };

  var onlineSucessModalContent = {
      view: function view(ctrl, args) {
          return m$1('.modal-dialog-content.u-text-center', [m$1('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m$1('p.fontsize-larger.lineheight-tight', 'Sua campanha está no ar!!! Parabéns por esse primeiro grande passo. Boa sorte nessa jornada ;)')]);
      }
  };

  var projectDataStats = {
      view: function view(ctrl, args) {
          var project = args.project(),
              progress = project.progress.toFixed(2),
              statusTextObj = h.projectStateTextClass(project.state),
              remainingTextObj = h.translatedTime(project.remaining_time),
              elapsedTextObj = h.translatedTime(project.elapsed_time);

          return m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-3.u-text-center-small-only', [m$1('.fontsize-small.fontweight-semibold.u-marginbottom-20', [m$1('span.fontcolor-secondary', 'Status: '), m$1('span', { class: statusTextObj.cssClass }, statusTextObj.text)])]), m$1('.w-col.w-col-9', [m$1('.w-row.u-text-center', [m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', progress + '%'), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small.u-marginbottom-10', 'financiado')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', 'R$ ' + h.formatNumber(project.pledged, 2)), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small.u-marginbottom-10', 'levantados')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', project.total_contributions), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'apoios')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [_$1.isNull(project.expires_at) ? [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', elapsedTextObj.total + ' ' + elapsedTextObj.unit), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'iniciado há')] : [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', '' + remainingTextObj.total), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', remainingTextObj.unit + ' ' + (remainingTextObj.total > 0 ? 'restantes' : 'restante'))]])])])]);
      }
  };

  var projectDataChart = {
      controller: function controller(args) {
          var resource = _$1.first(args.collection()),
              source = !_$1.isUndefined(resource) ? resource.source : [],
              mountDataset = function mountDataset() {
              return [{
                  fillColor: 'rgba(126,194,69,0.2)',
                  strokeColor: 'rgba(126,194,69,1)',
                  pointColor: 'rgba(126,194,69,1)',
                  pointStrokeColor: '#fff',
                  pointHighlightFill: '#fff',
                  pointHighlightStroke: 'rgba(220,220,220,1)',
                  data: _$1.map(source, function (item) {
                      return item[args.dataKey];
                  })
              }];
          },
              renderChart = function renderChart(element, isInitialized) {
              if (!isInitialized) {
                  var ctx = element.getContext('2d');

                  new Chart(ctx).Line({
                      labels: _$1.map(source, function (item) {
                          return args.xAxis(item);
                      }),
                      datasets: mountDataset()
                  });
              }
          };

          return {
              renderChart: renderChart,
              source: source
          };
      },
      view: function view(ctrl, args) {
          return m$1('.card.u-radius.medium.u-marginbottom-30', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', args.label), m$1('.w-row', [m$1('.w-col.w-col-12.overflow-auto', [!_$1.isEmpty(ctrl.source) ? m$1('canvas[id="chart"][width="860"][height="300"]', {
              config: ctrl.renderChart
          }) : m$1('.w-col.w-col-8.w-col-push-2', m$1('p.fontsize-base', args.emptyState))])])]);
      }
  };

  var projectDataTable = {
      controller: function controller(args) {
          var table = m$1.prop(args.table),
              sortIndex = m$1.prop(-1);

          var comparator = function comparator(a, b) {
              var idx = sortIndex(),

              //Check if a custom comparator is used => Read component description
              x = _$1.isArray(a[idx]) && a[idx].length > 1 ? a[idx][0] : a[idx],
                  y = _$1.isArray(b[idx]) && b[idx].length > 1 ? b[idx][0] : b[idx];

              if (x < y) {
                  return -1;
              }
              if (y < x) {
                  return 1;
              }
              return 0;
          };

          var sortTable = function sortTable(idx) {
              var header = _$1.first(table()),
                  body = void 0;
              if (sortIndex() === idx) {
                  body = _$1.rest(table()).reverse();
              } else {
                  sortIndex(idx);
                  body = _$1.rest(table()).sort(comparator);
              }

              table(_$1.union([header], body));
          };

          sortTable(Math.abs(args.defaultSortIndex) || 0);

          if (args.defaultSortIndex < 0) {
              sortTable(Math.abs(args.defaultSortIndex) || 0);
          }

          return {
              table: table,
              sortTable: sortTable
          };
      },
      view: function view(ctrl, args) {
          var header = _$1.first(ctrl.table()),
              body = _$1.rest(ctrl.table());
          return m$1('.table-outer.u-marginbottom-60', [m$1('.w-row.table-row.fontweight-semibold.fontsize-smaller.header', _$1.map(header, function (heading, idx) {
              var sort = function sort() {
                  return ctrl.sortTable(idx);
              };
              return m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.table-col', [m$1('a.link-hidden[href="javascript:void(0);"]', {
                  onclick: sort
              }, [heading + ' ', m$1('span.fa.fa-sort')])]);
          })), m$1('.table-inner.fontsize-small', _$1.map(body, function (rowData) {
              return m$1('.w-row.table-row', _$1.map(rowData, function (row) {
                  //Check if a custom comparator is used => Read component description
                  row = _$1.isArray(row) && row.length > 1 ? row[1] : row;
                  return m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.table-col', [m$1('div', row)]);
              }));
          }))]);
      }
  };

  var projectReminderCount = {
      view: function view(ctrl, args) {
          var project = args.resource;
          return m$1('#project-reminder-count.card.u-radius.u-text-center.medium.u-marginbottom-80', [m$1('.fontsize-large.fontweight-semibold', 'Total de pessoas que clicaram no botão Lembrar-me'), m$1('.fontsize-smaller.u-marginbottom-30', 'Um lembrete por email é enviado 48 horas antes do término da sua campanha'), m$1('.fontsize-jumbo', project.reminder_count)]);
      }
  };

  var dashboardInfo = {
      controller: function controller(args) {
          var toRedraw = args.dataToRedraw || {},
              listenToReplace = function listenToReplace(element, isInitialized, context) {

              if (isInitialized) return;

              _$1.map(element.children, function (item) {
                  var toR = toRedraw[item.getAttribute('id')];

                  if (toR) {
                      item[toR.action] = toR.actionSource;
                  }
              });
          };

          return {
              listenToReplace: listenToReplace
          };
      },
      view: function view(ctrl, args) {
          var content = args.content;

          return m$1('.w-container', [m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6.w-col-push-3', [m$1('.u-text-center', [m$1('img.u-marginbottom-20', { src: content.icon, width: 94 }), m$1('.fontsize-large.fontweight-semibold.u-marginbottom-20', content.title), m$1('.fontsize-base.u-marginbottom-30', { config: ctrl.listenToReplace }, m$1.trust(content.text)), content.cta ? m$1('a.btn.btn-large.btn-inline', { href: content.href, onclick: args.nextStage }, content.cta) : ''])])])]);
      }
  };

  var I18nScope$6 = _$1.partial(h.i18nScope, 'projects.successful_onboard.confirm_account.refuse');

  var projectSuccessfulOnboardConfirmAccountError = {
      controller: function controller(args) {
          var errorReasonM = m$1.prop(''),
              error = m$1.prop(false);

          var addErrorReason = function addErrorReason() {
              if (errorReasonM().trim() === '') {
                  return error(true);
              } else {
                  return args.addErrorReason(errorReasonM).call();
              }
          };

          return {
              addErrorReason: addErrorReason,
              errorReasonM: errorReasonM,
              error: error
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-row.bank-transfer-answer', [m$1('.w-col.w-col-6.w-col-push-3', [m$1('.w-form.bank-transfer-problem.card.u-radius', [m$1('form#successful-onboard-error', [m$1('a.w-inline-block.u-right.btn.btn-terciary.btn-no-border.btn-inline.fa.fa-close', { href: '#confirm_account', onclick: args.changeToAction('start') }), m$1('label.field-label.fontweight-semibold.u-marginbottom-20', I18n$1.t('title', I18nScope$6())), m$1('textarea.w-input.text-field', {
              placeholder: I18n$1.t('placeholder', I18nScope$6()),
              class: ctrl.error() ? 'error' : '',
              onfocus: function onfocus() {
                  return ctrl.error(false);
              },
              onchange: m$1.withAttr('value', ctrl.errorReasonM)
          }), ctrl.error() ? m$1('.w-row', [m$1('.w-col.w-col-6.w-col-push-3.u-text-center', [m$1('span.fontsize-smallest.text-error', 'Campo Obrigatório')])]) : '', m$1('.w-row', [m$1('.w-col.w-col-4.w-col-push-4', [m$1('a.w-button.btn.btn-medium', {
              href: '#confirm_account_refuse',
              onclick: ctrl.addErrorReason
          }, I18n$1.t('cta', I18nScope$6()))])])])])])]);
      }
  };

  var I18nScope$7 = _$1.partial(h.i18nScope, 'projects.successful_onboard.confirm_account');

  var projectSuccessfulOnboardConfirmAccountAccept = {
      view: function view(ctrl, args) {
          return m$1('.w-row.bank-transfer-answer', [m$1('.w-col.w-col-6.w-col-push-3', [m$1('.w-form.bank-transfer-confirm.card.u-radius', [m$1('form#successful-onboard-form', [m$1('a.w-inline-block.u-right.btn.btn-terciary.btn-no-border.btn-inline.fa.fa-close', { href: '#confirm_account', onclick: args.changeToAction('start') }), m$1('label.field-label.fontweight-semibold.u-marginbottom-20', I18n$1.t('accept.title', I18nScope$7())), m$1('.fontsize-smaller.u-marginbottom-30', I18n$1.t('accept.info', I18nScope$7())), m$1('.w-row', [m$1('.w-col.w-col-4.w-col-push-4', [!args.acceptAccountLoader() ? m$1('a.w-button.btn.btn-medium', {
              href: '#accept_account',
              onclick: args.acceptAccount
          }, I18n$1.t('accept.cta', I18nScope$7())) : h.loader()])])])])])]);
      }
  };

  var I18nScope$5 = _$1.partial(h.i18nScope, 'projects.successful_onboard.confirm_account');

  var projectSuccessfulOnboardConfirmAccount = {
      controller: function controller(args) {
          var actionStages = {
              'error': projectSuccessfulOnboardConfirmAccountError,
              'accept': projectSuccessfulOnboardConfirmAccountAccept
          },
              currentStage = m$1.prop('start'),
              actionStage = function actionStage() {
              return actionStages[currentStage()];
          },
              changeToAction = function changeToAction(stage) {
              console.log('\n======\nChanging action to ', stage);
              return function () {
                  currentStage(stage);

                  return false;
              };
          };

          return {
              changeToAction: changeToAction,
              actionStage: actionStage,
              currentStage: currentStage
          };
      },
      view: function view(ctrl, args) {
          var projectAccount = args.projectAccount,
              actionStage = ctrl.actionStage,
              currentStage = ctrl.currentStage,
              personKind = projectAccount.owner_document.length > 14 ? 'juridical' : 'natural',
              juridicalPerson = projectAccount.owner_document.length > 14;

          return m$1('.w-container.u-marginbottom-40', [m$1('.u-text-center', [m$1('.fontsize-large.fontweight-semibold.u-marginbottom-30', I18n$1.t('title', I18nScope$5()))]), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6', [m$1('.fontsize-base.u-marginbottom-30.card.card-terciary', [m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.label', I18nScope$5())), I18n$1.t('person.' + personKind + '.label', I18nScope$5())]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.' + personKind + '.name', I18nScope$5())), projectAccount.owner_name]), projectAccount.state_inscription && juridicalPerson ? m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.state_inscription', I18nScope$5())), projectAccount.state_inscription]) : '', m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.' + personKind + '.document', I18nScope$5())), projectAccount.owner_document]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.bank.name', I18nScope$5())), projectAccount.bank_name]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.bank.agency', I18nScope$5())), '' + projectAccount.agency + (_$1.isEmpty(projectAccount.agency_digit) ? '' : '-' + projectAccount.agency_digit)]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.bank.account', I18nScope$5())), projectAccount.account + '-' + projectAccount.account_digit])])]), m$1('.w-col.w-col-6', [m$1('.fontsize-base.u-marginbottom-30.card.card-terciary', [m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.address', I18nScope$5())), projectAccount.address_street + ', ' + projectAccount.address_number + ' ' + (!_$1.isNull(projectAccount.address_complement) ? ', ' + projectAccount.address_complement : '')]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.neighbourhood', I18nScope$5())), projectAccount.address_neighbourhood]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.city', I18nScope$5())), projectAccount.address_city]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.state', I18nScope$5())), projectAccount.address_state]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.zip_code', I18nScope$5())), projectAccount.address_zip_code])])])]), currentStage() === 'start' ? m$1('#confirmation-dialog.w-row.bank-transfer-answer', [m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6.w-hidden-small.w-hidden-tiny'), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('a#confirm-account.btn.btn-large', { href: '#confirm_account', onclick: ctrl.changeToAction('accept') }, 'Sim')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('a#refuse-account.btn.btn-large.btn-terciary', { href: '#error_account', onclick: ctrl.changeToAction('error') }, 'Não')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6.w-hidden-small.w-hidden-tiny')]) : m$1.component(actionStage(), {
              projectAccount: projectAccount,
              changeToAction: ctrl.changeToAction,
              addErrorReason: args.addErrorReason,
              acceptAccount: args.acceptAccount,
              acceptAccountLoader: args.acceptAccountLoader
          })]);
      }
  };

  var successfulProjectTaxModal = {
      view: function view(ctrl, args) {
          var pt = args.projectTransfer;

          return m$1('div', [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', 'Extrato do projeto')]), m$1('.modal-dialog-content', [m$1('p.fontsize-small.u-marginbottom-40', ['Confira o extrato do seu projeto, já incluindo as taxas e retenções. Se você tiver dúvidas sobre como esse cálculo é feito, ', m$1('a.alt-link[href="http://suporte.catarse.me/hc/pt-br/articles/202037493-FINANCIADO-Como-ser%C3%A1-feito-o-repasse-do-dinheiro-"][target="__blank"]', 'acesse aqui'), '.']), m$1('div', [m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-4', [m$1('.text-success', '+ R$ ' + h.formatNumber(pt.pledged, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Arrecadação total (' + pt.total_contributions + ' apoios)')])]), pt.irrf_tax > 0 ? m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-4', [m$1('.text-success', '+ R$ ' + h.formatNumber(pt.irrf_tax, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Retenção IRF (Imposto de Renda na Fonte)')])]) : '', m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-4', [m$1('.text-error', '- R$ ' + h.formatNumber(pt.catarse_fee, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Taxa do Catarse e meio de pagamento (' + h.formatNumber(pt.service_fee * 100, 2) + '%) ')])]), m$1('.divider.u-marginbottom-10'), m$1('.w-row.fontsize-base.fontweight-semibold', [m$1('.w-col.w-col-4', [m$1('div', 'R$ ' + h.formatNumber(pt.total_amount, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Total a ser transferido')])])])])]);
      }
  };

  var I18nScope$8 = _$1.partial(h.i18nScope, 'projects.successful_onboard');

  var parseAccountData = function parseAccountData(account, transfer) {
      return {
          transfer_limit_date: h.momentify(account.transfer_limit_date),
          total_amount: h.formatNumber(transfer.total_amount, 2),
          bank_name: account.bank_name,
          agency: '' + account.agency + (account.agency_digit ? '-' + account.agency_digit : ''),
          account: '' + account.account + (account.account_digit ? '-' + account.account_digit : ''),
          user_email: account.user_email
      };
  };

  var insightVM = {
      content: function content(state, data) {
          var translations = I18n$1.translations[I18n$1.currentLocale()].projects.successful_onboard[state],
              translationContext = state === 'finished' ? {} : parseAccountData(_$1.first(data.account()), _$1.first(data.transfer()));
          var contentObj = {};

          _$1.map(translations, function (translation, translationKey) {
              contentObj = _$1.extend({}, contentObj, babelHelpers.defineProperty({}, translationKey, I18n$1.t(state + '.' + translationKey, I18nScope$8(translationContext))));
          });
          return contentObj;
      }
  };

  var I18nScope$4 = _.partial(h.i18nScope, 'projects.successful_onboard');

  var projectSuccessfulOnboard = {
      controller: function controller(args) {
          var projectIdVM = postgrest$1.filtersVM({ project_id: 'eq' }),
              projectAccounts = m$1.prop([]),
              projectTransfers = m$1.prop([]),
              showTaxModal = h.toggleProp(false, true),
              onboardComponents = {
              'start': dashboardInfo,
              'confirm_account': projectSuccessfulOnboardConfirmAccount,
              'error_account': dashboardInfo,
              'pending_transfer': dashboardInfo,
              'finished': dashboardInfo
          },
              currentState = m$1.prop('start'),
              currentComponent = function currentComponent() {
              return onboardComponents[currentState()];
          },
              content = function content() {
              return insightVM.content(currentState(), {
                  account: projectAccounts,
                  transfer: projectTransfers,
                  showTaxModal: showTaxModal
              });
          },
              loader = postgrest$1.loaderWithToken,
              declineAccountLoader = function declineAccountLoader(errorMsg) {
              var pa = _.first(projectAccounts());

              return postgrest$1.loaderWithToken(models.projectAccountError.postOptions({
                  project_id: args.project().id,
                  reason: errorMsg
              }));
          },
              acceptAccountLoader = postgrest$1.loaderWithToken(models.projectAccount.postOptions({
              project_id: args.project().id
          }));

          projectIdVM.project_id(args.project().id);

          var lProjectAccount = loader(models.projectAccount.getRowOptions(projectIdVM.parameters()));
          lProjectAccount.load().then(function (data) {
              projectAccounts(data);

              loadCurrentStage();
          });

          var lProjectTransfer = loader(models.projectTransfer.getRowOptions(projectIdVM.parameters()));
          lProjectTransfer.load().then(projectTransfers);

          var setStage = function setStage(state) {
              currentState(state);

              return currentComponent;
          },
              nextStage = function nextStage() {
              var keys = _.keys(onboardComponents),
                  nextKey = keys[_.indexOf(keys, currentState()) + 1];

              currentState(nextKey);

              return currentComponent;
          },
              loadCurrentStage = function loadCurrentStage() {
              if (!lProjectAccount()) {
                  var pa = _.first(projectAccounts());

                  if (_.isNull(pa)) {
                      return setStage('finished')();
                  }

                  if (_.isNull(pa.error_reason) && _.isNull(pa.transfer_state)) {
                      return setStage('start')();
                  } else if (!_.isNull(pa.error_reason)) {
                      return setStage('error_account')();
                  } else if (!_.isNull(pa.transfer_state)) {
                      if (pa.transfer_state == 'transferred') {
                          return setStage('finished')();
                      } else {
                          return setStage('pending_transfer')();
                      }
                  }
              }

              return false;
          },


          // TODO: need to add an error validation to not null
          addErrorReason = function addErrorReason(errorProp) {
              return function () {
                  var fn = declineAccountLoader(errorProp());
                  fn.load().then(function () {
                      setStage('error_account')();
                  });

                  return false;
              };
          },
              acceptAccount = function acceptAccount() {
              acceptAccountLoader.load().then(function () {
                  setStage('pending_transfer')();
              });

              return false;
          };

          return {
              projectAccounts: projectAccounts,
              projectTransfers: projectTransfers,
              lProjectAccount: lProjectAccount,
              lProjectTransfer: lProjectTransfer,
              setStage: setStage,
              nextStage: nextStage,
              currentComponent: currentComponent,
              addErrorReason: addErrorReason,
              acceptAccount: acceptAccount,
              acceptAccountLoader: acceptAccountLoader,
              content: content,
              declineAccountLoader: declineAccountLoader,
              loadCurrentStage: loadCurrentStage,
              showTaxModal: showTaxModal
          };
      },
      view: function view(ctrl, args) {
          var projectAccount = _.first(ctrl.projectAccounts()),
              projectTransfer = _.first(ctrl.projectTransfers()),
              lpa = ctrl.lProjectAccount,
              lpt = ctrl.lProjectTransfer;

          return m$1('.w-section.section', [ctrl.showTaxModal() ? m$1.component(modalBox, {
              displayModal: ctrl.showTaxModal,
              content: [successfulProjectTaxModal, {
                  projectTransfer: projectTransfer
              }]
          }) : '', !lpa() && !lpt() ? m$1.component(ctrl.currentComponent(), {
              projectTransfer: projectTransfer,
              projectAccount: projectAccount,
              setStage: ctrl.setStage,
              addErrorReason: ctrl.addErrorReason,
              acceptAccount: ctrl.acceptAccount,
              acceptAccountLoader: ctrl.acceptAccountLoader,
              nextStage: ctrl.nextStage,
              content: ctrl.content(),
              dataToRedraw: {
                  'tax_link': {
                      action: 'onclick',
                      actionSource: function actionSource() {
                          ctrl.showTaxModal.toggle();
                          m$1.redraw();
                      }
                  }
              }
          }) : h.loader()]);
      }
  };

  var facebookButton = {
      controller: function controller(args) {
          var share = function share() {
              if (FB) {
                  FB.ui({
                      method: args.messenger ? 'send' : 'share',
                      link: args.url,
                      href: args.url
                  });
              }
          };

          return {
              share: share
          };
      },
      view: function view(ctrl, args) {
          var buttonCss = function buttonCss() {
              if (args.mobile) {
                  return 'w-hidden-main w-hidden-medium u-marginbottom-20 btn btn-medium btn-fb';
              } else if (args.big) {
                  return 'btn btn-fb btn-large u-marginbottom-20 w-button';
              } else {
                  return 'btn btn-inline btn-medium btn-terciary u-marginright-20';
              }
          };

          return m$1('button', {
              class: buttonCss(),
              onclick: ctrl.share
          }, [m$1('span.fa', {
              class: args.messenger ? 'fa-comment' : 'fa-facebook'
          }), args.messenger ? ' Messenger' : ' Facebook']);
      }
  };

  var popNotification = {
      controller: function controller() {
          return {
              displayNotification: h.toggleProp(true, false)
          };
      },
      view: function view(ctrl, args) {
          return ctrl.displayNotification() ? m$1('.flash.w-clearfix.card.card-notification.u-radius.zindex-20', [m$1('img.icon-close[src="/assets/catarse_bootstrap/x.png"][width="12"][alt="fechar"]', {
              onclick: ctrl.displayNotification.toggle
          }), m$1('.fontsize-small', args.message)]) : m$1('span');
      }
  };

  var copyTextInput = {
      controller: function controller(args) {
          var showSuccess = m$1.prop(false);

          var select = function select(el) {
              var range = void 0,
                  selection = void 0;

              if (document.body.createTextRange) {
                  range = document.body.createTextRange();
                  range.moveToElementText(el);
                  range.select();
              } else if (window.getSelection) {
                  selection = window.getSelection();
                  range = document.createRange();
                  range.selectNodeContents(el);
                  selection.removeAllRanges();
                  selection.addRange(range);
              }
          };

          var setClickHandler = function setClickHandler(el, isInitialized) {
              var copy = void 0;
              if (!isInitialized) {
                  (function () {
                      var textarea = document.getElementById('copy-textarea');
                      el.onclick = function () {
                          select(textarea);
                          copy = document.execCommand('copy');
                          if (copy) {
                              showSuccess(true);
                              m$1.redraw();
                          } else {
                              textarea.blur();
                          }
                      };
                  })();
              }
          };

          return {
              setClickHandler: setClickHandler,
              showSuccess: showSuccess
          };
      },
      view: function view(ctrl, args) {
          return m$1('#clipboard.w-row', [m$1('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', m$1('textarea#copy-textarea.positive.text-field.w-input', {
              style: 'margin-bottom:0;'
          }, args.value)), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', m$1('.btn.btn-medium.btn-no-border.btn-terciary.fa.fa-clipboard.w-button', {
              config: ctrl.setClickHandler
          })), ctrl.showSuccess() ? m$1.component(popNotification, { message: 'Link copiado' }) : '']);
      }
  };

  var I18nScope$2 = _$1.partial(h.i18nScope, 'projects.insights');

  var insights = {
      controller: function controller(args) {
          var filtersVM = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              displayModal = h.toggleProp(false, true),
              projectDetails = m$1.prop([]),
              contributionsPerDay = m$1.prop([]),
              contributionsPerLocation = m$1.prop([]),
              loader = postgrest$1.loaderWithToken;

          if (h.paramByName('online_success') === 'true') {
              displayModal.toggle();
          }

          filtersVM.project_id(args.root.getAttribute('data-id'));

          var l = loader(models.projectDetail.getRowOptions(filtersVM.parameters()));
          l.load().then(projectDetails);

          var lContributionsPerDay = loader(models.projectContributionsPerDay.getRowOptions(filtersVM.parameters()));
          lContributionsPerDay.load().then(contributionsPerDay);

          var contributionsPerLocationTable = [['Estado', 'Apoios', 'R$ apoiados (% do total)']];
          var buildPerLocationTable = function buildPerLocationTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  var column = [];

                  column.push(contribution.state_acronym || 'Outro/other');
                  column.push(contribution.total_contributions);
                  column.push([contribution.total_contributed, [//Adding row with custom comparator => read project-data-table description
                  m$1('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_contributed, 2, 3), m$1('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerLocationTable.push(column);
              }) : [];
          };

          var lContributionsPerLocation = loader(models.projectContributionsPerLocation.getRowOptions(filtersVM.parameters()));
          lContributionsPerLocation.load().then(buildPerLocationTable);

          var contributionsPerRefTable = [[I18n$1.t('ref_table.header.origin', I18nScope$2()), I18n$1.t('ref_table.header.contributions', I18nScope$2()), I18n$1.t('ref_table.header.amount', I18nScope$2())]];
          var buildPerRefTable = function buildPerRefTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  //Test if the string matches a word starting with ctrse_ and followed by any non-digit group of characters
                  //This allows to remove any versioned referral (i.e.: ctrse_newsletter_123) while still getting ctrse_test_ref
                  var re = /(ctrse_[\D]*)/,
                      test = re.exec(contribution.referral_link);

                  var column = [];

                  if (test) {
                      //Removes last underscore if it exists
                      contribution.referral_link = test[0].substr(-1) === '_' ? test[0].substr(0, test[0].length - 1) : test[0];
                  }

                  column.push(contribution.referral_link ? I18n$1.t('referral.' + contribution.referral_link, I18nScope$2({ defaultValue: contribution.referral_link })) : I18n$1.t('referral.others', I18nScope$2()));
                  column.push(contribution.total);
                  column.push([contribution.total_amount, [m$1('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_amount, 2, 3), m$1('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerRefTable.push(column);
              }) : [];
          };

          var lContributionsPerRef = loader(models.projectContributionsPerRef.getRowOptions(filtersVM.parameters()));
          lContributionsPerRef.load().then(buildPerRefTable);

          return {
              l: l,
              lContributionsPerRef: lContributionsPerRef,
              lContributionsPerLocation: lContributionsPerLocation,
              lContributionsPerDay: lContributionsPerDay,
              displayModal: displayModal,
              filtersVM: filtersVM,
              projectDetails: projectDetails,
              contributionsPerDay: contributionsPerDay,
              contributionsPerLocationTable: contributionsPerLocationTable,
              contributionsPerRefTable: contributionsPerRefTable
          };
      },
      view: function view(ctrl) {
          var project = _$1.first(ctrl.projectDetails()) || {
              user: {
                  name: 'Realizador'
              }
          },
              buildTooltip = function buildTooltip(el) {
              return m$1.component(tooltip, {
                  el: el,
                  text: ['Informa de onde vieram os apoios de seu projeto. Saiba como usar essa tabela e planejar melhor suas ações de comunicação ', m$1('a[href="' + I18n$1.t('ref_table.help_url', I18nScope$2()) + '"][target=\'_blank\']', 'aqui.')],
                  width: 380
              });
          };

          if (!ctrl.l()) {
              project.user.name = project.user.name || 'Realizador';
          }

          return m$1('.project-insights', !ctrl.l() ? [project.is_owner_or_admin ? m$1.component(projectDashboardMenu, {
              project: m$1.prop(project)
          }) : '', ctrl.displayModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: onlineSucessModalContent
          }) : '', m$1('.w-container', project.state === 'successful' ? m$1.component(projectSuccessfulOnboard, { project: m$1.prop(project) }) : [m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-8.w-col-push-2.dashboard-header.u-text-center', [m$1('.fontweight-semibold.fontsize-larger.lineheight-looser.u-marginbottom-10', I18n$1.t('campaign_title', I18nScope$2())), project.state === 'online' ? m$1('.card.card-secondary.u-marginbottom-20.u-radius', [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-20', 'Compartilhe sua campanha'), project.permalink ? m$1('.w-row', [m$1('.w-sub-col.w-col.w-col-6', m$1.component(facebookButton, { url: h.projectFullPermalink(project) + '?ref=facebook&utm_source=facebook.com&utm_medium=social&utm_campaign=project_share_insights', big: true })), m$1('.w-col.w-col-6', m$1('.w-form', [m$1('.fontsize-smallest.fontweight-semibold', 'Link direto'), m$1.component(copyTextInput, { value: h.projectFullPermalink(project) + '?ref=project_link' })]))]) : '']) : '', project.state === 'draft' ? m$1.component(adminProjectDetailsCard, {
              resource: project
          }) : '', m$1('p.' + project.state + '-project-text.fontsize-small.lineheight-loose', [project.mode === 'flex' && _$1.isNull(project.expires_at) && project.state !== 'draft' ? m$1('span', [I18n$1.t('finish_explanation', I18nScope$2()), m$1('a.alt-link[href="http://suporte.catarse.me/hc/pt-br/articles/208141033-Como-definir-o-prazo-no-Catarse-flex-"][target="_blank"]', I18n$1.t('know_more', I18nScope$2()))]) : m$1.trust(I18n$1.t('campaign.' + project.mode + '.' + project.state, I18nScope$2({ username: project.user.name, expires_at: h.momentify(project.zone_expires_at), sent_to_analysis_at: h.momentify(project.sent_to_analysis_at) })))])])])]), project.is_published ? [m$1('.divider'), m$1('.w-section.section-one-column.section.bg-gray.before-footer', [m$1('.w-container', [m$1.component(projectDataStats, { project: m$1.prop(project) }), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m$1.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: I18n$1.t('amount_per_day_label', I18nScope$2()),
              dataKey: 'total_amount',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              },
              emptyState: I18n$1.t('amount_per_day_empty', I18nScope$2())
          }) : h.loader()])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m$1.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: I18n$1.t('contributions_per_day_label', I18nScope$2()),
              dataKey: 'total',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              },
              emptyState: I18n$1.t('contributions_per_day_empty', I18nScope$2())
          }) : h.loader()])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', [m$1('.project-contributions-per-ref', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', [I18n$1.t('ref_origin_title', I18nScope$2()), h.newFeatureBadge(), buildTooltip('span.fontsize-smallest.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary')]), !ctrl.lContributionsPerRef() ? !_$1.isEmpty(_$1.rest(ctrl.contributionsPerRefTable)) ? m$1.component(projectDataTable, {
              table: ctrl.contributionsPerRefTable,
              defaultSortIndex: -2
          }) : m$1('.card.u-radius.medium.u-marginbottom-60', m$1('.w-row.u-text-center.u-margintop-40.u-marginbottom-40', m$1('.w-col.w-col-8.w-col-push-2', m$1('p.fontsize-base', I18n$1.t('contributions_per_ref_empty', I18nScope$2()))))) : h.loader()])])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', [m$1('.project-contributions-per-ref', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', I18n$1.t('location_origin_title', I18nScope$2())), !ctrl.lContributionsPerLocation() ? !_$1.isEmpty(_$1.rest(ctrl.contributionsPerLocationTable)) ? m$1.component(projectDataTable, {
              table: ctrl.contributionsPerLocationTable,
              defaultSortIndex: -2
          }) : m$1('.card.u-radius.medium.u-marginbottom-60', m$1('.w-row.u-text-center.u-margintop-40.u-marginbottom-40', m$1('.w-col.w-col-8.w-col-push-2', m$1('p.fontsize-base', I18n$1.t('contributions_per_location_empty', I18nScope$2()))))) : h.loader()])])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', [m$1.component(projectReminderCount, {
              resource: project
          })])])])])] : ''] : h.loader());
      }
  };

  var I18nScope$9 = _.partial(h.i18nScope, 'pages.jobs');

  var jobs = {
      view: function view(ctrl, args) {
          return [m$1('.w-section.hero-jobs.hero-medium', [m$1('.w-containe.u-text-center', [m$1('img.icon-hero[src="/assets/logo-white.png"]'), m$1('.u-text-center.u-marginbottom-20.fontsize-largest', I18n$1.t('title', I18nScope$9()))])]), m$1('.w-section.section', [m$1('.w-container.u-margintop-40', [m$1('.w-row', [m$1('.w-col.w-col-8.w-col-push-2.u-text-center', [m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('info', I18nScope$9())), m$1('a[href="/projects/new"].w-button.btn.btn-large.btn-inline', I18n$1.t('cta', I18nScope$9()))])])])])];
      }
  };

  var liveStatistics = {
      controller: function controller() {
          var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

          var pageStatistics = m$1.prop([]),
              notificationData = m$1.prop({});

          models.statistic.getRow().then(pageStatistics);
          // args.socket is a socket provided by socket.io
          // can see there https://github.com/catarse/catarse-live/blob/master/public/index.js#L8
          if (args.socket && _$1.isFunction(args.socket.on)) {
              args.socket.on('new_paid_contributions', function (msg) {
                  notificationData(JSON.parse(msg.payload));
                  models.statistic.getRow().then(pageStatistics);
                  m$1.redraw();
              });
          }

          return {
              pageStatistics: pageStatistics,
              notificationData: notificationData
          };
      },
      view: function view(ctrl) {
          var data = ctrl.notificationData();

          return m$1('.w-section.bg-stats.section.min-height-100', [m$1('.w-container.u-text-center', _$1.map(ctrl.pageStatistics(), function (stat) {
              return [m$1('img.u-marginbottom-60[src="https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/55ada5dd11b36a52616d97df_symbol-catarse.png"]'), m$1('.fontcolor-negative.u-marginbottom-40', [m$1('.fontsize-megajumbo.fontweight-semibold', 'R$ ' + h.formatNumber(stat.total_contributed, 2, 3)), m$1('.fontsize-large', 'Doados para projetos publicados por aqui')]), m$1('.fontcolor-negative.u-marginbottom-60', [m$1('.fontsize-megajumbo.fontweight-semibold', stat.total_contributors), m$1('.fontsize-large', 'Pessoas já apoiaram pelo menos 1 projeto no Catarse')])];
          })), !_$1.isEmpty(data) ? m$1('.w-container', [m$1('div', [m$1('.card.u-radius.u-marginbottom-60.medium', [m$1('.w-row', [m$1('.w-col.w-col-4', [m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4', [m$1('img.thumb.u-round[src="' + h.useAvatarOrDefault(data.user_image) + '"]')]), m$1('.w-col.w-col-8.w-col-small-8', [m$1('.fontsize-large.lineheight-tight', data.user_name)])])]), m$1('.w-col.w-col-4.u-text-center.fontsize-base.u-margintop-20', [m$1('div', 'acabou de apoiar o')]), m$1('.w-col.w-col-4', [m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4', [m$1('img.thumb-project.u-radius[src="' + data.project_image + '"][width="75"]')]), m$1('.w-col.w-col-8.w-col-small-8', [m$1('.fontsize-large.lineheight-tight', data.project_name)])])])])])])]) : '', m$1('.u-text-center.fontsize-large.u-marginbottom-10.fontcolor-negative', [m$1('a.link-hidden.fontcolor-negative[href="https://github.com/catarse"][target="_blank"]', [m$1('span.fa.fa-github', '.'), ' Open Source com orgulho! '])])]);
      }
  };

  var projectContributionReportHeader = {
      view: function view(ctrl, args) {
          var filterBuilder = args.filterBuilder,
              paymentStateFilter = _$1.findWhere(filterBuilder, { label: 'payment_state' }),
              rewardFilter = _$1.findWhere(filterBuilder, { label: 'reward_filter' }),
              mainFilter = _$1.findWhere(filterBuilder, { component: filterMain }),
              project_id = args.filterVM.project_id();

          rewardFilter.data.options = args.mapRewardsToOptions();

          return m$1('.w-section.dashboard-header', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [m$1('.fontsize-larger.u-text-center.fontweight-semibold.lineheight-looser.u-marginbottom-30', 'Relatório de apoios')]), m$1('.w-col.w-col-3')]), m$1('.w-form', [m$1('form', { onsubmit: args.submit }, [m$1('.w-row', [m$1('.w-col.w-col-5', [m$1('.w-row', [m$1.component(paymentStateFilter.component, paymentStateFilter.data), m$1.component(rewardFilter.component, rewardFilter.data)])]), m$1('.w-col.w-col-7.u-margintop-20', [m$1('.w-row', [m$1('.w-col.w-col-8._w-sub-col', [m$1.component(mainFilter.component, mainFilter.data)]), m$1('.w-col.w-col-4.w-clearfix.w-hidden-small.w-hidden-tiny', [m$1('a.alt-link.u-right.fontsize-small.lineheight-looser[href="/projects/' + project_id + '/download_reports"]', [m$1('span.fa.fa-download', '.'), ' Baixar relatórios'])])])])])])])])]);
      }
  };

  var projectContributionReportContentCard = {
      controller: function controller(args) {
          var project = args.project(),
              stateClass = function stateClass(state) {
              var classes = {
                  online: {
                      'paid': 'text-success.fa-circle',
                      'refunded': 'text-error.fa-circle',
                      'pending_refund': 'text-error.fa-circle',
                      'pending': 'text-waiting.fa-circle',
                      'refused': 'text-error.fa-circle'
                  },
                  failed: {
                      'paid': 'text-error.fa-circle-o',
                      'refunded': 'text-refunded.fa-circle',
                      'pending_refund': 'text-refunded.fa-circle-o',
                      'pending': 'text-refunded',
                      'refused': 'text-refunded'
                  },
                  waiting_funds: {
                      'paid': 'text-success.fa-circle',
                      'refunded': 'text-error.fa-circle',
                      'pending_refund': 'text-error.fa-circle',
                      'pending': 'text-waiting.fa-circle',
                      'refused': 'text-error.fa-circle'
                  },
                  successful: {
                      'paid': 'text-success.fa-circle',
                      'refunded': 'text-error.fa-circle',
                      'pending_refund': 'text-error.fa-circle',
                      'pending': 'text-waiting.fa-circle',
                      'refused': 'text-error.fa-circle'
                  }
              };

              return classes[project.state][state];
          };

          return {
              stateClass: stateClass
          };
      },
      view: function view(ctrl, args) {
          var contribution = args.contribution(),
              profile_img = _$1.isEmpty(contribution.profile_img_thumbnail) ? '/assets/catarse_bootstrap/user.jpg' : contribution.profile_img_thumbnail,
              reward = contribution.reward || { minimum_value: 0, description: 'Nenhuma recompensa selecionada' };
          return m$1('.w-clearfix.card', [m$1('.w-row', [m$1('.w-col.w-col-1.w-col-tiny-1', [m$1('img.user-avatar.u-marginbottom-10[src=\'' + profile_img + '\']')]), m$1('.w-col.w-col-11.w-col-tiny-11', [m$1('.w-row', [m$1('.w-col.w-col-3', [m$1('.fontcolor-secondary.fontsize-mini.fontweight-semibold', h.momentify(contribution.created_at, 'DD/MM/YYYY, HH:mm')), m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter', contribution.user_name), m$1('.fontsize-smallest.lineheight-looser', [contribution.has_another ? [m$1('a.link-hidden-light.badge.badge-light', '+1 apoio ')] : '', contribution.anonymous ? m$1('span.fa.fa-eye-slash.fontcolor-secondary', m$1('span.fontcolor-secondary[style="font-size:11px;"]', ' Apoio não-público')) : '']), m$1('.fontsize-smallest.lineheight-looser', contribution.email)]), m$1('.w-col.w-col-3', [m$1('.lineheight-tighter', [m$1('span.fa.fontsize-smallest.' + ctrl.stateClass(contribution.state)), '   ', m$1('span.fontsize-large', 'R$ ' + h.formatNumber(contribution.value, 2, 3))])]), m$1('.w-col.w-col-3.w-hidden-small.w-hidden-tiny', [m$1('.fontsize-smallest.fontweight-semibold', 'Recompensa: R$ ' + h.formatNumber(reward.minimum_value, 2, 3)), m$1('.fontsize-smallest', reward.description.substring(0, 80) + '...')]) /*,
m(".w-col.w-col-2.w-hidden-small.w-hidden-tiny.u-text-center", [
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           m(".fontsize-smallest.fontcolor-secondary", "Enviei!"),
m(".fontsize-smallest.u-marginbottom-20.lineheight-loose", [
m("a.checkbox-big[href='#']", ".")


m(".w-col.w-col-2", [
m(".fontsize-smallest", [
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               m("a.link-hidden[href='#']", "Questionário")

m("span.fontweight-semibold.text-waiting", "enviado")

m(".fontsize-smallest.fontcolor-terciary", "em 29/10/2015")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ])*/
          ])])])]);
      }
  };

  var projectContributionReportContent = {
      view: function view(ctrl, args) {
          var list = args.list;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-9.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-base', [m$1('span.fontweight-semibold', list.isLoading() ? '' : list.total()), ' apoios'])])]),
          //m(".fontsize-large.fontweight-semibold", "R$ 12.000,00")

          /*
           TODO: ordering filter template
          m(".w-col.w-col-3.w-col-small-6.w-col-tiny-6", [
              m(".w-form", [
                  m("form[data-name='Email Form 5'][id='email-form-5'][name='email-form-5']", [
                      m(".fontsize-smallest.fontcolor-secondary", "Ordenar por:"),
                      m("select.w-select.text-field.positive.fontsize-smallest[id='field-9'][name='field-9']", [
                          m("option[value='']", "Data (recentes para antigos)"),
                          m("option[value='']", "Data (antigos para recentes)"),
                          m("option[value='']", "Valor (maior para menor)"),
                          m("option[value='First']", "Valor (menor para maior)")
                      ])
                  ])
              ])
          ])*/
          _$1.map(list.collection(), function (item) {
              var contribution = m$1.prop(item);
              return m$1.component(projectContributionReportContentCard, { project: args.project, contribution: contribution });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])])]);
      }
  };

  var vm$4 = postgrest.filtersVM({
      full_text_index: '@@',
      state: 'in',
      reward_id: 'eq',
      project_id: 'eq'
  });
  var paramToString$2 = function paramToString(p) {
      return (p || '').toString().trim();
  };
  vm$4.state('');
  vm$4.order({
      id: 'desc'
  });

  vm$4.full_text_index.toFilter = function () {
      var filter = paramToString$2(vm$4.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  vm$4.withNullParameters = function () {
      var withNullVm = postgrest.filtersVM({
          full_text_index: '@@',
          state: 'in',
          reward_id: 'is',
          project_id: 'eq'
      });

      withNullVm.full_text_index(vm$4.full_text_index());
      withNullVm.order(vm$4.order());
      withNullVm.state(vm$4.state());
      withNullVm.reward_id(vm$4.reward_id());
      withNullVm.project_id(vm$4.project_id());

      return withNullVm.parameters();
  };

  var I18nScope$10 = _$1.partial(h.i18nScope, 'projects.contributions_report.legend_labels');

  var ProjectContributionStateLegendModal = {
      controller: function controller(args) {
          var translate = function translate(path) {
              return I18n$1.t(path, I18nScope$10());
          };

          return {
              stages: {
                  online: [{
                      label: translate('online.paid.label'),
                      text: translate('online.paid.text'),
                      i_class: '.fa.fa-circle.text-success'
                  }, {
                      label: translate('online.pending.label'),
                      text: translate('online.pending.text'),
                      i_class: '.fa.fa-circle.text-waiting'
                  }, {
                      label: translate('online.refunded.label'),
                      text: translate('online.refunded.text'),
                      i_class: '.fa.fa-circle.text-error'
                  }],
                  failed: [{
                      label: translate('failed.pending_refund.label'),
                      text: translate('failed.pending_refund.text'),
                      i_class: '.fa.fa-circle-o.text-refunded'
                  }, {
                      label: translate('failed.refunded.label'),
                      text: translate('failed.refunded.text'),
                      i_class: '.fa.fa-circle.text-refunded'
                  }, {
                      label: translate('failed.paid.label'),
                      text: translate('failed.paid.text'),
                      i_class: '.fa.fa-circle-o.text-error'
                  }],
                  successful: [{
                      label: translate('successful.paid.label'),
                      text: translate('successful.paid.text'),
                      i_class: '.fa.fa-circle.text-success'
                  }, {
                      label: translate('successful.refunded.label'),
                      text: translate('successful.refunded.text'),
                      i_class: '.fa.fa-circle.text-error'
                  }]

              }
          };
      },
      view: function view(ctrl, args) {
          var project = _$1.first(args.project()),
              project_stage = project.state == 'waiting_funds' ? 'online' : project.state;

          return m$1('div', [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', 'Status do apoio')]), m$1('.modal-dialog-content', _$1.map(ctrl.stages[project_stage], function (item, i) {
              return m$1('.u-marginbottom-20', [m$1('.fontsize-small.fontweight-semibold', [m$1('span' + item.i_class), '  ' + item.label]), m$1('.fontsize-smaller', m$1.trust(item.text))]);
          }))]);
      }
  };

  var InfoProjectContributionStateLegend = {
      controller: function controller(args) {
          return {
              modalToggle: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('span', [args.text, m$1.trust('&nbsp;'), m$1('a.fa.fa-question-circle.fontcolor-secondary[href="#"]', {
              onclick: ctrl.modalToggle.toggle
          }, ''), ctrl.modalToggle() ? m$1.component(modalBox, {
              displayModal: ctrl.modalToggle,
              content: [ProjectContributionStateLegendModal, {
                  project: args.project
              }]
          }) : '']);
      }
  };

  var projectContributionReport = {
      controller: function controller(args) {
          var listVM = postgrest$1.paginationVM(models.projectContribution, 'id.desc', { 'Prefer': 'count=exact' }),
              filterVM = vm$4,
              project = m$1.prop([{}]),
              rewards = m$1.prop([]),
              contributionStateOptions = m$1.prop([]),
              reloadSelectOptions = function reloadSelectOptions(project_state) {
              var opts = [{ value: '', option: 'Todos' }];

              var options_map = {
                  'online': [{ value: 'paid', option: 'Confirmado' }, { value: 'pending', option: 'Iniciado' }, { value: 'refunded,chargeback,deleted,pending_refund', option: 'Contestado' }],
                  'waiting_funds': [{ value: 'paid', option: 'Confirmado' }, { value: 'pending', option: 'Iniciado' }, { value: 'refunded,chargeback,deleted,pending_refund', option: 'Contestado' }],
                  'failed': [{ value: 'pending_refund', option: 'Reembolso em andamento' }, { value: 'refunded', option: 'Reembolsado' }, { value: 'paid', option: 'Reembolso não iniciado' }],
                  'successful': [{ value: 'paid', option: 'Confirmado' }, { value: 'refunded,chargeback,deleted,pending_refund', option: 'Contestado' }]
              };

              opts = opts.concat(options_map[project_state] || []);

              contributionStateOptions(opts);
          },
              filterBuilder = [{
              component: filterMain,
              data: {
                  inputWrapperClass: '.w-input.text-field',
                  btnClass: '.btn.btn-medium',
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por nome ou email do apoiador'
              }
          }, {
              label: 'reward_filter',
              component: filterDropdown,
              data: {
                  label: 'Recompensa',
                  name: 'reward_id',
                  vm: filterVM.reward_id,
                  wrapper_class: '.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle',
                  options: []
              }
          }, {
              label: 'payment_state',
              component: filterDropdown,
              data: {
                  custom_label: [InfoProjectContributionStateLegend, {
                      text: 'Status do apoio',
                      project: project
                  }],
                  name: 'state',
                  vm: filterVM.state,
                  wrapper_class: '.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle',
                  options: contributionStateOptions
              }
          }],
              submit = function submit() {
              if (filterVM.reward_id() === 'null') {
                  listVM.firstPage(filterVM.withNullParameters()).then(null);
              } else {
                  listVM.firstPage(filterVM.parameters()).then(null);
              }

              return false;
          };

          filterVM.project_id(args.root.getAttribute('data-id'));

          var lReward = postgrest$1.loaderWithToken(models.rewardDetail.getPageOptions({ project_id: 'eq.' + filterVM.project_id() }));
          var lProject = postgrest$1.loaderWithToken(models.projectDetail.getPageOptions({ project_id: 'eq.' + filterVM.project_id() }));

          lReward.load().then(rewards);
          lProject.load().then(function (data) {
              project(data);
              reloadSelectOptions(_$1.first(data).state);
          });

          var mapRewardsToOptions = function mapRewardsToOptions() {
              var options = [];
              if (!lReward()) {
                  options = _$1.map(rewards(), function (r) {
                      return {
                          value: r.id,
                          option: 'R$ ' + h.formatNumber(r.minimum_value, 2, 3) + ' - ' + r.description.substring(0, 20)
                      };
                  });
              }

              options.unshift({
                  value: null,
                  option: 'Sem recompensa'
              });

              options.unshift({
                  value: '',
                  option: 'Todas'
              });

              return options;
          };

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }

          return {
              listVM: listVM,
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              submit: submit,
              lReward: lReward,
              lProject: lProject,
              rewards: rewards,
              project: project,
              mapRewardsToOptions: mapRewardsToOptions
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM;

          if (!ctrl.lProject()) {
              return [m$1.component(projectDashboardMenu, { project: m$1.prop(_$1.first(ctrl.project())) }), m$1.component(projectContributionReportHeader, {
                  submit: ctrl.submit,
                  filterBuilder: ctrl.filterBuilder,
                  form: ctrl.filterVM.formDescriber,
                  mapRewardsToOptions: ctrl.mapRewardsToOptions,
                  filterVM: ctrl.filterVM
              }), m$1('.divider.u-margintop-30'), m$1.component(projectContributionReportContent, {
                  list: list,
                  project: m$1.prop(_$1.first(ctrl.project()))
              })];
          } else {
              return h.loader();
          }
      }
  };

  var projectsDashboard = {
      controller: function controller(args) {
          projectVM.init(args.project_id, args.project_user_id);

          return projectVM;
      },
      view: function view(ctrl) {
          var project = ctrl.currentProject;

          return project().is_owner_or_admin ? m$1.component(projectDashboardMenu, { project: project }) : '';
      }
  };

  var projectFiltersVM = function projectFiltersVM() {
      var filtersVM = postgrest$1.filtersVM,
          all = filtersVM({
          state: 'eq'
      }).state('online'),
          nearMe = filtersVM({
          near_me: 'eq',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').near_me(true),
          expiring = filtersVM({
          expires_at: 'lte',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').expires_at(moment$1().add(14, 'days').format('YYYY-MM-DD')),
          recent = filtersVM({
          online_date: 'gte',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').online_date(moment$1().subtract(5, 'days').format('YYYY-MM-DD')),
          score = filtersVM({
          score: 'gte',
          open_for_contributions: 'eq'
      }).score('1').open_for_contributions('true'),
          online = filtersVM({
          open_for_contributions: 'eq'
      }).open_for_contributions('true'),
          contributed_by_friends = filtersVM({
          open_for_contributions: 'eq',
          contributed_by_friends: 'eq'
      }).open_for_contributions('true').contributed_by_friends(true),
          successful = filtersVM({
          state: 'eq'
      }).state('successful'),
          finished = filtersVM({}),
          filters = {
          all: {
              title: 'Todas as Categorias',
              filter: all,
              nicename: 'No ar',
              isContextual: false,
              keyName: 'all'
          },
          score: {
              title: 'Todas as Categorias',
              filter: score,
              nicename: 'Populares',
              isContextual: false,
              keyName: 'score'
          },
          contributed_by_friends: {
              title: 'Amigos',
              filter: contributed_by_friends,
              nicename: 'Amigos',
              isContextual: false,
              keyName: 'contributed_by_friends'
          },
          online: {
              title: 'No ar',
              filter: online,
              isContextual: false,
              keyName: 'online'
          },
          expiring: {
              title: 'Reta final',
              filter: expiring,
              isContextual: false,
              keyName: 'expiring'
          },
          successful: {
              title: 'Todas as Categorias',
              filter: successful,
              nicename: 'Financiados',
              isContextual: false,
              keyName: 'successful'
          },
          finished: {
              title: 'Todas as Categorias',
              filter: finished,
              nicename: 'Finalizados',
              isContextual: false,
              keyName: 'finished'
          },
          recent: {
              title: 'Recentes',
              filter: recent,
              isContextual: false,
              keyName: 'recent'
          },
          near_me: {
              title: 'Próximos a mim',
              filter: nearMe,
              isContextual: false,
              keyName: 'near_me'
          }
      };

      var setContextFilters = function setContextFilters(contextFilters) {
          _.map(contextFilters, function (filterKey) {
              return filters[filterKey].isContextual = true;
          });

          return filters;
      },
          getContextFilters = function getContextFilters() {
          return _.filter(filters, function (filter) {
              return filter.isContextual;
          });
      },
          removeContextFilter = function removeContextFilter(filter) {
          filters[filter.keyName].isContextual = false;

          return filters;
      };

      return {
          filters: filters,
          setContextFilters: setContextFilters,
          getContextFilters: getContextFilters,
          removeContextFilter: removeContextFilter
      };
  };

  var search = {
      view: function view(ctrl) {
          var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

          var action = args.action || '/pt/explore',
              method = args.method || 'GET';

          return m$1('#search.w-container.w-hidden-main.w-hidden-medium', [m$1('.w-row', [m$1('.w-col.w-col-10.u-marginbottom-20', [m$1('.w-form', [m$1('form#email-form', { action: action, method: method }, [m$1('.w-row', [m$1('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', [m$1('input[type="text"][name="pg_search"][placeholder="Busque projetos"]#pg_search_inside.w-input.text-field.negative.prefix')]), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m$1('button.w-inline-block.btn.btn-dark.btn-attached.postfix', [m$1('img.header-lupa[src="https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/54e44178b2135fce2b6cd235_lupa.png"]')])])])])])])])]);
      }
  };

  var categoryButton = {
      view: function view(ctrl, args) {
          var category = args.category;

          return m$1('.w-col.w-col-2.w-col-small-6.w-col-tiny-6', [m$1('a.w-inline-block.btn-category[href=\'#by_category_id/' + category.id + '\']', [m$1('div', [category.name, m$1('span.badge.explore', category.online_projects)])])]);
      }
  };

  var SignedFriendFacebookConnect = {
      controller: function controller(args) {
          var mapWithAvatar = function mapWithAvatar() {
              return _$1.sample(_$1.filter(args.friendListVM.collection(), function (item) {
                  return !_$1.isNull(item.avatar);
              }), 8);
          };

          return {
              mapWithAvatar: mapWithAvatar
          };
      },
      view: function view(ctrl, args) {
          if (args.friendListVM.isLoading()) {
              return h.loader();
          } else {
              var total = args.friendListVM.total();
              return m$1('.w-section.section.bg-backs-carrosel.section-large', [m$1('.w-container', [m$1('.card.card-big', [m$1('.w-row', [m$1('.w-col.w-col-8', [m$1('.fontsize-largest.u-marginbottom-20', 'Encontre projetos incríveis junto com seus amigos'), m$1('.fontsize-small', 'O universo do Catarse junto com a sua rede do Facebook te farão descobrir projetos incríveis!')]), m$1('.w-col.w-col-4.u-text-center', [m$1('.fontsize-smallest.u-marginbottom-10', total + ' dos seus amigos estão no Catarse!'), m$1('.u-marginbottom-20', [_$1.map(ctrl.mapWithAvatar(), function (item) {
                  return m$1('img.thumb.small.u-round.u-marginbottom-10[src="' + item.avatar + '"]');
              })]), total > 0 ? m$1('a.w-button.btn.btn-large[href="/follow-fb-friends"]', 'Procure seus amigos') : m$1('a.w-button.btn.btn-fb.btn-large.u-margintop-30.u-marginbottom-10[href="/connect-facebook"]', 'Conecte seu facebook')])])])])]);
          }
      }
  };

  var UnsignedFriendFacebookConnect = {
      controller: function controller(args) {
          return {
              largeBg: function () {
                  if (_$1.isUndefined(args)) {
                      return false;
                  } else {
                      return _$1.isUndefined(args.largeBg) ? false : args.largeBg;
                  }
              }()
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-section.section' + (ctrl.largeBg ? '.bg-backs-carrosel.section-large' : ''), [m$1('.w-container', [m$1('.card.card-big', [m$1('.w-row', [m$1('.w-col.w-col-8', [m$1('.fontsize-largest.u-marginbottom-20', 'Encontre projetos incríveis junto com seus amigos'), m$1('.fontsize-small', 'O universo do Catarse junto com a sua rede do Facebook te farão descobrir projetos incríveis!')]), m$1('.w-col.w-col-4', [m$1('a.w-button.btn.btn-fb.btn-large.u-margintop-30.u-marginbottom-10[href="/connect-facebook"]', 'Conecte seu facebook'), m$1('.fontsize-smallest.fontcolor-secondary.u-text-center', 'Nós nunca postaremos nada no facebook sem sua permissão')])])])])]);
      }
  };

  // TODO Slim down controller by abstracting logic to view-models where it fits
  var projectsExplore = {
      controller: function controller(args) {
          var filters = postgrest$1.filtersVM,
              projectFiltersVM$$ = projectFiltersVM(),
              filtersMap = projectFiltersVM$$.filters,
              defaultFilter = h.paramByName('filter') || 'all',
              fallbackFilter = 'all',
              currentFilter = m$1.prop(filtersMap[defaultFilter]),
              changeFilter = function changeFilter(newFilter) {
              currentFilter(filtersMap[newFilter]);
              loadRoute();
          },
              resetContextFilter = function resetContextFilter() {
              currentFilter(filtersMap[defaultFilter]);
              projectFiltersVM$$.setContextFilters(['finished', 'all', 'contributed_by_friends']);
          },
              currentUser = h.getUser(),
              currentUserId = currentUser.id,
              hasFBAuth = currentUser.has_fb_auth,
              buildTooltip = function buildTooltip(tooltipText) {
              return m$1.component(tooltip, {
                  el: '.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary',
                  text: tooltipText,
                  width: 380
              });
          },
              hint = function hint() {
              // TODO Add copies to i18n.
              var hintText = '',
                  tooltipText = '',
                  hasHint = false;
              if (currentFilter().keyName === 'all') {
                  hasHint = true;
                  hintText = 'Ordenados por popularidade ';
                  tooltipText = 'O nosso fator popularidade é uma mistura da seleção do time do Catarse com um valor que é calculado pela velocidade de arrecadação do projeto';
              } else if (currentFilter().keyName === 'finished') {
                  hasHint = true;
                  hintText = 'Ordenados por R$ alcançado ';
                  tooltipText = 'Os projetos com maior meta de arrecadação alcançada ficam no topo';
              } else if (currentFilter().keyName === 'contributed_by_friends') {
                  hasHint = true;
                  hintText = 'Projetos apoiados por amigos ';
                  tooltipText = 'Projetos apoiados por amigos';
              }

              return hasHint ? m$1('.fontsize-smaller.fontcolor-secondary', [hintText, buildTooltip(tooltipText)]) : '';
          },
              isSearch = m$1.prop(false),
              categoryCollection = m$1.prop([]),
              categoryId = m$1.prop(),
              findCategory = function findCategory(id) {
              return _$1.find(categoryCollection(), function (c) {
                  return c.id === parseInt(id);
              });
          },
              category = _$1.compose(findCategory, categoryId),
              loadCategories = function loadCategories() {
              return models.category.getPageWithToken(filters({}).order({ name: 'asc' }).parameters()).then(categoryCollection);
          },

          // just small fix when have two scored projects only
          checkForMinScoredProjects = function checkForMinScoredProjects(collection) {
              return _$1.size(_$1.filter(collection, function (x) {
                  return x.score >= 1;
              })) >= 3;
          },

          // Fake projects object to be able to render page while loadding (in case of search)
          projects = m$1.prop({ collection: m$1.prop([]), isLoading: function isLoading() {
                  return true;
              }, isLastPage: function isLastPage() {
                  return true;
              } }),
              loadRoute = function loadRoute() {
              var route = window.location.hash.match(/\#([^\/]*)\/?(\d+)?/),
                  cat = route && route[2] && findCategory(route[2]),
                  filterFromRoute = function filterFromRoute() {
                  var byCategory = filters({
                      category_id: 'eq'
                  });

                  return route && route[1] && filtersMap[route[1]] || cat && { title: cat.name, filter: byCategory.category_id(cat.id) };
              },
                  filter = filterFromRoute() || currentFilter(),
                  search = h.paramByName('pg_search'),
                  searchProjects = function searchProjects() {
                  var l = postgrest$1.loaderWithToken(models.projectSearch.postOptions({ query: search })),
                      page = { // We build an object with the same interface as paginationVM
                      collection: m$1.prop([]),
                      isLoading: l,
                      isLastPage: function isLastPage() {
                          return true;
                      },
                      nextPage: function nextPage() {
                          return false;
                      }
                  };
                  l.load().then(page.collection);
                  return page;
              },
                  loadProjects = function loadProjects() {
                  var pages = postgrest$1.paginationVM(models.project);
                  var parameters = _$1.extend({}, currentFilter().filter.parameters(), filter.filter.order({
                      open_for_contributions: 'desc',
                      state_order: 'asc',
                      state: 'desc',
                      score: 'desc',
                      pledged: 'desc'
                  }).parameters());
                  pages.firstPage(parameters);
                  return pages;
              },
                  loadFinishedProjects = function loadFinishedProjects() {
                  var pages = postgrest$1.paginationVM(models.finishedProject),
                      parameters = _$1.extend({}, currentFilter().filter.parameters(), filter.filter.order({
                      state_order: 'asc',
                      state: 'desc',
                      pledged: 'desc'
                  }).parameters());
                  pages.firstPage(parameters);

                  return pages;
              };

              if (_$1.isString(search) && search.length > 0 && route === null) {
                  isSearch(true);
                  title('Busca ' + search);
                  projects(searchProjects());
              } else if (currentFilter().keyName === 'finished') {
                  isSearch(false);
                  projects(loadFinishedProjects());
              } else {
                  isSearch(false);
                  title(filter.title);
                  if (!_$1.isNull(route) && route[1] == 'finished') {
                      projects(loadFinishedProjects());
                  } else {
                      projects(loadProjects());
                  }
              }
              categoryId(cat && cat.id);
              route || _$1.isString(search) && search.length > 0 ? toggleCategories(false) : toggleCategories(true);
          },
              title = m$1.prop(),
              toggleCategories = h.toggleProp(false, true);

          window.addEventListener('hashchange', function () {
              resetContextFilter();
              loadRoute();
              m$1.redraw();
          }, false);

          // Initial loads
          resetContextFilter();
          models.project.pageSize(9);
          loadCategories().then(loadRoute);

          if (args.filter) {
              currentFilter(filtersMap[args.filter]);
          }

          if (!currentFilter()) {
              currentFilter(filtersMap[defaultFilter]);
          }

          return {
              categories: categoryCollection,
              changeFilter: changeFilter,
              fallbackFilter: fallbackFilter,
              projects: projects,
              category: category,
              title: title,
              hint: hint,
              filtersMap: filtersMap,
              currentFilter: currentFilter,
              projectFiltersVM: projectFiltersVM$$,
              toggleCategories: toggleCategories,
              isSearch: isSearch,
              hasFBAuth: hasFBAuth,
              checkForMinScoredProjects: checkForMinScoredProjects
          };
      },
      view: function view(ctrl, args) {
          var projects_collection = ctrl.projects().collection(),
              projectsCount = projects_collection.length,
              widowProjects = [],
              filterKeyName = ctrl.currentFilter().keyName,
              isContributedByFriendsFilter = filterKeyName === 'contributed_by_friends';

          if (!ctrl.projects().isLoading() && _$1.isEmpty(projects_collection) && !ctrl.isSearch()) {
              if (isContributedByFriendsFilter && !ctrl.hasFBAuth) {} else {
                  ctrl.projectFiltersVM.removeContextFilter(ctrl.currentFilter());
                  ctrl.changeFilter(ctrl.fallbackFilter);
              }
          }

          return m$1('#explore', [m$1('.w-section.hero-search', [m$1.component(search), m$1('.w-container.u-marginbottom-10', [m$1('.u-text-center.u-marginbottom-40', [m$1('a#explore-open.link-hidden-white.fontweight-light.fontsize-larger[href="javascript:void(0);"]', { onclick: function onclick() {
                  return ctrl.toggleCategories.toggle();
              } }, ['Explore projetos incríveis ', m$1('span#explore-btn.fa.fa-angle-down' + (ctrl.toggleCategories() ? '.opened' : ''), '')])]), m$1('#categories.category-slider' + (ctrl.toggleCategories() ? '.opened' : ''), [m$1('.w-row.u-marginbottom-30', [_$1.map(ctrl.categories(), function (category) {
              return m$1.component(categoryButton, { category: category });
          })])])])]), m$1('.w-section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-9.w-col-small-8.w-col-tiny-8', [m$1('.fontsize-larger', ctrl.title()), ctrl.hint()]), m$1('.w-col.w-col-3.w-col-small-4.w-col-tiny-4', !ctrl.isSearch() ? m$1('select.w-select.text-field.positive', { onchange: m$1.withAttr('value', ctrl.changeFilter) }, _$1.map(ctrl.projectFiltersVM.getContextFilters(), function (pageFilter, idx) {
              var projects = ctrl.projects(),
                  isSelected = ctrl.currentFilter() == pageFilter;

              return m$1('option[value="' + pageFilter.keyName + '"]', { selected: isSelected }, pageFilter.nicename);
          })) : '')])])]), isContributedByFriendsFilter && _$1.isEmpty(projects_collection) ? !ctrl.hasFBAuth ? m$1.component(UnsignedFriendFacebookConnect) : '' : '', m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-row', _$1.map(projects_collection, function (project, idx) {
              var cardType = 'small',
                  ref = 'ctrse_explore';

              if (ctrl.isSearch()) {
                  ref = 'ctrse_explore_pgsearch';
              } else if (isContributedByFriendsFilter) {
                  ref = 'ctrse_explore_friends';
              } else if (filterKeyName === 'all') {
                  if (project.score >= 1) {
                      if (idx === 0) {
                          cardType = 'big';
                          ref = 'ctrse_explore_featured_big';
                          widowProjects = [projectsCount - 1, projectsCount - 2];
                      } else if (idx === 1 || idx === 2) {
                          if (ctrl.checkForMinScoredProjects(projects_collection)) {
                              cardType = 'medium';
                              ref = 'ctrse_explore_featured_medium';
                              widowProjects = [];
                          } else {
                              cardType = 'big';
                              ref = 'ctrse_explore_featured_big';
                              widowProjects = [projectsCount - 1];
                          }
                      } else {
                          ref = 'ctrse_explore_featured';
                      }
                  }
              }

              return _$1.indexOf(widowProjects, idx) > -1 && !ctrl.projects().isLastPage() ? '' : m$1.component(projectCard, { project: project, ref: ref, type: cardType, showFriends: isContributedByFriendsFilter });
          })), ctrl.projects().isLoading() ? h.loader() : _$1.isEmpty(projects_collection) && ctrl.hasFBAuth ? m$1('.fontsize-base.w-col.w-col-12', 'Nenhum projeto para mostrar.') : ''])])]), m$1('.w-section.u-marginbottom-80', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-2.w-col-push-5', [ctrl.projects().isLastPage() || ctrl.projects().isLoading() || _$1.isEmpty(projects_collection) ? '' : m$1('a.btn.btn-medium.btn-terciary[href=\'#loadMore\']', { onclick: function onclick() {
                  ctrl.projects().nextPage();return false;
              } }, 'Carregar mais')])])])]), m$1('.w-section.section-large.before-footer.u-margintop-80.bg-gray.divider', [m$1('.w-container.u-text-center', [m$1('img.u-marginbottom-20.icon-hero', { src: 'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/56f4414d3a0fcc0124ec9a24_icon-launch-explore.png' }), m$1('h2.fontsize-larger.u-marginbottom-60', 'Lance sua campanha no Catarse!'), m$1('.w-row', [m$1('.w-col.w-col-4.w-col-push-4', [m$1('a.w-button.btn.btn-large', { href: '/start?ref=ctrse_explore' }, 'Aprenda como')])])])])]);
      }
  };

  var menuSearch = {
      view: function view(ctrl, args) {
          return m$1('span#menu-search', [m$1('.w-form.w-hidden-small.w-hidden-tiny.header-search[id=\'discover-form-wrapper\']', [m$1('form.discover-form[accept-charset=\'UTF-8\'][action=\'/pt/explore\'][id=\'search-form\'][method=\'get\']', [m$1('div', { style: { 'display': 'none' } }, m$1('input[name=\'utf8\'][type=\'hidden\'][value=\'✓\']')), m$1('input.w-input.text-field.negative.prefix.search-input[autocomplete=\'off\'][id=\'pg_search\'][name=\'pg_search\'][placeholder=\'Busque projetos\'][type=\'text\']')]), m$1('.search-pre-result.w-hidden[data-searchpath=\'/pt/auto_complete_projects\']', [m$1('.result', m$1('.u-text-center', m$1('img[alt=\'Loader\'][src=\'/assets/catarse_bootstrap/loader-b642f2f0212454026a5c7c40620427c1.gif\']'))), m$1('a.btn.btn-small.btn-terciary.see-more-projects[href=\'javascript:void(0);\']', ' ver todos')])]), m$1('a.w-inline-block.w-hidden-small.w-hidden-tiny.btn.btn-dark.btn-attached.postfix[href=\'#\'][id=\'pg_search_submit\']', m$1('img.header-lupa[alt=\'Lupa\'][data-pin-nopin=\'true\'][src=\'/assets/catarse_bootstrap/lupa-a2e6f4b98c43604325ed4c786d4be5a4.png\']'))]);
      }
  };

  var quickProjectList = {
      view: function view(ctrl, args) {
          return m$1('.quickProjectList', _.map(args.projects(), function (project, idx) {
              return m$1('li.u-marginbottom-10', {
                  key: idx
              }, m$1('.w-row', [m$1('.w-col.w-col-3', m$1('img.thumb.small.u-radius[alt=\'Project thumb 01\'][src=\'' + (project.thumb_image || project.video_cover_image) + '\']')), m$1('.w-col.w-col-9', m$1('a.alt-link.fontsize-smaller[href=\'/pt/' + project.permalink + '?ref=user_menu_my_contributions\']', '' + project.name))]));
          }), m$1('li.u-margintop-20', m$1('.w-row', [m$1('.w-col.w-col-6', m$1('a.btn.btn-terciary[href=' + args.loadMoreHref + ']', 'Ver todos')), m$1('.w-col.w-col-6')])));
      }
  };

  var menuProfile = {
      controller: function controller(args) {
          var contributedProjects = m$1.prop(),
              latestProjects = m$1.prop(),
              userDetails = m$1.prop({}),
              user_id = args.user.user_id;

          userVM.fetchUser(user_id, true, userDetails);

          userVM.getUserCreatedProjects(user_id).then(latestProjects);

          userVM.getUserContributedProjects(user_id).then(contributedProjects);

          return {
              contributedProjects: contributedProjects,
              latestProjects: latestProjects,
              userDetails: userDetails,
              toggleMenu: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var user = ctrl.userDetails();

          return m$1('.w-dropdown.user-profile', [m$1('a.w-dropdown-toggle.dropdown-toggle[href=\'javascript:void()\'][id=\'user-menu\']', {
              onclick: ctrl.toggleMenu.toggle
          }, m$1('img.user-avatar[alt=\'Thumb avatar 942644 4735930283597 888573557 n\'][height=\'40\'][src=\'' + user.profile_img_thumbnail + '\'][width=\'40\']')), ctrl.toggleMenu() ? m$1('nav.w-dropdown-list.dropdown-list.user-menu.w--open[id=\'user-menu-dropdown\']', { style: 'display:block;' }, [m$1('.w-row', [m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Meu histórico'), m$1('ul.w-list-unstyled.u-marginbottom-20', [m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#contributions\']', 'Histórico de apoio')), m$1('li.w-hidden-main.w-hidden-medium.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#projects\']', 'Projetos criados'))]), m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Configurações'), m$1('ul.w-list-unstyled.u-marginbottom-20', [m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#about_me\']', 'Sobre você')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#notifications\']', 'Notificações')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#settings\']', 'Dados e endereço')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#billing\']', 'Banco e cartões'))])]), m$1('.w-col.w-col-4.w-hidden-small.w-hidden-tiny', [m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Projetos apoiados'), m$1('ul.w-list-unstyled.u-marginbottom-20', ctrl.contributedProjects() ? _$1.isEmpty(ctrl.contributedProjects) ? 'Nenhum projeto.' : m$1.component(quickProjectList, {
              projects: m$1.prop(_$1.map(ctrl.contributedProjects(), function (contribution) {
                  return {
                      thumb_image: contribution.project_img,
                      video_cover_image: contribution.project_img,
                      permalink: contribution.permalink,
                      name: contribution.project_name
                  };
              })),
              loadMore: '/pt/users/${user.id}/edit#contributions'
          }) : 'carregando...')]), m$1('.w-col.w-col-4.w-hidden-small.w-hidden-tiny', [m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Projetos criados'), m$1('ul.w-list-unstyled.u-marginbottom-20', ctrl.latestProjects() ? _$1.isEmpty(ctrl.latestProjects) ? 'Nenhum projeto.' : m$1.component(quickProjectList, {
              projects: ctrl.latestProjects,
              loadMore: '/pt/users/${user.id}/edit#contributions'
          }) : 'carregando...')])]), m$1('.divider.u-marginbottom-20'), m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Admin'), m$1('ul.w-list-unstyled.u-marginbottom-20', [m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/new-admin#/users\']', 'Usuários')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/new-admin\']', 'Apoios')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/admin/financials\']', 'Rel. Financeiros')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/admin/projects\']', 'Admin projetos')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/dbhero\']', 'Dataclips'))]), m$1('.divider.u-marginbottom-20'), m$1('.fontsize-smallest', ['Você está logado como', m$1('span', [m$1.trust('&nbsp;'), m$1('span.fontweight-semibold', 'Vinícius Chaves de Andrade'), m$1.trust('&nbsp;'), m$1('a.alt-link[href=\'/pt/logout\']', 'Sair')])])]) : '']);
      }
  };

  var menu = {
      controller: function controller(args) {
          var user = h.getUser();

          return {
              user: user
          };
      },
      view: function view(ctrl, args) {
          return m$1('header.main-header.w-section', {
              class: args.menuTransparency ? 'overlayer' : ''
          }, [m$1('.w-clearfix', [m$1('a.header-logo.w-nav-brand[href=\'javascript:void(0);\'][title=\'Catarse\']', { onclick: function onclick() {
                  return m$1.route('/');
              } }, m$1('img[alt=\'Logo big\'][src=\'/assets/catarse_bootstrap/logo_big-8726f3436ac23c97959d3f7bf10365b7.png\']')), m$1('a.w-hidden-small.w-hidden-tiny.header-link.w-nav-link[href=\'javascript:void(0);\']', { onclick: function onclick() {
                  return m$1.route('/start');
              } }, 'Comece seu projeto'), m$1('a.w-hidden-small.w-hidden-tiny.header-link.w-nav-link[href=\'javascript:void(0);\']', { onclick: function onclick() {
                  return m$1.route('/explore');
              } }, 'Explore'), m$1.component(menuSearch), ctrl.user ? m$1.component(menuProfile, { user: ctrl.user }) : m$1('a.w-nav-link.header-link.w-nav-link.btn-edit.u-right[href=\'/pt/login\']', 'Login'), m$1('a.w-nav-link.w-hidden-small.w-hidden-tiny.header-link.w-nav-link.u-right[href=\'http://blog.catarse.me\'][target=\'_blank\']', 'Blog')]), m$1('.w-hidden-main.w-hidden-medium.header-controls-mobile', [m$1('a.header-link.w-nav-link[href=\'/pt/start\']', 'Comece seu projeto'), m$1('a.header-link.w-nav-link[href=\'/pt/explore\']', 'Explore')])]);
      }
  };

  var homeVM = function homeVM() {
      var i18nStart = I18n$1.translations[I18n$1.currentLocale()].projects.home,
          banners = i18nStart.banners;

      return {
          banners: banners
      };
  };

  var slider = {
      controller: function controller(args) {
          var interval = void 0;
          var selectedSlideIdx = m$1.prop(0),
              translationSize = m$1.prop(1600),
              sliderTime = args.sliderTime || 6500,
              decrementSlide = function decrementSlide() {
              if (selectedSlideIdx() > 0) {
                  selectedSlideIdx(selectedSlideIdx() - 1);
              } else {
                  selectedSlideIdx(args.slides.length - 1);
              }
          },
              incrementSlide = function incrementSlide() {
              if (selectedSlideIdx() < args.slides.length - 1) {
                  selectedSlideIdx(selectedSlideIdx() + 1);
              } else {
                  selectedSlideIdx(0);
              }
          },
              startSliderTimer = function startSliderTimer() {
              interval = setInterval(function () {
                  incrementSlide();
                  m$1.redraw();
              }, sliderTime);
          },
              resetSliderTimer = function resetSliderTimer() {
              clearInterval(interval);
              startSliderTimer();
          },
              config = function config(el, isInitialized, context) {
              if (!isInitialized) {
                  translationSize(Math.max(document.documentElement.clientWidth, window.innerWidth || 0));
                  m$1.redraw();
              };

              context.onunload = function () {
                  return clearInterval(interval);
              };
          };

          startSliderTimer();

          return {
              config: config,
              selectedSlideIdx: selectedSlideIdx,
              translationSize: translationSize,
              decrementSlide: decrementSlide,
              incrementSlide: incrementSlide,
              resetSliderTimer: resetSliderTimer
          };
      },
      view: function view(ctrl, args) {
          var slideClass = args.slideClass || '',
              wrapperClass = args.wrapperClass || '',
              effect = args.effect || 'slide',
              sliderClick = function sliderClick(fn, param) {
              fn(param);
              ctrl.resetSliderTimer();
              args.onchange && args.onchange();
          },
              effectStyle = function effectStyle(idx, translateStr) {
              var slideFx = 'transform: ' + translateStr + '; -webkit-transform: ' + translateStr + '; -ms-transform:' + translateStr,
                  fadeFx = idx === ctrl.selectedSlideIdx() ? 'opacity: 1; visibility: visible;' : 'opacity: 0; visibility: hidden;';

              return effect === 'fade' ? fadeFx : slideFx;
          };

          return m$1('.w-slider.' + wrapperClass, {
              config: ctrl.config
          }, [m$1('.fontsize-larger', args.title), m$1('.w-slider-mask', [_$1.map(args.slides, function (slide, idx) {
              var translateValue = (idx - ctrl.selectedSlideIdx()) * ctrl.translationSize(),
                  translateStr = 'translate3d(' + translateValue + 'px, 0, 0)';

              return m$1('.slide.w-slide.' + slideClass, {
                  style: effectStyle(idx, translateStr) + ' ' + slide.customStyle
              }, [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-8.w-col-push-2', slide.content)])])]);
          }), m$1('#slide-prev.w-slider-arrow-left.w-hidden-small.w-hidden-tiny', {
              onclick: function onclick() {
                  return sliderClick(ctrl.decrementSlide);
              }
          }, [m$1('.w-icon-slider-left.fa.fa-lg.fa-angle-left.fontcolor-terciary')]), m$1('#slide-next.w-slider-arrow-right.w-hidden-small.w-hidden-tiny', {
              onclick: function onclick() {
                  return sliderClick(ctrl.incrementSlide);
              }
          }, [m$1('.w-icon-slider-right.fa.fa-lg.fa-angle-right.fontcolor-terciary')]), m$1('.w-slider-nav.w-slider-nav-invert.w-round.slide-nav', _$1(args.slides.length).times(function (idx) {
              return m$1('.slide-bullet.w-slider-dot' + (ctrl.selectedSlideIdx() === idx ? '.w-active' : ''), {
                  onclick: function onclick() {
                      return sliderClick(ctrl.selectedSlideIdx, idx);
                  }
              });
          }))])]);
      }
  };

  var contributionActivities = {
      controller: function controller(args) {
          var interval = void 0;
          var collection = m$1.prop([]),
              resource = m$1.prop(),
              collectionIndex = m$1.prop(0),
              collectionSize = m$1.prop(),
              collectionL = postgrest$1.loader(models.contributionActivity.getPageOptions()),
              nextResource = function nextResource() {
              if (collectionIndex() + 1 > collectionSize()) {
                  collectionIndex(0);
              }

              collectionIndex(collectionIndex() + 1);
              resource(collection()[collectionIndex()]);
              m$1.redraw();
          },
              startConfig = function startConfig(el, isinitialized, context) {
              context.onunload = function () {
                  return clearInterval(interval);
              };
          },
              startTimer = function startTimer() {
              interval = setInterval(nextResource, 15000);
          };

          collectionL.load().then(function (data) {
              collection(data);
              collectionSize(data.length);
              resource(_$1.first(data));
          });

          startTimer();

          return {
              collection: collection,
              collectionL: collectionL,
              resource: resource,
              collectionSize: collectionSize
          };
      },
      view: function view(ctrl, args) {
          if (!ctrl.collectionL() && !_$1.isUndefined(ctrl.resource()) && (ctrl.collectionSize() || 0) > 0) {
              var resource = ctrl.resource(),
                  elapsed = h.translatedTime(resource.elapsed_time),
                  project_link = 'https://catarse.me/' + resource.permalink + '?ref=ctrse_home_activities';

              return m$1('.w-section.section.bg-backs-carrosel', { config: ctrl.startConfig }, [m$1('.w-container.u-text-center.fontcolor-negative', [m$1('.fontsize-large.u-marginbottom-30', 'há ' + parseInt(elapsed.total) + ' ' + elapsed.unit + '...'), m$1('.w-clearfix.w-inline-block.u-marginbottom-10', [m$1('a', { href: project_link }, [m$1('img.thumb-author.u-round', { src: resource.thumbnail, width: 80 })]), m$1('img.thumb-author.u-round', { src: 'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/56d646f7710a7126338b46ff_logo-catarse-back-carrosel.png' }), m$1('a', { href: project_link }, [m$1('img.thumb-author.u-round', { src: resource.project_thumbnail, width: 80, style: 'margin-right: 0;' })])]), m$1('.fontsize-large', resource.name + ' apoiou'), m$1('.fontsize-larger', [m$1('a.link-hidden-white', { href: project_link }, resource.project_name)])])]);
          } else {
              return m$1('div');
          }
      }
  };

  var blogBanner = {
      controller: function controller(args) {},
      view: function view(ctrl, args) {
          return m$1('section.section-large.bg-gray.before-footer[id=\'blog\']', m$1('.w-container', [m$1('.u-text-center', [m$1('a[href=\'http://blog.catarse.me\'][target=\'blank\']', m$1('img.u-marginbottom-10[alt=\'Icon blog\'][src=\'/assets/icon-blog.png\']')), m$1('.fontsize-large.u-marginbottom-60.text-success', m$1('a.link-hidden-success[href=\'http://blog.catarse.me\'][target=\'__blank\']', 'Blog do Catarse'))]), m$1('.w-row', [m$1('.w-col.w-col-4.col-blog-post', [m$1('a.link-hidden.fontweight-semibold.fontsize-base.u-marginbottom-10[href=\'http://blog.catarse.me/dia-da-toalha/\'][target=\'__blank\']'), m$1('.fontsize-smaller.fontcolor-secondary.u-margintop-10')]), m$1('.w-col.w-col-4.col-blog-post', [m$1('a.link-hidden.fontweight-semibold.fontsize-base.u-marginbottom-10[href=\'http://blog.catarse.me/crowdfunding-para-sua-avo/\'][target=\'__blank\']'), m$1('.fontsize-smaller.fontcolor-secondary.u-margintop-10')]), m$1('.w-col.w-col-4.col-blog-post', [m$1('a.link-hidden.fontweight-semibold.fontsize-base.u-marginbottom-10[href=\'http://blog.catarse.me/rebeca-prado/\'][target=\'__blank\']'), m$1('.fontsize-smaller.fontcolor-secondary.u-margintop-10')])])]));
      }
  };

  var footer = {
      view: function view() {
          return m$1('footer.main-footer.main-footer-neg', [m$1('section.w-container', m$1('.w-row', [m$1('.w-col.w-col-9', m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.w-hidden-tiny', [m$1('.footer-full-signature-text.fontsize-small', 'Bem-vindo'), m$1('a.link-footer[href=\'https://www.catarse.me/pt/flex\']', ['Catarse flex', m$1.trust('&nbsp;'), m$1('span.badge.badge-success', 'Novidade‍')]), m$1('a.link-footer[href=\'https://www.catarse.me/pt/team\']', [' Nosso time ', m$1.trust('&lt;'), '3']), m$1('a.link-footer[href=\'http://facebook.com/catarse.me\']', ' Facebook'), m$1('a.link-footer[href=\'http://twitter.com/catarse\']', ' Twitter'), m$1('a.link-footer[href=\'http://instagram.com/catarse\']', ' Instagram'), m$1('a.link-footer[href=\'http://github.com/catarse/catarse\']', ' Github'), m$1('a.link-footer[href=\'http://blog.catarse.me\']', ' Blog'), m$1('a.link-footer[href=\'https://www.catarse.me/pt/jobs\']', ' Trabalhe conosco')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.footer-full-firstcolumn', [m$1('.footer-full-signature-text.fontsize-small', 'Ajuda'), m$1('a.zendesk_widget.link-footer[href=\'https://equipecatarse.zendesk.com/account/dropboxes/20298537\']', ' Contato'), m$1('a.link-footer[href=\'https://www.catarse.me/pt/press\']', ' Imprensa'), m$1('a.link-footer[href=\'http://suporte.catarse.me/\']', ' Central de Suporte'), m$1('a.link-footer[href=\'https://www.catarse.me/pt/guides\']', ' Guia dos Realizadores'), m$1('a.link-footer[href=\'http://pesquisa.catarse.me/\']', ' Retrato FC Brasil 2013/2014'), m$1('a.link-footer[href=\'/pt/terms-of-use\']', ' Termos de uso'), m$1('a.link-footer[href=\'/pt/privacy-policy\']', ' Política de privacidade')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.footer-full-lastcolumn', [m$1('.footer-full-signature-text.fontsize-small', 'Navegue'), m$1('a.w-hidden-small.w-hidden-tiny.link-footer[href=\'/pt/start\']', ' Comece seu projeto'), m$1('a.link-footer[href=\'/pt/explore\']', ' Explore projetos'), m$1('a.w-hidden-main.w-hidden-medium.w-hidden-small.link-footer[href=\'http://blog.catarse.me\']', ' Blog'), m$1('a.w-hidden-main.w-hidden-medium.w-hidden-small.link-footer[href=\'https://equipecatarse.zendesk.com/account/dropboxes/20298537\']', ' Contato'), m$1('a.w-hidden-tiny.link-footer[href=\'/pt/explore?filter=score\']', ' Populares'), m$1('a.w-hidden-tiny.link-footer[href=\'/pt/explore?filter=online\']', ' No ar'), m$1('a.w-hidden-tiny.link-footer[href=\'/pt/explore?filter=finished\']', ' Finalizados')])])), m$1('.w-col.w-col-3.column-social-media-footer', [m$1('.footer-full-signature-text.fontsize-small', 'Assine nossa news'), m$1('.w-form', m$1('form[accept-charset=\'UTF-8\'][action=\'https://catarse.us5.list-manage.com/subscribe/post?u=ebfcd0d16dbb0001a0bea3639&amp;amp;id=149c39709e\'][id=\'mailee-form\'][method=\'post\']', [m$1('div', { style: { 'display': 'none' } }, [m$1('input[name=\'utf8\'][type=\'hidden\'][value=\'✓\']'), m$1('input[name=\'authenticity_token\'][type=\'hidden\'][value=\'3R1ctYgwSe+6YyxzrRjacayI8+uEBOc/y6eMPL9x6Ns=\']')]), m$1('.w-form.footer-newsletter', m$1('input.w-input.text-field.prefix[id=\'EMAIL\'][label=\'email\'][name=\'EMAIL\'][placeholder=\'Digite seu email\'][type=\'email\']')), m$1('a.w-inline-block.btn.btn-edit.postfix.btn-attached[href=\'#\']', m$1('img.footer-news-icon[alt=\'Icon newsletter\'][src=\'/assets/catarse_bootstrap/icon-newsletter-aa77cede92b4d0a314170a10b1c41754.png\']'))])), m$1('.footer-full-signature-text.fontsize-small', 'Redes sociais'), m$1('.w-widget.w-widget-facebook.u-marginbottom-20', m$1('.facebook', m$1('.fb-like.fb_iframe_widget[data-colorscheme=\'dark\'][data-href=\'http://facebook.com/catarse.me\'][data-layout=\'button_count\'][data-send=\'false\'][data-show-faces=\'false\'][data-title=\'\'][data-width=\'260\'][fb-iframe-plugin-query=\'app_id=173747042661491&amp;color_scheme=dark&amp;container_width=225&amp;href=http%3A%2F%2Ffacebook.com%2Fcatarse.me&amp;layout=button_count&amp;locale=pt_BR&amp;sdk=joey&amp;send=false&amp;show_faces=false&amp;width=260\'][fb-xfbml-state=\'rendered\']', m$1('span', { style: { 'vertical-align': 'bottom', 'width': '107px', 'height': '20px' } }, m$1('iframe[allowfullscreen=\'true\'][allowtransparency=\'true\'][class=\'\'][frameborder=\'0\'][height=\'1000px\'][name=\'f34424f8d7e9eec\'][scrolling=\'no\'][src=\'https://www.facebook.com/v2.0/plugins/like.php?app_id=173747042661491&amp;channel=https%3A%2F%2Fstaticxx.facebook.com%2Fconnect%2Fxd_arbiter.php%3Fversion%3D42%23cb%3Df25cdb18199e59c%26domain%3Dwww.catarse.me%26origin%3Dhttps%253A%252F%252Fwww.catarse.me%252Ff20f6c0dd78772c%26relation%3Dparent.parent&amp;color_scheme=dark&amp;container_width=225&amp;href=http%3A%2F%2Ffacebook.com%2Fcatarse.me&amp;layout=button_count&amp;locale=pt_BR&amp;sdk=joey&amp;send=false&amp;show_faces=false&amp;width=260\'][title=\'fb:like Facebook Social Plugin\'][width=\'260px\']', { style: { 'border': 'none', 'visibility': 'visible', 'width': '107px', 'height': '20px' } }))))), m$1('.w-widget.w-widget-twitter', m$1('iframe.twitter-follow-button.twitter-follow-button-rendered[allowtransparency=\'true\'][data-screen-name=\'catarse\'][frameborder=\'0\'][id=\'twitter-widget-0\'][scrolling=\'no\'][src=\'https://platform.twitter.com/widgets/follow_button.40d5e616f4e685dadc7fb77970f64490.en.html#dnt=false&amp;id=twitter-widget-0&amp;lang=en&amp;screen_name=catarse&amp;show_count=true&amp;show_screen_name=true&amp;size=m&amp;time=1464361714462\'][title=\'Twitter Follow Button\']', { style: { 'position': 'static', 'visibility': 'visible', 'width': '206px', 'height': '20px' } })), m$1('.u-margintop-30', [m$1('.footer-full-signature-text.fontsize-small', 'Change language'), m$1('[id=\'google_translate_element\']')])])])), m$1('.w-container', m$1('.footer-full-copyleft', [m$1('img.u-marginbottom-20[alt=\'Logo footer\'][src=\'/assets/logo-footer-b5edd43e0ec420a39310ea965341f3ea.png\']'), m$1('.lineheight-loose', m$1('a.link-footer-inline[href=\'http://github.com/catarse/catarse\']', 'Feito com amor | 2016 | Open source'))]))]);
      }
  };

  var I18nScope$11 = _$1.partial(h.i18nScope, 'projects.home');

  var projectsHome = {
      controller: function controller(args) {
          var sample6 = _$1.partial(_$1.sample, _$1, 6),
              loader = postgrest$1.loaderWithToken,
              project = models.project,
              filters = projectFiltersVM().filters,
              userFriendVM = postgrest$1.filtersVM({ user_id: 'eq' }),
              friendListVM = postgrest$1.paginationVM(models.userFriend, 'user_id.desc', {
              'Prefer': 'count=exact'
          }),
              currentUser = h.getUser(),
              hasFBAuth = currentUser.has_fb_auth,
              vm = homeVM();

          project.pageSize(20);

          userFriendVM.user_id(currentUser.user_id);

          if (hasFBAuth && !friendListVM.collection().length) {
              friendListVM.firstPage(userFriendVM.parameters());
          }

          var collections = _$1.map(['score', 'contributed_by_friends'], function (name) {
              var f = filters[name],
                  cLoader = loader(project.getPageOptions(_$1.extend({}, { order: 'score.desc' }, f.filter.parameters()))),
                  collection = m$1.prop([]);

              cLoader.load().then(_$1.compose(collection, sample6));

              return {
                  title: f.nicename,
                  hash: name === 'score' ? 'all' : name,
                  collection: collection,
                  loader: cLoader,
                  showFriends: name === 'contributed_by_friends'
              };
          });

          return {
              collections: collections,
              slidesContent: vm.banners,
              hasFBAuth: hasFBAuth
          };
      },
      view: function view(ctrl) {
          var slides = function slides() {
              return _$1.map(ctrl.slidesContent, function (slide) {
                  var customStyle = 'background-image: url(' + slide.image + ');';
                  var content = m$1('.w-container.u-text-center', [m$1('.w-row.u-marginbottom-40', [m$1('h1.fontcolor-negative.fontsize-megajumbo.u-marginbottom-20', slide.title), m$1('h2.fontcolor-negative.fontsize-large', m$1.trust(slide.subtitle))]), m$1('a.btn.btn-large.u-marginbottom-10.btn-inline', { href: slide.link }, slide.cta)]);

                  return {
                      content: content,
                      customStyle: customStyle
                  };
              });
          };

          return m$1('#projects-home-component', [
          // m.component(menu, {transparent: true}),
          m$1.component(slider, {
              slides: slides(),
              effect: 'fade',
              slideClass: 'hero-slide start',
              wrapperClass: 'hero-full hero-full-slide',
              sliderTime: 10000
          }), _$1.map(ctrl.collections, function (collection) {
              return m$1.component(projectRow, {
                  collection: collection,
                  title: collection.title,
                  ref: 'home_' + (collection.hash === 'all' ? 'score' : collection.hash),
                  showFriends: collection.showFriends
              });
          }),
          // m.component(contributionActivities),
          !ctrl.hasFBAuth ? m$1.component(UnsignedFriendFacebookConnect, { largeBg: true }) : '', m$1.component(blogBanner)
          // m.component(footer, {expanded: true}),
          // m.component(contributionActivities)
          ]);
      }
  };

  var projectShareBox = {
      controller: function controller() {
          return {
              displayEmbed: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('.pop-share', {
              style: 'display: block;'
          }, [m$1('.w-hidden-main.w-hidden-medium.w-clearfix', [m$1('a.btn.btn-small.btn-terciary.btn-inline.u-right', {
              onclick: args.displayShareBox.toggle
          }, 'Fechar'), m$1('.fontsize-small.fontweight-semibold.u-marginbottom-30', 'Compartilhe este projeto')]), m$1('.w-widget.w-widget-twitter.w-hidden-small.w-hidden-tiny.share-block', [m$1('iframe[allowtransparency="true"][width="120px"][height="22px"][frameborder="0"][scrolling="no"][src="//platform.twitter.com/widgets/tweet_button.8d007ddfc184e6776be76fe9e5e52d69.en.html#_=1442425984936&count=horizontal&dnt=false&id=twitter-widget-1&lang=en&original_referer=https%3A%2F%2Fwww.catarse.me%2Fpt%2F' + args.project().permalink + '&size=m&text=Confira%20o%20projeto%20' + args.project().name + '%20no%20%40catarse&type=share&url=https%3A%2F%2Fwww.catarse.me%2Fpt%2F' + args.project().permalink + '%3Fref%3Dtwitter%26utm_source%3Dtwitter.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share&via=catarse"]')]), m$1('a.w-hidden-small.widget-embed.w-hidden-tiny.fontsize-small.link-hidden.fontcolor-secondary[href="js:void(0);"]', {
              onclick: ctrl.displayEmbed.toggle
          }, '< embed >'), ctrl.displayEmbed() ? m$1('.embed-expanded.u-margintop-30', [m$1('.fontsize-small.fontweight-semibold.u-marginbottom-20', 'Insira um widget em seu site'), m$1('.w-form', [m$1('input.w-input[type="text"][value="<iframe frameborder="0" height="314px" src="https://www.catarse.me/pt/projects/' + args.project().id + '/embed" width="300px" scrolling="no"></iframe>"]')]), m$1('.card-embed', [m$1('iframe[frameborder="0"][height="350px"][src="/projects/' + args.project().id + '/embed"][width="300px"][scrolling="no"]')])]) : '', args.project().permalink ? m$1.component(facebookButton, {
              mobile: true,
              url: 'https://www.catarse.me/' + args.project().permalink + '?ref=facebook&utm_source=facebook.com&utm_medium=social&utm_campaign=project_share'
          }) : '', m$1('a.w-hidden-main.w-hidden-medium.btn.btn-medium.btn-tweet.u-marginbottom-20[href="http://twitter.com/?status=Acabei%20de%20apoiar%20o%20projeto%20' + args.project().name + '%20https://www.catarse.me/' + args.project().permalink + '%3Fref%3Dtwitter%26utm_source%3Dtwitter.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share"][target="_blank"]', [m$1('span.fa.fa-twitter'), ' Tweet']), m$1('a.w-hidden-main.w-hidden-medium.btn.btn-medium[data-action="share/whatsapp/share"]', {
              href: 'whatsapp://send?text=' + encodeURIComponent('https://www.catarse.me/' + args.project().permalink + '/?ref=whatsapp&utm_source=whatsapp&utm_medium=social&utm_campaign=project_share')
          }, [m$1('span.fa.fa-whatsapp'), ' Whatsapp'])]);
      }
  };

  var addressTag = {
      view: function view(ctrl, args) {
          var project = args.project,
              address = project().address || {
              state_acronym: '',
              city: ''
          };

          return !_.isNull(address) ? m$1('a.btn.btn-inline.btn-small.btn-transparent.link-hidden-light.u-marginbottom-10[href="/pt/explore?pg_search=' + address.state_acronym + '"]', {
              onclick: h.analytics.event({
                  cat: 'project_view',
                  act: 'project_location_link',
                  lbl: address.city + ' ' + address.state_acronym,
                  project: project()
              })
          }, [m$1('span.fa.fa-map-marker'), ' ' + address.city + ', ' + address.state_acronym]) : '';
      }
  };

  var categoryTag = {
      view: function view(ctrl, args) {
          var project = args.project;

          return project ? m$1('a.btn.btn-inline.btn-small.btn-transparent.link-hidden-light[href="/pt/explore#by_category_id/' + project().category_id + '"]', {
              onclick: h.analytics.event({
                  cat: 'project_view',
                  act: 'project_category_link',
                  lbl: project().category_name,
                  project: project()
              })
          }, [m$1('span.fa.fa-tag'), ' ', project().category_name]) : '';
      }
  };

  var projectHighlight = {
      controller: function controller() {
          return {
              displayShareBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1('#project-highlight', [project().video_embed_url ? m$1('.w-embed.w-video.project-video', {
              style: 'min-height: 240px;'
          }, [m$1('iframe.embedly-embed[itemprop="video"][src="' + project().video_embed_url + '"][frameborder="0"][allowFullScreen]')]) : m$1('.project-image', {
              style: 'background-image:url(\'' + (project().original_image || project().project_img) + '\');'
          }), m$1('.w-hidden-small.w-hidden-tiny', [m$1.component(addressTag, { project: project }), m$1.component(categoryTag, { project: project })]), m$1('.project-blurb', project().headline), m$1('.project-share.w-hidden-small.w-hidden-tiny', m$1('.u-marginbottom-30.u-text-center-small-only', [m$1('.w-inline-block.fontcolor-secondary.fontsize-smaller.u-marginright-20', 'Compartilhar:'), project().permalink ? m$1.component(facebookButton, {
              url: 'https://www.catarse.me/' + project().permalink + '?ref=facebook&utm_source=facebook.com&utm_medium=social&utm_campaign=project_share'
          }) : '', project().permalink ? m$1.component(facebookButton, {
              messenger: true,
              url: 'https://www.catarse.me/' + project().permalink + '?ref=facebook&utm_source=facebook.com&utm_medium=messenger&utm_campaign=project_share'
          }) : '', m$1('button#more-share.btn.btn-inline.btn-medium.btn-terciary', {
              style: {
                  'transition': 'all 0.5s ease 0s'
              },
              onclick: ctrl.displayShareBox.toggle
          }, ['···', ' Mais']), ctrl.displayShareBox() ? m$1(projectShareBox, {
              project: project,
              displayShareBox: ctrl.displayShareBox
          }) : '']))]);
      }
  };

  var projectMode = {
      view: function view(ctrl, args) {
          var project = args.project(),
              mode = project.mode,
              modeImgSrc = mode === 'aon' ? '/assets/aon-badge.png' : '/assets/flex-badge.png',
              modeTitle = mode === 'aon' ? 'Campanha Tudo-ou-nada ' : 'Campanha Flexível ',
              goal = _$1.isNull(project.goal) ? 'não definida' : h.formatNumber(project.goal),
              buildTooltip = function buildTooltip(el) {
              return m$1.component(tooltip, {
                  el: el,
                  text: mode === 'aon' ? 'Somente receberá os recursos se atingir ou ultrapassar a meta até o dia ' + h.momentify(project.zone_expires_at, 'DD/MM/YYYY') + '.' : 'O realizador receberá todos os recursos quando encerrar a campanha, mesmo que não tenha atingido esta meta.',
                  width: 280
              });
          };

          return m$1('#' + mode + '.w-row', [m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [!_$1.isEmpty(project) ? m$1('img[src="' + modeImgSrc + '"][width=\'30\']') : '']), m$1('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', [m$1('.fontsize-base.fontweight-semibold', 'Meta R$ ' + h.selfOrEmpty(goal, '--')), m$1('.w-inline-block.fontsize-smallest._w-inline-block', [!_$1.isEmpty(project) ? modeTitle : '', buildTooltip('span.w-inline-block.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary')])])]);
      }
  };

  var projectReminder = {
      controller: function controller(args) {
          var l = m$1.prop(false);
          var project = args.project,
              filterVM = postgrest.filtersVM({
              project_id: 'eq'
          }),
              storeReminderName = 'remind_' + project().id,
              popNotification = m$1.prop(false),
              submitReminder = function submitReminder() {
              if (!h.getUser()) {
                  h.storeAction(storeReminderName, submitReminder);
                  return h.navigateToDevise();
              }
              var loaderOpts = project().in_reminder ? models.projectReminder.deleteOptions(filterVM.parameters()) : models.projectReminder.postOptions({
                  project_id: project().id
              });
              l = postgrest.loaderWithToken(loaderOpts);

              l.load().then(function () {
                  project().in_reminder = !project().in_reminder;

                  if (project().in_reminder) {
                      popNotification(true);
                      setTimeout(function () {
                          popNotification(false);
                          m$1.redraw();
                      }, 5000);
                  } else {
                      popNotification(false);
                  }
              });
          };

          h.callStoredAction(storeReminderName, submitReminder);
          filterVM.project_id(project().id);

          return {
              l: l,
              submitReminder: submitReminder,
              popNotification: popNotification
          };
      },
      view: function view(ctrl, args) {
          var mainClass = args.type === 'button' ? '' : '.u-text-center.u-marginbottom-30',
              buttonClass = args.type === 'button' ? 'w-button btn btn-terciary btn-no-border' : 'btn-link link-hidden fontsize-small',
              hideTextOnMobile = args.hideTextOnMobile || false,
              project = args.project;

          return m$1('#project-reminder' + mainClass, [m$1('button[class="' + buttonClass + ' ' + (project().in_reminder ? 'link-hidden-success' : 'fontcolor-secondary') + ' fontweight-semibold"]', {
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_floatingreminder_click', project: project() }, ctrl.submitReminder)
          }, [ctrl.l() ? 'aguarde ...' : m$1('span.fa.fa-clock-o', [m$1('span' + (hideTextOnMobile ? '.w-hidden-medium' : ''), project().in_reminder ? ' Lembrete ativo' : ' Lembrar-me')])]), ctrl.popNotification() ? m$1.component(popNotification, {
              message: 'Ok! Vamos te mandar um lembrete por e-mail 48 horas antes do fim da campanha'
          }) : '']);
      }
  };

  var ownerMessageContent = {
      controller: function controller(args) {
          var l = m$1.prop(false),
              sendSuccess = m$1.prop(false),
              submitDisabled = m$1.prop(false),

          //sets default values when user is not logged in
          user = h.getUser() || { name: '', email: '' },
              from_name = m$1.prop(user.name),
              from_email = m$1.prop(user.email),
              content = m$1.prop('');

          var sendMessage = function sendMessage() {
              if (l()) {
                  return false;
              }
              submitDisabled(true);

              var loaderOpts = models.directMessage.postOptions({
                  from_name: from_name(),
                  from_email: from_email(),
                  user_id: h.getUser().user_id,
                  content: content(),
                  project_id: h.getCurrentProject().project_id,
                  to_user_id: h.getCurrentProject().project_user_id
              });

              l = postgrest.loaderWithToken(loaderOpts);

              l.load().then(sendSuccess(true));

              submitDisabled(false);
              return false;
          };

          return {
              sendMessage: sendMessage,
              submitDisabled: submitDisabled,
              sendSuccess: sendSuccess,
              userDetails: args,
              from_name: from_name,
              from_email: from_email,
              content: content,
              l: l
          };
      },
      view: function view(ctrl, args) {
          var successMessage = m$1('.modal-dialog-content.u-text-center', [m$1('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m$1('p.fontsize-large', 'Sua mensagem foi enviada com sucesso para ' + ctrl.userDetails().name + '. Você vai receber uma cópia no seu email e pode seguir a conversa por lá!')]),
              contactForm = [m$1('.modal-dialog-content', [m$1('.w-form', [m$1('form', { onsubmit: h.validate().submit([{
                  prop: ctrl.from_name,
                  rule: 'text'
              }, {
                  prop: ctrl.from_email,
                  rule: 'email'
              }, {
                  prop: ctrl.content,
                  rule: 'text'
              }], ctrl.sendMessage) }, [m$1('.w-row', [m$1('.w-col.w-col-6.w-sub-col', [m$1('label.fontsize-smaller', 'Seu nome'), m$1('input.w-input.text-field[value=\'' + ctrl.from_name() + '\'][type=\'text\'][required=\'required\']', {
              onchange: m$1.withAttr('value', ctrl.from_name),
              class: h.validate().hasError(ctrl.from_name) ? 'error' : ''
          })]), m$1('.w-col.w-col-6', [m$1('label.fontsize-smaller', 'Seu email'), m$1('input.w-input.text-field[value=\'' + ctrl.from_email() + '\'][type=\'text\'][required=\'required\']', {
              onchange: m$1.withAttr('value', ctrl.from_email),
              class: h.validate().hasError(ctrl.from_email) ? 'error' : ''
          })])]), m$1('label', 'Mensagem'), m$1('textarea.w-input.text-field.height-small[required=\'required\']', {
              onchange: m$1.withAttr('value', ctrl.content),
              class: h.validate().hasError(ctrl.content) ? 'error' : ''
          }), m$1('.u-marginbottom-10.fontsize-smallest.fontcolor-terciary', 'Você receberá uma cópia desta mensagem em seu email.'), m$1('.w-row', h.validationErrors().length ? _$1.map(h.validationErrors(), function (errors) {
              return m$1('span.fontsize-smallest.text-error', [m$1('span.fa.fa-exclamation-triangle'), ' ' + errors.message, m$1('br')]);
          }) : ''), m$1('.modal-dialog-nav-bottom', m$1('.w-row', m$1('.w-col.w-col-6.w-col-push-3', !ctrl.l() ? m$1('input.w-button.btn.btn-large[type="submit"][value="Enviar mensagem"]', { disabled: ctrl.submitDisabled() }) : h.loader())))])])])];

          return m$1('div', [m$1('.modal-dialog-header', m$1('.fontsize-large.u-text-center', 'Enviar mensagem')), ctrl.sendSuccess() ? successMessage : contactForm]);
      }
  };

  var projectUserCard = {
      controller: function controller(args) {
          return { displayModal: h.toggleProp(false, true) };
      },
      view: function view(ctrl, args) {
          var project = args.project;
          var contactModalC = [ownerMessageContent, args.userDetails];
          var userDetail = args.userDetails();

          return m$1('#user-card', !userDetail ? 'carregando...' : m$1('.u-marginbottom-30.u-text-center-small-only', [ctrl.displayModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: contactModalC
          }) : '', m$1('.w-row', [m$1('.w-col.w-col-4', [m$1('img.thumb.u-marginbottom-30.u-round[width="100"][itemprop="image"][src="' + userDetail.profile_img_thumbnail + '"]')]), m$1('.w-col.w-col-8', [m$1('.fontsize-small.link-hidden.fontweight-semibold.u-marginbottom-10.lineheight-tight[itemprop="name"]', [m$1('a.link-hidden[href="/users/' + userDetail.id + '"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_link', lbl: userDetail.id, project: project() }) }, userDetail.name)]), m$1('.fontsize-smallest', [h.pluralize(userDetail.total_published_projects, ' criado', ' criados'), m$1.trust('&nbsp;&nbsp;|&nbsp;&nbsp;'), h.pluralize(userDetail.total_contributed_projects, ' apoiado', ' apoiados')]), m$1('ul.w-hidden-tiny.w-hidden-small.w-list-unstyled.fontsize-smaller.fontweight-semibold.u-margintop-20.u-marginbottom-20', [!_$1.isEmpty(userDetail.facebook_link) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="' + userDetail.facebook_link + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_fb', lbl: userDetail.facebook_link, project: project() }) }, 'Perfil no Facebook')]) : '', !_$1.isEmpty(userDetail.twitter_username) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="https://twitter.com/' + userDetail.twitter_username + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_twitter', lbl: userDetail.twitter_username, project: project() }) }, 'Perfil no Twitter')]) : '', _$1.map(userDetail.links, function (link) {
              var parsedLink = h.parseUrl(link);

              return !_$1.isEmpty(parsedLink.hostname) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="' + link + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_otherlinks', lbl: link, project: project() }) }, parsedLink.hostname)]) : '';
          })]), !_$1.isEmpty(userDetail) ? [m$1('a.w-button.btn.btn-terciary.btn-small.btn-inline[href=\'javascript:void(0);\']', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_sendmsg', lbl: userDetail.id, project: project() }, ctrl.displayModal.toggle) }, 'Enviar mensagem')] : '', args.project().is_admin_role ? m$1('p', userDetail.email) : ''])])]));
      }
  };

  var I18nScope$12 = _$1.partial(h.i18nScope, 'projects.project_sidebar');

  var projectSidebar = {
      controller: function controller(args) {
          var project = args.project,
              animateProgress = function animateProgress(el, isInitialized) {
              if (!isInitialized) {
                  (function () {
                      var animation = void 0,
                          progress = 0,
                          pledged = 0,
                          contributors = 0,
                          pledgedIncrement = project().pledged / project().progress,
                          contributorsIncrement = project().total_contributors / project().progress;

                      var progressBar = document.getElementById('progressBar'),
                          pledgedEl = document.getElementById('pledged'),
                          contributorsEl = document.getElementById('contributors'),
                          animate = function animate() {
                          animation = setInterval(incrementProgress, 28);
                      },
                          incrementProgress = function incrementProgress() {
                          if (progress <= parseInt(project().progress)) {
                              progressBar.style.width = progress + '%';
                              pledgedEl.innerText = 'R$ ' + h.formatNumber(pledged);
                              contributorsEl.innerText = parseInt(contributors) + ' pessoas';
                              el.innerText = progress + '%';
                              pledged = pledged + pledgedIncrement;
                              contributors = contributors + contributorsIncrement;
                              progress = progress + 1;
                          } else {
                              clearInterval(animation);
                          }
                      };

                      setTimeout(function () {
                          animate();
                      }, 1800);
                  })();
              }
          };

          return {
              animateProgress: animateProgress,
              displayShareBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              elapsed = project().elapsed_time,
              remaining = project().remaining_time,
              displayCardClass = function displayCardClass() {
              var states = {
                  'waiting_funds': 'card-waiting',
                  'successful': 'card-success',
                  'failed': 'card-error',
                  'draft': 'card-dark',
                  'in_analysis': 'card-dark',
                  'approved': 'card-dark'
              };

              return states[project().state] ? 'card u-radius zindex-10 ' + states[project().state] : '';
          },
              displayStatusText = function displayStatusText() {
              var states = {
                  'approved': I18n$1.t('display_status.approved', I18nScope$12()),
                  'online': h.existy(project().zone_expires_at) && project().open_for_contributions ? I18n$1.t('display_status.online', I18nScope$12({ date: h.momentify(project().zone_expires_at) })) : '',
                  'failed': I18n$1.t('display_status.failed', I18nScope$12({ date: h.momentify(project().zone_expires_at), goal: project().goal })),
                  'rejected': I18n$1.t('display_status.rejected', I18nScope$12()),
                  'in_analysis': I18n$1.t('display_status.in_analysis', I18nScope$12()),
                  'successful': I18n$1.t('display_status.successful', I18nScope$12({ date: h.momentify(project().zone_expires_at) })),
                  'waiting_funds': I18n$1.t('display_status.waiting_funds', I18nScope$12()),
                  'draft': I18n$1.t('display_status.draft', I18nScope$12())
              };

              return states[project().state];
          };

          return m$1('#project-sidebar.aside', [m$1('.project-stats', [m$1('.project-stats-inner', [m$1('.project-stats-info', [m$1('.u-marginbottom-20', [m$1('#pledged.fontsize-largest.fontweight-semibold.u-text-center-small-only', 'R$ ' + (project().pledged ? h.formatNumber(project().pledged) : '0')), m$1('.fontsize-small.u-text-center-small-only', [I18n$1.t('contributors_call', I18nScope$12()), m$1('span#contributors.fontweight-semibold', I18n$1.t('contributors_count', I18nScope$12({ count: project().total_contributors }))), !project().expires_at && elapsed ? ' em ' + I18n$1.t('datetime.distance_in_words.x_' + elapsed.unit, { count: elapsed.total }, I18nScope$12()) : ''])]), m$1('.meter', [m$1('#progressBar.meter-fill', {
              style: {
                  width: project().progress + '%'
              }
          })]), m$1('.w-row.u-margintop-10', [m$1('.w-col.w-col-5.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-small.fontweight-semibold.lineheight-tighter', (project().progress ? parseInt(project().progress) : '0') + '%')]), m$1('.w-col.w-col-7.w-col-small-6.w-col-tiny-6.w-clearfix', [m$1('.u-right.fontsize-small.lineheight-tighter', remaining && remaining.total ? [m$1('span.fontweight-semibold', remaining.total), I18n$1.t('remaining_time.' + remaining.unit, I18nScope$12({ count: remaining.total }))] : '')])])]), m$1('.w-row', [m$1.component(projectMode, {
              project: project
          })])]), project().open_for_contributions ? m$1('a#contribute_project_form.btn.btn-large.u-marginbottom-20[href="javascript:void(0);"]', {
              // onclick: h.analytics.event({cat: 'contribution_create',act: 'contribution_button_click', project: project()}, () => m.route(`/projects/${project().project_id}/contribution`))
              onclick: h.analytics.event({ cat: 'contribution_create', act: 'contribution_button_click', project: project() }, function () {
                  return h.navigateTo('/projects/' + project().project_id + '/contributions/new');
              })

          }, I18n$1.t('submit', I18nScope$12())) : '', project().open_for_contributions ? m$1.component(projectReminder, {
              project: project,
              type: 'link'
          }) : '', m$1('div[class="fontsize-smaller u-marginbottom-30 ' + displayCardClass() + '"]', displayStatusText())]), m$1('.project-share.w-hidden-main.w-hidden-medium', [m$1.component(addressTag, { project: project }), m$1.component(categoryTag, { project: project }), m$1('.u-marginbottom-30.u-text-center-small-only', m$1('button.btn.btn-inline.btn-medium.btn-terciary', {
              onclick: ctrl.displayShareBox.toggle
          }, 'Compartilhar este projeto')), ctrl.displayShareBox() ? m$1(projectShareBox, {
              project: project,
              displayShareBox: ctrl.displayShareBox
          }) : '']), m$1('.user-c', m$1.component(projectUserCard, {
              userDetails: args.userDetails,
              project: project
          }))]);
      }
  };

  var userContributionDetail = {
      controller: function controller(args) {
          var contribution = args.contribution,
              rewardDetails = args.rewardDetails,
              chosenReward = _$1.findWhere(rewardDetails(), { id: contribution.reward_id });

          return {
              contribution: contribution,
              chosenReward: chosenReward
          };
      },
      view: function view(ctrl, args) {
          var contribution = args.contribution;

          return m$1('.user-contribution-detail', [m$1('.w-col.w-col-4', [m$1('.fontsize-smallest.lineheight-tight.fontweight-semibold.u-marginbottom-10', 'Valor do apoio:'), m$1('.fontsize-large', 'R$' + contribution.value)]), m$1('.w-col.w-col-4', m$1.component(paymentStatus, { item: contribution })), m$1('.w-col.w-col-4', [m$1('.fontsize-smaller.fontweight-semibold.u-marginbottom-10', 'Recompensa:'), m$1('.fontsize-smallest.lineheight-tight.u-marginbottom-20', ctrl.chosenReward.description), m$1('.fontsize-smallest.lineheight-looser', [m$1('span.fontweight-semibold', 'Estimativa de entrega: '), h.momentify(ctrl.chosenReward.deliver_at, 'MMM/YYYY')])])]);
      }
  };

  var getUserProjectContributions = function getUserProjectContributions(user_id, project_id) {
      var vm = postgrest$1.filtersVM({ user_id: 'eq', project_id: 'eq' });

      vm.user_id(user_id);
      vm.project_id(project_id);

      var lProjectContributions = postgrest$1.loaderWithToken(models.userContribution.getPageOptions(vm.parameters()));

      return lProjectContributions.load();
  };

  var contributionVM = {
      getUserProjectContributions: getUserProjectContributions
  };

  var projectHeader = {
      controller: function controller(args) {
          var project = args.project,
              currentUser = h.getUser(),
              projectContributions = m$1.prop([]);

          if (h.isProjectPage() && currentUser && !_$1.isUndefined(project())) {
              contributionVM.getUserProjectContributions(currentUser.user_id, project().project_id).then(projectContributions);
          }

          return {
              projectContributions: projectContributions,
              showContributions: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              rewardDetails = args.rewardDetails;

          if (_$1.isUndefined(project())) {
              project = m$1.prop({});
          }

          return m$1('#project-header', [m$1('.w-section.section-product.' + project().mode), m$1('.w-section.page-header.u-text-center', [m$1('.w-container', [m$1('h1.fontsize-larger.fontweight-semibold.project-name[itemprop="name"]', h.selfOrEmpty(project().name || project().project_name)), m$1('h2.fontsize-base.lineheight-looser[itemprop="author"]', ['por ', project().user ? project().user.name : project().owner_name ? project().owner_name : '']), !_$1.isEmpty(ctrl.projectContributions()) ? m$1(".card.card-terciary.u-radius.u-margintop-20", [m$1(".fontsize-small.u-text-center", [m$1("span.fa.fa-thumbs-up"), " Você é apoiador deste projeto! ", m$1("a.alt-link[href='javascript:void(0);']", { onclick: ctrl.showContributions.toggle }, "Detalhes")]), ctrl.showContributions() ? m$1(".card.u-margintop-20", m$1(".w-row", _$1.map(ctrl.projectContributions(), function (contribution) {
              return m$1.component(userContributionDetail, { contribution: contribution, rewardDetails: rewardDetails });
          }))) : '']) : ''])]), m$1('.w-section.project-main', [m$1('.w-container', [m$1('.w-row.project-main', [m$1('.w-col.w-col-8.project-highlight', m$1.component(projectHighlight, {
              project: project
          })), m$1('.w-col.w-col-4', m$1.component(projectSidebar, {
              project: project,
              userDetails: args.userDetails
          }))])])])]);
      }
  };

  var projectTabs = {
      controller: function controller(args) {
          var isFixed = m$1.prop(false),
              originalPosition = m$1.prop(-1);

          var fixOnScroll = function fixOnScroll(el) {
              return function () {
                  var viewportOffset = el.getBoundingClientRect();

                  if (window.scrollY <= originalPosition()) {
                      originalPosition(-1);
                      isFixed(false);
                      m$1.redraw();
                  }

                  if (viewportOffset.top < 0 || window.scrollY > originalPosition() && originalPosition() > 0) {
                      if (!isFixed()) {
                          originalPosition(window.scrollY);
                          isFixed(true);
                          m$1.redraw();
                      }
                  }
              };
          };

          var navDisplay = function navDisplay(el, isInitialized) {
              if (!isInitialized) {
                  var fixNavBar = fixOnScroll(el);
                  window.addEventListener('scroll', fixNavBar);
              }
          };

          return {
              navDisplay: navDisplay,
              isFixed: isFixed
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              rewards = args.rewardDetails;

          var mainClass = !ctrl.isFixed() || project().is_owner_or_admin ? '.w-section.project-nav' : '.w-section.project-nav.project-nav-fixed';

          return m$1('nav-wrapper', project() ? [m$1(mainClass, {
              config: ctrl.navDisplay
          }, [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-8', [!_.isEmpty(rewards()) ? m$1('a[id="rewards-link"][class="w-hidden-main w-hidden-medium dashboard-nav-link mf  ' + (h.hashMatch('#rewards') ? 'selected' : '') + '"][href="/' + project().permalink + '#rewards"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_rewards_view', project: project() })
          }, 'Recompensas') : m$1('a[id="rewards-link"][class="w-hidden-main w-hidden-medium dashboard-nav-link mf ' + (h.hashMatch('#contribution_suggestions') ? 'selected' : '') + '"][href="/' + project().permalink + '#contribution_suggestions"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_contribsuggestions_view', project: project() })
          }, 'Valores Sugeridos'), m$1('a[id="about-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#about') || h.hashMatch('') ? 'selected' : '') + '"][href="/' + project().permalink + '#about"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_about_view', project: project() })
          }, 'Sobre'), m$1('a[id="posts-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#posts') ? 'selected' : '') + '"][href="/' + project().permalink + '#posts"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_posts_view', project: project() })
          }, ['Novidades ', m$1('span.badge', project() ? project().posts_count : '')]), m$1('a[id="contributions-link"][class="w-hidden-small w-hidden-tiny dashboard-nav-link mf ' + (h.hashMatch('#contributions') ? 'selected' : '') + '"][href="/' + project().permalink + '#contributions"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_contributions_view', project: project() })
          }, ['Apoiadores ', m$1('span.badge.w-hidden-small.w-hidden-tiny', project() ? project().total_contributors : '-')]), m$1('a[id="comments-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#comments') ? 'selected' : '') + '"][href="/' + project().permalink + '#comments"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_comments_view', project: project() })
          }, ['Comentários ', project() ? m$1('fb:comments-count[href="http://www.catarse.me/' + project().permalink + '"][class="badge project-fb-comment w-hidden-small w-hidden-tiny"][style="display: inline"]', m$1.trust('&nbsp;')) : '-'])]), project() ? m$1('.w-col.w-col-4.w-hidden-small.w-hidden-tiny', project().open_for_contributions ? [m$1('.w-row.project-nav-back-button', [m$1('.w-col.w-col-6.w-col-medium-8', [m$1('a.w-button.btn[href="/projects/' + project().id + '/contributions/new"]', {
              onclick: h.analytics.event({ cat: 'contribution_create', act: 'contribution_floatingbtn_click', project: project() })
          }, 'Apoiar ‍este projeto')]), m$1('.w-col.w-col-6.w-col-medium-4', {
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_floatingreminder_click', project: project() })
          }, [m$1.component(projectReminder, { project: project, type: 'button', hideTextOnMobile: true })])])] : '') : ''])])]), ctrl.isFixed() && !project().is_owner_or_admin ? m$1('.w-section.project-nav') : ''] : '');
      }
  };

  var projectRewardList = {
      controller: function controller(args) {
          var storeKey = 'selectedReward',
              vm = rewardVM;

          var setInput = function setInput(el, isInitialized) {
              return !isInitialized ? el.focus() : false;
          };

          var submitContribution = function submitContribution() {
              var valueFloat = h.monetaryToFloat(vm.contributionValue);

              if (valueFloat < vm.selectedReward().minimum_value) {
                  vm.error('O valor de apoio para essa recompensa deve ser de no mínimo R$' + vm.selectedReward().minimum_value);
              } else {
                  vm.error('');

                  // THIS CHECK IS ONLY NECESSARY IF WHEN WE START ROUTING DIRECTLY TO THE /contributions/edit page
                  // if (!h.getUser()) {
                  //     h.storeObject(storeKey, {value: valueFloat, reward: vm.selectedReward()});

                  //     return h.navigateToDevise('/' + projectVM.currentProject().permalink);
                  // } else {
                  vm.contributionValue(valueFloat);
                  //h.navigateTo(`/projects/${projectVM.currentProject().id}/contributions/new?reward_id=${vm.selectedReward().id}`);
                  h.navigateTo('/projects/' + projectVM.currentProject().project_id + '/contributions/fallback_create?contribution%5Breward_id%5D=' + vm.selectedReward().id + '&contribution%5Bvalue%5D=' + valueFloat);
                  // m.route(`/projects/${projectVM.currentProject().id}/payment`, {
                  //    project_user_id: projectVM.currentProject().user_id
                  // });
                  // }
              }

              return false;
          };

          if (h.getStoredObject(storeKey)) {
              var _h$getStoredObject = h.getStoredObject(storeKey);

              var value = _h$getStoredObject.value;
              var reward = _h$getStoredObject.reward;


              h.removeStoredObject(storeKey);
              vm.selectedReward(reward);
              vm.contributionValue(h.applyMonetaryMask(value + ',00'));
              submitContribution();
          }

          return {
              applyMask: vm.applyMask,
              error: vm.error,
              submitContribution: submitContribution,
              openedReward: vm.selectedReward,
              selectReward: vm.selectReward,
              contributionValue: vm.contributionValue,
              setInput: setInput
          };
      },
      view: function view(ctrl, args) {
          //FIXME: MISSING ADJUSTS
          // - add draft admin modifications
          var project = args.project() || { open_for_contributions: false };
          return m$1('#rewards.u-marginbottom-30', _$1.map(args.rewardDetails(), function (reward) {

              return m$1('div[class="' + (h.rewardSouldOut(reward) ? 'card-gone' : 'card-reward ' + (project.open_for_contributions ? 'clickable' : '')) + ' card card-secondary u-marginbottom-10"]', {
                  onclick: h.analytics.event({
                      cat: 'contribution_create',
                      act: 'contribution_reward_click',
                      lbl: reward.minimum_value,
                      project: project,
                      extraData: {
                          reward_id: reward.id,
                          reward_value: reward.minimum_value
                      }
                  }, ctrl.selectReward(reward))
              }, [m$1('.u-marginbottom-20', [m$1('.fontsize-base.fontweight-semibold', 'Para R$ ' + h.formatNumber(reward.minimum_value) + ' ou mais'), m$1('.fontsize-smaller.fontweight-semibold', h.pluralize(reward.paid_count, ' apoio', ' apoios')), reward.maximum_contributions > 0 ? [reward.waiting_payment_count > 0 ? m$1('.maximum_contributions.in_time_to_confirm.clearfix', [m$1('.pending.fontsize-smallest.fontcolor-secondary', h.pluralize(reward.waiting_payment_count, ' apoio em prazo de confirmação', ' apoios em prazo de confirmação.'))]) : '', h.rewardSouldOut(reward) ? m$1('.u-margintop-10', [m$1('span.badge.badge-gone.fontsize-smaller', 'Esgotada')]) : m$1('.u-margintop-10', [m$1('span.badge.badge-attention.fontsize-smaller', [m$1('span.fontweight-bold', 'Limitada'), ' (' + h.rewardRemaning(reward) + ' de ' + reward.maximum_contributions + ' disponíveis)'])])] : '']), m$1('.fontsize-smaller.u-margintop-20', m$1.trust(h.simpleFormat(h.strip(reward.description)))), !_$1.isEmpty(reward.deliver_at) ? m$1('.fontsize-smaller', [m$1('b', 'Estimativa de Entrega: '), h.momentify(reward.deliver_at, 'MMM/YYYY')]) : '', project.open_for_contributions && !h.rewardSouldOut(reward) ? [ctrl.openedReward().id === reward.id ? m$1('.w-form', [m$1('form.u-margintop-30', {
                  onsubmit: ctrl.submitContribution
              }, [m$1('.divider.u-marginbottom-20'), m$1('.fontcolor-secondary.u-marginbottom-10', 'Valor do apoio'), m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-3', m$1('.back-reward-input-reward.placeholder', 'R$')), m$1('.w-col.w-col-9.w-col-small-9.w-col-tiny-9', m$1('input.w-input.back-reward-input-reward[type="tel"]', {
                  config: ctrl.setInput,
                  onkeyup: m$1.withAttr('value', ctrl.applyMask),
                  value: ctrl.contributionValue()
              }))]), m$1('input.w-button.btn.btn-medium[type="submit"][value="Continuar >"]'), ctrl.error().length > 0 ? m$1('.text-error', [m$1('br'), m$1('span.fa.fa-exclamation-triangle'), ' ' + ctrl.error()]) : ''])]) : ''] :
              // m('.project-reward-box-hover', [
              //     m('.project-reward-box-select-text.u-text-center', 'Selecione essa recompensa')
              // ])
              '']);
          }));
      }
  };

  var projectSuggestedContributions = {
      view: function view(ctrl, args) {
          var project = args.project();

          var suggestionUrl = function suggestionUrl(amount) {
              return '/projects/' + project.project_id + '/contributions/new?amount=' + amount;
          },
              suggestedValues = [10, 25, 50, 100];

          return m$1('#suggestions', _$1.map(suggestedValues, function (amount) {
              return project ? m$1('a[href="' + suggestionUrl(amount) + '"].card-reward.card-big.card-secondary.u-marginbottom-20', [m$1('.fontsize-larger', 'R$ ' + amount)]) : '';
          }));
      }
  };

  var projectContributions = {
      controller: function controller(args) {
          var contributionsPerLocation = m$1.prop([]),
              contributionsPerDay = m$1.prop([]),
              listVM = postgrest$1.paginationVM(models.contributor),
              filterStats = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              groupedCollection = function groupedCollection() {
              var collection = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

              var grouped = [[]],
                  group = 0;

              _$1.map(collection, function (item, index) {
                  if (grouped[group].length >= 3) {
                      group = group + 1;
                      grouped[group] = [];
                  }

                  grouped[group].push(item);
              });

              return grouped;
          },
              contributionsStats = m$1.prop({});

          filterVM.project_id(args.project().id);
          filterStats.project_id(args.project().id);

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }
          //TODO: Abstract table fetch and contruction logic to contributions-vm to avoid insights.js duplicated code.
          var lContributionsPerDay = postgrest$1.loader(models.projectContributionsPerDay.getRowOptions(filterStats.parameters()));
          lContributionsPerDay.load().then(contributionsPerDay);

          var contributionsPerLocationTable = [['Estado', 'Apoios', 'R$ apoiados (% do total)']];
          var buildPerLocationTable = function buildPerLocationTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  var column = [];

                  column.push(contribution.state_acronym || 'Outro/other');
                  column.push(contribution.total_contributions);
                  column.push([contribution.total_contributed, [//Adding row with custom comparator => read project-data-table description
                  m$1('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_contributed, 2, 3), m$1('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerLocationTable.push(column);
              }) : [];
          };

          var lContributionsPerLocation = postgrest$1.loader(models.projectContributionsPerLocation.getRowOptions(filterStats.parameters()));
          lContributionsPerLocation.load().then(buildPerLocationTable);

          var lContributionsStats = postgrest$1.loader(models.projectContributiorsStat.getRowOptions(filterStats.parameters()));
          lContributionsStats.load().then(function (data) {
              return contributionsStats(_$1.first(data));
          });

          return {
              listVM: listVM,
              filterVM: filterVM,
              groupedCollection: groupedCollection,
              lContributionsStats: lContributionsStats,
              contributionsPerLocationTable: contributionsPerLocationTable,
              lContributionsPerLocation: lContributionsPerLocation,
              contributionsPerDay: contributionsPerDay,
              lContributionsPerDay: lContributionsPerDay,
              contributionsStats: contributionsStats
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM,
              stats = ctrl.contributionsStats(),
              groupedCollection = ctrl.groupedCollection(list.collection());

          return m$1('#project_contributions', m$1('#contributions_top', [m$1('.section.w-section', m$1('.w-container', m$1('.w-row', ctrl.lContributionsStats() ? h.loader() : !_$1.isEmpty(stats) ? [m$1('.u-marginbottom-20.u-text-center-small-only.w-col.w-col-6', [m$1('.fontsize-megajumbo', stats.total), m$1('.fontsize-large', 'pessoas apoiam este projeto')]), m$1('.w-col.w-col-6', m$1('.card.card-terciary.u-radius', m$1('.w-row', [m$1('.u-marginbottom-20.w-col.w-col-6.w-col-small-6', [m$1('.fontweight-semibold.u-marginbottom-10', 'Apoiadores novos'), m$1('.fontsize-largest.u-marginbottom-10', Math.floor(stats.new_percent) + '%'), m$1('.fontsize-smallest', 'apoiadores que nunca tinham apoiado um projeto no Catarse')]), m$1('.w-col.w-col-6.w-col-small-6', [m$1('.divider.u-marginbottom-20.w-hidden-main.w-hidden-medium.w-hidden-small'), m$1('.fontweight-semibold.u-marginbottom-10', 'Apoiadores recorrentes'), m$1('.fontsize-largest.u-marginbottom-10', Math.ceil(stats.returning_percent) + '%'), m$1('.fontsize-smallest', 'apoiadores que já tinham apoiado um projeto no Catarse')])])))] : ''))), m$1('.divider.w-section'), m$1('.section.w-section', m$1('.w-container', [m$1('.fontsize-large.fontweight-semibold.u-marginbottom-40.u-text-center', 'Apoiadores'), m$1('.project-contributions.w-clearfix', _$1.map(groupedCollection, function (group, idx) {
              return m$1('.w-row', _$1.map(group, function (contribution) {
                  return m$1('.project-contribution-item.w-col.w-col-4', [
                  // here new card
                  m$1('.card.card-backer.u-marginbottom-20.u-radius.u-text-center', [m$1('a[href="/users/' + contribution.user_id + '"][style="display: block;"]', {
                      onclick: h.analytics.event({
                          cat: 'project_view',
                          act: 'project_backer_link',
                          lbl: contribution.user_id,
                          project: args.project()
                      })
                  }, [m$1('img.thumb.u-marginbottom-10.u-round[src="' + (!_$1.isEmpty(contribution.data.profile_img_thumbnail) ? contribution.data.profile_img_thumbnail : '/assets/catarse_bootstrap/user.jpg') + '"]')]), m$1('a.fontsize-base.fontweight-semibold.lineheigh-tight.link-hidden-dark[href="/users/' + contribution.user_id + '"]', {
                      onclick: h.analytics.event({
                          cat: 'project_view',
                          act: 'project_backer_link',
                          lbl: contribution.user_id,
                          project: args.project()
                      })
                  }, contribution.data.name), m$1('.fontcolor-secondary.fontsize-smallest.u-marginbottom-10', contribution.data.city + ',' + contribution.data.state), m$1('.fontsize-smaller', [m$1('span.fontweight-semibold', contribution.data.total_contributed_projects), ' apoiados  |  ', m$1('span.fontweight-semibold', contribution.data.total_published_projects), ' criado'])])
                  // new card
                  ]);
              }));
          })),
          //m('.btn-bottom-card.w-row', [
          //    m('.w-col.w-col-3.w-col-small-4.w-col-tiny-3'),
          //    m('.w-col.w-col-6.w-col-small-4.w-col-tiny-6', [
          //        m("a.btn.btn-medium.w-button[href='#']", "Seguindo")
          //    ]),
          //    m(".w-col.w-col-3.w-col-small-4.w-col-tiny-3")
          //])
          m$1('.w-row.u-marginbottom-40.u-margintop-20', [m$1('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])]))]), m$1('.before-footer.bg-gray.section.w-section', m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m$1.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: 'R$ arrecadados por dia',
              dataKey: 'total_amount',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              },
              emptyState: 'Apoios não contabilizados'
          }) : h.loader()])]), m$1('.w-row', m$1('.w-col.w-col-12.u-text-center', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', 'De onde vem os apoios'), !ctrl.lContributionsPerLocation() ? !_$1.isEmpty(_$1.rest(ctrl.contributionsPerLocationTable)) ? m$1.component(projectDataTable, {
              table: ctrl.contributionsPerLocationTable,
              defaultSortIndex: -2
          }) : '' : h.loader()]))])));
      }
  };

  var projectReport = {
    controller: function controller(args) {
      var displayForm = h.toggleProp(false, true),
          sendSuccess = m$1.prop(false),
          submitDisabled = m$1.prop(false),
          user = h.getUser(),
          email = m$1.prop(user.email),
          details = m$1.prop(''),
          reason = m$1.prop(''),
          l = m$1.prop(false),
          checkLogin = function checkLogin() {
        if (user) {
          displayForm.toggle();
        } else {
          window.location.href = '/login';
        }
      },
          sendReport = function sendReport() {
        submitDisabled(true);
        var loaderOpts = models.projectReport.postOptions({
          email: email(),
          details: details(),
          reason: reason(),
          project_id: h.getCurrentProject().project_id
        });
        l = postgrest$1.loaderWithToken(loaderOpts);

        l.load().then(sendSuccess(true));
        submitDisabled(false);
        return false;
      };

      return {
        checkLogin: checkLogin,
        displayForm: displayForm,
        sendSuccess: sendSuccess,
        submitDisabled: submitDisabled,
        sendReport: sendReport,
        user: user,
        email: email,
        details: details,
        reason: reason
      };
    },
    view: function view(ctrl, args) {
      var user = ctrl.user;
      return m$1('.card.card-terciary.u-radius', [m$1('.fontsize-small.u-marginbottom-20', ['Este projeto desrespeita', m$1.trust('&nbsp;'), m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638\'][target=\'_blank\']', 'nossas regras? ')]), ctrl.sendSuccess() ? m$1('.w-form', m$1('p', 'Obrigado! A sua denúncia foi recebida.')) : [m$1('.a.w-button.btn.btn-medium.btn-terciary.btn-inline[href=\'javascript:void(0);\']', { onclick: ctrl.checkLogin }, 'Denunciar este projeto'), ctrl.displayForm() ? m$1('#report-form.u-margintop-30', m$1('.w-form', m$1('form', { onsubmit: ctrl.sendReport }, [m$1('.fontsize-small.fontweight-semibold.u-marginbottom-10', 'Por que você está denunciando este projeto?'), m$1('select.w-select.text-field.positive[required=\'required\']', { onchange: m$1.withAttr('value', ctrl.reason) }, [m$1('option[value=\'\']', 'Selecione um motivo'), m$1('option[value=\'Violação de propriedade intelectual\']', 'Violação de propriedade intelectual'), m$1('option[value=\'Calúnia, injúria, difamação ou discriminação\']', 'Calúnia, injúria, difamação ou discriminação'), m$1('option[value=\'Escopo de projeto proibido\']', 'Escopo de projeto proibido'), m$1('option[value=\'Recompensas proibidas\']', 'Recompensas proibidas'), m$1('option[value=\'Cenas de sexo explícitas e gratuitas\']', 'Cenas de sexo explícitas e gratuitas'), m$1('option[value=\'Abuso de SPAM\']', 'Abuso de SPAM'), m$1('option[value=\'Outros\']', 'Outros')]), m$1('textarea.w-input.text-field.positive.u-marginbottom-30', { placeholder: 'Por favor, dê mais detalhes que nos ajudem a identificar o problema', onchange: m$1.withAttr('value', ctrl.details) }), m$1('input.w-button.btn.btn-medium.btn-inline.btn-dark[type=\'submit\'][value=\'Enviar denúncia\']', { disabled: ctrl.submitDisabled() })]))) : '']]);
    }
  };

  var projectAbout = {
      view: function view(ctrl, args) {
          var project = args.project() || {},
              onlineDays = function onlineDays() {
              var diff = moment(project.zone_online_date).diff(moment(project.zone_expires_at)),
                  duration = moment.duration(diff);

              return -Math.ceil(duration.asDays());
          };
          var fundingPeriod = function fundingPeriod() {
              return project.is_published && h.existy(project.zone_expires_at) ? m$1('.funding-period', [m$1('.fontsize-small.fontweight-semibold.u-text-center-small-only', 'Período de campanha'), m$1('.fontsize-small.u-text-center-small-only', h.momentify(project.zone_online_date) + ' - ' + h.momentify(project.zone_expires_at) + ' (' + onlineDays() + ' dias)')]) : '';
          };

          return m$1('#project-about', [m$1('.project-about.w-col.w-col-8', {
              config: h.UIHelper()
          }, [m$1('p.fontsize-base', [m$1('strong', 'O projeto')]), m$1('.fontsize-base[itemprop="about"]', m$1.trust(h.selfOrEmpty(project.about_html, '...'))), project.budget ? [m$1('p.fontsize-base.fontweight-semibold', 'Orçamento'), m$1('p.fontsize-base', m$1.trust(project.budget))] : '', m$1.component(projectReport)]), m$1('.w-col.w-col-4.w-hidden-small.w-hidden-tiny', !_.isEmpty(args.rewardDetails()) ? [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-30', 'Recompensas'), m$1.component(projectRewardList, {
              project: args.project,
              rewardDetails: args.rewardDetails
          }), fundingPeriod()] : [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-30', 'Sugestões de apoio'), m$1.component(projectSuggestedContributions, { project: args.project }), fundingPeriod()])]);
      }
  };

  var projectComments = {
      controller: function controller() {
          var loadComments = function loadComments(el, isInitialized) {
              return function (el, isInitialized) {
                  if (isInitialized) {
                      return;
                  }
                  h.fbParse();
              };
          };

          return { loadComments: loadComments };
      },
      view: function view(ctrl, args) {
          var project = args.project();
          return m$1('.w-row', [m$1('.w-col.w-col-7', m$1('.fb-comments[data-href="http://www.catarse.me/' + project.permalink + '"][data-num-posts=50][data-width="610"]', { config: ctrl.loadComments() })), m$1('.w-col.w-col-5', m$1.component(projectReport))]);
      }
  };

  var projectPosts = {
      controller: function controller(args) {
          var listVM = postgrest$1.paginationVM(models.projectPostDetail),
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq',
              id: 'eq'
          });

          filterVM.project_id(args.project().id);

          if (_$1.isNumber(args.post_id)) {
              filterVM.id(args.post_id);
          }

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }

          return {
              listVM: listVM,
              filterVM: filterVM
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM,
              project = args.project() || {};

          return m$1('.project-posts.w-section', [m$1('.w-container.u-margintop-20', [project.is_owner_or_admin ? [!list.isLoading() ? _$1.isEmpty(list.collection()) ? m$1('.w-hidden-small.w-hidden-tiny', [m$1('.fontsize-base.u-marginbottom-30.u-margintop-20', 'Toda novidade publicada no Catarse é enviada diretamente para o email de quem já apoiou seu projeto e também fica disponível para visualização no site. Você pode optar por deixá-la pública, ou visível somente para seus apoiadores aqui nesta aba.')]) : '' : '', m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-4'), m$1('.w-col.w-col-4', [m$1('a.btn.btn-edit.btn-small[href=\'/pt/projects/' + project.id + '/edit#posts\']', 'Escrever novidade')]), m$1('.w-col.w-col-4')])] : '', _$1.map(list.collection(), function (post) {
              return m$1('.w-row', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10', [m$1('.post', [m$1('.u-marginbottom-60 .w-clearfix', [m$1('.fontsize-small.fontcolor-secondary.u-text-center', h.momentify(post.created_at)), m$1('p.fontweight-semibold.fontsize-larger.u-text-center.u-marginbottom-30', [m$1('a.link-hidden[href="/projects/' + post.project_id + '/posts/' + post.id + '#posts"]', post.title)]), !_$1.isEmpty(post.comment_html) ? m$1('.fontsize-base', m$1.trust(post.comment_html)) : m$1('.fontsize-base', 'Post exclusivo para apoiadores.')]), m$1('.divider.u-marginbottom-60')])]), m$1('.w-col.w-col-1')]);
          }), m$1('.w-row', [m$1('.w-col.w-col-2.w-col-push-5', [!_$1.isUndefined(args.post_id) ? '' : !list.isLoading() ? list.isLastPage() ? 'Nenhuma novidade.' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])]);
      }
  };

  var projectMain = {
      controller: function controller(args) {
          var hash = m$1.prop(window.location.hash),
              displayTabContent = function displayTabContent(project) {
              var c_opts = {
                  project: project,
                  post_id: args.post_id
              },
                  tabs = {
                  '#rewards': m$1('.w-col.w-col-12', m$1.component(projectRewardList, _$1.extend({}, {
                      rewardDetails: args.rewardDetails
                  }, c_opts))),
                  '#contribution_suggestions': m$1.component(projectSuggestedContributions, c_opts),
                  '#contributions': m$1.component(projectContributions, c_opts),
                  '#about': m$1.component(projectAbout, _$1.extend({}, {
                      rewardDetails: args.rewardDetails
                  }, c_opts)),
                  '#comments': m$1.component(projectComments, c_opts),
                  '#posts': m$1.component(projectPosts, c_opts)
              };

              if (_$1.isNumber(args.post_id)) {
                  window.location.hash = 'posts';
              }

              hash(window.location.hash);

              if (_$1.isEmpty(hash()) || hash() === '#_=_' || hash() === '#preview') {
                  return tabs['#about'];
              }

              return tabs[hash()];
          };

          h.redrawHashChange();

          return {
              displayTabContent: displayTabContent,
              hash: hash
          };
      },
      view: function view(ctrl, args) {
          return m$1('section.section[itemtype="http://schema.org/CreativeWork"]', [m$1('' + (ctrl.hash() !== '#contributions' ? '.w-container' : '.about-tab-content'), [m$1('.w-row', args.project() ? ctrl.displayTabContent(args.project) : h.loader())])]);
      }
  };

  var projectsShow = {
      controller: function controller(args) {
          var project_id = args.project_id;
          var project_user_id = args.project_user_id;


          h.analytics.windowScroll({ cat: 'project_view', act: 'project_page_scroll' });

          if (project_id) {
              projectVM.init(project_id, project_user_id);
          } else {
              projectVM.getCurrentProject();
          }

          return projectVM;
      },
      view: function view(ctrl, args) {
          var project = ctrl.currentProject() ? ctrl.currentProject : m$1.prop({});

          return m$1('.project-show', [m$1.component(projectHeader, {
              project: project,
              rewardDetails: ctrl.rewardDetails,
              userDetails: ctrl.userDetails
          }), m$1.component(projectTabs, {
              project: project,
              rewardDetails: ctrl.rewardDetails
          }), m$1.component(projectMain, {
              project: project,
              post_id: args.post_id,
              rewardDetails: ctrl.rewardDetails
          }), project() && project().is_owner_or_admin ? m$1.component(projectDashboardMenu, {
              project: project
          }) : '']);
      }
  };

  var paymentVM = function paymentVM(mode) {
      var fields = {
          completeName: m.prop(''),
          email: m.prop(''),
          anonymous: m.prop(''),
          countries: m.prop(),
          userCountryId: m.prop(),
          zipCode: m.prop(''),
          street: m.prop(''),
          number: m.prop(''),
          addressComplement: m.prop(''),
          neighbourhood: m.prop(''),
          city: m.prop(''),
          states: m.prop([]),
          userState: m.prop(),
          ownerDocument: m.prop(''),
          phone: m.prop(''),
          errors: m.prop([])
      },
          faq = I18n$1.translations[I18n$1.currentLocale()].projects.faq[mode],
          currentUser = h.getUser(),
          countriesLoader = postgrest$1.loader(models.country.getPageOptions()),
          statesLoader = postgrest$1.loader(models.state.getPageOptions());

      var populateForm = function populateForm(fetchedData) {
          var data = _.first(fetchedData);

          fields.completeName(data.name);
          fields.email(data.email);
          fields.city(data.address.city);
          fields.zipCode(data.address.zipcode);
          fields.street(data.address.street);
          fields.number(data.address.number);
          fields.addressComplement(data.address.complement);
          fields.userState(data.address.state);
          fields.userCountryId(data.address.country_id);
          fields.ownerDocument(data.owner_document);
          fields.phone(data.address.phonenumber);
          fields.neighbourhood(data.address.neighbourhood);
      };

      var isInternational = function isInternational() {
          return !_.isEmpty(fields.countries()) ? fields.userCountryId() != _.findWhere(fields.countries(), { name: 'Brasil' }).id : false;
      };

      var checkEmptyFields = function checkEmptyFields(checkedFields) {
          return _.map(checkedFields, function (field) {
              if (_.isEmpty(String(fields[field]()).trim())) {
                  fields.errors().push({ field: field, message: 'O campo não pode ser vazio.' });
              }
          });
      };

      var checkEmail = function checkEmail() {
          var isValid = h.validateEmail(fields.email());

          if (!isValid) {
              fields.errors().push({ field: 'email', message: 'E-mail inválido.' });
          }
      };

      var checkDocument = function checkDocument() {
          var isValid = h.validateCpf(fields.ownerDocument().replace(/[\.|\-]*/g, ''));

          if (!isValid) {
              fields.errors().push({ field: 'ownerDocument', message: 'CPF inválido.' });
          }
      };

      var validate = function validate() {
          fields.errors([]);

          checkEmptyFields(['completeName', 'street', 'number', 'neighbourhood', 'city']);

          checkEmail();

          if (!isInternational()) {
              checkEmptyFields(['phone']);
              checkDocument();
          }

          return _.isEmpty(fields.errors());
      };

      var resetFieldError = function resetFieldError(fieldName) {
          return function () {
              var errors = fields.errors(),
                  errorField = _.findWhere(fields.errors(), { field: fieldName }),
                  newErrors = _.compose(fields.errors, _.without);

              return newErrors(fields.errors(), errorField);
          };
      };

      countriesLoader.load().then(fields.countries);
      statesLoader.load().then(fields.states);
      userVM.fetchUser(currentUser.user_id, false).then(populateForm);

      return {
          fields: fields,
          validate: validate,
          isInternational: isInternational,
          resetFieldError: resetFieldError,
          faq: faq
      };
  };

  var I18nScope$13 = _.partial(h.i18nScope, 'projects.faq');

  var faqBox = {
      controller: function controller(args) {
          var mode = args.mode,
              questions = args.faq.questions,
              selectedQuestion = m$1.prop(-1),
              scopedQuestions = m$1.prop(questions);

          var selectQuestion = function selectQuestion(idx) {
              return function () {
                  return selectedQuestion(idx);
              };
          };

          var updateQuestionsData = function updateQuestionsData(data) {
              //Rewrites questions from translate with proper scope
              var user = data[0];
              var updatedQuestions = _.map(questions, function (quest, idx) {
                  return {
                      question: quest.question,
                      answer: I18n$1.t(mode + '.questions.' + idx + '.answer', I18nScope$13({ userLink: '/users/' + user.id, userName: user.name }))
                  };
              });

              scopedQuestions(updatedQuestions);
          };

          userVM.fetchUser(args.projectUserId, false).then(updateQuestionsData);

          return {
              scopedQuestions: scopedQuestions,
              selectQuestion: selectQuestion,
              selectedQuestion: selectedQuestion
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-hidden-small.w-hidden-tiny.card.u-radius', [m$1(".w-row.u-marginbottom-30", [m$1(".w-col.w-col-2.w-col-small-2.w-col-tiny-2", m$1("img[width='30']", {
              src: args.mode === 'aon' ? '/assets/aon-badge.png' : '/assets/flex-badge.png'
          })), m$1(".w-col.w-col-10.w-col-small-10.w-col-tiny-10", m$1(".w-inline-block.fontsize-smallest.w-inline-block.fontcolor-secondary", args.faq.description))]), m$1(".u-marginbottom-20.fontsize-small.fontweight-semibold", "Dúvidas frequentes"), m$1('ul.w-list-unstyled', _.map(ctrl.scopedQuestions(), function (question, idx) {
              return [m$1('li.fontsize-smaller.alt-link.list-question', {
                  onclick: ctrl.selectQuestion(idx)
              }, m$1('span', [m$1('span.faq-box-arrow'), ' ' + question.question])), m$1('li.list-answer', {
                  class: ctrl.selectedQuestion() === idx ? 'list-answer-opened' : ''
              }, m$1('p.fontsize-smaller', m$1.trust(question.answer)))];
          }))]);
      }
  };

  var paymentForm = {
      controller: function controller() {
          var buildTooltip = function buildTooltip(tooltipText) {
              return m$1.component(tooltip, {
                  el: '.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary',
                  text: tooltipText,
                  width: 380
              });
          };

          return {
              buildTooltip: buildTooltip,
              toggleBoleto: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('[id=\'step2\']', [m$1('.u-text-center-small-only.u-marginbottom-30', [m$1('.fontsize-large.fontweight-semibold', 'Escolha o meio de pagamento'), m$1('.fontsize-smallest.fontcolor-secondary.fontweight-semibold', [m$1('span.fa.fa-lock', '.'), ' PAGAMENTO SEGURO'])]), m$1('.flex-row.u-marginbottom-40', [m$1('a.w-inline-block.btn-select.flex-column.u-text-center[href=\'javascript:void(0);\']', {
              onclick: ctrl.toggleBoleto.toggle,
              class: !ctrl.toggleBoleto() ? 'selected' : ''
          }, [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-20', 'Cartão de crédito'), m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/57299bd8f326a24d4828a0fd_credit-cards.png\']')]), m$1('a.w-inline-block.btn-select.flex-column.u-text-center[href=\'javascript:void(0);\']', {
              onclick: ctrl.toggleBoleto.toggle,
              class: ctrl.toggleBoleto() ? 'selected' : ''
          }, [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-20', 'Boleto bancário'), m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/57299c6ef96a6e44489a7a07_boleto.png\'][width=\'48\']')])]), !ctrl.toggleBoleto() ? m$1('#credit-card-section', [m$1('.w-form.u-marginbottom-40', [m$1('form[data-name=\'Email Form\'][id=\'email-form\'][name=\'email-form\']', [m$1('div', [m$1('label.field-label.fontweight-semibold[for=\'email-61\']', 'Nome no cartão de crédito *'), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip', 'Nome impresso na frente do seu cartão de crédito'), m$1('input.w-input.text-field[data-name=\'Email 61\'][id=\'email-61\'][name=\'email-61\'][required=\'required\'][type=\'email\']')]), m$1('div', [m$1('label.field-label.fontweight-semibold[for=\'email-66\']', 'Número do cartão de crédito *'), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip', 'O número normalmente com 16 dígitos na frente do seu cartão de crédito'), m$1('input.w-input.text-field[data-name=\'Email 66\'][id=\'email-66\'][name=\'email-66\'][required=\'required\'][type=\'email\']')]), m$1('div', [m$1('label.field-label.fontweight-semibold[for=\'email-70\']', ['Expiração (mm/aaaa)* ', ctrl.buildTooltip('Copy tooltip de validade')]), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip', 'A data de validade, geralmente na frente do cartão'), m$1('.w-row', [m$1('.w-col.w-col-6.w-col-tiny-6.w-sub-col', m$1('select.w-select.text-field[id=\'field-2\'][name=\'field-2\']', [m$1('option[value=\'\']', '01 - Janeiro'), m$1('option[value=\'First\']', '02 - Fevereiro'), m$1('option[value=\'Second\']', '03 - Março'), m$1('option[value=\'Third\']', '04 - Abril'), m$1('option[value=\'\']', '05 - Maio'), m$1('option[value=\'\']', '06 - Junho')])), m$1('.w-col.w-col-6.w-col-tiny-6', m$1('select.w-select.text-field[id=\'field-2\'][name=\'field-2\']', [m$1('option[value=\'\']', '2016'), m$1('option[value=\'First\']', '2017'), m$1('option[value=\'Second\']', '2018'), m$1('option[value=\'Third\']', '2019')]))])]), m$1('div', [m$1('label.field-label.fontweight-semibold[for=\'email-67\']', ['Código de Segurança (CVV / CVV2)* ', ctrl.buildTooltip('Copy tooltip código de segurança')]), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip', 'Os 3 dígitos (quando na frente) ou 4 dígitos (quando atrás) do seu cartão'), m$1('.w-row', [m$1('.w-col.w-col-8.w-col-tiny-6', m$1('input.w-input.text-field[data-name=\'Email 67\'][id=\'email-67\'][name=\'email-67\'][required=\'required\'][type=\'email\']')), m$1('.w-col.w-col-4.w-col-tiny-6.u-text-center', m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/57298c1c7e99926e77127bdd_cvv-card.jpg\'][width=\'176\']'))])]), m$1('.w-row', [m$1('.w-col.w-col-6', [m$1('label.field-label.fontweight-semibold[for=\'field\']', 'Parcelas'), m$1('select.w-select.text-field[id=\'field\'][name=\'field\']', [m$1('option[value=\'\']', '1 X R$75'), m$1('option[value=\'First\']', 'First Choice'), m$1('option[value=\'Second\']', 'Second Choice'), m$1('option[value=\'Third\']', 'Third Choice')])]), m$1('.w-col.w-col-6')])])]), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('a.btn.btn-large.u-marginbottom-20[href=\'#\']', 'Finalizar pagamento'), m$1('.fontsize-smallest.u-text-center', ['Ao apoiar, você concorda com os ', m$1('a.alt-link[href=\'#\']', 'Termos de Uso'), m$1.trust('&nbsp;'), 'e ', m$1('a.alt-link[href=\'#\']', 'Política de Privacidade')])]), m$1('.w-col.w-col-2')])]) : m$1('#boleto-section', [m$1('form.simple_form.edit_user[accept-charset=\'UTF-8\'][action=\'javascript:void(0)\'][id=\'edit_user_387622\'][method=\'post\'][novalidate=\'novalidate\']', [m$1('div', {
              style: {
                  'display': 'none'
              }
          }, [m$1('input[name=\'utf8\'][type=\'hidden\'][value=\'✓\']'), m$1('input[name=\'_method\'][type=\'hidden\'][value=\'patch\']'), m$1('input[name=\'authenticity_token\'][type=\'hidden\'][value=\'rU9SQFhzUkv8WLbRfq9TYRHP3EZKOuUkOlzmcEUv9VA=\']')]), m$1('.w-row', m$1('.w-col.w-col-12', m$1('.payment-error-message.card.card-error.u-radius.zindex-10.u-marginbottom-30.w-hidden', [m$1('.fontsize-smaller.fontweight-bold.u-marginbottom-10', 'Verifique os dados informados'), m$1('.message-text.fontsize-smaller', m$1('span.translation_missing[title=\'translation missing: pt.catarse_pagarme.pagarme.review.review_errors\']', 'Review Errors'))]))), m$1('.w-row', m$1('.w-col.w-col-12', m$1('.u-margintop-30.u-marginbottom-60.u-radius.card-big.card', [m$1('.fontsize-small.u-marginbottom-20', 'Esse boleto bancário vence no dia 29/06/2016.'), m$1('.fontsize-small.u-marginbottom-40', 'Ao gerar o boleto, o realizador já está contando com o seu apoio. Pague até a data de vencimento pela internet, casas lotéricas, caixas eletrônicos ou agência bancária.'), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.loader.u-text-center.w-col.w-col-12.u-marginbottom-30[id=\'card-loading\']', m$1('img[alt=\'Loader\'][src=\'/assets/catarse_bootstrap/loader-b642f2f0212454026a5c7c40620427c1.gif\']')), m$1('input.btn.btn-large.u-marginbottom-20[id=\'build_boleto\'][name=\'commit\'][type=\'submit\'][value=\'Imprimir boleto\']'), m$1('.fontsize-smallest.u-text-center.u-marginbottom-30', ['Ao apoiar, você concorda com os ', m$1('a.alt-link[href=\'/pt/terms-of-use\']', 'Termos de Uso '), 'e ', m$1('a.alt-link[href=\'/pt/privacy-policy\']', 'Política de Privacidade')])]), m$1('.w-col.w-col-2')])])))])])]);
      }
  };

  var inlineError = {
    view: function view(ctrl, args) {
      return m$1(".fontsize-smaller.text-error.u-marginbottom-20.fa.fa-exclamation-triangle", m$1('span', ' ' + args.message));
    }
  };

  var projectsPayment = {
    controller: function controller(args) {
      var mode = projectVM.currentProject().mode,
          projectUserId = projectVM.currentProject().user_id,
          value = rewardVM.getValue(),
          vm = paymentVM(mode),
          showPaymentForm = m$1.prop(false),
          reward = rewardVM.selectedReward,
          documentMask = _.partial(h.mask, '999.999.999-99'),
          zipcodeMask = _.partial(h.mask, '99999-999');

      var validateForm = function validateForm() {
        if (vm.validate()) {
          showPaymentForm(true);
        }
      };

      var fieldHasError = function fieldHasError(fieldName) {
        var fieldWithError = _.findWhere(vm.fields.errors(), { field: fieldName });

        return fieldWithError ? m$1.component(inlineError, { message: fieldWithError.message }) : '';
      };

      var applyDocumentMask = _.compose(vm.fields.ownerDocument, documentMask);

      var applyZipcodeMask = _.compose(vm.fields.zipcode, zipcodeMask);

      if (!h.getUser()) {
        return h.navigateToDevise();
      }

      return {
        applyDocumentMask: applyDocumentMask,
        applyZipcodeMask: applyZipcodeMask,
        fieldHasError: fieldHasError,
        validateForm: validateForm,
        projectUserId: projectUserId,
        showPaymentForm: showPaymentForm,
        reward: reward,
        value: value,
        mode: mode,
        vm: vm
      };
    },
    view: function view(ctrl, args) {
      return m$1(".w-section.w-clearfix.section", [m$1(".w-col", m$1(".w-clearfix.w-hidden-main.w-hidden-medium.card.u-radius.u-marginbottom-20", [m$1(".fontsize-smaller.fontweight-semibold", "Valor do apoio"), m$1("a.w-inline-block.arrow-admin.fa.fa-chevron-down.fontcolor-secondary[data-ix='show-reward-details'][data-vivaldi-spatnav-clickable='1'][href='#']"), m$1(".w-clearfix.u-marginbottom-20", m$1(".fontsize-larger.text-success.u-left", 'R$' + ctrl.value)), m$1(".w-clearfix.back-payment-info-reward[data-ix='display-none-on-load']", { style: { "display": "none" } }, [m$1(".fontsize-smaller.fontweight-semibold.u-marginbottom-10", "Recompensa selecionada"), m$1(".fontsize-smallest", '' + ctrl.reward().description), m$1('a.fontsize-small.link-hidden.u-right.fontweight-semibold[href="/projects/' + projectVM.currentProject().id + '/contribution"]', {
        config: m$1.route
      }, "Editar")])])), m$1(".w-container", m$1(".w-row", [m$1(".w-col.w-col-8", [ctrl.vm.fields.errors() ? m$1(".w-hidden-main.w-hidden-medium.w-hidden-small.w-hidden-tiny.card.card-error.u-radius.zindex-10.u-marginbottom-30.fontsize-smaller[data-ix='display-none-on-load']", { style: { "display": "block" } }, [m$1(".u-marginbottom-10.fontweight-bold", "Por favor, reveja os campos abaixo antes de prosseguir"), m$1("div", "This is some text inside of a div block."), m$1("div", "This is some text inside of a div block.")]) : '', m$1(".w-form", [m$1("form.u-marginbottom-40[data-name='Email Form'][id='email-form'][name='email-form']", [m$1(".u-marginbottom-40.u-text-center-small-only", [m$1(".fontweight-semibold.lineheight-tight.fontsize-large", "Dados de contato e endereço"), m$1(".fontsize-smaller", "* Preenchimento obrigatório")]), m$1(".w-row", [m$1(".w-col.w-col-7.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='complete-name']", "Nome completo *"), m$1("input.w-input.text-field[id='complete-name'][name='complete-name']", {
        onfocus: ctrl.vm.resetFieldError('completeName'),
        class: ctrl.fieldHasError('completeName') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.completeName),
        value: ctrl.vm.fields.completeName(),
        required: 'required',
        placeholder: 'Nome Completo'
      }), ctrl.fieldHasError('completeName')]), m$1(".w-col.w-col-5", [m$1("label.field-label.fontweight-semibold[for='email']", "Email *"), m$1("input.w-input.text-field[id='email']", {
        onfocus: ctrl.vm.resetFieldError('email'),
        class: ctrl.fieldHasError('email') ? 'error' : false,
        type: 'email',
        onchange: m$1.withAttr('value', ctrl.vm.fields.email),
        value: ctrl.vm.fields.email(),
        required: 'required',
        placeholder: 'email@catarse.me'
      }), ctrl.fieldHasError('email')])]), m$1(".w-checkbox.w-clearfix", [m$1("input.w-checkbox-input[id='anonymous'][name='anonymous'][type='checkbox']", {
        onchange: m$1.withAttr('value', ctrl.vm.fields.anonymous),
        checked: ctrl.vm.fields.anonymous()
      }), m$1("label.w-form-label.fontsize-smallest[for='anonymous']", "Quero que meu apoio não fique público")]), ctrl.vm.fields.anonymous() ? m$1(".card.card-message.u-radius.zindex-10.fontsize-smallest", m$1("div", [m$1("span.fontweight-bold", ["Você tem certeza que quer que seu apoio seja anônimo?", m$1.trust("&nbsp;"), m$1("br")]), m$1("br"), "O valor do seu apoio não será divulgado para ninguém além do dono do projeto. Somente o proponente terá acesso a essa informação, independente se o seu investimento seja público ou anônimo."])) : ''])]), m$1(".u-marginbottom-40", m$1(".w-form", [m$1(".w-row", [m$1(".w-col.w-col-6.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='country']", "País *"), m$1("select.w-select.text-field[id='country']", {
        onchange: m$1.withAttr('value', ctrl.vm.fields.userCountryId),
        value: ctrl.vm.fields.userCountryId()
      }, _.map(ctrl.vm.fields.countries(), function (country, idx) {
        return m$1("option", { value: country.id, key: idx, selected: country.id === ctrl.vm.fields.userCountryId() }, country.name);
      }))]), m$1(".w-col.w-col-6", !ctrl.vm.isInternational() ? [m$1("label.field-label.fontweight-semibold[for='zip-code']", "CEP"), m$1("input.w-input.text-field[id='zip-code']", {
        type: 'tel',
        onkeyup: m$1.withAttr('value', ctrl.applyZipcodeMask),
        value: ctrl.vm.fields.zipCode(),
        placeholder: '42100000'
      })] : '')]), m$1(".w-row", [m$1(".w-col.w-col-6.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='street']", "Rua *"), m$1("input.w-input.text-field[id='street']", {
        onfocus: ctrl.vm.resetFieldError('street'),
        class: ctrl.fieldHasError('street') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.street),
        value: ctrl.vm.fields.street(),
        required: 'required',
        placeholder: 'Rua Da Minha Casa'
      }), ctrl.fieldHasError('street')]), m$1(".w-col.w-col-6", m$1(".w-row", [m$1(".w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle", [m$1("label.field-label.fontweight-semibold[for='number']", "Número *"), m$1("input.w-input.text-field[id='number']", {
        onfocus: ctrl.vm.resetFieldError('number'),
        class: ctrl.fieldHasError('number') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.number),
        value: ctrl.vm.fields.number(),
        required: 'required',
        placeholder: '421'
      }), ctrl.fieldHasError('number')]), m$1(".w-col.w-col-6.w-col-small-6.w-col-tiny-6", [m$1("label.field-label.fontweight-semibold[for='address-complement']", "Complemento"), m$1("input.w-input.text-field[id='address-complement']", {
        onfocus: ctrl.vm.resetFieldError('addressComplement'),
        class: ctrl.fieldHasError('addressComplement') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.addressComplement),
        value: ctrl.vm.fields.addressComplement(),
        placeholder: 'Residencial 123'
      }), ctrl.fieldHasError('addressComplement')])]))]), m$1(".w-row", [m$1(".w-col.w-col-4.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='neighbourhood']", "Bairro *"), m$1("input.w-input.text-field[id='neighbourhood']", {
        onfocus: ctrl.vm.resetFieldError('neighbourhood'),
        class: ctrl.fieldHasError('neighbourhood') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.neighbourhood),
        value: ctrl.vm.fields.neighbourhood(),
        required: 'required',
        placeholder: 'São José'
      }), ctrl.fieldHasError('neighbourhood')]), m$1(".w-col.w-col-4.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='city']", "Cidade *"), m$1("input.w-input.text-field[id='city']", {
        onfocus: ctrl.vm.resetFieldError('city'),
        class: ctrl.fieldHasError('city') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.city),
        value: ctrl.vm.fields.city(),
        required: 'required',
        placeholder: 'Cidade'
      }), ctrl.fieldHasError('city')]), m$1(".w-col.w-col-4", [m$1("label.field-label.fontweight-semibold[for='state']", "Estado *"), m$1("select.w-select.text-field[id='state']", {
        onchange: m$1.withAttr('value', ctrl.vm.fields.userState),
        value: ctrl.vm.fields.userState()
      }, _.map(ctrl.vm.fields.states(), function (state, idx) {
        return m$1('option', { value: state.acronym, selected: state.acronym === ctrl.vm.fields.userState() }, state.name);
      }))])]), !ctrl.vm.isInternational() ? m$1(".w-row", [m$1(".w-col.w-col-6.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='document']", "CPF *"), m$1("input.w-input.text-field[id='document']", {
        onfocus: ctrl.vm.resetFieldError('ownerDocument'),
        class: ctrl.fieldHasError('ownerDocument') ? 'error' : false,
        type: 'tel',
        onkeyup: m$1.withAttr('value', ctrl.applyDocumentMask),
        value: ctrl.vm.fields.ownerDocument(),
        required: 'required'
      }), ctrl.fieldHasError('ownerDocument')]), m$1(".w-col.w-col-6", [m$1("label.field-label.fontweight-semibold[for='phone']", "Telefone *"), m$1("input.w-input.text-field[id='phone']", {
        onfocus: ctrl.vm.resetFieldError('phone'),
        class: ctrl.fieldHasError('phone') ? 'error' : false,
        type: 'tel',
        onchange: m$1.withAttr('value', ctrl.vm.fields.phone),
        value: ctrl.vm.fields.phone(),
        required: 'required'
      }), ctrl.fieldHasError('phone')])]) : ''])), m$1(".w-row.u-marginbottom-40", m$1(".w-col.w-col-push-3.w-col-6", m$1("button.btn.btn-large", {
        onclick: ctrl.validateForm
      }, "Próximo passo"))), ctrl.showPaymentForm() ? m$1.component(paymentForm) : '']), m$1(".w-col.w-col-4", [m$1(".w-hidden-small.w-hidden-tiny.card.u-radius.u-marginbottom-20", [m$1(".fontsize-smaller.fontweight-semibold.u-marginbottom-20", "Valor do apoio"), m$1(".w-clearfix.u-marginbottom-20", [m$1(".fontsize-larger.text-success.u-left", 'R$' + ctrl.value), m$1('a.fontsize-small.link-hidden.u-right.fontweight-semibold[href="/projects/' + projectVM.currentProject().id + '/contribution"]', {
        config: m$1.route
      }, "Editar")]), m$1(".back-payment-info-reward", [m$1(".fontsize-smaller.fontweight-semibold.u-marginbottom-10", "Recompensa selecionada"), m$1(".fontsize-smallest", ctrl.reward().description)])]), m$1.component(faqBox, { mode: ctrl.mode, faq: ctrl.vm.faq, projectUserId: ctrl.projectUserId })])]))]);
    }
  };

  var projectsReward = {
      controller: function controller(args) {
          var vm = rewardVM,
              selectedReward = vm.selectedReward,
              selectReward = vm.selectReward,
              rewards = vm.rewards(),
              mode = projectVM.currentProject().mode,
              faq = I18n$1.translations[I18n$1.currentLocale()].projects.faq[mode];

          //TODO unify projectsReward and project-reward-list reward submission. fix routing issue.
          var submitContribution = function submitContribution() {
              var valueFloat = h.monetaryToFloat(vm.contributionValue);

              if (valueFloat < vm.selectedReward().minimum_value) {
                  vm.error('O valor de apoio para essa recompensa deve ser de no mínimo R$' + vm.selectedReward().minimum_value);
              } else {
                  if (!h.getUser()) {
                      h.storeObject(storeKey, { value: valueFloat, reward: vm.selectedReward() });

                      return h.navigateToDevise('/' + projectVM.currentProject().permalink);
                  } else {
                      vm.error('');
                      vm.contributionValue(valueFloat);
                      m$1.route('/projects/' + projectVM.currentProject().id + '/payment', {
                          project_user_id: projectVM.currentProject().user_id
                      });
                  }
              }

              return false;
          };

          var isSelected = function isSelected(reward) {
              return reward.id === selectedReward().id;
          };

          if (_$1.first(rewards).id !== vm.noReward.id) {
              rewards.unshift(vm.noReward);
          }

          return {
              rewards: rewards,
              project: projectVM.currentProject,
              contributionValue: vm.contributionValue,
              submitContribution: submitContribution,
              applyMask: vm.applyMask,
              error: vm.error,
              isSelected: isSelected,
              selectedReward: selectedReward,
              selectReward: selectReward,
              faq: faq
          };
      },
      view: function view(ctrl, args) {
          var project = ctrl.project;

          return m$1('#project-rewards', [m$1('.w-section.page-header.u-text-center', [m$1('.w-container', [m$1('h1.fontsize-larger.fontweight-semibold.project-name[itemprop="name"]', h.selfOrEmpty(project().name || project().project_name)), m$1('h2.fontsize-base.lineheight-looser[itemprop="author"]', ['por ', project().user ? project().user.name : project().owner_name ? project().owner_name : ''])])]), m$1('.w-section.header-cont-new', m$1('.w-container', m$1('.fontweight-semibold.lineheight-tight.text-success.fontsize-large.u-text-center-small-only', 'Escolha a recompensa e em seguida o valor do apoio'))), m$1('.section[id=\'new-contribution\']', m$1('.w-container', m$1('.w-row', [m$1('.w-col.w-col-8', m$1('.w-form.back-reward-form', m$1('form.simple_form.new_contribution', {
              onsubmit: ctrl.submitContribution
          }, _$1.map(ctrl.rewards, function (reward, index) {
              var isSelected = ctrl.isSelected(reward),
                  monetaryMinimum = h.applyMonetaryMask(reward.minimum_value);

              return m$1('span.radio.w-radio.w-clearfix.back-reward-radio-reward', {
                  class: isSelected ? 'selected' : '',
                  onclick: ctrl.selectReward(reward),
                  key: index
              }, m$1('label[for=\'contribution_reward_id_' + reward.id + '\']', [m$1('input.radio_buttons.optional.w-input.text-field.w-radio-input.back-reward-radio-button[id=\'contribution_reward_id_' + reward.id + '\'][name=\'contribution[reward_id]\'][type=\'radio\'][value=\'' + reward.id + '\']', {
                  checked: isSelected ? true : false
              }), m$1('label.w-form-label.fontsize-base.fontweight-semibold.u-marginbottom-10[for=\'contribution_reward_' + reward.id + '\']', reward.id === -1 ? 'Não quero recompensa' : 'R$ ' + reward.minimum_value + ' ou mais'), isSelected ? m$1('.w-row.back-reward-money', [m$1('.w-col.w-col-8.w-col-small-8.w-col-tiny-8.w-sub-col-middle.w-clearfix', [m$1('.w-row', [m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-3', m$1('.back-reward-input-reward.placeholder', 'R$')), m$1('.w-col.w-col-9.w-col-small-9.w-col-tiny-9', m$1('input.user-reward-value.back-reward-input-reward[autocomplete=\'off\'][type=\'tel\']', {
                  class: ctrl.error() ? 'error' : '',
                  min: monetaryMinimum,
                  placeholder: monetaryMinimum,
                  onkeyup: m$1.withAttr('value', ctrl.applyMask),
                  value: ctrl.contributionValue()
              }))]), ctrl.error().length > 0 ? m$1('.text-error', [m$1('br'), m$1('span.fa.fa-exclamation-triangle'), ' ' + ctrl.error()]) : '']), m$1('.submit-form.w-col.w-col-4.w-col-small-4.w-col-tiny-4', m$1('button.btn.btn-large', ['Continuar  ', m$1('span.fa.fa-chevron-right')]))]) : '', m$1('.back-reward-reward-description', [m$1('.fontsize-smaller.u-marginbottom-10', reward.description), reward.deliver_at ? m$1('.fontsize-smallest.fontcolor-secondary', 'Estimativa de entrega: ' + h.momentify(reward.deliver_at, 'MMM/YYYY')) : ''])])); //End map return
          })))), m$1('.w-col.w-col-4', m$1.component(faqBox, { mode: ctrl.project().mode, faq: ctrl.faq }))])))]);
      }
  };

  var I18nScope$14 = _$1.partial(h.i18nScope, 'projects.publish');

  var publish = {
    controller: function controller(args) {
      var filtersVM = postgrest.filtersVM({
        project_id: 'eq'
      }),
          projectAccount = m$1.prop([]),
          projectDetails = m$1.prop([]),
          acceptTerm = m$1.prop([true, true, true, true, true, true, true, true, true]),
          flexAcceptTerm = m$1.prop([true, true, true, true, true, true, true, true, true]),
          showNextTerm = function showNextTerm(index, acceptTerms) {
        var terms = acceptTerms();
        if (terms[index]) {
          terms[index] = false;
          acceptTerms(terms);
          var nextTerm = document.getElementsByClassName('w-hidden publish-rules');
          if (nextTerm[0] !== undefined) {
            nextTerm[0].classList.remove('w-hidden');
          }
        }
        //show publish button after accepting all rules
        if (index === terms.length - 1) {
          document.getElementsByClassName('publish-btn-section')[0].classList.remove('w-hidden');
        }
      },
          loader = postgrest.loaderWithToken;

      filtersVM.project_id(args.root.getAttribute('data-id'));

      var l = loader(models.projectDetail.getRowOptions(filtersVM.parameters())),
          accountL = loader(models.projectAccount.getRowOptions(filtersVM.parameters()));
      l.load().then(projectDetails);
      accountL.load().then(projectAccount);

      var expiresAt = function expiresAt() {
        var project = _$1.first(projectDetails());
        return moment().add(project.online_days, 'days');
      };

      return {
        l: l,
        accountL: accountL,
        expiresAt: expiresAt,
        filtersVM: filtersVM,
        acceptTerm: acceptTerm,
        flexAcceptTerm: flexAcceptTerm,
        showNextTerm: showNextTerm,
        projectAccount: projectAccount,
        projectDetails: projectDetails
      };
    },
    view: function view(ctrl, args) {
      var project = _$1.first(ctrl.projectDetails()),
          account = _$1.first(ctrl.projectAccount()),
          flexTerms = function flexTerms(project) {
        return [m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '1/9'), ' ', m$1('span.fontweight-semibold', 'Regras da modalidade FLEX')]), m$1('div', 'Você escolheu a campanha flexível. Dessa maneira, você irá receber todos os recursos arrecadados junto aos apoiadores ao final do prazo da campanha (descontando a taxa do Catarse) e deverá cumprir com a execução do projeto e com a entrega das recompensas oferecidas independente do quanto arrecadar.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '2/9'), ' ', m$1('span.fontweight-semibold', 'Meta de arrecadação')]), m$1('div', 'A meta não poderá ser alterada após o publicação do projeto.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '3/9'), ' ', m$1('span.fontweight-semibold', 'Taxas')]), m$1('div', ['Ao final da campanha, cobraremos 13% sobre o ', m$1('span.fontweight-semibold', 'valor total arrecadado.')])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '4/9'), ' ', m$1('span.fontweight-semibold', 'Prazo da campanha')]), m$1('div', 'Uma vez definido, o prazo de encerramento não poderá ser alterado. Caso você tenha iniciado a campanha com o prazo em aberto, deverá defini-lo durante a campanha, podendo deixar a campanha aberta por no máximo 12 meses.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '5/9'), ' ', m$1('span.fontweight-semibold', 'Prazo para repasse')]), m$1('div', 'Quando o prazo do seu projeto chegar ao fim, você deverá confirmar seus dados bancários. Após essa confirmação, o Catarse depositará na sua conta corrente em até 10 dias úteis. O valor depositado já estará considerando o desconto de 13% da taxa.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '6/9'), ' ', m$1('span.fontweight-semibold', 'O que pode e não pode alterar na página do projeto a partir da publicação?')]), [m$1('div', [m$1('span.fontweight-semibold', 'Você não poderá:'), ' alterar o tipo de financiamento, nome do projeto, a URL (link) do projeto, a categoria escolhida, a meta de arrecadação, o prazo (caso já tenha definido), as recompensas onde existirem apoios já efetuados e a conta bancária registrada.\
                    ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'Você poderá: '), 'editar o conteúdo da descrição do projeto, alterar o vídeo principal da campanha, a imagem do projeto, a frase de efeito, as recompensas onde não existirem apoios efetuados, além de adicionar novas recompensas durante a arrecadação.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '7/9'), ' ', m$1('span.fontweight-semibold', 'Responsabilidade do Catarse')]), [m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold', 'O Catarse é responsável:'), ' pelo desenvolvimento tecnológico da plataforma, atendimento de dúvidas e problemas (tanto de apoiadores quanto de realizadores), por hospedar o projeto na plataforma e por garantir a segurança das transações financeiras.\ ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'O Catarse não é responsável:'), ' pelo financiamento, divulgação e execução, nem pela entrega de recompensas dos projetos inscritos.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '8/9'), ' ', m$1('span.fontweight-semibold', 'Suas responsabilidades')]), m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold'), 'É sua responsabilidade tudo aquilo que diz respeito a formatação do projeto, planejamento e divulgação da campanha de arrecadação, mobilização de apoiadores, execução do projeto, produção e entrega de recompensas dentro do prazo estimado e comunicação com apoiadores.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '9/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Retiradas de projetos no ar')]), m$1('div', [m$1('span.fontweight-semibold'), 'O CATARSE reserva-se o direito de, a seu exclusivo critério e uma vez notificado a respeito, cancelar projetos e encerrar as contas de CRIADORES DE PROJETOS que violem nossas ', m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638-Diretrizes-para-cria%C3%A7%C3%A3o-de-projetos\'][target=\'_blank\']', 'Regras do Jogo'), ' e ', m$1('a.alt-link[href=\'http://www.catarse.me/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), '.'])])];
      },
          terms = function terms(project) {
        return [m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '1/9'), ' ', m$1('span.fontweight-semibold', 'Regras da modalidade Tudo-ou-nada')]), m$1('div', ['Você escolheu a campanha tudo-ou-nada. Dessa maneira, você só irá receber os recursos arrecadados ', m$1('span.fontweight-semibold', 'caso atinja ou supere a meta de arrecadação'), '. Caso contrário, todos seus apoiadores serão reembolsados. Você será responsável pela entrega das recompensas oferecidas se seu projeto alcançar a meta de arrecadação.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '2/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Meta de arrecadação')]), m$1('div', 'A meta não poderá ser alterada após o publicação do projeto.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '3/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Taxas')]), m$1('div', ['Cobramos 13% sobre o ', m$1('span.fontweight-semibold', 'valor total arrecadado'), ' pelo seu projeto caso ele atinja ou supere a meta dentro do prazo da campanha. Se o projeto não atingir a meta, nenhuma taxa será cobrada.', m$1('span.fontweight-semibold')])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '4/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Prazo da campanha')]), m$1('div', 'Seu projeto estará em arrecadação no Catarse até o dia ' + h.momentify(ctrl.expiresAt()) + ' às 23h59min59s. Este prazo não poderá ser alterado após a publicação do projeto.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '5/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Regras do repasse e reembolso')]), m$1('div', ['Quando o prazo do seu projeto chegar ao fim, você deverá confirmar seus dados bancários. Após essa confirmação, o Catarse depositará o valor arrecadado, já com o desconto da taxa, na sua conta corrente em até 10 dias úteis. Caso o projeto não atinja 100% da meta dentro do prazo, o Catarse irá reembolsar os apoiadores. ', m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202365507\'][target=\'_blank\']', 'Saiba mais sobre o processo de reembolso'), '.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '6/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'O que pode e não pode alterar na página do projeto a partir da publicação?')]), [m$1('div', [m$1('span.fontweight-semibold', 'Você não poderá:'), ' alterar o nome do projeto, a URL (link) do projeto, a categoria escolhida, o tipo de financiamento, a conta bancária, a meta de arrecadação, o prazo escolhido e as recompensas onde existirem apoios já efetuados.\ ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'Você poderá: '), 'editar o conteúdo da descrição do projeto, alterar o vídeo principal da campanha, a imagem do projeto, a frase de efeito, as recompensas onde não existirem apoios efetuados, além de adicionar novas recompensas durante a arrecadação.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '7/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Responsabilidade do Catarse')]), [m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold', 'O Catarse é responsável:'), ' pelo desenvolvimento tecnológico da plataforma, atendimento de dúvidas e problemas (tanto de apoiadores quanto de realizadores), por hospedar o projeto na plataforma e por garantir a segurança das transações financeiras.\ ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'O Catarse não é responsável:'), ' pelo financiamento, divulgação e execução, nem pela entrega de recompensas dos projetos inscritos.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '8/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Suas responsabilidades')]), m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold'), 'É sua responsabilidade tudo aquilo que diz respeito a formatação do projeto, planejamento e divulgação da campanha de arrecadação, mobilização de apoiadores, execução do projeto, produção e entrega de recompensas dentro do prazo estimado e comunicação com apoiadores.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '9/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Retiradas de projetos no ar')]), m$1('div', [m$1('span.fontweight-semibold'), 'O CATARSE reserva-se o direito de, a seu exclusivo critério e uma vez notificado a respeito, cancelar projetos e encerrar as contas de CRIADORES DE PROJETOS que violem nossas ', m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638-Diretrizes-para-cria%C3%A7%C3%A3o-de-projetos\'][target=\'_blank\']', 'Regras do Jogo'), ' e ', m$1('a.alt-link[href=\'http://www.catarse.me/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), '.'])])];
      };

      return [!ctrl.l() && !ctrl.accountL() ? [project.is_owner_or_admin ? m$1.component(projectDashboardMenu, {
        project: m$1.prop(project),
        hidePublish: true
      }) : '', m$1('.w-section.section-product.' + project.mode), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img.u-marginbottom-20[src=\'/assets/catarse_bootstrap/launch-icon.png\'][width=\'94\']'), m$1('.fontsize-large.fontweight-semibold.u-marginbottom-20', 'Pronto para lançar sua campanha?'), m$1('.fontsize-base.u-marginbottom-30', 'Preparamos uma lista com informações importantes para você checar antes de colocar seu projeto no ar!')])]), m$1('.w-col.w-col-3')])])]), m$1('.divider'), m$1('.w-section.section-one-column.bg-gray.section.before-footer', [m$1('.w-container', [m$1('.card.medium.u-marginbottom-60.card-terciary', [m$1('.w-row', [m$1('.w-col.w-col-6.w-clearfix', [m$1('img.card-project-thumb.u-right[src=' + project.large_image + ']')]), m$1('.w-col.w-col-6', [m$1('.u-marginbottom-30.fontsize-base', [m$1('div', [m$1('span.fontweight-semibold', 'Título: '), project.name]), m$1('div', [m$1('span.fontweight-semibold', 'Link: '), 'www.catarse.me/' + project.permalink]), m$1('div', [m$1('span.fontweight-semibold', 'Modalidade de financiamento: '), I18n$1.t(project.mode, I18nScope$14())]), m$1('div', [m$1('span.fontweight-semibold', 'Meta de arrecadação: '), 'R$ ' + h.formatNumber(project.goal, 2, 3)]), project.online_days !== null ? m$1('div', [m$1('span.fontweight-semibold', 'Prazo: ' + project.online_days + ' ' + (project.online_days > 1 ? 'dias' : 'dia'))]) : '', m$1('div', [m$1('span.fontweight-semibold', 'Responsável: '), account.owner_name]), m$1('div', [m$1('span.fontweight-semibold', 'CPF/CNPJ: '), account.owner_document])])])]), m$1('.u-text-center', [m$1('.w-row', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10', [m$1('.divider.u-marginbottom-10'), m$1('.fontsize-small.fontcolor-secondary', 'Os dados acima não podem ser alterados após o projeto entrar no ar. Se você precisa fazer mudanças, navegue na barra lateral e volte aqui quando estiver tudo pronto!')]), m$1('.w-col.w-col-1')])])]), m$1('.card.medium.u-radius.u-marginbottom-60', [m$1('.u-text-center.u-marginbottom-60', [m$1('.fontsize-large.fontweight-semibold', 'Relembre nossas regras'), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.fontsize-small', ['Antes de publicar, clique nos círculos abaixo e confirme que você está ciente de como funciona o Catarse. Qualquer dúvida, ', m$1('a.alt-link[href=\'https://equipecatarse.zendesk.com/account/dropboxes/20298537\'][target=\'_blank\']', 'entre em contato'), '!'])]), m$1('.w-col.w-col-2')])]), _$1.map(project.mode == 'flex' ? flexTerms(project) : terms(project), function (term, index) {
        return m$1('.u-marginbottom-30.fontsize-base' + (index == 0 ? '' : '.w-hidden.publish-rules'), [m$1('.w-row[id=\'rule-' + index + '\']', [m$1('.w-col.w-col-1.u-text-center', [m$1('div', [m$1((project.mode == 'flex' ? ctrl.flexAcceptTerm() : ctrl.acceptTerm())[index] ? 'a.w-inline-block.checkbox-big[href=\'#rule-' + (index + 1) + '\']' : 'a.w-inline-block.checkbox-big.checkbox--selected.fa.fa-check.fa-lg[href=\'#rule-' + (index + 1) + '\']', { onclick: function onclick() {
            return ctrl.showNextTerm(index, project.mode == 'flex' ? ctrl.flexAcceptTerm : ctrl.acceptTerm);
          } })])]), term])]);
      })]), m$1('.w-row.publish-btn-section.w-hidden', [m$1('.w-col.w-col-4'), m$1('.w-col.w-col-4', [m$1('a.btn.btn-large.u-marginbottom-20[href=/' + (project.mode == 'flex' ? 'flexible_projects' : 'projects') + '/' + project.id + '/push_to_online]', 'Publicar agora!'), m$1('.u-text-center.fontsize-smaller', ['Ao publicar o seu projeto, você está aceitando os ', m$1('a.alt-link[href=\'/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), ' e ', m$1('a.alt-link[href=\'/privacy-policy\'][target=\'_blank\']', 'Politica de Privacidade')])]), m$1('.w-col.w-col-4')])])]), '\
    '] : h.loader()];
    }
  };

  var startVM = function startVM(I18n) {
      var i18nStart = I18n.translations[I18n.currentLocale()].pages.start,
          testimonials = i18nStart.testimonials,
          categoryProjects = i18nStart.categoryProjects,
          panes = i18nStart.panes,
          qa = i18nStart.qa;

      return {
          testimonials: _$1.map(testimonials, function (testimonial) {
              return {
                  thumbUrl: testimonial.thumb,
                  content: testimonial.content,
                  name: testimonial.name,
                  totals: testimonial.totals
              };
          }),
          panes: _$1.map(panes, function (pane) {
              return {
                  label: pane.label,
                  src: pane.src
              };
          }),
          questions: {
              col_1: _$1.map(qa.col_1, function (question) {
                  return {
                      question: question.question,
                      answer: question.answer
                  };
              }),
              col_2: _$1.map(qa.col_2, function (question) {
                  return {
                      question: question.question,
                      answer: question.answer
                  };
              })
          },
          categoryProjects: _$1.map(categoryProjects, function (category) {
              return {
                  categoryId: category.category_id,
                  sampleProjects: [category.sample_project_ids.primary, category.sample_project_ids.secondary]
              };
          })
      };
  };

  var youtubeLightbox = {
      controller: function controller(args) {
          var player = void 0;
          var showLightbox = h.toggleProp(false, true),
              setYoutube = function setYoutube(el, isInitialized) {
              if (!isInitialized) {
                  var tag = document.createElement('script'),
                      firstScriptTag = document.getElementsByTagName('script')[0];
                  tag.src = 'https://www.youtube.com/iframe_api';
                  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                  window.onYouTubeIframeAPIReady = createPlayer;
              }
          },
              closeVideo = function closeVideo() {
              if (!_.isUndefined(player)) {
                  player.pauseVideo();
              }

              showLightbox.toggle();

              return false;
          },
              createPlayer = function createPlayer() {
              player = new YT.Player('ytvideo', {
                  height: '528',
                  width: '940',
                  videoId: args.src,
                  playerVars: {
                      showInfo: 0,
                      modestBranding: 0
                  },
                  events: {
                      'onStateChange': function onStateChange(state) {
                          return state.data === 0 ? closeVideo() : false;
                      }
                  }
              });
          };

          return {
              showLightbox: showLightbox,
              setYoutube: setYoutube,
              closeVideo: closeVideo
          };
      },
      view: function view(ctrl, args) {
          return m$1('#youtube-lightbox', [m$1('a#youtube-play.w-lightbox.w-inline-block.fa.fa-play-circle.fontcolor-negative.fa-5x[href=\'javascript:void(0);\']', {
              onclick: function onclick() {
                  ctrl.showLightbox.toggle();
                  args.onclick && args.onclick();
              }
          }), m$1('#lightbox.w-lightbox-backdrop[style="display:' + (ctrl.showLightbox() ? 'block' : 'none') + '"]', [m$1('.w-lightbox-container', [m$1('.w-lightbox-content', [m$1('.w-lightbox-view', [m$1('.w-lightbox-frame', [m$1('figure.w-lightbox-figure', [m$1('img.w-lightbox-img.w-lightbox-image[src=\'data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20width=%22940%22%20height=%22528%22/%3E\']'), m$1('#ytvideo.embedly-embed.w-lightbox-embed', { config: ctrl.setYoutube })])])]), m$1('.w-lightbox-spinner.w-lightbox-hide'), m$1('.w-lightbox-control.w-lightbox-left.w-lightbox-inactive'), m$1('.w-lightbox-control.w-lightbox-right.w-lightbox-inactive'), m$1('#youtube-close.w-lightbox-control.w-lightbox-close', { onclick: ctrl.closeVideo })]), m$1('.w-lightbox-strip')])])]);
      }
  };

  var I18nScope$15 = _$1.partial(h.i18nScope, 'pages.start');

  var start = {
      controller: function controller() {
          h.analytics.windowScroll({ cat: 'project_start', act: 'start_page_scroll' });
          var stats = m$1.prop([]),
              categories = m$1.prop([]),
              selectedPane = m$1.prop(0),
              selectedCategory = m$1.prop([]),
              featuredProjects = m$1.prop([]),
              selectedCategoryIdx = m$1.prop(-1),
              startvm = startVM(I18n$1),
              filters = postgrest$1.filtersVM,
              paneImages = startvm.panes,
              categoryvm = filters({
              category_id: 'eq'
          }),
              projectvm = filters({
              project_id: 'eq'
          }),
              uservm = filters({
              id: 'eq'
          }),
              loader = postgrest$1.loader,
              statsLoader = loader(models.statistic.getRowOptions()),
              loadCategories = function loadCategories() {
              return models.category.getPage(filters({}).order({
                  name: 'asc'
              }).parameters()).then(categories);
          },
              selectPane = function selectPane(idx) {
              return function () {
                  selectedPane(idx);
              };
          },
              lCategory = function lCategory() {
              return loader(models.categoryTotals.getRowOptions(categoryvm.parameters()));
          },
              lProject = function lProject() {
              return loader(models.projectDetail.getRowOptions(projectvm.parameters()));
          },
              lUser = function lUser() {
              return loader(models.userDetail.getRowOptions(uservm.parameters()));
          },
              selectCategory = function selectCategory(category) {
              return function () {
                  selectedCategoryIdx(category.id);
                  categoryvm.category_id(category.id);
                  selectedCategory([category]);
                  m$1.redraw();
                  lCategory().load().then(loadCategoryProjects);
              };
          },
              setUser = function setUser(user, idx) {
              featuredProjects()[idx] = _$1.extend({}, featuredProjects()[idx], {
                  userThumb: _$1.first(user).profile_img_thumbnail
              });
          },
              setProject = function setProject(project, idx) {
              featuredProjects()[idx] = _$1.first(project);
              uservm.id(_$1.first(project).user.id);
              lUser().load().then(function (user) {
                  return setUser(user, idx);
              });
          },
              loadCategoryProjects = function loadCategoryProjects(category) {
              selectedCategory(category);
              var categoryProjects = _$1.findWhere(startvm.categoryProjects, {
                  categoryId: _$1.first(category).category_id
              });
              featuredProjects([]);
              if (!_$1.isUndefined(categoryProjects)) {
                  _$1.map(categoryProjects.sampleProjects, function (project_id, idx) {
                      if (!_$1.isUndefined(project_id)) {
                          projectvm.project_id(project_id);
                          lProject().load().then(function (project) {
                              return setProject(project, idx);
                          });
                      }
                  });
              }
          };

          statsLoader.load().then(stats);
          loadCategories();

          return {
              stats: stats,
              categories: categories,
              paneImages: paneImages,
              selectCategory: selectCategory,
              selectedCategory: selectedCategory,
              selectedCategoryIdx: selectedCategoryIdx,
              selectPane: selectPane,
              selectedPane: selectedPane,
              featuredProjects: featuredProjects,
              testimonials: startvm.testimonials,
              questions: startvm.questions
          };
      },
      view: function view(ctrl, args) {
          var stats = _$1.first(ctrl.stats());
          var testimonials = function testimonials() {
              return _$1.map(ctrl.testimonials, function (testimonial) {
                  var content = m$1('.card.u-radius.card-big.card-terciary', [m$1('.u-text-center.u-marginbottom-20', [m$1('img.thumb-testimonial.u-round.u-marginbottom-20[src="' + testimonial.thumbUrl + '"]')]), m$1('p.fontsize-large.u-marginbottom-30', '"' + testimonial.content + '"'), m$1('.u-text-center', [m$1('.fontsize-large.fontweight-semibold', testimonial.name), m$1('.fontsize-base', testimonial.totals)])]);

                  return {
                      content: content
                  };
              });
          };

          return m$1('#start', [m$1('.w-section.hero-full.hero-start', [m$1('.w-container.u-text-center', [m$1('.fontsize-megajumbo.fontweight-semibold.u-marginbottom-40', I18n$1.t('slogan', I18nScope$15())), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-4.w-col-push-4', [m$1('a.btn.btn-large.u-marginbottom-10[href="#start-form"]', {
              config: h.scrollTo(),
              onclick: h.analytics.event({ cat: 'project_start', act: 'start_btnstart_click' })
          }, I18n$1.t('submit', I18nScope$15()))])]), m$1('.w-row', _$1.isEmpty(stats) ? '' : [m$1('.w-col.w-col-4', [m$1('.fontsize-largest.lineheight-loose', h.formatNumber(stats.total_contributors, 0, 3)), m$1('p.fontsize-small.start-stats', I18n$1.t('header.people', I18nScope$15()))]), m$1('.w-col.w-col-4', [m$1('.fontsize-largest.lineheight-loose', stats.total_contributed.toString().slice(0, 2) + ' milhões'), m$1('p.fontsize-small.start-stats', I18n$1.t('header.money', I18nScope$15()))]), m$1('.w-col.w-col-4', [m$1('.fontsize-largest.lineheight-loose', h.formatNumber(stats.total_projects_success, 0, 3)), m$1('p.fontsize-small.start-stats', I18n$1.t('header.success', I18nScope$15()))])])])]), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-10.w-col-push-1.u-text-center', [m$1('.fontsize-larger.u-marginbottom-10.fontweight-semibold', I18n$1.t('page-title', I18nScope$15())), m$1('.fontsize-small', I18n$1.t('page-subtitle', I18nScope$15()))])]), m$1('.w-clearfix.how-row', [m$1('.w-hidden-small.w-hidden-tiny.how-col-01', [m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.1', I18nScope$15())), m$1('.fontsize-base', I18n$1.t('banner.2', I18nScope$15()))]), m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.3', I18nScope$15())), m$1('.fontsize-base', I18n$1.t('banner.4', I18nScope$15()))])]), m$1('.how-col-02'), m$1('.how-col-03', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.5', I18nScope$15())), m$1('.fontsize-base', I18n$1.t('banner.6', I18nScope$15())), m$1('.fontweight-semibold.fontsize-large.u-margintop-30', I18n$1.t('banner.7', I18nScope$15())), m$1('.fontsize-base', I18n$1.t('banner.8', I18nScope$15()))]), m$1('.w-hidden-main.w-hidden-medium.how-col-01', [m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.1', I18nScope$15())), m$1('.fontsize-base', I18n$1.t('banner.2', I18nScope$15()))]), m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.3', I18nScope$15())), m$1('.fontsize-base', I18n$1.t('banner.4', I18nScope$15()))])])])])]), m$1('.w-section.divider'), m$1('.w-section.section-large', [m$1('.w-container.u-text-center.u-marginbottom-60', [m$1('div', [m$1('span.fontsize-largest.fontweight-semibold', I18n$1.t('features.title', I18nScope$15()))]), m$1('.w-hidden-small.w-hidden-tiny.fontsize-large.u-marginbottom-20', I18n$1.t('features.subtitle', I18nScope$15())), m$1('.w-hidden-main.w-hidden-medium.u-margintop-30', [m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_1', I18nScope$15())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_2', I18nScope$15())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_3', I18nScope$15())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_4', I18nScope$15())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_5', I18nScope$15())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_6', I18nScope$15()))])]), m$1('.w-container', [m$1('.w-tabs.w-hidden-small.w-hidden-tiny', [m$1('.w-tab-menu.w-col.w-col-4', _$1.map(ctrl.paneImages, function (pane, idx) {
              return m$1('btn.w-tab-link.w-inline-block.tab-list-item' + (idx === ctrl.selectedPane() ? '.selected' : ''), {
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_solution_click', lbl: pane.label }, ctrl.selectPane(idx))
              }, pane.label);
          })), m$1('.w-tab-content.w-col.w-col-8', _$1.map(ctrl.paneImages, function (pane, idx) {
              return m$1('.w-tab-pane', [m$1('img[src="' + pane.src + '"].pane-image' + (idx === ctrl.selectedPane() ? '.selected' : ''))]);
          }))])])]), m$1('.w-section.section-large.card-terciary', m$1('.w-container', [m$1('.u-text-center.u-marginbottom-40', [m$1('div', m$1('span.fontsize-largest.fontweight-semibold', I18n$1.t('mode.title', I18nScope$15()))), m$1('.w-row', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10', m$1('.fontsize-large.u-marginbottom-20', I18n$1.t('mode.subtitle', I18nScope$15()))), m$1('.w-col.w-col-1')])]), m$1('div', m$1('.flex-row.u-marginbottom-40', [m$1('.flex-column.card.u-radius.u-marginbottom-30', [m$1('.u-text-center.u-marginbottom-30', m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/5632f334ec8a367d341b4bba_badge-aon.png\']')), m$1('.fontsize-large.flex-column.u-marginbottom-20', [I18n$1.t('mode.aon.info', I18nScope$15()), m$1.trust('&nbsp;')]), m$1('.fontsize-base.flex-column.fontcolor-secondary', I18n$1.t('mode.aon.info_2', I18nScope$15()))]), m$1('.flex-column.card.u-radius.u-marginbottom-30', [m$1('.u-text-center.u-marginbottom-30', m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/5632ebacd092957f34eaea9c_badge-flex.png\']')), m$1('.fontsize-large.flex-column.u-marginbottom-20', I18n$1.t('mode.flex.info', I18nScope$15())), m$1('.fontsize-base.flex-column.fontcolor-secondary', I18n$1.t('mode.flex.info_2', I18nScope$15()))])])), m$1('.u-text-center.u-marginbottom-30', [m$1('.fontsize-large.fontweight-semibold', I18n$1.t('mode.tax_info', I18nScope$15())), m$1('.fontsize-smallest.fontcolor-secondary', [I18n$1.t('mode.failed_info', I18nScope$15()), m$1.trust(I18n$1.t('mode.more_link', I18nScope$15()))])])])), m$1('.w-section.section-large.bg-blue-one', [m$1('.w-container.u-text-center', [m$1('.fontsize-larger.lineheight-tight.fontcolor-negative.u-marginbottom-20', [I18n$1.t('video.title', I18nScope$15()), m$1('br'), I18n$1.t('video.subtitle', I18nScope$15())]), m$1.component(youtubeLightbox, {
              src: I18n$1.t('video.src', I18nScope$15()),
              onclick: h.analytics.event({ cat: 'project_start', act: 'start_video_play' })
          })])]), m$1('.w-hidden-small.w-hidden-tiny.section-categories', [m$1('.w-container', [m$1('.u-text-center', [m$1('.w-row', [m$1('.w-col.w-col-10.w-col-push-1', [m$1('.fontsize-large.u-marginbottom-40.fontcolor-negative', I18n$1.t('categories.title', I18nScope$15()))])])]), m$1('.w-tabs', [m$1('.w-tab-menu.u-text-center', _$1.map(ctrl.categories(), function (category) {
              return m$1('a.w-tab-link.w-inline-block.btn-category.small.btn-inline' + (ctrl.selectedCategoryIdx() === category.id ? '.w--current' : ''), {
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_category_click', lbl: category.name }, ctrl.selectCategory(category))
              }, [m$1('div', category.name)]);
          })), m$1('.w-tab-content.u-margintop-40', [m$1('.w-tab-pane.w--tab-active', [m$1('.w-row', ctrl.selectedCategoryIdx() !== -1 ? _$1.map(ctrl.selectedCategory(), function (category) {
              return [m$1('.w-col.w-col-5', [m$1('.fontsize-jumbo.u-marginbottom-20', category.name), m$1('a.w-button.btn.btn-medium.btn-inline.btn-dark[href="#start-form"]', {
                  config: h.scrollTo()
              }, I18n$1.t('submit', I18nScope$15()))]), m$1('.w-col.w-col-7', [m$1('.fontsize-megajumbo.fontcolor-negative', 'R$ ' + (category.total_successful_value ? h.formatNumber(category.total_successful_value, 2, 3) : '...')), m$1('.fontsize-large.u-marginbottom-20', 'Doados para projetos'), m$1('.fontsize-megajumbo.fontcolor-negative', category.successful_projects ? category.successful_projects : '...'), m$1('.fontsize-large.u-marginbottom-30', 'Projetos financiados'), !_$1.isEmpty(ctrl.featuredProjects()) ? _$1.map(ctrl.featuredProjects(), function (project) {
                  return !_$1.isUndefined(project) ? m$1('.w-row.u-marginbottom-10', [m$1('.w-col.w-col-1', [m$1('img.user-avatar[src="' + h.useAvatarOrDefault(project.userThumb) + '"]')]), m$1('.w-col.w-col-11', [m$1('.fontsize-base.fontweight-semibold', project.user.name), m$1('.fontsize-smallest', [I18n$1.t('categories.pledged', I18nScope$15({ pledged: h.formatNumber(project.pledged), contributors: project.total_contributors })), m$1('a.link-hidden[href="/' + project.permalink + '"]', project.name)])])]) : m$1('.fontsize-base', I18n$1.t('categories.loading_featured', I18nScope$15()));
              }) : ''])];
          }) : '')])])])])]), m$1.component(slider, {
              slides: testimonials(),
              title: I18n$1.t('testimonials_title', I18nScope$15()),
              slideClass: 'slide-testimonials-content',
              wrapperClass: 'slide-testimonials',
              onchange: h.analytics.event({ cat: 'project_start', act: 'start_testimonials_change' })
          }), m$1('.w-section.divider.u-margintop-30'), m$1('.w-container', [m$1('.fontsize-larger.u-text-center.u-marginbottom-60.u-margintop-40', I18n$1.t('qa_title', I18nScope$15())), m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-6', _$1.map(ctrl.questions.col_1, function (question) {
              return m$1.component(landingQA, {
                  question: question.question,
                  answer: question.answer,
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_qa_click', lbl: question.question })
              });
          })), m$1('.w-col.w-col-6', _$1.map(ctrl.questions.col_2, function (question) {
              return m$1.component(landingQA, {
                  question: question.question,
                  answer: question.answer,
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_qa_click', lbl: question.question })
              });
          }))])]), m$1('#start-form.w-section.section-large.u-text-center.bg-purple.before-footer', [m$1('.w-container', [m$1('.fontsize-jumbo.fontcolor-negative.u-marginbottom-60', 'Crie o seu rascunho gratuitamente!'), m$1('form[action="/projects/fallback_create"][method="GET"].w-row.w-form', {
              onsubmit: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_submit' })
          }, [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.fontsize-larger.fontcolor-negative.u-marginbottom-10', I18n$1.t('form.title', I18nScope$15())), m$1('input[name="utf8"][type="hidden"][value="✓"]'), m$1('input[name="authenticity_token"][type="hidden"][value="' + h.authenticityToken() + '"]'), m$1('input.w-input.text-field.medium.u-marginbottom-30[type="text"]', {
              name: 'project[name]',
              onchange: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_change', lbl: 'name' })
          }), m$1('.fontsize-larger.fontcolor-negative.u-marginbottom-10', 'na categoria'), m$1('select.w-select.text-field.medium.u-marginbottom-40', {
              name: 'project[category_id]',
              onchange: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_change', lbl: 'category' })
          }, [m$1('option[value=""]', I18n$1.t('form.select_default', I18nScope$15())), _$1.map(ctrl.categories(), function (category) {
              return m$1('option[value="' + category.id + '"]', category.name);
          })])]), m$1('.w-col.w-col-2'), m$1('.w-row.u-marginbottom-80', [m$1('.w-col.w-col-4.w-col-push-4.u-margintop-40', [m$1('input[type="submit"][value="' + I18n$1.t('form.submit', I18nScope$15()) + '"].w-button.btn.btn-large')])])])])])]);
      }
  };

  var teamTotal = {
      controller: function controller() {
          var vm = {
              collection: m$1.prop([])
          };

          models.teamTotal.getRow().then(function (data) {
              vm.collection(data);
          });

          return {
              vm: vm
          };
      },
      view: function view(ctrl, args) {
          return m$1('#team-total-static.w-section.section-one-column.section.u-margintop-40.u-text-center.u-marginbottom-20', [ctrl.vm.collection().map(function (teamTotal) {
              return m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.fontsize-base.u-marginbottom-30', 'Hoje somos ' + teamTotal.member_count + ' pessoas espalhadas por ' + teamTotal.total_cities + ' cidades em ' + teamTotal.countries.length + ' países (' + teamTotal.countries.toString() + ')! O Catarse é independente, sem investidores, de código aberto e construído com amor. Nossa paixão é construir um ambiente onde cada vez mais projetos possam ganhar vida.'), m$1('.fontsize-larger.lineheight-tight.text-success', 'Nossa equipe, junta, já apoiou R$' + h.formatNumber(teamTotal.total_amount) + ' para ' + teamTotal.total_contributed_projects + ' projetos!')]), m$1('.w-col.w-col-2')])]);
          })]);
      }
  };

  var teamMembers = {
      controller: function controller() {
          var vm = {
              collection: m$1.prop([])
          },
              groupCollection = function groupCollection(collection, groupTotal) {
              return _$1.map(_$1.range(Math.ceil(collection.length / groupTotal)), function (i) {
                  return collection.slice(i * groupTotal, (i + 1) * groupTotal);
              });
          };

          models.teamMember.getPage().then(function (data) {
              vm.collection(groupCollection(data, 4));
          });

          return {
              vm: vm
          };
      },
      view: function view(ctrl) {
          return m$1('#team-members-static.w-section.section', [m$1('.w-container', [_$1.map(ctrl.vm.collection(), function (group) {
              return m$1('.w-row.u-text-center', [_$1.map(group, function (member) {
                  return m$1('.team-member.w-col.w-col-3.w-col-small-3.w-col-tiny-6.u-marginbottom-40', [m$1('a.alt-link[href="/users/' + member.id + '"]', [m$1('img.thumb.big.u-round.u-marginbottom-10[src="' + member.img + '"]'), m$1('.fontweight-semibold.fontsize-base', member.name)]), m$1('.fontsize-smallest.fontcolor-secondary', 'Apoiou ' + member.total_contributed_projects + ' projetos')]);
              })]);
          })])]);
      }
  };

  var team = {
      view: function view() {
          return m$1('#static-team-app', [m$1.component(teamTotal), m$1.component(teamMembers)]);
      }
  };

  var I18nScope$17 = _$1.partial(h.i18nScope, 'users.balance');

  var userBalanceRequestModelContent = {
      controller: function controller(args) {
          var vm = postgrest.filtersVM({ user_id: 'eq' }),
              balance = args.balance,
              loaderOpts = models.balanceTransfer.postOptions({
              user_id: balance.user_id }),
              requestLoader = postgrest.loaderWithToken(loaderOpts),
              displayDone = h.toggleProp(false, true),
              requestFund = function requestFund() {
              requestLoader.load().then(function (data) {
                  args.balanceManager.load();
                  args.balanceTransactionManager.load();
                  displayDone.toggle();
              });
          };

          args.bankAccountManager.load();

          return {
              requestLoader: requestLoader,
              requestFund: requestFund,
              bankAccounts: args.bankAccountManager.collection,
              displayDone: displayDone,
              loadBankA: args.bankAccountManager.loader
          };
      },
      view: function view(ctrl, args) {
          var balance = args.balance;

          return ctrl.loadBankA() ? h.loader() : m$1('div', _$1.map(ctrl.bankAccounts(), function (item) {
              return [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', I18n$1.t('withdraw', I18nScope$17()))]), ctrl.displayDone() ? m$1('.modal-dialog-content.u-text-center', [m$1('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m$1('p.fontsize-large', I18n$1.t('sucess_message', I18nScope$17()))]) : m$1('.modal-dialog-content', [m$1('.fontsize-base.u-marginbottom-20', [m$1('span.fontweight-semibold', 'Valor:'), m$1.trust('&nbsp;'), m$1('span.text-success', 'R$ ' + h.formatNumber(balance.amount, 2, 3))]), m$1('.fontsize-base.u-marginbottom-10', [m$1('span', { style: { 'font-weight': ' 600' } }, I18n$1.t('bank.account', I18nScope$17()))]), m$1('.fontsize-small.u-marginbottom-10', [m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.name', I18nScope$17())), m$1.trust('&nbsp;'), item.owner_name]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.cpf_cnpj', I18nScope$17())), m$1.trust('&nbsp;'), item.owner_document]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.bank_name', I18nScope$17())), m$1.trust('&nbsp;'), item.bank_name]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.agency', I18nScope$17())), m$1.trust('&nbsp;'), item.agency + '-' + item.agency_digit]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.account', I18nScope$17())), m$1.trust('&nbsp;'), item.account + '-' + item.account_digit])])]), !ctrl.displayDone() ? m$1('.modal-dialog-nav-bottom', [m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [ctrl.requestLoader() ? h.loader() : m$1('a.btn.btn-large.btn-request-fund[href="js:void(0);"]', { onclick: ctrl.requestFund }, 'Solicitar saque')]), m$1('.w-col.w-col-3')])]) : ''];
          }));
      }
  };

  var I18nScope$16 = _$1.partial(h.i18nScope, 'users.balance');

  var userBalance = {
      controller: function controller(args) {
          args.balanceManager.load();

          return {
              userBalances: args.balanceManager.collection,
              displayModal: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var balance = _$1.first(ctrl.userBalances()),
              balanceRequestModalC = [userBalanceRequestModelContent, _$1.extend({}, { balance: balance }, args)];

          return m$1('.w-section.section.user-balance-section', [ctrl.displayModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: balanceRequestModalC
          }) : '', m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-8.u-text-center-small-only.u-marginbottom-20', [m$1('.fontsize-larger', [I18n.t('totals', I18nScope$16()), m$1('span.text-success', 'R$ ' + h.formatNumber(balance.amount, 2, 3))])]), m$1('.w-col.w-col-4', [m$1('a[class="r-fund-btn w-button btn btn-medium u-marginbottom-10 ' + (balance.amount <= 0 ? 'btn-inactive' : '') + '"][href="js:void(0);"]', { onclick: balance.amount > 0 ? ctrl.displayModal.toggle : 'js:void(0);' }, I18n.t('withdraw_cta', I18nScope$16()))])])])]);
      }
  };

  var I18nScope$18 = _.partial(h.i18nScope, 'users.balance');

  var userBalanceTrasactionRow = {
      controller: function controller(args) {
          var expanded = h.toggleProp(false, true);

          if (args.index == 0) {
              expanded.toggle();
          }

          return {
              expanded: expanded
          };
      },
      view: function view(ctrl, args) {
          var item = args.item,
              createdAt = h.momentFromString(item.created_at, 'YYYY-MM-DD');

          return m$1('div[class=\'balance-card ' + (ctrl.expanded() ? 'card-detailed-open' : '') + '\']', m$1('.w-clearfix.card.card-clickable', [m$1('.w-row', [m$1('.w-col.w-col-2.w-col-tiny-2', [m$1('.fontsize-small.lineheight-tightest', createdAt.format('D MMM')), m$1('.fontsize-smallest.fontcolor-terciary', createdAt.format('YYYY'))]), m$1('.w-col.w-col-10.w-col-tiny-10', [m$1('.w-row', [m$1('.w-col.w-col-4', [m$1('div', [m$1('span.fontsize-smaller.fontcolor-secondary', I18n.t('debit', I18nScope$18())), m$1.trust('&nbsp;'), m$1('span.fontsize-base.text-error', 'R$ ' + h.formatNumber(Math.abs(item.debit), 2, 3))])]), m$1('.w-col.w-col-4', [m$1('div', [m$1('span.fontsize-smaller.fontcolor-secondary', I18n.t('credit', I18nScope$18())), m$1.trust('&nbsp;'), m$1('span.fontsize-base.text-success', 'R$ ' + h.formatNumber(item.credit, 2, 3))])]), m$1('.w-col.w-col-4', [m$1('div', [m$1('span.fontsize-smaller.fontcolor-secondary', I18n.t('totals', I18nScope$18())), m$1.trust('&nbsp;'), m$1('span.fontsize-base', 'R$ ' + h.formatNumber(item.total_amount, 2, 3))])])])])]), m$1('a.w-inline-block.arrow-admin.' + (ctrl.expanded() ? 'arrow-admin-opened' : '') + '.fa.fa-chevron-down.fontcolor-secondary[href="js:(void(0));"]', { onclick: ctrl.expanded.toggle })]), ctrl.expanded() ? m$1('.card', _.map(item.source, function (transaction) {
              var pos = transaction.amount >= 0;

              return m$1('div', [m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-2', [m$1('.text-' + (pos ? 'success' : 'error'), (pos ? '+' : '-') + ' R$ ' + h.formatNumber(Math.abs(transaction.amount), 2, 3))]), m$1('.w-col.w-col-10', [m$1('div', transaction.event_name + ' ' + transaction.origin_object.name)])]), m$1('.divider.u-marginbottom-10')]);
          })) : '');
      }
  };

  var userBalanceTransactions = {
      controller: function controller(args) {
          args.balanceTransactionManager.load();

          return {
              list: args.balanceTransactionManager.list
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.list;

          return m$1('.w-section.section.card-terciary.before-footer.balance-transactions-area', [m$1('.w-container', _$1.map(list.collection(), function (item, index) {
              return m$1.component(userBalanceTrasactionRow, { item: item, index: index });
          })), m$1('.container', [m$1('.w-row.u-margintop-40', [m$1('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])]);
      }
  };

  var userBalanceMain = {
      controller: function controller(args) {
          var userIdVM = postgrest$1.filtersVM({ user_id: 'eq' });

          userIdVM.user_id(args.user_id);

          // Handles with user balance request data
          var balanceManager = function () {
              var collection = m$1.prop([{ amount: 0, user_id: args.user_id }]),
                  load = function load() {
                  models.balance.getRowWithToken(userIdVM.parameters()).then(collection);
              };

              return {
                  collection: collection,
                  load: load
              };
          }(),


          // Handles with user balance transactions list data
          balanceTransactionManager = function () {
              var listVM = postgrest$1.paginationVM(models.balanceTransaction, 'created_at.desc'),
                  load = function load() {
                  listVM.firstPage(userIdVM.parameters());
              };

              return {
                  load: load,
                  list: listVM
              };
          }(),


          // Handles with bank account to check
          bankAccountManager = function () {
              var collection = m$1.prop([]),
                  loader = function () {
                  return postgrest$1.loaderWithToken(models.bankAccount.getRowOptions(userIdVM.parameters()));
              }(),
                  load = function load() {
                  loader.load().then(collection);
              };

              return {
                  collection: collection,
                  load: load,
                  loader: loader
              };
          }();

          return {
              bankAccountManager: bankAccountManager,
              balanceManager: balanceManager,
              balanceTransactionManager: balanceTransactionManager
          };
      },
      view: function view(ctrl, args) {
          var opts = _$1.extend({}, args, ctrl);
          return m$1('#balance-area', [m$1.component(userBalance, opts), m$1('.divider'), m$1.component(userBalanceTransactions, opts), m$1('.u-marginbottom-40'), m$1('.w-section.section.card-terciary.before-footer')]);
      }
  };

  var UserFollowBtn = {
      controller: function controller(args) {
          var following = m$1.prop(args.following || false),
              followVM = postgrest$1.filtersVM({ follow_id: 'eq' }),
              loading = m$1.prop(false),
              hover = m$1.prop(false),
              userFollowInsert = models.userFollow.postOptions({
              follow_id: args.follow_id }),
              userFollowDelete = function () {
              followVM.follow_id(args.follow_id);

              return models.userFollow.deleteOptions(followVM.parameters());
          }(),
              follow = function follow() {
              var l = postgrest$1.loaderWithToken(userFollowInsert);
              loading(true);

              l.load().then(function () {
                  following(true);
                  loading(false);
              });
          },
              unfollow = function unfollow() {
              var l = postgrest$1.loaderWithToken(userFollowDelete);
              loading(true);

              l.load().then(function () {
                  following(false);
                  loading(false);
              });
          };

          return {
              following: following,
              follow: follow,
              unfollow: unfollow,
              loading: loading,
              hover: hover
          };
      },
      view: function view(ctrl, args) {
          if (ctrl.loading()) {
              return h.loader();
          }
          if (ctrl.following()) {
              return m$1('a.w-button.btn.btn-medium.u-margintop-20', {
                  onclick: ctrl.unfollow,
                  onmouseover: function onmouseover() {
                      return ctrl.hover(true);
                  },
                  onmouseout: function onmouseout() {
                      return ctrl.hover(false);
                  }
              }, ctrl.hover() ? 'Deixar de seguir' : 'Seguindo');
          } else {
              return m$1('a.w-button.btn.btn-medium.btn-terciary.u-margintop-20', { onclick: ctrl.follow }, 'Seguir');
          }
      }
  };

  var UserFollowCard = {
    controller: function controller(args) {
      var friend = m$1.prop(args.friend);
      return {
        friend: friend
      };
    },
    view: function view(ctrl, args) {
      var friend = ctrl.friend(),
          profile_img = _$1.isEmpty(friend.avatar) ? '/assets/catarse_bootstrap/user.jpg' : friend.avatar;
      return m$1('.w-col.w-col-4', m$1('.card.card-backer.u-marginbottom-20.u-radius.u-text-center', [m$1('img.thumb.u-marginbottom-10.u-round[src=\'' + profile_img + '\']'), m$1('.fontsize-base.fontweight-semibold.lineheight-tight', m$1('a.link-hidden', { href: '/users/' + friend.friend_id }, friend.name)), m$1('.fontcolor-secondary.fontsize-smallest.u-marginbottom-10', _$1.isNull(friend.city) ? '' : m$1('.fontsize-smaller.fontcolor-secondary.u-marginbottom-10', friend.city + ', ' + friend.state)), m$1('.fontsize-smaller', [m$1('span.fontweight-semibold', friend.total_contributed_projects), ' apoiados ', m$1.trust('&nbsp;'), '| ', m$1.trust('&nbsp;'), m$1('span.fontweight-semibold', friend.total_published_projects), ' criados']), m$1('.btn-bottom-card.w-row', [m$1('.w-col.w-col-3.w-col-small-4.w-col-tiny-3'), m$1('.w-col.w-col-6.w-col-small-4.w-col-tiny-6', m$1.component(UserFollowBtn, { following: friend.following, follow_id: friend.friend_id })), m$1('.w-col.w-col-3.w-col-small-4.w-col-tiny-3')])]));
    }
  };

  var loadMoreBtn = {
      view: function view(ctrl, args) {
          var collection = args.collection;
          return m$1('.w-col.w-col-2', [!collection.isLoading() ? collection.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: collection.nextPage
          }, 'Carregar mais') : h.loader()]);
      }
  };

  var userFriends = {
      controller: function controller(args) {
          models.userFriend.pageSize(9);

          var userFriendVM = postgrest$1.filtersVM({ user_id: 'eq' }),
              user = args.user,
              friendListVM = postgrest$1.paginationVM(models.userFriend, 'following.asc,total_contributed_projects.desc', {
              'Prefer': 'count=exact'
          }),
              allLoading = m$1.prop(false),
              followAll = function followAll() {
              allLoading(true);
              var l = postgrest$1.loaderWithToken(models.followAllFriends.postOptions({}));

              l.load().then(function () {
                  friendListVM.firstPage(userFriendVM.parameters());
                  allLoading(false);
              });
          };

          userFriendVM.user_id(user.user_id);

          if (!friendListVM.collection().length) {
              friendListVM.firstPage(userFriendVM.parameters());
          }

          return {
              friendListVM: friendListVM,
              followAll: followAll,
              allLoading: allLoading
          };
      },
      view: function view(ctrl, args) {
          var listVM = ctrl.friendListVM;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row.u-marginbottom-40.card.u-radius.card-terciary', [m$1('.w-col.w-col-7.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-small', 'Comece agora! Siga todos os seus amigos ou somente alguns deles para descobrir projetos juntos!')]), m$1('.w-col.w-col-5.w-col-small-6.w-col-tiny-6', [ctrl.allLoading() ? h.loader() : m$1('a.w-button.btn.btn-medium', {
              onclick: ctrl.followAll
          }, 'Siga todos os seus ' + (listVM.total() ? listVM.total() : '') + ' amigos')])]), m$1('.w-row', [_$1.map(listVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, { friend: friend });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: listVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var userFollows = {
      controller: function controller(args) {
          models.userFollow.pageSize(9);
          var userFriendVM = postgrest$1.filtersVM({ user_id: 'eq' }),
              user = args.user,
              hash = m$1.prop(window.location.hash),
              followsListVM = postgrest$1.paginationVM(models.userFollow, 'created_at.desc', {
              'Prefer': 'count=exact'
          });

          userFriendVM.user_id(user.user_id);
          if (!followsListVM.collection().length) {
              followsListVM.firstPage(userFriendVM.parameters());
          }

          return {
              followsListVM: followsListVM
          };
      },
      view: function view(ctrl, args) {
          var followsVM = ctrl.followsListVM;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row', [_$1.map(followsVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, { friend: _$1.extend({}, { following: true, friend_id: friend.follow_id }, friend.source) });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: followsVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var userFollowers = {
      controller: function controller(args) {
          models.userFollower.pageSize(9);
          var followersListVM = postgrest$1.paginationVM(models.userFollower, 'following.asc,created_at.desc', {
              'Prefer': 'count=exact'
          }),
              user = args.user,
              userIdVM = postgrest$1.filtersVM({ follow_id: 'eq' });

          userIdVM.follow_id(user.user_id);

          if (!followersListVM.collection().length) {
              followersListVM.firstPage(userIdVM.parameters());
          }
          return {
              followersListVM: followersListVM
          };
      },
      view: function view(ctrl, args) {
          var followersVM = ctrl.followersListVM;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row', [_$1.map(followersVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, { friend: _$1.extend({}, { friend_id: friend.user_id }, friend.source) });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: followersVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var userCreators = {
      controller: function controller(args) {
          models.creatorSuggestion.pageSize(9);

          var creatorsListVM = postgrest$1.paginationVM(models.creatorSuggestion, "following.asc, total_published_projects.desc, total_contributed_projects.desc", {
              'Prefer': 'count=exact'
          });

          if (!creatorsListVM.collection().length) {
              creatorsListVM.firstPage();
          }

          return {
              creatorsListVM: creatorsListVM
          };
      },
      view: function view(ctrl, args) {
          var creatorsVM = ctrl.creatorsListVM;

          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row', [_$1.map(creatorsVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, {
                  friend: _$1.extend({}, {
                      friend_id: friend.user_id
                  }, friend)
              });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: creatorsVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var FollowFoundFriends = {
      controller: function controller(args) {
          var user = h.getUser(),
              hash = m$1.prop(window.location.hash),
              displayTabContent = function displayTabContent() {
              var c_opts = {
                  user: user
              },
                  tabs = {
                  '#creators': m$1.component(userCreators, c_opts),
                  '#friends': m$1.component(userFriends, c_opts),
                  '#follows': m$1.component(userFollows, c_opts),
                  '#followers': m$1.component(userFollowers, c_opts)
              };

              hash(window.location.hash);

              if (_$1.isEmpty(hash()) || hash() === '#_=_') {
                  return tabs['#friends'];
              }

              return tabs[hash()];
          };

          h.redrawHashChange();

          return {
              user: user,
              displayTabContent: displayTabContent
          };
      },
      view: function view(ctrl, args) {
          return [m$1('.w-section.dashboard-header', [m$1('.w-container', [m$1('.w-row.u-margintop-20.u-marginbottom-20', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10.u-text-center', [m$1('.fontsize-larger.fontweight-semibold.u-marginbottom-10', 'Descubra projetos com seus amigos'), m$1('.fontsize-small', 'Siga os seus amigos e nós iremos te notificar sempre que eles lançarem ou apoiarem algum projeto')]), m$1('.w-col.w-col-1')])])]), [m$1('.divider.u-margintop-30'), m$1('.project-nav', m$1('.u-text-center.w-container', [m$1('a[id="creators-link"][class="dashboard-nav-link ' + (h.hashMatch('#creators') ? 'selected' : '') + '"] [href="#creators"]', 'Encontre realizadores'), m$1('a[id="friends-link"][class="dashboard-nav-link ' + (h.hashMatch('#friends') || h.hashMatch('') ? 'selected' : '') + '"] [href="#friends"]', 'Encontre amigos'), m$1('a[id="follows-link"][class="dashboard-nav-link ' + (h.hashMatch('#follows') ? 'selected' : '') + '"] [href="#follows"]', ['Seguindo', m$1.trust('&nbsp;'), m$1('span.w-hidden-small.w-hidden-tiny.badge', ctrl.user.follows_count)]), m$1('a[id="followers-link"][class="dashboard-nav-link ' + (h.hashMatch('#followers') ? 'selected' : '') + '"] [href="#followers"]', ['Seguidores', m$1.trust('&nbsp;'), m$1('span.w-hidden-small.w-hidden-tiny.badge', ctrl.user.followers_count)])]))], ctrl.displayTabContent()];
      }
  };

  var c = {
      root: {
          AdminUsers: adminUsers,
          AdminContributions: adminContributions,
          Flex: Flex,
          Insights: insights,
          Jobs: jobs,
          LiveStatistics: liveStatistics,
          ProjectsContributionReport: projectContributionReport,
          ProjectsDashboard: projectsDashboard,
          ProjectsExplore: projectsExplore,
          ProjectsHome: projectsHome,
          ProjectsShow: projectsShow,
          ProjectsPayment: projectsPayment,
          ProjectsReward: projectsReward,
          Publish: publish,
          Start: start,
          Team: team,
          UsersBalance: userBalanceMain,
          Menu: menu,
          Footer: footer,
          FollowFoundFriends: FollowFoundFriends
      }
  };

  return c;

}(m,I18n,postgrest,replaceDiacritics,_,moment,Chart));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjLyoqLyouanMiLCJzb3VyY2VzIjpbInNyYy9oLmpzIiwic3JjL21vZGVscy5qcyIsInNyYy92bXMvdXNlci1saXN0LXZtLmpzIiwic3JjL3Ztcy91c2VyLWZpbHRlci12bS5qcyIsInNyYy9jL2ZpbHRlci1tYWluLmpzIiwic3JjL2MvYWRtaW4tZmlsdGVyLmpzIiwic3JjL2MvYWRtaW4taXRlbS5qcyIsInNyYy9jL2FkbWluLWxpc3QuanMiLCJzcmMvYy9hZG1pbi11c2VyLmpzIiwic3JjL2MvYWRtaW4tdXNlci1pdGVtLmpzIiwic3JjL2MvYWRtaW4tcmVzZXQtcGFzc3dvcmQuanMiLCJzcmMvYy9hZG1pbi1pbnB1dC1hY3Rpb24uanMiLCJzcmMvYy9hZG1pbi1ub3RpZmljYXRpb24taGlzdG9yeS5qcyIsInNyYy9jL2FkbWluLXVzZXItZGV0YWlsLmpzIiwic3JjL2MvZHJvcGRvd24uanMiLCJzcmMvYy9maWx0ZXItZHJvcGRvd24uanMiLCJzcmMvcm9vdC9hZG1pbi11c2Vycy5qcyIsInNyYy92bXMvY29udHJpYnV0aW9uLWxpc3Qtdm0uanMiLCJzcmMvdm1zL2NvbnRyaWJ1dGlvbi1maWx0ZXItdm0uanMiLCJzcmMvYy9hZG1pbi1wcm9qZWN0LmpzIiwic3JjL2MvYWRtaW4tY29udHJpYnV0aW9uLmpzIiwic3JjL2MvYWRtaW4tY29udHJpYnV0aW9uLXVzZXIuanMiLCJzcmMvYy9wYXltZW50LXN0YXR1cy5qcyIsInNyYy9jL2FkbWluLWNvbnRyaWJ1dGlvbi1pdGVtLmpzIiwic3JjL2MvYWRtaW4tcmFkaW8tYWN0aW9uLmpzIiwic3JjL2MvYWRtaW4tZXh0ZXJuYWwtYWN0aW9uLmpzIiwic3JjL2MvYWRtaW4tdHJhbnNhY3Rpb24uanMiLCJzcmMvYy9hZG1pbi10cmFuc2FjdGlvbi1oaXN0b3J5LmpzIiwic3JjL2MvYWRtaW4tcmV3YXJkLmpzIiwic3JjL2MvYWRtaW4tY29udHJpYnV0aW9uLWRldGFpbC5qcyIsInNyYy9jL2ZpbHRlci1udW1iZXItcmFuZ2UuanMiLCJzcmMvYy9maWx0ZXItZGF0ZS1yYW5nZS5qcyIsInNyYy9yb290L2FkbWluLWNvbnRyaWJ1dGlvbnMuanMiLCJzcmMvYy9sYW5kaW5nLXNpZ251cC5qcyIsInNyYy92bXMvcmV3YXJkLXZtLmpzIiwic3JjL3Ztcy91c2VyLXZtLmpzIiwic3JjL3Ztcy9wcm9qZWN0LXZtLmpzIiwic3JjL2MvcHJvamVjdC1mcmllbmRzLmpzIiwic3JjL2MvcHJvamVjdC1jYXJkLmpzIiwic3JjL2MvcHJvamVjdC1yb3cuanMiLCJzcmMvYy9sYW5kaW5nLXFhLmpzIiwic3JjL3Jvb3QvZmxleC5qcyIsInNyYy9jL3Rvb2x0aXAuanMiLCJzcmMvYy9wcm9qZWN0LWRhc2hib2FyZC1tZW51LmpzIiwic3JjL2MvbW9kYWwtYm94LmpzIiwic3JjL2MvYWRtaW4tcHJvamVjdC1kZXRhaWxzLWNhcmQuanMiLCJzcmMvYy9vbmxpbmUtc3VjY2Vzcy1tb2RhbC1jb250ZW50LmpzIiwic3JjL2MvcHJvamVjdC1kYXRhLXN0YXRzLmpzIiwic3JjL2MvcHJvamVjdC1kYXRhLWNoYXJ0LmpzIiwic3JjL2MvcHJvamVjdC1kYXRhLXRhYmxlLmpzIiwic3JjL2MvcHJvamVjdC1yZW1pbmRlci1jb3VudC5qcyIsInNyYy9jL2Rhc2hib2FyZC1pbmZvLmpzIiwic3JjL2MvcHJvamVjdC1zdWNjZXNzZnVsLW9uYm9hcmQtY29uZmlybS1hY2NvdW50LWVycm9yLmpzIiwic3JjL2MvcHJvamVjdC1zdWNjZXNzZnVsLW9uYm9hcmQtY29uZmlybS1hY2NvdW50LWFjY2VwdC5qcyIsInNyYy9jL3Byb2plY3Qtc3VjY2Vzc2Z1bC1vbmJvYXJkLWNvbmZpcm0tYWNjb3VudC5qcyIsInNyYy9jL3N1Y2Nlc3NmdWwtcHJvamVjdC10YXgtbW9kYWwuanMiLCJzcmMvdm1zL2luc2lnaHQtdm0uanMiLCJzcmMvYy9wcm9qZWN0LXN1Y2Nlc3NmdWwtb25ib2FyZC5qcyIsInNyYy9jL2ZhY2Vib29rLWJ1dHRvbi5qcyIsInNyYy9jL3BvcC1ub3RpZmljYXRpb24uanMiLCJzcmMvYy9jb3B5LXRleHQtaW5wdXQuanMiLCJzcmMvcm9vdC9pbnNpZ2h0cy5qcyIsInNyYy9yb290L2pvYnMuanMiLCJzcmMvcm9vdC9saXZlLXN0YXRpc3RpY3MuanMiLCJzcmMvYy9wcm9qZWN0LWNvbnRyaWJ1dGlvbi1yZXBvcnQtaGVhZGVyLmpzIiwic3JjL2MvcHJvamVjdC1jb250cmlidXRpb24tcmVwb3J0LWNvbnRlbnQtY2FyZC5qcyIsInNyYy9jL3Byb2plY3QtY29udHJpYnV0aW9uLXJlcG9ydC1jb250ZW50LmpzIiwic3JjL3Ztcy9wcm9qZWN0cy1jb250cmlidXRpb24tcmVwb3J0LXZtLmpzIiwic3JjL2MvcHJvamVjdC1jb250cmlidXRpb24tc3RhdGUtbGVnZW5kLW1vZGFsLmpzIiwic3JjL2MvaW5mby1wcm9qZWN0LWNvbnRyaWJ1dGlvbi1zdGF0ZS1sZWdlbmQuanMiLCJzcmMvcm9vdC9wcm9qZWN0cy1jb250cmlidXRpb24tcmVwb3J0LmpzIiwic3JjL3Jvb3QvcHJvamVjdHMtZGFzaGJvYXJkLmpzIiwic3JjL3Ztcy9wcm9qZWN0LWZpbHRlcnMtdm0uanMiLCJzcmMvYy9zZWFyY2guanMiLCJzcmMvYy9jYXRlZ29yeS1idXR0b24uanMiLCJzcmMvYy9zaWduZWQtZnJpZW5kLWZhY2Vib29rLWNvbm5lY3QuanMiLCJzcmMvYy91bnNpZ25lZC1mcmllbmQtZmFjZWJvb2stY29ubmVjdC5qcyIsInNyYy9yb290L3Byb2plY3RzLWV4cGxvcmUuanMiLCJzcmMvYy9tZW51LXNlYXJjaC5qcyIsInNyYy9jL3F1aWNrLXByb2plY3QtbGlzdC5qcyIsInNyYy9jL21lbnUtcHJvZmlsZS5qcyIsInNyYy9yb290L21lbnUuanMiLCJzcmMvdm1zL2hvbWUtdm0uanMiLCJzcmMvYy9zbGlkZXIuanMiLCJzcmMvYy9jb250cmlidXRpb24tYWN0aXZpdGllcy5qcyIsInNyYy9yb290L2Jsb2ctYmFubmVyLmpzIiwic3JjL3Jvb3QvZm9vdGVyLmpzIiwic3JjL3Jvb3QvcHJvamVjdHMtaG9tZS5qcyIsInNyYy9jL3Byb2plY3Qtc2hhcmUtYm94LmpzIiwic3JjL2MvYWRkcmVzcy10YWcuanMiLCJzcmMvYy9jYXRlZ29yeS10YWcuanMiLCJzcmMvYy9wcm9qZWN0LWhpZ2hsaWdodC5qcyIsInNyYy9jL3Byb2plY3QtbW9kZS5qcyIsInNyYy9jL3Byb2plY3QtcmVtaW5kZXIuanMiLCJzcmMvYy9vd25lci1tZXNzYWdlLWNvbnRlbnQuanMiLCJzcmMvYy9wcm9qZWN0LXVzZXItY2FyZC5qcyIsInNyYy9jL3Byb2plY3Qtc2lkZWJhci5qcyIsInNyYy9jL3VzZXItY29udHJpYnV0aW9uLWRldGFpbC5qcyIsInNyYy92bXMvY29udHJpYnV0aW9uLXZtLmpzIiwic3JjL2MvcHJvamVjdC1oZWFkZXIuanMiLCJzcmMvYy9wcm9qZWN0LXRhYnMuanMiLCJzcmMvYy9wcm9qZWN0LXJld2FyZC1saXN0LmpzIiwic3JjL2MvcHJvamVjdC1zdWdnZXN0ZWQtY29udHJpYnV0aW9ucy5qcyIsInNyYy9jL3Byb2plY3QtY29udHJpYnV0aW9ucy5qcyIsInNyYy9jL3Byb2plY3QtcmVwb3J0LmpzIiwic3JjL2MvcHJvamVjdC1hYm91dC5qcyIsInNyYy9jL3Byb2plY3QtY29tbWVudHMuanMiLCJzcmMvYy9wcm9qZWN0LXBvc3RzLmpzIiwic3JjL2MvcHJvamVjdC1tYWluLmpzIiwic3JjL3Jvb3QvcHJvamVjdHMtc2hvdy5qcyIsInNyYy92bXMvcGF5bWVudC12bS5qcyIsInNyYy9jL2ZhcS1ib3guanMiLCJzcmMvYy9wYXltZW50LWZvcm0uanMiLCJzcmMvYy9pbmxpbmUtZXJyb3IuanMiLCJzcmMvcm9vdC9wcm9qZWN0cy1wYXltZW50LmpzIiwic3JjL3Jvb3QvcHJvamVjdHMtcmV3YXJkLmpzIiwic3JjL3Jvb3QvcHVibGlzaC5qcyIsInNyYy92bXMvc3RhcnQtdm0uanMiLCJzcmMvYy95b3V0dWJlLWxpZ2h0Ym94LmpzIiwic3JjL3Jvb3Qvc3RhcnQuanMiLCJzcmMvYy90ZWFtLXRvdGFsLmpzIiwic3JjL2MvdGVhbS1tZW1iZXJzLmpzIiwic3JjL3Jvb3QvdGVhbS5qcyIsInNyYy9jL3VzZXItYmFsYW5jZS1yZXF1ZXN0LW1vZGFsLWNvbnRlbnQuanMiLCJzcmMvYy91c2VyLWJhbGFuY2UuanMiLCJzcmMvYy91c2VyLWJhbGFuY2UtdHJhbnNhY3Rpb24tcm93LmpzIiwic3JjL2MvdXNlci1iYWxhbmNlLXRyYW5zYWN0aW9ucy5qcyIsInNyYy9yb290L3VzZXJzLWJhbGFuY2UtbWFpbi5qcyIsInNyYy9jL3VzZXItZm9sbG93LWJ0bi5qcyIsInNyYy9jL3VzZXItZm9sbG93LWNhcmQuanMiLCJzcmMvYy9sb2FkLW1vcmUtYnRuLmpzIiwic3JjL2MvdXNlci1mcmllbmRzLmpzIiwic3JjL2MvdXNlci1mb2xsb3dzLmpzIiwic3JjL2MvdXNlci1mb2xsb3dlcnMuanMiLCJzcmMvYy91c2VyLWNyZWF0b3JzLmpzIiwic3JjL3Jvb3QvZm9sbG93LWZvdW5kLWZyaWVuZHMuanMiLCJzcmMvYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcblxuY29uc3RcbiAgICBfZGF0YUNhY2hlID0ge30sXG4gICAgaGFzaE1hdGNoID0gKHN0cikgPT4geyByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPT09IHN0cjsgfSxcbiAgICBwYXJhbUJ5TmFtZSA9IChuYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vcm1hbE5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgJ1xcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXF0nKSxcbiAgICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnW1xcXFw/Jl0nICsgbm9ybWFsTmFtZSArICc9KFteJiNdKiknKSxcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZWdleC5leGVjKGxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICAgIHJldHVybiByZXN1bHRzID09PSBudWxsID8gJycgOiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1sxXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XG4gICAgfSxcbiAgXHRzZWxmT3JFbXB0eSA9IChvYmosIGVtcHR5U3RhdGUgPSAnJykgPT4ge1xuICAgICAgcmV0dXJuIG9iaiA/IG9iaiA6IGVtcHR5U3RhdGU7XG4gIFx0fSxcbiAgICBzZXRNb21lbnRpZnlMb2NhbGUgPSAoKSA9PiB7XG4gICAgICAgIG1vbWVudC5sb2NhbGUoJ3B0Jywge1xuICAgICAgICAgICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2Zldl9tYXJfYWJyX21haV9qdW5fanVsX2Fnb19zZXRfb3V0X25vdl9kZXonLnNwbGl0KCdfJylcbiAgICAgICAgICAgIH0pO1xuICAgIH0sXG4gICAgZXhpc3R5ID0gKHgpID0+IHtcbiAgICAgICAgcmV0dXJuIHggIT0gbnVsbDtcbiAgICB9LFxuXG4gICAgbW9tZW50aWZ5ID0gKGRhdGUsIGZvcm1hdCkgPT4ge1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJ0REL01NL1lZWVknO1xuICAgICAgICByZXR1cm4gZGF0ZSA/IG1vbWVudChkYXRlKS5sb2NhbGUoJ3B0JykuZm9ybWF0KGZvcm1hdCkgOiAnbm8gZGF0ZSc7XG4gICAgfSxcblxuICAgIHN0b3JlQWN0aW9uID0gKGFjdGlvbikgPT4ge1xuICAgICAgICBpZiAoIXNlc3Npb25TdG9yYWdlLmdldEl0ZW0oYWN0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oYWN0aW9uLCBhY3Rpb24pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHN0b3JlT2JqZWN0ID0gKHNlc3Npb25LZXksIG9iaikgPT4ge1xuICAgICAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShzZXNzaW9uS2V5LCBKU09OLnN0cmluZ2lmeShvYmopKTtcbiAgICB9LFxuXG4gICAgZ2V0U3RvcmVkT2JqZWN0ID0gKHNlc3Npb25LZXkpID0+IHtcbiAgICAgICAgaWYgKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oc2Vzc2lvbktleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oc2Vzc2lvbktleSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjYWxsU3RvcmVkQWN0aW9uID0gKGFjdGlvbiwgZnVuYykgPT4ge1xuICAgICAgICBpZiAoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShhY3Rpb24pKSB7XG4gICAgICAgICAgICBmdW5jLmNhbGwoKTtcbiAgICAgICAgICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGFjdGlvbik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZGlzY3VzcyA9IChwYWdlLCBpZGVudGlmaWVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGQgPSBkb2N1bWVudCxcbiAgICAgICAgICAgIHMgPSBkLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICB3aW5kb3cuZGlzcXVzX2NvbmZpZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5wYWdlLnVybCA9IHBhZ2U7XG4gICAgICAgICAgICB0aGlzLnBhZ2UuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgICAgIH07XG4gICAgICAgIHMuc3JjID0gJy8vY2F0YXJzZWZsZXguZGlzcXVzLmNvbS9lbWJlZC5qcyc7XG4gICAgICAgIHMuc2V0QXR0cmlidXRlKCdkYXRhLXRpbWVzdGFtcCcsICtuZXcgRGF0ZSgpKTtcbiAgICAgICAgKGQuaGVhZCB8fCBkLmJvZHkpLmFwcGVuZENoaWxkKHMpO1xuICAgICAgICByZXR1cm4gbSgnJyk7XG4gICAgfSxcblxuICAgIHZhbGlkYXRlRW1haWwgPSAoZW1haWwpID0+IHtcbiAgICAgICAgY29uc3QgcmUgPSAvXigoW148PigpW1xcXVxcLiw7Olxcc0BcXFwiXSsoXFwuW148PigpW1xcXVxcLiw7Olxcc0BcXFwiXSspKil8KFxcXCIuK1xcXCIpKUAoKFtePD4oKVtcXF1cXC4sOzpcXHNAXFxcIl0rXFwuKStbXjw+KClbXFxdXFwuLDs6XFxzQFxcXCJdezIsfSkkL2k7XG4gICAgICAgIHJldHVybiByZS50ZXN0KGVtYWlsKTtcbiAgICB9LFxuXG4gICAgdmFsaWRhdGVDcGYgPSAoc3RyQ1BGKSA9PiB7XG4gICAgICAgIGxldCBzdW0gPSAwLCByZW1haW5kZXI7XG5cbiAgICAgICAgaWYgKHN0ckNQRiA9PSAnMDAwMDAwMDAwMDAnKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gOTsgaSsrKSB7XG4gICAgICAgICAgICBzdW0gPSBzdW0gKyBwYXJzZUludChzdHJDUEYuc3Vic3RyaW5nKGkgLSAxLCBpKSkgKiAoMTEgLSBpKTtcbiAgICAgICAgfVxuICAgICAgICByZW1haW5kZXIgPSAoc3VtICogMTApICUgMTE7XG5cbiAgICAgICAgaWYgKChyZW1haW5kZXIgPT0gMTApIHx8IChyZW1haW5kZXIgPT0gMTEpKXtcbiAgICAgICAgICAgIHJlbWFpbmRlciA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVtYWluZGVyICE9IHBhcnNlSW50KHN0ckNQRi5zdWJzdHJpbmcoOSwgMTApKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzdW0gPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDEwOyBpKyspe1xuICAgICAgICAgICAgc3VtID0gc3VtICsgcGFyc2VJbnQoc3RyQ1BGLnN1YnN0cmluZyhpIC0gMSwgaSkpICogKDEyIC0gaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZW1haW5kZXIgPSAoc3VtICogMTApICUgMTE7XG5cbiAgICAgICAgaWYgKChyZW1haW5kZXIgPT0gMTApIHx8IChyZW1haW5kZXIgPT0gMTEpKXtcbiAgICAgICAgICAgIHJlbWFpbmRlciA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVtYWluZGVyICE9IHBhcnNlSW50KHN0ckNQRi5zdWJzdHJpbmcoMTAsIDExKSkpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIHZhbGlkYXRpb25FcnJvcnMgPSBtLnByb3AoW10pLFxuXG4gICAgcmVzZXRWYWxpZGF0aW9ucyA9ICgpID0+IHZhbGlkYXRpb25FcnJvcnMoW10pLFxuXG4gICAgdmFsaWRhdGUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yRmllbGRzID0gbS5wcm9wKFtdKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VibWl0KGZpZWxkcywgZm4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNldFZhbGlkYXRpb25zKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoZmllbGRzLCBmaWVsZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQucnVsZSA9PT0gJ2VtYWlsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWRhdGVFbWFpbChmaWVsZC5wcm9wKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25FcnJvcnMoKS5wdXNoKHtmaWVsZDogZmllbGQucHJvcCwgbWVzc2FnZTogJ0UtbWFpbCBpbnbDoWxpZG8uJ30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLnJ1bGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5wcm9wKCkudHJpbSgpID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JzKCkucHVzaCh7ZmllbGQ6IGZpZWxkLnByb3AsIG1lc3NhZ2U6ICdPIGNhbXBvIG7Do28gcG9kZSBzZXIgdmF6aW8uJ30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF2YWxpZGF0aW9uRXJyb3JzKCkubGVuZ3RoID4gMCA/IGZuKCkgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhc0Vycm9yKGZpZWxkUHJvcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfLnJlZHVjZSh2YWxpZGF0aW9uRXJyb3JzKCksIChtZW1vLCBmaWVsZEVycm9yKSA9PiBmaWVsZEVycm9yLmZpZWxkKCkgPT09IGZpZWxkUHJvcCgpIHx8IG1lbW8sIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgbW9tZW50RnJvbVN0cmluZyA9IChkYXRlLCBmb3JtYXQpID0+IHtcbiAgICAgICAgY29uc3QgZXVyb3BlYW4gPSBtb21lbnQoZGF0ZSwgZm9ybWF0IHx8ICdERC9NTS9ZWVlZJyk7XG4gICAgICAgIHJldHVybiBldXJvcGVhbi5pc1ZhbGlkKCkgPyBldXJvcGVhbiA6IG1vbWVudChkYXRlKTtcbiAgICB9LFxuXG4gICAgdHJhbnNsYXRlZFRpbWVVbml0cyA9IHtcbiAgICAgICAgZGF5czogJ2RpYXMnLFxuICAgICAgICBtaW51dGVzOiAnbWludXRvcycsXG4gICAgICAgIGhvdXJzOiAnaG9yYXMnLFxuICAgICAgICBzZWNvbmRzOiAnc2VndW5kb3MnXG4gICAgfSxcbiAgICAvL09iamVjdCBtYW5pcHVsYXRpb24gaGVscGVyc1xuICAgIHRyYW5zbGF0ZWRUaW1lID0gKHRpbWUpID0+IHtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlZFRpbWUgPSB0cmFuc2xhdGVkVGltZVVuaXRzLFxuICAgICAgICAgICAgdW5pdCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9qVW5pdCA9IHRyYW5zbGF0ZWRUaW1lW3RpbWUudW5pdCB8fCAnc2Vjb25kcyddO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aW1lLnRvdGFsIDw9IDEpID8gcHJvalVuaXQuc2xpY2UoMCwgLTEpIDogcHJvalVuaXQ7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bml0OiB1bml0KCksXG4gICAgICAgICAgICB0b3RhbDogdGltZS50b3RhbFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvL051bWJlciBmb3JtYXR0aW5nIGhlbHBlcnNcbiAgICBnZW5lcmF0ZUZvcm1hdE51bWJlciA9IChzLCBjKSA9PiB7XG4gICAgICAgIHJldHVybiAobnVtYmVyLCBuLCB4KSA9PiB7XG4gICAgICAgICAgICBpZiAoIV8uaXNOdW1iZXIobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCByZSA9ICdcXFxcZCg/PShcXFxcZHsnICsgKHggfHwgMykgKyAnfSkrJyArIChuID4gMCA/ICdcXFxcRCcgOiAnJCcpICsgJyknLFxuICAgICAgICAgICAgICAgIG51bSA9IG51bWJlci50b0ZpeGVkKE1hdGgubWF4KDAsIH5+bikpO1xuICAgICAgICAgICAgcmV0dXJuIChjID8gbnVtLnJlcGxhY2UoJy4nLCBjKSA6IG51bSkucmVwbGFjZShuZXcgUmVnRXhwKHJlLCAnZycpLCAnJCYnICsgKHMgfHwgJywnKSk7XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBmb3JtYXROdW1iZXIgPSBnZW5lcmF0ZUZvcm1hdE51bWJlcignLicsICcsJyksXG5cbiAgICB0b2dnbGVQcm9wID0gKGRlZmF1bHRTdGF0ZSwgYWx0ZXJuYXRlU3RhdGUpID0+IHtcbiAgICAgICAgY29uc3QgcCA9IG0ucHJvcChkZWZhdWx0U3RhdGUpO1xuICAgICAgICBwLnRvZ2dsZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwKCgocCgpID09PSBhbHRlcm5hdGVTdGF0ZSkgPyBkZWZhdWx0U3RhdGUgOiBhbHRlcm5hdGVTdGF0ZSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBwO1xuICAgIH0sXG5cbiAgICBpZFZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgIGlkOiAnZXEnXG4gICAgfSksXG5cbiAgICBnZXRDdXJyZW50UHJvamVjdCA9ICgpID0+IHtcbiAgICAgICAgaWYgKF9kYXRhQ2FjaGUuY3VycmVudFByb2plY3QpXG4gICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUuY3VycmVudFByb2plY3Q7XG5cbiAgICAgICAgY29uc3Qgcm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0LXNob3ctcm9vdCcpLFxuICAgICAgICAgICAgICBkYXRhID0gcm9vdCAmJiByb290LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJhbWV0ZXJzJyk7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gX2RhdGFDYWNoZS5jdXJyZW50UHJvamVjdCA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0UmRUb2tlbiA9ICgpID0+IHtcbiAgICAgICAgaWYgKF9kYXRhQ2FjaGUucmRUb2tlbilcbiAgICAgICAgICByZXR1cm4gX2RhdGFDYWNoZS5yZFRva2VuO1xuXG4gICAgICAgIGNvbnN0IG1ldGEgPSBfLmZpcnN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tuYW1lPXJkLXRva2VuXScpKTtcbiAgICAgICAgcmV0dXJuIG1ldGEgPyAoX2RhdGFDYWNoZS5yZFRva2VuID0gbWV0YS5jb250ZW50KSA6IHVuZGVmaW5lZDtcbiAgICB9LFxuXG4gICAgZ2V0VXNlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKF9kYXRhQ2FjaGUudXNlcilcbiAgICAgICAgICByZXR1cm4gX2RhdGFDYWNoZS51c2VyO1xuXG4gICAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpLFxuICAgICAgICAgICAgZGF0YSA9IF8uZmlyc3QoYm9keSkuZ2V0QXR0cmlidXRlKCdkYXRhLXVzZXInKTtcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBfZGF0YUNhY2hlLnVzZXIgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldEFwaUhvc3QgPSAoKSA9PiB7XG4gICAgICAgIGlmIChfZGF0YUNhY2hlLmFwaUhvc3QpXG4gICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUuYXBpSG9zdDtcblxuICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBpLWhvc3QnKTtcbiAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUuYXBpSG9zdCA9IGVsICYmIGVsLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xuICAgIH0sXG5cbiAgICBsb2NhdGlvbkFjdGlvbk1hdGNoID0gKGFjdGlvbikgPT4ge1xuICAgICAgICBjb25zdCBhY3QgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKS5zbGljZSgtMSlbMF07XG4gICAgICAgIHJldHVybiBhY3Rpb24gPT09IGFjdDtcbiAgICB9LFxuXG4gICAgdXNlQXZhdGFyT3JEZWZhdWx0ID0gKGF2YXRhclBhdGgpID0+IHtcbiAgICAgICAgcmV0dXJuIGF2YXRhclBhdGggfHwgJy9hc3NldHMvY2F0YXJzZV9ib290c3RyYXAvdXNlci5qcGcnO1xuICAgIH0sXG5cbiAgICAvL1RlbXBsYXRlc1xuICAgIGxvYWRlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2ludG9wLTMwIHUtbWFyZ2luYm90dG9tLTMwJywgW1xuICAgICAgICAgICAgbSgnaW1nW2FsdD1cIkxvYWRlclwiXVtzcmM9XCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vY2F0YXJzZS5maWxlcy9sb2FkZXIuZ2lmXCJdJylcbiAgICAgICAgXSk7XG4gICAgfSxcblxuICAgIG5ld0ZlYXR1cmVCYWRnZSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIG0oJ3NwYW4uYmFkZ2UuYmFkZ2Utc3VjY2Vzcy5tYXJnaW4tc2lkZS01JywgSTE4bi50KCdwcm9qZWN0cy5uZXdfZmVhdHVyZV9iYWRnZScpKTtcbiAgICB9LFxuXG4gICAgZmJQYXJzZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdHJ5UGFyc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5GQi5YRkJNTC5wYXJzZSgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB3aW5kb3cuc2V0VGltZW91dCh0cnlQYXJzZSwgNTAwKTsgLy91c2UgdGltZW91dCB0byB3YWl0IGFzeW5jIG9mIGZhY2Vib29rXG4gICAgfSxcblxuICAgIHBsdXJhbGl6ZSA9IChjb3VudCwgcywgcCkgPT4ge1xuICAgICAgICByZXR1cm4gKGNvdW50ID4gMSA/IGNvdW50ICsgcCA6IGNvdW50ICsgcyk7XG4gICAgfSxcblxuICAgIHN0cmlwID0gKGh0bWwpID0+ICB7XG4gICAgICAgIHZhciB0bXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdG1wLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHJldHVybiB0bXAudGV4dENvbnRlbnQgfHwgdG1wLmlubmVyVGV4dCB8fCAnJztcbiAgICB9LFxuXG4gICAgc2ltcGxlRm9ybWF0ID0gKHN0ciA9ICcnKSA9PiB7XG4gICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXHJcXG4/LywgJ1xcbicpO1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXG5cXG4rL2csICc8L3A+PHA+Jyk7XG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxuL2csICc8YnIgLz4nKTtcbiAgICAgICAgICAgIHN0ciA9ICc8cD4nICsgc3RyICsgJzwvcD4nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfSxcblxuICAgIHJld2FyZFNvdWxkT3V0ID0gKHJld2FyZCkgPT4ge1xuICAgICAgICByZXR1cm4gKHJld2FyZC5tYXhpbXVtX2NvbnRyaWJ1dGlvbnMgPiAwID9cbiAgICAgICAgICAgIChyZXdhcmQucGFpZF9jb3VudCArIHJld2FyZC53YWl0aW5nX3BheW1lbnRfY291bnQgPj0gcmV3YXJkLm1heGltdW1fY29udHJpYnV0aW9ucykgOiBmYWxzZSk7XG4gICAgfSxcblxuICAgIHJld2FyZFJlbWFuaW5nID0gKHJld2FyZCkgPT4ge1xuICAgICAgICByZXR1cm4gcmV3YXJkLm1heGltdW1fY29udHJpYnV0aW9ucyAtIChyZXdhcmQucGFpZF9jb3VudCArIHJld2FyZC53YWl0aW5nX3BheW1lbnRfY291bnQpO1xuICAgIH0sXG5cbiAgICBwYXJzZVVybCA9IChocmVmKSA9PiB7XG4gICAgICAgIGNvbnN0IGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIGwuaHJlZiA9IGhyZWY7XG4gICAgICAgIHJldHVybiBsO1xuICAgIH0sXG5cbiAgICBVSUhlbHBlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIChlbCwgaXNJbml0aWFsaXplZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkICYmIHdpbmRvdy4kKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlVJSGVscGVyLnNldHVwUmVzcG9uc2l2ZUlmcmFtZXMoJChlbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICB0b0FuY2hvciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIChlbCwgaXNJbml0aWFsaXplZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKXtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpO1xuICAgICAgICAgICAgICAgIGlmIChoYXNoID09PSBlbC5pZCkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGVsLmlkO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG5hdmlnYXRlVG9EZXZpc2UgPSAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9wdC9sb2dpbic7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgbmF2aWdhdGVUbyA9IChwYXRoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gcGF0aDtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjdW11bGF0aXZlT2Zmc2V0ID0gKGVsZW1lbnQpID0+IHtcbiAgICAgICAgbGV0IHRvcCA9IDAsIGxlZnQgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB0b3AgKz0gZWxlbWVudC5vZmZzZXRUb3AgIHx8IDA7XG4gICAgICAgICAgICBsZWZ0ICs9IGVsZW1lbnQub2Zmc2V0TGVmdCB8fCAwO1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICAgICAgICB9IHdoaWxlIChlbGVtZW50KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNsb3NlTW9kYWwgPSAoKSA9PiB7XG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21vZGFsLWNsb3NlJylbMF07XG4gICAgICAgIGlmIChfLmlzRWxlbWVudChlbCkpe1xuICAgICAgICAgICAgZWwub25jbGljayA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtb2RhbC1iYWNrZHJvcCcpWzBdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjbG9zZUZsYXNoID0gKCkgPT4ge1xuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpY29uLWNsb3NlJylbMF07XG4gICAgICAgIGlmIChfLmlzRWxlbWVudChlbCkpe1xuICAgICAgICAgICAgZWwub25jbGljayA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICBlbC5wYXJlbnRFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgaTE4blNjb3BlID0gKHNjb3BlLCBvYmopID0+IHtcbiAgICAgICAgb2JqID0gb2JqIHx8IHt9O1xuICAgICAgICByZXR1cm4gXy5leHRlbmQoe30sIG9iaiwge3Njb3BlOiBzY29wZX0pO1xuICAgIH0sXG5cbiAgICByZWRyYXdIYXNoQ2hhbmdlID0gKGJlZm9yZSkgPT4ge1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9IF8uaXNGdW5jdGlvbihiZWZvcmUpID9cbiAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgICAgfSA6IG0ucmVkcmF3O1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICB9LFxuXG4gICAgYXV0aGVudGljaXR5VG9rZW4gPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSBfLmZpcnN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tuYW1lPWNzcmYtdG9rZW5dJykpO1xuICAgICAgICByZXR1cm4gbWV0YSA/IG1ldGEuY29udGVudCA6IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGFuaW1hdGVTY3JvbGxUbyA9IChlbCkgPT4ge1xuICAgICAgICBsZXQgc2Nyb2xsZWQgPSB3aW5kb3cuc2Nyb2xsWTtcblxuICAgICAgICBjb25zdCBvZmZzZXQgPSBjdW11bGF0aXZlT2Zmc2V0KGVsKS50b3AsXG4gICAgICAgICAgICBkdXJhdGlvbiA9IDMwMCxcbiAgICAgICAgICAgIGRGcmFtZSA9IChvZmZzZXQgLSBzY3JvbGxlZCkgLyBkdXJhdGlvbixcbiAgICAgICAgICAgIC8vRWFzZUluT3V0Q3ViaWMgZWFzaW5nIGZ1bmN0aW9uLiBXZSdsbCBhYnN0cmFjdCBhbGwgYW5pbWF0aW9uIGZ1bnMgbGF0ZXIuXG4gICAgICAgICAgICBlYXNlZCA9ICh0KSA9PiB0IDwgLjUgPyA0ICogdCAqIHQgKiB0IDogKHQgLSAxKSAqICgyICogdCAtIDIpICogKDIgKiB0IC0gMikgKyAxLFxuICAgICAgICAgICAgYW5pbWF0aW9uID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBwb3MgPSBlYXNlZChzY3JvbGxlZCAvIG9mZnNldCkgKiBzY3JvbGxlZDtcblxuICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBwb3MpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbGVkID49IG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2Nyb2xsZWQgPSBzY3JvbGxlZCArIGRGcmFtZTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgIH0sXG4gICAgc2Nyb2xsVG8gPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNldFRyaWdnZXIgPSAoZWwsIGFuY2hvcklkKSA9PiB7XG4gICAgICAgICAgICBlbC5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvckVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYW5jaG9ySWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8uaXNFbGVtZW50KGFuY2hvckVsKSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRlU2Nyb2xsVG8oYW5jaG9yRWwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIChlbCwgaXNJbml0aWFsaXplZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgc2V0VHJpZ2dlcihlbCwgZWwuaGFzaC5zbGljZSgxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgICAgICBwcm9qZWN0U3RhdGVUZXh0Q2xhc3MgPSAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1c1RleHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9ubGluZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICd0ZXh0LXN1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ05PIEFSJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3RleHQtc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRklOQU5DSUFETydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3RleHQtZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ07Dg08gRklOQU5DSUFETydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgd2FpdGluZ19mdW5kczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICd0ZXh0LXdhaXRpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0FHVUFSREFORE8nXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdGVkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3RleHQtZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1JFQ1VTQURPJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkcmFmdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1JBU0NVTkhPJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpbl9hbmFseXNpczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0VNIEFOw4FMSVNFJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICd0ZXh0LXN1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0FQUk9WQURPJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHN0YXR1c1RleHRbc3RhdGVdO1xuICAgICAgICB9LFxuICAgICAgICBSRFRyYWNrZXIgPSAoZXZlbnRJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChlbCwgaXNJbml0aWFsaXplZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlZ3JhdGlvblNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgICAgICAgICBpbnRlZ3JhdGlvblNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgICAgICAgICAgICAgIGludGVncmF0aW9uU2NyaXB0LmlkID0gJ1JESW50ZWdyYXRpb24nO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW50ZWdyYXRpb25TY3JpcHQuaWQpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaW50ZWdyYXRpb25TY3JpcHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRpb25TY3JpcHQub25sb2FkID0gKCkgPT4gUmRJbnRlZ3JhdGlvbi5pbnRlZ3JhdGUoZ2V0UmRUb2tlbigpLCBldmVudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVncmF0aW9uU2NyaXB0LnNyYyA9ICdodHRwczovL2QzMzVsdXVwdWdzeTIuY2xvdWRmcm9udC5uZXQvanMvaW50ZWdyYXRpb24vc3RhYmxlL3JkLWpzLWludGVncmF0aW9uLm1pbi5qcyc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICBhbmFseXRpY3NFdmVudCA9IChldmVudE9iaiwgZm49RnVuY3Rpb24ucHJvdG90eXBlKSA9PiB7XG4gICAgICAgIC8vaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2FuYWx5dGljc2pzL2NvbW1hbmQtcXVldWUtcmVmZXJlbmNlI3NlbmRcbiAgICAgICAgaWYgKCFldmVudE9iail7XG4gICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50T2JqLnByb2plY3QpXG4gICAgICAgICAgICAgICAgICBldmVudE9iai5wcm9qZWN0ID0gZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50T2JqLnVzZXIpXG4gICAgICAgICAgICAgICAgICBldmVudE9iai51c2VyID0gZ2V0VXNlcigpO1xuICAgICAgICAgICAgICAgIENhdGFyc2VBbmFseXRpY3MuZXZlbnQoZXZlbnRPYmopO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1toLmFuYWx5dGljc0V2ZW50XSBlcnJvcjonLGUpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICAgIH07XG4gICAgfSxcbiAgICBfYW5hbHl0aWNzT25lVGltZUV2ZW50RmlyZWQgPSB7fSxcbiAgICBhbmFseXRpY3NPbmVUaW1lRXZlbnQgPSAoZXZlbnRPYmosIGZuKSA9PiB7XG4gICAgICAgaWYgKCFldmVudE9iaikge1xuICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgfVxuXG4gICAgICAgY29uc3QgZXZlbnRLZXkgPSBfLmNvbXBhY3QoW2V2ZW50T2JqLmNhdCxldmVudE9iai5hY3RdKS5qb2luKCdfJyk7XG4gICAgICAgaWYgKCFldmVudEtleSkge1xuICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nob3VsZCBpbmZvcm0gY2F0IG9yIGFjdCcpO1xuICAgICAgIH1cbiAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICBpZiAoIV9hbmFseXRpY3NPbmVUaW1lRXZlbnRGaXJlZFtldmVudEtleV0pIHtcbiAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ29uZVRpbWVFdmVudCcsZXZlbnRLZXkpO1xuICAgICAgICAgICAgICAgX2FuYWx5dGljc09uZVRpbWVFdmVudEZpcmVkW2V2ZW50S2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICBjb25zdCBmaXJlRXZlbnQgPSBhbmFseXRpY3NFdmVudChldmVudE9iaiwgZm4pO1xuICAgICAgICAgICAgICAgZmlyZUV2ZW50KCk7XG4gICAgICAgICAgIH1cbiAgICAgICB9O1xuICAgfSxcbiAgICBtb25ldGFyeVRvRmxvYXQgPSAocHJvcFZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHByb3BWYWx1ZSgpLnJlcGxhY2UoJy4nLCAnJykucmVwbGFjZSgnLCcsICcuJykpO1xuICAgIH0sXG5cbiAgICBhcHBseU1vbmV0YXJ5TWFzayA9IChudW1iZXIpID0+IHtcbiAgICAgICAgbGV0IG9ubHlOdW1iZXJzID0gU3RyaW5nKG51bWJlcikucmVwbGFjZSgvW14wLTldfFsuLF0vZywgJycpLFxuICAgICAgICAgICAgaW50ZWdlclBhcnQgPSBvbmx5TnVtYmVycy5zbGljZSgwLCBvbmx5TnVtYmVycy5sZW5ndGggLSAyKSxcbiAgICAgICAgICAgIGRlY2ltYWxQYXJ0ID0gb25seU51bWJlcnMuc2xpY2Uob25seU51bWJlcnMubGVuZ3RoIC0gMik7XG5cbiAgICAgICAgaW50ZWdlclBhcnQgPSBpbnRlZ2VyUGFydC5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCAnLicpO1xuXG4gICAgICAgIHJldHVybiBgJHtpbnRlZ2VyUGFydH0sJHtkZWNpbWFsUGFydH1gO1xuICAgIH0sXG5cbiAgICBhZGRDaGFyID0gKHBvc2l0aW9uLCBtYXNrQ2hhcikgPT4ge1xuICAgICAgICByZXR1cm4gKGNoYXIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPT09IHBvc2l0aW9uICYmIGNoYXIgIT09IG1hc2tDaGFyKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChzdHJpbmcgKyBtYXNrQ2hhcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgcmVhZE1hc2tEZWZpbml0aW9uID0gKG1hc2tDaGFyRGVmaW5pdGlvbnMpID0+IHtcbiAgICAgICAgcmV0dXJuIChtYXNrRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIF8uY29tcGFjdChfLm1hcChtYXNrRGVmaW5pdGlvbiwgKGxldHRlciwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGxldHRlciBpbiBtYXNrQ2hhckRlZmluaXRpb25zID8gbnVsbCA6IFtpbmRleCwgbGV0dGVyXSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGlzQ2hhckFsbG93ZWQgPSAobWFza0NoYXJEZWZpbml0aW9ucykgPT4ge1xuICAgICAgICByZXR1cm4gKG1hc2tEZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHBvc2l0aW9uLCBuZXdDaGFyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID49IG1hc2tEZWZpbml0aW9uLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBtYXNrQ2hhciA9IG1hc2tEZWZpbml0aW9uLmNoYXJBdChwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKG1hc2tDaGFyIGluIG1hc2tDaGFyRGVmaW5pdGlvbnMpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFza0NoYXJEZWZpbml0aW9uc1ttYXNrQ2hhcl0udGVzdChuZXdDaGFyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG5ld0NoYXIgPT09IG1hc2tDaGFyIHx8IGlzQ2hhckFsbG93ZWQobWFza0NoYXJEZWZpbml0aW9ucykobWFza0RlZmluaXRpb24pKHBvc2l0aW9uICsgMSwgbmV3Q2hhcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfSxcbiAgICAvL1xuICAgIGFwcGx5TWFzayA9IChtYXNrRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICBjb25zdCBtYXNrRnVuY3Rpb25zID0gXy5tYXAobWFza0RlZmluaXRpb24sIChtYXNrQ2hhcikgPT4gYWRkQ2hhcihtYXNrQ2hhclswXSwgbWFza0NoYXJbMV0pKTtcbiAgICAgICAgcmV0dXJuIChzdHJpbmcsIG5ld0NoYXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkZE5ld0NoYXJGdW5jdGlvbnMgPSBfLm1hcChtYXNrRnVuY3Rpb25zLCAoZWwpID0+IGVsKG5ld0NoYXIpKTtcbiAgICAgICAgICAgIGNvbnN0IGFwcGx5TWFza0Z1bmN0aW9ucyA9IF8ucmVkdWNlKGFkZE5ld0NoYXJGdW5jdGlvbnMsIChtZW1vLCBmKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChfLmlzRnVuY3Rpb24obWVtbykgPyBfLmNvbXBvc2UoZiwgbWVtbykgOiBmKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5TWFza0Z1bmN0aW9ucyhzdHJpbmcpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvL0FkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZGlvZ29iL2pxdWVyeS5maXhlZG1hc2tcbiAgICBtYXNrID0gKG1hc2tEZWZpbml0aW9uLCB2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBtYXNrQ2hhckRlZmluaXRpb25zID0ge1xuICAgICAgICAgICAgICAgICc5JyA6IC9cXGQvLFxuICAgICAgICAgICAgICAgICdBJyA6IC9bYS16QS1aXS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkTWFzayA9IHJlYWRNYXNrRGVmaW5pdGlvbihtYXNrQ2hhckRlZmluaXRpb25zKSxcbiAgICAgICAgICAgIGlzU3RyQ2hhckFsbG93ZWQgPSBpc0NoYXJBbGxvd2VkKG1hc2tDaGFyRGVmaW5pdGlvbnMpLFxuICAgICAgICAgICAgYXBwbHlWYWx1ZU1hc2sgPSBhcHBseU1hc2socmVhZE1hc2sobWFza0RlZmluaXRpb24pKSxcbiAgICAgICAgICAgIHJlc3RyaWN0SW5wdXQgPSBpc1N0ckNoYXJBbGxvd2VkKG1hc2tEZWZpbml0aW9uKTtcblxuICAgICAgICByZXR1cm4gXy5yZWR1Y2UodmFsdWUsIChtZW1vLCBjaHIpID0+IHtcbiAgICAgICAgICAgIGlmKHJlc3RyaWN0SW5wdXQobWVtby5sZW5ndGgsIGNocikpe1xuICAgICAgICAgICAgICAgIG1lbW8gPSBhcHBseVZhbHVlTWFzayhtZW1vLCBjaHIpICsgY2hyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sICcnKTtcbiAgICB9LFxuXG4gICAgICByZW1vdmVTdG9yZWRPYmplY3QgPSAoc2Vzc2lvbktleSkgPT4ge1xuICAgICAgICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKHNlc3Npb25LZXkpO1xuICAgICAgfSxcblxuICAgICAgY3VycmVudFByb2plY3QgPSBtLnByb3AoKSxcbiAgICAgICAgc2V0UHJvamVjdCA9IChwcm9qZWN0KSA9PiB7XG4gICAgICAgICAgICBjdXJyZW50UHJvamVjdChwcm9qZWN0KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UHJvamVjdCA9ICgpID0+IGN1cnJlbnRQcm9qZWN0LFxuICAgICAgICBjdXJyZW50UmV3YXJkID0gbS5wcm9wKCksXG4gICAgICAgIHNldFJld2FyZCA9IChyZXdhcmQpID0+IHtcbiAgICAgICAgICAgIGN1cnJlbnRSZXdhcmQocmV3YXJkKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UmV3YXJkID0gKCkgPT4gY3VycmVudFJld2FyZCxcbiAgICAgICAgYnVpbGRMaW5rID0gKGxpbmssIHJlZlN0cikgPT4gIGAvJHtsaW5rfSR7cmVmU3RyID8gJz9yZWY9JyArIHJlZlN0ciA6ICcnfWAsXG4gICAgICAgIGFuYWx5dGljc1dpbmRvd1Njcm9sbCA9IChldmVudE9iaikgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50T2JqKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCd3aW5kb3dTY3JvbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJlZCAmJiB3aW5kb3cuJCAmJiAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSA+ICQod2luZG93KS5oZWlnaHQoKSAqICgzIC8gNCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcmVFdmVudCA9IGFuYWx5dGljc0V2ZW50KGV2ZW50T2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgYW5hbHl0aWNzID0ge1xuICAgICAgICBldmVudDogYW5hbHl0aWNzRXZlbnQsXG4gICAgICAgIG9uZVRpbWVFdmVudDogYW5hbHl0aWNzT25lVGltZUV2ZW50LFxuICAgICAgICB3aW5kb3dTY3JvbGw6IGFuYWx5dGljc1dpbmRvd1Njcm9sbFxuICAgIH0sXG4gICAgcHJvamVjdEZ1bGxQZXJtYWxpbmsgPSAocHJvamVjdCkgPT4ge1xuICAgICAgICBsZXQgcGVybWFsaW5rO1xuICAgICAgICBpZiAodHlwZW9mIHByb2plY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHBlcm1hbGluayA9IHByb2plY3QoKS5wZXJtYWxpbms7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZXJtYWxpbmsgPSBwcm9qZWN0LnBlcm1hbGluaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS8ke3Blcm1hbGlua31gO1xuICAgIH0sXG4gICAgaXNQcm9qZWN0UGFnZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICAgICAgaXNPbkluc2lnaHRzID0gcGF0aC5pbmRleE9mKCcvaW5zaWdodHMnKSA+IC0xLFxuICAgICAgICAgICAgICBpc09uRWRpdCA9IHBhdGguaW5kZXhPZignL2VkaXQnKSA+IC0xLFxuICAgICAgICAgICAgICBpc09uQ29udHJpYnV0aW9uID0gcGF0aC5pbmRleE9mKCcvY29udHJpYnV0aW9uJykgPiAtMTtcblxuICAgICAgICByZXR1cm4gIWlzT25FZGl0ICYmICFpc09uSW5zaWdodHMgJiYgIWlzT25Db250cmlidXRpb247XG4gICAgIH07XG5cbnNldE1vbWVudGlmeUxvY2FsZSgpO1xuY2xvc2VGbGFzaCgpO1xuY2xvc2VNb2RhbCgpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgYXV0aGVudGljaXR5VG9rZW4sXG4gICAgYnVpbGRMaW5rLFxuICAgIGN1bXVsYXRpdmVPZmZzZXQsXG4gICAgZGlzY3VzcyxcbiAgICBleGlzdHksXG4gICAgdmFsaWRhdGVFbWFpbCxcbiAgICB2YWxpZGF0ZUNwZixcbiAgICBtb21lbnRpZnksXG4gICAgbW9tZW50RnJvbVN0cmluZyxcbiAgICBmb3JtYXROdW1iZXIsXG4gICAgaWRWTSxcbiAgICBnZXRVc2VyLFxuICAgIGdldEFwaUhvc3QsXG4gICAgZ2V0Q3VycmVudFByb2plY3QsXG4gICAgdG9nZ2xlUHJvcCxcbiAgICBsb2FkZXIsXG4gICAgbmV3RmVhdHVyZUJhZGdlLFxuICAgIGZiUGFyc2UsXG4gICAgcGx1cmFsaXplLFxuICAgIHNpbXBsZUZvcm1hdCxcbiAgICB0cmFuc2xhdGVkVGltZSxcbiAgICByZXdhcmRTb3VsZE91dCxcbiAgICByZXdhcmRSZW1hbmluZyxcbiAgICBwYXJzZVVybCxcbiAgICBoYXNoTWF0Y2gsXG4gICAgcmVkcmF3SGFzaENoYW5nZSxcbiAgICB1c2VBdmF0YXJPckRlZmF1bHQsXG4gICAgbG9jYXRpb25BY3Rpb25NYXRjaCxcbiAgICBuYXZpZ2F0ZVRvRGV2aXNlLFxuICAgIG5hdmlnYXRlVG8sXG4gICAgc3RvcmVBY3Rpb24sXG4gICAgY2FsbFN0b3JlZEFjdGlvbixcbiAgICBVSUhlbHBlcixcbiAgICB0b0FuY2hvcixcbiAgICBwYXJhbUJ5TmFtZSxcbiAgICBpMThuU2NvcGUsXG4gICAgUkRUcmFja2VyLFxuICAgIHNlbGZPckVtcHR5LFxuICAgIHNjcm9sbFRvLFxuICAgIHByb2plY3RTdGF0ZVRleHRDbGFzcyxcbiAgICB2YWxpZGF0aW9uRXJyb3JzLFxuICAgIHZhbGlkYXRlLFxuICAgIGFuYWx5dGljcyxcbiAgICBzdHJpcCxcbiAgICBzdG9yZU9iamVjdCxcbiAgICBnZXRTdG9yZWRPYmplY3QsXG4gICAgcmVtb3ZlU3RvcmVkT2JqZWN0LFxuICAgIHNldFByb2plY3QsXG4gICAgZ2V0UHJvamVjdCxcbiAgICBzZXRSZXdhcmQsXG4gICAgZ2V0UmV3YXJkLFxuICAgIGFwcGx5TW9uZXRhcnlNYXNrLFxuICAgIG1vbmV0YXJ5VG9GbG9hdCxcbiAgICBtYXNrLFxuICAgIHByb2plY3RGdWxsUGVybWFsaW5rLFxuICAgIGlzUHJvamVjdFBhZ2Vcbn07XG5cbiIsImltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuXG5jb25zdCBtb2RlbHMgPSB7XG4gICAgY291bnRyeTogcG9zdGdyZXN0Lm1vZGVsKCdjb3VudHJpZXMnKSxcbiAgICBzdGF0ZTogcG9zdGdyZXN0Lm1vZGVsKCdzdGF0ZXMnKSxcbiAgICBjb250cmlidXRpb25EZXRhaWw6IHBvc3RncmVzdC5tb2RlbCgnY29udHJpYnV0aW9uX2RldGFpbHMnKSxcbiAgICBjb250cmlidXRpb25BY3Rpdml0eTogcG9zdGdyZXN0Lm1vZGVsKCdjb250cmlidXRpb25fYWN0aXZpdGllcycpLFxuICAgIHByb2plY3REZXRhaWw6IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF9kZXRhaWxzJyksXG4gICAgdXNlckRldGFpbDogcG9zdGdyZXN0Lm1vZGVsKCd1c2VyX2RldGFpbHMnKSxcbiAgICBiYWxhbmNlOiBwb3N0Z3Jlc3QubW9kZWwoJ2JhbGFuY2VzJyksXG4gICAgYmFsYW5jZVRyYW5zYWN0aW9uOiBwb3N0Z3Jlc3QubW9kZWwoJ2JhbGFuY2VfdHJhbnNhY3Rpb25zJyksXG4gICAgYmFsYW5jZVRyYW5zZmVyOiBwb3N0Z3Jlc3QubW9kZWwoJ2JhbGFuY2VfdHJhbnNmZXJzJyksXG4gICAgdXNlcjogcG9zdGdyZXN0Lm1vZGVsKCd1c2VycycpLFxuICAgIGJhbmtBY2NvdW50OiBwb3N0Z3Jlc3QubW9kZWwoJ2JhbmtfYWNjb3VudHMnKSxcbiAgICByZXdhcmREZXRhaWw6IHBvc3RncmVzdC5tb2RlbCgncmV3YXJkX2RldGFpbHMnKSxcbiAgICBwcm9qZWN0UmVtaW5kZXI6IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF9yZW1pbmRlcnMnKSxcbiAgICBwcm9qZWN0UmVwb3J0OiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RfcmVwb3J0cycpLFxuICAgIGNvbnRyaWJ1dGlvbnM6IHBvc3RncmVzdC5tb2RlbCgnY29udHJpYnV0aW9ucycpLFxuICAgIGRpcmVjdE1lc3NhZ2U6IHBvc3RncmVzdC5tb2RlbCgnZGlyZWN0X21lc3NhZ2VzJyksXG4gICAgdGVhbVRvdGFsOiBwb3N0Z3Jlc3QubW9kZWwoJ3RlYW1fdG90YWxzJyksXG4gICAgcHJvamVjdEFjY291bnQ6IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF9hY2NvdW50cycpLFxuICAgIHByb2plY3RBY2NvdW50RXJyb3I6IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF9hY2NvdW50X2Vycm9ycycpLFxuICAgIHByb2plY3RDb250cmlidXRpb246IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF9jb250cmlidXRpb25zJyksXG4gICAgcHJvamVjdENvbnRyaWJ1dGlvcnNTdGF0OiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3Rfc3RhdF9jb250cmlidXRvcnMnKSxcbiAgICBwcm9qZWN0UG9zdERldGFpbDogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X3Bvc3RzX2RldGFpbHMnKSxcbiAgICBwcm9qZWN0Q29udHJpYnV0aW9uc1BlckRheTogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X2NvbnRyaWJ1dGlvbnNfcGVyX2RheScpLFxuICAgIHByb2plY3RDb250cmlidXRpb25zUGVyTG9jYXRpb246IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF9jb250cmlidXRpb25zX3Blcl9sb2NhdGlvbicpLFxuICAgIHByb2plY3RDb250cmlidXRpb25zUGVyUmVmOiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RfY29udHJpYnV0aW9uc19wZXJfcmVmJyksXG4gICAgcHJvamVjdFRyYW5zZmVyOiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RfdHJhbnNmZXJzJyksXG4gICAgcHJvamVjdDogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0cycpLFxuICAgIHByb2plY3RTZWFyY2g6IHBvc3RncmVzdC5tb2RlbCgncnBjL3Byb2plY3Rfc2VhcmNoJyksXG4gICAgY2F0ZWdvcnk6IHBvc3RncmVzdC5tb2RlbCgnY2F0ZWdvcmllcycpLFxuICAgIGNhdGVnb3J5VG90YWxzOiBwb3N0Z3Jlc3QubW9kZWwoJ2NhdGVnb3J5X3RvdGFscycpLFxuICAgIGNhdGVnb3J5Rm9sbG93ZXI6IHBvc3RncmVzdC5tb2RlbCgnY2F0ZWdvcnlfZm9sbG93ZXJzJyksXG4gICAgdGVhbU1lbWJlcjogcG9zdGdyZXN0Lm1vZGVsKCd0ZWFtX21lbWJlcnMnKSxcbiAgICBub3RpZmljYXRpb246IHBvc3RncmVzdC5tb2RlbCgnbm90aWZpY2F0aW9ucycpLFxuICAgIHN0YXRpc3RpYzogcG9zdGdyZXN0Lm1vZGVsKCdzdGF0aXN0aWNzJyksXG4gICAgc3VjY2Vzc2Z1bFByb2plY3Q6IHBvc3RncmVzdC5tb2RlbCgnc3VjY2Vzc2Z1bF9wcm9qZWN0cycpLFxuICAgIGZpbmlzaGVkUHJvamVjdDogcG9zdGdyZXN0Lm1vZGVsKCdmaW5pc2hlZF9wcm9qZWN0cycpLFxuICAgIHVzZXJGcmllbmQ6IHBvc3RncmVzdC5tb2RlbCgndXNlcl9mcmllbmRzJyksXG4gICAgdXNlckZvbGxvdzogcG9zdGdyZXN0Lm1vZGVsKCd1c2VyX2ZvbGxvd3MnKSxcbiAgICBmb2xsb3dBbGxGcmllbmRzOiBwb3N0Z3Jlc3QubW9kZWwoJ3JwYy9mb2xsb3dfYWxsX2ZyaWVuZHMnKSxcbiAgICBjb250cmlidXRvcjogcG9zdGdyZXN0Lm1vZGVsKCdjb250cmlidXRvcnMnKSxcbiAgICB1c2VyRm9sbG93ZXI6IHBvc3RncmVzdC5tb2RlbCgndXNlcl9mb2xsb3dlcnMnKSxcbiAgICBjcmVhdG9yU3VnZ2VzdGlvbjogcG9zdGdyZXN0Lm1vZGVsKCdjcmVhdG9yX3N1Z2dlc3Rpb25zJyksXG4gICAgdXNlckNvbnRyaWJ1dGlvbjogcG9zdGdyZXN0Lm1vZGVsKCd1c2VyX2NvbnRyaWJ1dGlvbnMnKVxufTtcblxubW9kZWxzLnRlYW1NZW1iZXIucGFnZVNpemUoNDApO1xubW9kZWxzLnJld2FyZERldGFpbC5wYWdlU2l6ZShmYWxzZSk7XG5tb2RlbHMucHJvamVjdC5wYWdlU2l6ZSgzMCk7XG5tb2RlbHMuY2F0ZWdvcnkucGFnZVNpemUoNTApO1xubW9kZWxzLmNvbnRyaWJ1dGlvbkFjdGl2aXR5LnBhZ2VTaXplKDQwKTtcbm1vZGVscy5zdWNjZXNzZnVsUHJvamVjdC5wYWdlU2l6ZSg5KTtcbm1vZGVscy5maW5pc2hlZFByb2plY3QucGFnZVNpemUoOSk7XG5tb2RlbHMuY291bnRyeS5wYWdlU2l6ZShmYWxzZSk7XG5tb2RlbHMuc3RhdGUucGFnZVNpemUoZmFsc2UpO1xubW9kZWxzLnByb2plY3RDb250cmlidXRpb24ucGFnZVNpemUoOSk7XG5tb2RlbHMuY29udHJpYnV0b3IucGFnZVNpemUoOSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vZGVscztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy51c2VyLCAnaWQuZGVzYycsIHsnUHJlZmVyJzogJ2NvdW50PWV4YWN0J30pO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcmVwbGFjZURpYWNyaXRpY3MgZnJvbSAncmVwbGFjZURpYWNyaXRpY3MnO1xuXG5jb25zdCB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICBmdWxsX3RleHRfaW5kZXg6ICdAQCcsXG4gICAgICAgIGRlYWN0aXZhdGVkX2F0OiAnaXMubnVsbCdcbiAgICB9KSxcblxuICAgIHBhcmFtVG9TdHJpbmcgPSBmdW5jdGlvbihwKSB7XG4gICAgICAgIHJldHVybiAocCB8fCAnJykudG9TdHJpbmcoKS50cmltKCk7XG4gICAgfTtcblxuLy8gU2V0IGRlZmF1bHQgdmFsdWVzXG52bS5kZWFjdGl2YXRlZF9hdChudWxsKS5vcmRlcih7XG4gICAgaWQ6ICdkZXNjJ1xufSk7XG5cbnZtLmRlYWN0aXZhdGVkX2F0LnRvRmlsdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZpbHRlciA9IEpTT04ucGFyc2Uodm0uZGVhY3RpdmF0ZWRfYXQoKSk7XG4gICAgcmV0dXJuIGZpbHRlcjtcbn07XG5cbnZtLmZ1bGxfdGV4dF9pbmRleC50b0ZpbHRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmaWx0ZXIgPSBwYXJhbVRvU3RyaW5nKHZtLmZ1bGxfdGV4dF9pbmRleCgpKTtcbiAgICByZXR1cm4gZmlsdGVyICYmIHJlcGxhY2VEaWFjcml0aWNzKGZpbHRlcikgfHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdm07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuY29uc3QgZmlsdGVyTWFpbiA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgaW5wdXRXcmFwcGVyQ2xhc3MgPSBhcmdzLmlucHV0V3JhcHBlckNsYXNzIHx8ICcudy1pbnB1dC50ZXh0LWZpZWxkLnBvc2l0aXZlLm1lZGl1bScsXG4gICAgICAgICAgICAgIGJ0bkNsYXNzID0gYXJncy5idG5DbGFzcyB8fCAnLmJ0bi5idG4tbGFyZ2UudS1tYXJnaW5ib3R0b20tMTAnO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTAnLCBbXG4gICAgICAgICAgICAgICAgbShgaW5wdXQke2lucHV0V3JhcHBlckNsYXNzfVtwbGFjZWhvbGRlcj1cIiR7YXJncy5wbGFjZWhvbGRlcn1cIl1bdHlwZT1cInRleHRcIl1gLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGFyZ3Mudm0pLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXJncy52bSgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInLCBbXG4gICAgICAgICAgICAgICAgbShgaW5wdXQjZmlsdGVyLWJ0biR7YnRuQ2xhc3N9W3R5cGU9XCJzdWJtaXRcIl1bdmFsdWU9XCJCdXNjYXJcIl1gKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZmlsdGVyTWFpbjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBmaWx0ZXJNYWluIGZyb20gJy4vZmlsdGVyLW1haW4nO1xuXG5jb25zdCBhZG1pbkZpbHRlciA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9nZ2xlcjogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlckJ1aWxkZXIgPSBhcmdzLmZpbHRlckJ1aWxkZXIsXG4gICAgICAgICAgICBkYXRhID0gYXJncy5kYXRhLFxuICAgICAgICAgICAgbGFiZWwgPSBhcmdzLmxhYmVsIHx8ICcnLFxuICAgICAgICAgICAgbWFpbiA9IF8uZmluZFdoZXJlKGZpbHRlckJ1aWxkZXIsIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlck1haW5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBtKCcjYWRtaW4tY29udHJpYnV0aW9ucy1maWx0ZXIudy1zZWN0aW9uLnBhZ2UtaGVhZGVyJywgW1xuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0zMCcsIGxhYmVsKSxcbiAgICAgICAgICAgICAgICBtKCcudy1mb3JtJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdmb3JtJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGFyZ3Muc3VibWl0XG4gICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW4gPyBtLmNvbXBvbmVudChtYWluLmNvbXBvbmVudCwgbWFpbi5kYXRhKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtbWFyZ2luYm90dG9tLTIwLnctcm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdidXR0b24udy1jb2wudy1jb2wtMTIuZm9udHNpemUtc21hbGxlc3QubGluay1oaWRkZW4tbGlnaHRbc3R5bGU9XCJiYWNrZ3JvdW5kOiBub25lOyBib3JkZXI6IG5vbmU7IG91dGxpbmU6IG5vbmU7IHRleHQtYWxpZ246IGxlZnQ7XCJdW3R5cGU9XCJidXR0b25cIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlci50b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnRmlsdHJvcyBhdmFuw6dhZG9zIMKgPicpKSwgKGN0cmwudG9nZ2xlcigpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcjYWR2YW5jZWQtc2VhcmNoLnctcm93LmFkbWluLWZpbHRlcnMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGZpbHRlckJ1aWxkZXIsIGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZi5jb21wb25lbnQgIT09IGZpbHRlck1haW4pID8gbS5jb21wb25lbnQoZi5jb21wb25lbnQsIGYuZGF0YSkgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluRmlsdGVyO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pbkl0ZW0gPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwbGF5RGV0YWlsQm94OiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGFyZ3MuaXRlbTtcblxuICAgICAgICByZXR1cm4gbSgnLnctY2xlYXJmaXguY2FyZC51LXJhZGl1cy51LW1hcmdpbmJvdHRvbS0yMC5yZXN1bHRzLWFkbWluLWl0ZW1zJywgW1xuICAgICAgICAgICAgbS5jb21wb25lbnQoYXJncy5saXN0SXRlbSwge1xuICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICAgICAgICAgICAga2V5OiBhcmdzLmtleVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtKCdidXR0b24udy1pbmxpbmUtYmxvY2suYXJyb3ctYWRtaW4uZmEuZmEtY2hldnJvbi1kb3duLmZvbnRjb2xvci1zZWNvbmRhcnknLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogY3RybC5kaXNwbGF5RGV0YWlsQm94LnRvZ2dsZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjdHJsLmRpc3BsYXlEZXRhaWxCb3goKSA/IG0uY29tcG9uZW50KGFyZ3MubGlzdERldGFpbCwge1xuICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICAgICAgICAgICAga2V5OiBhcmdzLmtleVxuICAgICAgICAgICAgfSkgOiAnJ1xuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pbkl0ZW07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IGFkbWluSXRlbSBmcm9tICcuL2FkbWluLWl0ZW0nO1xuXG5jb25zdCBhZG1pbkxpc3QgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBhcmdzLnZtLmxpc3Q7XG5cbiAgICAgICAgaWYgKCFsaXN0LmNvbGxlY3Rpb24oKS5sZW5ndGggJiYgbGlzdC5maXJzdFBhZ2UpIHtcbiAgICAgICAgICAgIGxpc3QuZmlyc3RQYWdlKCkudGhlbihudWxsLCBmdW5jdGlvbihzZXJ2ZXJFcnJvcikge1xuICAgICAgICAgICAgICAgIGFyZ3Mudm0uZXJyb3Ioc2VydmVyRXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBhcmdzLnZtLmxpc3QsXG4gICAgICAgICAgICBlcnJvciA9IGFyZ3Mudm0uZXJyb3IsXG4gICAgICAgICAgICBsYWJlbCA9IGFyZ3MubGFiZWwgfHwgJyc7XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgZXJyb3IoKSA/XG4gICAgICAgICAgICAgICAgbSgnLmNhcmQuY2FyZC1lcnJvci51LXJhZGl1cy5mb250d2VpZ2h0LWJvbGQnLCBlcnJvcigpKSA6IFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmlzTG9hZGluZygpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYENhcnJlZ2FuZG8gJHtsYWJlbC50b0xvd2VyQ2FzZSgpfS4uLmAgOiBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgbGlzdC50b3RhbCgpKSwgYCAke2xhYmVsLnRvTG93ZXJDYXNlKCl9IGVuY29udHJhZG9zYF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnI2FkbWluLWNvbnRyaWJ1dGlvbnMtbGlzdC53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuY29sbGVjdGlvbigpLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChhZG1pbkl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEl0ZW06IGFyZ3MubGlzdEl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3REZXRhaWw6IGFyZ3MubGlzdERldGFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpdGVtLmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXB1c2gtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmlzTG9hZGluZygpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmxvYWRlcigpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdidXR0b24jbG9hZC1tb3JlLmJ0bi5idG4tbWVkaXVtLmJ0bi10ZXJjaWFyeScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogbGlzdC5uZXh0UGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdDYXJyZWdhciBtYWlzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIClcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5MaXN0O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgYWRtaW5Vc2VyID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCB1c2VyID0gYXJncy5pdGVtO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1yb3cuYWRtaW4tdXNlcicsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudS1tYXJnaW5ib3R0b20tMTAnLCBbXG4gICAgICAgICAgICAgICAgbSgnaW1nLnVzZXItYXZhdGFyW3NyYz1cIicgKyBoLnVzZUF2YXRhck9yRGVmYXVsdCh1c2VyLnByb2ZpbGVfaW1nX3RodW1ibmFpbCkgKyAnXCJdJylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTkudy1jb2wtc21hbGwtOScsIFtcbiAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1zbWFsbGVyLmxpbmVoZWlnaHQtdGlnaHRlci51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1t0YXJnZXQ9XCJfYmxhbmtcIl1baHJlZj1cIi91c2Vycy8nICsgdXNlci5pZCArICcvZWRpdFwiXScsIHVzZXIubmFtZSB8fCB1c2VyLmVtYWlsKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdCcsICdVc3XDoXJpbzogJyArIHVzZXIuaWQpLFxuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJ0VtYWlsOiAnICsgdXNlci5lbWFpbCksXG4gICAgICAgICAgICAgICAgYXJncy5hZGRpdGlvbmFsX2RhdGFcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluVXNlcjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgYWRtaW5Vc2VyIGZyb20gJy4vYWRtaW4tdXNlcic7XG5cbmNvbnN0IGFkbWluVXNlckl0ZW0gPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKFxuICAgICAgICAgICAgJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5Vc2VyLCBhcmdzKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Vc2VySXRlbTtcbiIsIi8qKlxuICogd2luZG93LmMuQWRtaW5SZXNldFBhc3N3b3JkIGNvbXBvbmVudFxuICogTWFrZXMgYWpheCByZXF1ZXN0IHRvIHVwZGF0ZSBVc2VyIHBhc3N3b3JkLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLkFkbWluUmVzZXRQYXNzd29yZCwge1xuICogICAgIGRhdGE6IHt9LFxuICogICAgIGl0ZW06IHJvd0Zyb21EYXRhYmFzZVxuICogfSlcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pblJlc2V0UGFzc3dvcmQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBidWlsZGVyID0gYXJncy5kYXRhLFxuICAgICAgICAgICAgY29tcGxldGUgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZXJyb3IgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZmFpbCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBrZXkgPSBidWlsZGVyLnByb3BlcnR5LFxuICAgICAgICAgICAgZGF0YSA9IHt9LFxuICAgICAgICAgICAgaXRlbSA9IGFyZ3MuaXRlbTtcblxuICAgICAgICBidWlsZGVyLnJlcXVlc3RPcHRpb25zLmNvbmZpZyA9ICh4aHIpID0+IHtcbiAgICAgICAgICAgIGlmIChoLmF1dGhlbnRpY2l0eVRva2VuKCkpIHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1DU1JGLVRva2VuJywgaC5hdXRoZW50aWNpdHlUb2tlbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBsID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIGxvYWQgPSAoKSA9PiBtLnJlcXVlc3QoXy5leHRlbmQoe30sIHtkYXRhOiBkYXRhfSwgYnVpbGRlci5yZXF1ZXN0T3B0aW9ucykpLFxuICAgICAgICAgICAgbmV3UGFzc3dvcmQgPSBtLnByb3AoJycpLFxuICAgICAgICAgICAgZXJyb3JfbWVzc2FnZSA9IG0ucHJvcCgnJyk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEVycm9yID0gKGVycikgPT4ge1xuICAgICAgICAgICAgbChmYWxzZSk7XG4gICAgICAgICAgICBlcnJvcl9tZXNzYWdlKGVyci5lcnJvcnNbMF0pO1xuICAgICAgICAgICAgY29tcGxldGUodHJ1ZSk7XG4gICAgICAgICAgICBlcnJvcih0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdXBkYXRlSXRlbSA9IChyZXMpID0+IHtcbiAgICAgICAgICAgIGwoZmFsc2UpO1xuICAgICAgICAgICAgXy5leHRlbmQoaXRlbSwgcmVzWzBdKTtcbiAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHN1Ym1pdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGwodHJ1ZSk7XG4gICAgICAgICAgICBkYXRhW2tleV0gPSBuZXdQYXNzd29yZCgpO1xuICAgICAgICAgICAgbG9hZCgpLnRoZW4odXBkYXRlSXRlbSwgcmVxdWVzdEVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB1bmxvYWQgPSAoZWwsIGlzaW5pdCwgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgY29udGV4dC5vbnVubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBlcnJvcihmYWxzZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICBlcnJvcl9tZXNzYWdlOiBlcnJvcl9tZXNzYWdlLFxuICAgICAgICAgICAgbDogbCxcbiAgICAgICAgICAgIG5ld1Bhc3N3b3JkOiBuZXdQYXNzd29yZCxcbiAgICAgICAgICAgIHN1Ym1pdDogc3VibWl0LFxuICAgICAgICAgICAgdG9nZ2xlcjogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKSxcbiAgICAgICAgICAgIHVubG9hZDogdW5sb2FkXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3MuZGF0YSxcbiAgICAgICAgICAgIGJ0blZhbHVlID0gKGN0cmwubCgpKSA/ICdwb3IgZmF2b3IsIGFndWFyZGUuLi4nIDogZGF0YS5jYWxsVG9BY3Rpb247XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC0yJywgW1xuICAgICAgICAgICAgbSgnYnV0dG9uLmJ0bi5idG4tc21hbGwuYnRuLXRlcmNpYXJ5Jywge1xuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlci50b2dnbGVcbiAgICAgICAgICAgIH0sIGRhdGEub3V0ZXJMYWJlbCksIChjdHJsLnRvZ2dsZXIoKSkgP1xuICAgICAgICAgICAgbSgnLmRyb3Bkb3duLWxpc3QuY2FyZC51LXJhZGl1cy5kcm9wZG93bi1saXN0LW1lZGl1bS56aW5kZXgtMTAnLCB7XG4gICAgICAgICAgICAgICAgY29uZmlnOiBjdHJsLnVubG9hZFxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIG0oJ2Zvcm0udy1mb3JtJywge1xuICAgICAgICAgICAgICAgICAgICBvbnN1Ym1pdDogY3RybC5zdWJtaXRcbiAgICAgICAgICAgICAgICB9LCAoIWN0cmwuY29tcGxldGUoKSkgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsJywgZGF0YS5pbm5lckxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW3R5cGU9XCJ0ZXh0XCJdW25hbWU9XCInICsgZGF0YS5wcm9wZXJ0eSArICdcIl1bcGxhY2Vob2xkZXI9XCInICsgZGF0YS5wbGFjZWhvbGRlciArICdcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLm5ld1Bhc3N3b3JkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLm5ld1Bhc3N3b3JkKClcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctYnV0dG9uLmJ0bi5idG4tc21hbGxbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIicgKyBidG5WYWx1ZSArICdcIl0nKVxuICAgICAgICAgICAgICAgIF0gOiAoIWN0cmwuZXJyb3IoKSkgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZG9uZVtzdHlsZT1cImRpc3BsYXk6YmxvY2s7XCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsICdTZW5oYSBhbHRlcmFkYSBjb20gc3VjZXNzby4nKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZXJyb3Jbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AnLCBjdHJsLmVycm9yX21lc3NhZ2UoKSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSkgOiAnJ1xuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pblJlc2V0UGFzc3dvcmQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pbklucHV0QWN0aW9uID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBidWlsZGVyID0gYXJncy5kYXRhLFxuICAgICAgICAgICAgY29tcGxldGUgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZXJyb3IgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZmFpbCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBkYXRhID0ge30sXG4gICAgICAgICAgICBpdGVtID0gYXJncy5pdGVtLFxuICAgICAgICAgICAga2V5ID0gYnVpbGRlci5wcm9wZXJ0eSxcbiAgICAgICAgICAgIGZvcmNlVmFsdWUgPSBidWlsZGVyLmZvcmNlVmFsdWUgfHwgbnVsbCxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gbS5wcm9wKGZvcmNlVmFsdWUpO1xuXG4gICAgICAgIGguaWRWTS5pZChpdGVtW2J1aWxkZXIudXBkYXRlS2V5XSk7XG5cbiAgICAgICAgY29uc3QgbCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4oYnVpbGRlci5tb2RlbC5wYXRjaE9wdGlvbnMoaC5pZFZNLnBhcmFtZXRlcnMoKSwgZGF0YSkpO1xuXG4gICAgICAgIGNvbnN0IHVwZGF0ZUl0ZW0gPSBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgIF8uZXh0ZW5kKGl0ZW0sIHJlc1swXSk7XG4gICAgICAgICAgICBjb21wbGV0ZSh0cnVlKTtcbiAgICAgICAgICAgIGVycm9yKGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzdWJtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IG5ld1ZhbHVlKCk7XG4gICAgICAgICAgICBsLmxvYWQoKS50aGVuKHVwZGF0ZUl0ZW0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgICAgIGVycm9yKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdW5sb2FkID0gZnVuY3Rpb24oZWwsIGlzaW5pdCwgY29udGV4dCkge1xuICAgICAgICAgICAgY29udGV4dC5vbnVubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBlcnJvcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUoZm9yY2VWYWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICBsOiBsLFxuICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgc3VibWl0OiBzdWJtaXQsXG4gICAgICAgICAgICB0b2dnbGVyOiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpLFxuICAgICAgICAgICAgdW5sb2FkOiB1bmxvYWRcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBkYXRhID0gYXJncy5kYXRhLFxuICAgICAgICAgICAgYnRuVmFsdWUgPSAoY3RybC5sKCkpID8gJ3BvciBmYXZvciwgYWd1YXJkZS4uLicgOiBkYXRhLmNhbGxUb0FjdGlvbjtcblxuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTInLCBbXG4gICAgICAgICAgICBtKCdidXR0b24uYnRuLmJ0bi1zbWFsbC5idG4tdGVyY2lhcnknLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogY3RybC50b2dnbGVyLnRvZ2dsZVxuICAgICAgICAgICAgfSwgZGF0YS5vdXRlckxhYmVsKSwgKGN0cmwudG9nZ2xlcigpKSA/XG4gICAgICAgICAgICBtKCcuZHJvcGRvd24tbGlzdC5jYXJkLnUtcmFkaXVzLmRyb3Bkb3duLWxpc3QtbWVkaXVtLnppbmRleC0xMCcsIHtcbiAgICAgICAgICAgICAgICBjb25maWc6IGN0cmwudW5sb2FkXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgbSgnZm9ybS53LWZvcm0nLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uc3VibWl0OiBjdHJsLnN1Ym1pdFxuICAgICAgICAgICAgICAgIH0sICghY3RybC5jb21wbGV0ZSgpKSA/IFtcbiAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwnLCBkYXRhLmlubmVyTGFiZWwpLCAoZGF0YS5mb3JjZVZhbHVlID09PSB1bmRlZmluZWQpID9cbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW3R5cGU9XCJ0ZXh0XCJdW3BsYWNlaG9sZGVyPVwiJyArIGRhdGEucGxhY2Vob2xkZXIgKyAnXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5uZXdWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5uZXdWYWx1ZSgpXG4gICAgICAgICAgICAgICAgICAgIH0pIDogJycsXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctYnV0dG9uLmJ0bi5idG4tc21hbGxbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIicgKyBidG5WYWx1ZSArICdcIl0nKVxuICAgICAgICAgICAgICAgIF0gOiAoIWN0cmwuZXJyb3IoKSkgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZG9uZVtzdHlsZT1cImRpc3BsYXk6YmxvY2s7XCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsIGRhdGEuc3VjY2Vzc01lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSA6IFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybS1lcnJvcltzdHlsZT1cImRpc3BsYXk6YmxvY2s7XCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsICdIb3V2ZSB1bSBwcm9ibGVtYSBuYSByZXF1aXNpw6fDo28uICcgKyBkYXRhLmVycm9yTWVzc2FnZSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSkgOiAnJ1xuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pbklucHV0QWN0aW9uO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5BZG1pbk5vdGlmaWNhdGlvbkhpc3RvcnkgY29tcG9uZW50XG4gKiBSZXR1cm4gbm90aWZpY2F0aW9ucyBsaXN0IGZyb20gYW4gVXNlciBvYmplY3QuXG4gKlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuQWRtaW5Ob3RpZmljYXRpb25IaXN0b3J5LCB7XG4gKiAgICAgdXNlcjogdXNlclxuICogfSlcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5jb25zdCBhZG1pbk5vdGlmaWNhdGlvbkhpc3RvcnkgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbnMgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgZ2V0Tm90aWZpY2F0aW9ucyA9ICh1c2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG5vdGlmaWNhdGlvbiA9IG1vZGVscy5ub3RpZmljYXRpb247XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmdldFBhZ2VXaXRoVG9rZW4ocG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJfaWQ6ICdlcScsXG4gICAgICAgICAgICAgICAgICAgIHNlbnRfYXQ6ICdpcy5udWxsJ1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnVzZXJfaWQodXNlci5pZClcbiAgICAgICAgICAgICAgICAuc2VudF9hdCghbnVsbClcbiAgICAgICAgICAgICAgICAub3JkZXIoe1xuICAgICAgICAgICAgICAgICAgICBzZW50X2F0OiAnZGVzYydcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5wYXJhbWV0ZXJzKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4obm90aWZpY2F0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGdldE5vdGlmaWNhdGlvbnMoYXJncy51c2VyKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbm90aWZpY2F0aW9uczogbm90aWZpY2F0aW9uc1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsKSB7XG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIubGluZWhlaWdodC10aWdodGVyLnUtbWFyZ2luYm90dG9tLTIwJywgJ0hpc3TDs3JpY28gZGUgbm90aWZpY2HDp8O1ZXMnKSxcbiAgICAgICAgICAgIGN0cmwubm90aWZpY2F0aW9ucygpLm1hcCgoY0V2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0oJy53LXJvdy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3Nlci5kYXRlLWV2ZW50JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMjQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeScsIGgubW9tZW50aWZ5KGNFdmVudC5zZW50X2F0LCAnREQvTU0vWVlZWSwgSEg6bW0nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJyAtICcsIGNFdmVudC50ZW1wbGF0ZV9uYW1lLCBjRXZlbnQub3JpZ2luID8gJyAtICcgKyBjRXZlbnQub3JpZ2luIDogJycpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Ob3RpZmljYXRpb25IaXN0b3J5O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5BZG1pblVzZXJEZXRhaWwgY29tcG9uZW50XG4gKiBSZXR1cm4gYWN0aW9uIGlucHV0cyB0byBiZSB1c2VkIGluc2lkZSBBZG1pbkxpc3QgY29tcG9uZW50LlxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLkFkbWluTGlzdCwge1xuICogICAgIGRhdGE6IHt9LFxuICogICAgIGxpc3REZXRhaWw6IGMuQWRtaW5Vc2VyRGV0YWlsXG4gKiB9KVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGFkbWluUmVzZXRQYXNzd29yZCBmcm9tICcuL2FkbWluLXJlc2V0LXBhc3N3b3JkJztcbmltcG9ydCBhZG1pbklucHV0QWN0aW9uIGZyb20gJy4vYWRtaW4taW5wdXQtYWN0aW9uJztcbmltcG9ydCBhZG1pbk5vdGlmaWNhdGlvbkhpc3RvcnkgZnJvbSAnLi9hZG1pbi1ub3RpZmljYXRpb24taGlzdG9yeSc7XG5cbmNvbnN0IGFkbWluVXNlckRldGFpbCA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWN0aW9uczoge1xuICAgICAgICAgICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiAncGFzc3dvcmQnLFxuICAgICAgICAgICAgICAgICAgICBjYWxsVG9BY3Rpb246ICdSZWRlZmluaXInLFxuICAgICAgICAgICAgICAgICAgICBpbm5lckxhYmVsOiAnTm92YSBzZW5oYSBkZSBVc3XDoXJpbzonLFxuICAgICAgICAgICAgICAgICAgICBvdXRlckxhYmVsOiAnUmVkZWZpbmlyIHNlbmhhJyxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdleDogMTIzbXVkQHInLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogbW9kZWxzLnVzZXJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlYWN0aXZhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6ICdkZWFjdGl2YXRlZF9hdCcsXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUtleTogJ2lkJyxcbiAgICAgICAgICAgICAgICAgICAgY2FsbFRvQWN0aW9uOiAnUmVhdGl2YXInLFxuICAgICAgICAgICAgICAgICAgICBpbm5lckxhYmVsOiAnVGVtIGNlcnRlemEgcXVlIGRlc2VqYSByZWF0aXZhciBlc3NlIHVzdcOhcmlvPycsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAnVXN1w6FyaW8gcmVhdGl2YWRvIGNvbSBzdWNlc3NvIScsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ08gdXN1w6FyaW8gbsOjbyBww7RkZSBzZXIgcmVhdGl2YWRvIScsXG4gICAgICAgICAgICAgICAgICAgIG91dGVyTGFiZWw6ICdSZWF0aXZhciB1c3XDoXJpbycsXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlVmFsdWU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBtb2RlbHMudXNlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBhY3Rpb25zID0gY3RybC5hY3Rpb25zLFxuICAgICAgICAgICAgaXRlbSA9IGFyZ3MuaXRlbSxcbiAgICAgICAgICAgIGRldGFpbHMgPSBhcmdzLmRldGFpbHMsXG4gICAgICAgICAgICBhZGRPcHRpb25zID0gKGJ1aWxkZXIsIGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZXh0ZW5kKHt9LCBidWlsZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IChgL3VzZXJzLyR7aWR9L25ld19wYXNzd29yZGApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnI2FkbWluLWNvbnRyaWJ1dGlvbi1kZXRhaWwtYm94JywgW1xuICAgICAgICAgICAgbSgnLmRpdmlkZXIudS1tYXJnaW50b3AtMjAudS1tYXJnaW5ib3R0b20tMjAnKSxcbiAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0zMCcsIFtcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pblJlc2V0UGFzc3dvcmQsIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYWRkT3B0aW9ucyhhY3Rpb25zLnJlc2V0LCBpdGVtLmlkKSxcbiAgICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChpdGVtLmRlYWN0aXZhdGVkX2F0KSA/XG4gICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluSW5wdXRBY3Rpb24sIHtkYXRhOiBhY3Rpb25zLnJlYWN0aXZhdGUsIGl0ZW06IGl0ZW19KSA6ICcnXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy53LXJvdy5jYXJkLmNhcmQtdGVyY2lhcnkudS1yYWRpdXMnLCBbXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5Ob3RpZmljYXRpb25IaXN0b3J5LCB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXI6IGl0ZW1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pblVzZXJEZXRhaWw7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5jb25zdCBkcm9wZG93biA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IG9wdHMgPSAoXy5pc0Z1bmN0aW9uKGFyZ3Mub3B0aW9ucykgPyBhcmdzLm9wdGlvbnMoKSA6IGFyZ3Mub3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIG0oXG4gICAgICAgICAgICBgc2VsZWN0JHthcmdzLmNsYXNzZXN9W2lkPVwiJHthcmdzLmlkfVwiXWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgYXJncy52YWx1ZVByb3ApLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBhcmdzLnZhbHVlUHJvcCgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXy5tYXAob3B0cywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtKCdvcHRpb25bdmFsdWU9XCInICsgZGF0YS52YWx1ZSArICdcIl0nLCBkYXRhLm9wdGlvbik7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRyb3Bkb3duO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgZHJvcGRvd24gZnJvbSAnLi9kcm9wZG93bic7XG5cbmNvbnN0IGZpbHRlckRyb3Bkb3duID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCB3cmFwcGVyX2MgPSBhcmdzLndyYXBwZXJfY2xhc3MgfHwgJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYnO1xuICAgICAgICByZXR1cm4gbSh3cmFwcGVyX2MsIFtcbiAgICAgICAgICAgIG0oJ2xhYmVsLmZvbnRzaXplLXNtYWxsZXJbZm9yPVwiJyArIGFyZ3MuaW5kZXggKyAnXCJdJyxcbiAgICAgICAgICAgICAgKGFyZ3MuY3VzdG9tX2xhYmVsID8gbS5jb21wb25lbnQoYXJncy5jdXN0b21fbGFiZWxbMF0sIGFyZ3MuY3VzdG9tX2xhYmVsWzFdKSA6IGFyZ3MubGFiZWwpKSxcbiAgICAgICAgICAgIG0uY29tcG9uZW50KGRyb3Bkb3duLCB7XG4gICAgICAgICAgICAgICAgaWQ6IGFyZ3MuaW5kZXgsXG4gICAgICAgICAgICAgICAgY2xhc3NlczogJy53LXNlbGVjdC50ZXh0LWZpZWxkLnBvc2l0aXZlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZVByb3A6IGFyZ3Mudm0sXG4gICAgICAgICAgICAgICAgb3B0aW9uczogYXJncy5vcHRpb25zXG4gICAgICAgICAgICB9KVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmaWx0ZXJEcm9wZG93bjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgdXNlckxpc3RWTSBmcm9tICcuLi92bXMvdXNlci1saXN0LXZtJztcbmltcG9ydCB1c2VyRmlsdGVyVk0gZnJvbSAnLi4vdm1zL3VzZXItZmlsdGVyLXZtJztcbmltcG9ydCBhZG1pbkZpbHRlciBmcm9tICcuLi9jL2FkbWluLWZpbHRlcic7XG5pbXBvcnQgYWRtaW5MaXN0IGZyb20gJy4uL2MvYWRtaW4tbGlzdCc7XG5pbXBvcnQgYWRtaW5Vc2VySXRlbSBmcm9tICcuLi9jL2FkbWluLXVzZXItaXRlbSc7XG5pbXBvcnQgYWRtaW5Vc2VyRGV0YWlsIGZyb20gJy4uL2MvYWRtaW4tdXNlci1kZXRhaWwnO1xuaW1wb3J0IGFkbWluVXNlciBmcm9tICcuLi9jL2FkbWluLXVzZXInO1xuaW1wb3J0IGZpbHRlck1haW4gZnJvbSAnLi4vYy9maWx0ZXItbWFpbic7XG5pbXBvcnQgZmlsdGVyRHJvcGRvd24gZnJvbSAnLi4vYy9maWx0ZXItZHJvcGRvd24nO1xuXG5jb25zdCBhZG1pblVzZXJzID0ge1xuICAgIGNvbnRyb2xsZXIoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RWTSA9IHVzZXJMaXN0Vk0sXG4gICAgICAgICAgICBmaWx0ZXJWTSA9IHVzZXJGaWx0ZXJWTSxcbiAgICAgICAgICAgIGVycm9yID0gbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIGl0ZW1CdWlsZGVyID0gW3tcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGFkbWluVXNlcixcbiAgICAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICcudy1jb2wudy1jb2wtNCdcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgZmlsdGVyQnVpbGRlciA9IFt7IC8vbmFtZVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogZmlsdGVyTWFpbixcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIHZtOiBmaWx0ZXJWTS5mdWxsX3RleHRfaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnQnVzcXVlIHBvciBub21lLCBlLW1haWwsIElkcyBkbyB1c3XDoXJpby4uLicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sIHsgLy9zdGF0dXNcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlckRyb3Bkb3duLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdDb20gbyBlc3RhZG8nLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogJ3N0YXR1cycsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkZWFjdGl2YXRlZF9hdCcsXG4gICAgICAgICAgICAgICAgICAgIHZtOiBmaWx0ZXJWTS5kZWFjdGl2YXRlZF9hdCxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1F1YWxxdWVyIHVtJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ2F0aXZvJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIW51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb246ICdkZXNhdGl2YWRvJ1xuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgc3VibWl0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UoZmlsdGVyVk0ucGFyYW1ldGVycygpKS50aGVuKG51bGwsIGZ1bmN0aW9uKHNlcnZlckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yKHNlcnZlckVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbHRlclZNOiBmaWx0ZXJWTSxcbiAgICAgICAgICAgIGZpbHRlckJ1aWxkZXI6IGZpbHRlckJ1aWxkZXIsXG4gICAgICAgICAgICBsaXN0Vk06IHtcbiAgICAgICAgICAgICAgICBsaXN0OiBsaXN0Vk0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VibWl0OiBzdWJtaXRcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCkge1xuICAgICAgICBjb25zdCBsYWJlbCA9ICdVc3XDoXJpb3MnO1xuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pbkZpbHRlciwge1xuICAgICAgICAgICAgICAgIGZvcm06IGN0cmwuZmlsdGVyVk0uZm9ybURlc2NyaWJlcixcbiAgICAgICAgICAgICAgICBmaWx0ZXJCdWlsZGVyOiBjdHJsLmZpbHRlckJ1aWxkZXIsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgICAgICAgIHN1Ym1pdDogY3RybC5zdWJtaXRcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5MaXN0LCB7XG4gICAgICAgICAgICAgICAgdm06IGN0cmwubGlzdFZNLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgICAgICBsaXN0SXRlbTogYWRtaW5Vc2VySXRlbSxcbiAgICAgICAgICAgICAgICBsaXN0RGV0YWlsOiBhZG1pblVzZXJEZXRhaWxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF07XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Vc2VycztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy5jb250cmlidXRpb25EZXRhaWwsICdpZC5kZXNjJywgeydQcmVmZXInOiAnY291bnQ9ZXhhY3QnfSk7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgcmVwbGFjZURpYWNyaXRpY3MgZnJvbSAncmVwbGFjZURpYWNyaXRpY3MnO1xuXG5jb25zdCB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICBmdWxsX3RleHRfaW5kZXg6ICdAQCcsXG4gICAgICAgIHN0YXRlOiAnZXEnLFxuICAgICAgICBnYXRld2F5OiAnZXEnLFxuICAgICAgICB2YWx1ZTogJ2JldHdlZW4nLFxuICAgICAgICBjcmVhdGVkX2F0OiAnYmV0d2VlbidcbiAgICB9KSxcblxuICAgIHBhcmFtVG9TdHJpbmcgPSBmdW5jdGlvbihwKSB7XG4gICAgICAgIHJldHVybiAocCB8fCAnJykudG9TdHJpbmcoKS50cmltKCk7XG4gICAgfTtcblxuLy8gU2V0IGRlZmF1bHQgdmFsdWVzXG52bS5zdGF0ZSgnJyk7XG52bS5nYXRld2F5KCcnKTtcbnZtLm9yZGVyKHtcbiAgICBpZDogJ2Rlc2MnXG59KTtcblxudm0uY3JlYXRlZF9hdC5sdGUudG9GaWx0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZmlsdGVyID0gcGFyYW1Ub1N0cmluZyh2bS5jcmVhdGVkX2F0Lmx0ZSgpKTtcbiAgICByZXR1cm4gZmlsdGVyICYmIGgubW9tZW50RnJvbVN0cmluZyhmaWx0ZXIpLmVuZE9mKCdkYXknKS5mb3JtYXQoJycpO1xufTtcblxudm0uY3JlYXRlZF9hdC5ndGUudG9GaWx0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZmlsdGVyID0gcGFyYW1Ub1N0cmluZyh2bS5jcmVhdGVkX2F0Lmd0ZSgpKTtcbiAgICByZXR1cm4gZmlsdGVyICYmIGgubW9tZW50RnJvbVN0cmluZyhmaWx0ZXIpLmZvcm1hdCgpO1xufTtcblxudm0uZnVsbF90ZXh0X2luZGV4LnRvRmlsdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZpbHRlciA9IHBhcmFtVG9TdHJpbmcodm0uZnVsbF90ZXh0X2luZGV4KCkpO1xuICAgIHJldHVybiBmaWx0ZXIgJiYgcmVwbGFjZURpYWNyaXRpY3MoZmlsdGVyKSB8fCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB2bTtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IGFkbWluUHJvamVjdCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MuaXRlbTtcbiAgICAgICAgcmV0dXJuIG0oJy53LXJvdy5hZG1pbi1wcm9qZWN0JywgW1xuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtMy51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICBtKCdpbWcudGh1bWItcHJvamVjdC51LXJhZGl1c1tzcmM9JyArIHByb2plY3QucHJvamVjdF9pbWcgKyAnXVt3aWR0aD01MF0nKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOS53LWNvbC1zbWFsbC05JywgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIubGluZWhlaWdodC10aWdodGVyLnUtbWFyZ2luYm90dG9tLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW3RhcmdldD1cIl9ibGFua1wiXVtocmVmPVwiLycgKyBwcm9qZWN0LnBlcm1hbGluayArICdcIl0nLCBwcm9qZWN0LnByb2plY3RfbmFtZSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QuZm9udHdlaWdodC1zZW1pYm9sZCcsIHByb2plY3QucHJvamVjdF9zdGF0ZSksXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCBoLm1vbWVudGlmeShwcm9qZWN0LnByb2plY3Rfb25saW5lX2RhdGUpICsgJyBhICcgKyBoLm1vbWVudGlmeShwcm9qZWN0LnByb2plY3RfZXhwaXJlc19hdCkpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pblByb2plY3Q7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pbkNvbnRyaWJ1dGlvbiA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgY29udHJpYnV0aW9uID0gYXJncy5pdGVtO1xuICAgICAgICByZXR1cm4gbSgnLnctcm93LmFkbWluLWNvbnRyaWJ1dGlvbicsIFtcbiAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmxpbmVoZWlnaHQtdGlnaHRlci51LW1hcmdpbmJvdHRvbS0xMC5mb250c2l6ZS1zbWFsbCcsICdSJCcgKyBjb250cmlidXRpb24udmFsdWUpLFxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCBoLm1vbWVudGlmeShjb250cmlidXRpb24uY3JlYXRlZF9hdCwgJ0REL01NL1lZWVkgSEg6bW1baF0nKSksXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QnLCBbXG4gICAgICAgICAgICAgICAgJ0lEIGRvIEdhdGV3YXk6ICcsXG4gICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1t0YXJnZXQ9XCJfYmxhbmtcIl1baHJlZj1cImh0dHBzOi8vZGFzaGJvYXJkLnBhZ2FyLm1lLyMvdHJhbnNhY3Rpb25zLycgKyBjb250cmlidXRpb24uZ2F0ZXdheV9pZCArICdcIl0nLCBjb250cmlidXRpb24uZ2F0ZXdheV9pZClcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluQ29udHJpYnV0aW9uO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5BZG1pbkNvbnRyaWJ1dGlvblVzZXIgY29tcG9uZW50XG4gKiBBbiBpdGVtYnVpbGRlciBjb21wb25lbnQgdGhhdCByZXR1cm5zIGFkZGl0aW9uYWwgZGF0YVxuICogdG8gYmUgaW5jbHVkZWQgaW4gQWRtaW5Vc2VyLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgICBpdGVtQnVpbGRlcjogW3tcbiAqICAgICAgICAgICAgIGNvbXBvbmVudDogJ0FkbWluQ29udHJpYnV0aW9uVXNlcicsXG4gKiAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICcudy1jb2wudy1jb2wtNCdcbiAqICAgICAgICAgfV1cbiAqICAgICB9XG4gKiB9XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGFkbWluVXNlciBmcm9tICcuL2FkbWluLXVzZXInO1xuXG5jb25zdCBhZG1pbkNvbnRyaWJ1dGlvblVzZXIgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhcmdzLml0ZW0sXG4gICAgICAgICAgICAgIHVzZXIgPSB7XG4gICAgICAgICAgICAgICAgICBwcm9maWxlX2ltZ190aHVtYm5haWw6IGl0ZW0udXNlcl9wcm9maWxlX2ltZyxcbiAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLnVzZXJfbmFtZSxcbiAgICAgICAgICAgICAgICAgIGVtYWlsOiBpdGVtLmVtYWlsLFxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGFkZGl0aW9uYWxEYXRhID0gbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnR2F0ZXdheTogJyArIGl0ZW0ucGF5ZXJfZW1haWwpO1xuICAgICAgICByZXR1cm4gbS5jb21wb25lbnQoYWRtaW5Vc2VyLCB7aXRlbTogdXNlciwgYWRkaXRpb25hbF9kYXRhOiBhZGRpdGlvbmFsRGF0YX0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluQ29udHJpYnV0aW9uVXNlcjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbi8vQWRkIHRyYW5zbGF0aW9ucyB0byBwYXltZW50IHN0YXRlLlxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMucGF5bWVudCcpO1xuXG5jb25zdCBwYXltZW50U3RhdHVzID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgcGF5bWVudCA9IGFyZ3MuaXRlbSxcbiAgICAgICAgICAgIGNhcmQgPSBudWxsLFxuICAgICAgICAgICAgZGlzcGxheVBheW1lbnRNZXRob2QsIHBheW1lbnRNZXRob2RDbGFzcywgc3RhdGVDbGFzcztcblxuICAgICAgICBjYXJkID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBheW1lbnQuZ2F0ZXdheV9kYXRhKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChwYXltZW50LmdhdGV3YXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtb2lwJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfZGlnaXRzOiBwYXltZW50LmdhdGV3YXlfZGF0YS5jYXJ0YW9fYmluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfZGlnaXRzOiBwYXltZW50LmdhdGV3YXlfZGF0YS5jYXJ0YW9fZmluYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhbmQ6IHBheW1lbnQuZ2F0ZXdheV9kYXRhLmNhcnRhb19iYW5kZWlyYVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncGFnYXJtZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2RpZ2l0czogcGF5bWVudC5nYXRld2F5X2RhdGEuY2FyZF9maXJzdF9kaWdpdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9kaWdpdHM6IHBheW1lbnQuZ2F0ZXdheV9kYXRhLmNhcmRfbGFzdF9kaWdpdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhbmQ6IHBheW1lbnQuZ2F0ZXdheV9kYXRhLmNhcmRfYnJhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGRpc3BsYXlQYXltZW50TWV0aG9kID0gKCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChwYXltZW50LnBheW1lbnRfbWV0aG9kLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdib2xldG9iYW5jYXJpbyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCdzcGFuI2JvbGV0by1kZXRhaWwnLCAnJyk7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2FydGFvZGVjcmVkaXRvJzpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmREYXRhID0gY2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcjY3JlZGl0Y2FyZC1kZXRhaWwuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmREYXRhLmZpcnN0X2RpZ2l0cyArICcqKioqKionICsgY2FyZERhdGEubGFzdF9kaWdpdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkRGF0YS5icmFuZCArICcgJyArIHBheW1lbnQuaW5zdGFsbG1lbnRzICsgJ3gnXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcGF5bWVudE1ldGhvZENsYXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChwYXltZW50LnBheW1lbnRfbWV0aG9kLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdib2xldG9iYW5jYXJpbyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnLmZhLWJhcmNvZGUnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NhcnRhb2RlY3JlZGl0byc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnLmZhLWNyZWRpdC1jYXJkJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJy5mYS1xdWVzdGlvbic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc3RhdGVDbGFzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAocGF5bWVudC5zdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3BhaWQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJy50ZXh0LXN1Y2Nlc3MnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JlZnVuZGVkJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcudGV4dC1yZWZ1bmRlZCc7XG4gICAgICAgICAgICAgICAgY2FzZSAncGVuZGluZyc6XG4gICAgICAgICAgICAgICAgY2FzZSAncGVuZGluZ19yZWZ1bmQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJy50ZXh0LXdhaXRpbmcnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnLnRleHQtZXJyb3InO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwbGF5UGF5bWVudE1ldGhvZDogZGlzcGxheVBheW1lbnRNZXRob2QsXG4gICAgICAgICAgICBwYXltZW50TWV0aG9kQ2xhc3M6IHBheW1lbnRNZXRob2RDbGFzcyxcbiAgICAgICAgICAgIHN0YXRlQ2xhc3M6IHN0YXRlQ2xhc3NcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwYXltZW50ID0gYXJncy5pdGVtO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1yb3cucGF5bWVudC1zdGF0dXMnLCBbXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC1sb29zZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsIFtcbiAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWNpcmNsZScgKyBjdHJsLnN0YXRlQ2xhc3MoKSksICfCoCcgKyBJMThuLnQocGF5bWVudC5zdGF0ZSwgSTE4blNjb3BlKCkpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250d2VpZ2h0LXNlbWlib2xkJywgW1xuICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEnICsgY3RybC5wYXltZW50TWV0aG9kQ2xhc3MoKSksICcgJywgbSgnYS5saW5rLWhpZGRlbltocmVmPVwiI1wiXScsIHBheW1lbnQucGF5bWVudF9tZXRob2QpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHQnLCBbXG4gICAgICAgICAgICAgICAgY3RybC5kaXNwbGF5UGF5bWVudE1ldGhvZCgpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXltZW50U3RhdHVzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBhZG1pblByb2plY3QgZnJvbSAnLi9hZG1pbi1wcm9qZWN0JztcbmltcG9ydCBhZG1pbkNvbnRyaWJ1dGlvbiBmcm9tICcuL2FkbWluLWNvbnRyaWJ1dGlvbic7XG5pbXBvcnQgYWRtaW5Db250cmlidXRpb25Vc2VyIGZyb20gJy4vYWRtaW4tY29udHJpYnV0aW9uLXVzZXInO1xuaW1wb3J0IHBheW1lbnRTdGF0dXMgZnJvbSAnLi9wYXltZW50LXN0YXR1cyc7XG5cbmNvbnN0IGFkbWluQ29udHJpYnV0aW9uSXRlbSA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXRlbUJ1aWxkZXI6IFt7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBhZG1pbkNvbnRyaWJ1dGlvblVzZXIsXG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnLnctY29sLnctY29sLTQnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBhZG1pblByb2plY3QsXG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnLnctY29sLnctY29sLTQnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBhZG1pbkNvbnRyaWJ1dGlvbixcbiAgICAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICcudy1jb2wudy1jb2wtMidcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IHBheW1lbnRTdGF0dXMsXG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnLnctY29sLnctY29sLTInXG4gICAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKFxuICAgICAgICAgICAgJy53LXJvdycsXG4gICAgICAgICAgICBfLm1hcChjdHJsLml0ZW1CdWlsZGVyLCBmdW5jdGlvbihwYW5lbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtKHBhbmVsLndyYXBwZXJDbGFzcywgW1xuICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwYW5lbC5jb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW06IGFyZ3MuaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogYXJncy5rZXlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Db250cmlidXRpb25JdGVtO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pblJhZGlvQWN0aW9uID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBidWlsZGVyID0gYXJncy5kYXRhLFxuICAgICAgICAgICAgY29tcGxldGUgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZGF0YSA9IHt9LFxuICAgICAgICAgICAgZXJyb3IgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZmFpbCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBpdGVtID0gYXJncy5pdGVtKCksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IG0ucHJvcChpdGVtLmRlc2NyaXB0aW9uIHx8ICcnKSxcbiAgICAgICAgICAgIGtleSA9IGJ1aWxkZXIuZ2V0S2V5LFxuICAgICAgICAgICAgbmV3SUQgPSBtLnByb3AoJycpLFxuICAgICAgICAgICAgZ2V0RmlsdGVyID0ge30sXG4gICAgICAgICAgICBzZXRGaWx0ZXIgPSB7fSxcbiAgICAgICAgICAgIHJhZGlvcyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBnZXRBdHRyID0gYnVpbGRlci5yYWRpb3MsXG4gICAgICAgICAgICBnZXRLZXkgPSBidWlsZGVyLmdldEtleSxcbiAgICAgICAgICAgIGdldEtleVZhbHVlID0gYXJncy5nZXRLZXlWYWx1ZSxcbiAgICAgICAgICAgIHVwZGF0ZUtleSA9IGJ1aWxkZXIudXBkYXRlS2V5LFxuICAgICAgICAgICAgdXBkYXRlS2V5VmFsdWUgPSBhcmdzLnVwZGF0ZUtleVZhbHVlLFxuICAgICAgICAgICAgdmFsaWRhdGUgPSBidWlsZGVyLnZhbGlkYXRlLFxuICAgICAgICAgICAgc2VsZWN0ZWRJdGVtID0gYnVpbGRlci5zZWxlY3RlZEl0ZW0gfHwgbS5wcm9wKCk7XG5cbiAgICAgICAgc2V0RmlsdGVyW3VwZGF0ZUtleV0gPSAnZXEnO1xuICAgICAgICBjb25zdCBzZXRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oc2V0RmlsdGVyKTtcbiAgICAgICAgc2V0Vk1bdXBkYXRlS2V5XSh1cGRhdGVLZXlWYWx1ZSk7XG5cbiAgICAgICAgZ2V0RmlsdGVyW2dldEtleV0gPSAnZXEnO1xuICAgICAgICBjb25zdCBnZXRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oZ2V0RmlsdGVyKTtcbiAgICAgICAgZ2V0Vk1bZ2V0S2V5XShnZXRLZXlWYWx1ZSk7XG5cbiAgICAgICAgY29uc3QgZ2V0TG9hZGVyID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihidWlsZGVyLmdldE1vZGVsLmdldFBhZ2VPcHRpb25zKGdldFZNLnBhcmFtZXRlcnMoKSkpO1xuXG4gICAgICAgIGNvbnN0IHNldExvYWRlciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4oYnVpbGRlci51cGRhdGVNb2RlbC5wYXRjaE9wdGlvbnMoc2V0Vk0ucGFyYW1ldGVycygpLCBkYXRhKSk7XG5cbiAgICAgICAgY29uc3QgdXBkYXRlSXRlbSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3SXRlbSA9IF8uZmluZFdoZXJlKHJhZGlvcygpLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBkYXRhWzBdW2J1aWxkZXIuc2VsZWN0S2V5XVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbShuZXdJdGVtKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTmVuaHVtIGl0ZW0gYXR1YWxpemFkbydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBvcHVsYXRlUmFkaW9zID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVtcHR5U3RhdGUgPSBidWlsZGVyLmFkZEVtcHR5O1xuXG4gICAgICAgICAgICByYWRpb3MoZGF0YSk7XG5cbiAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChlbXB0eVN0YXRlKSl7XG4gICAgICAgICAgICAgICAgcmFkaW9zKCkudW5zaGlmdChlbXB0eVN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBmZXRjaCA9ICgpID0+IHtcbiAgICAgICAgICAgIGdldExvYWRlci5sb2FkKCkudGhlbihwb3B1bGF0ZVJhZGlvcywgZXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHN1Ym1pdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChuZXdJRCgpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbGlkYXRpb24gPSB2YWxpZGF0ZShyYWRpb3MoKSwgbmV3SUQoKSk7XG4gICAgICAgICAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQodmFsaWRhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtidWlsZGVyLnNlbGVjdEtleV0gPSBuZXdJRCgpID09PSAtMSA/IG51bGwgOiBuZXdJRCgpO1xuICAgICAgICAgICAgICAgICAgICBzZXRMb2FkZXIubG9hZCgpLnRoZW4odXBkYXRlSXRlbSwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB2YWxpZGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB1bmxvYWQgPSAoZWwsIGlzaW5pdCwgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgY29udGV4dC5vbnVubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xuICAgICAgICAgICAgICAgIG5ld0lEKCcnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc2V0RGVzY3JpcHRpb24gPSAodGV4dCkgPT4ge1xuICAgICAgICAgICAgZGVzY3JpcHRpb24odGV4dCk7XG4gICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZldGNoKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHNldERlc2NyaXB0aW9uOiBzZXREZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIHNldExvYWRlcjogc2V0TG9hZGVyLFxuICAgICAgICAgICAgZ2V0TG9hZGVyOiBnZXRMb2FkZXIsXG4gICAgICAgICAgICBuZXdJRDogbmV3SUQsXG4gICAgICAgICAgICBzdWJtaXQ6IHN1Ym1pdCxcbiAgICAgICAgICAgIHRvZ2dsZXI6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICB1bmxvYWQ6IHVubG9hZCxcbiAgICAgICAgICAgIHJhZGlvczogcmFkaW9zXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3MuZGF0YSxcbiAgICAgICAgICAgIGl0ZW0gPSBhcmdzLml0ZW0oKSxcbiAgICAgICAgICAgIGJ0blZhbHVlID0gKGN0cmwuc2V0TG9hZGVyKCkgfHwgY3RybC5nZXRMb2FkZXIoKSkgPyAncG9yIGZhdm9yLCBhZ3VhcmRlLi4uJyA6IGRhdGEuY2FsbFRvQWN0aW9uO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtMicsIFtcbiAgICAgICAgICAgIG0oJ2J1dHRvbi5idG4uYnRuLXNtYWxsLmJ0bi10ZXJjaWFyeScsIHtcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnRvZ2dsZXIudG9nZ2xlXG4gICAgICAgICAgICB9LCBkYXRhLm91dGVyTGFiZWwpLCAoY3RybC50b2dnbGVyKCkpID9cbiAgICAgICAgICAgIG0oJy5kcm9wZG93bi1saXN0LmNhcmQudS1yYWRpdXMuZHJvcGRvd24tbGlzdC1tZWRpdW0uemluZGV4LTEwJywge1xuICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC51bmxvYWRcbiAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICBtKCdmb3JtLnctZm9ybScsIHtcbiAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGN0cmwuc3VibWl0XG4gICAgICAgICAgICAgICAgfSwgKCFjdHJsLmNvbXBsZXRlKCkpID8gW1xuICAgICAgICAgICAgICAgICAgICAoY3RybC5yYWRpb3MoKSkgP1xuICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLnJhZGlvcygpLCAocmFkaW8sIGluZGV4KSA9PiBtKCcudy1yYWRpbycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0I3ItJyArIGluZGV4ICsgJy53LXJhZGlvLWlucHV0W3R5cGU9cmFkaW9dW25hbWU9XCJhZG1pbi1yYWRpb1wiXVt2YWx1ZT1cIicgKyByYWRpby5pZCArICdcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogcmFkaW8uaWQgPT09IChpdGVtW2RhdGEuc2VsZWN0S2V5XSB8fCBpdGVtLmlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwubmV3SUQocmFkaW8uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNldERlc2NyaXB0aW9uKHJhZGlvLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLnctZm9ybS1sYWJlbFtmb3I9XCJyLScgKyBpbmRleCArICdcIl0nLCAnUiQnICsgcmFkaW8ubWluaW11bV92YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgXSkpIDogaC5sb2FkZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnc3Ryb25nJywgJ0Rlc2NyacOnw6NvJyksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AnLCBjdHJsLmRlc2NyaXB0aW9uKCkpLFxuICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWJ1dHRvbi5idG4uYnRuLXNtYWxsW3R5cGU9XCJzdWJtaXRcIl1bdmFsdWU9XCInICsgYnRuVmFsdWUgKyAnXCJdJylcbiAgICAgICAgICAgICAgICBdIDogKCFjdHJsLmVycm9yKCkpID8gW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtLWRvbmVbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AnLCAnUmVjb21wZW5zYSBhbHRlcmFkYSBjb20gc3VjZXNzbyEnKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZXJyb3Jbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AnLCBjdHJsLmVycm9yKCkubWVzc2FnZSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSkgOiAnJ1xuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pblJhZGlvQWN0aW9uO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5BZG1pbkV4dGVybmFsQWN0aW9uIGNvbXBvbmVudFxuICogTWFrZXMgYXJiaXRyYXJ5IGFqYXggcmVxdWVzdHMgYW5kIHVwZGF0ZSB1bmRlcmx5aW5nXG4gKiBkYXRhIGZyb20gc291cmNlIGVuZHBvaW50LlxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLkFkbWluRXh0ZXJuYWxBY3Rpb24sIHtcbiAqICAgICBkYXRhOiB7fSxcbiAqICAgICBpdGVtOiByb3dGcm9tRGF0YWJhc2VcbiAqIH0pXG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgYWRtaW5FeHRlcm5hbEFjdGlvbiA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgbGV0IGJ1aWxkZXIgPSBhcmdzLmRhdGEsXG4gICAgICAgICAgICBjb21wbGV0ZSA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBlcnJvciA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBmYWlsID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIGRhdGEgPSB7fSxcbiAgICAgICAgICAgIGl0ZW0gPSBhcmdzLml0ZW07XG5cbiAgICAgICAgYnVpbGRlci5yZXF1ZXN0T3B0aW9ucy5jb25maWcgPSAoeGhyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaC5hdXRoZW50aWNpdHlUb2tlbigpKSB7XG4gICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtQ1NSRi1Ub2tlbicsIGguYXV0aGVudGljaXR5VG9rZW4oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVsb2FkID0gXy5jb21wb3NlKGJ1aWxkZXIubW9kZWwuZ2V0Um93V2l0aFRva2VuLCBoLmlkVk0uaWQoaXRlbVtidWlsZGVyLnVwZGF0ZUtleV0pLnBhcmFtZXRlcnMpLFxuICAgICAgICAgICAgbCA9IG0ucHJvcChmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgcmVsb2FkSXRlbSA9ICgpID0+IHJlbG9hZCgpLnRoZW4odXBkYXRlSXRlbSk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEVycm9yID0gKGVycikgPT4ge1xuICAgICAgICAgICAgbChmYWxzZSk7XG4gICAgICAgICAgICBjb21wbGV0ZSh0cnVlKTtcbiAgICAgICAgICAgIGVycm9yKHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHVwZGF0ZUl0ZW0gPSAocmVzKSA9PiB7XG4gICAgICAgICAgICBfLmV4dGVuZChpdGVtLCByZXNbMF0pO1xuICAgICAgICAgICAgY29tcGxldGUodHJ1ZSk7XG4gICAgICAgICAgICBlcnJvcihmYWxzZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc3VibWl0ID0gKCkgPT4ge1xuICAgICAgICAgICAgbCh0cnVlKTtcbiAgICAgICAgICAgIG0ucmVxdWVzdChidWlsZGVyLnJlcXVlc3RPcHRpb25zKS50aGVuKHJlbG9hZEl0ZW0sIHJlcXVlc3RFcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdW5sb2FkID0gKGVsLCBpc2luaXQsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGNvbnRleHQub251bmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbDogbCxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIHN1Ym1pdDogc3VibWl0LFxuICAgICAgICAgICAgdG9nZ2xlcjogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKSxcbiAgICAgICAgICAgIHVubG9hZDogdW5sb2FkXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3MuZGF0YSxcbiAgICAgICAgICAgIGJ0blZhbHVlID0gKGN0cmwubCgpKSA/ICdwb3IgZmF2b3IsIGFndWFyZGUuLi4nIDogZGF0YS5jYWxsVG9BY3Rpb247XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC0yJywgW1xuICAgICAgICAgICAgbSgnYnV0dG9uLmJ0bi5idG4tc21hbGwuYnRuLXRlcmNpYXJ5Jywge1xuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlci50b2dnbGVcbiAgICAgICAgICAgIH0sIGRhdGEub3V0ZXJMYWJlbCksIChjdHJsLnRvZ2dsZXIoKSkgP1xuICAgICAgICAgICAgbSgnLmRyb3Bkb3duLWxpc3QuY2FyZC51LXJhZGl1cy5kcm9wZG93bi1saXN0LW1lZGl1bS56aW5kZXgtMTAnLCB7XG4gICAgICAgICAgICAgICAgY29uZmlnOiBjdHJsLnVubG9hZFxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIG0oJ2Zvcm0udy1mb3JtJywge1xuICAgICAgICAgICAgICAgICAgICBvbnN1Ym1pdDogY3RybC5zdWJtaXRcbiAgICAgICAgICAgICAgICB9LCAoIWN0cmwuY29tcGxldGUoKSkgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsJywgZGF0YS5pbm5lckxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1idXR0b24uYnRuLmJ0bi1zbWFsbFt0eXBlPVwic3VibWl0XCJdW3ZhbHVlPVwiJyArIGJ0blZhbHVlICsgJ1wiXScpXG4gICAgICAgICAgICAgICAgXSA6ICghY3RybC5lcnJvcigpKSA/IFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybS1kb25lW3N0eWxlPVwiZGlzcGxheTpibG9jaztcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdwJywgJ1JlcXVpc2nDp8OjbyBmZWl0YSBjb20gc3VjZXNzby4nKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZXJyb3Jbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AnLCAnSG91dmUgdW0gcHJvYmxlbWEgbmEgcmVxdWlzacOnw6NvLicpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pIDogJydcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5FeHRlcm5hbEFjdGlvbjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IGFkbWluVHJhbnNhY3Rpb24gPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvbiA9IGFyZ3MuY29udHJpYnV0aW9uO1xuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1zbWFsbGVyLmxpbmVoZWlnaHQtdGlnaHRlci51LW1hcmdpbmJvdHRvbS0yMCcsICdEZXRhbGhlcyBkbyBhcG9pbycpLFxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmxpbmVoZWlnaHQtbG9vc2VyJywgW1xuICAgICAgICAgICAgICAgICdWYWxvcjogUiQnICsgaC5mb3JtYXROdW1iZXIoY29udHJpYnV0aW9uLnZhbHVlLCAyLCAzKSxcbiAgICAgICAgICAgICAgICBtKCdicicpLFxuICAgICAgICAgICAgICAgICdUYXhhOiBSJCcgKyBoLmZvcm1hdE51bWJlcihjb250cmlidXRpb24uZ2F0ZXdheV9mZWUsIDIsIDMpLFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgJ0FndWFyZGFuZG8gQ29uZmlybWHDp8OjbzogJyArIChjb250cmlidXRpb24ud2FpdGluZ19wYXltZW50ID8gJ1NpbScgOiAnTsOjbycpLFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgJ0Fuw7RuaW1vOiAnICsgKGNvbnRyaWJ1dGlvbi5hbm9ueW1vdXMgPyAnU2ltJyA6ICdOw6NvJyksXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAnSWQgcGFnYW1lbnRvOiAnICsgY29udHJpYnV0aW9uLmdhdGV3YXlfaWQsXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAnQXBvaW86ICcgKyBjb250cmlidXRpb24uY29udHJpYnV0aW9uX2lkLFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgJ0NoYXZlOsKgXFxuJyxcbiAgICAgICAgICAgICAgICBtKCdicicpLFxuICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbi5rZXksXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAnTWVpbzogJyArIGNvbnRyaWJ1dGlvbi5nYXRld2F5LFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgJ09wZXJhZG9yYTogJyArIChjb250cmlidXRpb24uZ2F0ZXdheV9kYXRhICYmIGNvbnRyaWJ1dGlvbi5nYXRld2F5X2RhdGEuYWNxdWlyZXJfbmFtZSksXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICBjb250cmlidXRpb24uaXNfc2Vjb25kX3NsaXAgPyBbbSgnYS5saW5rLWhpZGRlbltocmVmPVwiI1wiXScsICdCb2xldG8gYmFuY8OhcmlvJyksICcgJywgbSgnc3Bhbi5iYWRnZScsICcyYSB2aWEnKV0gOiAnJ1xuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5UcmFuc2FjdGlvbjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgYWRtaW5UcmFuc2FjdGlvbkhpc3RvcnkgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvbiA9IGFyZ3MuY29udHJpYnV0aW9uLFxuICAgICAgICAgICAgbWFwRXZlbnRzID0gXy5yZWR1Y2UoW3tcbiAgICAgICAgICAgICAgICBkYXRlOiBjb250cmlidXRpb24ucGFpZF9hdCxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQXBvaW8gY29uZmlybWFkbydcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkYXRlOiBjb250cmlidXRpb24ucGVuZGluZ19yZWZ1bmRfYXQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ1JlZW1ib2xzbyBzb2xpY2l0YWRvJ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRhdGU6IGNvbnRyaWJ1dGlvbi5yZWZ1bmRlZF9hdCxcbiAgICAgICAgICAgICAgICBuYW1lOiAnRXN0b3JubyByZWFsaXphZG8nXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGF0ZTogY29udHJpYnV0aW9uLmNyZWF0ZWRfYXQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0Fwb2lvIGNyaWFkbydcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkYXRlOiBjb250cmlidXRpb24ucmVmdXNlZF9hdCxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQXBvaW8gY2FuY2VsYWRvJ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRhdGU6IGNvbnRyaWJ1dGlvbi5kZWxldGVkX2F0LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdBcG9pbyBleGNsdcOtZG8nXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGF0ZTogY29udHJpYnV0aW9uLmNoYXJnZWJhY2tfYXQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0NoYXJnZWJhY2snXG4gICAgICAgICAgICB9XSwgKG1lbW8sIGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5kYXRlICE9PSBudWxsICYmIGl0ZW0uZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0ub3JpZ2luYWxEYXRlID0gaXRlbS5kYXRlO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmRhdGUgPSBoLm1vbWVudGlmeShpdGVtLmRhdGUsICdERC9NTS9ZWVlZLCBISDptbScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtby5jb25jYXQoaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgICAgICB9LCBbXSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9yZGVyZWRFdmVudHM6IF8uc29ydEJ5KG1hcEV2ZW50cywgJ29yaWdpbmFsRGF0ZScpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwpIHtcbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtc21hbGxlci5saW5laGVpZ2h0LXRpZ2h0ZXIudS1tYXJnaW5ib3R0b20tMjAnLCAnSGlzdMOzcmljbyBkYSB0cmFuc2HDp8OjbycpLFxuICAgICAgICAgICAgY3RybC5vcmRlcmVkRXZlbnRzLm1hcCgoY0V2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0oJy53LXJvdy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3Nlci5kYXRlLWV2ZW50JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5JywgY0V2ZW50LmRhdGUpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIGNFdmVudC5uYW1lKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5UcmFuc2FjdGlvbkhpc3Rvcnk7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pblJld2FyZCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcmV3YXJkID0gYXJncy5yZXdhcmQoKSxcbiAgICAgICAgICAgIGF2YWlsYWJsZSA9IHBhcnNlSW50KHJld2FyZC5wYWlkX2NvdW50KSArIHBhcnNlSW50KHJld2FyZC53YWl0aW5nX3BheW1lbnRfY291bnQpO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIubGluZWhlaWdodC10aWdodGVyLnUtbWFyZ2luYm90dG9tLTIwJywgJ1JlY29tcGVuc2EnKSxcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3NlcicsIHJld2FyZC5pZCA/IFtcbiAgICAgICAgICAgICAgICAnSUQ6ICcgKyByZXdhcmQuaWQsXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAnVmFsb3IgbcOtbmltbzogUiQnICsgaC5mb3JtYXROdW1iZXIocmV3YXJkLm1pbmltdW1fdmFsdWUsIDIsIDMpLFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgbS50cnVzdCgnRGlzcG9uw612ZWlzOiAnICsgYXZhaWxhYmxlICsgJyAvICcgKyAocmV3YXJkLm1heGltdW1fY29udHJpYnV0aW9ucyB8fCAnJmluZmluOycpKSxcbiAgICAgICAgICAgICAgICBtKCdicicpLFxuICAgICAgICAgICAgICAgICdBZ3VhcmRhbmRvIGNvbmZpcm1hw6fDo286ICcgKyByZXdhcmQud2FpdGluZ19wYXltZW50X2NvdW50LFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgJ0Rlc2NyacOnw6NvOiAnICsgcmV3YXJkLmRlc2NyaXB0aW9uXG4gICAgICAgICAgICBdIDogJ0Fwb2lvIHNlbSByZWNvbXBlbnNhJylcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5SZXdhcmQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgYWRtaW5JbnB1dEFjdGlvbiBmcm9tICcuL2FkbWluLWlucHV0LWFjdGlvbic7XG5pbXBvcnQgYWRtaW5SYWRpb0FjdGlvbiBmcm9tICcuL2FkbWluLXJhZGlvLWFjdGlvbic7XG5pbXBvcnQgYWRtaW5FeHRlcm5hbEFjdGlvbiBmcm9tICcuL2FkbWluLWV4dGVybmFsLWFjdGlvbic7XG5pbXBvcnQgYWRtaW5UcmFuc2FjdGlvbiBmcm9tICcuL2FkbWluLXRyYW5zYWN0aW9uJztcbmltcG9ydCBhZG1pblRyYW5zYWN0aW9uSGlzdG9yeSBmcm9tICcuL2FkbWluLXRyYW5zYWN0aW9uLWhpc3RvcnknO1xuaW1wb3J0IGFkbWluUmV3YXJkIGZyb20gJy4vYWRtaW4tcmV3YXJkJztcblxuY29uc3QgYWRtaW5Db250cmlidXRpb25EZXRhaWwgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBsO1xuICAgICAgICBjb25zdCBsb2FkUmV3YXJkID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbW9kZWwgPSBtb2RlbHMucmV3YXJkRGV0YWlsLFxuICAgICAgICAgICAgICAgIHJld2FyZF9pZCA9IGFyZ3MuaXRlbS5yZXdhcmRfaWQsXG4gICAgICAgICAgICAgICAgb3B0cyA9IG1vZGVsLmdldFJvd09wdGlvbnMoaC5pZFZNLmlkKHJld2FyZF9pZCkucGFyYW1ldGVycygpKSxcbiAgICAgICAgICAgICAgICByZXdhcmQgPSBtLnByb3Aoe30pO1xuXG4gICAgICAgICAgICBsID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihvcHRzKTtcblxuICAgICAgICAgICAgaWYgKHJld2FyZF9pZCkge1xuICAgICAgICAgICAgICAgIGwubG9hZCgpLnRoZW4oXy5jb21wb3NlKHJld2FyZCwgXy5maXJzdCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmV3YXJkO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXdhcmQ6IGxvYWRSZXdhcmQoKSxcbiAgICAgICAgICAgIGFjdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eTogJ3VzZXJfaWQnLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXk6ICdpZCcsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxUb0FjdGlvbjogJ1RyYW5zZmVyaXInLFxuICAgICAgICAgICAgICAgICAgICBpbm5lckxhYmVsOiAnSWQgZG8gbm92byBhcG9pYWRvcjonLFxuICAgICAgICAgICAgICAgICAgICBvdXRlckxhYmVsOiAnVHJhbnNmZXJpciBBcG9pbycsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnZXg6IDEyOTkwOCcsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAnQXBvaW8gdHJhbnNmZXJpZG8gY29tIHN1Y2Vzc28hJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnTyBhcG9pbyBuw6NvIGZvaSB0cmFuc2ZlcmlkbyEnLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogbW9kZWxzLmNvbnRyaWJ1dGlvbkRldGFpbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmV3YXJkOiB7XG4gICAgICAgICAgICAgICAgICAgIGdldEtleTogJ3Byb2plY3RfaWQnLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXk6ICdjb250cmlidXRpb25faWQnLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RLZXk6ICdyZXdhcmRfaWQnLFxuICAgICAgICAgICAgICAgICAgICByYWRpb3M6ICdyZXdhcmRzJyxcbiAgICAgICAgICAgICAgICAgICAgY2FsbFRvQWN0aW9uOiAnQWx0ZXJhciBSZWNvbXBlbnNhJyxcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJMYWJlbDogJ1JlY29tcGVuc2EnLFxuICAgICAgICAgICAgICAgICAgICBnZXRNb2RlbDogbW9kZWxzLnJld2FyZERldGFpbCxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlTW9kZWw6IG1vZGVscy5jb250cmlidXRpb25EZXRhaWwsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogbG9hZFJld2FyZCgpLFxuICAgICAgICAgICAgICAgICAgICBhZGRFbXB0eToge2lkOiAtMSwgbWluaW11bV92YWx1ZTogMTAsIGRlc2NyaXB0aW9uOiAnU2VtIHJlY29tcGVuc2EnfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGUocmV3YXJkcywgbmV3UmV3YXJkSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXdhcmQgPSBfLmZpbmRXaGVyZShyZXdhcmRzLCB7aWQ6IG5ld1Jld2FyZElEfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGFyZ3MuaXRlbS52YWx1ZSA+PSByZXdhcmQubWluaW11bV92YWx1ZSkgPyB1bmRlZmluZWQgOiAnVmFsb3IgbcOtbmltbyBkYSByZWNvbXBlbnNhIMOpIG1haW9yIGRvIHF1ZSBvIHZhbG9yIGRhIGNvbnRyaWJ1acOnw6NvLic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlZnVuZDoge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXk6ICdpZCcsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxUb0FjdGlvbjogJ1JlZW1ib2xzbyBkaXJldG8nLFxuICAgICAgICAgICAgICAgICAgICBpbm5lckxhYmVsOiAnVGVtIGNlcnRlemEgcXVlIGRlc2VqYSByZWVtYm9sc2FyIGVzc2UgYXBvaW8/JyxcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJMYWJlbDogJ1JlZW1ib2xzYXIgQXBvaW8nLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogbW9kZWxzLmNvbnRyaWJ1dGlvbkRldGFpbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiAnc3RhdGUnLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXk6ICdpZCcsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxUb0FjdGlvbjogJ0FwYWdhcicsXG4gICAgICAgICAgICAgICAgICAgIGlubmVyTGFiZWw6ICdUZW0gY2VydGV6YSBxdWUgZGVzZWphIGFwYWdhciBlc3NlIGFwb2lvPycsXG4gICAgICAgICAgICAgICAgICAgIG91dGVyTGFiZWw6ICdBcGFnYXIgQXBvaW8nLFxuICAgICAgICAgICAgICAgICAgICBmb3JjZVZhbHVlOiAnZGVsZXRlZCcsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAnQXBvaW8gcmVtb3ZpZG8gY29tIHN1Y2Vzc28hJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnTyBhcG9pbyBuw6NvIGZvaSByZW1vdmlkbyEnLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogbW9kZWxzLmNvbnRyaWJ1dGlvbkRldGFpbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsOiBsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IGFjdGlvbnMgPSBjdHJsLmFjdGlvbnMsXG4gICAgICAgICAgICBpdGVtID0gYXJncy5pdGVtLFxuICAgICAgICAgICAgcmV3YXJkID0gY3RybC5yZXdhcmQ7XG5cbiAgICAgICAgY29uc3QgYWRkT3B0aW9ucyA9IChidWlsZGVyLCBpZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIF8uZXh0ZW5kKHt9LCBidWlsZGVyLCB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAoYC9hZG1pbi9jb250cmlidXRpb25zLyR7aWR9L2dhdGV3YXlfcmVmdW5kYCksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnI2FkbWluLWNvbnRyaWJ1dGlvbi1kZXRhaWwtYm94JywgW1xuICAgICAgICAgICAgbSgnLmRpdmlkZXIudS1tYXJnaW50b3AtMjAudS1tYXJnaW5ib3R0b20tMjAnKSxcbiAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0zMCcsIFtcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pbklucHV0QWN0aW9uLCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGFjdGlvbnMudHJhbnNmZXIsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoY3RybC5sKCkpID8gaC5sb2FkZXIgOlxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluUmFkaW9BY3Rpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYWN0aW9ucy5yZXdhcmQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IHJld2FyZCxcbiAgICAgICAgICAgICAgICAgICAgZ2V0S2V5VmFsdWU6IGl0ZW0ucHJvamVjdF9pZCxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlS2V5VmFsdWU6IGl0ZW0uY29udHJpYnV0aW9uX2lkXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5FeHRlcm5hbEFjdGlvbiwge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBhZGRPcHRpb25zKGFjdGlvbnMucmVmdW5kLCBpdGVtLmlkKSxcbiAgICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluSW5wdXRBY3Rpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYWN0aW9ucy5yZW1vdmUsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1yb3cuY2FyZC5jYXJkLXRlcmNpYXJ5LnUtcmFkaXVzJywgW1xuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluVHJhbnNhY3Rpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uOiBpdGVtXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5UcmFuc2FjdGlvbkhpc3RvcnksIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uOiBpdGVtXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKGN0cmwubCgpKSA/IGgubG9hZGVyIDpcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pblJld2FyZCwge1xuICAgICAgICAgICAgICAgICAgICByZXdhcmQ6IHJld2FyZCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBpdGVtLmtleVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pbkNvbnRyaWJ1dGlvbkRldGFpbDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5jb25zdCBmaWx0ZXJOdW1iZXJSYW5nZSA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYnLCBbXG4gICAgICAgICAgICBtKCdsYWJlbC5mb250c2l6ZS1zbWFsbGVyW2Zvcj1cIicgKyBhcmdzLmluZGV4ICsgJ1wiXScsIGFyZ3MubGFiZWwpLFxuICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01LnctY29sLXNtYWxsLTUudy1jb2wtdGlueS01JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWlucHV0LnRleHQtZmllbGQucG9zaXRpdmVbaWQ9XCInICsgYXJncy5pbmRleCArICdcIl1bdHlwZT1cInRleHRcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBhcmdzLmZpcnN0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhcmdzLmZpcnN0KClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1zbWFsbC0yLnctY29sLXRpbnktMicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIudS10ZXh0LWNlbnRlci5saW5laGVpZ2h0LWxvb3NlcicsICdlJylcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNS53LWNvbC1zbWFsbC01LnctY29sLXRpbnktNScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkLnBvc2l0aXZlW3R5cGU9XCJ0ZXh0XCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgYXJncy5sYXN0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhcmdzLmxhc3QoKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmaWx0ZXJOdW1iZXJSYW5nZTtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5jb25zdCBmaWx0ZXJEYXRlUmFuZ2UgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC02JywgW1xuICAgICAgICAgICAgbSgnbGFiZWwuZm9udHNpemUtc21hbGxlcltmb3I9XCInICsgYXJncy5pbmRleCArICdcIl0nLCBhcmdzLmxhYmVsKSxcbiAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNS53LWNvbC1zbWFsbC01LnctY29sLXRpbnktNScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkLnBvc2l0aXZlW2lkPVwiJyArIGFyZ3MuaW5kZXggKyAnXCJdW3R5cGU9XCJ0ZXh0XCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgYXJncy5maXJzdCksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXJncy5maXJzdCgpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtc21hbGwtMi53LWNvbC10aW55LTInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLnUtdGV4dC1jZW50ZXIubGluZWhlaWdodC1sb29zZXInLCAnZScpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUudy1jb2wtc21hbGwtNS53LWNvbC10aW55LTUnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZC5wb3NpdGl2ZVt0eXBlPVwidGV4dFwiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGFyZ3MubGFzdCksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXJncy5sYXN0KClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZmlsdGVyRGF0ZVJhbmdlO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBjb250cmlidXRpb25MaXN0Vk0gZnJvbSAnLi4vdm1zL2NvbnRyaWJ1dGlvbi1saXN0LXZtJztcbmltcG9ydCBjb250cmlidXRpb25GaWx0ZXJWTSBmcm9tICcuLi92bXMvY29udHJpYnV0aW9uLWZpbHRlci12bSc7XG5pbXBvcnQgYWRtaW5MaXN0IGZyb20gJy4uL2MvYWRtaW4tbGlzdCc7XG5pbXBvcnQgYWRtaW5GaWx0ZXIgZnJvbSAnLi4vYy9hZG1pbi1maWx0ZXInO1xuaW1wb3J0IGFkbWluQ29udHJpYnV0aW9uSXRlbSBmcm9tICcuLi9jL2FkbWluLWNvbnRyaWJ1dGlvbi1pdGVtJztcbmltcG9ydCBhZG1pbkNvbnRyaWJ1dGlvbkRldGFpbCBmcm9tICcuLi9jL2FkbWluLWNvbnRyaWJ1dGlvbi1kZXRhaWwnO1xuaW1wb3J0IGZpbHRlck1haW4gZnJvbSAnLi4vYy9maWx0ZXItbWFpbic7XG5pbXBvcnQgZmlsdGVyRHJvcGRvd24gZnJvbSAnLi4vYy9maWx0ZXItZHJvcGRvd24nO1xuaW1wb3J0IGZpbHRlck51bWJlclJhbmdlIGZyb20gJy4uL2MvZmlsdGVyLW51bWJlci1yYW5nZSc7XG5pbXBvcnQgZmlsdGVyRGF0ZVJhbmdlIGZyb20gJy4uL2MvZmlsdGVyLWRhdGUtcmFuZ2UnO1xuXG5jb25zdCBhZG1pbkNvbnRyaWJ1dGlvbnMgPSB7XG4gICAgY29udHJvbGxlcigpIHtcbiAgICAgICAgdmFyIGxpc3RWTSA9IGNvbnRyaWJ1dGlvbkxpc3RWTSxcbiAgICAgICAgICAgIGZpbHRlclZNID0gY29udHJpYnV0aW9uRmlsdGVyVk0sXG4gICAgICAgICAgICBlcnJvciA9IG0ucHJvcCgnJyksXG4gICAgICAgICAgICBmaWx0ZXJCdWlsZGVyID0gW3sgLy9mdWxsX3RleHRfaW5kZXhcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlck1haW4sXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICB2bTogZmlsdGVyVk0uZnVsbF90ZXh0X2luZGV4LFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0J1c3F1ZSBwb3IgcHJvamV0bywgZW1haWwsIElkcyBkbyB1c3XDoXJpbyBlIGRvIGFwb2lvLi4uJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHsgLy9zdGF0ZVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogZmlsdGVyRHJvcGRvd24sXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbSBvIGVzdGFkbycsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzdGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIHZtOiBmaWx0ZXJWTS5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1F1YWxxdWVyIHVtJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3BhaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAncGFpZCdcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdyZWZ1c2VkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ3JlZnVzZWQnXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAncGVuZGluZycsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb246ICdwZW5kaW5nJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3BlbmRpbmdfcmVmdW5kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ3BlbmRpbmdfcmVmdW5kJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3JlZnVuZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ3JlZnVuZGVkJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2NoYXJnZWJhY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAnY2hhcmdlYmFjaydcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdkZWxldGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ2RlbGV0ZWQnXG4gICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgeyAvL2dhdGV3YXlcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlckRyb3Bkb3duLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdnYXRld2F5JyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dhdGV3YXknLFxuICAgICAgICAgICAgICAgICAgICB2bTogZmlsdGVyVk0uZ2F0ZXdheSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1F1YWxxdWVyIHVtJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ1BhZ2FybWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAnUGFnYXJtZSdcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdNb0lQJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ01vSVAnXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnUGF5UGFsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1BheVBhbCdcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdDcmVkaXRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ0Nyw6lkaXRvcydcbiAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7IC8vdmFsdWVcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlck51bWJlclJhbmdlLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdWYWxvcmVzIGVudHJlJyxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IGZpbHRlclZNLnZhbHVlLmd0ZSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdDogZmlsdGVyVk0udmFsdWUubHRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgeyAvL2NyZWF0ZWRfYXRcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlckRhdGVSYW5nZSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnUGVyw61vZG8gZG8gYXBvaW8nLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdDogZmlsdGVyVk0uY3JlYXRlZF9hdC5ndGUsXG4gICAgICAgICAgICAgICAgICAgIGxhc3Q6IGZpbHRlclZNLmNyZWF0ZWRfYXQubHRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBzdWJtaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UoZmlsdGVyVk0ucGFyYW1ldGVycygpKS50aGVuKG51bGwsIChzZXJ2ZXJFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcihzZXJ2ZXJFcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWx0ZXJWTTogZmlsdGVyVk0sXG4gICAgICAgICAgICBmaWx0ZXJCdWlsZGVyOiBmaWx0ZXJCdWlsZGVyLFxuICAgICAgICAgICAgbGlzdFZNOiB7XG4gICAgICAgICAgICAgICAgbGlzdDogbGlzdFZNLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0Fwb2lvcydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWJtaXQ6IHN1Ym1pdFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICB2aWV3KGN0cmwpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluRmlsdGVyLCB7XG4gICAgICAgICAgICAgICAgZm9ybTogY3RybC5maWx0ZXJWTS5mb3JtRGVzY3JpYmVyLFxuICAgICAgICAgICAgICAgIGZpbHRlckJ1aWxkZXI6IGN0cmwuZmlsdGVyQnVpbGRlcixcbiAgICAgICAgICAgICAgICBzdWJtaXQ6IGN0cmwuc3VibWl0XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluTGlzdCwge1xuICAgICAgICAgICAgICAgIHZtOiBjdHJsLmxpc3RWTSxcbiAgICAgICAgICAgICAgICBsaXN0SXRlbTogYWRtaW5Db250cmlidXRpb25JdGVtLFxuICAgICAgICAgICAgICAgIGxpc3REZXRhaWw6IGFkbWluQ29udHJpYnV0aW9uRGV0YWlsXG4gICAgICAgICAgICB9KVxuICAgICAgICBdO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluQ29udHJpYnV0aW9ucztcbiIsIi8qKlxuICogd2luZG93LmMubGFuZGluZ1NpZ251cCBjb21wb25lbnRcbiAqIEEgdmlzdWFsIGNvbXBvbmVudCB0aGF0IGRpc3BsYXlzIHNpZ251cCBlbWFpbCB0eXBpY2FsbHkgdXNlZCBvbiBsYW5kaW5nIHBhZ2VzLlxuICogSXQgYWNjZXB0cyBhIGN1c3RvbSBmb3JtIGFjdGlvbiB0byBhdHRhY2ggdG8gdGhpcmQtcGFydHkgc2VydmljZXMgbGlrZSBNYWlsY2hpbXBcbiAqXG4gKiBFeGFtcGxlOlxuICogdmlldzogKCkgPT4ge1xuICogICAgICAuLi5cbiAqICAgICAgbS5jb21wb25lbnQoYy5sYW5kaW5nU2lnbnVwLCB7XG4gKiAgICAgICAgICBidWlsZGVyOiB7XG4gKiAgICAgICAgICAgICAgY3VzdG9tQWN0aW9uOiAnaHR0cDovL2Zvcm1lbmRwb2ludC5jb20nXG4gKiAgICAgICAgICB9XG4gKiAgICAgIH0pXG4gKiAgICAgIC4uLlxuICogIH1cbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgbGFuZGluZ1NpZ251cCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgYnVpbGRlciA9IGFyZ3MuYnVpbGRlcixcbiAgICAgICAgICAgIGVtYWlsID0gbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIGVycm9yID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIHN1Ym1pdCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaC52YWxpZGF0ZUVtYWlsKGVtYWlsKCkpKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgc3VibWl0OiBzdWJtaXQsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBsZXQgZXJyb3JDbGFzc2VzID0gKCFjdHJsLmVycm9yKSA/ICcucG9zaXRpdmUuZXJyb3InIDogJyc7XG4gICAgICAgIHJldHVybiBtKCdmb3JtLnctZm9ybVtpZD1cImVtYWlsLWZvcm1cIl1bbWV0aG9kPVwicG9zdFwiXVthY3Rpb249XCInICsgYXJncy5idWlsZGVyLmN1c3RvbUFjdGlvbiArICdcIl0nLHtcbiAgICAgICAgICAgIG9uc3VibWl0OiBjdHJsLnN1Ym1pdFxuICAgICAgICB9LFtcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01JywgW1xuICAgICAgICAgICAgICAgIG0oYGlucHV0JHtlcnJvckNsYXNzZXN9LnctaW5wdXQudGV4dC1maWVsZC5tZWRpdW1bbmFtZT1cIkVNQUlMXCJdW3BsYWNlaG9sZGVyPVwiRGlnaXRlIHNldSBlbWFpbFwiXVt0eXBlPVwidGV4dFwiXWAsIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBoLlJEVHJhY2tlcignbGFuZGluZy1mbGV4JyksXG4gICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuZW1haWwpLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5lbWFpbCgpXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKGN0cmwuZXJyb3IoKSA/IG0oJ3NwYW4uZm9udHNpemUtc21hbGxlci50ZXh0LWVycm9yJywgJ0UtbWFpbCBpbnbDoWxpZG8nKSA6ICcnKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMycsIFtcbiAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWJ1dHRvbi5idG4uYnRuLWxhcmdlW3R5cGU9XCJzdWJtaXRcIl1bdmFsdWU9XCJDYWRhc3RyYXJcIl0nKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbGFuZGluZ1NpZ251cDtcbiIsImltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IGVycm9yID0gbS5wcm9wKCcnKSxcbiAgICByZXdhcmRzID0gbS5wcm9wKFtdKSxcbiAgICBub1Jld2FyZCA9IHtcbiAgICAgICAgaWQ6IC0xLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ09icmlnYWRvLiBFdSBzw7MgcXVlcm8gYWp1ZGFyIG8gcHJvamV0by4nLFxuICAgICAgICBtaW5pbXVtX3ZhbHVlOiAxMFxuICAgIH0sXG4gICAgY29udHJpYnV0aW9uVmFsdWUgPSBtLnByb3AoYCR7bm9SZXdhcmQubWluaW11bV92YWx1ZX0sMDBgKSxcbiAgICBzZWxlY3RlZFJld2FyZCA9IG0ucHJvcChub1Jld2FyZCksXG4gICAgdm0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgcHJvamVjdF9pZDogJ2VxJ1xuICAgIH0pO1xuXG5cbmNvbnN0IHJld2FyZHNMb2FkZXIgPSAocHJvamVjdF9pZCkgPT4ge1xuICAgIHZtLnByb2plY3RfaWQocHJvamVjdF9pZCk7XG5cbiAgICByZXR1cm4gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihtb2RlbHMucmV3YXJkRGV0YWlsLmdldFBhZ2VPcHRpb25zKHZtLnBhcmFtZXRlcnMoKSkpO1xufTtcblxuY29uc3QgZmV0Y2hSZXdhcmRzID0gKHByb2plY3RfaWQpID0+IHtcbiAgICByZXR1cm4gcmV3YXJkc0xvYWRlcihwcm9qZWN0X2lkKS5sb2FkKCkudGhlbihyZXdhcmRzKTtcbn07XG5cbmNvbnN0IHNlbGVjdFJld2FyZCA9IChyZXdhcmQpID0+ICgpID0+IHtcbiAgICBpZiAocmV3YXJkVk0uc2VsZWN0ZWRSZXdhcmQoKSAhPT0gcmV3YXJkKXtcbiAgICAgICAgcmV3YXJkVk0uc2VsZWN0ZWRSZXdhcmQocmV3YXJkKTtcblxuICAgICAgICBjb250cmlidXRpb25WYWx1ZShoLmFwcGx5TW9uZXRhcnlNYXNrKHJld2FyZC5taW5pbXVtX3ZhbHVlICsgJywwMCcpKTtcbiAgICB9XG59XG5cbmNvbnN0IGFwcGx5TWFzayA9IF8uY29tcG9zZShjb250cmlidXRpb25WYWx1ZSwgaC5hcHBseU1vbmV0YXJ5TWFzayk7XG5cbmNvbnN0IHJld2FyZFZNID0ge1xuICAgIGVycm9yOiBlcnJvcixcbiAgICByZXdhcmRzOiByZXdhcmRzLFxuICAgIGFwcGx5TWFzazogYXBwbHlNYXNrLFxuICAgIG5vUmV3YXJkOiBub1Jld2FyZCxcbiAgICBmZXRjaFJld2FyZHM6IGZldGNoUmV3YXJkcyxcbiAgICBzZWxlY3RSZXdhcmQ6IHNlbGVjdFJld2FyZCxcbiAgICBzZWxlY3RlZFJld2FyZDogc2VsZWN0ZWRSZXdhcmQsXG4gICAgY29udHJpYnV0aW9uVmFsdWU6IGNvbnRyaWJ1dGlvblZhbHVlLFxuICAgIHJld2FyZHNMb2FkZXI6IHJld2FyZHNMb2FkZXIsXG4gICAgZ2V0VmFsdWU6IGNvbnRyaWJ1dGlvblZhbHVlLFxuICAgIHNldFZhbHVlOiBjb250cmlidXRpb25WYWx1ZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcmV3YXJkVk07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcblxuXG5jb25zdCBpZFZNID0gaC5pZFZNLFxuICAgICAgdXNlckRldGFpbHMgPSBtLnByb3AoW10pLFxuICAgICAgY3VycmVudFVzZXIgPSBtLnByb3AoKSxcbiAgICAgIGNyZWF0ZWRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3VzZXJfaWQ6ICdlcSd9KTtcblxuY29uc3QgZ2V0VXNlckNyZWF0ZWRQcm9qZWN0cyA9ICh1c2VyX2lkKSA9PiB7XG4gICAgY3JlYXRlZFZNLnVzZXJfaWQodXNlcl9pZCkub3JkZXIoe3Byb2plY3RfaWQ6ICdkZXNjJ30pO1xuXG4gICAgbW9kZWxzLnByb2plY3REZXRhaWwucGFnZVNpemUoMyk7XG5cbiAgICBjb25zdCBsVXNlckNyZWF0ZWQgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKG1vZGVscy5wcm9qZWN0RGV0YWlsLmdldFBhZ2VPcHRpb25zKGNyZWF0ZWRWTS5wYXJhbWV0ZXJzKCkpKTtcblxuICAgIHJldHVybiBsVXNlckNyZWF0ZWQubG9hZCgpO1xufTtcblxuY29uc3QgZ2V0VXNlckNvbnRyaWJ1dGVkUHJvamVjdHMgPSAodXNlcl9pZCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICB1c2VyX2lkOiAnZXEnLFxuICAgICAgICBzdGF0ZTogJ2luJ1xuICAgIH0pO1xuXG4gICAgY29udGV4dFZNLnVzZXJfaWQodXNlcl9pZCkub3JkZXIoe1xuICAgICAgICBjcmVhdGVkX2F0OiAnZGVzYydcbiAgICB9KS5zdGF0ZShbJ3JlZnVuZGVkJywgJ3BlbmRpbmdfcmVmdW5kJywgJ3BhaWQnXSk7XG5cbiAgICBtb2RlbHMudXNlckNvbnRyaWJ1dGlvbi5wYWdlU2l6ZSgzKTtcblxuICAgIGNvbnN0IGxVc2VyQ29udHJpYnV0ZWQgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKFxuICAgICAgICBtb2RlbHMudXNlckNvbnRyaWJ1dGlvbi5nZXRQYWdlT3B0aW9ucyhjb250ZXh0Vk0ucGFyYW1ldGVycygpKSk7XG5cbiAgICByZXR1cm4gbFVzZXJDb250cmlidXRlZC5sb2FkKCk7XG59O1xuXG5cbmNvbnN0IGZldGNoVXNlciA9ICh1c2VyX2lkLCBoYW5kbGVQcm9taXNlID0gdHJ1ZSwgY3VzdG9tUHJvcCA9IGN1cnJlbnRVc2VyKSA9PiB7XG4gICAgaWRWTS5pZCh1c2VyX2lkKTtcblxuICAgIGNvbnN0IGxVc2VyID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihtb2RlbHMudXNlckRldGFpbC5nZXRSb3dPcHRpb25zKGlkVk0ucGFyYW1ldGVycygpKSk7XG5cbiAgICByZXR1cm4gIWhhbmRsZVByb21pc2UgPyBsVXNlci5sb2FkKCkgOiBsVXNlci5sb2FkKCkudGhlbihfLmNvbXBvc2UoY3VzdG9tUHJvcCwgXy5maXJzdCkpO1xufTtcblxuY29uc3QgdXNlclZNID0ge1xuICAgIGdldFVzZXJDcmVhdGVkUHJvamVjdHM6IGdldFVzZXJDcmVhdGVkUHJvamVjdHMsXG4gICAgZ2V0VXNlckNvbnRyaWJ1dGVkUHJvamVjdHM6IGdldFVzZXJDb250cmlidXRlZFByb2plY3RzLFxuICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlcixcbiAgICBmZXRjaFVzZXI6IGZldGNoVXNlclxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlclZNO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgcmV3YXJkVk0gZnJvbSAnLi9yZXdhcmQtdm0nO1xuaW1wb3J0IHVzZXJWTSBmcm9tICcuL3VzZXItdm0nO1xuXG5jb25zdCBpZFZNID0gaC5pZFZNLFxuICAgICAgY3VycmVudFByb2plY3QgPSBtLnByb3AoKSxcbiAgICAgIHVzZXJEZXRhaWxzID0gbS5wcm9wKCksXG4gICAgICB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3Byb2plY3RfaWQ6ICdlcSd9KTtcblxuY29uc3QgaW5pdCA9IChwcm9qZWN0X2lkLCBwcm9qZWN0X3VzZXJfaWQpID0+IHtcbiAgICB2bS5wcm9qZWN0X2lkKHByb2plY3RfaWQpO1xuICAgIFxuICAgIGNvbnN0IGxQcm9qZWN0ID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihtb2RlbHMucHJvamVjdERldGFpbC5nZXRSb3dPcHRpb25zKHZtLnBhcmFtZXRlcnMoKSkpO1xuICAgIFxuICAgIGZldGNoUGFyYWxsZWxEYXRhKHByb2plY3RfaWQsIHByb2plY3RfdXNlcl9pZCk7XG5cbiAgICByZXR1cm4gbFByb2plY3QubG9hZCgpLnRoZW4oKGRhdGEpID0+IGN1cnJlbnRQcm9qZWN0KF8uZmlyc3QoZGF0YSkpKTtcbn07XG5cbmNvbnN0IGZldGNoUGFyYWxsZWxEYXRhID0gKHByb2plY3RfaWQsIHByb2plY3RfdXNlcl9pZCkgPT4ge1xuICAgIHVzZXJWTS5mZXRjaFVzZXIocHJvamVjdF91c2VyX2lkLCB0cnVlLCB1c2VyRGV0YWlscyk7XG5cbiAgICByZXdhcmRWTS5mZXRjaFJld2FyZHMocHJvamVjdF9pZCk7XG59O1xuXG5jb25zdCBnZXRDdXJyZW50UHJvamVjdCA9ICgpID0+IHtcbiAgICBjb25zdCByb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcGxpY2F0aW9uJyksXG4gICAgICAgICAgZGF0YSA9IHJvb3QgJiYgcm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyYW1ldGVycycpO1xuICAgIFxuICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGNvbnN0IHtwcm9qZWN0X2lkLCBwcm9qZWN0X3VzZXJfaWR9ID0gY3VycmVudFByb2plY3QoSlNPTi5wYXJzZShkYXRhKSk7XG5cbiAgICAgICAgbS5yZWRyYXcodHJ1ZSk7XG5cbiAgICAgICAgZmV0Y2hQYXJhbGxlbERhdGEocHJvamVjdF9pZCwgcHJvamVjdF91c2VyX2lkKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjdXJyZW50UHJvamVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG5jb25zdCByb3V0ZVRvUHJvamVjdCA9IChwcm9qZWN0LCByZWYpID0+ICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnUm91dGluZyB0byBwcm9qZWN0OiAnLCBwcm9qZWN0KTtcbiAgICBjdXJyZW50UHJvamVjdChwcm9qZWN0KTtcblxuICAgIHJldHVybiBtLnJvdXRlKGguYnVpbGRMaW5rKHByb2plY3QucGVybWFsaW5rLCByZWYpLCB7cHJvamVjdF9pZDogcHJvamVjdC5wcm9qZWN0X2lkLCBwcm9qZWN0X3VzZXJfaWQ6IHByb2plY3QucHJvamVjdF91c2VyX2lkfSk7XG59O1xuXG5jb25zdCBwcm9qZWN0Vk0gPSB7XG4gICAgdXNlckRldGFpbHM6IHVzZXJEZXRhaWxzLFxuICAgIGdldEN1cnJlbnRQcm9qZWN0OiBnZXRDdXJyZW50UHJvamVjdCxcbiAgICBjdXJyZW50UHJvamVjdDogY3VycmVudFByb2plY3QsXG4gICAgcmV3YXJkRGV0YWlsczogcmV3YXJkVk0ucmV3YXJkcyxcbiAgICByb3V0ZVRvUHJvamVjdDogcm91dGVUb1Byb2plY3QsXG4gICAgaW5pdDogaW5pdFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Vk07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcblxuY29uc3QgcHJvamVjdEZyaWVuZHMgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QsXG4gICAgICAgICAgICAgIGZyaWVuZHNTYW1wbGUgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgICBsaXN0Vk0gPSBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy5jb250cmlidXRvciwgJ3VzZXJfaWQuZGVzYycsIHtcbiAgICAgICAgICAgICAgICAgICdQcmVmZXInOiAgJ2NvdW50PWV4YWN0J1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgZmlsdGVyVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6ICdlcScsXG4gICAgICAgICAgICAgICAgICBpc19mb2xsb3c6ICdlcSdcbiAgICAgICAgICAgICAgfSkucHJvamVjdF9pZChwcm9qZWN0LnByb2plY3RfaWQpLmlzX2ZvbGxvdyh0cnVlKTtcblxuICAgICAgICBpZiAoIWxpc3RWTS5jb2xsZWN0aW9uKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICBsaXN0Vk0uZmlyc3RQYWdlKGZpbHRlclZNLnBhcmFtZXRlcnMoKSkudGhlbigoKT0+e1xuICAgICAgICAgICAgICAgIGZyaWVuZHNTYW1wbGUoXy5zYW1wbGUobGlzdFZNLmNvbGxlY3Rpb24oKSwgMikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXG4gICAgICAgICAgICBsaXN0Vk06IGxpc3RWTSxcbiAgICAgICAgICAgIGZyaWVuZHNTYW1wbGU6IGZyaWVuZHNTYW1wbGVcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gY3RybC5wcm9qZWN0LFxuICAgICAgICAgICAgICBmcmllbmRzQ291bnQgPSBjdHJsLmxpc3RWTS5jb2xsZWN0aW9uKCkubGVuZ3RoO1xuICAgICAgICByZXR1cm4gbSgnLmZyaWVuZC1iYWNrZWQtY2FyZCcsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCcuZnJpZW5kLWZhY2VwaWxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGN0cmwuZnJpZW5kc1NhbXBsZSgpLCAodXNlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2ZpbGVfaW1nID0gXy5pc0VtcHR5KHVzZXIuZGF0YS5wcm9maWxlX2ltZ190aHVtYm5haWwpID8gJy9hc3NldHMvY2F0YXJzZV9ib290c3RyYXAvdXNlci5qcGcnIDogdXNlci5kYXRhLnByb2ZpbGVfaW1nX3RodW1ibmFpbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbShgaW1nLnVzZXItYXZhdGFyW3NyYz0nJHtwcm9maWxlX2ltZ30nXWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtc21hbGxlc3QuZnJpZW5kLW5hbWVwaWxlLmxpbmVoZWlnaHQtdGlnaHRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAoY3RybC5mcmllbmRzU2FtcGxlKCksICh1c2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlci5kYXRhLm5hbWUuc3BsaXQoJyAnKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbihmcmllbmRzQ291bnQgPiAyID8gJywgJyA6ICcgZSAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZnJpZW5kc0NvdW50ID4gMiA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJyBlICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYG1haXMgJHtmcmllbmRzQ291bnQgLSBjdHJsLmZyaWVuZHNTYW1wbGUoKS5sZW5ndGh9YFxuICAgICAgICAgICAgICAgICAgICAgICAgKV0gOiAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZnJpZW5kc0NvdW50ID4gMSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAnIGFwb2lhcmFtJyA6ICcgYXBvaW91JylcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RGcmllbmRzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgcHJvamVjdFZNIGZyb20gJy4uL3Ztcy9wcm9qZWN0LXZtJztcbmltcG9ydCBwcm9qZWN0RnJpZW5kcyBmcm9tICcuL3Byb2plY3QtZnJpZW5kcyc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLmNhcmQnKTtcbmNvbnN0IHByb2plY3RDYXJkID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0LFxuICAgICAgICAgICAgcHJvZ3Jlc3MgPSBwcm9qZWN0LnByb2dyZXNzLnRvRml4ZWQoMiksXG4gICAgICAgICAgICByZW1haW5pbmdUZXh0T2JqID0gaC50cmFuc2xhdGVkVGltZShwcm9qZWN0LnJlbWFpbmluZ190aW1lKSxcbiAgICAgICAgICAgIGVsYXBzZWRUZXh0T2JqID0gaC50cmFuc2xhdGVkVGltZShwcm9qZWN0LmVsYXBzZWRfdGltZSksXG4gICAgICAgICAgICB0eXBlID0gYXJncy50eXBlIHx8ICdzbWFsbCc7XG5cbiAgICAgICAgY29uc3QgY3NzID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3NzQ2xhc3NlcyA9IHtcbiAgICAgICAgICAgICAgICAgICdzbWFsbCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyOiAnLnctY29sLnctY29sLTQnLFxuICAgICAgICAgICAgICAgICAgICAgIGlubmVyV3JhcHBlcjogJy5jYXJkLXByb2plY3QuY2FyZC51LXJhZGl1cycsXG4gICAgICAgICAgICAgICAgICAgICAgdGh1bWI6ICcuY2FyZC1wcm9qZWN0LXRodW1iJyxcbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbldyYXBwZXI6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnLmNhcmQtcHJvamVjdC1kZXNjcmlwdGlvbi5hbHQnLFxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5LmxpbmVoZWlnaHQtdGlnaHQudS1tYXJnaW5ib3R0b20tMTAuZm9udHNpemUtYmFzZScsXG4gICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiAnLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeS51LW1hcmdpbmJvdHRvbS0yMCcsXG4gICAgICAgICAgICAgICAgICAgICAgaGVhZGxpbmU6ICcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5mb250Y29sb3Itc2Vjb25kYXJ5LmZvbnRzaXplLXNtYWxsZXInLFxuICAgICAgICAgICAgICAgICAgICAgIGNpdHk6ICcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5jYXJkLXByb2plY3QtYXV0aG9yLmFsdHQnXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgJ21lZGl1bSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyOiAnLnctY29sLnctY29sLTYnLFxuICAgICAgICAgICAgICAgICAgICAgIGlubmVyV3JhcHBlcjogJy5jYXJkLXByb2plY3QuY2FyZC51LXJhZGl1cycsXG4gICAgICAgICAgICAgICAgICAgICAgdGh1bWI6ICcuY2FyZC1wcm9qZWN0LXRodW1iLm1lZGl1bScsXG4gICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb25XcmFwcGVyOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJy5jYXJkLXByb2plY3QtZGVzY3JpcHRpb24uYWx0JyxcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwJyxcbiAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6ICcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5LnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICBoZWFkbGluZTogJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmZvbnRjb2xvci1zZWNvbmRhcnkuZm9udHNpemUtc21hbGxlcicsXG4gICAgICAgICAgICAgICAgICAgICAgY2l0eTogJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmNhcmQtcHJvamVjdC1hdXRob3IuYWx0dCdcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAnYmlnJzoge1xuICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXI6ICcuY2FyZC51LXJhZGl1cy5jYXJkLXByb2plY3QnLFxuICAgICAgICAgICAgICAgICAgICAgIGlubmVyV3JhcHBlcjogJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgdGh1bWI6ICcudy1jb2wudy1jb2wtOC53LWNvbC1tZWRpdW0tNi5jYXJkLXByb2plY3QtdGh1bWIuYmlnJyxcbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbldyYXBwZXI6ICcudy1jb2wudy1jb2wtNC53LWNvbC1tZWRpdW0tNicsXG4gICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICcuY2FyZC1wcm9qZWN0LWRlc2NyaXB0aW9uLmJpZycsXG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICcuZm9udHNpemUtbGFyZ2UuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiAnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnkudS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgIGhlYWRsaW5lOiAnLmZvbnRjb2xvci1zZWNvbmRhcnkuZm9udHNpemUtc21hbGxlcicsXG4gICAgICAgICAgICAgICAgICAgICAgY2l0eTogJy53LWhpZGRlbidcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBjc3NDbGFzc2VzW3R5cGVdO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGNhcmRNZXRlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZhaWxlZCA9ICgpID0+IHByb2plY3Quc3RhdGUgPT09ICdmYWlsZWQnID8gJ2NhcmQtc2Vjb25kYXJ5JyA6ICcnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYC5jYXJkLXByb2plY3QtbWV0ZXIuJHtwcm9qZWN0Lm1vZGV9LiR7cHJvamVjdC5zdGF0ZX0uJHtwcm9ncmVzc30uJHtmYWlsZWQoKX1gO1xuICAgICAgICBcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBsaW5rID0gJy8nICsgcHJvamVjdC5wZXJtYWxpbmsgKyAoYXJncy5yZWYgPyAnP3JlZj0nICsgYXJncy5yZWYgOiAnJyk7XG5cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3NzOiBjc3MsXG4gICAgICAgICAgICBsaW5rOiBsaW5rLFxuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIHByb2dyZXNzOiBwcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbWFpbmluZ1RleHRPYmo6IHJlbWFpbmluZ1RleHRPYmosXG4gICAgICAgICAgICBlbGFwc2VkVGV4dE9iajogZWxhcHNlZFRleHRPYmosXG4gICAgICAgICAgICBjYXJkTWV0ZXI6IGNhcmRNZXRlclxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3Q7XG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIG0oY3RybC5jc3MoKS53cmFwcGVyLCBbXG4gICAgICAgICAgICBtKGN0cmwuY3NzKCkuaW5uZXJXcmFwcGVyLCBbXG4gICAgICAgICAgICAgICAgbShgYSR7Y3RybC5jc3MoKS50aHVtYn1baHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIl1gLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IHByb2plY3RWTS5yb3V0ZVRvUHJvamVjdChwcm9qZWN0LCBhcmdzLnJlZiksXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1pbWFnZSc6IGB1cmwoJHtwcm9qZWN0LnByb2plY3RfaW1nfSlgLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnYmxvY2snXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBtKGN0cmwuY3NzKCkuZGVzY3JpcHRpb25XcmFwcGVyLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oY3RybC5jc3MoKS5kZXNjcmlwdGlvbiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbShjdHJsLmNzcygpLnRpdGxlLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5saW5rLWhpZGRlbltocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApO1wiXWAse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBwcm9qZWN0Vk0ucm91dGVUb1Byb2plY3QocHJvamVjdCwgYXJncy5yZWYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0LnByb2plY3RfbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbShjdHJsLmNzcygpLmF1dGhvciwgYCR7STE4bi50KCdieScsIEkxOG5TY29wZSgpKX0gJHtwcm9qZWN0Lm93bmVyX25hbWV9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKGN0cmwuY3NzKCkuaGVhZGxpbmUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmxpbmstaGlkZGVuW2hyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCJdYCx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IHByb2plY3RWTS5yb3V0ZVRvUHJvamVjdChwcm9qZWN0LCBhcmdzLnJlZilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LHByb2plY3QuaGVhZGxpbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbShjdHJsLmNzcygpLmNpdHksIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtbWFwLW1hcmtlci5mYS0xJywgJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgICR7cHJvamVjdC5jaXR5X25hbWUgPyBwcm9qZWN0LmNpdHlfbmFtZSA6ICcnfSwgJHtwcm9qZWN0LnN0YXRlX2Fjcm9ueW0gPyBwcm9qZWN0LnN0YXRlX2Fjcm9ueW0gOiAnJ31gXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbShjdHJsLmNhcmRNZXRlcigpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAoXy5jb250YWlucyhbJ3N1Y2Nlc3NmdWwnLCAnZmFpbGVkJywgJ3dhaXRpbmdfZnVuZHMnXSwgcHJvamVjdC5zdGF0ZSkpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0LnN0YXRlID09PSAnc3VjY2Vzc2Z1bCcgJiYgY3RybC5wcm9ncmVzcyA8IDEwMCA/IEkxOG4udChgZGlzcGxheV9zdGF0dXMuZmxleF9zdWNjZXNzZnVsYCwgSTE4blNjb3BlKCkpIDogSTE4bi50KGBkaXNwbGF5X3N0YXR1cy4ke3Byb2plY3Quc3RhdGV9YCwgSTE4blNjb3BlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcubWV0ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLm1ldGVyLWZpbGwnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogYCR7KGN0cmwucHJvZ3Jlc3MgPiAxMDAgPyAxMDAgOiBjdHJsLnByb2dyZXNzKX0lYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcuY2FyZC1wcm9qZWN0LXN0YXRzJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXNtYWxsLTQudy1jb2wtdGlueS00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkJywgYCR7TWF0aC5jZWlsKHByb2plY3QucHJvZ3Jlc3MpfSVgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXNtYWxsLTQudy1jb2wtdGlueS00LnUtdGV4dC1jZW50ZXItc21hbGwtb25seScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsIGBSJCAke2guZm9ybWF0TnVtYmVyKHByb2plY3QucGxlZGdlZCl9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LXRpZ2h0ZXN0JywgJ0xldmFudGFkb3MnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXNtYWxsLTQudy1jb2wtdGlueS00LnUtdGV4dC1yaWdodCcsIHByb2plY3QuZXhwaXJlc19hdCA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsIGAke2N0cmwucmVtYWluaW5nVGV4dE9iai50b3RhbH0gJHtjdHJsLnJlbWFpbmluZ1RleHRPYmoudW5pdH1gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmxpbmVoZWlnaHQtdGlnaHRlc3QnLCAoY3RybC5yZW1haW5pbmdUZXh0T2JqLnRvdGFsID4gMSkgPyAnUmVzdGFudGVzJyA6ICdSZXN0YW50ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmxpbmVoZWlnaHQtdGlnaHQnLCBbJ0luaWNpYWRvIGjDoScsbSgnYnInKSxgJHtjdHJsLmVsYXBzZWRUZXh0T2JqLnRvdGFsfSAke2N0cmwuZWxhcHNlZFRleHRPYmoudW5pdH1gXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIChhcmdzLnNob3dGcmllbmRzICYmIGN0cmwudHlwZSA9PT0gJ2JpZycgP1xuICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1tZWRpdW0tNicsIFttLmNvbXBvbmVudChwcm9qZWN0RnJpZW5kcywge3Byb2plY3Q6IHByb2plY3R9KV0pIDogJycpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIChhcmdzLnNob3dGcmllbmRzICYmIGN0cmwudHlwZSAhPT0gJ2JpZycgP1xuICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0RnJpZW5kcywge3Byb2plY3Q6IHByb2plY3R9KSA6ICcnKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q2FyZDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBwcm9qZWN0Q2FyZCBmcm9tICcuL3Byb2plY3QtY2FyZCc7XG5cbmNvbnN0IHByb2plY3RSb3cgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBhcmdzLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICB0aXRsZSA9IGFyZ3MudGl0bGUgfHwgY29sbGVjdGlvbi50aXRsZSxcbiAgICAgICAgICAgIHJlZiA9IGFyZ3MucmVmLFxuICAgICAgICAgICAgc2hvd0ZyaWVuZHMgPSBhcmdzLnNob3dGcmllbmRzLFxuICAgICAgICAgICAgd3JhcHBlciA9IGFyZ3Mud3JhcHBlciB8fCAnLnctc2VjdGlvbi5zZWN0aW9uLnUtbWFyZ2luYm90dG9tLTQwJztcblxuICAgICAgICBpZiAoY29sbGVjdGlvbi5sb2FkZXIoKSB8fCBjb2xsZWN0aW9uLmNvbGxlY3Rpb24oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbSh3cmFwcGVyLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAoIV8uaXNVbmRlZmluZWQoY29sbGVjdGlvbi50aXRsZSkgfHwgIV8uaXNVbmRlZmluZWQoY29sbGVjdGlvbi5oYXNoKSkgPyBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tMzAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKChzaG93RnJpZW5kcyA/ICcudy1jb2wudy1jb2wtOC53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicgOiAnLnctY29sLnctY29sLTEwLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JyksIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC1sb29zZXInLCB0aXRsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgoc2hvd0ZyaWVuZHMgPyAnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnIDogJy53LWNvbC53LWNvbC0yLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JyksIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzaG93RnJpZW5kcyA/IG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5idG4uYnRuLW5vLWJvcmRlci5idG4tc21hbGwuYnRuLXRlcmNpYXJ5W2hyZWY9XCIvY29ubmVjdC1mYWNlYm9vaz9yZWY9JHtyZWZ9XCJdYCwgXCJFbmNvbnRyYXIgYW1pZ29zXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKChzaG93RnJpZW5kcyA/ICcudy1jb2wudy1jb2wtNicgOiAnLnctY29sLnctY29sLTEyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmJ0bi5idG4tc21hbGwuYnRuLXRlcmNpYXJ5W2hyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCJdYCx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogKCkgPT4gbS5yb3V0ZSgnL2V4cGxvcmUnLHtyZWY6IHJlZiwgZmlsdGVyOiBjb2xsZWN0aW9uLmhhc2h9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwnVmVyIHRvZG9zJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pIDogJycsXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24ubG9hZGVyKCkgPyBoLmxvYWRlcigpIDogbSgnLnctcm93JywgXy5tYXAoY29sbGVjdGlvbi5jb2xsZWN0aW9uKCksIChwcm9qZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQocHJvamVjdENhcmQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogcmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dGcmllbmRzOiBzaG93RnJpZW5kc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtKCdkaXYnKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RSb3c7XG4iLCIvKipcbiAqIHdpbmRvdy5jLmxhbmRpbmdRQSBjb21wb25lbnRcbiAqIEEgdmlzdWFsIGNvbXBvbmVudCB0aGF0IGRpc3BsYXlzIGEgcXVlc3Rpb24vYW5zd2VyIGJveCB3aXRoIHRvZ2dsZVxuICpcbiAqIEV4YW1wbGU6XG4gKiB2aWV3OiAoKSA9PiB7XG4gKiAgICAgIC4uLlxuICogICAgICBtLmNvbXBvbmVudChjLmxhbmRpbmdRQSwge1xuICogICAgICAgICAgcXVlc3Rpb246ICdXaGF0cyB5b3VyIG5hbWU/JyxcbiAqICAgICAgICAgIGFuc3dlcjogJ0RhcnRoIFZhZGVyLidcbiAqICAgICAgfSlcbiAqICAgICAgLi4uXG4gKiAgfVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBsYW5kaW5nUUEgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaG93QW5zd2VyOiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJy5jYXJkLnFhLWNhcmQudS1tYXJnaW5ib3R0b20tMjAudS1yYWRpdXMuYnRuLXRlcmNpYXJ5JyxbXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZScsIHtcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuc2hvd0Fuc3dlci50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYXJncy5vbmNsaWNrICYmIGFyZ3Mub25jbGljaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGFyZ3MucXVlc3Rpb24pLFxuICAgICAgICAgICAgY3RybC5zaG93QW5zd2VyKCkgPyBtKCdwLnUtbWFyZ2ludG9wLTIwLmZvbnRzaXplLXNtYWxsJywgbS50cnVzdChhcmdzLmFuc3dlcikpIDogJydcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbGFuZGluZ1FBO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGxhbmRpbmdTaWdudXAgZnJvbSAnLi4vYy9sYW5kaW5nLXNpZ251cCc7XG5pbXBvcnQgcHJvamVjdFJvdyBmcm9tICcuLi9jL3Byb2plY3Qtcm93JztcbmltcG9ydCBsYW5kaW5nUUEgZnJvbSAnLi4vYy9sYW5kaW5nLXFhJztcblxuY29uc3QgRmxleCA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICBjb25zdCBzdGF0cyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBwcm9qZWN0cyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBsID0gbS5wcm9wKCksXG4gICAgICAgICAgICBzYW1wbGUzID0gXy5wYXJ0aWFsKF8uc2FtcGxlLCBfLCAzKSxcbiAgICAgICAgICAgIGJ1aWxkZXIgPSB7XG4gICAgICAgICAgICAgICAgY3VzdG9tQWN0aW9uOiAnaHR0cDovL2ZhenVtLmNhdGFyc2UubWUvb2JyaWdhZG8tbGFuZGluZy1jYXRhcnNlLWZsZXgnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWRkRGlzcXVzID0gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGguZGlzY3VzcygnaHR0cHM6Ly9jYXRhcnNlLm1lL2ZsZXgnLCAnZmxleF9wYWdlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZsZXhWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICAgICAgICAgIG1vZGU6ICdlcScsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdlcScsXG4gICAgICAgICAgICAgICAgcmVjb21tZW5kZWQ6ICdlcSdcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3RhdHNMb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKG1vZGVscy5zdGF0aXN0aWMuZ2V0Um93T3B0aW9ucygpKTtcblxuICAgICAgICBmbGV4Vk0ubW9kZSgnZmxleCcpLnN0YXRlKCdvbmxpbmUnKS5yZWNvbW1lbmRlZCh0cnVlKTtcblxuICAgICAgICBjb25zdCBwcm9qZWN0c0xvYWRlciA9IHBvc3RncmVzdC5sb2FkZXIobW9kZWxzLnByb2plY3QuZ2V0UGFnZU9wdGlvbnMoZmxleFZNLnBhcmFtZXRlcnMoKSkpO1xuXG4gICAgICAgIHN0YXRzTG9hZGVyLmxvYWQoKS50aGVuKHN0YXRzKTtcblxuICAgICAgICBwcm9qZWN0c0xvYWRlci5sb2FkKCkudGhlbihfLmNvbXBvc2UocHJvamVjdHMsIHNhbXBsZTMpKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWRkRGlzcXVzOiBhZGREaXNxdXMsXG4gICAgICAgICAgICBidWlsZGVyOiBidWlsZGVyLFxuICAgICAgICAgICAgc3RhdHNMb2FkZXI6IHN0YXRzTG9hZGVyLFxuICAgICAgICAgICAgc3RhdHM6IHN0YXRzLFxuICAgICAgICAgICAgcHJvamVjdHNMb2FkZXI6IHByb2plY3RzTG9hZGVyLFxuICAgICAgICAgICAgcHJvamVjdHM6IHtcbiAgICAgICAgICAgICAgICBsb2FkZXI6IHByb2plY3RzTG9hZGVyLFxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IHByb2plY3RzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IHN0YXRzID0gXy5maXJzdChjdHJsLnN0YXRzKCkpO1xuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLmhlcm8tZnVsbC5oZXJvLXplbG8nLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2ltZy5sb2dvLWZsZXgtaG9tZVtzcmM9XFwnL2Fzc2V0cy9sb2dvLWZsZXgucG5nXFwnXVt3aWR0aD1cXCczNTlcXCddJyksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS02MC53LWNvbC1wdXNoLTIudy1jb2wtOCcsICdWYW1vcyBjb25zdHJ1aXIgdW1hIG5vdmEgbW9kYWxpZGFkZSBkZSBjcm93ZGZ1bmRpbmchIENhZGFzdHJlIHNldSBlbWFpbCBlIHNhaWJhIGNvbW8gaW5zY3JldmVyIG8gc2V1IHByb2pldG8gbm8gZmxleCEnKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGxhbmRpbmdTaWdudXAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBjdHJsLmJ1aWxkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSwgW1xuICAgICAgICAgICAgICAgIG0oJy5zZWN0aW9uJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdC51LW1hcmdpbnRvcC00MC51LXRleHQtY2VudGVyJywgJ1ByYSBxdWVtIHNlcsOhPycpLCBtKCcuZm9udHNpemUtYmFzZS51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTYwJywgJ0luaWNpYXJlbW9zIGEgZmFzZSBkZSB0ZXN0ZXMgY29tIGNhdGVnb3JpYXMgZGUgcHJvamV0b3MgZXNwZWPDrWZpY2FzJyksIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nW3NyYz1cXCdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2MGUzOTNhMDFiNjZlMjUwYWNhNjdjYl9pY29uLXplbG8tY29tLnBuZ1xcJ11bd2lkdGg9XFwnMjEwXFwnXScpLCBtKCcuZm9udHNpemUtbGFyZ2VzdC5saW5laGVpZ2h0LWxvb3NlJywgJ0NhdXNhcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgncC5mb250c2l6ZS1iYXNlJywgJ0ZsZXhpYmlsaWRhZGUgcGFyYSBjYXVzYXMgZGUgaW1wYWN0byEgRXN0YXJlbW9zIGFiZXJ0b3MgYSBjYW1wYW5oYXMgZGUgb3JnYW5pemHDp8O1ZXMgb3UgcGVzc29hcyBmw61zaWNhcyBwYXJhIGFycmVjYWRhw6fDo28gZGUgcmVjdXJzb3MgcGFyYSBjYXVzYXMgcGVzc29haXMsIHByb2pldG9zIGFzc2lzdGVuY2lhaXMsIHNhw7pkZSwgYWp1ZGFzIGh1bWFuaXTDoXJpYXMsIHByb3Rlw6fDo28gYW9zIGFuaW1haXMsIGVtcHJlZW5kZWRvcmlzbW8gc29jaW9hbWJpZW50YWwsIGF0aXZpc21vIG91IHF1YWxxdWVyIGNvaXNhIHF1ZSB1bmEgYXMgcGVzc29hcyBwYXJhIGZhemVyIG8gYmVtLicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1tzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NjBlMzkyOWEwZGFlYTIzMGE1ZjEyY2RfaWNvbi16ZWxvLXBlc3NvYWwucG5nXFwnXVt3aWR0aD1cXCcyMTBcXCddJyksIG0oJy5mb250c2l6ZS1sYXJnZXN0LmxpbmVoZWlnaHQtbG9vc2UnLCAnVmFxdWluaGFzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCdwLmZvbnRzaXplLWJhc2UnLCAnQ2FtcGFuaGFzIHNpbXBsZXMgcXVlIHByZWNpc2FtIGRlIGZsZXhpYmlsaWRhZGUgcGFyYSBhcnJlY2FkYXIgZGluaGVpcm8gY29tIHBlc3NvYXMgcHLDs3hpbWFzLiBFc3RhcmVtb3MgYWJlcnRvcyBhIHVtYSB2YXJpZWRhZGUgZGUgY2FtcGFuaGFzIHBlc3NvYWlzIHF1ZSBwb2RlbSBpciBkZXNkZSBjb2JyaXIgY3VzdG9zIGRlIGVzdHVkb3MgYSBhanVkYXIgcXVlbSBwcmVjaXNhIGRlIHRyYXRhbWVudG8gbcOpZGljby4gRGUganVudGFyIGEgZ3JhbmEgcGFyYSBmYXplciBhcXVlbGEgZmVzdGEgYSBjb21wcmFyIHByZXNlbnRlcyBwYXJhIGFsZ3XDqW0gY29tIGEgYWp1ZGEgZGEgZ2FsZXJhLiAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pLCBtKCcudy1zZWN0aW9uLnNlY3Rpb24uYmctZ3JlZW5saW1lLmZvbnRjb2xvci1uZWdhdGl2ZScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlc3QudS1tYXJnaW50b3AtNDAudS1tYXJnaW5ib3R0b20tNjAudS10ZXh0LWNlbnRlcicsICdDb21vIGZ1bmNpb25hcsOhPycpLCBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNDAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nW3NyYz1cXCdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2MGUzOWM1NzhiMjg0NDkzZTJhNDI4YV96ZWxvLW1vbmV5LnBuZ1xcJ11bd2lkdGg9XFwnMTgwXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMTAudS10ZXh0LWNlbnRlci5mb250d2VpZ2h0LXNlbWlib2xkJywgJ0ZpcXVlIGNvbSBxdWFudG8gYXJyZWNhZGFyJyksIG0oJ3AudS10ZXh0LWNlbnRlci5mb250c2l6ZS1iYXNlJywgJ08gZmxleCDDqSBwYXJhIGltcHVsc2lvbmFyIGNhbXBhbmhhcyBvbmRlIHRvZG8gZGluaGVpcm8gw6kgYmVtIHZpbmRvISBWb2PDqiBmaWNhIGNvbSB0dWRvIHF1ZSBjb25zZWd1aXIgYXJyZWNhZGFyLicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1tzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NjBlMzlkMzdjMDEzZDRhM2VlNjg3ZDJfaWNvbi1yZXdhcmQucG5nXFwnXVt3aWR0aD1cXCcxODBcXCddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0xMC51LXRleHQtY2VudGVyLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnTsOjbyBwcmVjaXNhIGRlIHJlY29tcGVuc2FzJyksIG0oJ3AudS10ZXh0LWNlbnRlci5mb250c2l6ZS1iYXNlJywgJ05vIGZsZXggb2ZlcmVjZXIgcmVjb21wZW5zYXMgw6kgb3BjaW9uYWwuIFZvY8OqIGVzY29saGUgc2Ugb2ZlcmVjw6otbGFzIGZheiBzZW50aWRvIHBhcmEgbyBzZXUgcHJvamV0byBlIGNhbXBhbmhhLicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNDAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nW3NyYz1cXCdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2MGUzOWZiMDFiNjZlMjUwYWNhNjdlM19pY29uLWN1cmFkLnBuZ1xcJ11bd2lkdGg9XFwnMTgwXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMTAudS10ZXh0LWNlbnRlci5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1ZvY8OqIG1lc21vIHB1YmxpY2Egc2V1IHByb2pldG8nKSwgbSgncC51LXRleHQtY2VudGVyLmZvbnRzaXplLWJhc2UnLCAnVG9kb3Mgb3MgcHJvamV0b3MgaW5zY3JpdG9zIG5vIGZsZXggZW50cmFtIG5vIGFyLiBBZ2lsaWRhZGUgZSBmYWNpbGlkYWRlIHBhcmEgdm9jw6ogY2FwdGFyIHJlY3Vyc29zIGF0cmF2w6lzIGRhIGludGVybmV0LicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1tzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NjBlMzllNzdjMDEzZDRhM2VlNjg3ZDRfaWNvbi10aW1lLnBuZ1xcJ11bd2lkdGg9XFwnMTgwXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMTAudS10ZXh0LWNlbnRlci5mb250d2VpZ2h0LXNlbWlib2xkJywgJ0VuY2VycmUgYSBjYW1wYW5oYSBxdWFuZG8gcXVpc2VyJyksIG0oJ3AudS10ZXh0LWNlbnRlci5mb250c2l6ZS1iYXNlJywgJ07Do28gaMOhIGxpbWl0ZSBkZSB0ZW1wbyBkZSBjYXB0YcOnw6NvLiBWb2PDqiBlc2NvbGhlICBxdWFuZG8gZW5jZXJyYXIgc3VhIGNhbXBhbmhhIGUgcmVjZWJlciBvcyB2YWxvcmVzIGFycmVjYWRhZG9zLicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1lZGl0YWJsZS5mb250c2l6ZS1sYXJnZXIudS1tYXJnaW50b3AtNDAudS1tYXJnaW4tYm90dG9tLTQwLnUtdGV4dC1jZW50ZXInLCAnQ29uaGXDp2EgYWxndW5zIGRvcyBwcmltZWlyb3MgcHJvamV0b3MgZmxleCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5wcm9qZWN0c0xvYWRlcigpID8gaC5sb2FkZXIoKSA6IG0uY29tcG9uZW50KHByb2plY3RSb3csIHtjb2xsZWN0aW9uOiBjdHJsLnByb2plY3RzLCByZWY6ICdjdHJzZV9mbGV4Jywgd3JhcHBlcjogJy53LXJvdy51LW1hcmdpbnRvcC00MCd9KVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uZGl2aWRlcicpLFxuICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlci51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTYwLnUtbWFyZ2ludG9wLTQwJywgJ0TDunZpZGFzJyksIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS02MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQobGFuZGluZ1FBLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ1F1YWlzIHPDo28gYXMgdGF4YXMgZGEgbW9kYWxpZGFkZSBmbGV4w612ZWw/ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6ICdDb21vIG5vIENhdGFyc2UsIGVudmlhciB1bSBwcm9qZXRvIG7Do28gY3VzdGEgbmFkYSEgQSB0YXhhIGNvYnJhZGEgbm8gc2VydmnDp28gQ2F0YXJzZSBmbGV4IMOpIGRlIDEzJSBzb2JyZSBvIHZhbG9yIGFycmVjYWRhZG8uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQobGFuZGluZ1FBLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ0RlIG9uZGUgdmVtIG8gZGluaGVpcm8gZG8gbWV1IHByb2pldG8/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogJ0ZhbcOtbGlhLCBhbWlnb3MsIGbDo3MgZSBtZW1icm9zIGRlIGNvbXVuaWRhZGVzIHF1ZSB2b2PDqiBmYXogcGFydGUgc8OjbyBzZXVzIG1haW9yZXMgY29sYWJvcmFkb3Jlcy4gU8OjbyBlbGVzIHF1ZSBpcsOjbyBkaXZ1bGdhciBzdWEgY2FtcGFuaGEgcGFyYSBhcyBwZXNzb2FzIHF1ZSBlbGVzIGNvbmhlY2VtLCBlIGFzc2ltIG8gY8OtcmN1bG8gZGUgYXBvaWFkb3JlcyB2YWkgYXVtZW50YW5kbyBlIGEgc3VhIGNhbXBhbmhhIGdhbmhhIGZvcsOnYS4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChsYW5kaW5nUUEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAnUXVhbCBhIGRpZmVyZW7Dp2EgZW50cmUgbyBmbGV4w612ZWwgZSBvIFwidHVkbyBvdSBuYWRhXCI/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogJ0F0dWFsbWVudGUgbyBDYXRhcnNlIHV0aWxpemEgYXBlbmFzIG8gbW9kZWxvIFwidHVkbyBvdSBuYWRhXCIsIG9uZGUgdm9jw6ogc8OzIGZpY2EgY29tIG8gZGluaGVpcm8gc2UgYmF0ZXIgYSBtZXRhIGRlIGFycmVjYWRhw6fDo28gZGVudHJvIGRvIHByYXpvIGRhIGNhbXBhbmhhLiBPIG1vZGVsbyBmbGV4w612ZWwgw6kgZGlmZXJlbnRlIHBvaXMgcGVybWl0ZSBxdWUgbyByZWFsaXphZG9yIGZpcXVlIGNvbSBvIHF1ZSBhcnJlY2FkYXIsIGluZGVwZW5kZW50ZSBkZSBhdGluZ2lyIG91IG7Do28gYSBtZXRhIGRvIHByb2pldG8gbm8gcHJhem8gZGEgY2FtcGFuaGEuIE7Do28gaGF2ZXLDoSBsaW1pdGUgZGUgdGVtcG8gcGFyYSBhcyBjYW1wYW5oYXMuIE5vc3NvIHNpc3RlbWEgZmxleMOtdmVsIHNlcsOhIGFsZ28gbm92byBlbSByZWxhw6fDo28gYW9zIG1vZGVsb3MgcXVlIGV4aXN0ZW0gYXR1YWxtZW50ZSBubyBtZXJjYWRvLidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChsYW5kaW5nUUEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAnUG9zc28gaW5zY3JldmVyIHByb2pldG9zIHBhcmEgYSBtb2RhbGlkYWRlIGZsZXjDrXZlbCBqw6E/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogJ1NpbS4gQ2FkYXN0cmUgc2V1IGVtYWlsIGUgc2FpYmEgY29tbyBpbnNjcmV2ZXIgbyBzZXUgcHJvamV0byBubyBmbGV4ISdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGxhbmRpbmdRQSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246ICdQb3IgcXXDqiB2b2PDqnMgcXVlcmVtIGZhemVyIG8gQ2F0YXJzZSBmbGV4PycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6ICdBY3JlZGl0YW1vcyBxdWUgbyBhbWJpZW50ZSBkbyBjcm93ZGZ1bmRpbmcgYnJhc2lsZWlybyBhaW5kYSB0ZW0gZXNwYcOnbyBwYXJhIG11aXRhcyBhw6fDtWVzLCB0ZXN0ZXMgZSBleHBlcmltZW50YcOnw7VlcyBwYXJhIGVudGVuZGVyIGRlIGZhdG8gbyBxdWUgYXMgcGVzc29hcyBwcmVjaXNhbS4gU29uaGFtb3MgY29tIHRvcm5hciBvIGZpbmFuY2lhbWVudG8gY29sZXRpdm8gdW0gaMOhYml0byBubyBCcmFzaWwuIE8gQ2F0YXJzZSBmbGV4IMOpIG1haXMgdW0gcGFzc28gbmVzc2EgZGlyZcOnw6NvLidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGxhbmRpbmdRQSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246ICdRdWFuZG8gdm9jw6pzIGlyw6NvIGxhbsOnYXIgbyBDYXRhcnNlIGZsZXg/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogJ0FpbmRhIG7Do28gc2FiZW1vcyBxdWFuZG8gYWJyaXJlbW9zIG8gZmxleCBwYXJhIG8gcMO6YmxpY28gZW0gZ2VyYWwsIG1hcyB2b2PDqiBwb2RlIGNhZGFzdHJhciBzZXUgZW1haWwgbmVzc2EgcMOhZ2luYSBlIHJlY2ViZXIgdW0gbWF0ZXJpYWwgZXNwZWNpYWwgZGUgY29tbyBpbnNjcmV2ZXIgc2V1IHByb2pldG8uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi1sYXJnZS51LXRleHQtY2VudGVyLmJnLXB1cnBsZScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLmZvbnRjb2xvci1uZWdhdGl2ZScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXN0JywgJ0luc2NyZXZhIHNldSBwcm9qZXRvIScpLCBtKCcuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS02MCcsICdDYWRhc3RyZSBzZXUgZW1haWwgZSBzYWliYSBjb21vIGluc2NyZXZlciBvIHNldSBwcm9qZXRvIG5vIGZsZXghJyksIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGxhbmRpbmdTaWdudXAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogY3RybC5idWlsZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSwgbSgnLnctc2VjdGlvbi5zZWN0aW9uLW9uZS1jb2x1bW4uYmctY2F0YXJzZS16ZWxvLnNlY3Rpb24tbGFyZ2Vbc3R5bGU9XCJtaW4taGVpZ2h0OiA1MHZoO1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1lZGl0YWJsZS51LW1hcmdpbmJvdHRvbS00MC5mb250c2l6ZS1sYXJnZXIubGluZWhlaWdodC10aWdodC5mb250Y29sb3ItbmVnYXRpdmUnLCAnTyBmbGV4IMOpIHVtIGV4cGVyaW1lbnRvIGUgaW5pY2lhdGl2YSBkbyBDYXRhcnNlLCBtYWlvciBwbGF0YWZvcm1hIGRlIGNyb3dkZnVuZGluZyBkbyBCcmFzaWwuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS10ZXh0LWNlbnRlcicsIChjdHJsLnN0YXRzTG9hZGVyKCkpID8gaC5sb2FkZXIoKSA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWp1bWJvLnRleHQtc3VjY2Vzcy5saW5laGVpZ2h0LWxvb3NlJywgaC5mb3JtYXROdW1iZXIoc3RhdHMudG90YWxfY29udHJpYnV0b3JzLCAwLCAzKSksIG0oJ3Auc3RhcnQtc3RhdHMuZm9udHNpemUtYmFzZS5mb250Y29sb3ItbmVnYXRpdmUnLCAnUGVzc29hcyBqYSBhcG9pYXJhbSBwZWxvIG1lbm9zIDAxIHByb2pldG8gbm8gQ2F0YXJzZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1qdW1iby50ZXh0LXN1Y2Nlc3MubGluZWhlaWdodC1sb29zZScsIGguZm9ybWF0TnVtYmVyKHN0YXRzLnRvdGFsX3Byb2plY3RzX3N1Y2Nlc3MsIDAsIDMpKSwgbSgncC5zdGFydC1zdGF0cy5mb250c2l6ZS1iYXNlLmZvbnRjb2xvci1uZWdhdGl2ZScsICdQcm9qZXRvcyBqYSBmb3JhbSBmaW5hbmNpYWRvcyBub8KgQ2F0YXJzZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1qdW1iby50ZXh0LXN1Y2Nlc3MubGluZWhlaWdodC1sb29zZScsIHN0YXRzLnRvdGFsX2NvbnRyaWJ1dGVkLnRvU3RyaW5nKCkuc2xpY2UoMCwgMikgKyAnIG1pbGjDtWVzJyksIG0oJ3Auc3RhcnQtc3RhdHMuZm9udHNpemUtYmFzZS5mb250Y29sb3ItbmVnYXRpdmUnLCAnRm9yYW0gaW52ZXN0aWRvcyBlbSBpZGVpYXMgcHVibGljYWRhcyBubyBDYXRhcnNlJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24uYmctYmx1ZS1vbmUuZm9udGNvbG9yLW5lZ2F0aXZlJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0yMCcsICdSZWNvbWVuZGUgbyBDYXRhcnNlIGZsZXggcGFyYSBhbWlnb3MhICcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02LnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02Lnctc3ViLWNvbC1taWRkbGUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcuaWNvbi1zaGFyZS1tb2JpbGVbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTNhM2Y2NmUwNWViNjE0NDE3MWQ4ZWRiX2ZhY2Vib29rLXh4bC5wbmdcXCddJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1idXR0b24uYnRuLmJ0bi1sYXJnZS5idG4tZmJbaHJlZj1cImh0dHA6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9aHR0cHM6Ly93d3cuY2F0YXJzZS5tZS9mbGV4P3JlZj1mYWNlYm9vayZ0aXRsZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCdDb25oZcOnYSBvIG5vdm8gQ2F0YXJzZSBGbGV4IScpICsgJ1wiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLCAnQ29tcGFydGlsaGFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy5pY29uLXNoYXJlLW1vYmlsZVtzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81M2EzZjY1MTA1ZWI2MTQ0MTcxZDhlZGFfdHdpdHRlci0yNTYucG5nXFwnXScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tbGFyZ2UuYnRuLXR3ZWV0W2hyZWY9XCJodHRwOi8vdHdpdHRlci5jb20vP3N0YXR1cz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCdWYW1vcyBjb25zdHJ1aXIgdW1hIG5vdmEgbW9kYWxpZGFkZSBkZSBjcm93ZGZ1bmRpbmcgcGFyYSBvIENhdGFyc2UhIEp1bnRlLXNlIGEgbsOzcywgaW5zY3JldmEgc2V1IGVtYWlsIScpICsgJ2h0dHBzOi8vd3d3LmNhdGFyc2UubWUvZmxleD9yZWY9dHdpdHRlclwiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLCAnVHVpdGFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pLCBtKCcudy1zZWN0aW9uLnNlY3Rpb24tbGFyZ2UuYmctZ3JlZW5saW1lJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcjcGFydGljaXBlLWRvLWRlYmF0ZS51LXRleHQtY2VudGVyJywge2NvbmZpZzogaC50b0FuY2hvcigpfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2gxLmZvbnRzaXplLWxhcmdlc3QuZm9udGNvbG9yLW5lZ2F0aXZlJywnQ29uc3RydWEgbyBmbGV4IGNvbm9zY28nKSwgbSgnLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tNjAuZm9udGNvbG9yLW5lZ2F0aXZlJywgJ0luaWNpZSB1bWEgY29udmVyc2EsIHBlcmd1bnRlLCBjb21lbnRlLCBjcml0aXF1ZSBlIGZhw6dhIHN1Z2VzdMO1ZXMhJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnI2Rpc3F1c190aHJlYWQuY2FyZC51LXJhZGl1c1tzdHlsZT1cIm1pbi1oZWlnaHQ6IDUwdmg7XCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC5hZGREaXNxdXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgXTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGbGV4O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Ub29sdGlwIGNvbXBvbmVudFxuICogQSBjb21wb25lbnQgdGhhdCBhbGxvd3MgeW91IHRvIHNob3cgYSB0b29sdGlwIG9uXG4gKiBhIHNwZWNpZmllZCBlbGVtZW50IGhvdmVyLiBJdCByZWNlaXZlcyB0aGUgZWxlbWVudCB5b3Ugd2FudFxuICogdG8gdHJpZ2dlciB0aGUgdG9vbHRpcCBhbmQgYWxzbyB0aGUgdGV4dCB0byBkaXNwbGF5IGFzIHRvb2x0aXAuXG4gKlxuICogRXhhbXBsZSBvZiB1c2U6XG4gKiB2aWV3OiAoKSA9PiB7XG4gKiAgICAgbGV0IHRvb2x0aXAgPSAoZWwpID0+IHtcbiAqICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChjLlRvb2x0aXAsIHtcbiAqICAgICAgICAgICAgICBlbDogZWwsXG4gKiAgICAgICAgICAgICAgdGV4dDogJ3RleHQgdG8gdG9vbHRpcCcsXG4gKiAgICAgICAgICAgICAgd2lkdGg6IDMwMFxuICogICAgICAgICAgfSlcbiAqICAgICB9XG4gKlxuICogICAgIHJldHVybiB0b29sdGlwKCdhI2xpbmstd3RoLXRvb2x0aXBbaHJlZj1cIiNcIl0nKTtcbiAqXG4gKiB9XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IHRvb2x0aXAgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBwYXJlbnRIZWlnaHQgPSBtLnByb3AoMCksXG4gICAgICAgICAgICB3aWR0aCA9IG0ucHJvcChhcmdzLndpZHRoIHx8IDI4MCksXG4gICAgICAgICAgICB0b3AgPSBtLnByb3AoMCksXG4gICAgICAgICAgICBsZWZ0ID0gbS5wcm9wKDApLFxuICAgICAgICAgICAgb3BhY2l0eSA9IG0ucHJvcCgwKSxcbiAgICAgICAgICAgIHBhcmVudE9mZnNldCA9IG0ucHJvcCh7dG9wOiAwLCBsZWZ0OiAwfSksXG4gICAgICAgICAgICB0b29sdGlwID0gaC50b2dnbGVQcm9wKDAsIDEpLFxuICAgICAgICAgICAgdG9nZ2xlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRvb2x0aXAudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc2V0UGFyZW50UG9zaXRpb24gPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcbiAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCl7XG4gICAgICAgICAgICAgICAgcGFyZW50T2Zmc2V0KGguY3VtdWxhdGl2ZU9mZnNldChlbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAgICAgc2V0UG9zaXRpb24gPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgZWxUb3AgPSBlbC5vZmZzZXRIZWlnaHQgKyBlbC5vZmZzZXRQYXJlbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgKGVsLm9mZnNldFdpZHRoICsgMiAqIHBhcnNlRmxvYXQoc3R5bGUucGFkZGluZ0xlZnQpICsgMzApKXsgLy8zMCBoZXJlIGlzIGEgc2FmZSBtYXJnaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLndpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSAzMDsgLy9BZGRpbmcgdGhlIHNhZmUgbWFyZ2luXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0KC1wYXJlbnRPZmZzZXQoKS5sZWZ0ICsgMTUpOyAvL3Bvc2l0aW9uaW5nIGNlbnRlciBvZiB3aW5kb3csIGNvbnNpZGVyaW5nIG1hcmdpblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChwYXJlbnRPZmZzZXQoKS5sZWZ0ICsgKGVsLm9mZnNldFdpZHRoIC8gMikpIDw9IHdpbmRvdy5pbm5lcldpZHRoICYmIChwYXJlbnRPZmZzZXQoKS5sZWZ0IC0gKGVsLm9mZnNldFdpZHRoIC8gMikpID49IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCgtZWwub2Zmc2V0V2lkdGggLyAyKTsgLy9Qb3NpdGlvbmluZyB0byB0aGUgY2VudGVyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHBhcmVudE9mZnNldCgpLmxlZnQgKyAoZWwub2Zmc2V0V2lkdGggLyAyKSkgPiB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCgtZWwub2Zmc2V0V2lkdGggKyBlbC5vZmZzZXRQYXJlbnQub2Zmc2V0V2lkdGgpOyAvL1Bvc2l0aW9uaW5nIHRvIHRoZSBsZWZ0XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHBhcmVudE9mZnNldCgpLmxlZnQgLSAoZWwub2Zmc2V0V2lkdGggLyAyKSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0KC1lbC5vZmZzZXRQYXJlbnQub2Zmc2V0V2lkdGgpOyAvL1Bvc2l0aW9uaW5nIHRvIHRoZSByaWdodFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRvcCgtZWxUb3ApOyAvL1NldHRpbmcgdG9wIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgICAgb3BhY2l0eTogb3BhY2l0eSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHRvb2x0aXAsXG4gICAgICAgICAgICB0b2dnbGU6IHRvZ2dsZSxcbiAgICAgICAgICAgIHNldFBvc2l0aW9uOiBzZXRQb3NpdGlvbixcbiAgICAgICAgICAgIHNldFBhcmVudFBvc2l0aW9uOiBzZXRQYXJlbnRQb3NpdGlvblxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGxldCB3aWR0aCA9IGN0cmwud2lkdGgoKTtcbiAgICAgICAgcmV0dXJuIG0oYXJncy5lbCwge1xuICAgICAgICAgICAgb25jbGljazogY3RybC50b2dnbGUsXG4gICAgICAgICAgICBjb25maWc6IGN0cmwuc2V0UGFyZW50UG9zaXRpb24sXG4gICAgICAgICAgICBzdHlsZToge2N1cnNvcjogJ3BvaW50ZXInfVxuICAgICAgICB9LCBjdHJsLnRvb2x0aXAoKSA/IFtcbiAgICAgICAgICAgIG0oYC50b29sdGlwLmRhcmtbc3R5bGU9XCJ3aWR0aDogJHt3aWR0aH1weDsgdG9wOiAke2N0cmwudG9wKCl9cHg7IGxlZnQ6ICR7Y3RybC5sZWZ0KCl9cHg7XCJdYCwge1xuICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC5zZXRQb3NpdGlvblxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdCcsIGFyZ3MudGV4dClcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0gOiAnJyk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9vbHRpcDtcbiIsIi8qKlxuICogd2luZG93LmMuUHJvamVjdERhc2hib2FyZE1lbnUgY29tcG9uZW50XG4gKiBidWlsZCBkYXNoYm9hcmQgcHJvamVjdCBtZW51IGZvciBwcm9qZWN0IG93bmVyc1xuICogYW5kIGFkbWluLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlByb2plY3REYXNoYm9hcmRNZW51LCB7XG4gKiAgICAgcHJvamVjdDogcHJvamVjdERldGFpbCBPYmplY3QsXG4gKiB9KVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuZGFzaGJvYXJkX25hdicpO1xuY29uc3QgbGlua3NTY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLmRhc2hib2FyZF9uYXZfbGlua3MnKTtcblxuY29uc3QgcHJvamVjdERhc2hib2FyZE1lbnUgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSxcbiAgICAgICAgICAgIGVkaXRMaW5rc1RvZ2dsZSA9IGgudG9nZ2xlUHJvcCh0cnVlLCBmYWxzZSksXG4gICAgICAgICAgICBzaG93UHVibGlzaCA9IGgudG9nZ2xlUHJvcCh0cnVlLCBmYWxzZSksXG4gICAgICAgICAgICBib2R5VG9nZ2xlRm9yTmF2ID0gaC50b2dnbGVQcm9wKCdib2R5LXByb2plY3Qgb3BlbicsICdib2R5LXByb2plY3QgY2xvc2VkJyk7XG5cbiAgICAgICAgaWYgKGFyZ3MucHJvamVjdCgpLmlzX3B1Ymxpc2hlZCkge1xuICAgICAgICAgICAgZWRpdExpbmtzVG9nZ2xlLnRvZ2dsZShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJncy5oaWRlUHVibGlzaCkge1xuICAgICAgICAgICAgc2hvd1B1Ymxpc2gudG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgZWRpdExpbmtzVG9nZ2xlOiBlZGl0TGlua3NUb2dnbGUsXG4gICAgICAgICAgICBzaG93UHVibGlzaDogc2hvd1B1Ymxpc2gsXG4gICAgICAgICAgICBib2R5VG9nZ2xlRm9yTmF2OiBib2R5VG9nZ2xlRm9yTmF2XG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCgpLFxuICAgICAgICAgICAgICBwcm9qZWN0Um91dGUgPSAnL3Byb2plY3RzLycgKyBwcm9qZWN0LmlkLFxuICAgICAgICAgICAgICBlZGl0Um91dGUgPSBwcm9qZWN0Um91dGUgKyAnL2VkaXQnLFxuICAgICAgICAgICAgICBlZGl0TGlua0NsYXNzID0gJ2Rhc2hib2FyZC1uYXYtbGluay1sZWZ0ICcgKyAocHJvamVjdC5pc19wdWJsaXNoZWQgPyAnaW5kZW50JyA6ICcnKTtcbiAgICAgICAgbGV0IG9wdGlvbmFsT3B0ID0gbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJyAob3BjaW9uYWwpJyk7XG5cbiAgICAgICAgY3RybC5ib2R5LmNsYXNzTmFtZSA9IGN0cmwuYm9keVRvZ2dsZUZvck5hdigpO1xuXG4gICAgICAgIHJldHVybiBtKCcjcHJvamVjdC1uYXYnLCBbXG4gICAgICAgICAgICBtKCcucHJvamVjdC1uYXYtd3JhcHBlcicsIFtcbiAgICAgICAgICAgICAgICBtKCduYXYudy1zZWN0aW9uLmRhc2hib2FyZC1uYXYuc2lkZScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnYSNkYXNoYm9hcmRfcHJldmlld19saW5rLnctaW5saW5lLWJsb2NrLmRhc2hib2FyZC1wcm9qZWN0LW5hbWVbaHJlZj1cIicgKyAocHJvamVjdC5pc19wdWJsaXNoZWQgPyAnLycgKyBwcm9qZWN0LnBlcm1hbGluayA6IGVkaXRSb3V0ZSArICcjcHJldmlldycpICsgJ1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy50aHVtYi1wcm9qZWN0LWRhc2hib2FyZFtzcmM9XCInICsgKF8uaXNOdWxsKHByb2plY3QubGFyZ2VfaW1hZ2UpID8gJy9hc3NldHMvdGh1bWItcHJvamVjdC5wbmcnIDogcHJvamVjdC5sYXJnZV9pbWFnZSkgKyAnXCJdW3dpZHRoPVwiMTE0XCJdJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLW5lZ2F0aXZlLmxpbmVoZWlnaHQtdGlnaHQuZm9udHNpemUtc21hbGwnLCBwcm9qZWN0Lm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbShgaW1nLnUtbWFyZ2ludG9wLTEwW3NyYz1cIi9hc3NldHMvY2F0YXJzZV9ib290c3RyYXAvYmFkZ2UtJHtwcm9qZWN0Lm1vZGV9LWgucG5nXCJdW3dpZHRoPTgwXWApXG5cbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJyNpbmZvLWxpbmtzJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNkYXNoYm9hcmRfaG9tZV9saW5rW2NsYXNzPVwiZGFzaGJvYXJkLW5hdi1saW5rLWxlZnQgJyArIChoLmxvY2F0aW9uQWN0aW9uTWF0Y2goJ2luc2lnaHRzJykgPyAnc2VsZWN0ZWQnIDogJycpICsgJ1wiXVtocmVmPVwiJyArIHByb2plY3RSb3V0ZSArICcvaW5zaWdodHNcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1iYXItY2hhcnQuZmEtbGcuZmEtZncnKSwgSTE4bi50KCdzdGFydF90YWInLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLCAocHJvamVjdC5pc19wdWJsaXNoZWQgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYSNkYXNoYm9hcmRfcmVwb3J0c19saW5rLmRhc2hib2FyZC1uYXYtbGluay1sZWZ0W2hyZWY9XCIke3Byb2plY3RSb3V0ZX0vY29udHJpYnV0aW9uc19yZXBvcnRcIl1gLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEuZmEtdGFibGUuZmEtbGcuZmEtZncnKSwgSTE4bi50KCdyZXBvcnRzX3RhYicsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjZGFzaGJvYXJkX3JlcG9ydHNfbGluay5kYXNoYm9hcmQtbmF2LWxpbmstbGVmdC51LW1hcmdpbmJvdHRvbS0zMFtocmVmPVwiJyArIGVkaXRSb3V0ZSArICcjcG9zdHMnICsgJ1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1idWxsaG9ybi5mYS1mdy5mYS1sZycpLCBJMThuLnQoJ3Bvc3RzX3RhYicsIEkxOG5TY29wZSgpKSwgbSgnc3Bhbi5iYWRnZScsIHByb2plY3QucG9zdHNfY291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy5lZGl0LXByb2plY3QtZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgKCFwcm9qZWN0LmlzX3B1Ymxpc2hlZCA/ICcnIDogbSgnYnV0dG9uI3RvZ2dsZS1lZGl0LW1lbnUuZGFzaGJvYXJkLW5hdi1saW5rLWxlZnQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC5lZGl0TGlua3NUb2dnbGUudG9nZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1wZW5jaWwuZmEtZncuZmEtbGcnKSwgSTE4bi50KCdlZGl0X3Byb2plY3QnLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pKSwgKGN0cmwuZWRpdExpbmtzVG9nZ2xlKCkgPyBtKCcjZWRpdC1tZW51LWl0ZW1zJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJyNkYXNoYm9hcmQtbGlua3MnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoIXByb2plY3QuaXNfcHVibGlzaGVkIHx8IHByb2plY3QuaXNfYWRtaW5fcm9sZSkgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Jhc2ljc19saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyNiYXNpY3MnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmJhc2ljc190YWJgLCBsaW5rc1Njb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjZ29hbF9saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyNnb2FsJyArICdcIl0nLCBJMThuLnQoYCR7cHJvamVjdC5tb2RlfS5nb2FsX3RhYmAsIGxpbmtzU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Rlc2NyaXB0aW9uX2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI2Rlc2NyaXB0aW9uJyArICdcIl0nLCBJMThuLnQoYCR7cHJvamVjdC5tb2RlfS5kZXNjcmlwdGlvbl90YWJgLCBsaW5rc1Njb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSN2aWRlb19saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyN2aWRlbycgKyAnXCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1bDrWRlbycsIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICcgKG9wY2lvbmFsKScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2J1ZGdldF9saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyNidWRnZXQnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmJ1ZGdldF90YWJgLCBsaW5rc1Njb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNjYXJkX2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI2NhcmQnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmNhcmRfdGFiYCwgbGlua3NTY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjZGFzaGJvYXJkX3Jld2FyZF9saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyNyZXdhcmQnICsgJ1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSZWNvbXBlbnNhcycsIG9wdGlvbmFsT3B0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Rhc2hib2FyZF91c2VyX2Fib3V0X2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI3VzZXJfYWJvdXQnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmFib3V0X3lvdV90YWJgLCBsaW5rc1Njb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChwcm9qZWN0LmlzX3B1Ymxpc2hlZCB8fCBwcm9qZWN0LnN0YXRlID09PSAnZHJhZnQnKSB8fCBwcm9qZWN0LmlzX2FkbWluX3JvbGUgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Rhc2hib2FyZF91c2VyX3NldHRpbmdzX2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI3VzZXJfc2V0dGluZ3MnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmFjY291bnRfdGFiYCwgbGlua3NTY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJyksICghcHJvamVjdC5pc19wdWJsaXNoZWQgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Rhc2hib2FyZF9wcmV2aWV3X2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI3ByZXZpZXcnICsgJ1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWZ3LmZhLWV5ZS5mYS1sZycpLCBJMThuLnQoYCR7cHJvamVjdC5tb2RlfS5wcmV2aWV3X3RhYmAsIGxpbmtzU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKCghcHJvamVjdC5pc19wdWJsaXNoZWQgJiYgY3RybC5zaG93UHVibGlzaCgpKSA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuYnRuLXNlbmQtZHJhZnQtZml4ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByb2plY3QubW9kZSA9PT0gJ2FvbicgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByb2plY3Quc3RhdGUgPT09ICdkcmFmdCcgPyBtKCdhLmJ0bi5idG4tbWVkaXVtW2hyZWY9XCIvcHJvamVjdHMvJyArIHByb2plY3QuaWQgKyAnL3ZhbGlkYXRlX3B1Ymxpc2hcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgncHVibGlzaCcsIEkxOG5TY29wZSgpKSwgbS50cnVzdCgnJm5ic3A7Jm5ic3A7JyksIG0oJ3NwYW4uZmEuZmEtY2hldnJvbi1yaWdodCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkgOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByb2plY3Quc3RhdGUgPT09ICdkcmFmdCcgPyBtKCdhLmJ0bi5idG4tbWVkaXVtW2hyZWY9XCIvZmxleGlibGVfcHJvamVjdHMvJyArIHByb2plY3QuaWQgKyAnL3ZhbGlkYXRlX3B1Ymxpc2hcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgncHVibGlzaCcsIEkxOG5TY29wZSgpKSwgbS50cnVzdCgnJm5ic3A7Jm5ic3A7JyksIG0oJ3NwYW4uZmEuZmEtY2hldnJvbi1yaWdodCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkgOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChwcm9qZWN0Lm1vZGUgPT09ICdmbGV4JyAmJiBwcm9qZWN0LmlzX3B1Ymxpc2hlZCkgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5idG4tc2VuZC1kcmFmdC1maXhlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKF8uaXNOdWxsKHByb2plY3QuZXhwaXJlc19hdCkgPyBtKCdhLnctYnV0dG9uLmJ0bi5idG4tbWVkaXVtLmJ0bi1zZWNvbmRhcnktZGFya1tocmVmPVwiL3Byb2plY3RzLycgKyBwcm9qZWN0LmlkICsgJy9lZGl0I2Fubm91bmNlX2V4cGlyYXRpb25cIl0nLCBJMThuLnQoJ2Fubm91bmNlX2V4cGlyYXRpb24nLCBJMThuU2NvcGUoKSkpIDogJycpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCdhLmJ0bi1kYXNoYm9hcmQgaHJlZj1cImpzOnZvaWQoMCk7XCInLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogY3RybC5ib2R5VG9nZ2xlRm9yTmF2LnRvZ2dsZVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtYmFycy5mYS1sZycpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0RGFzaGJvYXJkTWVudTtcbiIsIi8qKlxuICogd2luZG93LmMuTW9kYWxCb3ggY29tcG9uZW50XG4gKiBCdWlscyB0aGUgdGVtcGxhdGUgZm9yIHVzaW5nIG1vZGFsXG4gKlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuTW9kYWxCb3gsIHtcbiAqICAgICBkaXNwbGF5TW9kYWw6IHRvb2dsZVByb3BPYmplY3QsXG4gKiAgICAgY29udGVudDogWydDb21wb25lbnROYW1lJywge2FyZ3g6ICd4JywgYXJneTogJ3knfV1cbiAqIH0pXG4gKiBDb21wb25lbnROYW1lIHN0cnVjdHVyZSA9PiAgbSgnZGl2JywgW1xuICogICAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWhlYWRlcicsIFtdKSxcbiAqICAgICAgICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1jb250ZW50JywgW10pLFxuICogICAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLW5hdi1ib3R0b20nLCBbXSksXG4gKiAgICAgICAgICAgICAgXSlcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmNvbnN0IG1vZGFsQm94ID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnLm1vZGFsLWJhY2tkcm9wJywgW1xuICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1vdXRlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWlubmVyLm1vZGFsLWRpYWxvZy1zbWFsbCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnYS53LWlubGluZS1ibG9jay5tb2RhbC1jbG9zZS5mYS5mYS1jbG9zZS5mYS1sZ1tocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApO1wiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGFyZ3MuZGlzcGxheU1vZGFsLnRvZ2dsZVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYXJncy5jb250ZW50WzBdLCBhcmdzLmNvbnRlbnRbMV0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtb2RhbEJveDtcbiIsIi8qKlxuICogd2luZG93LmMuQWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQgY29tcG9uZW50XG4gKiByZW5kZXIgYW4gYm94IHdpdGggc29tZSBwcm9qZWN0IHN0YXRpc3RpY3MgaW5mb1xuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLkFkbWluUHJvamVjdERldGFpbHNDYXJkLCB7XG4gKiAgICAgcmVzb3VyY2U6IHByb2plY3REZXRhaWwgT2JqZWN0LFxuICogfSlcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuY29uc3QgYWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBwcm9qZWN0ID0gYXJncy5yZXNvdXJjZSxcbiAgICAgICAgICAgIGlzRmluYWxMYXAgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQFRPRE86IHVzZSA4IGRheXMgYmVjYXVzZSB0aW1lem9uZSBvbiBqc1xuICAgICAgICAgICAgICAgIHJldHVybiAhXy5pc051bGwocHJvamVjdC5leHBpcmVzX2F0KSAmJiBtb21lbnQoKS5hZGQoOCwgJ2RheXMnKSA+PSBtb21lbnQocHJvamVjdC56b25lX2V4cGlyZXNfYXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXG4gICAgICAgICAgICByZW1haW5pbmdUZXh0T2JqOiBoLnRyYW5zbGF0ZWRUaW1lKHByb2plY3QucmVtYWluaW5nX3RpbWUpLFxuICAgICAgICAgICAgZWxhcHNlZFRleHRPYmo6IGgudHJhbnNsYXRlZFRpbWUocHJvamVjdC5lbGFwc2VkX3RpbWUpLFxuICAgICAgICAgICAgaXNGaW5hbExhcDogaXNGaW5hbExhcFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsKSB7XG4gICAgICAgIGxldCBwcm9qZWN0ID0gY3RybC5wcm9qZWN0LFxuICAgICAgICAgICAgcHJvZ3Jlc3MgPSBwcm9qZWN0LnByb2dyZXNzLnRvRml4ZWQoMiksXG4gICAgICAgICAgICBzdGF0dXNUZXh0T2JqID0gaC5wcm9qZWN0U3RhdGVUZXh0Q2xhc3MocHJvamVjdC5zdGF0ZSksXG4gICAgICAgICAgICByZW1haW5pbmdUZXh0T2JqID0gY3RybC5yZW1haW5pbmdUZXh0T2JqLFxuICAgICAgICAgICAgZWxhcHNlZFRleHRPYmogPSBjdHJsLmVsYXBzZWRUZXh0T2JqO1xuXG4gICAgICAgIHJldHVybiBtKCcucHJvamVjdC1kZXRhaWxzLWNhcmQuY2FyZC51LXJhZGl1cy5jYXJkLXRlcmNpYXJ5LnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC5mb250d2VpZ2h0LXNlbWlib2xkJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCAnU3RhdHVzOicpLCAnwqAnLFxuICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHN0YXR1c1RleHRPYmouY3NzQ2xhc3NcbiAgICAgICAgICAgICAgICAgICAgfSwgKGN0cmwuaXNGaW5hbExhcCgpICYmIHByb2plY3Qub3Blbl9mb3JfY29udHJpYnV0aW9ucyA/ICdSRVRBIEZJTkFMJyA6IHN0YXR1c1RleHRPYmoudGV4dCkpLCAnwqAnXG4gICAgICAgICAgICAgICAgXSksIHByb2plY3QuaXNfcHVibGlzaGVkID8gW1xuICAgICAgICAgICAgICAgICAgICBtKCcubWV0ZXIudS1tYXJnaW50b3AtMjAudS1tYXJnaW5ib3R0b20tMTAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcubWV0ZXItZmlsbCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogKHByb2dyZXNzID4gMTAwID8gMTAwIDogcHJvZ3Jlc3MpICsgJyUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHRlci5mb250c2l6ZS1zbWFsbCcsICdmaW5hbmNpYWRvJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIHByb2dyZXNzICsgJyUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC0zLnctY29sLXRpbnktNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0ZXIuZm9udHNpemUtc21hbGwnLCAnbGV2YW50YWRvcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSJCAnICsgaC5mb3JtYXROdW1iZXIocHJvamVjdC5wbGVkZ2VkLCAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtMy53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkubGluZWhlaWdodC10aWdodGVyLmZvbnRzaXplLXNtYWxsJywgJ2Fwb2lvcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCBwcm9qZWN0LnRvdGFsX2NvbnRyaWJ1dGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfLmlzTnVsbChwcm9qZWN0LmV4cGlyZXNfYXQpID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0ZXIuZm9udHNpemUtc21hbGwnLCAnaW5pY2lhZG8gaMOhJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCBlbGFwc2VkVGV4dE9iai50b3RhbCArICcgJyArIGVsYXBzZWRUZXh0T2JqLnVuaXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHRlci5mb250c2l6ZS1zbWFsbCcsICdyZXN0YW0nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCByZW1haW5pbmdUZXh0T2JqLnRvdGFsICsgJyAnICsgcmVtYWluaW5nVGV4dE9iai51bml0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdIDogJydcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluUHJvamVjdERldGFpbHNDYXJkO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5PbmxpbmVTdWNlc3NNb2RhbENvbnRlbnQgY29tcG9uZW50XG4gKiBSZW5kZXIgb25saW5lIHN1Y2Nlc3MgbWVzc2FnZVxuICpcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmNvbnN0IG9ubGluZVN1Y2Vzc01vZGFsQ29udGVudCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJy5tb2RhbC1kaWFsb2ctY29udGVudC51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgbSgnLmZhLmZhLWNoZWNrLWNpcmNsZS5mYS01eC50ZXh0LXN1Y2Nlc3MudS1tYXJnaW5ib3R0b20tNDAnKSxcbiAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtbGFyZ2VyLmxpbmVoZWlnaHQtdGlnaHQnLCAnU3VhIGNhbXBhbmhhIGVzdMOhIG5vIGFyISEhIFBhcmFiw6lucyBwb3IgZXNzZSBwcmltZWlybyBncmFuZGUgcGFzc28uIEJvYSBzb3J0ZSBuZXNzYSBqb3JuYWRhIDspJylcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgb25saW5lU3VjZXNzTW9kYWxDb250ZW50O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Qcm9qZWN0RGF0YVN0YXRzIGNvbXBvbmVudFxuICogcmVuZGVyIGEgcm93IHdpdGggcHJvamVjdCBzdGF0cyBpbmZvIGxpa2U6XG4gKiBzdGF0ZSAvIHRvdGFsX2NvbnRyaWJ1dGlvbnMgLyB0b3RhbF9wbGVkZ2VkIC8gZWxhcHNlZCB8IHJlbWFuaW5nIHRpbWVcbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5Qcm9qZWN0RGF0YVN0YXRzLCB7cHJvamVjdDogcHJvamVjdH0pXG4gKiovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IHByb2plY3REYXRhU3RhdHMgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QoKSxcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MgPSBwcm9qZWN0LnByb2dyZXNzLnRvRml4ZWQoMiksXG4gICAgICAgICAgICAgIHN0YXR1c1RleHRPYmogPSBoLnByb2plY3RTdGF0ZVRleHRDbGFzcyhwcm9qZWN0LnN0YXRlKSxcbiAgICAgICAgICAgICAgcmVtYWluaW5nVGV4dE9iaiA9IGgudHJhbnNsYXRlZFRpbWUocHJvamVjdC5yZW1haW5pbmdfdGltZSksXG4gICAgICAgICAgICAgIGVsYXBzZWRUZXh0T2JqID0gaC50cmFuc2xhdGVkVGltZShwcm9qZWN0LmVsYXBzZWRfdGltZSk7XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS00MCcsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnUtdGV4dC1jZW50ZXItc21hbGwtb25seScsIFtcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgJ1N0YXR1czogJyksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7Y2xhc3M6IHN0YXR1c1RleHRPYmouY3NzQ2xhc3N9ICxzdGF0dXNUZXh0T2JqLnRleHQpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTknLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctcm93LnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIGAke3Byb2dyZXNzfSVgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHRlci5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0xMCcsICdmaW5hbmNpYWRvJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIGBSJCAke2guZm9ybWF0TnVtYmVyKHByb2plY3QucGxlZGdlZCwgMil9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0ZXIuZm9udHNpemUtc21hbGwudS1tYXJnaW5ib3R0b20tMTAnLCAnbGV2YW50YWRvcycpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCBwcm9qZWN0LnRvdGFsX2NvbnRyaWJ1dGlvbnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkubGluZWhlaWdodC10aWdodGVyLmZvbnRzaXplLXNtYWxsJywgJ2Fwb2lvcycpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIChfLmlzTnVsbChwcm9qZWN0LmV4cGlyZXNfYXQpID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCBgJHtlbGFwc2VkVGV4dE9iai50b3RhbH0gJHtlbGFwc2VkVGV4dE9iai51bml0fWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHRlci5mb250c2l6ZS1zbWFsbCcsICdpbmljaWFkbyBow6EnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZS5saW5laGVpZ2h0LXRpZ2h0JywgYCR7cmVtYWluaW5nVGV4dE9iai50b3RhbH1gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0ZXIuZm9udHNpemUtc21hbGwnLCBgJHtyZW1haW5pbmdUZXh0T2JqLnVuaXR9ICR7KHJlbWFpbmluZ1RleHRPYmoudG90YWwgPiAwID8gJ3Jlc3RhbnRlcycgOiAncmVzdGFudGUnKX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdERhdGFTdGF0cztcbiIsIi8qKlxuICogd2luZG93LmMuUHJvamVjdERhdGFDaGFydCBjb21wb25lbnRcbiAqIEEgZ3JhcGggYnVpbGRlciBpbnRlcmZhY2UgdG8gYmUgdXNlZCBvbiBwcm9qZWN0IHJlbGF0ZWQgZGFzaGJvYXJkcy5cbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlByb2plY3REYXRhQ2hhcnQsIHtcbiAqICAgICBjb2xsZWN0aW9uOiBjdHJsLmNvbnRyaWJ1dGlvbnNQZXJEYXksXG4gKiAgICAgbGFiZWw6ICdSJCBhcnJlY2FkYWRvcyBwb3IgZGlhJyxcbiAqICAgICBkYXRhS2V5OiAndG90YWxfYW1vdW50J1xuICogfSlcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBDaGFydCBmcm9tICdjaGFydGpzJztcblxuY29uc3QgcHJvamVjdERhdGFDaGFydCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBfLmZpcnN0KGFyZ3MuY29sbGVjdGlvbigpKSxcbiAgICAgICAgICAgICAgc291cmNlID0gKCFfLmlzVW5kZWZpbmVkKHJlc291cmNlKSA/IHJlc291cmNlLnNvdXJjZSA6IFtdKSxcblxuICAgICAgICAgICAgbW91bnREYXRhc2V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBbe1xuICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICdyZ2JhKDEyNiwxOTQsNjksMC4yKScsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiAncmdiYSgxMjYsMTk0LDY5LDEpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRDb2xvcjogJ3JnYmEoMTI2LDE5NCw2OSwxKScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50U3Ryb2tlQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRIaWdobGlnaHRGaWxsOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50SGlnaGxpZ2h0U3Ryb2tlOiAncmdiYSgyMjAsMjIwLDIyMCwxKScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IF8ubWFwKHNvdXJjZSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtW2FyZ3MuZGF0YUtleV07XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVuZGVyQ2hhcnQgPSAoZWxlbWVudCwgaXNJbml0aWFsaXplZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSBlbGVtZW50LmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IENoYXJ0KGN0eCkuTGluZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbHM6IF8ubWFwKHNvdXJjZSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJncy54QXhpcyhpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldHM6IG1vdW50RGF0YXNldCgpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVuZGVyQ2hhcnQ6IHJlbmRlckNoYXJ0LFxuICAgICAgICAgICAgc291cmNlOiBzb3VyY2VcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnLmNhcmQudS1yYWRpdXMubWVkaXVtLnUtbWFyZ2luYm90dG9tLTMwJywgW1xuICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMTAuZm9udHNpemUtbGFyZ2UudS10ZXh0LWNlbnRlcicsIGFyZ3MubGFiZWwpLFxuICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi5vdmVyZmxvdy1hdXRvJywgW1xuICAgICAgICAgICAgICAgICAgICAhXy5pc0VtcHR5KGN0cmwuc291cmNlKSA/IG0oJ2NhbnZhc1tpZD1cImNoYXJ0XCJdW3dpZHRoPVwiODYwXCJdW2hlaWdodD1cIjMwMFwiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC5yZW5kZXJDaGFydFxuICAgICAgICAgICAgICAgICAgICB9KSA6IG0oJy53LWNvbC53LWNvbC04LnctY29sLXB1c2gtMicsIG0oJ3AuZm9udHNpemUtYmFzZScsIGFyZ3MuZW1wdHlTdGF0ZSkpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0RGF0YUNoYXJ0O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Qcm9qZWN0RGF0YVRhYmxlIGNvbXBvbmVudFxuICogQSB0YWJsZSBpbnRlcmZhY2UgY29uc3RydWN0b3IgdGhhdCBzaG91bGQgYmUgdXNlZCBvbiBwcm9qZWN0IHJlbGF0ZWQgZGFzaGJvYXJkcy5cbiAqIEl0IHRha2VzIGFuIGFycmF5IGFuZCBhIGxhYmxlIGFzIGl0J3Mgc291cmNlcy5cbiAqIFRoZSBmaXJzdCBpdGVtIGluIHRoZSBhcnJheSBpcyB0aGUgaGVhZGVyIGRlc2NyaXB0b3IgYW5kIHRoZSByZXN0IG9mIHRoZW0gYXJlIHJvdyBkYXRhLlxuICogUm93cyBtYXkgcmV0dXJuIGEgc3RyaW5nIG9yIGFuIGFycmF5IGFuZCB0aGlzIHZhbHVlIHdpbGwgYmUgdXNlZCBhcyBhIHJvdyBvdXRwdXQuXG4gKiBBbGwgdGFibGUgcm93cyBhcmUgc29ydGFibGUgYnkgZGVmYXVsdC4gSWYgeW91IHdhbnQgdG8gdXNlIGEgY3VzdG9tIHZhbHVlIGFzIHNvcnQgcGFyYW1ldGVyXG4gKiB5b3UgbWF5IHNldCBhIDJEIGFycmF5IGFzIHJvdy4gSW4gdGhpcyBjYXNlLCB0aGUgZmlyc3QgYXJyYXkgdmFsdWUgd2lsbCBiZSB0aGUgY3VzdG9tIHZhbHVlXG4gKiB3aGlsZSB0aGUgb3RoZXIgd2lsbCBiZSB0aGUgYWN0dWFsIG91dHB1dC5cbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlByb2plY3REYXRhVGFibGUsIHtcbiAqICAgICAgbGFiZWw6ICdUYWJsZSBsYWJlbCcsXG4gKiAgICAgIHRhYmxlOiBbXG4gKiAgICAgICAgICBbJ2NvbCBoZWFkZXIgMScsICdjb2wgaGVhZGVyIDInXSxcbiAqICAgICAgICAgIFsndmFsdWUgMXgxJywgWzMsICd2YWx1ZSAxeDInXV0sXG4gKiAgICAgICAgICBbJ3ZhbHVlIDJ4MScsIFsxLCAndmFsdWUgMngyJ11dIC8vV2UgYXJlIHVzaW5nIGEgY3VzdG9tIGNvbXBhcmF0b3IgdHdvIGNvbCAyIHZhbHVlc1xuICogICAgICBdLFxuICogICAgICAvL0FsbG93cyB5b3UgdG8gc2V0IGEgc3BlY2lmaWMgY29sdW1uIHRvIGJlIG9yZGVyZWQgYnkgZGVmYXVsdC5cbiAqICAgICAgLy9JZiBubyB2YWx1ZSBpcyBzZXQsIHRoZSBmaXJzdCByb3cgd2lsbCBiZSB0aGUgZGVmYXVsdCBvbmUgdG8gYmUgb3JkZXJlZC5cbiAqICAgICAgLy9OZWdhdGl2ZSB2YWx1ZXMgbWVhbiB0aGF0IHRoZSBvcmRlciBzaG91bGQgYmUgcmV2ZXJ0ZWRcbiAqICAgICAgZGVmYXVsdFNvcnRJbmRleDogLTNcbiAqICB9KVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IHByb2plY3REYXRhVGFibGUgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gbS5wcm9wKGFyZ3MudGFibGUpLFxuICAgICAgICAgICAgc29ydEluZGV4ID0gbS5wcm9wKC0xKTtcblxuICAgICAgICBjb25zdCBjb21wYXJhdG9yID0gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGxldCBpZHggPSBzb3J0SW5kZXgoKSxcbiAgICAgICAgICAgICAgICAvL0NoZWNrIGlmIGEgY3VzdG9tIGNvbXBhcmF0b3IgaXMgdXNlZCA9PiBSZWFkIGNvbXBvbmVudCBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgIHggPSAoXy5pc0FycmF5KGFbaWR4XSkgJiYgYVtpZHhdLmxlbmd0aCA+IDEpID8gYVtpZHhdWzBdIDogYVtpZHhdLFxuICAgICAgICAgICAgICAgIHkgPSAoXy5pc0FycmF5KGJbaWR4XSkgJiYgYltpZHhdLmxlbmd0aCA+IDEpID8gYltpZHhdWzBdIDogYltpZHhdO1xuXG4gICAgICAgICAgICBpZiAoeCA8IHkpe1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh5IDwgeCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzb3J0VGFibGUgPSAoaWR4KSA9PiB7XG4gICAgICAgICAgICBsZXQgaGVhZGVyID0gXy5maXJzdCh0YWJsZSgpKSxcbiAgICAgICAgICAgICAgICBib2R5O1xuICAgICAgICAgICAgaWYgKHNvcnRJbmRleCgpID09PSBpZHgpe1xuICAgICAgICAgICAgICAgIGJvZHkgPSBfLnJlc3QodGFibGUoKSkucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzb3J0SW5kZXgoaWR4KTtcbiAgICAgICAgICAgICAgICBib2R5ID0gXy5yZXN0KHRhYmxlKCkpLnNvcnQoY29tcGFyYXRvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRhYmxlKF8udW5pb24oW2hlYWRlcl0sYm9keSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNvcnRUYWJsZShNYXRoLmFicyhhcmdzLmRlZmF1bHRTb3J0SW5kZXgpIHx8IDApO1xuXG4gICAgICAgIGlmIChhcmdzLmRlZmF1bHRTb3J0SW5kZXggPCAwKXtcbiAgICAgICAgICAgIHNvcnRUYWJsZShNYXRoLmFicyhhcmdzLmRlZmF1bHRTb3J0SW5kZXgpIHx8IDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRhYmxlOiB0YWJsZSxcbiAgICAgICAgICAgIHNvcnRUYWJsZTogc29ydFRhYmxlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gXy5maXJzdChjdHJsLnRhYmxlKCkpLFxuICAgICAgICAgICAgYm9keSA9IF8ucmVzdChjdHJsLnRhYmxlKCkpO1xuICAgICAgICByZXR1cm4gbSgnLnRhYmxlLW91dGVyLnUtbWFyZ2luYm90dG9tLTYwJywgW1xuICAgICAgICAgICAgbSgnLnctcm93LnRhYmxlLXJvdy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIuaGVhZGVyJyxcbiAgICAgICAgICAgICAgICBfLm1hcChoZWFkZXIsIChoZWFkaW5nLCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNvcnQgPSAoKSA9PiBjdHJsLnNvcnRUYWJsZShpZHgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQudGFibGUtY29sJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWhpZGRlbltocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApO1wiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBzb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7aGVhZGluZ30gYCwgbSgnc3Bhbi5mYS5mYS1zb3J0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLCBtKCcudGFibGUtaW5uZXIuZm9udHNpemUtc21hbGwnLFxuICAgICAgICAgICAgICAgIF8ubWFwKGJvZHksIChyb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy1yb3cudGFibGUtcm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKHJvd0RhdGEsIChyb3cpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0NoZWNrIGlmIGEgY3VzdG9tIGNvbXBhcmF0b3IgaXMgdXNlZCA9PiBSZWFkIGNvbXBvbmVudCBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9IChfLmlzQXJyYXkocm93KSAmJiByb3cubGVuZ3RoID4gMSkgPyByb3dbMV0gOiByb3c7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC00LnctY29sLXNtYWxsLTQudy1jb2wtdGlueS00LnRhYmxlLWNvbCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2Jywgcm93KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0RGF0YVRhYmxlO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmNvbnN0IHByb2plY3RSZW1pbmRlckNvdW50ID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5yZXNvdXJjZTtcbiAgICAgICAgcmV0dXJuIG0oJyNwcm9qZWN0LXJlbWluZGVyLWNvdW50LmNhcmQudS1yYWRpdXMudS10ZXh0LWNlbnRlci5tZWRpdW0udS1tYXJnaW5ib3R0b20tODAnLCBbXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UuZm9udHdlaWdodC1zZW1pYm9sZCcsICdUb3RhbCBkZSBwZXNzb2FzIHF1ZSBjbGljYXJhbSBubyBib3TDo28gTGVtYnJhci1tZScpLFxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIudS1tYXJnaW5ib3R0b20tMzAnLCAnVW0gbGVtYnJldGUgcG9yIGVtYWlsIMOpIGVudmlhZG8gNDggaG9yYXMgYW50ZXMgZG8gdMOpcm1pbm8gZGEgc3VhIGNhbXBhbmhhJyksXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtanVtYm8nLCBwcm9qZWN0LnJlbWluZGVyX2NvdW50KVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0UmVtaW5kZXJDb3VudDtcbiIsIi8qKlxuICogd2luZG93LmMuRGFzaGJvYXJkSW5mbyBjb21wb25lbnRcbiAqIHJlbmRlciBhIHJvdyBvZiBpbmZvcm1hdGlvbiB3aXRoIGFuIGljb24gYW5kIGFuIG9wdGlvbmFsIGNhbGwgdG8gYWN0aW9uXG4gKlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuRGFzaGJvYXJkSW5mbywge1xuICogICAgICBjb250ZW50OiB7XG4gKiAgICAgICAgICBpY29uOiAndXJsOi8vdG8uaWNvbicsXG4gKiAgICAgICAgICB0aXRsZTogJ3RpdGxlJyxcbiAqICAgICAgICAgIGhyZWY6ICcjd2hlcmUtdG8nLFxuICogICAgICAgICAgY3RhOiAnbmV4dCBzdGVwJ1xuICogICAgICB9XG4gKiB9KVxuICoqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuY29uc3QgZGFzaGJvYXJkSW5mbyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgdG9SZWRyYXcgPSBhcmdzLmRhdGFUb1JlZHJhdyB8fCB7fSxcbiAgICAgICAgICAgICAgbGlzdGVuVG9SZXBsYWNlID0gKGVsZW1lbnQsIGlzSW5pdGlhbGl6ZWQsIGNvbnRleHQpID0+IHtcblxuICAgICAgICAgICAgICAgICAgaWYgKGlzSW5pdGlhbGl6ZWQpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgXy5tYXAoZWxlbWVudC5jaGlsZHJlbiwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgIGxldCB0b1IgPSB0b1JlZHJhd1tpdGVtLmdldEF0dHJpYnV0ZSgnaWQnKV07XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAodG9SKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1bdG9SLmFjdGlvbl0gPSB0b1IuYWN0aW9uU291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsaXN0ZW5Ub1JlcGxhY2U6IGxpc3RlblRvUmVwbGFjZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQ7XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS00MCcsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNvbC1wdXNoLTMnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnUtbWFyZ2luYm90dG9tLTIwJywge3NyYzogY29udGVudC5pY29uLCB3aWR0aDogOTR9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTIwJywgY29udGVudC50aXRsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0zMCcsIHtjb25maWc6IGN0cmwubGlzdGVuVG9SZXBsYWNlfSwgbS50cnVzdChjb250ZW50LnRleHQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuY3RhID8gbSgnYS5idG4uYnRuLWxhcmdlLmJ0bi1pbmxpbmUnLCB7aHJlZjogY29udGVudC5ocmVmLCBvbmNsaWNrOiBhcmdzLm5leHRTdGFnZX0sIGNvbnRlbnQuY3RhKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRhc2hib2FyZEluZm87XG4iLCIvKipcbiAqIHdpbmRvdy5jLlByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50RXJyb3IgY29tcG9uZW50XG4gKiByZW5kZXIgZXJyb3IgZm9ybSB0byBjb2xsZWN0IHVzZXIgYW5zd2VyXG4gKlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuUHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnRFcnJvciwge1xuICogICAgcHJvamVjdEFjY291bnQ6IHByb2plY3RBY2NvdW50LFxuICogICAgY2hhbmdlVG9BY3Rpb246IGN0cmwuY2hhbmdlVG9BY3Rpb24gLy9wcm92aWRlZCBieSBQcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudCBjb250cm9sbGVyXG4gKiB9KVxuICoqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLnN1Y2Nlc3NmdWxfb25ib2FyZC5jb25maXJtX2FjY291bnQucmVmdXNlJyk7XG5cbmNvbnN0IHByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50RXJyb3IgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGVycm9yUmVhc29uTSA9IG0ucHJvcCgnJyksXG4gICAgICAgIGVycm9yID0gbS5wcm9wKGZhbHNlKTtcblxuICAgICAgICBjb25zdCBhZGRFcnJvclJlYXNvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvclJlYXNvbk0oKS50cmltKCkgPT09ICcnKVx0e1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcih0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MuYWRkRXJyb3JSZWFzb24oZXJyb3JSZWFzb25NKS5jYWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZEVycm9yUmVhc29uOiBhZGRFcnJvclJlYXNvbixcbiAgICAgICAgICAgIGVycm9yUmVhc29uTTogZXJyb3JSZWFzb25NLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJy53LXJvdy5iYW5rLXRyYW5zZmVyLWFuc3dlcicsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02LnctY29sLXB1c2gtMycsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1mb3JtLmJhbmstdHJhbnNmZXItcHJvYmxlbS5jYXJkLnUtcmFkaXVzJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdmb3JtI3N1Y2Nlc3NmdWwtb25ib2FyZC1lcnJvcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1pbmxpbmUtYmxvY2sudS1yaWdodC5idG4uYnRuLXRlcmNpYXJ5LmJ0bi1uby1ib3JkZXIuYnRuLWlubGluZS5mYS5mYS1jbG9zZScsIHtocmVmOiAnI2NvbmZpcm1fYWNjb3VudCcsIG9uY2xpY2s6IGFyZ3MuY2hhbmdlVG9BY3Rpb24oJ3N0YXJ0Jyl9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMjAnLCBJMThuLnQoJ3RpdGxlJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3RleHRhcmVhLnctaW5wdXQudGV4dC1maWVsZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogSTE4bi50KCdwbGFjZWhvbGRlcicsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5lcnJvcigpID8gJ2Vycm9yJyA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZm9jdXM6ICgpID0+IGN0cmwuZXJyb3IoZmFsc2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuZXJyb3JSZWFzb25NKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmVycm9yKCkgPyBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtcHVzaC0zLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QudGV4dC1lcnJvcicsICdDYW1wbyBPYnJpZ2F0w7NyaW8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXB1c2gtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICcjY29uZmlybV9hY2NvdW50X3JlZnVzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLmFkZEVycm9yUmVhc29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIEkxOG4udCgnY3RhJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudEVycm9yO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Qcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudEFjY2VwdCBjb21wb25lbnRcbiAqIHJlbmRlciBjb25maXJtYXRpb24gbWVzc2FnZSB0byBhY2NlcHQgYmFuayBkYXRhXG4gKlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuUHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnRBY2NlcHQsIHtcbiAqICAgIHByb2plY3RBY2NvdW50OiBwcm9qZWN0QWNjb3VudCxcbiAqICAgIGNoYW5nZVRvQWN0aW9uOiBjdHJsLmNoYW5nZVRvQWN0aW9uIC8vcHJvdmlkZWQgYnkgUHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnQgY29udHJvbGxlclxuICogfSlcbiAqKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5zdWNjZXNzZnVsX29uYm9hcmQuY29uZmlybV9hY2NvdW50Jyk7XG5cbmNvbnN0IHByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50QWNjZXB0ID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnLnctcm93LmJhbmstdHJhbnNmZXItYW5zd2VyJywgW1xuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtcHVzaC0zJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWZvcm0uYmFuay10cmFuc2Zlci1jb25maXJtLmNhcmQudS1yYWRpdXMnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2Zvcm0jc3VjY2Vzc2Z1bC1vbmJvYXJkLWZvcm0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctaW5saW5lLWJsb2NrLnUtcmlnaHQuYnRuLmJ0bi10ZXJjaWFyeS5idG4tbm8tYm9yZGVyLmJ0bi1pbmxpbmUuZmEuZmEtY2xvc2UnLCB7aHJlZjogJyNjb25maXJtX2FjY291bnQnLCBvbmNsaWNrOiBhcmdzLmNoYW5nZVRvQWN0aW9uKCdzdGFydCcpfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTIwJywgSTE4bi50KCdhY2NlcHQudGl0bGUnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIudS1tYXJnaW5ib3R0b20tMzAnLCBJMThuLnQoJ2FjY2VwdC5pbmZvJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1wdXNoLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICghYXJncy5hY2NlcHRBY2NvdW50TG9hZGVyKCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAnI2FjY2VwdF9hY2NvdW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBhcmdzLmFjY2VwdEFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIEkxOG4udCgnYWNjZXB0LmN0YScsIEkxOG5TY29wZSgpKSkgOiBoLmxvYWRlcigpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudEFjY2VwdDtcbiIsIi8qKlxuICogd2luZG93LmMuUHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnQgY29tcG9uZW50XG4gKiByZW5kZXIgcHJvamVjdCBhY2NvdW50IGRhdGEgdG8gY29uZmlybSBvciBhZGQgZXJyb3JcbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5Qcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudCwge3Byb2plY3RBY2NvdW50OiBwcm9qZWN0QWNjb3VudH0pXG4gKiovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBwcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudEVycm9yIGZyb20gJy4vcHJvamVjdC1zdWNjZXNzZnVsLW9uYm9hcmQtY29uZmlybS1hY2NvdW50LWVycm9yJztcbmltcG9ydCBwcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudEFjY2VwdCBmcm9tICcuL3Byb2plY3Qtc3VjY2Vzc2Z1bC1vbmJvYXJkLWNvbmZpcm0tYWNjb3VudC1hY2NlcHQnO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5zdWNjZXNzZnVsX29uYm9hcmQuY29uZmlybV9hY2NvdW50Jyk7XG5cbmNvbnN0IHByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBhY3Rpb25TdGFnZXMgPSB7XG4gICAgICAgICAgICAgICAgICAnZXJyb3InOiBwcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudEVycm9yLFxuICAgICAgICAgICAgICAgICAgJ2FjY2VwdCc6IHByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50QWNjZXB0XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGN1cnJlbnRTdGFnZSA9IG0ucHJvcCgnc3RhcnQnKSxcbiAgICAgICAgICAgICAgYWN0aW9uU3RhZ2UgPSAoKSA9PiBhY3Rpb25TdGFnZXNbY3VycmVudFN0YWdlKCldLFxuICAgICAgICAgICAgICBjaGFuZ2VUb0FjdGlvbiA9IChzdGFnZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1xcbj09PT09PVxcbkNoYW5naW5nIGFjdGlvbiB0byAnLCBzdGFnZSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGFnZShzdGFnZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGFuZ2VUb0FjdGlvbjogY2hhbmdlVG9BY3Rpb24sXG4gICAgICAgICAgICBhY3Rpb25TdGFnZTogYWN0aW9uU3RhZ2UsXG4gICAgICAgICAgICBjdXJyZW50U3RhZ2U6IGN1cnJlbnRTdGFnZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3RBY2NvdW50ID0gYXJncy5wcm9qZWN0QWNjb3VudCxcbiAgICAgICAgICAgICAgYWN0aW9uU3RhZ2UgPSBjdHJsLmFjdGlvblN0YWdlLFxuICAgICAgICAgICAgICBjdXJyZW50U3RhZ2UgPSBjdHJsLmN1cnJlbnRTdGFnZSxcbiAgICAgICAgICAgICAgcGVyc29uS2luZCA9IChwcm9qZWN0QWNjb3VudC5vd25lcl9kb2N1bWVudC5sZW5ndGggPiAxNCA/ICdqdXJpZGljYWwnIDogJ25hdHVyYWwnKSxcbiAgICAgICAgICAgICAganVyaWRpY2FsUGVyc29uID0gcHJvamVjdEFjY291bnQub3duZXJfZG9jdW1lbnQubGVuZ3RoID4gMTQ7XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbnRhaW5lci51LW1hcmdpbmJvdHRvbS00MCcsIFtcbiAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCd0aXRsZScsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0zMC5jYXJkLmNhcmQtdGVyY2lhcnknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdwZXJzb24ubGFiZWwnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udChgcGVyc29uLiR7cGVyc29uS2luZH0ubGFiZWxgLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udChgcGVyc29uLiR7cGVyc29uS2luZH0ubmFtZWAsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdEFjY291bnQub3duZXJfbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoKHByb2plY3RBY2NvdW50LnN0YXRlX2luc2NyaXB0aW9uICYmIGp1cmlkaWNhbFBlcnNvbikgPyBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KGBwZXJzb24uc3RhdGVfaW5zY3JpcHRpb25gLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RBY2NvdW50LnN0YXRlX2luc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoYHBlcnNvbi4ke3BlcnNvbktpbmR9LmRvY3VtZW50YCwgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0QWNjb3VudC5vd25lcl9kb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdwZXJzb24uYmFuay5uYW1lJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0QWNjb3VudC5iYW5rX25hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udCgncGVyc29uLmJhbmsuYWdlbmN5JywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtwcm9qZWN0QWNjb3VudC5hZ2VuY3l9JHsoXy5pc0VtcHR5KHByb2plY3RBY2NvdW50LmFnZW5jeV9kaWdpdCkgPyAnJyA6IGAtJHtwcm9qZWN0QWNjb3VudC5hZ2VuY3lfZGlnaXR9YCl9YFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdwZXJzb24uYmFuay5hY2NvdW50JywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtwcm9qZWN0QWNjb3VudC5hY2NvdW50fS0ke3Byb2plY3RBY2NvdW50LmFjY291bnRfZGlnaXR9YFxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tMzAuY2FyZC5jYXJkLXRlcmNpYXJ5JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udCgncGVyc29uLmFkZHJlc3MnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3Byb2plY3RBY2NvdW50LmFkZHJlc3Nfc3RyZWV0fSwgJHtwcm9qZWN0QWNjb3VudC5hZGRyZXNzX251bWJlcn0gJHsoIV8uaXNOdWxsKHByb2plY3RBY2NvdW50LmFkZHJlc3NfY29tcGxlbWVudCkgPyBgLCAke3Byb2plY3RBY2NvdW50LmFkZHJlc3NfY29tcGxlbWVudH1gIDogJycpfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udCgncGVyc29uLm5laWdoYm91cmhvb2QnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RBY2NvdW50LmFkZHJlc3NfbmVpZ2hib3VyaG9vZFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdwZXJzb24uY2l0eScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdEFjY291bnQuYWRkcmVzc19jaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ3BlcnNvbi5zdGF0ZScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdEFjY291bnQuYWRkcmVzc19zdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdwZXJzb24uemlwX2NvZGUnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RBY2NvdW50LmFkZHJlc3NfemlwX2NvZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIChjdXJyZW50U3RhZ2UoKSA9PT0gJ3N0YXJ0JykgPyBtKCcjY29uZmlybWF0aW9uLWRpYWxvZy53LXJvdy5iYW5rLXRyYW5zZmVyLWFuc3dlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JyksXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2EjY29uZmlybS1hY2NvdW50LmJ0bi5idG4tbGFyZ2UnLCB7aHJlZjogJyNjb25maXJtX2FjY291bnQnLCBvbmNsaWNrOiBjdHJsLmNoYW5nZVRvQWN0aW9uKCdhY2NlcHQnKX0sICdTaW0nKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdhI3JlZnVzZS1hY2NvdW50LmJ0bi5idG4tbGFyZ2UuYnRuLXRlcmNpYXJ5Jywge2hyZWY6ICcjZXJyb3JfYWNjb3VudCcsIG9uY2xpY2s6IGN0cmwuY2hhbmdlVG9BY3Rpb24oJ2Vycm9yJyl9LCAnTsOjbycpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScpXG4gICAgICAgICAgICBdKSA6IG0uY29tcG9uZW50KGFjdGlvblN0YWdlKCksIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0QWNjb3VudDogcHJvamVjdEFjY291bnQsXG4gICAgICAgICAgICAgICAgY2hhbmdlVG9BY3Rpb246IGN0cmwuY2hhbmdlVG9BY3Rpb24sXG4gICAgICAgICAgICAgICAgYWRkRXJyb3JSZWFzb246IGFyZ3MuYWRkRXJyb3JSZWFzb24sXG4gICAgICAgICAgICAgICAgYWNjZXB0QWNjb3VudDogYXJncy5hY2NlcHRBY2NvdW50LFxuICAgICAgICAgICAgICAgIGFjY2VwdEFjY291bnRMb2FkZXI6IGFyZ3MuYWNjZXB0QWNjb3VudExvYWRlclxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnQ7XG4iLCIvKipcbiAqIHdpbmRvdy5jLlN1Y2Nlc3NmdWxQcm9qZWN0VGF4TW9kYWwgY29tcG9uZW50XG4gKiBNb2RhbCBjb250ZW50IGZvciBzaG93IHByb2plY3QgdHJhbnNmZXIgY29tcGxldGUgdmFsdWVzIGRhdGFcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3Qgc3VjY2Vzc2Z1bFByb2plY3RUYXhNb2RhbCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IHB0ID0gYXJncy5wcm9qZWN0VHJhbnNmZXI7XG5cbiAgICAgICAgcmV0dXJuIG0oJ2RpdicsW1xuICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1oZWFkZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXInLFxuICAgICAgICAgICAgICAgICAgJ0V4dHJhdG8gZG8gcHJvamV0bycpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctY29udGVudCcsIFtcbiAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLXNtYWxsLnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgICAgICAnQ29uZmlyYSBvIGV4dHJhdG8gZG8gc2V1IHByb2pldG8sIGrDoSBpbmNsdWluZG8gYXMgdGF4YXMgZSByZXRlbsOnw7Vlcy4gU2Ugdm9jw6ogdGl2ZXIgZMO6dmlkYXMgc29icmUgY29tbyBlc3NlIGPDoWxjdWxvIMOpIGZlaXRvLCAnLFxuICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XCJodHRwOi8vc3Vwb3J0ZS5jYXRhcnNlLm1lL2hjL3B0LWJyL2FydGljbGVzLzIwMjAzNzQ5My1GSU5BTkNJQURPLUNvbW8tc2VyJUMzJUExLWZlaXRvLW8tcmVwYXNzZS1kby1kaW5oZWlyby1cIl1bdGFyZ2V0PVwiX19ibGFua1wiXScsICdhY2Vzc2UgYXF1aScpLFxuICAgICAgICAgICAgICAgICAgICAnLidcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy50ZXh0LXN1Y2Nlc3MnLCBgK8KgUiQgJHtoLmZvcm1hdE51bWJlcihwdC5wbGVkZ2VkLCAyKX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBgQXJyZWNhZGHDp8OjbyB0b3RhbCAoJHtwdC50b3RhbF9jb250cmlidXRpb25zfSBhcG9pb3MpYClcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAocHQuaXJyZl90YXggPiAwID9cbiAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnRleHQtc3VjY2VzcycsIGArIFIkICR7aC5mb3JtYXROdW1iZXIocHQuaXJyZl90YXgsIDIpfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsICdSZXRlbsOnw6NvIElSRiAoSW1wb3N0byBkZSBSZW5kYSBuYSBGb250ZSknKVxuICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LmZvbnRzaXplLXNtYWxsLnUtbWFyZ2luYm90dG9tLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnRleHQtZXJyb3InLCBgLSBSJCAke2guZm9ybWF0TnVtYmVyKHB0LmNhdGFyc2VfZmVlLCAyKX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBgVGF4YSBkbyBDYXRhcnNlIGUgbWVpbyBkZSBwYWdhbWVudG8gKCR7aC5mb3JtYXROdW1iZXIoKHB0LnNlcnZpY2VfZmVlICogMTAwKSwgMil9JSnCoGApXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmRpdmlkZXIudS1tYXJnaW5ib3R0b20tMTAnKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIGBSJCAke2guZm9ybWF0TnVtYmVyKHB0LnRvdGFsX2Ftb3VudCwgMil9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgJ1RvdGFsIGEgc2VyIHRyYW5zZmVyaWRvJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHN1Y2Nlc3NmdWxQcm9qZWN0VGF4TW9kYWw7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLnN1Y2Nlc3NmdWxfb25ib2FyZCcpO1xuXG5jb25zdCBwYXJzZUFjY291bnREYXRhID0gKGFjY291bnQsIHRyYW5zZmVyKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHJhbnNmZXJfbGltaXRfZGF0ZTogaC5tb21lbnRpZnkoYWNjb3VudC50cmFuc2Zlcl9saW1pdF9kYXRlKSxcbiAgICAgICAgdG90YWxfYW1vdW50OiBoLmZvcm1hdE51bWJlcih0cmFuc2Zlci50b3RhbF9hbW91bnQsIDIpLFxuICAgICAgICBiYW5rX25hbWU6IGFjY291bnQuYmFua19uYW1lLFxuICAgICAgICBhZ2VuY3k6IGAke2FjY291bnQuYWdlbmN5fSR7YWNjb3VudC5hZ2VuY3lfZGlnaXQgPyAnLScgKyBhY2NvdW50LmFnZW5jeV9kaWdpdCA6ICcnfWAsXG4gICAgICAgIGFjY291bnQ6IGAke2FjY291bnQuYWNjb3VudH0ke2FjY291bnQuYWNjb3VudF9kaWdpdCA/ICctJyArIGFjY291bnQuYWNjb3VudF9kaWdpdCA6ICcnfWAsXG4gICAgICAgIHVzZXJfZW1haWw6IGFjY291bnQudXNlcl9lbWFpbFxuICAgIH07XG59O1xuXG5jb25zdCBpbnNpZ2h0Vk0gPSB7XG4gICAgY29udGVudChzdGF0ZSwgZGF0YSkge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbnMgPSBJMThuLnRyYW5zbGF0aW9uc1tcbiAgICAgICAgICAgIEkxOG4uY3VycmVudExvY2FsZSgpXG4gICAgICAgIF0ucHJvamVjdHMuc3VjY2Vzc2Z1bF9vbmJvYXJkW3N0YXRlXSxcbiAgICAgICAgICAgICAgdHJhbnNsYXRpb25Db250ZXh0ID0gKHN0YXRlID09PSAnZmluaXNoZWQnID8ge30gOiBwYXJzZUFjY291bnREYXRhKFxuICAgICAgICAgICAgICAgICAgXy5maXJzdChkYXRhLmFjY291bnQoKSksXG4gICAgICAgICAgICAgICAgICBfLmZpcnN0KGRhdGEudHJhbnNmZXIoKSlcbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgIGxldCBjb250ZW50T2JqID0ge307XG5cbiAgICAgICAgXy5tYXAodHJhbnNsYXRpb25zLCAodHJhbnNsYXRpb24sIHRyYW5zbGF0aW9uS2V5KSA9PiB7XG4gICAgICAgICAgICBjb250ZW50T2JqID0gXy5leHRlbmQoe30sIGNvbnRlbnRPYmosIHtcbiAgICAgICAgICAgICAgICBbdHJhbnNsYXRpb25LZXldOiBJMThuLnQoYCR7c3RhdGV9LiR7dHJhbnNsYXRpb25LZXl9YCwgSTE4blNjb3BlKHRyYW5zbGF0aW9uQ29udGV4dCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb250ZW50T2JqO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGluc2lnaHRWTTtcbiIsIi8qKlxuICogd2luZG93LmMuUHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkIGNvbXBvbmVudFxuICogcmVuZGVyIGZpcnN0IGludGVyYWN0aW9uIG9mIHN1Y2Nlc3NmdWwgcHJvamVjdCBvbmJvYXJkaW5nXG4gKiB1c2VkIHdoZW4gcHJvamVjdCBpcyBzdWNjZXNzZnVsIGFuZCB3YW50cyB0byBjb25maXJtIGJhbmsgZGF0YSBhbmQgcmVxdWVzdCB0cmFuc2ZlclxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlByb2plY3RTdWNjZXNzZnVsT25ib2FyZCwge3Byb2plY3Q6IHByb2plY3R9KVxuICoqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgZGFzaGJvYXJkSW5mbyBmcm9tICcuL2Rhc2hib2FyZC1pbmZvJztcbmltcG9ydCBwcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudCBmcm9tICcuL3Byb2plY3Qtc3VjY2Vzc2Z1bC1vbmJvYXJkLWNvbmZpcm0tYWNjb3VudCc7XG5pbXBvcnQgbW9kYWxCb3ggZnJvbSAnLi9tb2RhbC1ib3gnO1xuaW1wb3J0IHN1Y2Nlc3NmdWxQcm9qZWN0VGF4TW9kYWwgZnJvbSAnLi9zdWNjZXNzZnVsLXByb2plY3QtdGF4LW1vZGFsJztcbmltcG9ydCBpbnNpZ2h0Vk0gZnJvbSAnLi4vdm1zL2luc2lnaHQtdm0nO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5zdWNjZXNzZnVsX29uYm9hcmQnKTtcblxuY29uc3QgcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0SWRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3Byb2plY3RfaWQ6ICdlcSd9KSxcbiAgICAgICAgICAgICAgcHJvamVjdEFjY291bnRzID0gbS5wcm9wKFtdKSxcbiAgICAgICAgICAgICAgcHJvamVjdFRyYW5zZmVycyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICAgIHNob3dUYXhNb2RhbCA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICAgIG9uYm9hcmRDb21wb25lbnRzID0ge1xuICAgICAgICAgICAgICAgICAgJ3N0YXJ0JzogZGFzaGJvYXJkSW5mbyxcbiAgICAgICAgICAgICAgICAgICdjb25maXJtX2FjY291bnQnOiBwcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudCxcbiAgICAgICAgICAgICAgICAgICdlcnJvcl9hY2NvdW50JzogZGFzaGJvYXJkSW5mbyxcbiAgICAgICAgICAgICAgICAgICdwZW5kaW5nX3RyYW5zZmVyJzogZGFzaGJvYXJkSW5mbyxcbiAgICAgICAgICAgICAgICAgICdmaW5pc2hlZCc6IGRhc2hib2FyZEluZm9cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gbS5wcm9wKCdzdGFydCcpLFxuICAgICAgICAgICAgICBjdXJyZW50Q29tcG9uZW50ID0gKCkgPT4gb25ib2FyZENvbXBvbmVudHNbY3VycmVudFN0YXRlKCldLFxuICAgICAgICAgICAgICBjb250ZW50ID0gKCkgPT4gaW5zaWdodFZNLmNvbnRlbnQoY3VycmVudFN0YXRlKCksIHtcbiAgICAgICAgICAgICAgICAgIGFjY291bnQ6IHByb2plY3RBY2NvdW50cyxcbiAgICAgICAgICAgICAgICAgIHRyYW5zZmVyOiBwcm9qZWN0VHJhbnNmZXJzLFxuICAgICAgICAgICAgICAgICAgc2hvd1RheE1vZGFsOiBzaG93VGF4TW9kYWxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIGxvYWRlciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4sXG4gICAgICAgICAgICAgIGRlY2xpbmVBY2NvdW50TG9hZGVyID0gKGVycm9yTXNnKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBwYSA9IF8uZmlyc3QocHJvamVjdEFjY291bnRzKCkpO1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbHMucHJvamVjdEFjY291bnRFcnJvci5wb3N0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6IGFyZ3MucHJvamVjdCgpLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IGVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBhY2NlcHRBY2NvdW50TG9hZGVyID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihcbiAgICAgICAgICAgICAgICAgIG1vZGVscy5wcm9qZWN0QWNjb3VudC5wb3N0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgcHJvamVjdF9pZDogYXJncy5wcm9qZWN0KCkuaWRcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgcHJvamVjdElkVk0ucHJvamVjdF9pZChhcmdzLnByb2plY3QoKS5pZCk7XG5cbiAgICAgICAgY29uc3QgbFByb2plY3RBY2NvdW50ID0gbG9hZGVyKG1vZGVscy5wcm9qZWN0QWNjb3VudC5nZXRSb3dPcHRpb25zKHByb2plY3RJZFZNLnBhcmFtZXRlcnMoKSkpO1xuICAgICAgICBsUHJvamVjdEFjY291bnQubG9hZCgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHByb2plY3RBY2NvdW50cyhkYXRhKTtcblxuICAgICAgICAgICAgbG9hZEN1cnJlbnRTdGFnZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBsUHJvamVjdFRyYW5zZmVyID0gbG9hZGVyKG1vZGVscy5wcm9qZWN0VHJhbnNmZXIuZ2V0Um93T3B0aW9ucyhwcm9qZWN0SWRWTS5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgbFByb2plY3RUcmFuc2Zlci5sb2FkKCkudGhlbihwcm9qZWN0VHJhbnNmZXJzKTtcblxuICAgICAgICBjb25zdCBzZXRTdGFnZSA9IChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgY3VycmVudFN0YXRlKHN0YXRlKTtcblxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDb21wb25lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgICAgICAgIG5leHRTdGFnZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBfLmtleXMob25ib2FyZENvbXBvbmVudHMpLFxuICAgICAgICAgICAgICAgICAgICBuZXh0S2V5ID0ga2V5c1tfLmluZGV4T2Yoa2V5cywgY3VycmVudFN0YXRlKCkpICsgMV07XG5cbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZShuZXh0S2V5KTtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDb21wb25lbnQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGxvYWRDdXJyZW50U3RhZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWxQcm9qZWN0QWNjb3VudCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGEgPSBfLmZpcnN0KHByb2plY3RBY2NvdW50cygpKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmlzTnVsbChwYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFN0YWdlKCdmaW5pc2hlZCcpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNOdWxsKHBhLmVycm9yX3JlYXNvbikgJiYgXy5pc051bGwocGEudHJhbnNmZXJfc3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRTdGFnZSgnc3RhcnQnKSgpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIV8uaXNOdWxsKHBhLmVycm9yX3JlYXNvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFN0YWdlKCdlcnJvcl9hY2NvdW50JykoKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFfLmlzTnVsbChwYS50cmFuc2Zlcl9zdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhLnRyYW5zZmVyX3N0YXRlID09ICd0cmFuc2ZlcnJlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRTdGFnZSgnZmluaXNoZWQnKSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFN0YWdlKCdwZW5kaW5nX3RyYW5zZmVyJykoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgIC8vIFRPRE86IG5lZWQgdG8gYWRkIGFuIGVycm9yIHZhbGlkYXRpb24gdG8gbm90IG51bGxcbiAgICAgICAgICAgICAgYWRkRXJyb3JSZWFzb24gPSAoZXJyb3JQcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZuID0gZGVjbGluZUFjY291bnRMb2FkZXIoZXJyb3JQcm9wKCkpO1xuICAgICAgICAgICAgICAgICAgICAgIGZuLmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U3RhZ2UoJ2Vycm9yX2FjY291bnQnKSgpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICBhY2NlcHRBY2NvdW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgYWNjZXB0QWNjb3VudExvYWRlci5sb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgc2V0U3RhZ2UoJ3BlbmRpbmdfdHJhbnNmZXInKSgpO1xuICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvamVjdEFjY291bnRzOiBwcm9qZWN0QWNjb3VudHMsXG4gICAgICAgICAgICBwcm9qZWN0VHJhbnNmZXJzOiBwcm9qZWN0VHJhbnNmZXJzLFxuICAgICAgICAgICAgbFByb2plY3RBY2NvdW50OiBsUHJvamVjdEFjY291bnQsXG4gICAgICAgICAgICBsUHJvamVjdFRyYW5zZmVyOiBsUHJvamVjdFRyYW5zZmVyLFxuICAgICAgICAgICAgc2V0U3RhZ2U6IHNldFN0YWdlLFxuICAgICAgICAgICAgbmV4dFN0YWdlOiBuZXh0U3RhZ2UsXG4gICAgICAgICAgICBjdXJyZW50Q29tcG9uZW50OiBjdXJyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgYWRkRXJyb3JSZWFzb246IGFkZEVycm9yUmVhc29uLFxuICAgICAgICAgICAgYWNjZXB0QWNjb3VudDogYWNjZXB0QWNjb3VudCxcbiAgICAgICAgICAgIGFjY2VwdEFjY291bnRMb2FkZXI6IGFjY2VwdEFjY291bnRMb2FkZXIsXG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgZGVjbGluZUFjY291bnRMb2FkZXI6IGRlY2xpbmVBY2NvdW50TG9hZGVyLFxuICAgICAgICAgICAgbG9hZEN1cnJlbnRTdGFnZTogbG9hZEN1cnJlbnRTdGFnZSxcbiAgICAgICAgICAgIHNob3dUYXhNb2RhbDogc2hvd1RheE1vZGFsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdEFjY291bnQgPSBfLmZpcnN0KGN0cmwucHJvamVjdEFjY291bnRzKCkpLFxuICAgICAgICAgICAgICBwcm9qZWN0VHJhbnNmZXIgPSBfLmZpcnN0KGN0cmwucHJvamVjdFRyYW5zZmVycygpKSxcbiAgICAgICAgICAgICAgbHBhID0gY3RybC5sUHJvamVjdEFjY291bnQsXG4gICAgICAgICAgICAgIGxwdCA9IGN0cmwubFByb2plY3RUcmFuc2ZlcjtcblxuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5zZWN0aW9uJywgW1xuICAgICAgICAgICAgKGN0cmwuc2hvd1RheE1vZGFsKCkgPyBtLmNvbXBvbmVudChtb2RhbEJveCwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlNb2RhbDogY3RybC5zaG93VGF4TW9kYWwsXG4gICAgICAgICAgICAgICAgY29udGVudDogW3N1Y2Nlc3NmdWxQcm9qZWN0VGF4TW9kYWwsIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdFRyYW5zZmVyOiBwcm9qZWN0VHJhbnNmZXJcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSkgOiAnJyksXG4gICAgICAgICAgICAoIWxwYSgpICYmICFscHQoKSA/XG4gICAgICAgICAgICAgbS5jb21wb25lbnQoY3RybC5jdXJyZW50Q29tcG9uZW50KCksIHtcbiAgICAgICAgICAgICAgICAgcHJvamVjdFRyYW5zZmVyOiBwcm9qZWN0VHJhbnNmZXIsXG4gICAgICAgICAgICAgICAgIHByb2plY3RBY2NvdW50OiBwcm9qZWN0QWNjb3VudCxcbiAgICAgICAgICAgICAgICAgc2V0U3RhZ2U6IGN0cmwuc2V0U3RhZ2UsXG4gICAgICAgICAgICAgICAgIGFkZEVycm9yUmVhc29uOiBjdHJsLmFkZEVycm9yUmVhc29uLFxuICAgICAgICAgICAgICAgICBhY2NlcHRBY2NvdW50OiBjdHJsLmFjY2VwdEFjY291bnQsXG4gICAgICAgICAgICAgICAgIGFjY2VwdEFjY291bnRMb2FkZXI6IGN0cmwuYWNjZXB0QWNjb3VudExvYWRlcixcbiAgICAgICAgICAgICAgICAgbmV4dFN0YWdlOiBjdHJsLm5leHRTdGFnZSxcbiAgICAgICAgICAgICAgICAgY29udGVudDogY3RybC5jb250ZW50KCksXG4gICAgICAgICAgICAgICAgIGRhdGFUb1JlZHJhdzoge1xuICAgICAgICAgICAgICAgICAgICAgJ3RheF9saW5rJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ29uY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvblNvdXJjZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNob3dUYXhNb2RhbC50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9KSA6IGgubG9hZGVyKCkpXG5cbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmNvbnN0IGZhY2Vib29rQnV0dG9uID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBzaGFyZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChGQil7XG4gICAgICAgICAgICAgICAgRkIudWkoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFyZ3MubWVzc2VuZ2VyID8gJ3NlbmQnIDogJ3NoYXJlJyxcbiAgICAgICAgICAgICAgICAgICAgbGluazogYXJncy51cmwsXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6IGFyZ3MudXJsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaGFyZTogc2hhcmVcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBidXR0b25Dc3MgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXJncy5tb2JpbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3ctaGlkZGVuLW1haW4gdy1oaWRkZW4tbWVkaXVtIHUtbWFyZ2luYm90dG9tLTIwIGJ0biBidG4tbWVkaXVtIGJ0bi1mYic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3MuYmlnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdidG4gYnRuLWZiIGJ0bi1sYXJnZSB1LW1hcmdpbmJvdHRvbS0yMCB3LWJ1dHRvbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnYnRuIGJ0bi1pbmxpbmUgYnRuLW1lZGl1bSBidG4tdGVyY2lhcnkgdS1tYXJnaW5yaWdodC0yMCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG0oJ2J1dHRvbicse1xuICAgICAgICAgICAgY2xhc3M6IGJ1dHRvbkNzcygpLFxuICAgICAgICAgICAgb25jbGljazogY3RybC5zaGFyZVxuICAgICAgICB9LFtcbiAgICAgICAgICAgIG0oJ3NwYW4uZmEnLCB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IGFyZ3MubWVzc2VuZ2VyID8gJ2ZhLWNvbW1lbnQnIDogJ2ZhLWZhY2Vib29rJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBhcmdzLm1lc3NlbmdlciA/ICcgTWVzc2VuZ2VyJyA6ICcgRmFjZWJvb2snXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZhY2Vib29rQnV0dG9uO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgcG9wTm90aWZpY2F0aW9uID0ge1xuICAgIGNvbnRyb2xsZXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwbGF5Tm90aWZpY2F0aW9uOiBoLnRvZ2dsZVByb3AodHJ1ZSwgZmFsc2UpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIChjdHJsLmRpc3BsYXlOb3RpZmljYXRpb24oKSA/IG0oJy5mbGFzaC53LWNsZWFyZml4LmNhcmQuY2FyZC1ub3RpZmljYXRpb24udS1yYWRpdXMuemluZGV4LTIwJywgW1xuICAgICAgICAgICAgbSgnaW1nLmljb24tY2xvc2Vbc3JjPVwiL2Fzc2V0cy9jYXRhcnNlX2Jvb3RzdHJhcC94LnBuZ1wiXVt3aWR0aD1cIjEyXCJdW2FsdD1cImZlY2hhclwiXScsIHtcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLmRpc3BsYXlOb3RpZmljYXRpb24udG9nZ2xlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbCcsIGFyZ3MubWVzc2FnZSlcbiAgICAgICAgXSkgOiBtKCdzcGFuJykpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBvcE5vdGlmaWNhdGlvbjtcbiIsIi8qKlxuICogY29weVRleHRJbnB1dCBjb21wb25lbnRcbiAqIERpc3BsYXlzIGEgdGV4dCBpbnB1dCB0aGF0IGNvcGllcyBpdCdzIGNvbnRlbnQgb24gY2xpY2tcbiAqXG4gKiBFeGFtcGxlIG9mIHVzZTpcbiAqIHZpZXc6ICgpID0+IHtcbiAqICAgLi4uXG4gKiAgIG0uY29tcG9uZW50KGNvcHlUZXh0SW5wdXQsIHt2YWx1ZTogJ3NvbWUgdmFsdWUnfSlcbiAqICAgLi4uXG4gKiB9XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvcE5vdGlmaWNhdGlvbiBmcm9tICcuL3BvcC1ub3RpZmljYXRpb24nO1xuXG5jb25zdCBjb3B5VGV4dElucHV0ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBzaG93U3VjY2VzcyA9IG0ucHJvcChmYWxzZSk7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gKGVsKSA9PiB7XG4gICAgICAgICAgICBsZXQgcmFuZ2UsIHNlbGVjdGlvbjtcblxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmJvZHkuY3JlYXRlVGV4dFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBkb2N1bWVudC5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KGVsKTtcbiAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsKTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzZXRDbGlja0hhbmRsZXIgPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcbiAgICAgICAgICAgIGxldCBjb3B5O1xuICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHRhcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvcHktdGV4dGFyZWEnKTtcbiAgICAgICAgICAgICAgICBlbC5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3QodGV4dGFyZWEpO1xuICAgICAgICAgICAgICAgICAgICBjb3B5ID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dTdWNjZXNzKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLmJsdXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2V0Q2xpY2tIYW5kbGVyOiBzZXRDbGlja0hhbmRsZXIsXG4gICAgICAgICAgICBzaG93U3VjY2Vzczogc2hvd1N1Y2Nlc3NcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnI2NsaXBib2FyZC53LXJvdycsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMC53LWNvbC1zbWFsbC0xMC53LWNvbC10aW55LTEwJywgbShgdGV4dGFyZWEjY29weS10ZXh0YXJlYS5wb3NpdGl2ZS50ZXh0LWZpZWxkLnctaW5wdXRgLCB7XG4gICAgICAgICAgICAgICAgc3R5bGU6ICdtYXJnaW4tYm90dG9tOjA7J1xuICAgICAgICAgICAgfSwgYXJncy52YWx1ZSkpLFxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtc21hbGwtMi53LWNvbC10aW55LTInLCBtKCcuYnRuLmJ0bi1tZWRpdW0uYnRuLW5vLWJvcmRlci5idG4tdGVyY2lhcnkuZmEuZmEtY2xpcGJvYXJkLnctYnV0dG9uJywge1xuICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC5zZXRDbGlja0hhbmRsZXJcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIGN0cmwuc2hvd1N1Y2Nlc3MoKSA/IG0uY29tcG9uZW50KHBvcE5vdGlmaWNhdGlvbiwge21lc3NhZ2U6ICdMaW5rIGNvcGlhZG8nfSkgOiAnJ1xuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb3B5VGV4dElucHV0O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB0b29sdGlwIGZyb20gJy4uL2MvdG9vbHRpcCc7XG5pbXBvcnQgcHJvamVjdERhc2hib2FyZE1lbnUgZnJvbSAnLi4vYy9wcm9qZWN0LWRhc2hib2FyZC1tZW51JztcbmltcG9ydCBtb2RhbEJveCBmcm9tICcuLi9jL21vZGFsLWJveCc7XG5pbXBvcnQgYWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQgZnJvbSAnLi4vYy9hZG1pbi1wcm9qZWN0LWRldGFpbHMtY2FyZCc7XG5pbXBvcnQgb25saW5lU3VjY2Vzc01vZGFsQ29udGVudCBmcm9tICcuLi9jL29ubGluZS1zdWNjZXNzLW1vZGFsLWNvbnRlbnQnO1xuaW1wb3J0IHByb2plY3REYXRhU3RhdHMgZnJvbSAnLi4vYy9wcm9qZWN0LWRhdGEtc3RhdHMnO1xuaW1wb3J0IHByb2plY3REYXRhQ2hhcnQgZnJvbSAnLi4vYy9wcm9qZWN0LWRhdGEtY2hhcnQnO1xuaW1wb3J0IHByb2plY3REYXRhVGFibGUgZnJvbSAnLi4vYy9wcm9qZWN0LWRhdGEtdGFibGUnO1xuaW1wb3J0IHByb2plY3RSZW1pbmRlckNvdW50IGZyb20gJy4uL2MvcHJvamVjdC1yZW1pbmRlci1jb3VudCc7XG5pbXBvcnQgcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkIGZyb20gJy4uL2MvcHJvamVjdC1zdWNjZXNzZnVsLW9uYm9hcmQnO1xuaW1wb3J0IGZhY2Vib29rQnV0dG9uIGZyb20gJy4uL2MvZmFjZWJvb2stYnV0dG9uJztcbmltcG9ydCBjb3B5VGV4dElucHV0IGZyb20gJy4uL2MvY29weS10ZXh0LWlucHV0JztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuaW5zaWdodHMnKTtcblxuY29uc3QgaW5zaWdodHMgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBmaWx0ZXJzVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiAnZXEnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGRpc3BsYXlNb2RhbCA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICBwcm9qZWN0RGV0YWlscyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBjb250cmlidXRpb25zUGVyRGF5ID0gbS5wcm9wKFtdKSxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbiA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBsb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuO1xuXG4gICAgICAgIGlmIChoLnBhcmFtQnlOYW1lKCdvbmxpbmVfc3VjY2VzcycpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgIGRpc3BsYXlNb2RhbC50b2dnbGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpbHRlcnNWTS5wcm9qZWN0X2lkKGFyZ3Mucm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSk7XG5cbiAgICAgICAgY29uc3QgbCA9IGxvYWRlcihtb2RlbHMucHJvamVjdERldGFpbC5nZXRSb3dPcHRpb25zKGZpbHRlcnNWTS5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgbC5sb2FkKCkudGhlbihwcm9qZWN0RGV0YWlscyk7XG5cbiAgICAgICAgY29uc3QgbENvbnRyaWJ1dGlvbnNQZXJEYXkgPSBsb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyRGF5LmdldFJvd09wdGlvbnMoZmlsdGVyc1ZNLnBhcmFtZXRlcnMoKSkpO1xuICAgICAgICBsQ29udHJpYnV0aW9uc1BlckRheS5sb2FkKCkudGhlbihjb250cmlidXRpb25zUGVyRGF5KTtcblxuICAgICAgICBsZXQgY29udHJpYnV0aW9uc1BlckxvY2F0aW9uVGFibGUgPSBbWydFc3RhZG8nLCAnQXBvaW9zJywgJ1IkIGFwb2lhZG9zICglIGRvIHRvdGFsKSddXTtcbiAgICAgICAgY29uc3QgYnVpbGRQZXJMb2NhdGlvblRhYmxlID0gKGNvbnRyaWJ1dGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoIV8uaXNFbXB0eShjb250cmlidXRpb25zKSkgPyBfLm1hcChfLmZpcnN0KGNvbnRyaWJ1dGlvbnMpLnNvdXJjZSwgKGNvbnRyaWJ1dGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjb2x1bW4gPSBbXTtcblxuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKGNvbnRyaWJ1dGlvbi5zdGF0ZV9hY3JvbnltIHx8ICdPdXRyby9vdGhlcicpO1xuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKGNvbnRyaWJ1dGlvbi50b3RhbF9jb250cmlidXRpb25zKTtcbiAgICAgICAgICAgICAgICBjb2x1bW4ucHVzaChbY29udHJpYnV0aW9uLnRvdGFsX2NvbnRyaWJ1dGVkLFsvL0FkZGluZyByb3cgd2l0aCBjdXN0b20gY29tcGFyYXRvciA9PiByZWFkIHByb2plY3QtZGF0YS10YWJsZSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICBtKGBpbnB1dFt0eXBlPVwiaGlkZGVuXCJdW3ZhbHVlPVwiJHtjb250cmlidXRpb24udG90YWxfY29udHJpYnV0ZWR9XCJgKSxcbiAgICAgICAgICAgICAgICAgICAgJ1IkICcsXG4gICAgICAgICAgICAgICAgICAgIGguZm9ybWF0TnVtYmVyKGNvbnRyaWJ1dGlvbi50b3RhbF9jb250cmlidXRlZCwgMiwgMyksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4udy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsICcgKCcgKyBjb250cmlidXRpb24udG90YWxfb25fcGVyY2VudGFnZS50b0ZpeGVkKDIpICsgJyUpJylcbiAgICAgICAgICAgICAgICBdXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlLnB1c2goY29sdW1uKTtcbiAgICAgICAgICAgIH0pIDogW107XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbiA9IGxvYWRlcihtb2RlbHMucHJvamVjdENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbi5nZXRSb3dPcHRpb25zKGZpbHRlcnNWTS5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgbENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbi5sb2FkKCkudGhlbihidWlsZFBlckxvY2F0aW9uVGFibGUpO1xuXG4gICAgICAgIGxldCBjb250cmlidXRpb25zUGVyUmVmVGFibGUgPSBbW1xuICAgICAgICAgICAgSTE4bi50KCdyZWZfdGFibGUuaGVhZGVyLm9yaWdpbicsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgIEkxOG4udCgncmVmX3RhYmxlLmhlYWRlci5jb250cmlidXRpb25zJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgSTE4bi50KCdyZWZfdGFibGUuaGVhZGVyLmFtb3VudCcsIEkxOG5TY29wZSgpKVxuICAgICAgICBdXTtcbiAgICAgICAgY29uc3QgYnVpbGRQZXJSZWZUYWJsZSA9IChjb250cmlidXRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKCFfLmlzRW1wdHkoY29udHJpYnV0aW9ucykpID8gXy5tYXAoXy5maXJzdChjb250cmlidXRpb25zKS5zb3VyY2UsIChjb250cmlidXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAvL1Rlc3QgaWYgdGhlIHN0cmluZyBtYXRjaGVzIGEgd29yZCBzdGFydGluZyB3aXRoIGN0cnNlXyBhbmQgZm9sbG93ZWQgYnkgYW55IG5vbi1kaWdpdCBncm91cCBvZiBjaGFyYWN0ZXJzXG4gICAgICAgICAgICAgICAgLy9UaGlzIGFsbG93cyB0byByZW1vdmUgYW55IHZlcnNpb25lZCByZWZlcnJhbCAoaS5lLjogY3Ryc2VfbmV3c2xldHRlcl8xMjMpIHdoaWxlIHN0aWxsIGdldHRpbmcgY3Ryc2VfdGVzdF9yZWZcbiAgICAgICAgICAgICAgICBjb25zdCByZSA9IC8oY3Ryc2VfW1xcRF0qKS8sXG4gICAgICAgICAgICAgICAgICAgIHRlc3QgPSByZS5leGVjKGNvbnRyaWJ1dGlvbi5yZWZlcnJhbF9saW5rKTtcblxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW4gPSBbXTtcblxuICAgICAgICAgICAgICAgIGlmICh0ZXN0KXtcbiAgICAgICAgICAgICAgICAgICAgLy9SZW1vdmVzIGxhc3QgdW5kZXJzY29yZSBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uLnJlZmVycmFsX2xpbmsgPSB0ZXN0WzBdLnN1YnN0cigtMSkgPT09ICdfJyA/IHRlc3RbMF0uc3Vic3RyKDAsIHRlc3RbMF0ubGVuZ3RoIC0gMSkgOiB0ZXN0WzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKGNvbnRyaWJ1dGlvbi5yZWZlcnJhbF9saW5rID8gSTE4bi50KCdyZWZlcnJhbC4nICsgY29udHJpYnV0aW9uLnJlZmVycmFsX2xpbmssIEkxOG5TY29wZSh7ZGVmYXVsdFZhbHVlOiBjb250cmlidXRpb24ucmVmZXJyYWxfbGlua30pKSA6IEkxOG4udCgncmVmZXJyYWwub3RoZXJzJywgSTE4blNjb3BlKCkpKTtcbiAgICAgICAgICAgICAgICBjb2x1bW4ucHVzaChjb250cmlidXRpb24udG90YWwpO1xuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKFtjb250cmlidXRpb24udG90YWxfYW1vdW50LFtcbiAgICAgICAgICAgICAgICAgICAgbShgaW5wdXRbdHlwZT1cImhpZGRlblwiXVt2YWx1ZT1cIiR7Y29udHJpYnV0aW9uLnRvdGFsX2NvbnRyaWJ1dGVkfVwiYCksXG4gICAgICAgICAgICAgICAgICAgICdSJCAnLFxuICAgICAgICAgICAgICAgICAgICBoLmZvcm1hdE51bWJlcihjb250cmlidXRpb24udG90YWxfYW1vdW50LCAyLCAzKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgJyAoJyArIGNvbnRyaWJ1dGlvbi50b3RhbF9vbl9wZXJjZW50YWdlLnRvRml4ZWQoMikgKyAnJSknKVxuICAgICAgICAgICAgICAgIF1dKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udHJpYnV0aW9uc1BlclJlZlRhYmxlLnB1c2goY29sdW1uKTtcbiAgICAgICAgICAgIH0pIDogW107XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbENvbnRyaWJ1dGlvbnNQZXJSZWYgPSBsb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyUmVmLmdldFJvd09wdGlvbnMoZmlsdGVyc1ZNLnBhcmFtZXRlcnMoKSkpO1xuICAgICAgICBsQ29udHJpYnV0aW9uc1BlclJlZi5sb2FkKCkudGhlbihidWlsZFBlclJlZlRhYmxlKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbDogbCxcbiAgICAgICAgICAgIGxDb250cmlidXRpb25zUGVyUmVmOiBsQ29udHJpYnV0aW9uc1BlclJlZixcbiAgICAgICAgICAgIGxDb250cmlidXRpb25zUGVyTG9jYXRpb246IGxDb250cmlidXRpb25zUGVyTG9jYXRpb24sXG4gICAgICAgICAgICBsQ29udHJpYnV0aW9uc1BlckRheTogbENvbnRyaWJ1dGlvbnNQZXJEYXksXG4gICAgICAgICAgICBkaXNwbGF5TW9kYWw6IGRpc3BsYXlNb2RhbCxcbiAgICAgICAgICAgIGZpbHRlcnNWTTogZmlsdGVyc1ZNLFxuICAgICAgICAgICAgcHJvamVjdERldGFpbHM6IHByb2plY3REZXRhaWxzLFxuICAgICAgICAgICAgY29udHJpYnV0aW9uc1BlckRheTogY29udHJpYnV0aW9uc1BlckRheSxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlOiBjb250cmlidXRpb25zUGVyTG9jYXRpb25UYWJsZSxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJSZWZUYWJsZTogY29udHJpYnV0aW9uc1BlclJlZlRhYmxlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IF8uZmlyc3QoY3RybC5wcm9qZWN0RGV0YWlscygpKSB8fCB7XG4gICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ1JlYWxpemFkb3InXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgYnVpbGRUb29sdGlwID0gKGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQodG9vbHRpcCwge1xuICAgICAgICAgICAgICAgICAgICAgIGVsOiBlbCxcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdJbmZvcm1hIGRlIG9uZGUgdmllcmFtIG9zIGFwb2lvcyBkZSBzZXUgcHJvamV0by4gU2FpYmEgY29tbyB1c2FyIGVzc2EgdGFiZWxhIGUgcGxhbmVqYXIgbWVsaG9yIHN1YXMgYcOnw7VlcyBkZSBjb211bmljYcOnw6NvICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGFbaHJlZj1cIiR7STE4bi50KCdyZWZfdGFibGUuaGVscF91cmwnLCBJMThuU2NvcGUoKSl9XCJdW3RhcmdldD0nX2JsYW5rJ11gLCAnYXF1aS4nKVxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDM4MFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFjdHJsLmwoKSkge1xuICAgICAgICAgICAgcHJvamVjdC51c2VyLm5hbWUgPSBwcm9qZWN0LnVzZXIubmFtZSB8fCAnUmVhbGl6YWRvcic7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbSgnLnByb2plY3QtaW5zaWdodHMnLCAhY3RybC5sKCkgPyBbXG4gICAgICAgICAgICAocHJvamVjdC5pc19vd25lcl9vcl9hZG1pbiA/IG0uY29tcG9uZW50KHByb2plY3REYXNoYm9hcmRNZW51LCB7XG4gICAgICAgICAgICAgICAgcHJvamVjdDogbS5wcm9wKHByb2plY3QpXG4gICAgICAgICAgICB9KSA6ICcnKSxcbiAgICAgICAgICAgIChjdHJsLmRpc3BsYXlNb2RhbCgpID8gbS5jb21wb25lbnQobW9kYWxCb3gsIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5TW9kYWw6IGN0cmwuZGlzcGxheU1vZGFsLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG9ubGluZVN1Y2Nlc3NNb2RhbENvbnRlbnRcbiAgICAgICAgICAgIH0pIDogJycpLFxuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgKHByb2plY3Quc3RhdGUgPT09ICdzdWNjZXNzZnVsJykgPyBtLmNvbXBvbmVudChwcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmQsIHtwcm9qZWN0OiBtLnByb3AocHJvamVjdCl9KSA6IFtcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNDAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXB1c2gtMi5kYXNoYm9hcmQtaGVhZGVyLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZXIubGluZWhlaWdodC1sb29zZXIudS1tYXJnaW5ib3R0b20tMTAnLCBJMThuLnQoJ2NhbXBhaWduX3RpdGxlJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Quc3RhdGUgPT09ICdvbmxpbmUnID8gbSgnLmNhcmQuY2FyZC1zZWNvbmRhcnkudS1tYXJnaW5ib3R0b20tMjAudS1yYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0yMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29tcGFydGlsaGUgc3VhIGNhbXBhbmhhJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0LnBlcm1hbGluayA/IG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctc3ViLWNvbC53LWNvbC53LWNvbC02JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoZmFjZWJvb2tCdXR0b24sIHt1cmw6IGgucHJvamVjdEZ1bGxQZXJtYWxpbmsocHJvamVjdCkgKyAnP3JlZj1mYWNlYm9vayZ1dG1fc291cmNlPWZhY2Vib29rLmNvbSZ1dG1fbWVkaXVtPXNvY2lhbCZ1dG1fY2FtcGFpZ249cHJvamVjdF9zaGFyZV9pbnNpZ2h0cycsIGJpZzogdHJ1ZX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250d2VpZ2h0LXNlbWlib2xkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0xpbmsgZGlyZXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoY29weVRleHRJbnB1dCwge3ZhbHVlOiBoLnByb2plY3RGdWxsUGVybWFsaW5rKHByb2plY3QpICsgJz9yZWY9cHJvamVjdF9saW5rJ30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9qZWN0LnN0YXRlID09PSAnZHJhZnQnID8gbS5jb21wb25lbnQoYWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZTogcHJvamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdwLicgKyBwcm9qZWN0LnN0YXRlICsgJy1wcm9qZWN0LXRleHQuZm9udHNpemUtc21hbGwubGluZWhlaWdodC1sb29zZScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0Lm1vZGUgPT09ICdmbGV4JyAmJiBfLmlzTnVsbChwcm9qZWN0LmV4cGlyZXNfYXQpICYmIHByb2plY3Quc3RhdGUgIT09ICdkcmFmdCcgPyBtKCdzcGFuJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ2ZpbmlzaF9leHBsYW5hdGlvbicsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVwiaHR0cDovL3N1cG9ydGUuY2F0YXJzZS5tZS9oYy9wdC1ici9hcnRpY2xlcy8yMDgxNDEwMzMtQ29tby1kZWZpbmlyLW8tcHJhem8tbm8tQ2F0YXJzZS1mbGV4LVwiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLEkxOG4udCgna25vd19tb3JlJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkgOiBtLnRydXN0KEkxOG4udChgY2FtcGFpZ24uJHtwcm9qZWN0Lm1vZGV9LiR7cHJvamVjdC5zdGF0ZX1gLCBJMThuU2NvcGUoe3VzZXJuYW1lOiBwcm9qZWN0LnVzZXIubmFtZSwgZXhwaXJlc19hdDogaC5tb21lbnRpZnkocHJvamVjdC56b25lX2V4cGlyZXNfYXQpLCBzZW50X3RvX2FuYWx5c2lzX2F0OiBoLm1vbWVudGlmeShwcm9qZWN0LnNlbnRfdG9fYW5hbHlzaXNfYXQpfSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksIChwcm9qZWN0LmlzX3B1Ymxpc2hlZCkgPyBbXG4gICAgICAgICAgICAgICAgbSgnLmRpdmlkZXInKSxcbiAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24tb25lLWNvbHVtbi5zZWN0aW9uLmJnLWdyYXkuYmVmb3JlLWZvb3RlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdERhdGFTdGF0cywge3Byb2plY3Q6IG0ucHJvcChwcm9qZWN0KX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiAnMzAwcHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjdHJsLmxDb250cmlidXRpb25zUGVyRGF5KCkgPyBtLmNvbXBvbmVudChwcm9qZWN0RGF0YUNoYXJ0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjdHJsLmNvbnRyaWJ1dGlvbnNQZXJEYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogSTE4bi50KCdhbW91bnRfcGVyX2RheV9sYWJlbCcsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFLZXk6ICd0b3RhbF9hbW91bnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXM6IChpdGVtKSA9PiBoLm1vbWVudGlmeShpdGVtLnBhaWRfYXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHlTdGF0ZTogSTE4bi50KCdhbW91bnRfcGVyX2RheV9lbXB0eScsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6IGgubG9hZGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiAnMzAwcHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjdHJsLmxDb250cmlidXRpb25zUGVyRGF5KCkgPyBtLmNvbXBvbmVudChwcm9qZWN0RGF0YUNoYXJ0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjdHJsLmNvbnRyaWJ1dGlvbnNQZXJEYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogSTE4bi50KCdjb250cmlidXRpb25zX3Blcl9kYXlfbGFiZWwnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhS2V5OiAndG90YWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXM6IChpdGVtKSA9PiBoLm1vbWVudGlmeShpdGVtLnBhaWRfYXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHlTdGF0ZTogSTE4bi50KCdjb250cmlidXRpb25zX3Blcl9kYXlfZW1wdHknLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBoLmxvYWRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTIudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnByb2plY3QtY29udHJpYnV0aW9ucy1wZXItcmVmJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMTAuZm9udHNpemUtbGFyZ2UudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ3JlZl9vcmlnaW5fdGl0bGUnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5uZXdGZWF0dXJlQmFkZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZFRvb2x0aXAoJ3NwYW4uZm9udHNpemUtc21hbGxlc3QudG9vbHRpcC13cmFwcGVyLmZhLmZhLXF1ZXN0aW9uLWNpcmNsZS5mb250Y29sb3Itc2Vjb25kYXJ5JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWN0cmwubENvbnRyaWJ1dGlvbnNQZXJSZWYoKSA/ICFfLmlzRW1wdHkoXy5yZXN0KGN0cmwuY29udHJpYnV0aW9uc1BlclJlZlRhYmxlKSkgPyBtLmNvbXBvbmVudChwcm9qZWN0RGF0YVRhYmxlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGU6IGN0cmwuY29udHJpYnV0aW9uc1BlclJlZlRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTb3J0SW5kZXg6IC0yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6IG0oJy5jYXJkLnUtcmFkaXVzLm1lZGl1bS51LW1hcmdpbmJvdHRvbS02MCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LXRleHQtY2VudGVyLnUtbWFyZ2ludG9wLTQwLnUtbWFyZ2luYm90dG9tLTQwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXB1c2gtMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdjb250cmlidXRpb25zX3Blcl9yZWZfZW1wdHknLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogaC5sb2FkZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEyLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5wcm9qZWN0LWNvbnRyaWJ1dGlvbnMtcGVyLXJlZicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXInLCBJMThuLnQoJ2xvY2F0aW9uX29yaWdpbl90aXRsZScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhY3RybC5sQ29udHJpYnV0aW9uc1BlckxvY2F0aW9uKCkgPyAhXy5pc0VtcHR5KF8ucmVzdChjdHJsLmNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlKSkgPyBtLmNvbXBvbmVudChwcm9qZWN0RGF0YVRhYmxlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGU6IGN0cmwuY29udHJpYnV0aW9uc1BlckxvY2F0aW9uVGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNvcnRJbmRleDogLTJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogbSgnLmNhcmQudS1yYWRpdXMubWVkaXVtLnUtbWFyZ2luYm90dG9tLTYwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtdGV4dC1jZW50ZXIudS1tYXJnaW50b3AtNDAudS1tYXJnaW5ib3R0b20tNDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgudy1jb2wtcHVzaC0yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLWJhc2UnLCBJMThuLnQoJ2NvbnRyaWJ1dGlvbnNfcGVyX2xvY2F0aW9uX2VtcHR5JywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IGgubG9hZGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0UmVtaW5kZXJDb3VudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6IHByb2plY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0gOiAnJ1xuICAgICAgICBdIDogaC5sb2FkZXIoKSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5zaWdodHM7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3BhZ2VzLmpvYnMnKTtcblxuY29uc3Qgam9icyA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uaGVyby1qb2JzLmhlcm8tbWVkaXVtJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lLnUtdGV4dC1jZW50ZXInLFtcbiAgICAgICAgICAgICAgICAgICAgbSgnaW1nLmljb24taGVyb1tzcmM9XCIvYXNzZXRzL2xvZ28td2hpdGUucG5nXCJdJyksXG4gICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTIwLmZvbnRzaXplLWxhcmdlc3QnLCBJMThuLnQoJ3RpdGxlJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIudS1tYXJnaW50b3AtNDAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXB1c2gtMi51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIEkxOG4udCgnaW5mbycsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYVtocmVmPVwiL3Byb2plY3RzL25ld1wiXS53LWJ1dHRvbi5idG4uYnRuLWxhcmdlLmJ0bi1pbmxpbmUnLCBJMThuLnQoJ2N0YScsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF07XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgam9icztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgbGl2ZVN0YXRpc3RpY3MgPSB7XG4gICAgY29udHJvbGxlcihhcmdzID0ge30pIHtcbiAgICAgICAgY29uc3QgcGFnZVN0YXRpc3RpY3MgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgbm90aWZpY2F0aW9uRGF0YSA9IG0ucHJvcCh7fSk7XG5cbiAgICAgICAgbW9kZWxzLnN0YXRpc3RpYy5nZXRSb3coKS50aGVuKHBhZ2VTdGF0aXN0aWNzKTtcbiAgICAgICAgLy8gYXJncy5zb2NrZXQgaXMgYSBzb2NrZXQgcHJvdmlkZWQgYnkgc29ja2V0LmlvXG4gICAgICAgIC8vIGNhbiBzZWUgdGhlcmUgaHR0cHM6Ly9naXRodWIuY29tL2NhdGFyc2UvY2F0YXJzZS1saXZlL2Jsb2IvbWFzdGVyL3B1YmxpYy9pbmRleC5qcyNMOFxuICAgICAgICBpZiAoYXJncy5zb2NrZXQgJiYgXy5pc0Z1bmN0aW9uKGFyZ3Muc29ja2V0Lm9uKSkge1xuICAgICAgICAgICAgYXJncy5zb2NrZXQub24oJ25ld19wYWlkX2NvbnRyaWJ1dGlvbnMnLCAobXNnKSA9PiB7XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uRGF0YShKU09OLnBhcnNlKG1zZy5wYXlsb2FkKSk7XG4gICAgICAgICAgICAgICAgbW9kZWxzLnN0YXRpc3RpYy5nZXRSb3coKS50aGVuKHBhZ2VTdGF0aXN0aWNzKTtcbiAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFnZVN0YXRpc3RpY3M6IHBhZ2VTdGF0aXN0aWNzLFxuICAgICAgICAgICAgbm90aWZpY2F0aW9uRGF0YTogbm90aWZpY2F0aW9uRGF0YVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBjdHJsLm5vdGlmaWNhdGlvbkRhdGEoKTtcblxuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5iZy1zdGF0cy5zZWN0aW9uLm1pbi1oZWlnaHQtMTAwJywgW1xuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtdGV4dC1jZW50ZXInLCBfLm1hcChjdHJsLnBhZ2VTdGF0aXN0aWNzKCksIChzdGF0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFttKCdpbWcudS1tYXJnaW5ib3R0b20tNjBbc3JjPVwiaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NWFkYTVkZDExYjM2YTUyNjE2ZDk3ZGZfc3ltYm9sLWNhdGFyc2UucG5nXCJdJyksXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3ItbmVnYXRpdmUudS1tYXJnaW5ib3R0b20tNDAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbWVnYWp1bWJvLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUiQgJyArIGguZm9ybWF0TnVtYmVyKHN0YXQudG90YWxfY29udHJpYnV0ZWQsIDIsIDMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZScsICdEb2Fkb3MgcGFyYSBwcm9qZXRvcyBwdWJsaWNhZG9zIHBvciBhcXVpJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3ItbmVnYXRpdmUudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbWVnYWp1bWJvLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBzdGF0LnRvdGFsX2NvbnRyaWJ1dG9ycyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UnLCAnUGVzc29hcyBqw6EgYXBvaWFyYW0gcGVsbyBtZW5vcyAxIHByb2pldG8gbm8gQ2F0YXJzZScpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0pKSwgKCFfLmlzRW1wdHkoZGF0YSkgPyBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuY2FyZC51LXJhZGl1cy51LW1hcmdpbmJvdHRvbS02MC5tZWRpdW0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXNtYWxsLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLnUtcm91bmRbc3JjPVwiJyArIGgudXNlQXZhdGFyT3JEZWZhdWx0KGRhdGEudXNlcl9pbWFnZSkgKyAnXCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgudy1jb2wtc21hbGwtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIGRhdGEudXNlcl9uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC51LXRleHQtY2VudGVyLmZvbnRzaXplLWJhc2UudS1tYXJnaW50b3AtMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsICdhY2Fib3UgZGUgYXBvaWFyIG8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1zbWFsbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy50aHVtYi1wcm9qZWN0LnUtcmFkaXVzW3NyYz1cIicgKyBkYXRhLnByb2plY3RfaW1hZ2UgKyAnXCJdW3dpZHRoPVwiNzVcIl0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC53LWNvbC1zbWFsbC04JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS5saW5laGVpZ2h0LXRpZ2h0JywgZGF0YS5wcm9qZWN0X25hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSA6ICcnKSxcbiAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTEwLmZvbnRjb2xvci1uZWdhdGl2ZScsIFtcbiAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuLmZvbnRjb2xvci1uZWdhdGl2ZVtocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2NhdGFyc2VcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWdpdGh1YicsICcuJyksICcgT3BlbiBTb3VyY2UgY29tIG9yZ3VsaG8hICdcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxpdmVTdGF0aXN0aWNzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBGaWx0ZXJNYWluIGZyb20gJy4uL2MvZmlsdGVyLW1haW4nO1xuXG5jb25zdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0SGVhZGVyID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBmaWx0ZXJCdWlsZGVyID0gYXJncy5maWx0ZXJCdWlsZGVyLFxuICAgICAgICAgICAgICBwYXltZW50U3RhdGVGaWx0ZXIgPSAgXy5maW5kV2hlcmUoZmlsdGVyQnVpbGRlciwge2xhYmVsOiAncGF5bWVudF9zdGF0ZSd9KSxcbiAgICAgICAgICAgICAgcmV3YXJkRmlsdGVyID0gXy5maW5kV2hlcmUoZmlsdGVyQnVpbGRlciwge2xhYmVsOiAncmV3YXJkX2ZpbHRlcid9KSxcbiAgICAgICAgICAgICAgbWFpbkZpbHRlciA9IF8uZmluZFdoZXJlKGZpbHRlckJ1aWxkZXIsIHtjb21wb25lbnQ6IEZpbHRlck1haW59KSxcbiAgICAgICAgICAgICAgcHJvamVjdF9pZCA9IGFyZ3MuZmlsdGVyVk0ucHJvamVjdF9pZCgpO1xuXG4gICAgICAgIHJld2FyZEZpbHRlci5kYXRhLm9wdGlvbnMgPSBhcmdzLm1hcFJld2FyZHNUb09wdGlvbnMoKTtcblxuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5kYXNoYm9hcmQtaGVhZGVyJywgW1xuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyLnUtdGV4dC1jZW50ZXIuZm9udHdlaWdodC1zZW1pYm9sZC5saW5laGVpZ2h0LWxvb3Nlci51LW1hcmdpbmJvdHRvbS0zMCcsICdSZWxhdMOzcmlvIGRlIGFwb2lvcycpXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJylcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1mb3JtJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdmb3JtJywge29uc3VibWl0OiBhcmdzLnN1Ym1pdH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQocGF5bWVudFN0YXRlRmlsdGVyLmNvbXBvbmVudCwgcGF5bWVudFN0YXRlRmlsdGVyLmRhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHJld2FyZEZpbHRlci5jb21wb25lbnQsIHJld2FyZEZpbHRlci5kYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC03LnUtbWFyZ2ludG9wLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC5fdy1zdWItY29sJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KG1haW5GaWx0ZXIuY29tcG9uZW50LCBtYWluRmlsdGVyLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY2xlYXJmaXgudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLnUtcmlnaHQuZm9udHNpemUtc21hbGwubGluZWhlaWdodC1sb29zZXJbaHJlZj1cIi9wcm9qZWN0cy8ke3Byb2plY3RfaWR9L2Rvd25sb2FkX3JlcG9ydHNcIl1gLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtZG93bmxvYWQnLCAnLicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEJhaXhhciByZWxhdMOzcmlvcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydEhlYWRlcjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgcHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydENvbnRlbnRDYXJkID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0KCksXG4gICAgICAgICAgICAgIHN0YXRlQ2xhc3MgPSAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgb25saW5lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwYWlkJzogJ3RleHQtc3VjY2Vzcy5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncmVmdW5kZWQnOiAndGV4dC1lcnJvci5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncGVuZGluZ19yZWZ1bmQnOiAndGV4dC1lcnJvci5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncGVuZGluZyc6ICd0ZXh0LXdhaXRpbmcuZmEtY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlZnVzZWQnOiAndGV4dC1lcnJvci5mYS1jaXJjbGUnXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBmYWlsZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhaWQnOiAndGV4dC1lcnJvci5mYS1jaXJjbGUtbycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdyZWZ1bmRlZCc6ICd0ZXh0LXJlZnVuZGVkLmZhLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwZW5kaW5nX3JlZnVuZCc6ICd0ZXh0LXJlZnVuZGVkLmZhLWNpcmNsZS1vJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BlbmRpbmcnOiAndGV4dC1yZWZ1bmRlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdyZWZ1c2VkJzogJ3RleHQtcmVmdW5kZWQnXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB3YWl0aW5nX2Z1bmRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwYWlkJzogJ3RleHQtc3VjY2Vzcy5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncmVmdW5kZWQnOiAndGV4dC1lcnJvci5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncGVuZGluZ19yZWZ1bmQnOiAndGV4dC1lcnJvci5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncGVuZGluZyc6ICd0ZXh0LXdhaXRpbmcuZmEtY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlZnVzZWQnOiAndGV4dC1lcnJvci5mYS1jaXJjbGUnXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwYWlkJzogJ3RleHQtc3VjY2Vzcy5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncmVmdW5kZWQnOiAndGV4dC1lcnJvci5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncGVuZGluZ19yZWZ1bmQnOiAndGV4dC1lcnJvci5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncGVuZGluZyc6ICd0ZXh0LXdhaXRpbmcuZmEtY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlZnVzZWQnOiAndGV4dC1lcnJvci5mYS1jaXJjbGUnXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzZXNbcHJvamVjdC5zdGF0ZV1bc3RhdGVdO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0ZUNsYXNzOiBzdGF0ZUNsYXNzXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IGNvbnRyaWJ1dGlvbiA9IGFyZ3MuY29udHJpYnV0aW9uKCksXG4gICAgICAgICAgICBwcm9maWxlX2ltZyA9IChfLmlzRW1wdHkoY29udHJpYnV0aW9uLnByb2ZpbGVfaW1nX3RodW1ibmFpbCkgPyAnL2Fzc2V0cy9jYXRhcnNlX2Jvb3RzdHJhcC91c2VyLmpwZycgOiBjb250cmlidXRpb24ucHJvZmlsZV9pbWdfdGh1bWJuYWlsKSxcbiAgICAgICAgICAgIHJld2FyZCA9IGNvbnRyaWJ1dGlvbi5yZXdhcmQgfHwge21pbmltdW1fdmFsdWU6IDAsIGRlc2NyaXB0aW9uOiAnTmVuaHVtYSByZWNvbXBlbnNhIHNlbGVjaW9uYWRhJ307XG4gICAgICAgIHJldHVybiBtKCcudy1jbGVhcmZpeC5jYXJkJywgW1xuICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xLnctY29sLXRpbnktMScsIFtcbiAgICAgICAgICAgICAgICAgICAgbShgaW1nLnVzZXItYXZhdGFyLnUtbWFyZ2luYm90dG9tLTEwW3NyYz0nJHtwcm9maWxlX2ltZ30nXWApXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExLnctY29sLXRpbnktMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LmZvbnRzaXplLW1pbmkuZm9udHdlaWdodC1zZW1pYm9sZCcsIGgubW9tZW50aWZ5KGNvbnRyaWJ1dGlvbi5jcmVhdGVkX2F0LCAnREQvTU0vWVlZWSwgSEg6bW0nKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtc21hbGxlci5saW5laGVpZ2h0LXRpZ2h0ZXInLCBjb250cmlidXRpb24udXNlcl9uYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC1sb29zZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb250cmlidXRpb24uaGFzX2Fub3RoZXIgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuLWxpZ2h0LmJhZGdlLmJhZGdlLWxpZ2h0JywgJysxIGFwb2lvICcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29udHJpYnV0aW9uLmFub255bW91cyA/IG0oJ3NwYW4uZmEuZmEtZXllLXNsYXNoLmZvbnRjb2xvci1zZWNvbmRhcnknLCBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnlbc3R5bGU9XCJmb250LXNpemU6MTFweDtcIl0nLCAnIEFwb2lvIG7Do28tcMO6YmxpY28nKSkgOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC1sb29zZXInLCAoY29udHJpYnV0aW9uLmVtYWlsKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmxpbmVoZWlnaHQtdGlnaHRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgc3Bhbi5mYS5mb250c2l6ZS1zbWFsbGVzdC4ke2N0cmwuc3RhdGVDbGFzcyhjb250cmlidXRpb24uc3RhdGUpfWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIMKgwqAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLWxhcmdlJywgYFIkICR7aC5mb3JtYXROdW1iZXIoY29udHJpYnV0aW9uLnZhbHVlLCAyLCAzKX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QuZm9udHdlaWdodC1zZW1pYm9sZCcsIGBSZWNvbXBlbnNhOsKgUiQgJHtoLmZvcm1hdE51bWJlcihyZXdhcmQubWluaW11bV92YWx1ZSwgMiwgMyl9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdCcsIHJld2FyZC5kZXNjcmlwdGlvbi5zdWJzdHJpbmcoMCwgODApICsgJy4uLicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgXSkvKixcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIudy1jb2wudy1jb2wtMi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LnUtdGV4dC1jZW50ZXJcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeVwiLCBcIkVudmllaSFcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIi5mb250c2l6ZS1zbWFsbGVzdC51LW1hcmdpbmJvdHRvbS0yMC5saW5laGVpZ2h0LWxvb3NlXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcImEuY2hlY2tib3gtYmlnW2hyZWY9JyMnXVwiLCBcIi5cIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKFwiLnctY29sLnctY29sLTJcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIuZm9udHNpemUtc21hbGxlc3RcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiYS5saW5rLWhpZGRlbltocmVmPScjJ11cIiwgXCJRdWVzdGlvbsOhcmlvXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICxcIiBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsbShcInNwYW4uZm9udHdlaWdodC1zZW1pYm9sZC50ZXh0LXdhaXRpbmdcIiwgXCJlbnZpYWRvXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3ItdGVyY2lhcnlcIiwgXCJlbSAyOS8xMC8yMDE1XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSovXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgLy9tKFwiYS53LWlubGluZS1ibG9jay5hcnJvdy1hZG1pbi5mYS5mYS1jaGV2cm9uLWRvd24uZm9udGNvbG9yLXNlY29uZGFyeVtkYXRhLWl4PSdzaG93LWRldGFpbC1ib3gnXVtocmVmPScjJ11cIilcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydENvbnRlbnRDYXJkO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RDb250cmlidXRpb25SZXBvcnRDb250ZW50Q2FyZCBmcm9tICcuL3Byb2plY3QtY29udHJpYnV0aW9uLXJlcG9ydC1jb250ZW50LWNhcmQnO1xuXG5jb25zdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0Q29udGVudCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgbGlzdCA9IGFyZ3MubGlzdDtcbiAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uYmctZ3JheS5iZWZvcmUtZm9vdGVyLnNlY3Rpb24nLCBbXG4gICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOS53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIChsaXN0LmlzTG9hZGluZygpID8gJycgOiBsaXN0LnRvdGFsKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIGFwb2lvcydcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tKFwiLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGRcIiwgXCJSJCAxMi4wMDAsMDBcIilcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICBUT0RPOiBvcmRlcmluZyBmaWx0ZXIgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgbShcIi53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02XCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIudy1mb3JtXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiZm9ybVtkYXRhLW5hbWU9J0VtYWlsIEZvcm0gNSddW2lkPSdlbWFpbC1mb3JtLTUnXVtuYW1lPSdlbWFpbC1mb3JtLTUnXVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeVwiLCBcIk9yZGVuYXIgcG9yOlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcInNlbGVjdC53LXNlbGVjdC50ZXh0LWZpZWxkLnBvc2l0aXZlLmZvbnRzaXplLXNtYWxsZXN0W2lkPSdmaWVsZC05J11bbmFtZT0nZmllbGQtOSddXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJvcHRpb25bdmFsdWU9JyddXCIsIFwiRGF0YSAocmVjZW50ZXMgcGFyYSBhbnRpZ29zKVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJvcHRpb25bdmFsdWU9JyddXCIsIFwiRGF0YSAoYW50aWdvcyBwYXJhIHJlY2VudGVzKVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJvcHRpb25bdmFsdWU9JyddXCIsIFwiVmFsb3IgKG1haW9yIHBhcmEgbWVub3IpXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIm9wdGlvblt2YWx1ZT0nRmlyc3QnXVwiLCBcIlZhbG9yIChtZW5vciBwYXJhIG1haW9yKVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSovXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXy5tYXAobGlzdC5jb2xsZWN0aW9uKCksIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvbiA9IG0ucHJvcChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KHByb2plY3RDb250cmlidXRpb25SZXBvcnRDb250ZW50Q2FyZCwge3Byb2plY3Q6IGFyZ3MucHJvamVjdCwgY29udHJpYnV0aW9uOiBjb250cmlidXRpb259KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24uYmctZ3JheScsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS02MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXB1c2gtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIWxpc3QuaXNMb2FkaW5nKCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobGlzdC5pc0xhc3RQYWdlKCkgPyAnJyA6IG0oJ2J1dHRvbiNsb2FkLW1vcmUuYnRuLmJ0bi1tZWRpdW0uYnRuLXRlcmNpYXJ5Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogbGlzdC5uZXh0UGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnQ2FycmVnYXIgbWFpcycpKSA6IGgubG9hZGVyKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG5cbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydENvbnRlbnQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCByZXBsYWNlRGlhY3JpdGljcyBmcm9tICdyZXBsYWNlRGlhY3JpdGljcyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3Qgdm0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICBmdWxsX3RleHRfaW5kZXg6ICdAQCcsXG4gICAgc3RhdGU6ICdpbicsXG4gICAgcmV3YXJkX2lkOiAnZXEnLFxuICAgIHByb2plY3RfaWQ6ICdlcSdcbn0pLFxuICAgICAgcGFyYW1Ub1N0cmluZyA9IChwKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChwIHx8ICcnKS50b1N0cmluZygpLnRyaW0oKTtcbiAgICAgIH07XG5cbnZtLnN0YXRlKCcnKTtcbnZtLm9yZGVyKHtcbiAgICBpZDogJ2Rlc2MnXG59KTtcblxudm0uZnVsbF90ZXh0X2luZGV4LnRvRmlsdGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IGZpbHRlciA9IHBhcmFtVG9TdHJpbmcodm0uZnVsbF90ZXh0X2luZGV4KCkpO1xuICAgIHJldHVybiBmaWx0ZXIgJiYgcmVwbGFjZURpYWNyaXRpY3MoZmlsdGVyKSB8fCB1bmRlZmluZWQ7XG59O1xuXG52bS53aXRoTnVsbFBhcmFtZXRlcnMgPSAoKSA9PiB7XG4gICAgY29uc3Qgd2l0aE51bGxWbSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICBmdWxsX3RleHRfaW5kZXg6ICdAQCcsXG4gICAgICAgIHN0YXRlOiAnaW4nLFxuICAgICAgICByZXdhcmRfaWQ6ICdpcycsXG4gICAgICAgIHByb2plY3RfaWQ6ICdlcSdcbiAgICB9KTtcblxuICAgIHdpdGhOdWxsVm0uZnVsbF90ZXh0X2luZGV4KHZtLmZ1bGxfdGV4dF9pbmRleCgpKTtcbiAgICB3aXRoTnVsbFZtLm9yZGVyKHZtLm9yZGVyKCkpO1xuICAgIHdpdGhOdWxsVm0uc3RhdGUodm0uc3RhdGUoKSk7XG4gICAgd2l0aE51bGxWbS5yZXdhcmRfaWQodm0ucmV3YXJkX2lkKCkpO1xuICAgIHdpdGhOdWxsVm0ucHJvamVjdF9pZCh2bS5wcm9qZWN0X2lkKCkpO1xuXG4gICAgcmV0dXJuIHdpdGhOdWxsVm0ucGFyYW1ldGVycygpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdm07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuY29udHJpYnV0aW9uc19yZXBvcnQubGVnZW5kX2xhYmVscycpO1xuXG5jb25zdCBQcm9qZWN0Q29udHJpYnV0aW9uU3RhdGVMZWdlbmRNb2RhbCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlID0gKHBhdGgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBJMThuLnQocGF0aCwgSTE4blNjb3BlKCkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFnZXM6IHtcbiAgICAgICAgICAgICAgICBvbmxpbmU6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRyYW5zbGF0ZSgnb25saW5lLnBhaWQubGFiZWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRyYW5zbGF0ZSgnb25saW5lLnBhaWQudGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaV9jbGFzczogJy5mYS5mYS1jaXJjbGUudGV4dC1zdWNjZXNzJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdHJhbnNsYXRlKCdvbmxpbmUucGVuZGluZy5sYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdHJhbnNsYXRlKCdvbmxpbmUucGVuZGluZy50ZXh0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBpX2NsYXNzOiAnLmZhLmZhLWNpcmNsZS50ZXh0LXdhaXRpbmcnXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0cmFuc2xhdGUoJ29ubGluZS5yZWZ1bmRlZC5sYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdHJhbnNsYXRlKCdvbmxpbmUucmVmdW5kZWQudGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaV9jbGFzczogJy5mYS5mYS1jaXJjbGUudGV4dC1lcnJvcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgZmFpbGVkOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0cmFuc2xhdGUoJ2ZhaWxlZC5wZW5kaW5nX3JlZnVuZC5sYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdHJhbnNsYXRlKCdmYWlsZWQucGVuZGluZ19yZWZ1bmQudGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaV9jbGFzczogJy5mYS5mYS1jaXJjbGUtby50ZXh0LXJlZnVuZGVkJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdHJhbnNsYXRlKCdmYWlsZWQucmVmdW5kZWQubGFiZWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRyYW5zbGF0ZSgnZmFpbGVkLnJlZnVuZGVkLnRleHQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlfY2xhc3M6ICcuZmEuZmEtY2lyY2xlLnRleHQtcmVmdW5kZWQnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0cmFuc2xhdGUoJ2ZhaWxlZC5wYWlkLmxhYmVsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0cmFuc2xhdGUoJ2ZhaWxlZC5wYWlkLnRleHQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlfY2xhc3M6ICcuZmEuZmEtY2lyY2xlLW8udGV4dC1lcnJvcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bDogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdHJhbnNsYXRlKCdzdWNjZXNzZnVsLnBhaWQubGFiZWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRyYW5zbGF0ZSgnc3VjY2Vzc2Z1bC5wYWlkLnRleHQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlfY2xhc3M6ICcuZmEuZmEtY2lyY2xlLnRleHQtc3VjY2VzcydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRyYW5zbGF0ZSgnc3VjY2Vzc2Z1bC5yZWZ1bmRlZC5sYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdHJhbnNsYXRlKCdzdWNjZXNzZnVsLnJlZnVuZGVkLnRleHQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlfY2xhc3M6ICcuZmEuZmEtY2lyY2xlLnRleHQtZXJyb3InXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcblxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBfLmZpcnN0KGFyZ3MucHJvamVjdCgpKSxcbiAgICAgICAgICAgICAgcHJvamVjdF9zdGFnZSA9IChwcm9qZWN0LnN0YXRlID09ICd3YWl0aW5nX2Z1bmRzJyA/ICdvbmxpbmUnIDogcHJvamVjdC5zdGF0ZSk7XG5cbiAgICAgICAgcmV0dXJuIG0oJ2RpdicsIFtcbiAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctaGVhZGVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LXRleHQtY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICdTdGF0dXMgZG8gYXBvaW8nKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQnLCBfLm1hcChjdHJsLnN0YWdlc1twcm9qZWN0X3N0YWdlXSwgKGl0ZW0sIGkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udHdlaWdodC1zZW1pYm9sZCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oYHNwYW4ke2l0ZW0uaV9jbGFzc31gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGAgwqAke2l0ZW0ubGFiZWx9YFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXInLCBtLnRydXN0KGl0ZW0udGV4dCkpXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9KSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdENvbnRyaWJ1dGlvblN0YXRlTGVnZW5kTW9kYWw7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IFByb2plY3RDb250cmlidXRpb25TdGF0ZUxlZ2VuZE1vZGFsIGZyb20gJy4uL2MvcHJvamVjdC1jb250cmlidXRpb24tc3RhdGUtbGVnZW5kLW1vZGFsJztcbmltcG9ydCBtb2RhbEJveCBmcm9tICcuL21vZGFsLWJveCc7XG5cbmNvbnN0IEluZm9Qcm9qZWN0Q29udHJpYnV0aW9uU3RhdGVMZWdlbmQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RhbFRvZ2dsZTogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCdzcGFuJywgW1xuICAgICAgICAgICAgYXJncy50ZXh0LFxuICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXG4gICAgICAgICAgICBtKCdhLmZhLmZhLXF1ZXN0aW9uLWNpcmNsZS5mb250Y29sb3Itc2Vjb25kYXJ5W2hyZWY9XCIjXCJdJywge1xuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwubW9kYWxUb2dnbGUudG9nZ2xlXG4gICAgICAgICAgICB9LCcnKSxcbiAgICAgICAgICAgIChjdHJsLm1vZGFsVG9nZ2xlKCkgPyBtLmNvbXBvbmVudChtb2RhbEJveCwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlNb2RhbDogY3RybC5tb2RhbFRvZ2dsZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBbUHJvamVjdENvbnRyaWJ1dGlvblN0YXRlTGVnZW5kTW9kYWwsIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogYXJncy5wcm9qZWN0XG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH0pIDogJycpXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEluZm9Qcm9qZWN0Q29udHJpYnV0aW9uU3RhdGVMZWdlbmQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBwcm9qZWN0RGFzaGJvYXJkTWVudSBmcm9tICcuLi9jL3Byb2plY3QtZGFzaGJvYXJkLW1lbnUnO1xuaW1wb3J0IHByb2plY3RDb250cmlidXRpb25SZXBvcnRIZWFkZXIgZnJvbSAnLi4vYy9wcm9qZWN0LWNvbnRyaWJ1dGlvbi1yZXBvcnQtaGVhZGVyJztcbmltcG9ydCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0Q29udGVudCBmcm9tICcuLi9jL3Byb2plY3QtY29udHJpYnV0aW9uLXJlcG9ydC1jb250ZW50JztcbmltcG9ydCBwcm9qZWN0c0NvbnRyaWJ1dGlvblJlcG9ydFZNIGZyb20gJy4uL3Ztcy9wcm9qZWN0cy1jb250cmlidXRpb24tcmVwb3J0LXZtJztcbmltcG9ydCBGaWx0ZXJNYWluIGZyb20gJy4uL2MvZmlsdGVyLW1haW4nO1xuaW1wb3J0IEZpbHRlckRyb3Bkb3duIGZyb20gJy4uL2MvZmlsdGVyLWRyb3Bkb3duJztcbmltcG9ydCBJbmZvUHJvamVjdENvbnRyaWJ1dGlvblN0YXRlTGVnZW5kIGZyb20gJy4uL2MvaW5mby1wcm9qZWN0LWNvbnRyaWJ1dGlvbi1zdGF0ZS1sZWdlbmQnO1xuXG5jb25zdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBsaXN0Vk0gPSBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy5wcm9qZWN0Q29udHJpYnV0aW9uLCAnaWQuZGVzYycsIHsnUHJlZmVyJzogJ2NvdW50PWV4YWN0J30pLFxuICAgICAgICAgICAgICBmaWx0ZXJWTSA9IHByb2plY3RzQ29udHJpYnV0aW9uUmVwb3J0Vk0sXG4gICAgICAgICAgICAgIHByb2plY3QgPSBtLnByb3AoW3t9XSksXG4gICAgICAgICAgICAgIHJld2FyZHMgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgICBjb250cmlidXRpb25TdGF0ZU9wdGlvbnMgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgICByZWxvYWRTZWxlY3RPcHRpb25zID0gKHByb2plY3Rfc3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxldCBvcHRzID0gW3t2YWx1ZTogJycsIG9wdGlvbjogJ1RvZG9zJ31dO1xuXG4gICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zX21hcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAnb25saW5lJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdwYWlkJywgb3B0aW9uOiAnQ29uZmlybWFkbyd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdwZW5kaW5nJywgb3B0aW9uOiAnSW5pY2lhZG8nfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAncmVmdW5kZWQsY2hhcmdlYmFjayxkZWxldGVkLHBlbmRpbmdfcmVmdW5kJywgb3B0aW9uOiAnQ29udGVzdGFkbyd9LFxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgJ3dhaXRpbmdfZnVuZHMnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3BhaWQnLCBvcHRpb246ICdDb25maXJtYWRvJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3BlbmRpbmcnLCBvcHRpb246ICdJbmljaWFkbyd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdyZWZ1bmRlZCxjaGFyZ2ViYWNrLGRlbGV0ZWQscGVuZGluZ19yZWZ1bmQnLCBvcHRpb246ICdDb250ZXN0YWRvJ30sXG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAnZmFpbGVkJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdwZW5kaW5nX3JlZnVuZCcsIG9wdGlvbjogJ1JlZW1ib2xzbyBlbSBhbmRhbWVudG8nfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAncmVmdW5kZWQnLCBvcHRpb246ICdSZWVtYm9sc2Fkbyd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdwYWlkJywgb3B0aW9uOiAnUmVlbWJvbHNvIG7Do28gaW5pY2lhZG8nfSxcbiAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICdzdWNjZXNzZnVsJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdwYWlkJywgb3B0aW9uOiAnQ29uZmlybWFkbyd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdyZWZ1bmRlZCxjaGFyZ2ViYWNrLGRlbGV0ZWQscGVuZGluZ19yZWZ1bmQnLCBvcHRpb246ICdDb250ZXN0YWRvJ30sXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgb3B0cyA9IG9wdHMuY29uY2F0KG9wdGlvbnNfbWFwW3Byb2plY3Rfc3RhdGVdIHx8IFtdKTtcblxuICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uU3RhdGVPcHRpb25zKG9wdHMpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmaWx0ZXJCdWlsZGVyID0gW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogRmlsdGVyTWFpbixcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0V3JhcHBlckNsYXNzOiAnLnctaW5wdXQudGV4dC1maWVsZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkNsYXNzOiAnLmJ0bi5idG4tbWVkaXVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdm06IGZpbHRlclZNLmZ1bGxfdGV4dF9pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdCdXNxdWUgcG9yIG5vbWUgb3UgZW1haWwgZG8gYXBvaWFkb3InXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAncmV3YXJkX2ZpbHRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiBGaWx0ZXJEcm9wZG93bixcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnUmVjb21wZW5zYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdyZXdhcmRfaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2bTogZmlsdGVyVk0ucmV3YXJkX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyX2NsYXNzOiAnLnctY29sLnctY29sLTYudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYudy1zdWItY29sLW1pZGRsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtdXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAncGF5bWVudF9zdGF0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiBGaWx0ZXJEcm9wZG93bixcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbV9sYWJlbDogW0luZm9Qcm9qZWN0Q29udHJpYnV0aW9uU3RhdGVMZWdlbmQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdTdGF0dXMgZG8gYXBvaW8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3N0YXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdm06IGZpbHRlclZNLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyX2NsYXNzOiAnLnctY29sLnctY29sLTYudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYudy1zdWItY29sLW1pZGRsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGNvbnRyaWJ1dGlvblN0YXRlT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3VibWl0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlclZNLnJld2FyZF9pZCgpID09PSAnbnVsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsaXN0Vk0uZmlyc3RQYWdlKGZpbHRlclZNLndpdGhOdWxsUGFyYW1ldGVycygpKS50aGVuKG51bGwpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBsaXN0Vk0uZmlyc3RQYWdlKGZpbHRlclZNLnBhcmFtZXRlcnMoKSkudGhlbihudWxsKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIGZpbHRlclZNLnByb2plY3RfaWQoYXJncy5yb290LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpKTtcblxuICAgICAgICBjb25zdCBsUmV3YXJkID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihtb2RlbHMucmV3YXJkRGV0YWlsLmdldFBhZ2VPcHRpb25zKHtwcm9qZWN0X2lkOiBgZXEuJHtmaWx0ZXJWTS5wcm9qZWN0X2lkKCl9YH0pKTtcbiAgICAgICAgY29uc3QgbFByb2plY3QgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKG1vZGVscy5wcm9qZWN0RGV0YWlsLmdldFBhZ2VPcHRpb25zKHtwcm9qZWN0X2lkOiBgZXEuJHtmaWx0ZXJWTS5wcm9qZWN0X2lkKCl9YH0pKTtcblxuICAgICAgICBsUmV3YXJkLmxvYWQoKS50aGVuKHJld2FyZHMpO1xuICAgICAgICBsUHJvamVjdC5sb2FkKCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcHJvamVjdChkYXRhKTtcbiAgICAgICAgICAgIHJlbG9hZFNlbGVjdE9wdGlvbnMoXy5maXJzdChkYXRhKS5zdGF0ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG1hcFJld2FyZHNUb09wdGlvbnMgPSAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IFtdO1xuICAgICAgICAgICAgaWYgKCFsUmV3YXJkKCkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gXy5tYXAocmV3YXJkcygpLCAocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHIuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb246IGBSJCAke2guZm9ybWF0TnVtYmVyKHIubWluaW11bV92YWx1ZSwgMiwgMyl9IC0gJHtyLmRlc2NyaXB0aW9uLnN1YnN0cmluZygwLCAyMCl9YFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgICAgIG9wdGlvbjogJ1NlbSByZWNvbXBlbnNhJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG9wdGlvbnMudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgICAgICAgIG9wdGlvbjogJ1RvZGFzJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghbGlzdFZNLmNvbGxlY3Rpb24oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UoZmlsdGVyVk0ucGFyYW1ldGVycygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsaXN0Vk06IGxpc3RWTSxcbiAgICAgICAgICAgIGZpbHRlclZNOiBmaWx0ZXJWTSxcbiAgICAgICAgICAgIGZpbHRlckJ1aWxkZXI6IGZpbHRlckJ1aWxkZXIsXG4gICAgICAgICAgICBzdWJtaXQ6IHN1Ym1pdCxcbiAgICAgICAgICAgIGxSZXdhcmQ6IGxSZXdhcmQsXG4gICAgICAgICAgICBsUHJvamVjdDogbFByb2plY3QsXG4gICAgICAgICAgICByZXdhcmRzOiByZXdhcmRzLFxuICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCxcbiAgICAgICAgICAgIG1hcFJld2FyZHNUb09wdGlvbnM6IG1hcFJld2FyZHNUb09wdGlvbnNcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBsaXN0ID0gY3RybC5saXN0Vk07XG5cbiAgICAgICAgaWYgKCFjdHJsLmxQcm9qZWN0KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdERhc2hib2FyZE1lbnUsIHtwcm9qZWN0OiBtLnByb3AoXy5maXJzdChjdHJsLnByb2plY3QoKSkpfSksXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydEhlYWRlciwge1xuICAgICAgICAgICAgICAgICAgICBzdWJtaXQ6IGN0cmwuc3VibWl0LFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJCdWlsZGVyOiBjdHJsLmZpbHRlckJ1aWxkZXIsXG4gICAgICAgICAgICAgICAgICAgIGZvcm06IGN0cmwuZmlsdGVyVk0uZm9ybURlc2NyaWJlcixcbiAgICAgICAgICAgICAgICAgICAgbWFwUmV3YXJkc1RvT3B0aW9uczogY3RybC5tYXBSZXdhcmRzVG9PcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJWTTogY3RybC5maWx0ZXJWTVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG0oJy5kaXZpZGVyLnUtbWFyZ2ludG9wLTMwJyksXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydENvbnRlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdDogbGlzdCxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogbS5wcm9wKF8uZmlyc3QoY3RybC5wcm9qZWN0KCkpKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGgubG9hZGVyKCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5yb290LlByb2plY3RzRGFzaGJvYXJkIGNvbXBvbmVudFxuICogQSByb290IGNvbXBvbmVudCB0byBtYW5hZ2UgcHJvamVjdHNcbiAqXG4gKiBFeGFtcGxlOlxuICogVG8gbW91bnQgdGhpcyBjb21wb25lbnQganVzdCBjcmVhdGUgYSBET00gZWxlbWVudCBsaWtlOlxuICogPGRpdiBkYXRhLW1pdGhyaWw9XCJQcm9qZWN0c0Rhc2hib2FyZFwiPlxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcHJvamVjdFZNIGZyb20gJy4uL3Ztcy9wcm9qZWN0LXZtJztcbmltcG9ydCBwcm9qZWN0RGFzaGJvYXJkTWVudSBmcm9tICcuLi9jL3Byb2plY3QtZGFzaGJvYXJkLW1lbnUnO1xuXG5jb25zdCBwcm9qZWN0c0Rhc2hib2FyZCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgcHJvamVjdFZNLmluaXQoYXJncy5wcm9qZWN0X2lkLCBhcmdzLnByb2plY3RfdXNlcl9pZCk7XG5cbiAgICAgICAgcmV0dXJuIHByb2plY3RWTTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCkge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gY3RybC5jdXJyZW50UHJvamVjdDtcblxuICAgICAgICByZXR1cm4gcHJvamVjdCgpLmlzX293bmVyX29yX2FkbWluID9cbiAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3REYXNoYm9hcmRNZW51LCB7cHJvamVjdDogcHJvamVjdH0pIDogJyc7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdHNEYXNoYm9hcmQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuXG5jb25zdCBwcm9qZWN0RmlsdGVyc1ZNID0gKCkgPT4ge1xuICAgIGNvbnN0IGZpbHRlcnNWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0sXG4gICAgICAgIGFsbCA9IGZpbHRlcnNWTSh7XG4gICAgICAgICAgICBzdGF0ZTogJ2VxJ1xuICAgICAgICB9KS5zdGF0ZSgnb25saW5lJyksXG5cbiAgICAgICAgbmVhck1lID0gZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgIG5lYXJfbWU6ICdlcScsXG4gICAgICAgICAgICBvcGVuX2Zvcl9jb250cmlidXRpb25zOiAnZXEnXG4gICAgICAgIH0pLm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMoJ3RydWUnKS5uZWFyX21lKHRydWUpLFxuXG4gICAgICAgIGV4cGlyaW5nID0gZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgIGV4cGlyZXNfYXQ6ICdsdGUnLFxuICAgICAgICAgICAgb3Blbl9mb3JfY29udHJpYnV0aW9uczogJ2VxJ1xuICAgICAgICB9KS5vcGVuX2Zvcl9jb250cmlidXRpb25zKCd0cnVlJykuZXhwaXJlc19hdChtb21lbnQoKS5hZGQoMTQsICdkYXlzJykuZm9ybWF0KCdZWVlZLU1NLUREJykpLFxuXG4gICAgICAgIHJlY2VudCA9IGZpbHRlcnNWTSh7XG4gICAgICAgICAgICBvbmxpbmVfZGF0ZTogJ2d0ZScsXG4gICAgICAgICAgICBvcGVuX2Zvcl9jb250cmlidXRpb25zOiAnZXEnXG4gICAgICAgIH0pLm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMoJ3RydWUnKS5vbmxpbmVfZGF0ZShtb21lbnQoKS5zdWJ0cmFjdCg1LCAnZGF5cycpLmZvcm1hdCgnWVlZWS1NTS1ERCcpKSxcblxuICAgICAgICBzY29yZSA9IGZpbHRlcnNWTSh7XG4gICAgICAgICAgICBzY29yZTogJ2d0ZScsXG4gICAgICAgICAgICBvcGVuX2Zvcl9jb250cmlidXRpb25zOiAnZXEnXG4gICAgICAgIH0pLnNjb3JlKCcxJykub3Blbl9mb3JfY29udHJpYnV0aW9ucygndHJ1ZScpLFxuXG4gICAgICAgIG9ubGluZSA9IGZpbHRlcnNWTSh7XG4gICAgICAgICAgICBvcGVuX2Zvcl9jb250cmlidXRpb25zOiAnZXEnXG4gICAgICAgIH0pLm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMoJ3RydWUnKSxcblxuICAgICAgICBjb250cmlidXRlZF9ieV9mcmllbmRzID0gZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgIG9wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6ICdlcScsXG4gICAgICAgICAgICBjb250cmlidXRlZF9ieV9mcmllbmRzOiAnZXEnXG4gICAgICAgIH0pLm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMoJ3RydWUnKS5jb250cmlidXRlZF9ieV9mcmllbmRzKHRydWUpLFxuXG4gICAgICAgIHN1Y2Nlc3NmdWwgPSBmaWx0ZXJzVk0oe1xuICAgICAgICAgICAgc3RhdGU6ICdlcSdcbiAgICAgICAgfSkuc3RhdGUoJ3N1Y2Nlc3NmdWwnKSxcblxuICAgICAgICBmaW5pc2hlZCA9IGZpbHRlcnNWTSh7fSksXG5cbiAgICAgICAgZmlsdGVycyA9IHtcbiAgICAgICAgICAgIGFsbDoge1xuICAgICAgICAgICAgICB0aXRsZTogJ1RvZGFzIGFzIENhdGVnb3JpYXMnLFxuICAgICAgICAgICAgICBmaWx0ZXI6IGFsbCxcbiAgICAgICAgICAgICAgbmljZW5hbWU6ICdObyBhcicsXG4gICAgICAgICAgICAgIGlzQ29udGV4dHVhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdhbGwnXG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjb3JlOiB7XG4gICAgICAgICAgICAgIHRpdGxlOiAnVG9kYXMgYXMgQ2F0ZWdvcmlhcycsXG4gICAgICAgICAgICAgIGZpbHRlcjogc2NvcmUsXG4gICAgICAgICAgICAgIG5pY2VuYW1lOiAnUG9wdWxhcmVzJyxcbiAgICAgICAgICAgICAgaXNDb250ZXh0dWFsOiBmYWxzZSxcbiAgICAgICAgICAgICAga2V5TmFtZTogJ3Njb3JlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250cmlidXRlZF9ieV9mcmllbmRzOiB7XG4gICAgICAgICAgICAgIHRpdGxlOiAnQW1pZ29zJyxcbiAgICAgICAgICAgICAgZmlsdGVyOiBjb250cmlidXRlZF9ieV9mcmllbmRzLFxuICAgICAgICAgICAgICBuaWNlbmFtZTogJ0FtaWdvcycsXG4gICAgICAgICAgICAgIGlzQ29udGV4dHVhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdjb250cmlidXRlZF9ieV9mcmllbmRzJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbmxpbmU6IHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdObyBhcicsXG4gICAgICAgICAgICAgIGZpbHRlcjogb25saW5lLFxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxuICAgICAgICAgICAgICBrZXlOYW1lOiAnb25saW5lJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgICBleHBpcmluZzoge1xuICAgICAgICAgICAgICB0aXRsZTogJ1JldGEgZmluYWwnLFxuICAgICAgICAgICAgICBmaWx0ZXI6IGV4cGlyaW5nLFxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxuICAgICAgICAgICAgICBrZXlOYW1lOiAnZXhwaXJpbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Y2Nlc3NmdWw6IHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdUb2RhcyBhcyBDYXRlZ29yaWFzJyxcbiAgICAgICAgICAgICAgZmlsdGVyOiBzdWNjZXNzZnVsLFxuICAgICAgICAgICAgICBuaWNlbmFtZTogJ0ZpbmFuY2lhZG9zJyxcbiAgICAgICAgICAgICAgaXNDb250ZXh0dWFsOiBmYWxzZSxcbiAgICAgICAgICAgICAga2V5TmFtZTogJ3N1Y2Nlc3NmdWwnXG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbmlzaGVkOiB7XG4gICAgICAgICAgICAgIHRpdGxlOiAnVG9kYXMgYXMgQ2F0ZWdvcmlhcycsXG4gICAgICAgICAgICAgIGZpbHRlcjogZmluaXNoZWQsXG4gICAgICAgICAgICAgIG5pY2VuYW1lOiAnRmluYWxpemFkb3MnLFxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxuICAgICAgICAgICAgICBrZXlOYW1lOiAnZmluaXNoZWQnXG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY2VudDoge1xuICAgICAgICAgICAgICB0aXRsZTogJ1JlY2VudGVzJyxcbiAgICAgICAgICAgICAgZmlsdGVyOiByZWNlbnQsXG4gICAgICAgICAgICAgIGlzQ29udGV4dHVhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdyZWNlbnQnXG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIG5lYXJfbWU6IHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdQcsOzeGltb3MgYSBtaW0nLFxuICAgICAgICAgICAgICBmaWx0ZXI6IG5lYXJNZSxcbiAgICAgICAgICAgICAgaXNDb250ZXh0dWFsOiBmYWxzZSxcbiAgICAgICAgICAgICAga2V5TmFtZTogJ25lYXJfbWUnXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgY29uc3Qgc2V0Q29udGV4dEZpbHRlcnMgPSAoY29udGV4dEZpbHRlcnMpID0+IHtcbiAgICAgICAgXy5tYXAoY29udGV4dEZpbHRlcnMsIChmaWx0ZXJLZXkpID0+IGZpbHRlcnNbZmlsdGVyS2V5XS5pc0NvbnRleHR1YWwgPSB0cnVlKTtcblxuICAgICAgICByZXR1cm4gZmlsdGVycztcbiAgICB9LFxuICAgICAgICAgICAgZ2V0Q29udGV4dEZpbHRlcnMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZmlsdGVyKGZpbHRlcnMsIChmaWx0ZXIpID0+IGZpbHRlci5pc0NvbnRleHR1YWwpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZUNvbnRleHRGaWx0ZXIgPSAoZmlsdGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgZmlsdGVyc1tmaWx0ZXIua2V5TmFtZV0uaXNDb250ZXh0dWFsID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVycztcbiAgICAgICAgICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsdGVyczogZmlsdGVycyxcbiAgICAgICAgICAgIHNldENvbnRleHRGaWx0ZXJzOiBzZXRDb250ZXh0RmlsdGVycyxcbiAgICAgICAgICAgIGdldENvbnRleHRGaWx0ZXJzOiBnZXRDb250ZXh0RmlsdGVycyxcbiAgICAgICAgICAgIHJlbW92ZUNvbnRleHRGaWx0ZXI6IHJlbW92ZUNvbnRleHRGaWx0ZXJcbiAgICAgICAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RGaWx0ZXJzVk07XG4iLCIvKipcbiAqIHdpbmRvdy5jLlNlYXJjaCBjb21wb25lbnRcbiAqIFJldHVybnMgYSBzZWFyY2ggaW5wdXRcbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5TZWFyY2gsIHthY3Rpb246ICcvc2VhcmNoJywgbWV0aG9kOiAnR0VUJ30pXG4gKi9cblxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmNvbnN0IHNlYXJjaCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MgPSB7fSkge1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBhcmdzLmFjdGlvbiB8fCAnL3B0L2V4cGxvcmUnLFxuICAgICAgICAgICAgbWV0aG9kID0gYXJncy5tZXRob2QgfHwgJ0dFVCc7XG5cbiAgICAgICAgcmV0dXJuIG0oJyNzZWFyY2gudy1jb250YWluZXIudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0nLCBbXG4gICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZm9ybSNlbWFpbC1mb3JtJywge2FjdGlvbjogYWN0aW9uLCBtZXRob2Q6IG1ldGhvZH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMC53LWNvbC1zbWFsbC0xMC53LWNvbC10aW55LTEwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXRbdHlwZT1cInRleHRcIl1bbmFtZT1cInBnX3NlYXJjaFwiXVtwbGFjZWhvbGRlcj1cIkJ1c3F1ZSBwcm9qZXRvc1wiXSNwZ19zZWFyY2hfaW5zaWRlLnctaW5wdXQudGV4dC1maWVsZC5uZWdhdGl2ZS5wcmVmaXgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtc21hbGwtMi53LWNvbC10aW55LTInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdidXR0b24udy1pbmxpbmUtYmxvY2suYnRuLmJ0bi1kYXJrLmJ0bi1hdHRhY2hlZC5wb3N0Zml4JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy5oZWFkZXItbHVwYVtzcmM9XCJodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU0ZTQ0MTc4YjIxMzVmY2UyYjZjZDIzNV9sdXBhLnBuZ1wiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWFyY2g7XG4iLCIvKipcbiAqIHdpbmRvdy5jLkNhdGVnb3J5QnV0dG9uIGNvbXBvbmVudFxuICogUmV0dXJuIGEgbGluayB3aXRoIGEgYnRuLWNhdGVnb3J5IGNsYXNzLlxuICogSXQgdXNlcyBhIGNhdGVnb3J5IHBhcmFtZXRlci5cbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5DYXRlZ29yeUJ1dHRvbiwge1xuICogICAgIGNhdGVnb3J5OiB7XG4gKiAgICAgICAgIGlkOiAxLFxuICogICAgICAgICBuYW1lOiAnVmlkZW8nLFxuICogICAgICAgICBvbmxpbmVfcHJvamVjdHM6IDFcbiAqICAgICB9XG4gKiB9KVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuY29uc3QgY2F0ZWdvcnlCdXR0b24gPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gYXJncy5jYXRlZ29yeTtcblxuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTIudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICBtKGBhLnctaW5saW5lLWJsb2NrLmJ0bi1jYXRlZ29yeVtocmVmPScjYnlfY2F0ZWdvcnlfaWQvJHtjYXRlZ29yeS5pZH0nXWAsIFtcbiAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uYmFkZ2UuZXhwbG9yZScsIGNhdGVnb3J5Lm9ubGluZV9wcm9qZWN0cylcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNhdGVnb3J5QnV0dG9uO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBTaWduZWRGcmllbmRGYWNlYm9va0Nvbm5lY3QgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IG1hcFdpdGhBdmF0YXIgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gXy5zYW1wbGUoXy5maWx0ZXIoYXJncy5mcmllbmRMaXN0Vk0uY29sbGVjdGlvbigpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAhXy5pc051bGwoaXRlbS5hdmF0YXIpO1xuICAgICAgICAgICAgfSksIDgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXBXaXRoQXZhdGFyOiBtYXBXaXRoQXZhdGFyXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgaWYgKGFyZ3MuZnJpZW5kTGlzdFZNLmlzTG9hZGluZygpKSB7XG4gICAgICAgICAgICByZXR1cm4gaC5sb2FkZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCB0b3RhbCA9IGFyZ3MuZnJpZW5kTGlzdFZNLnRvdGFsKCk7XG4gICAgICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5zZWN0aW9uLmJnLWJhY2tzLWNhcnJvc2VsLnNlY3Rpb24tbGFyZ2UnLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuY2FyZC5jYXJkLWJpZycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlc3QudS1tYXJnaW5ib3R0b20tMjAnLCAnRW5jb250cmUgcHJvamV0b3MgaW5jcsOtdmVpcyBqdW50byBjb20gc2V1cyBhbWlnb3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsJywgJ08gdW5pdmVyc28gZG8gQ2F0YXJzZSBqdW50byBjb20gYSBzdWEgcmVkZSBkbyBGYWNlYm9vayB0ZSBmYXLDo28gZGVzY29icmlyIHByb2pldG9zIGluY3LDrXZlaXMhJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QudS1tYXJnaW5ib3R0b20tMTAnLCBgJHt0b3RhbH0gZG9zIHNldXMgYW1pZ29zIGVzdMOjbyBubyBDYXRhcnNlIWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLm1hcFdpdGhBdmF0YXIoKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbShgaW1nLnRodW1iLnNtYWxsLnUtcm91bmQudS1tYXJnaW5ib3R0b20tMTBbc3JjPVwiJHtpdGVtLmF2YXRhcn1cIl1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRvdGFsID4gMCA/IG0oJ2Eudy1idXR0b24uYnRuLmJ0bi1sYXJnZVtocmVmPVwiL2ZvbGxvdy1mYi1mcmllbmRzXCJdJywgJ1Byb2N1cmUgc2V1cyBhbWlnb3MnKSA6IG0oJ2Eudy1idXR0b24uYnRuLmJ0bi1mYi5idG4tbGFyZ2UudS1tYXJnaW50b3AtMzAudS1tYXJnaW5ib3R0b20tMTBbaHJlZj1cIi9jb25uZWN0LWZhY2Vib29rXCJdJywgJ0NvbmVjdGUgc2V1IGZhY2Vib29rJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lnbmVkRnJpZW5kRmFjZWJvb2tDb25uZWN0O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBVbnNpZ25lZEZyaWVuZEZhY2Vib29rQ29ubmVjdCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhcmdlQmc6ICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoXy5pc1VuZGVmaW5lZChhcmdzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfLmlzVW5kZWZpbmVkKGFyZ3MubGFyZ2VCZykgPyBmYWxzZSA6IGFyZ3MubGFyZ2VCZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKGAudy1zZWN0aW9uLnNlY3Rpb24keyhjdHJsLmxhcmdlQmcgPyAnLmJnLWJhY2tzLWNhcnJvc2VsLnNlY3Rpb24tbGFyZ2UnIDogJycpfWAsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICBtKCcuY2FyZC5jYXJkLWJpZycsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlc3QudS1tYXJnaW5ib3R0b20tMjAnLCAnRW5jb250cmUgcHJvamV0b3MgaW5jcsOtdmVpcyBqdW50byBjb20gc2V1cyBhbWlnb3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwnLCAnTyB1bml2ZXJzbyBkbyBDYXRhcnNlIGp1bnRvIGNvbSBhIHN1YSByZWRlIGRvIEZhY2Vib29rIHRlIGZhcsOjbyBkZXNjb2JyaXIgcHJvamV0b3MgaW5jcsOtdmVpcyEnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tZmIuYnRuLWxhcmdlLnUtbWFyZ2ludG9wLTMwLnUtbWFyZ2luYm90dG9tLTEwW2hyZWY9XCIvY29ubmVjdC1mYWNlYm9va1wiXScsICdDb25lY3RlIHNldSBmYWNlYm9vaycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5LnUtdGV4dC1jZW50ZXInLCAnTsOzcyBudW5jYSBwb3N0YXJlbW9zIG5hZGEgbm8gZmFjZWJvb2sgc2VtIHN1YSBwZXJtaXNzw6NvJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFVuc2lnbmVkRnJpZW5kRmFjZWJvb2tDb25uZWN0O1xuIiwiLyoqXG4gKiB3aW5kb3cucm9vdC5Qcm9qZWN0c0V4cGxvcmUgY29tcG9uZW50XG4gKiBBIHJvb3QgY29tcG9uZW50IHRvIHNob3cgcHJvamVjdHMgYWNjb3JkaW5nIHRvIHVzZXIgZGVmaW5lZCBmaWx0ZXJzXG4gKlxuICogRXhhbXBsZTpcbiAqIFRvIG1vdW50IHRoaXMgY29tcG9uZW50IGp1c3QgY3JlYXRlIGEgRE9NIGVsZW1lbnQgbGlrZTpcbiAqIDxkaXYgZGF0YS1taXRocmlsPVwiUHJvamVjdHNFeHBsb3JlXCI+XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHByb2plY3RGaWx0ZXJzIGZyb20gJy4uL3Ztcy9wcm9qZWN0LWZpbHRlcnMtdm0nO1xuaW1wb3J0IHNlYXJjaCBmcm9tICcuLi9jL3NlYXJjaCc7XG5pbXBvcnQgY2F0ZWdvcnlCdXR0b24gZnJvbSAnLi4vYy9jYXRlZ29yeS1idXR0b24nO1xuaW1wb3J0IHByb2plY3RDYXJkIGZyb20gJy4uL2MvcHJvamVjdC1jYXJkJztcbmltcG9ydCB0b29sdGlwIGZyb20gJy4uL2MvdG9vbHRpcCc7XG5pbXBvcnQgU2lnbmVkRnJpZW5kRmFjZWJvb2tDb25uZWN0IGZyb20gJy4uL2Mvc2lnbmVkLWZyaWVuZC1mYWNlYm9vay1jb25uZWN0JztcbmltcG9ydCBVbnNpZ25lZEZyaWVuZEZhY2Vib29rQ29ubmVjdCBmcm9tICcuLi9jL3Vuc2lnbmVkLWZyaWVuZC1mYWNlYm9vay1jb25uZWN0JztcblxuLy8gVE9ETyBTbGltIGRvd24gY29udHJvbGxlciBieSBhYnN0cmFjdGluZyBsb2dpYyB0byB2aWV3LW1vZGVscyB3aGVyZSBpdCBmaXRzXG5jb25zdCBwcm9qZWN0c0V4cGxvcmUgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcnMgPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNLFxuICAgICAgICAgICAgICBwcm9qZWN0RmlsdGVyc1ZNID0gcHJvamVjdEZpbHRlcnMoKSxcbiAgICAgICAgICAgICAgZmlsdGVyc01hcCA9IHByb2plY3RGaWx0ZXJzVk0uZmlsdGVycyxcbiAgICAgICAgICAgICAgZGVmYXVsdEZpbHRlciA9IGgucGFyYW1CeU5hbWUoJ2ZpbHRlcicpIHx8ICdhbGwnLFxuICAgICAgICAgICAgICBmYWxsYmFja0ZpbHRlciA9ICdhbGwnLFxuICAgICAgICAgICAgICBjdXJyZW50RmlsdGVyID0gbS5wcm9wKGZpbHRlcnNNYXBbZGVmYXVsdEZpbHRlcl0pLFxuICAgICAgICAgICAgICBjaGFuZ2VGaWx0ZXIgPSAobmV3RmlsdGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50RmlsdGVyKGZpbHRlcnNNYXBbbmV3RmlsdGVyXSk7XG4gICAgICAgICAgICAgICAgICBsb2FkUm91dGUoKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcmVzZXRDb250ZXh0RmlsdGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY3VycmVudEZpbHRlcihmaWx0ZXJzTWFwW2RlZmF1bHRGaWx0ZXJdKTtcbiAgICAgICAgICAgICAgICAgIHByb2plY3RGaWx0ZXJzVk0uc2V0Q29udGV4dEZpbHRlcnMoWydmaW5pc2hlZCcsICdhbGwnLCAnY29udHJpYnV0ZWRfYnlfZnJpZW5kcyddKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY3VycmVudFVzZXIgPSBoLmdldFVzZXIoKSxcbiAgICAgICAgICAgICAgY3VycmVudFVzZXJJZCA9IGN1cnJlbnRVc2VyLmlkLFxuICAgICAgICAgICAgICBoYXNGQkF1dGggPSBjdXJyZW50VXNlci5oYXNfZmJfYXV0aCxcbiAgICAgICAgICAgICAgYnVpbGRUb29sdGlwID0gKHRvb2x0aXBUZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQodG9vbHRpcCwge1xuICAgICAgICAgICAgICAgICAgICAgIGVsOiAnLnRvb2x0aXAtd3JhcHBlci5mYS5mYS1xdWVzdGlvbi1jaXJjbGUuZm9udGNvbG9yLXNlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgICAgICAgdGV4dDogdG9vbHRpcFRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDM4MFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGhpbnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBUT0RPIEFkZCBjb3BpZXMgdG8gaTE4bi5cbiAgICAgICAgICAgICAgICAgIGxldCBoaW50VGV4dCA9ICcnLFxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwVGV4dCA9ICcnLFxuICAgICAgICAgICAgICAgICAgICBoYXNIaW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEZpbHRlcigpLmtleU5hbWUgPT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaGFzSGludCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgaGludFRleHQgPSAnT3JkZW5hZG9zIHBvciBwb3B1bGFyaWRhZGUgJztcbiAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwVGV4dCA9ICdPIG5vc3NvIGZhdG9yIHBvcHVsYXJpZGFkZSDDqSB1bWEgbWlzdHVyYSBkYSBzZWxlw6fDo28gZG8gdGltZSBkbyBDYXRhcnNlIGNvbSB1bSB2YWxvciBxdWUgw6kgY2FsY3VsYWRvIHBlbGEgdmVsb2NpZGFkZSBkZSBhcnJlY2FkYcOnw6NvIGRvIHByb2pldG8nO1xuICAgICAgICAgICAgICAgICAgfWVsc2UgaWYgKGN1cnJlbnRGaWx0ZXIoKS5rZXlOYW1lID09PSAnZmluaXNoZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaGFzSGludCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgaGludFRleHQgPSAnT3JkZW5hZG9zIHBvciBSJCBhbGNhbsOnYWRvICc7XG4gICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFRleHQgPSAnT3MgcHJvamV0b3MgY29tIG1haW9yIG1ldGEgZGUgYXJyZWNhZGHDp8OjbyBhbGNhbsOnYWRhIGZpY2FtIG5vIHRvcG8nO1xuICAgICAgICAgICAgICAgICAgfWVsc2UgaWYgKGN1cnJlbnRGaWx0ZXIoKS5rZXlOYW1lID09PSAnY29udHJpYnV0ZWRfYnlfZnJpZW5kcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICBoYXNIaW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICBoaW50VGV4dCA9ICdQcm9qZXRvcyBhcG9pYWRvcyBwb3IgYW1pZ29zICc7XG4gICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFRleHQgPSAnUHJvamV0b3MgYXBvaWFkb3MgcG9yIGFtaWdvcyc7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNIaW50ID8gbSgnLmZvbnRzaXplLXNtYWxsZXIuZm9udGNvbG9yLXNlY29uZGFyeScsIFtoaW50VGV4dCwgYnVpbGRUb29sdGlwKHRvb2x0aXBUZXh0KV0pIDogJyc7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGlzU2VhcmNoID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgICAgY2F0ZWdvcnlDb2xsZWN0aW9uID0gbS5wcm9wKFtdKSxcbiAgICAgICAgICAgICAgY2F0ZWdvcnlJZCA9IG0ucHJvcCgpLFxuICAgICAgICAgICAgICBmaW5kQ2F0ZWdvcnkgPSAoaWQpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfLmZpbmQoY2F0ZWdvcnlDb2xsZWN0aW9uKCksIGZ1bmN0aW9uKGMpeyByZXR1cm4gYy5pZCA9PT0gcGFyc2VJbnQoaWQpOyB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY2F0ZWdvcnkgPSBfLmNvbXBvc2UoZmluZENhdGVnb3J5LCBjYXRlZ29yeUlkKSxcbiAgICAgICAgICAgICAgbG9hZENhdGVnb3JpZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWxzLmNhdGVnb3J5LmdldFBhZ2VXaXRoVG9rZW4oZmlsdGVycyh7fSkub3JkZXIoe25hbWU6ICdhc2MnfSkucGFyYW1ldGVycygpKS50aGVuKGNhdGVnb3J5Q29sbGVjdGlvbik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIC8vIGp1c3Qgc21hbGwgZml4IHdoZW4gaGF2ZSB0d28gc2NvcmVkIHByb2plY3RzIG9ubHlcbiAgICAgICAgICAgICAgY2hlY2tGb3JNaW5TY29yZWRQcm9qZWN0cyA9IChjb2xsZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXy5zaXplKF8uZmlsdGVyKGNvbGxlY3Rpb24sICh4KSA9PiB7IHJldHVybiB4LnNjb3JlID49IDE7IH0pKSA+PSAzO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAvLyBGYWtlIHByb2plY3RzIG9iamVjdCB0byBiZSBhYmxlIHRvIHJlbmRlciBwYWdlIHdoaWxlIGxvYWRkaW5nIChpbiBjYXNlIG9mIHNlYXJjaClcbiAgICAgICAgICAgICAgcHJvamVjdHMgPSBtLnByb3Aoe2NvbGxlY3Rpb246IG0ucHJvcChbXSksIGlzTG9hZGluZzogKCkgPT4geyByZXR1cm4gdHJ1ZTsgfSwgaXNMYXN0UGFnZTogKCkgPT4geyByZXR1cm4gdHJ1ZTsgfX0pLFxuICAgICAgICAgICAgICBsb2FkUm91dGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCByb3V0ZSA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLm1hdGNoKC9cXCMoW15cXC9dKilcXC8/KFxcZCspPy8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ID0gcm91dGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZVsyXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmRDYXRlZ29yeShyb3V0ZVsyXSksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckZyb21Sb3V0ZSA9ICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnlDYXRlZ29yeSA9IGZpbHRlcnMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeV9pZDogJ2VxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlWzFdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnNNYXBbcm91dGVbMV1dIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGl0bGU6IGNhdC5uYW1lLCBmaWx0ZXI6IGJ5Q2F0ZWdvcnkuY2F0ZWdvcnlfaWQoY2F0LmlkKX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgPSBmaWx0ZXJGcm9tUm91dGUoKSB8fCBjdXJyZW50RmlsdGVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2ggPSBoLnBhcmFtQnlOYW1lKCdwZ19zZWFyY2gnKSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoUHJvamVjdHMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obW9kZWxzLnByb2plY3RTZWFyY2gucG9zdE9wdGlvbnMoe3F1ZXJ5OiBzZWFyY2h9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZSA9IHsgLy8gV2UgYnVpbGQgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgaW50ZXJmYWNlIGFzIHBhZ2luYXRpb25WTVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBtLnByb3AoW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0xvYWRpbmc6IGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTGFzdFBhZ2U6ICgpID0+IHsgcmV0dXJuIHRydWU7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQYWdlOiAoKSA9PiB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5sb2FkKCkudGhlbihwYWdlLmNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFByb2plY3RzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VzID0gcG9zdGdyZXN0LnBhZ2luYXRpb25WTShtb2RlbHMucHJvamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IF8uZXh0ZW5kKHt9LCBjdXJyZW50RmlsdGVyKCkuZmlsdGVyLnBhcmFtZXRlcnMoKSwgZmlsdGVyLmZpbHRlci5vcmRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6ICdkZXNjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVfb3JkZXI6ICdhc2MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogJ2Rlc2MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogJ2Rlc2MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGVkZ2VkOiAnZGVzYydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5wYXJhbWV0ZXJzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VzLmZpcnN0UGFnZShwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFnZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkRmluaXNoZWRQcm9qZWN0cyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWdlcyA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLmZpbmlzaGVkUHJvamVjdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVycyA9IF8uZXh0ZW5kKHt9LCBjdXJyZW50RmlsdGVyKCkuZmlsdGVyLnBhcmFtZXRlcnMoKSwgZmlsdGVyLmZpbHRlci5vcmRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlX29yZGVyOiAnYXNjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICdkZXNjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxlZGdlZDogJ2Rlc2MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkucGFyYW1ldGVycygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlcy5maXJzdFBhZ2UocGFyYW1ldGVycyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFnZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICBpZiAoXy5pc1N0cmluZyhzZWFyY2gpICYmIHNlYXJjaC5sZW5ndGggPiAwICYmIHJvdXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaXNTZWFyY2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGUoJ0J1c2NhICcgKyBzZWFyY2gpO1xuICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RzKHNlYXJjaFByb2plY3RzKCkpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50RmlsdGVyKCkua2V5TmFtZSA9PT0gJ2ZpbmlzaGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgIGlzU2VhcmNoKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cyhsb2FkRmluaXNoZWRQcm9qZWN0cygpKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgaXNTZWFyY2goZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlKGZpbHRlci50aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCFfLmlzTnVsbChyb3V0ZSkgJiYgcm91dGVbMV0gPT0gJ2ZpbmlzaGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cyhsb2FkRmluaXNoZWRQcm9qZWN0cygpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cyhsb2FkUHJvamVjdHMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlJZChjYXQgJiYgY2F0LmlkKTtcbiAgICAgICAgICAgICAgICAgIHJvdXRlIHx8IChfLmlzU3RyaW5nKHNlYXJjaCkgJiYgc2VhcmNoLmxlbmd0aCA+IDApID8gdG9nZ2xlQ2F0ZWdvcmllcyhmYWxzZSkgOiB0b2dnbGVDYXRlZ29yaWVzKHRydWUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB0aXRsZSA9IG0ucHJvcCgpLFxuICAgICAgICAgICAgICB0b2dnbGVDYXRlZ29yaWVzID0gaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHJlc2V0Q29udGV4dEZpbHRlcigpO1xuICAgICAgICAgICAgbG9hZFJvdXRlKCk7XG4gICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgLy8gSW5pdGlhbCBsb2Fkc1xuICAgICAgICByZXNldENvbnRleHRGaWx0ZXIoKTtcbiAgICAgICAgbW9kZWxzLnByb2plY3QucGFnZVNpemUoOSk7XG4gICAgICAgIGxvYWRDYXRlZ29yaWVzKCkudGhlbihsb2FkUm91dGUpO1xuXG4gICAgICAgIGlmIChhcmdzLmZpbHRlcikge1xuICAgICAgICAgICAgY3VycmVudEZpbHRlcihmaWx0ZXJzTWFwW2FyZ3MuZmlsdGVyXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWN1cnJlbnRGaWx0ZXIoKSkge1xuICAgICAgICAgICAgY3VycmVudEZpbHRlcihmaWx0ZXJzTWFwW2RlZmF1bHRGaWx0ZXJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjYXRlZ29yaWVzOiBjYXRlZ29yeUNvbGxlY3Rpb24sXG4gICAgICAgICAgICBjaGFuZ2VGaWx0ZXI6IGNoYW5nZUZpbHRlcixcbiAgICAgICAgICAgIGZhbGxiYWNrRmlsdGVyOiBmYWxsYmFja0ZpbHRlcixcbiAgICAgICAgICAgIHByb2plY3RzOiBwcm9qZWN0cyxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgIGhpbnQ6IGhpbnQsXG4gICAgICAgICAgICBmaWx0ZXJzTWFwOiBmaWx0ZXJzTWFwLFxuICAgICAgICAgICAgY3VycmVudEZpbHRlcjogY3VycmVudEZpbHRlcixcbiAgICAgICAgICAgIHByb2plY3RGaWx0ZXJzVk06IHByb2plY3RGaWx0ZXJzVk0sXG4gICAgICAgICAgICB0b2dnbGVDYXRlZ29yaWVzOiB0b2dnbGVDYXRlZ29yaWVzLFxuICAgICAgICAgICAgaXNTZWFyY2g6IGlzU2VhcmNoLFxuICAgICAgICAgICAgaGFzRkJBdXRoOiBoYXNGQkF1dGgsXG4gICAgICAgICAgICBjaGVja0Zvck1pblNjb3JlZFByb2plY3RzOiBjaGVja0Zvck1pblNjb3JlZFByb2plY3RzXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IHByb2plY3RzX2NvbGxlY3Rpb24gPSBjdHJsLnByb2plY3RzKCkuY29sbGVjdGlvbigpLFxuICAgICAgICAgICAgcHJvamVjdHNDb3VudCA9IHByb2plY3RzX2NvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgd2lkb3dQcm9qZWN0cyA9IFtdLFxuICAgICAgICAgICAgZmlsdGVyS2V5TmFtZSA9IGN0cmwuY3VycmVudEZpbHRlcigpLmtleU5hbWUsXG4gICAgICAgICAgICBpc0NvbnRyaWJ1dGVkQnlGcmllbmRzRmlsdGVyID0gKGZpbHRlcktleU5hbWUgPT09ICdjb250cmlidXRlZF9ieV9mcmllbmRzJyk7XG5cbiAgICAgICAgaWYgKCFjdHJsLnByb2plY3RzKCkuaXNMb2FkaW5nKCkgJiYgXy5pc0VtcHR5KHByb2plY3RzX2NvbGxlY3Rpb24pICYmICFjdHJsLmlzU2VhcmNoKCkpe1xuICAgICAgICAgICAgaWYgKGlzQ29udHJpYnV0ZWRCeUZyaWVuZHNGaWx0ZXIgJiYgIWN0cmwuaGFzRkJBdXRoKSB7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN0cmwucHJvamVjdEZpbHRlcnNWTS5yZW1vdmVDb250ZXh0RmlsdGVyKGN0cmwuY3VycmVudEZpbHRlcigpKTtcbiAgICAgICAgICAgICAgICBjdHJsLmNoYW5nZUZpbHRlcihjdHJsLmZhbGxiYWNrRmlsdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtKCcjZXhwbG9yZScsIFtcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uaGVyby1zZWFyY2gnLCBbXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoc2VhcmNoKSxcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIudS1tYXJnaW5ib3R0b20tMTAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNleHBsb3JlLW9wZW4ubGluay1oaWRkZW4td2hpdGUuZm9udHdlaWdodC1saWdodC5mb250c2l6ZS1sYXJnZXJbaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIl0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvbmNsaWNrOiAoKSA9PiBjdHJsLnRvZ2dsZUNhdGVnb3JpZXMudG9nZ2xlKCl9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnRXhwbG9yZSBwcm9qZXRvcyBpbmNyw612ZWlzICcsIG0oYHNwYW4jZXhwbG9yZS1idG4uZmEuZmEtYW5nbGUtZG93biR7Y3RybC50b2dnbGVDYXRlZ29yaWVzKCkgPyAnLm9wZW5lZCcgOiAnJ31gLCAnJyldKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbShgI2NhdGVnb3JpZXMuY2F0ZWdvcnktc2xpZGVyJHtjdHJsLnRvZ2dsZUNhdGVnb3JpZXMoKSA/ICcub3BlbmVkJyA6ICcnfWAsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0zMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLmNhdGVnb3JpZXMoKSwgKGNhdGVnb3J5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChjYXRlZ29yeUJ1dHRvbiwge2NhdGVnb3J5OiBjYXRlZ29yeX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24nLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOS53LWNvbC1zbWFsbC04LnctY29sLXRpbnktOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyJywgY3RybC50aXRsZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmhpbnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC00LnctY29sLXRpbnktNCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWN0cmwuaXNTZWFyY2goKSA/IG0oJ3NlbGVjdC53LXNlbGVjdC50ZXh0LWZpZWxkLnBvc2l0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge29uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuY2hhbmdlRmlsdGVyKX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGN0cmwucHJvamVjdEZpbHRlcnNWTS5nZXRDb250ZXh0RmlsdGVycygpLCAocGFnZUZpbHRlciwgaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0cyA9IGN0cmwucHJvamVjdHMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkID0gY3RybC5jdXJyZW50RmlsdGVyKCkgPT0gcGFnZUZpbHRlcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oYG9wdGlvblt2YWx1ZT1cIiR7cGFnZUZpbHRlci5rZXlOYW1lfVwiXWAse3NlbGVjdGVkOiBpc1NlbGVjdGVkfSxwYWdlRmlsdGVyLm5pY2VuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICgoaXNDb250cmlidXRlZEJ5RnJpZW5kc0ZpbHRlciAmJiBfLmlzRW1wdHkocHJvamVjdHNfY29sbGVjdGlvbikgKSA/IFxuICAgICAgICAgICAgICghY3RybC5oYXNGQkF1dGggPyBtLmNvbXBvbmVudChVbnNpZ25lZEZyaWVuZEZhY2Vib29rQ29ubmVjdCkgOiAnJylcbiAgICAgICAgICAgICA6ICcnKSxcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIF8ubWFwKHByb2plY3RzX2NvbGxlY3Rpb24sIChwcm9qZWN0LCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FyZFR5cGUgPSAnc21hbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSAnY3Ryc2VfZXhwbG9yZSc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC5pc1NlYXJjaCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9ICdjdHJzZV9leHBsb3JlX3Bnc2VhcmNoJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ29udHJpYnV0ZWRCeUZyaWVuZHNGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gJ2N0cnNlX2V4cGxvcmVfZnJpZW5kcyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXJLZXlOYW1lID09PSAnYWxsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvamVjdC5zY29yZSA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZFR5cGUgPSAnYmlnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSAnY3Ryc2VfZXhwbG9yZV9mZWF0dXJlZF9iaWcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZG93UHJvamVjdHMgPSBbcHJvamVjdHNDb3VudCAtIDEsIHByb2plY3RzQ291bnQgLSAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaWR4ID09PSAxIHx8IGlkeCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdHJsLmNoZWNrRm9yTWluU2NvcmVkUHJvamVjdHMocHJvamVjdHNfY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZFR5cGUgPSAnbWVkaXVtJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gJ2N0cnNlX2V4cGxvcmVfZmVhdHVyZWRfbWVkaXVtJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkb3dQcm9qZWN0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRUeXBlID0gJ2JpZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9ICdjdHJzZV9leHBsb3JlX2ZlYXR1cmVkX2JpZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZG93UHJvamVjdHMgPSBbcHJvamVjdHNDb3VudCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gJ2N0cnNlX2V4cGxvcmVfZmVhdHVyZWQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfLmluZGV4T2Yod2lkb3dQcm9qZWN0cywgaWR4KSA+IC0xICYmICFjdHJsLnByb2plY3RzKCkuaXNMYXN0UGFnZSgpKSA/ICcnIDogbS5jb21wb25lbnQocHJvamVjdENhcmQsIHtwcm9qZWN0OiBwcm9qZWN0LCByZWY6IHJlZiwgdHlwZTogY2FyZFR5cGUsIHNob3dGcmllbmRzOiBpc0NvbnRyaWJ1dGVkQnlGcmllbmRzRmlsdGVyfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnByb2plY3RzKCkuaXNMb2FkaW5nKCkgPyBoLmxvYWRlcigpIDogKF8uaXNFbXB0eShwcm9qZWN0c19jb2xsZWN0aW9uKSAmJiBjdHJsLmhhc0ZCQXV0aCA/IG0oJy5mb250c2l6ZS1iYXNlLnctY29sLnctY29sLTEyJywgJ05lbmh1bSBwcm9qZXRvIHBhcmEgbW9zdHJhci4nKSA6ICcnKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcblxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi51LW1hcmdpbmJvdHRvbS04MCcsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXB1c2gtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGN0cmwucHJvamVjdHMoKS5pc0xhc3RQYWdlKCkgfHwgY3RybC5wcm9qZWN0cygpLmlzTG9hZGluZygpIHx8IF8uaXNFbXB0eShwcm9qZWN0c19jb2xsZWN0aW9uKSkgPyAnJyA6IG0oJ2EuYnRuLmJ0bi1tZWRpdW0uYnRuLXRlcmNpYXJ5W2hyZWY9XFwnI2xvYWRNb3JlXFwnXScsIHtvbmNsaWNrOiAoKSA9PiB7IGN0cmwucHJvamVjdHMoKS5uZXh0UGFnZSgpOyByZXR1cm4gZmFsc2U7IH19LCAnQ2FycmVnYXIgbWFpcycpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi1sYXJnZS5iZWZvcmUtZm9vdGVyLnUtbWFyZ2ludG9wLTgwLmJnLWdyYXkuZGl2aWRlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnUtbWFyZ2luYm90dG9tLTIwLmljb24taGVybycsIHtzcmM6ICdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2ZjQ0MTRkM2EwZmNjMDEyNGVjOWEyNF9pY29uLWxhdW5jaC1leHBsb3JlLnBuZyd9KSxcbiAgICAgICAgICAgICAgICAgICAgbSgnaDIuZm9udHNpemUtbGFyZ2VyLnUtbWFyZ2luYm90dG9tLTYwJywgJ0xhbmNlIHN1YSBjYW1wYW5oYSBubyBDYXRhcnNlIScpLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1wdXNoLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWJ1dHRvbi5idG4uYnRuLWxhcmdlJywge2hyZWY6ICcvc3RhcnQ/cmVmPWN0cnNlX2V4cGxvcmUnfSwgJ0FwcmVuZGEgY29tbycpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0c0V4cGxvcmU7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuY29uc3QgbWVudVNlYXJjaCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJ3NwYW4jbWVudS1zZWFyY2gnLCBbXG4gICAgICAgICAgICBtKCcudy1mb3JtLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuaGVhZGVyLXNlYXJjaFtpZD1cXCdkaXNjb3Zlci1mb3JtLXdyYXBwZXJcXCddJyxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCdmb3JtLmRpc2NvdmVyLWZvcm1bYWNjZXB0LWNoYXJzZXQ9XFwnVVRGLThcXCddW2FjdGlvbj1cXCcvcHQvZXhwbG9yZVxcJ11baWQ9XFwnc2VhcmNoLWZvcm1cXCddW21ldGhvZD1cXCdnZXRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2Jywge3N0eWxlOiB7J2Rpc3BsYXknOiAnbm9uZSd9fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dFtuYW1lPVxcJ3V0ZjhcXCddW3R5cGU9XFwnaGlkZGVuXFwnXVt2YWx1ZT1cXCfinJNcXCddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWlucHV0LnRleHQtZmllbGQubmVnYXRpdmUucHJlZml4LnNlYXJjaC1pbnB1dFthdXRvY29tcGxldGU9XFwnb2ZmXFwnXVtpZD1cXCdwZ19zZWFyY2hcXCddW25hbWU9XFwncGdfc2VhcmNoXFwnXVtwbGFjZWhvbGRlcj1cXCdCdXNxdWUgcHJvamV0b3NcXCddW3R5cGU9XFwndGV4dFxcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBtKCcuc2VhcmNoLXByZS1yZXN1bHQudy1oaWRkZW5bZGF0YS1zZWFyY2hwYXRoPVxcJy9wdC9hdXRvX2NvbXBsZXRlX3Byb2plY3RzXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5yZXN1bHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nW2FsdD1cXCdMb2FkZXJcXCddW3NyYz1cXCcvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL2xvYWRlci1iNjQyZjJmMDIxMjQ1NDAyNmE1YzdjNDA2MjA0MjdjMS5naWZcXCddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5idG4uYnRuLXNtYWxsLmJ0bi10ZXJjaWFyeS5zZWUtbW9yZS1wcm9qZWN0c1tocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHZlciB0b2RvcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgbSgnYS53LWlubGluZS1ibG9jay53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmJ0bi5idG4tZGFyay5idG4tYXR0YWNoZWQucG9zdGZpeFtocmVmPVxcJyNcXCddW2lkPVxcJ3BnX3NlYXJjaF9zdWJtaXRcXCddJyxcbiAgICAgICAgICAgICAgICAgIG0oJ2ltZy5oZWFkZXItbHVwYVthbHQ9XFwnTHVwYVxcJ11bZGF0YS1waW4tbm9waW49XFwndHJ1ZVxcJ11bc3JjPVxcJy9hc3NldHMvY2F0YXJzZV9ib290c3RyYXAvbHVwYS1hMmU2ZjRiOThjNDM2MDQzMjVlZDRjNzg2ZDRiZTVhNC5wbmdcXCddJylcbiAgICAgICAgICAgICAgKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZW51U2VhcmNoO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmNvbnN0IHF1aWNrUHJvamVjdExpc3QgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcucXVpY2tQcm9qZWN0TGlzdCcsIF8ubWFwKGFyZ3MucHJvamVjdHMoKSwgKHByb2plY3QsIGlkeCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG0oYGxpLnUtbWFyZ2luYm90dG9tLTEwYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpZHhcbiAgICAgICAgICAgICAgICAgICAgfSwgbShgLnctcm93YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGAudy1jb2wudy1jb2wtM2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGltZy50aHVtYi5zbWFsbC51LXJhZGl1c1thbHQ9J1Byb2plY3QgdGh1bWIgMDEnXVtzcmM9JyR7cHJvamVjdC50aHVtYl9pbWFnZSB8fCBwcm9qZWN0LnZpZGVvX2NvdmVyX2ltYWdlfSddYClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYC53LWNvbC53LWNvbC05YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGluay5mb250c2l6ZS1zbWFsbGVyW2hyZWY9Jy9wdC8ke3Byb2plY3QucGVybWFsaW5rfT9yZWY9dXNlcl9tZW51X215X2NvbnRyaWJ1dGlvbnMnXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtwcm9qZWN0Lm5hbWV9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgfSksIG0oYGxpLnUtbWFyZ2ludG9wLTIwYCxcbiAgICAgICAgICAgICAgICAgIG0oYC53LXJvd2AsXG4gICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtKGAudy1jb2wudy1jb2wtNmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmJ0bi5idG4tdGVyY2lhcnlbaHJlZj0ke2FyZ3MubG9hZE1vcmVIcmVmfV1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBWZXIgdG9kb3NgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oYC53LWNvbC53LWNvbC02YClcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBxdWlja1Byb2plY3RMaXN0O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IHVzZXJWTSBmcm9tICcuLi92bXMvdXNlci12bSc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBxdWlja1Byb2plY3RMaXN0IGZyb20gJy4uL2MvcXVpY2stcHJvamVjdC1saXN0JztcblxuY29uc3QgbWVudVByb2ZpbGUgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGVkUHJvamVjdHMgPSBtLnByb3AoKSxcbiAgICAgICAgICAgIGxhdGVzdFByb2plY3RzID0gbS5wcm9wKCksXG4gICAgICAgICAgICB1c2VyRGV0YWlscyA9IG0ucHJvcCh7fSksXG4gICAgICAgICAgICB1c2VyX2lkID0gYXJncy51c2VyLnVzZXJfaWQ7XG5cbiAgICAgICAgdXNlclZNLmZldGNoVXNlcih1c2VyX2lkLCB0cnVlLCB1c2VyRGV0YWlscyk7XG5cbiAgICAgICAgdXNlclZNLmdldFVzZXJDcmVhdGVkUHJvamVjdHModXNlcl9pZCkudGhlbihsYXRlc3RQcm9qZWN0cyk7XG5cbiAgICAgICAgdXNlclZNLmdldFVzZXJDb250cmlidXRlZFByb2plY3RzKHVzZXJfaWQpLnRoZW4oY29udHJpYnV0ZWRQcm9qZWN0cyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRyaWJ1dGVkUHJvamVjdHM6IGNvbnRyaWJ1dGVkUHJvamVjdHMsXG4gICAgICAgICAgICBsYXRlc3RQcm9qZWN0czogbGF0ZXN0UHJvamVjdHMsXG4gICAgICAgICAgICB1c2VyRGV0YWlsczogdXNlckRldGFpbHMsXG4gICAgICAgICAgICB0b2dnbGVNZW51OiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgdXNlciA9IGN0cmwudXNlckRldGFpbHMoKTtcblxuICAgICAgICByZXR1cm4gbShgLnctZHJvcGRvd24udXNlci1wcm9maWxlYCxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBtKGBhLnctZHJvcGRvd24tdG9nZ2xlLmRyb3Bkb3duLXRvZ2dsZVtocmVmPSdqYXZhc2NyaXB0OnZvaWQoKSddW2lkPSd1c2VyLW1lbnUnXWAsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlTWVudS50b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbShgaW1nLnVzZXItYXZhdGFyW2FsdD0nVGh1bWIgYXZhdGFyIDk0MjY0NCA0NzM1OTMwMjgzNTk3IDg4ODU3MzU1NyBuJ11baGVpZ2h0PSc0MCddW3NyYz0nJHt1c2VyLnByb2ZpbGVfaW1nX3RodW1ibmFpbH0nXVt3aWR0aD0nNDAnXWApXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBjdHJsLnRvZ2dsZU1lbnUoKSA/IG0oYG5hdi53LWRyb3Bkb3duLWxpc3QuZHJvcGRvd24tbGlzdC51c2VyLW1lbnUudy0tb3BlbltpZD0ndXNlci1tZW51LWRyb3Bkb3duJ11gLCB7c3R5bGU6ICdkaXNwbGF5OmJsb2NrOyd9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKGAudy1yb3dgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgLnctY29sLnctY29sLTRgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYC5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIudS1tYXJnaW5ib3R0b20tMTBgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgTWV1IGhpc3TDs3JpY29gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGB1bC53LWxpc3QtdW5zdHlsZWQudS1tYXJnaW5ib3R0b20tMjBgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGluay5mb250c2l6ZS1zbWFsbGVyW2hyZWY9Jy9wdC91c2Vycy8ke3VzZXIuaWR9L2VkaXQjY29udHJpYnV0aW9ucyddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYEhpc3TDs3JpY28gZGUgYXBvaW9gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGxpLnctaGlkZGVuLW1haW4udy1oaWRkZW4tbWVkaXVtLmxpbmVoZWlnaHQtbG9vc2VyYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLmZvbnRzaXplLXNtYWxsZXJbaHJlZj0nL3B0L3VzZXJzLyR7dXNlci5pZH0vZWRpdCNwcm9qZWN0cyddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFByb2pldG9zIGNyaWFkb3NgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGAuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1zbWFsbGVyLnUtbWFyZ2luYm90dG9tLTEwYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYENvbmZpZ3VyYcOnw7Vlc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYHVsLnctbGlzdC11bnN0eWxlZC51LW1hcmdpbmJvdHRvbS0yMGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGxpLmxpbmVoZWlnaHQtbG9vc2VyYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLmZvbnRzaXplLXNtYWxsZXJbaHJlZj0nL3B0L3VzZXJzLyR7dXNlci5pZH0vZWRpdCNhYm91dF9tZSddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFNvYnJlIHZvY8OqYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGluay5mb250c2l6ZS1zbWFsbGVyW2hyZWY9Jy9wdC91c2Vycy8ke3VzZXIuaWR9L2VkaXQjbm90aWZpY2F0aW9ucyddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYE5vdGlmaWNhw6fDtWVzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGluay5mb250c2l6ZS1zbWFsbGVyW2hyZWY9Jy9wdC91c2Vycy8ke3VzZXIuaWR9L2VkaXQjc2V0dGluZ3MnXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBEYWRvcyBlIGVuZGVyZcOnb2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgbGkubGluZWhlaWdodC1sb29zZXJgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYWx0LWxpbmsuZm9udHNpemUtc21hbGxlcltocmVmPScvcHQvdXNlcnMvJHt1c2VyLmlkfS9lZGl0I2JpbGxpbmcnXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBCYW5jbyBlIGNhcnTDtWVzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgLnctY29sLnctY29sLTQudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtc21hbGxlci51LW1hcmdpbmJvdHRvbS0xMGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBQcm9qZXRvcyBhcG9pYWRvc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYHVsLnctbGlzdC11bnN0eWxlZC51LW1hcmdpbmJvdHRvbS0yMGAsIGN0cmwuY29udHJpYnV0ZWRQcm9qZWN0cygpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc0VtcHR5KGN0cmwuY29udHJpYnV0ZWRQcm9qZWN0cykgPyAnTmVuaHVtIHByb2pldG8uJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHF1aWNrUHJvamVjdExpc3QsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RzOiBtLnByb3AoXy5tYXAoY3RybC5jb250cmlidXRlZFByb2plY3RzKCksIChjb250cmlidXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYl9pbWFnZTogY29udHJpYnV0aW9uLnByb2plY3RfaW1nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlb19jb3Zlcl9pbWFnZTogY29udHJpYnV0aW9uLnByb2plY3RfaW1nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbms6IGNvbnRyaWJ1dGlvbi5wZXJtYWxpbmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGNvbnRyaWJ1dGlvbi5wcm9qZWN0X25hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZE1vcmU6ICcvcHQvdXNlcnMvJHt1c2VyLmlkfS9lZGl0I2NvbnRyaWJ1dGlvbnMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogJ2NhcnJlZ2FuZG8uLi4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGAudy1jb2wudy1jb2wtNC53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGAuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1zbWFsbGVyLnUtbWFyZ2luYm90dG9tLTEwYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFByb2pldG9zIGNyaWFkb3NgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGB1bC53LWxpc3QtdW5zdHlsZWQudS1tYXJnaW5ib3R0b20tMjBgLCBjdHJsLmxhdGVzdFByb2plY3RzKCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmlzRW1wdHkoY3RybC5sYXRlc3RQcm9qZWN0cykgPyAnTmVuaHVtIHByb2pldG8uJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHF1aWNrUHJvamVjdExpc3QsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RzOiBjdHJsLmxhdGVzdFByb2plY3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZE1vcmU6ICcvcHQvdXNlcnMvJHt1c2VyLmlkfS9lZGl0I2NvbnRyaWJ1dGlvbnMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogJ2NhcnJlZ2FuZG8uLi4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oYC5kaXZpZGVyLnUtbWFyZ2luYm90dG9tLTIwYCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKGAuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1zbWFsbGVyLnUtbWFyZ2luYm90dG9tLTEwYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgQWRtaW5gXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbShgdWwudy1saXN0LXVuc3R5bGVkLnUtbWFyZ2luYm90dG9tLTIwYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGxpLmxpbmVoZWlnaHQtbG9vc2VyYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYWx0LWxpbmsuZm9udHNpemUtc21hbGxlcltocmVmPScvcHQvbmV3LWFkbWluIy91c2VycyddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVXN1w6FyaW9zYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLmZvbnRzaXplLXNtYWxsZXJbaHJlZj0nL3B0L25ldy1hZG1pbiddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgQXBvaW9zYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLmZvbnRzaXplLXNtYWxsZXJbaHJlZj0nL3B0L2FkbWluL2ZpbmFuY2lhbHMnXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFJlbC4gRmluYW5jZWlyb3NgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGxpLmxpbmVoZWlnaHQtbG9vc2VyYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYWx0LWxpbmsuZm9udHNpemUtc21hbGxlcltocmVmPScvcHQvYWRtaW4vcHJvamVjdHMnXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYEFkbWluIHByb2pldG9zYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLmZvbnRzaXplLXNtYWxsZXJbaHJlZj0nL3B0L2RiaGVybyddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgRGF0YWNsaXBzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oYC5kaXZpZGVyLnUtbWFyZ2luYm90dG9tLTIwYCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKGAuZm9udHNpemUtc21hbGxlc3RgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFZvY8OqIGVzdMOhIGxvZ2FkbyBjb21vYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgc3BhbmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdChgJm5ic3A7YCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFZpbsOtY2l1cyBDaGF2ZXMgZGUgQW5kcmFkZWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoYCZuYnNwO2ApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYWx0LWxpbmtbaHJlZj0nL3B0L2xvZ291dCddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFNhaXJgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKSA6ICcnXG4gICAgICAgICAgICBdXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWVudVByb2ZpbGU7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbWVudVNlYXJjaCBmcm9tICcuLi9jL21lbnUtc2VhcmNoJztcbmltcG9ydCBtZW51UHJvZmlsZSBmcm9tICcuLi9jL21lbnUtcHJvZmlsZSc7XG5cbmNvbnN0IG1lbnUgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBoLmdldFVzZXIoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlcjogdXNlclxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCdoZWFkZXIubWFpbi1oZWFkZXIudy1zZWN0aW9uJyx7XG4gICAgICAgICAgICBjbGFzczogYXJncy5tZW51VHJhbnNwYXJlbmN5ID8gJ292ZXJsYXllcicgOiAnJ1xuICAgICAgICB9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNsZWFyZml4JyxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5oZWFkZXItbG9nby53LW5hdi1icmFuZFtocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddW3RpdGxlPVxcJ0NhdGFyc2VcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b25jbGljazogKCkgPT4gbS5yb3V0ZSgnLycpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWdbYWx0PVxcJ0xvZ28gYmlnXFwnXVtzcmM9XFwnL2Fzc2V0cy9jYXRhcnNlX2Jvb3RzdHJhcC9sb2dvX2JpZy04NzI2ZjM0MzZhYzIzYzk3OTU5ZDNmN2JmMTAzNjViNy5wbmdcXCddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuaGVhZGVyLWxpbmsudy1uYXYtbGlua1tocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddJyx7b25jbGljazogKCkgPT4gbS5yb3V0ZSgnL3N0YXJ0Jyl9LCAnQ29tZWNlIHNldSBwcm9qZXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5oZWFkZXItbGluay53LW5hdi1saW5rW2hyZWY9XFwnamF2YXNjcmlwdDp2b2lkKDApO1xcJ10nLHtvbmNsaWNrOiAoKSA9PiBtLnJvdXRlKCcvZXhwbG9yZScpfSwnRXhwbG9yZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQobWVudVNlYXJjaCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnVzZXIgPyBtLmNvbXBvbmVudChtZW51UHJvZmlsZSwge3VzZXI6IGN0cmwudXNlcn0pIDogbSgnYS53LW5hdi1saW5rLmhlYWRlci1saW5rLnctbmF2LWxpbmsuYnRuLWVkaXQudS1yaWdodFtocmVmPVxcJy9wdC9sb2dpblxcJ10nLCAnTG9naW4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1uYXYtbGluay53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmhlYWRlci1saW5rLnctbmF2LWxpbmsudS1yaWdodFtocmVmPVxcJ2h0dHA6Ly9ibG9nLmNhdGFyc2UubWVcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQmxvZydcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbSgnLnctaGlkZGVuLW1haW4udy1oaWRkZW4tbWVkaXVtLmhlYWRlci1jb250cm9scy1tb2JpbGUnLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmhlYWRlci1saW5rLnctbmF2LWxpbmtbaHJlZj1cXCcvcHQvc3RhcnRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29tZWNlIHNldSBwcm9qZXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EuaGVhZGVyLWxpbmsudy1uYXYtbGlua1tocmVmPVxcJy9wdC9leHBsb3JlXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0V4cGxvcmUnXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWVudTtcbiIsImltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuXG5jb25zdCBob21lVk0gPSAoKSA9PiB7XG4gICAgY29uc3QgaTE4blN0YXJ0ID0gSTE4bi50cmFuc2xhdGlvbnNbSTE4bi5jdXJyZW50TG9jYWxlKCldLnByb2plY3RzLmhvbWUsXG4gICAgICAgIGJhbm5lcnMgPSBpMThuU3RhcnQuYmFubmVycztcblxuICAgIHJldHVybiB7XG4gICAgICAgIGJhbm5lcnM6IGJhbm5lcnNcbiAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaG9tZVZNO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5TbGlkZXIgY29tcG9uZW50XG4gKiBCdWlsZCBhIHNsaWRlciBmcm9tIGFueSBhcnJheSBvZiBtaXRocmlsIGVsZW1lbnRzXG4gKlxuICogRXhhbXBsZSBvZiB1c2U6XG4gKiB2aWV3OiAoKSA9PiB7XG4gKiAgICAgLi4uXG4gKiAgICAgbS5jb21wb25lbnQoYy5TbGlkZXIsIHtcbiAqICAgICAgICAgc2xpZGVzOiBbbSgnc2xpZGUxJyksIG0oJ3NsaWRlMicpLCBtKCdzbGlkZTMnKV0sXG4gKiAgICAgICAgIHRpdGxlOiAnTyBxdWUgZXN0w6NvIGRpemVuZG8gcG9yIGHDrS4uLidcbiAqICAgICB9KVxuICogICAgIC4uLlxuICogfVxuICovXG5cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmNvbnN0IHNsaWRlciA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgbGV0IGludGVydmFsO1xuICAgICAgICBjb25zdCBzZWxlY3RlZFNsaWRlSWR4ID0gbS5wcm9wKDApLFxuICAgICAgICAgICAgdHJhbnNsYXRpb25TaXplID0gbS5wcm9wKDE2MDApLFxuICAgICAgICAgICAgc2xpZGVyVGltZSA9IGFyZ3Muc2xpZGVyVGltZSB8fCA2NTAwLFxuICAgICAgICAgICAgZGVjcmVtZW50U2xpZGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkU2xpZGVJZHgoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRTbGlkZUlkeChzZWxlY3RlZFNsaWRlSWR4KCkgLSAxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFNsaWRlSWR4KGFyZ3Muc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNyZW1lbnRTbGlkZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRTbGlkZUlkeCgpIDwgKGFyZ3Muc2xpZGVzLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU2xpZGVJZHgoc2VsZWN0ZWRTbGlkZUlkeCgpICsgMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRTbGlkZUlkeCgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhcnRTbGlkZXJUaW1lciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50U2xpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgICAgICB9LCBzbGlkZXJUaW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNldFNsaWRlclRpbWVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIHN0YXJ0U2xpZGVyVGltZXIoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWcgPSAoZWwsIGlzSW5pdGlhbGl6ZWQsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpe1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvblNpemUoTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKSk7XG4gICAgICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbnRleHQub251bmxvYWQgPSAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgc3RhcnRTbGlkZXJUaW1lcigpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgICAgIHNlbGVjdGVkU2xpZGVJZHg6IHNlbGVjdGVkU2xpZGVJZHgsXG4gICAgICAgICAgICB0cmFuc2xhdGlvblNpemU6IHRyYW5zbGF0aW9uU2l6ZSxcbiAgICAgICAgICAgIGRlY3JlbWVudFNsaWRlOiBkZWNyZW1lbnRTbGlkZSxcbiAgICAgICAgICAgIGluY3JlbWVudFNsaWRlOiBpbmNyZW1lbnRTbGlkZSxcbiAgICAgICAgICAgIHJlc2V0U2xpZGVyVGltZXI6IHJlc2V0U2xpZGVyVGltZXJcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBzbGlkZUNsYXNzID0gYXJncy5zbGlkZUNsYXNzIHx8ICcnLFxuICAgICAgICAgICAgd3JhcHBlckNsYXNzID0gYXJncy53cmFwcGVyQ2xhc3MgfHwgJycsXG4gICAgICAgICAgICBlZmZlY3QgPSBhcmdzLmVmZmVjdCB8fCAnc2xpZGUnLFxuICAgICAgICAgICAgc2xpZGVyQ2xpY2sgPSAoZm4sIHBhcmFtKSA9PiB7XG4gICAgICAgICAgICAgICAgZm4ocGFyYW0pO1xuICAgICAgICAgICAgICAgIGN0cmwucmVzZXRTbGlkZXJUaW1lcigpO1xuICAgICAgICAgICAgICAgIGFyZ3Mub25jaGFuZ2UgJiYgYXJncy5vbmNoYW5nZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVmZmVjdFN0eWxlID0gKGlkeCwgdHJhbnNsYXRlU3RyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVGeCA9IGB0cmFuc2Zvcm06ICR7dHJhbnNsYXRlU3RyfTsgLXdlYmtpdC10cmFuc2Zvcm06ICR7dHJhbnNsYXRlU3RyfTsgLW1zLXRyYW5zZm9ybToke3RyYW5zbGF0ZVN0cn1gLFxuICAgICAgICAgICAgICAgICAgICBmYWRlRnggPSBpZHggPT09IGN0cmwuc2VsZWN0ZWRTbGlkZUlkeCgpID8gJ29wYWNpdHk6IDE7IHZpc2liaWxpdHk6IHZpc2libGU7JyA6ICdvcGFjaXR5OiAwOyB2aXNpYmlsaXR5OiBoaWRkZW47JztcblxuICAgICAgICAgICAgICAgIHJldHVybiBlZmZlY3QgPT09ICdmYWRlJyA/IGZhZGVGeCA6IHNsaWRlRng7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBtKGAudy1zbGlkZXIuJHt3cmFwcGVyQ2xhc3N9YCwge1xuICAgICAgICAgICAgY29uZmlnOiBjdHJsLmNvbmZpZ1xuICAgICAgICB9LCBbXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyJywgYXJncy50aXRsZSksXG4gICAgICAgICAgICBtKCcudy1zbGlkZXItbWFzaycsIFtcbiAgICAgICAgICAgICAgICBfLm1hcChhcmdzLnNsaWRlcywgKHNsaWRlLCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyYW5zbGF0ZVZhbHVlID0gKGlkeCAtIGN0cmwuc2VsZWN0ZWRTbGlkZUlkeCgpKSAqIGN0cmwudHJhbnNsYXRpb25TaXplKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVTdHIgPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVWYWx1ZX1weCwgMCwgMClgO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtKGAuc2xpZGUudy1zbGlkZS4ke3NsaWRlQ2xhc3N9YCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGAke2VmZmVjdFN0eWxlKGlkeCwgdHJhbnNsYXRlU3RyKX0gJHtzbGlkZS5jdXN0b21TdHlsZX1gXG4gICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXB1c2gtMicsIHNsaWRlLmNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG0oJyNzbGlkZS1wcmV2Lnctc2xpZGVyLWFycm93LWxlZnQudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsIHtcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogKCkgPT4gc2xpZGVyQ2xpY2soY3RybC5kZWNyZW1lbnRTbGlkZSlcbiAgICAgICAgICAgICAgICB9LFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctaWNvbi1zbGlkZXItbGVmdC5mYS5mYS1sZy5mYS1hbmdsZS1sZWZ0LmZvbnRjb2xvci10ZXJjaWFyeScpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnI3NsaWRlLW5leHQudy1zbGlkZXItYXJyb3ctcmlnaHQudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsIHtcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogKCkgPT4gc2xpZGVyQ2xpY2soY3RybC5pbmNyZW1lbnRTbGlkZSlcbiAgICAgICAgICAgICAgICB9LFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctaWNvbi1zbGlkZXItcmlnaHQuZmEuZmEtbGcuZmEtYW5nbGUtcmlnaHQuZm9udGNvbG9yLXRlcmNpYXJ5JylcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1zbGlkZXItbmF2Lnctc2xpZGVyLW5hdi1pbnZlcnQudy1yb3VuZC5zbGlkZS1uYXYnLCBfKGFyZ3Muc2xpZGVzLmxlbmd0aCkudGltZXMoKGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbShgLnNsaWRlLWJ1bGxldC53LXNsaWRlci1kb3Qke2N0cmwuc2VsZWN0ZWRTbGlkZUlkeCgpID09PSBpZHggPyAnLnctYWN0aXZlJyA6ICcnfWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ICgpID0+IHNsaWRlckNsaWNrKGN0cmwuc2VsZWN0ZWRTbGlkZUlkeCwgaWR4KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNsaWRlcjtcbiIsIi8qKlxuICogd2luZG93LmMuQ29udHJpYnV0aW9uQWN0aXZpdGllcyBjb21wb25lbnRcbiAqIFJlbmRlciBhIGNvbXBvbmVudCB0aGF0IHBhc3Mgb24gY29uZmlybWVkIGNvbnRyaWJ1dGlvbnMgaW4gMjRob3VycyBpbnRlcnZhbFxuICpcbiAqXG4gKiBFeGFtcGxlIG9mIHVzZTpcbiAqIHZpZXc6ICgpID0+IHtcbiAqICAgICAuLi5cbiAqICAgICBtLmNvbXBvbmVudChjLkNvbnRyaWJ1dGlvbkFjdGl2aXRpZXMpXG4gKiAgICAgLi4uXG4gKiB9XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5jb25zdCBjb250cmlidXRpb25BY3Rpdml0aWVzID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgaW50ZXJ2YWw7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgICByZXNvdXJjZSA9IG0ucHJvcCgpLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uSW5kZXggPSBtLnByb3AoMCksXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25TaXplID0gbS5wcm9wKCksXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25MID0gcG9zdGdyZXN0LmxvYWRlcihcbiAgICAgICAgICAgICAgICAgIG1vZGVscy5jb250cmlidXRpb25BY3Rpdml0eS5nZXRQYWdlT3B0aW9ucygpKSxcbiAgICAgICAgICAgICAgbmV4dFJlc291cmNlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKChjb2xsZWN0aW9uSW5kZXgoKSArIDEpID4gY29sbGVjdGlvblNpemUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JbmRleCgwKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbkluZGV4KGNvbGxlY3Rpb25JbmRleCgpICsgMSk7XG4gICAgICAgICAgICAgICAgICByZXNvdXJjZShjb2xsZWN0aW9uKClbY29sbGVjdGlvbkluZGV4KCldKTtcbiAgICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN0YXJ0Q29uZmlnID0gKGVsLCBpc2luaXRpYWxpemVkLCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0Lm9udW5sb2FkID0gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN0YXJ0VGltZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpbnRlcnZhbCA9IHNldEludGVydmFsKG5leHRSZXNvdXJjZSwgMTUwMDApO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIGNvbGxlY3Rpb25MLmxvYWQoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uKGRhdGEpO1xuICAgICAgICAgICAgY29sbGVjdGlvblNpemUoZGF0YS5sZW5ndGgpO1xuICAgICAgICAgICAgcmVzb3VyY2UoXy5maXJzdChkYXRhKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YXJ0VGltZXIoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbixcbiAgICAgICAgICAgIGNvbGxlY3Rpb25MOiBjb2xsZWN0aW9uTCxcbiAgICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25TaXplOiBjb2xsZWN0aW9uU2l6ZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGlmICghY3RybC5jb2xsZWN0aW9uTCgpICYmICFfLmlzVW5kZWZpbmVkKGN0cmwucmVzb3VyY2UoKSkgJiYgKGN0cmwuY29sbGVjdGlvblNpemUoKSB8fCAwKSA+IDApIHtcbiAgICAgICAgICAgIGxldCByZXNvdXJjZSA9IGN0cmwucmVzb3VyY2UoKSxcbiAgICAgICAgICAgICAgICBlbGFwc2VkID0gaC50cmFuc2xhdGVkVGltZShyZXNvdXJjZS5lbGFwc2VkX3RpbWUpLFxuICAgICAgICAgICAgICAgIHByb2plY3RfbGluayA9IGBodHRwczovL2NhdGFyc2UubWUvJHtyZXNvdXJjZS5wZXJtYWxpbmt9P3JlZj1jdHJzZV9ob21lX2FjdGl2aXRpZXNgO1xuXG4gICAgICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5zZWN0aW9uLmJnLWJhY2tzLWNhcnJvc2VsJywge2NvbmZpZzogY3RybC5zdGFydENvbmZpZ30sIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIudS10ZXh0LWNlbnRlci5mb250Y29sb3ItbmVnYXRpdmUnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIGBow6EgJHtwYXJzZUludChlbGFwc2VkLnRvdGFsKX0gJHtlbGFwc2VkLnVuaXR9Li4uYCksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNsZWFyZml4LnctaW5saW5lLWJsb2NrLnUtbWFyZ2luYm90dG9tLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYScsIHtocmVmOiBwcm9qZWN0X2xpbmt9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLWF1dGhvci51LXJvdW5kJywge3NyYzogcmVzb3VyY2UudGh1bWJuYWlsLCB3aWR0aDogODB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLWF1dGhvci51LXJvdW5kJywge3NyYzogJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTZkNjQ2Zjc3MTBhNzEyNjMzOGI0NmZmX2xvZ28tY2F0YXJzZS1iYWNrLWNhcnJvc2VsLnBuZyd9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EnLCB7aHJlZjogcHJvamVjdF9saW5rfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy50aHVtYi1hdXRob3IudS1yb3VuZCcsIHtzcmM6IHJlc291cmNlLnByb2plY3RfdGh1bWJuYWlsLCB3aWR0aDogODAsIHN0eWxlOiAnbWFyZ2luLXJpZ2h0OiAwOyd9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UnLCBgJHtyZXNvdXJjZS5uYW1lfSBhcG9pb3VgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW4td2hpdGUnLCB7aHJlZjogcHJvamVjdF9saW5rfSwgcmVzb3VyY2UucHJvamVjdF9uYW1lKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtKCdkaXYnKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRyaWJ1dGlvbkFjdGl2aXRpZXM7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuY29uc3QgYmxvZ0Jhbm5lciA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcblxuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCdzZWN0aW9uLnNlY3Rpb24tbGFyZ2UuYmctZ3JheS5iZWZvcmUtZm9vdGVyW2lkPVxcJ2Jsb2dcXCddJyxcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYVtocmVmPVxcJ2h0dHA6Ly9ibG9nLmNhdGFyc2UubWVcXCddW3RhcmdldD1cXCdibGFua1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudS1tYXJnaW5ib3R0b20tMTBbYWx0PVxcJ0ljb24gYmxvZ1xcJ11bc3JjPVxcJy9hc3NldHMvaWNvbi1ibG9nLnBuZ1xcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTYwLnRleHQtc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW4tc3VjY2Vzc1tocmVmPVxcJ2h0dHA6Ly9ibG9nLmNhdGFyc2UubWVcXCddW3RhcmdldD1cXCdfX2JsYW5rXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQmxvZyBkbyBDYXRhcnNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LmNvbC1ibG9nLXBvc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0xMFtocmVmPVxcJ2h0dHA6Ly9ibG9nLmNhdGFyc2UubWUvZGlhLWRhLXRvYWxoYS9cXCddW3RhcmdldD1cXCdfX2JsYW5rXFwnXScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIuZm9udGNvbG9yLXNlY29uZGFyeS51LW1hcmdpbnRvcC0xMCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LmNvbC1ibG9nLXBvc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0xMFtocmVmPVxcJ2h0dHA6Ly9ibG9nLmNhdGFyc2UubWUvY3Jvd2RmdW5kaW5nLXBhcmEtc3VhLWF2by9cXCddW3RhcmdldD1cXCdfX2JsYW5rXFwnXScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIuZm9udGNvbG9yLXNlY29uZGFyeS51LW1hcmdpbnRvcC0xMCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LmNvbC1ibG9nLXBvc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0xMFtocmVmPVxcJ2h0dHA6Ly9ibG9nLmNhdGFyc2UubWUvcmViZWNhLXByYWRvL1xcJ11bdGFyZ2V0PVxcJ19fYmxhbmtcXCddJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlci5mb250Y29sb3Itc2Vjb25kYXJ5LnUtbWFyZ2ludG9wLTEwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBibG9nQmFubmVyO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmNvbnN0IGZvb3RlciA9IHtcbiAgICB2aWV3KCkge1xuICAgICAgICByZXR1cm4gbSgnZm9vdGVyLm1haW4tZm9vdGVyLm1haW4tZm9vdGVyLW5lZycsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgbSgnc2VjdGlvbi53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXNtYWxsLTQudy1jb2wtdGlueS00LnctaGlkZGVuLXRpbnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9vdGVyLWZ1bGwtc2lnbmF0dXJlLXRleHQuZm9udHNpemUtc21hbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdCZW0tdmluZG8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHBzOi8vd3d3LmNhdGFyc2UubWUvcHQvZmxleFxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NhdGFyc2UgZmxleCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmJhZGdlLmJhZGdlLXN1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vdmlkYWRl4oCNJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1mb290ZXJbaHJlZj1cXCdodHRwczovL3d3dy5jYXRhcnNlLm1lL3B0L3RlYW1cXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgTm9zc28gdGltZSAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbHQ7JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICczJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cDovL2ZhY2Vib29rLmNvbS9jYXRhcnNlLm1lXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBGYWNlYm9vaydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cDovL3R3aXR0ZXIuY29tL2NhdGFyc2VcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIFR3aXR0ZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHA6Ly9pbnN0YWdyYW0uY29tL2NhdGFyc2VcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEluc3RhZ3JhbSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cDovL2dpdGh1Yi5jb20vY2F0YXJzZS9jYXRhcnNlXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBHaXRodWInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHA6Ly9ibG9nLmNhdGFyc2UubWVcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEJsb2cnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHBzOi8vd3d3LmNhdGFyc2UubWUvcHQvam9ic1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgVHJhYmFsaGUgY29ub3NjbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQuZm9vdGVyLWZ1bGwtZmlyc3Rjb2x1bW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9vdGVyLWZ1bGwtc2lnbmF0dXJlLXRleHQuZm9udHNpemUtc21hbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBanVkYSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnplbmRlc2tfd2lkZ2V0LmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cHM6Ly9lcXVpcGVjYXRhcnNlLnplbmRlc2suY29tL2FjY291bnQvZHJvcGJveGVzLzIwMjk4NTM3XFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBDb250YXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1mb290ZXJbaHJlZj1cXCdodHRwczovL3d3dy5jYXRhcnNlLm1lL3B0L3ByZXNzXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBJbXByZW5zYSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cDovL3N1cG9ydGUuY2F0YXJzZS5tZS9cXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIENlbnRyYWwgZGUgU3Vwb3J0ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS9wdC9ndWlkZXNcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEd1aWEgZG9zIFJlYWxpemFkb3JlcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cDovL3Blc3F1aXNhLmNhdGFyc2UubWUvXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBSZXRyYXRvIEZDIEJyYXNpbCAyMDEzLzIwMTQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJy9wdC90ZXJtcy1vZi11c2VcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIFRlcm1vcyBkZSB1c28nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJy9wdC9wcml2YWN5LXBvbGljeVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgUG9sw610aWNhIGRlIHByaXZhY2lkYWRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1zbWFsbC00LnctY29sLXRpbnktNC5mb290ZXItZnVsbC1sYXN0Y29sdW1uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvb3Rlci1mdWxsLXNpZ25hdHVyZS10ZXh0LmZvbnRzaXplLXNtYWxsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTmF2ZWd1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkubGluay1mb290ZXJbaHJlZj1cXCcvcHQvc3RhcnRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIENvbWVjZSBzZXUgcHJvamV0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnL3B0L2V4cGxvcmVcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEV4cGxvcmUgcHJvamV0b3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bS53LWhpZGRlbi1zbWFsbC5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHA6Ly9ibG9nLmNhdGFyc2UubWVcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEJsb2cnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bS53LWhpZGRlbi1zbWFsbC5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHBzOi8vZXF1aXBlY2F0YXJzZS56ZW5kZXNrLmNvbS9hY2NvdW50L2Ryb3Bib3hlcy8yMDI5ODUzN1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgQ29udGF0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctaGlkZGVuLXRpbnkubGluay1mb290ZXJbaHJlZj1cXCcvcHQvZXhwbG9yZT9maWx0ZXI9c2NvcmVcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIFBvcHVsYXJlcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctaGlkZGVuLXRpbnkubGluay1mb290ZXJbaHJlZj1cXCcvcHQvZXhwbG9yZT9maWx0ZXI9b25saW5lXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBObyBhcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctaGlkZGVuLXRpbnkubGluay1mb290ZXJbaHJlZj1cXCcvcHQvZXhwbG9yZT9maWx0ZXI9ZmluaXNoZWRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEZpbmFsaXphZG9zJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy5jb2x1bW4tc29jaWFsLW1lZGlhLWZvb3RlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb290ZXItZnVsbC1zaWduYXR1cmUtdGV4dC5mb250c2l6ZS1zbWFsbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Fzc2luZSBub3NzYSBuZXdzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Zvcm1bYWNjZXB0LWNoYXJzZXQ9XFwnVVRGLThcXCddW2FjdGlvbj1cXCdodHRwczovL2NhdGFyc2UudXM1Lmxpc3QtbWFuYWdlLmNvbS9zdWJzY3JpYmUvcG9zdD91PWViZmNkMGQxNmRiYjAwMDFhMGJlYTM2MzkmYW1wO2FtcDtpZD0xNDljMzk3MDllXFwnXVtpZD1cXCdtYWlsZWUtZm9ybVxcJ11bbWV0aG9kPVxcJ3Bvc3RcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2Jywge3N0eWxlOiB7J2Rpc3BsYXknOiAnbm9uZSd9fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0W25hbWU9XFwndXRmOFxcJ11bdHlwZT1cXCdoaWRkZW5cXCddW3ZhbHVlPVxcJ+Kck1xcJ10nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXRbbmFtZT1cXCdhdXRoZW50aWNpdHlfdG9rZW5cXCddW3R5cGU9XFwnaGlkZGVuXFwnXVt2YWx1ZT1cXCczUjFjdFlnd1NlKzZZeXh6clJqYWNheUk4K3VFQk9jL3k2ZU1QTDl4Nk5zPVxcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtLmZvb3Rlci1uZXdzbGV0dGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWlucHV0LnRleHQtZmllbGQucHJlZml4W2lkPVxcJ0VNQUlMXFwnXVtsYWJlbD1cXCdlbWFpbFxcJ11bbmFtZT1cXCdFTUFJTFxcJ11bcGxhY2Vob2xkZXI9XFwnRGlnaXRlIHNldSBlbWFpbFxcJ11bdHlwZT1cXCdlbWFpbFxcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1pbmxpbmUtYmxvY2suYnRuLmJ0bi1lZGl0LnBvc3RmaXguYnRuLWF0dGFjaGVkW2hyZWY9XFwnI1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy5mb290ZXItbmV3cy1pY29uW2FsdD1cXCdJY29uIG5ld3NsZXR0ZXJcXCddW3NyYz1cXCcvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL2ljb24tbmV3c2xldHRlci1hYTc3Y2VkZTkyYjRkMGEzMTQxNzBhMTBiMWM0MTc1NC5wbmdcXCddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9vdGVyLWZ1bGwtc2lnbmF0dXJlLXRleHQuZm9udHNpemUtc21hbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSZWRlcyBzb2NpYWlzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXdpZGdldC53LXdpZGdldC1mYWNlYm9vay51LW1hcmdpbmJvdHRvbS0yMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZhY2Vib29rJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZiLWxpa2UuZmJfaWZyYW1lX3dpZGdldFtkYXRhLWNvbG9yc2NoZW1lPVxcJ2RhcmtcXCddW2RhdGEtaHJlZj1cXCdodHRwOi8vZmFjZWJvb2suY29tL2NhdGFyc2UubWVcXCddW2RhdGEtbGF5b3V0PVxcJ2J1dHRvbl9jb3VudFxcJ11bZGF0YS1zZW5kPVxcJ2ZhbHNlXFwnXVtkYXRhLXNob3ctZmFjZXM9XFwnZmFsc2VcXCddW2RhdGEtdGl0bGU9XFwnXFwnXVtkYXRhLXdpZHRoPVxcJzI2MFxcJ11bZmItaWZyYW1lLXBsdWdpbi1xdWVyeT1cXCdhcHBfaWQ9MTczNzQ3MDQyNjYxNDkxJmFtcDtjb2xvcl9zY2hlbWU9ZGFyayZhbXA7Y29udGFpbmVyX3dpZHRoPTIyNSZhbXA7aHJlZj1odHRwJTNBJTJGJTJGZmFjZWJvb2suY29tJTJGY2F0YXJzZS5tZSZhbXA7bGF5b3V0PWJ1dHRvbl9jb3VudCZhbXA7bG9jYWxlPXB0X0JSJmFtcDtzZGs9am9leSZhbXA7c2VuZD1mYWxzZSZhbXA7c2hvd19mYWNlcz1mYWxzZSZhbXA7d2lkdGg9MjYwXFwnXVtmYi14ZmJtbC1zdGF0ZT1cXCdyZW5kZXJlZFxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3BhbicsIHtzdHlsZTogeyd2ZXJ0aWNhbC1hbGlnbic6ICdib3R0b20nLCAnd2lkdGgnOiAnMTA3cHgnLCAnaGVpZ2h0JzogJzIwcHgnfX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaWZyYW1lW2FsbG93ZnVsbHNjcmVlbj1cXCd0cnVlXFwnXVthbGxvd3RyYW5zcGFyZW5jeT1cXCd0cnVlXFwnXVtjbGFzcz1cXCdcXCddW2ZyYW1lYm9yZGVyPVxcJzBcXCddW2hlaWdodD1cXCcxMDAwcHhcXCddW25hbWU9XFwnZjM0NDI0ZjhkN2U5ZWVjXFwnXVtzY3JvbGxpbmc9XFwnbm9cXCddW3NyYz1cXCdodHRwczovL3d3dy5mYWNlYm9vay5jb20vdjIuMC9wbHVnaW5zL2xpa2UucGhwP2FwcF9pZD0xNzM3NDcwNDI2NjE0OTEmYW1wO2NoYW5uZWw9aHR0cHMlM0ElMkYlMkZzdGF0aWN4eC5mYWNlYm9vay5jb20lMkZjb25uZWN0JTJGeGRfYXJiaXRlci5waHAlM0Z2ZXJzaW9uJTNENDIlMjNjYiUzRGYyNWNkYjE4MTk5ZTU5YyUyNmRvbWFpbiUzRHd3dy5jYXRhcnNlLm1lJTI2b3JpZ2luJTNEaHR0cHMlMjUzQSUyNTJGJTI1MkZ3d3cuY2F0YXJzZS5tZSUyNTJGZjIwZjZjMGRkNzg3NzJjJTI2cmVsYXRpb24lM0RwYXJlbnQucGFyZW50JmFtcDtjb2xvcl9zY2hlbWU9ZGFyayZhbXA7Y29udGFpbmVyX3dpZHRoPTIyNSZhbXA7aHJlZj1odHRwJTNBJTJGJTJGZmFjZWJvb2suY29tJTJGY2F0YXJzZS5tZSZhbXA7bGF5b3V0PWJ1dHRvbl9jb3VudCZhbXA7bG9jYWxlPXB0X0JSJmFtcDtzZGs9am9leSZhbXA7c2VuZD1mYWxzZSZhbXA7c2hvd19mYWNlcz1mYWxzZSZhbXA7d2lkdGg9MjYwXFwnXVt0aXRsZT1cXCdmYjpsaWtlIEZhY2Vib29rIFNvY2lhbCBQbHVnaW5cXCddW3dpZHRoPVxcJzI2MHB4XFwnXScsIHtzdHlsZTogeydib3JkZXInOiAnbm9uZScsICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLCAnd2lkdGgnOiAnMTA3cHgnLCAnaGVpZ2h0JzogJzIwcHgnfX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctd2lkZ2V0Lnctd2lkZ2V0LXR3aXR0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lmcmFtZS50d2l0dGVyLWZvbGxvdy1idXR0b24udHdpdHRlci1mb2xsb3ctYnV0dG9uLXJlbmRlcmVkW2FsbG93dHJhbnNwYXJlbmN5PVxcJ3RydWVcXCddW2RhdGEtc2NyZWVuLW5hbWU9XFwnY2F0YXJzZVxcJ11bZnJhbWVib3JkZXI9XFwnMFxcJ11baWQ9XFwndHdpdHRlci13aWRnZXQtMFxcJ11bc2Nyb2xsaW5nPVxcJ25vXFwnXVtzcmM9XFwnaHR0cHM6Ly9wbGF0Zm9ybS50d2l0dGVyLmNvbS93aWRnZXRzL2ZvbGxvd19idXR0b24uNDBkNWU2MTZmNGU2ODVkYWRjN2ZiNzc5NzBmNjQ0OTAuZW4uaHRtbCNkbnQ9ZmFsc2UmYW1wO2lkPXR3aXR0ZXItd2lkZ2V0LTAmYW1wO2xhbmc9ZW4mYW1wO3NjcmVlbl9uYW1lPWNhdGFyc2UmYW1wO3Nob3dfY291bnQ9dHJ1ZSZhbXA7c2hvd19zY3JlZW5fbmFtZT10cnVlJmFtcDtzaXplPW0mYW1wO3RpbWU9MTQ2NDM2MTcxNDQ2MlxcJ11bdGl0bGU9XFwnVHdpdHRlciBGb2xsb3cgQnV0dG9uXFwnXScsIHtzdHlsZTogeydwb3NpdGlvbic6ICdzdGF0aWMnLCAndmlzaWJpbGl0eSc6ICd2aXNpYmxlJywgJ3dpZHRoJzogJzIwNnB4JywgJ2hlaWdodCc6ICcyMHB4J319KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbnRvcC0zMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9vdGVyLWZ1bGwtc2lnbmF0dXJlLXRleHQuZm9udHNpemUtc21hbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NoYW5nZSBsYW5ndWFnZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnW2lkPVxcJ2dvb2dsZV90cmFuc2xhdGVfZWxlbWVudFxcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvb3Rlci1mdWxsLWNvcHlsZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudS1tYXJnaW5ib3R0b20tMjBbYWx0PVxcJ0xvZ28gZm9vdGVyXFwnXVtzcmM9XFwnL2Fzc2V0cy9sb2dvLWZvb3Rlci1iNWVkZDQzZTBlYzQyMGEzOTMxMGVhOTY1MzQxZjNlYS5wbmdcXCddJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmxpbmVoZWlnaHQtbG9vc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyLWlubGluZVtocmVmPVxcJ2h0dHA6Ly9naXRodWIuY29tL2NhdGFyc2UvY2F0YXJzZVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZlaXRvIGNvbSBhbW9yIHwgMjAxNiB8IE9wZW4gc291cmNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvb3RlcjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbWVudSBmcm9tICcuL21lbnUnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHByb2plY3RGaWx0ZXJzIGZyb20gJy4uL3Ztcy9wcm9qZWN0LWZpbHRlcnMtdm0nO1xuaW1wb3J0IGhvbWVWTSBmcm9tICcuLi92bXMvaG9tZS12bSc7XG5pbXBvcnQgc2xpZGVyIGZyb20gJy4uL2Mvc2xpZGVyJztcbmltcG9ydCBwcm9qZWN0Um93IGZyb20gJy4uL2MvcHJvamVjdC1yb3cnO1xuaW1wb3J0IGNvbnRyaWJ1dGlvbkFjdGl2aXRpZXMgZnJvbSAnLi4vYy9jb250cmlidXRpb24tYWN0aXZpdGllcyc7XG5pbXBvcnQgYmxvZ0Jhbm5lciBmcm9tICcuL2Jsb2ctYmFubmVyJztcbmltcG9ydCBmb290ZXIgZnJvbSAnLi9mb290ZXInO1xuaW1wb3J0IFNpZ25lZEZyaWVuZEZhY2Vib29rQ29ubmVjdCBmcm9tICcuLi9jL3NpZ25lZC1mcmllbmQtZmFjZWJvb2stY29ubmVjdCc7XG5pbXBvcnQgVW5zaWduZWRGcmllbmRGYWNlYm9va0Nvbm5lY3QgZnJvbSAnLi4vYy91bnNpZ25lZC1mcmllbmQtZmFjZWJvb2stY29ubmVjdCc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLmhvbWUnKTtcblxuY29uc3QgcHJvamVjdHNIb21lID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgc2FtcGxlNiA9IF8ucGFydGlhbChfLnNhbXBsZSwgXywgNiksXG4gICAgICAgICAgICBsb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuLFxuICAgICAgICAgICAgcHJvamVjdCA9IG1vZGVscy5wcm9qZWN0LFxuICAgICAgICAgICAgZmlsdGVycyA9IHByb2plY3RGaWx0ZXJzKCkuZmlsdGVycyxcbiAgICAgICAgICAgIHVzZXJGcmllbmRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3VzZXJfaWQ6ICdlcSd9KSxcbiAgICAgICAgICAgIGZyaWVuZExpc3RWTSA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnVzZXJGcmllbmQsICd1c2VyX2lkLmRlc2MnLCB7XG4gICAgICAgICAgICAgICAgJ1ByZWZlcic6ICAnY291bnQ9ZXhhY3QnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGN1cnJlbnRVc2VyID0gaC5nZXRVc2VyKCksXG4gICAgICAgICAgICBoYXNGQkF1dGggPSBjdXJyZW50VXNlci5oYXNfZmJfYXV0aCxcbiAgICAgICAgICAgIHZtID0gaG9tZVZNKCk7XG5cbiAgICAgICAgcHJvamVjdC5wYWdlU2l6ZSgyMCk7XG5cbiAgICAgICAgdXNlckZyaWVuZFZNLnVzZXJfaWQoY3VycmVudFVzZXIudXNlcl9pZCk7XG5cbiAgICAgICAgaWYgKGhhc0ZCQXV0aCAmJiAhZnJpZW5kTGlzdFZNLmNvbGxlY3Rpb24oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZyaWVuZExpc3RWTS5maXJzdFBhZ2UodXNlckZyaWVuZFZNLnBhcmFtZXRlcnMoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IF8ubWFwKFsnc2NvcmUnLCdjb250cmlidXRlZF9ieV9mcmllbmRzJ10sIChuYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmID0gZmlsdGVyc1tuYW1lXSxcbiAgICAgICAgICAgICAgICAgIGNMb2FkZXIgPSBsb2FkZXIocHJvamVjdC5nZXRQYWdlT3B0aW9ucyhfLmV4dGVuZCh7fSwge29yZGVyOiAnc2NvcmUuZGVzYyd9LCBmLmZpbHRlci5wYXJhbWV0ZXJzKCkpKSksXG4gICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uID0gbS5wcm9wKFtdKTtcblxuICAgICAgICAgICAgY0xvYWRlci5sb2FkKCkudGhlbihfLmNvbXBvc2UoY29sbGVjdGlvbiwgc2FtcGxlNikpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBmLm5pY2VuYW1lLFxuICAgICAgICAgICAgICAgIGhhc2g6IChuYW1lID09PSAnc2NvcmUnID8gJ2FsbCcgOiBuYW1lKSxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uLFxuICAgICAgICAgICAgICAgIGxvYWRlcjogY0xvYWRlcixcbiAgICAgICAgICAgICAgICBzaG93RnJpZW5kczogKG5hbWUgPT09ICdjb250cmlidXRlZF9ieV9mcmllbmRzJylcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uczogY29sbGVjdGlvbnMsXG4gICAgICAgICAgICBzbGlkZXNDb250ZW50OiB2bS5iYW5uZXJzLFxuICAgICAgICAgICAgaGFzRkJBdXRoOiBoYXNGQkF1dGhcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCkge1xuICAgICAgICBjb25zdCBzbGlkZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gXy5tYXAoY3RybC5zbGlkZXNDb250ZW50LCAoc2xpZGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXN0b21TdHlsZSA9IGBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtzbGlkZS5pbWFnZX0pO2A7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IG0oJy53LWNvbnRhaW5lci51LXRleHQtY2VudGVyJyxbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS00MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2gxLmZvbnRjb2xvci1uZWdhdGl2ZS5mb250c2l6ZS1tZWdhanVtYm8udS1tYXJnaW5ib3R0b20tMjAnLCBzbGlkZS50aXRsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdoMi5mb250Y29sb3ItbmVnYXRpdmUuZm9udHNpemUtbGFyZ2UnLCBtLnRydXN0KHNsaWRlLnN1YnRpdGxlKSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2EuYnRuLmJ0bi1sYXJnZS51LW1hcmdpbmJvdHRvbS0xMC5idG4taW5saW5lJyx7aHJlZjogc2xpZGUubGlua30sIHNsaWRlLmN0YSlcbiAgICAgICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbVN0eWxlOiBjdXN0b21TdHlsZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3RzLWhvbWUtY29tcG9uZW50JywgW1xuICAgICAgICAgICAgLy8gbS5jb21wb25lbnQobWVudSwge3RyYW5zcGFyZW50OiB0cnVlfSksXG4gICAgICAgICAgICBtLmNvbXBvbmVudChzbGlkZXIsIHtcbiAgICAgICAgICAgICAgICBzbGlkZXM6IHNsaWRlcygpLFxuICAgICAgICAgICAgICAgIGVmZmVjdDogJ2ZhZGUnLFxuICAgICAgICAgICAgICAgIHNsaWRlQ2xhc3M6ICdoZXJvLXNsaWRlIHN0YXJ0JyxcbiAgICAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICdoZXJvLWZ1bGwgaGVyby1mdWxsLXNsaWRlJyxcbiAgICAgICAgICAgICAgICBzbGlkZXJUaW1lOiAxMDAwMFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfLm1hcChjdHJsLmNvbGxlY3Rpb25zLCAoY29sbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChwcm9qZWN0Um93LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBjb2xsZWN0aW9uLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICByZWY6IGBob21lXyR7KGNvbGxlY3Rpb24uaGFzaCA9PT0gJ2FsbCcgPyAnc2NvcmUnIDogY29sbGVjdGlvbi5oYXNoKX1gLFxuICAgICAgICAgICAgICAgICAgICBzaG93RnJpZW5kczogY29sbGVjdGlvbi5zaG93RnJpZW5kc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAvLyBtLmNvbXBvbmVudChjb250cmlidXRpb25BY3Rpdml0aWVzKSxcbiAgICAgICAgICAgICghY3RybC5oYXNGQkF1dGggPyBtLmNvbXBvbmVudChVbnNpZ25lZEZyaWVuZEZhY2Vib29rQ29ubmVjdCwge2xhcmdlQmc6IHRydWV9KSA6ICcnKSxcbiAgICAgICAgICAgIG0uY29tcG9uZW50KGJsb2dCYW5uZXIpXG4gICAgICAgICAgICAvLyBtLmNvbXBvbmVudChmb290ZXIsIHtleHBhbmRlZDogdHJ1ZX0pLFxuICAgICAgICAgICAgLy8gbS5jb21wb25lbnQoY29udHJpYnV0aW9uQWN0aXZpdGllcylcbiAgICAgICAgXSk7XG4gICAgICAgICAgICBcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0c0hvbWU7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IGZhY2Vib29rQnV0dG9uIGZyb20gJy4vZmFjZWJvb2stYnV0dG9uJztcblxuY29uc3QgcHJvamVjdFNoYXJlQm94ID0ge1xuICAgIGNvbnRyb2xsZXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwbGF5RW1iZWQ6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSlcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnLnBvcC1zaGFyZScsIHtcbiAgICAgICAgICAgIHN0eWxlOiAnZGlzcGxheTogYmxvY2s7J1xuICAgICAgICB9LCBbXG4gICAgICAgICAgICBtKCcudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0udy1jbGVhcmZpeCcsIFtcbiAgICAgICAgICAgICAgICBtKCdhLmJ0bi5idG4tc21hbGwuYnRuLXRlcmNpYXJ5LmJ0bi1pbmxpbmUudS1yaWdodCcsIHtcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogYXJncy5kaXNwbGF5U2hhcmVCb3gudG9nZ2xlXG4gICAgICAgICAgICAgICAgfSwgJ0ZlY2hhcicpLFxuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTMwJywgJ0NvbXBhcnRpbGhlIGVzdGUgcHJvamV0bycpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy53LXdpZGdldC53LXdpZGdldC10d2l0dGVyLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuc2hhcmUtYmxvY2snLCBbXG4gICAgICAgICAgICAgICAgbSgnaWZyYW1lW2FsbG93dHJhbnNwYXJlbmN5PVwidHJ1ZVwiXVt3aWR0aD1cIjEyMHB4XCJdW2hlaWdodD1cIjIycHhcIl1bZnJhbWVib3JkZXI9XCIwXCJdW3Njcm9sbGluZz1cIm5vXCJdW3NyYz1cIi8vcGxhdGZvcm0udHdpdHRlci5jb20vd2lkZ2V0cy90d2VldF9idXR0b24uOGQwMDdkZGZjMTg0ZTY3NzZiZTc2ZmU5ZTVlNTJkNjkuZW4uaHRtbCNfPTE0NDI0MjU5ODQ5MzYmY291bnQ9aG9yaXpvbnRhbCZkbnQ9ZmFsc2UmaWQ9dHdpdHRlci13aWRnZXQtMSZsYW5nPWVuJm9yaWdpbmFsX3JlZmVyZXI9aHR0cHMlM0ElMkYlMkZ3d3cuY2F0YXJzZS5tZSUyRnB0JTJGJyArIGFyZ3MucHJvamVjdCgpLnBlcm1hbGluayArICcmc2l6ZT1tJnRleHQ9Q29uZmlyYSUyMG8lMjBwcm9qZXRvJTIwJyArIGFyZ3MucHJvamVjdCgpLm5hbWUgKyAnJTIwbm8lMjAlNDBjYXRhcnNlJnR5cGU9c2hhcmUmdXJsPWh0dHBzJTNBJTJGJTJGd3d3LmNhdGFyc2UubWUlMkZwdCUyRicgKyBhcmdzLnByb2plY3QoKS5wZXJtYWxpbmsgKyAnJTNGcmVmJTNEdHdpdHRlciUyNnV0bV9zb3VyY2UlM0R0d2l0dGVyLmNvbSUyNnV0bV9tZWRpdW0lM0Rzb2NpYWwlMjZ1dG1fY2FtcGFpZ24lM0Rwcm9qZWN0X3NoYXJlJnZpYT1jYXRhcnNlXCJdJylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnYS53LWhpZGRlbi1zbWFsbC53aWRnZXQtZW1iZWQudy1oaWRkZW4tdGlueS5mb250c2l6ZS1zbWFsbC5saW5rLWhpZGRlbi5mb250Y29sb3Itc2Vjb25kYXJ5W2hyZWY9XCJqczp2b2lkKDApO1wiXScsIHtcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLmRpc3BsYXlFbWJlZC50b2dnbGVcbiAgICAgICAgICAgIH0sICc8IGVtYmVkID4nKSwgKGN0cmwuZGlzcGxheUVtYmVkKCkgPyBtKCcuZW1iZWQtZXhwYW5kZWQudS1tYXJnaW50b3AtMzAnLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMjAnLCAnSW5zaXJhIHVtIHdpZGdldCBlbSBzZXUgc2l0ZScpLFxuICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXRbdHlwZT1cInRleHRcIl1bdmFsdWU9XCI8aWZyYW1lIGZyYW1lYm9yZGVyPVwiMFwiIGhlaWdodD1cIjMxNHB4XCIgc3JjPVwiaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS9wdC9wcm9qZWN0cy8nICsgYXJncy5wcm9qZWN0KCkuaWQgKyAnL2VtYmVkXCIgd2lkdGg9XCIzMDBweFwiIHNjcm9sbGluZz1cIm5vXCI+PC9pZnJhbWU+XCJdJylcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcuY2FyZC1lbWJlZCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnaWZyYW1lW2ZyYW1lYm9yZGVyPVwiMFwiXVtoZWlnaHQ9XCIzNTBweFwiXVtzcmM9XCIvcHJvamVjdHMvJyArIGFyZ3MucHJvamVjdCgpLmlkICsgJy9lbWJlZFwiXVt3aWR0aD1cIjMwMHB4XCJdW3Njcm9sbGluZz1cIm5vXCJdJylcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSkgOiAnJyksXG4gICAgICAgICAgICBhcmdzLnByb2plY3QoKS5wZXJtYWxpbmsgPyBtLmNvbXBvbmVudChmYWNlYm9va0J1dHRvbiwge1xuICAgICAgICAgICAgICAgIG1vYmlsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1cmw6IGBodHRwczovL3d3dy5jYXRhcnNlLm1lLyR7YXJncy5wcm9qZWN0KCkucGVybWFsaW5rfT9yZWY9ZmFjZWJvb2smdXRtX3NvdXJjZT1mYWNlYm9vay5jb20mdXRtX21lZGl1bT1zb2NpYWwmdXRtX2NhbXBhaWduPXByb2plY3Rfc2hhcmVgXG4gICAgICAgICAgICB9KSA6ICcnLFxuICAgICAgICAgICAgbSgnYS53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bS5idG4uYnRuLW1lZGl1bS5idG4tdHdlZXQudS1tYXJnaW5ib3R0b20tMjBbaHJlZj1cImh0dHA6Ly90d2l0dGVyLmNvbS8/c3RhdHVzPUFjYWJlaSUyMGRlJTIwYXBvaWFyJTIwbyUyMHByb2pldG8lMjAnICsgYXJncy5wcm9qZWN0KCkubmFtZSArICclMjBodHRwczovL3d3dy5jYXRhcnNlLm1lLycgKyBhcmdzLnByb2plY3QoKS5wZXJtYWxpbmsgKyAnJTNGcmVmJTNEdHdpdHRlciUyNnV0bV9zb3VyY2UlM0R0d2l0dGVyLmNvbSUyNnV0bV9tZWRpdW0lM0Rzb2NpYWwlMjZ1dG1fY2FtcGFpZ24lM0Rwcm9qZWN0X3NoYXJlXCJdW3RhcmdldD1cIl9ibGFua1wiXScsIFtcbiAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLXR3aXR0ZXInKSwgJyBUd2VldCdcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnYS53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bS5idG4uYnRuLW1lZGl1bVtkYXRhLWFjdGlvbj1cInNoYXJlL3doYXRzYXBwL3NoYXJlXCJdJywge1xuICAgICAgICAgICAgICAgIGhyZWY6IGB3aGF0c2FwcDovL3NlbmQ/dGV4dD0ke2VuY29kZVVSSUNvbXBvbmVudCgnaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS8nICsgYXJncy5wcm9qZWN0KCkucGVybWFsaW5rICsgJy8/cmVmPXdoYXRzYXBwJnV0bV9zb3VyY2U9d2hhdHNhcHAmdXRtX21lZGl1bT1zb2NpYWwmdXRtX2NhbXBhaWduPXByb2plY3Rfc2hhcmUnKX1gXG4gICAgICAgICAgICB9LFttKCdzcGFuLmZhLmZhLXdoYXRzYXBwJyksICcgV2hhdHNhcHAnXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFNoYXJlQm94O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgYWRkcmVzc1RhZyA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCxcbiAgICAgICAgICBhZGRyZXNzID0gcHJvamVjdCgpLmFkZHJlc3MgfHwge1xuICAgICAgICAgICAgICBzdGF0ZV9hY3JvbnltOiAnJyxcbiAgICAgICAgICAgICAgY2l0eTogJydcbiAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiAhXy5pc051bGwoYWRkcmVzcykgPyBtKGBhLmJ0bi5idG4taW5saW5lLmJ0bi1zbWFsbC5idG4tdHJhbnNwYXJlbnQubGluay1oaWRkZW4tbGlnaHQudS1tYXJnaW5ib3R0b20tMTBbaHJlZj1cIi9wdC9leHBsb3JlP3BnX3NlYXJjaD0ke2FkZHJlc3Muc3RhdGVfYWNyb255bX1cIl1gLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBjYXQ6ICdwcm9qZWN0X3ZpZXcnLFxuICAgICAgICAgICAgICAgICAgICBhY3Q6ICdwcm9qZWN0X2xvY2F0aW9uX2xpbmsnLFxuICAgICAgICAgICAgICAgICAgICBsYmw6IGFkZHJlc3MuY2l0eSArICcgJyArIGFkZHJlc3Muc3RhdGVfYWNyb255bSxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtbWFwLW1hcmtlcicpLCBgICR7YWRkcmVzcy5jaXR5fSwgJHthZGRyZXNzLnN0YXRlX2Fjcm9ueW19YFxuICAgICAgICBdKSA6ICcnO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkZHJlc3NUYWc7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBjYXRlZ29yeVRhZyA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdDtcblxuICAgICAgICByZXR1cm4gcHJvamVjdCA/IG0oYGEuYnRuLmJ0bi1pbmxpbmUuYnRuLXNtYWxsLmJ0bi10cmFuc3BhcmVudC5saW5rLWhpZGRlbi1saWdodFtocmVmPVwiL3B0L2V4cGxvcmUjYnlfY2F0ZWdvcnlfaWQvJHtwcm9qZWN0KCkuY2F0ZWdvcnlfaWR9XCJdYCwge1xuICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtcbiAgICAgICAgICAgICAgY2F0OiAncHJvamVjdF92aWV3JyxcbiAgICAgICAgICAgICAgYWN0OiAncHJvamVjdF9jYXRlZ29yeV9saW5rJyxcbiAgICAgICAgICAgICAgbGJsOiBwcm9qZWN0KCkuY2F0ZWdvcnlfbmFtZSxcbiAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCgpXG4gICAgICAgICAgfSlcbiAgICAgIH0sIFtcbiAgICAgICAgICBtKCdzcGFuLmZhLmZhLXRhZycpLCAnICcsXG4gICAgICAgICAgcHJvamVjdCgpLmNhdGVnb3J5X25hbWVcbiAgICAgIF0pIDogJyc7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2F0ZWdvcnlUYWc7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcHJvamVjdFNoYXJlQm94IGZyb20gJy4vcHJvamVjdC1zaGFyZS1ib3gnO1xuaW1wb3J0IGZhY2Vib29rQnV0dG9uIGZyb20gJy4vZmFjZWJvb2stYnV0dG9uJztcbmltcG9ydCBhZGRyZXNzVGFnIGZyb20gJy4vYWRkcmVzcy10YWcnO1xuaW1wb3J0IGNhdGVnb3J5VGFnIGZyb20gJy4vY2F0ZWdvcnktdGFnJztcblxuY29uc3QgcHJvamVjdEhpZ2hsaWdodCA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcGxheVNoYXJlQm94OiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdDtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3QtaGlnaGxpZ2h0JywgW1xuICAgICAgICAgICAgKHByb2plY3QoKS52aWRlb19lbWJlZF91cmwgPyBtKCcudy1lbWJlZC53LXZpZGVvLnByb2plY3QtdmlkZW8nLCB7XG4gICAgICAgICAgICAgICAgc3R5bGU6ICdtaW4taGVpZ2h0OiAyNDBweDsnXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgbSgnaWZyYW1lLmVtYmVkbHktZW1iZWRbaXRlbXByb3A9XCJ2aWRlb1wiXVtzcmM9XCInICsgcHJvamVjdCgpLnZpZGVvX2VtYmVkX3VybCArICdcIl1bZnJhbWVib3JkZXI9XCIwXCJdW2FsbG93RnVsbFNjcmVlbl0nKVxuICAgICAgICAgICAgXSkgOiBtKCcucHJvamVjdC1pbWFnZScsIHtcbiAgICAgICAgICAgICAgICBzdHlsZTogYGJhY2tncm91bmQtaW1hZ2U6dXJsKCcke3Byb2plY3QoKS5vcmlnaW5hbF9pbWFnZSB8fCBwcm9qZWN0KCkucHJvamVjdF9pbWd9Jyk7YFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgbSgnLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCBbXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRkcmVzc1RhZywge3Byb2plY3Q6IHByb2plY3R9KSxcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChjYXRlZ29yeVRhZywge3Byb2plY3Q6IHByb2plY3R9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcucHJvamVjdC1ibHVyYicsIHByb2plY3QoKS5oZWFkbGluZSksXG4gICAgICAgICAgICBtKCcucHJvamVjdC1zaGFyZS53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JyxcbiAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tMzAudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1pbmxpbmUtYmxvY2suZm9udGNvbG9yLXNlY29uZGFyeS5mb250c2l6ZS1zbWFsbGVyLnUtbWFyZ2lucmlnaHQtMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbXBhcnRpbGhhcjonXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3QoKS5wZXJtYWxpbmsgPyBtLmNvbXBvbmVudChmYWNlYm9va0J1dHRvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS8ke3Byb2plY3QoKS5wZXJtYWxpbmt9P3JlZj1mYWNlYm9vayZ1dG1fc291cmNlPWZhY2Vib29rLmNvbSZ1dG1fbWVkaXVtPXNvY2lhbCZ1dG1fY2FtcGFpZ249cHJvamVjdF9zaGFyZWBcbiAgICAgICAgICAgICAgICAgICAgfSkgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdCgpLnBlcm1hbGluayA/IG0uY29tcG9uZW50KGZhY2Vib29rQnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzZW5nZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGBodHRwczovL3d3dy5jYXRhcnNlLm1lLyR7cHJvamVjdCgpLnBlcm1hbGlua30/cmVmPWZhY2Vib29rJnV0bV9zb3VyY2U9ZmFjZWJvb2suY29tJnV0bV9tZWRpdW09bWVzc2VuZ2VyJnV0bV9jYW1wYWlnbj1wcm9qZWN0X3NoYXJlYFxuICAgICAgICAgICAgICAgICAgICB9KSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBtKCdidXR0b24jbW9yZS1zaGFyZS5idG4uYnRuLWlubGluZS5idG4tbWVkaXVtLmJ0bi10ZXJjaWFyeScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zaXRpb24nOiAnYWxsIDAuNXMgZWFzZSAwcydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLmRpc3BsYXlTaGFyZUJveC50b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ8K3wrfCtycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnIE1haXMnXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAoY3RybC5kaXNwbGF5U2hhcmVCb3goKSA/IG0ocHJvamVjdFNoYXJlQm94LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheVNoYXJlQm94OiBjdHJsLmRpc3BsYXlTaGFyZUJveFxuICAgICAgICAgICAgICAgICAgICB9KSA6ICcnKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RIaWdobGlnaHQ7XG4iLCIvKipcbiAqIHdpbmRvdy5jLlByb2plY3RNb2RlIGNvbXBvbmVudFxuICogQSBzaW1wbGUgY29tcG9uZW50IHRoYXQgZGlzcGxheXMgYSBiYWRnZSB3aXRoIHRoZSBjdXJyZW50IHByb2plY3QgbW9kZVxuICogdG9nZXRoZXIgd2l0aCBhIGRlc2NyaXB0aW9uIG9mIHRoZSBtb2RlLCBzaG93biBpbnNpZGUgYSB0b29sdGlwLlxuICogSXQgcmVjZWl2ZXMgYSBwcm9qZWN0IGFzIHJlc291cmNlXG4gKlxuICogRXhhbXBsZTpcbiAqICB2aWV3OiB7XG4gKiAgICAgIHJldHVybiBtLmNvbXBvbmVudChjLlByb2plY3RNb2RlLCB7cHJvamVjdDogcHJvamVjdH0pXG4gKiAgfVxuICovXG5cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCB0b29sdGlwIGZyb20gJy4vdG9vbHRpcCc7XG5cbmNvbnN0IHByb2plY3RNb2RlID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0KCksXG4gICAgICAgICAgICBtb2RlID0gcHJvamVjdC5tb2RlLFxuICAgICAgICAgICAgbW9kZUltZ1NyYyA9IChtb2RlID09PSAnYW9uJykgPyAnL2Fzc2V0cy9hb24tYmFkZ2UucG5nJyA6ICcvYXNzZXRzL2ZsZXgtYmFkZ2UucG5nJyxcbiAgICAgICAgICAgIG1vZGVUaXRsZSA9IChtb2RlID09PSAnYW9uJykgPyAnQ2FtcGFuaGEgVHVkby1vdS1uYWRhICcgOiAnQ2FtcGFuaGEgRmxleMOtdmVsICcsXG4gICAgICAgICAgICBnb2FsID0gKF8uaXNOdWxsKHByb2plY3QuZ29hbCkgPyAnbsOjbyBkZWZpbmlkYScgOiBoLmZvcm1hdE51bWJlcihwcm9qZWN0LmdvYWwpKSxcbiAgICAgICAgICAgIGJ1aWxkVG9vbHRpcCA9IChlbCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudCh0b29sdGlwLCB7XG4gICAgICAgICAgICAgICAgICAgIGVsOiBlbCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogKG1vZGUgPT09ICdhb24nKSA/IGBTb21lbnRlIHJlY2ViZXLDoSBvcyByZWN1cnNvcyBzZSBhdGluZ2lyIG91IHVsdHJhcGFzc2FyIGEgbWV0YSBhdMOpIG8gZGlhICR7aC5tb21lbnRpZnkocHJvamVjdC56b25lX2V4cGlyZXNfYXQsICdERC9NTS9ZWVlZJyl9LmAgOiAnTyByZWFsaXphZG9yIHJlY2ViZXLDoSB0b2RvcyBvcyByZWN1cnNvcyBxdWFuZG8gZW5jZXJyYXIgYSBjYW1wYW5oYSwgbWVzbW8gcXVlIG7Do28gdGVuaGEgYXRpbmdpZG8gZXN0YSBtZXRhLicsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyODBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG0oYCMke21vZGV9Lnctcm93YCwgW1xuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtc21hbGwtMi53LWNvbC10aW55LTInLCBbXG4gICAgICAgICAgICAgICAgIV8uaXNFbXB0eShwcm9qZWN0KSA/IG0oYGltZ1tzcmM9XCIke21vZGVJbWdTcmN9XCJdW3dpZHRoPSczMCddYCkgOiAnJ1xuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTAudy1jb2wtc21hbGwtMTAudy1jb2wtdGlueS0xMCcsIFtcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkJywgJ01ldGEgUiQgJyArIGguc2VsZk9yRW1wdHkoZ29hbCwgJy0tJykpLFxuICAgICAgICAgICAgICAgIG0oJy53LWlubGluZS1ibG9jay5mb250c2l6ZS1zbWFsbGVzdC5fdy1pbmxpbmUtYmxvY2snLCBbXG4gICAgICAgICAgICAgICAgICAgICFfLmlzRW1wdHkocHJvamVjdCkgPyBtb2RlVGl0bGUgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRUb29sdGlwKCdzcGFuLnctaW5saW5lLWJsb2NrLnRvb2x0aXAtd3JhcHBlci5mYS5mYS1xdWVzdGlvbi1jaXJjbGUuZm9udGNvbG9yLXNlY29uZGFyeScpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RNb2RlO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Qcm9qZWN0UmVtaW5kZXIgY29tcG9uZW50XG4gKiBBIGNvbXBvbmVudCB0aGF0IGRpc3BsYXlzIGEgY2xpY2thYmxlIHByb2plY3QgcmVtaW5kZXIgZWxlbWVudC5cbiAqIFRoZSBjb21wb25lbnQgY2FuIGJlIG9mIHR3byB0eXBlczogYSAnbGluaycgb3IgYSAnYnV0dG9uJ1xuICpcbiAqIEV4YW1wbGU6XG4gKiAgdmlldzoge1xuICogICAgICByZXR1cm4gbS5jb21wb25lbnQoYy5Qcm9qZWN0UmVtaW5kZXIsIHtwcm9qZWN0OiBwcm9qZWN0LCB0eXBlOiAnYnV0dG9uJ30pXG4gKiAgfVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHBvcE5vdGlmaWNhdGlvbiBmcm9tICcuL3BvcC1ub3RpZmljYXRpb24nO1xuXG5jb25zdCBwcm9qZWN0UmVtaW5kZXIgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBsID0gbS5wcm9wKGZhbHNlKTtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCxcbiAgICAgICAgICAgIGZpbHRlclZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgICAgICAgICAgcHJvamVjdF9pZDogJ2VxJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdG9yZVJlbWluZGVyTmFtZSA9ICdyZW1pbmRfJyArIHByb2plY3QoKS5pZCxcbiAgICAgICAgICAgIHBvcE5vdGlmaWNhdGlvbiA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBzdWJtaXRSZW1pbmRlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWguZ2V0VXNlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIGguc3RvcmVBY3Rpb24oc3RvcmVSZW1pbmRlck5hbWUsIHN1Ym1pdFJlbWluZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgubmF2aWdhdGVUb0RldmlzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbG9hZGVyT3B0cyA9IHByb2plY3QoKS5pbl9yZW1pbmRlciA/IG1vZGVscy5wcm9qZWN0UmVtaW5kZXIuZGVsZXRlT3B0aW9ucyhmaWx0ZXJWTS5wYXJhbWV0ZXJzKCkpIDogbW9kZWxzLnByb2plY3RSZW1pbmRlci5wb3N0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6IHByb2plY3QoKS5pZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGwgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKGxvYWRlck9wdHMpO1xuXG4gICAgICAgICAgICAgICAgbC5sb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3QoKS5pbl9yZW1pbmRlciA9ICFwcm9qZWN0KCkuaW5fcmVtaW5kZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2plY3QoKS5pbl9yZW1pbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wTm90aWZpY2F0aW9uKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wTm90aWZpY2F0aW9uKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3BOb3RpZmljYXRpb24oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGguY2FsbFN0b3JlZEFjdGlvbihzdG9yZVJlbWluZGVyTmFtZSwgc3VibWl0UmVtaW5kZXIpO1xuICAgICAgICBmaWx0ZXJWTS5wcm9qZWN0X2lkKHByb2plY3QoKS5pZCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGw6IGwsXG4gICAgICAgICAgICBzdWJtaXRSZW1pbmRlcjogc3VibWl0UmVtaW5kZXIsXG4gICAgICAgICAgICBwb3BOb3RpZmljYXRpb246IHBvcE5vdGlmaWNhdGlvblxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IG1haW5DbGFzcyA9IChhcmdzLnR5cGUgPT09ICdidXR0b24nKSA/ICcnIDogJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTMwJyxcbiAgICAgICAgICAgIGJ1dHRvbkNsYXNzID0gKGFyZ3MudHlwZSA9PT0gJ2J1dHRvbicpID8gJ3ctYnV0dG9uIGJ0biBidG4tdGVyY2lhcnkgYnRuLW5vLWJvcmRlcicgOiAnYnRuLWxpbmsgbGluay1oaWRkZW4gZm9udHNpemUtc21hbGwnLFxuICAgICAgICAgICAgaGlkZVRleHRPbk1vYmlsZSA9IGFyZ3MuaGlkZVRleHRPbk1vYmlsZSB8fCBmYWxzZSxcbiAgICAgICAgICAgIHByb2plY3QgPSBhcmdzLnByb2plY3Q7XG5cbiAgICAgICAgcmV0dXJuIG0oYCNwcm9qZWN0LXJlbWluZGVyJHttYWluQ2xhc3N9YCwgW1xuICAgICAgICAgICAgbShgYnV0dG9uW2NsYXNzPVwiJHtidXR0b25DbGFzc30gJHsocHJvamVjdCgpLmluX3JlbWluZGVyID8gJ2xpbmstaGlkZGVuLXN1Y2Nlc3MnIDogJ2ZvbnRjb2xvci1zZWNvbmRhcnknKX0gZm9udHdlaWdodC1zZW1pYm9sZFwiXWAsIHtcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2Zsb2F0aW5ncmVtaW5kZXJfY2xpY2snLCBwcm9qZWN0OiBwcm9qZWN0KCl9LCBjdHJsLnN1Ym1pdFJlbWluZGVyKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIChjdHJsLmwoKSA/ICdhZ3VhcmRlIC4uLicgOiBtKCdzcGFuLmZhLmZhLWNsb2NrLW8nLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oYHNwYW4ke2hpZGVUZXh0T25Nb2JpbGUgPyAnLnctaGlkZGVuLW1lZGl1bScgOiAnJ31gLCBwcm9qZWN0KCkuaW5fcmVtaW5kZXIgPyAnIExlbWJyZXRlIGF0aXZvJyA6ICcgTGVtYnJhci1tZScpXG4gICAgICAgICAgICAgICAgXSkpXG4gICAgICAgICAgICBdKSwgKGN0cmwucG9wTm90aWZpY2F0aW9uKCkgPyBtLmNvbXBvbmVudChwb3BOb3RpZmljYXRpb24sIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnT2shIFZhbW9zIHRlIG1hbmRhciB1bSBsZW1icmV0ZSBwb3IgZS1tYWlsIDQ4IGhvcmFzIGFudGVzIGRvIGZpbSBkYSBjYW1wYW5oYSdcbiAgICAgICAgICAgIH0pIDogJycpXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RSZW1pbmRlcjtcbiIsIi8qKlxuICogd2luZG93LmMuT3duZXJNZXNzYWdlQ29udGVudCBjb21wb25lbnRcbiAqIFJlbmRlciBwcm9qZWN0IG93bmVyIGNvbnRhY3QgZm9ybVxuICpcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5jb25zdCBvd25lck1lc3NhZ2VDb250ZW50ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgbCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBzZW5kU3VjY2VzcyA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBzdWJtaXREaXNhYmxlZCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICAvL3NldHMgZGVmYXVsdCB2YWx1ZXMgd2hlbiB1c2VyIGlzIG5vdCBsb2dnZWQgaW5cbiAgICAgICAgICAgIHVzZXIgPSBoLmdldFVzZXIoKSB8fCB7bmFtZTogJycsIGVtYWlsOiAnJ30sXG4gICAgICAgICAgICBmcm9tX25hbWUgPSBtLnByb3AodXNlci5uYW1lKSxcbiAgICAgICAgICAgIGZyb21fZW1haWwgPSBtLnByb3AodXNlci5lbWFpbCksXG4gICAgICAgICAgICBjb250ZW50ID0gbS5wcm9wKCcnKTtcblxuICAgICAgICBjb25zdCBzZW5kTWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChsKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJtaXREaXNhYmxlZCh0cnVlKTtcblxuICAgICAgICAgICAgbGV0IGxvYWRlck9wdHMgPSBtb2RlbHMuZGlyZWN0TWVzc2FnZS5wb3N0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgZnJvbV9uYW1lOiBmcm9tX25hbWUoKSxcbiAgICAgICAgICAgICAgICBmcm9tX2VtYWlsOiBmcm9tX2VtYWlsKCksXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogaC5nZXRVc2VyKCkudXNlcl9pZCxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50KCksXG4gICAgICAgICAgICAgICAgcHJvamVjdF9pZDogaC5nZXRDdXJyZW50UHJvamVjdCgpLnByb2plY3RfaWQsXG4gICAgICAgICAgICAgICAgdG9fdXNlcl9pZDogaC5nZXRDdXJyZW50UHJvamVjdCgpLnByb2plY3RfdXNlcl9pZFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGwgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKGxvYWRlck9wdHMpO1xuXG4gICAgICAgICAgICBsLmxvYWQoKS50aGVuKHNlbmRTdWNjZXNzKHRydWUpKTtcblxuICAgICAgICAgICAgc3VibWl0RGlzYWJsZWQoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZW5kTWVzc2FnZTogc2VuZE1lc3NhZ2UsXG4gICAgICAgICAgICBzdWJtaXREaXNhYmxlZDogc3VibWl0RGlzYWJsZWQsXG4gICAgICAgICAgICBzZW5kU3VjY2Vzczogc2VuZFN1Y2Nlc3MsXG4gICAgICAgICAgICB1c2VyRGV0YWlsczogYXJncyxcbiAgICAgICAgICAgIGZyb21fbmFtZTogZnJvbV9uYW1lLFxuICAgICAgICAgICAgZnJvbV9lbWFpbDogZnJvbV9lbWFpbCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgICAgICBsOiBsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3Qgc3VjY2Vzc01lc3NhZ2UgPSBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcuZmEuZmEtY2hlY2stY2lyY2xlLmZhLTV4LnRleHQtc3VjY2Vzcy51LW1hcmdpbmJvdHRvbS00MCcpLFxuICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtbGFyZ2UnLCBgU3VhIG1lbnNhZ2VtIGZvaSBlbnZpYWRhIGNvbSBzdWNlc3NvIHBhcmEgJHtjdHJsLnVzZXJEZXRhaWxzKCkubmFtZX0uIFZvY8OqIHZhaSByZWNlYmVyIHVtYSBjw7NwaWEgbm8gc2V1IGVtYWlsIGUgcG9kZSBzZWd1aXIgYSBjb252ZXJzYSBwb3IgbMOhIWApXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGNvbnRhY3RGb3JtID0gW1xuICAgICAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctY29udGVudCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Zvcm0nLCB7b25zdWJtaXQ6IGgudmFsaWRhdGUoKS5zdWJtaXQoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogY3RybC5mcm9tX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGU6ICd0ZXh0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wOiBjdHJsLmZyb21fZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGU6ICdlbWFpbCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogY3RybC5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlOiAndGV4dCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdLCBjdHJsLnNlbmRNZXNzYWdlKX0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02Lnctc3ViLWNvbCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZvbnRzaXplLXNtYWxsZXInLCAnU2V1IG5vbWUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGlucHV0LnctaW5wdXQudGV4dC1maWVsZFt2YWx1ZT0nJHtjdHJsLmZyb21fbmFtZSgpfSddW3R5cGU9J3RleHQnXVtyZXF1aXJlZD0ncmVxdWlyZWQnXWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLmZyb21fbmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGgudmFsaWRhdGUoKS5oYXNFcnJvcihjdHJsLmZyb21fbmFtZSkgPyAnZXJyb3InIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZvbnRzaXplLXNtYWxsZXInLCAnU2V1IGVtYWlsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBpbnB1dC53LWlucHV0LnRleHQtZmllbGRbdmFsdWU9JyR7Y3RybC5mcm9tX2VtYWlsKCl9J11bdHlwZT0ndGV4dCddW3JlcXVpcmVkPSdyZXF1aXJlZCddYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuZnJvbV9lbWFpbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGgudmFsaWRhdGUoKS5oYXNFcnJvcihjdHJsLmZyb21fZW1haWwpID8gJ2Vycm9yJyA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsJywgJ01lbnNhZ2VtJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgndGV4dGFyZWEudy1pbnB1dC50ZXh0LWZpZWxkLmhlaWdodC1zbWFsbFtyZXF1aXJlZD1cXCdyZXF1aXJlZFxcJ10nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuY29udGVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBoLnZhbGlkYXRlKCkuaGFzRXJyb3IoY3RybC5jb250ZW50KSA/ICdlcnJvcicgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0xMC5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3ItdGVyY2lhcnknLCAnVm9jw6ogcmVjZWJlcsOhIHVtYSBjw7NwaWEgZGVzdGEgbWVuc2FnZW0gZW0gc2V1IGVtYWlsLicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIGgudmFsaWRhdGlvbkVycm9ycygpLmxlbmd0aCA/IF8ubWFwKGgudmFsaWRhdGlvbkVycm9ycygpLCBlcnJvcnMgPT4gbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC50ZXh0LWVycm9yJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1leGNsYW1hdGlvbi10cmlhbmdsZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCAke2Vycm9ycy5tZXNzYWdlfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdicicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLW5hdi1ib3R0b20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtcHVzaC0zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhY3RybC5sKCkgPyBtKCdpbnB1dC53LWJ1dHRvbi5idG4uYnRuLWxhcmdlW3R5cGU9XCJzdWJtaXRcIl1bdmFsdWU9XCJFbnZpYXIgbWVuc2FnZW1cIl0nLCB7ZGlzYWJsZWQ6IGN0cmwuc3VibWl0RGlzYWJsZWQoKX0pIDogaC5sb2FkZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgIHJldHVybiBtKCdkaXYnLCBbXG4gICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWhlYWRlcicsXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXInLCAnRW52aWFyIG1lbnNhZ2VtJylcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBjdHJsLnNlbmRTdWNjZXNzKCkgPyBzdWNjZXNzTWVzc2FnZSA6IGNvbnRhY3RGb3JtXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG93bmVyTWVzc2FnZUNvbnRlbnQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgb3duZXJNZXNzYWdlQ29udGVudCBmcm9tICcuL293bmVyLW1lc3NhZ2UtY29udGVudCc7XG5pbXBvcnQgbW9kYWxCb3ggZnJvbSAnLi9tb2RhbC1ib3gnO1xuXG5jb25zdCBwcm9qZWN0VXNlckNhcmQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIHJldHVybiB7ZGlzcGxheU1vZGFsOiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0O1xuICAgICAgICBjb25zdCBjb250YWN0TW9kYWxDID0gW293bmVyTWVzc2FnZUNvbnRlbnQsIGFyZ3MudXNlckRldGFpbHNdO1xuICAgICAgICBjb25zdCB1c2VyRGV0YWlsID0gYXJncy51c2VyRGV0YWlscygpO1xuXG4gICAgICAgIHJldHVybiBtKCcjdXNlci1jYXJkJywgIXVzZXJEZXRhaWwgPyAnY2FycmVnYW5kby4uLicgOiBtKCcudS1tYXJnaW5ib3R0b20tMzAudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgW1xuICAgICAgICAgICAgICAgIChjdHJsLmRpc3BsYXlNb2RhbCgpID8gbS5jb21wb25lbnQobW9kYWxCb3gsIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheU1vZGFsOiBjdHJsLmRpc3BsYXlNb2RhbCxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGFjdE1vZGFsQ1xuICAgICAgICAgICAgICAgIH0pIDogJycpLFxuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudGh1bWIudS1tYXJnaW5ib3R0b20tMzAudS1yb3VuZFt3aWR0aD1cIjEwMFwiXVtpdGVtcHJvcD1cImltYWdlXCJdW3NyYz1cIicgKyB1c2VyRGV0YWlsLnByb2ZpbGVfaW1nX3RodW1ibmFpbCArICdcIl0nKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwubGluay1oaWRkZW4uZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMC5saW5laGVpZ2h0LXRpZ2h0W2l0ZW1wcm9wPVwibmFtZVwiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuW2hyZWY9XCIvdXNlcnMvJyArIHVzZXJEZXRhaWwuaWQgKyAnXCJdJyx7b25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jcmVhdG9yX2xpbmsnLGxibDogdXNlckRldGFpbC5pZCxwcm9qZWN0OiBwcm9qZWN0KCl9KX0sIHVzZXJEZXRhaWwubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgucGx1cmFsaXplKHVzZXJEZXRhaWwudG90YWxfcHVibGlzaGVkX3Byb2plY3RzLCAnIGNyaWFkbycsICcgY3JpYWRvcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOyZuYnNwO3wmbmJzcDsmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLnBsdXJhbGl6ZSh1c2VyRGV0YWlsLnRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzLCAnIGFwb2lhZG8nLCAnIGFwb2lhZG9zJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgndWwudy1oaWRkZW4tdGlueS53LWhpZGRlbi1zbWFsbC53LWxpc3QtdW5zdHlsZWQuZm9udHNpemUtc21hbGxlci5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2ludG9wLTIwLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICghXy5pc0VtcHR5KHVzZXJEZXRhaWwuZmFjZWJvb2tfbGluaykgPyBtKCdsaScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWhpZGRlbltpdGVtcHJvcD1cInVybFwiXVtocmVmPVwiJyArIHVzZXJEZXRhaWwuZmFjZWJvb2tfbGluayArICdcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJyx7b25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jcmVhdG9yX2ZiJyxsYmw6IHVzZXJEZXRhaWwuZmFjZWJvb2tfbGluayxwcm9qZWN0OiBwcm9qZWN0KCl9KX0sICdQZXJmaWwgbm8gRmFjZWJvb2snKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpLCAoIV8uaXNFbXB0eSh1c2VyRGV0YWlsLnR3aXR0ZXJfdXNlcm5hbWUpID8gbSgnbGknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW5baXRlbXByb3A9XCJ1cmxcIl1baHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vJyArIHVzZXJEZXRhaWwudHdpdHRlcl91c2VybmFtZSArICdcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJyx7b25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jcmVhdG9yX3R3aXR0ZXInLGxibDogdXNlckRldGFpbC50d2l0dGVyX3VzZXJuYW1lLHByb2plY3Q6IHByb2plY3QoKX0pfSwgJ1BlcmZpbCBubyBUd2l0dGVyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcCh1c2VyRGV0YWlsLmxpbmtzLCAobGluaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyc2VkTGluayA9IGgucGFyc2VVcmwobGluayk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICghXy5pc0VtcHR5KHBhcnNlZExpbmsuaG9zdG5hbWUpID8gbSgnbGknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuW2l0ZW1wcm9wPVwidXJsXCJdW2hyZWY9XCInICsgbGluayArICdcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJyx7b25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jcmVhdG9yX290aGVybGlua3MnLGxibDogbGluayxwcm9qZWN0OiBwcm9qZWN0KCl9KX0sIHBhcnNlZExpbmsuaG9zdG5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICghXy5pc0VtcHR5KHVzZXJEZXRhaWwpID8gW20oJ2Eudy1idXR0b24uYnRuLmJ0bi10ZXJjaWFyeS5idG4tc21hbGwuYnRuLWlubGluZVtocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddJyx7b25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jcmVhdG9yX3NlbmRtc2cnLGxibDogdXNlckRldGFpbC5pZCxwcm9qZWN0OiBwcm9qZWN0KCl9LCBjdHJsLmRpc3BsYXlNb2RhbC50b2dnbGUpfSwgJ0VudmlhciBtZW5zYWdlbScpXSA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHJvamVjdCgpLmlzX2FkbWluX3JvbGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsIHVzZXJEZXRhaWwuZW1haWwpIDogJydcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RVc2VyQ2FyZDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RNb2RlIGZyb20gJy4vcHJvamVjdC1tb2RlJztcbmltcG9ydCBwcm9qZWN0UmVtaW5kZXIgZnJvbSAnLi9wcm9qZWN0LXJlbWluZGVyJztcbmltcG9ydCBwcm9qZWN0VXNlckNhcmQgZnJvbSAnLi9wcm9qZWN0LXVzZXItY2FyZCc7XG5pbXBvcnQgcHJvamVjdFNoYXJlQm94IGZyb20gJy4vcHJvamVjdC1zaGFyZS1ib3gnO1xuaW1wb3J0IGFkZHJlc3NUYWcgZnJvbSAnLi9hZGRyZXNzLXRhZyc7XG5pbXBvcnQgY2F0ZWdvcnlUYWcgZnJvbSAnLi9jYXRlZ29yeS10YWcnO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5wcm9qZWN0X3NpZGViYXInKTtcblxuY29uc3QgcHJvamVjdFNpZGViYXIgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QsXG4gICAgICAgICAgICBhbmltYXRlUHJvZ3Jlc3MgPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFuaW1hdGlvbiwgcHJvZ3Jlc3MgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxlZGdlZCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cmlidXRvcnMgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxlZGdlZEluY3JlbWVudCA9IHByb2plY3QoKS5wbGVkZ2VkIC8gcHJvamVjdCgpLnByb2dyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzSW5jcmVtZW50ID0gcHJvamVjdCgpLnRvdGFsX2NvbnRyaWJ1dG9ycyAvIHByb2plY3QoKS5wcm9ncmVzcztcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzc0JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzc0JhcicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxlZGdlZEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsZWRnZWQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9yc0VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRyaWJ1dG9ycycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24gPSBzZXRJbnRlcnZhbChpbmNyZW1lbnRQcm9ncmVzcywgMjgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudFByb2dyZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzcyA8PSBwYXJzZUludChwcm9qZWN0KCkucHJvZ3Jlc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gYCR7cHJvZ3Jlc3N9JWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsZWRnZWRFbC5pbm5lclRleHQgPSBgUiQgJHtoLmZvcm1hdE51bWJlcihwbGVkZ2VkKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmlidXRvcnNFbC5pbm5lclRleHQgPSBgJHtwYXJzZUludChjb250cmlidXRvcnMpfSBwZXNzb2FzYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5uZXJUZXh0ID0gYCR7cHJvZ3Jlc3N9JWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsZWRnZWQgPSBwbGVkZ2VkICsgcGxlZGdlZEluY3JlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzID0gY29udHJpYnV0b3JzICsgY29udHJpYnV0b3JzSW5jcmVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyA9IHByb2dyZXNzICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTgwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYW5pbWF0ZVByb2dyZXNzOiBhbmltYXRlUHJvZ3Jlc3MsXG4gICAgICAgICAgICBkaXNwbGF5U2hhcmVCb3g6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSlcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0LFxuICAgICAgICAgICAgZWxhcHNlZCA9IHByb2plY3QoKS5lbGFwc2VkX3RpbWUsXG4gICAgICAgICAgICByZW1haW5pbmcgPSBwcm9qZWN0KCkucmVtYWluaW5nX3RpbWUsXG4gICAgICAgICAgICBkaXNwbGF5Q2FyZENsYXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ3dhaXRpbmdfZnVuZHMnOiAnY2FyZC13YWl0aW5nJyxcbiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3NmdWwnOiAnY2FyZC1zdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZhaWxlZCc6ICdjYXJkLWVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgJ2RyYWZ0JzogJ2NhcmQtZGFyaycsXG4gICAgICAgICAgICAgICAgICAgICdpbl9hbmFseXNpcyc6ICdjYXJkLWRhcmsnLFxuICAgICAgICAgICAgICAgICAgICAnYXBwcm92ZWQnOiAnY2FyZC1kYXJrJ1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKHN0YXRlc1twcm9qZWN0KCkuc3RhdGVdID8gJ2NhcmQgdS1yYWRpdXMgemluZGV4LTEwICcgKyBzdGF0ZXNbcHJvamVjdCgpLnN0YXRlXSA6ICcnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNwbGF5U3RhdHVzVGV4dCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICdhcHByb3ZlZCc6IEkxOG4udCgnZGlzcGxheV9zdGF0dXMuYXBwcm92ZWQnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICdvbmxpbmUnOiBoLmV4aXN0eShwcm9qZWN0KCkuem9uZV9leHBpcmVzX2F0KSAmJiBwcm9qZWN0KCkub3Blbl9mb3JfY29udHJpYnV0aW9ucyA/IEkxOG4udCgnZGlzcGxheV9zdGF0dXMub25saW5lJywgSTE4blNjb3BlKHtkYXRlOiBoLm1vbWVudGlmeShwcm9qZWN0KCkuem9uZV9leHBpcmVzX2F0KX0pKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAnZmFpbGVkJzogSTE4bi50KCdkaXNwbGF5X3N0YXR1cy5mYWlsZWQnLCBJMThuU2NvcGUoe2RhdGU6IGgubW9tZW50aWZ5KHByb2plY3QoKS56b25lX2V4cGlyZXNfYXQpLCBnb2FsOiBwcm9qZWN0KCkuZ29hbH0pKSxcbiAgICAgICAgICAgICAgICAgICAgJ3JlamVjdGVkJzogSTE4bi50KCdkaXNwbGF5X3N0YXR1cy5yZWplY3RlZCcsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgJ2luX2FuYWx5c2lzJzogSTE4bi50KCdkaXNwbGF5X3N0YXR1cy5pbl9hbmFseXNpcycsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3NmdWwnOiBJMThuLnQoJ2Rpc3BsYXlfc3RhdHVzLnN1Y2Nlc3NmdWwnLCBJMThuU2NvcGUoe2RhdGU6IGgubW9tZW50aWZ5KHByb2plY3QoKS56b25lX2V4cGlyZXNfYXQpfSkpLFxuICAgICAgICAgICAgICAgICAgICAnd2FpdGluZ19mdW5kcyc6IEkxOG4udCgnZGlzcGxheV9zdGF0dXMud2FpdGluZ19mdW5kcycsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgJ2RyYWZ0JzogSTE4bi50KCdkaXNwbGF5X3N0YXR1cy5kcmFmdCcsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVzW3Byb2plY3QoKS5zdGF0ZV07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBtKCcjcHJvamVjdC1zaWRlYmFyLmFzaWRlJywgW1xuICAgICAgICAgICAgbSgnLnByb2plY3Qtc3RhdHMnLCBbXG4gICAgICAgICAgICAgICAgbSgnLnByb2plY3Qtc3RhdHMtaW5uZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5wcm9qZWN0LXN0YXRzLWluZm8nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnI3BsZWRnZWQuZm9udHNpemUtbGFyZ2VzdC5mb250d2VpZ2h0LXNlbWlib2xkLnUtdGV4dC1jZW50ZXItc21hbGwtb25seScsIGBSJCAke3Byb2plY3QoKS5wbGVkZ2VkID8gaC5mb3JtYXROdW1iZXIocHJvamVjdCgpLnBsZWRnZWQpIDogJzAnfWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC51LXRleHQtY2VudGVyLXNtYWxsLW9ubHknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnY29udHJpYnV0b3JzX2NhbGwnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4jY29udHJpYnV0b3JzLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBJMThuLnQoJ2NvbnRyaWJ1dG9yc19jb3VudCcsIEkxOG5TY29wZSh7Y291bnQ6IHByb2plY3QoKS50b3RhbF9jb250cmlidXRvcnN9KSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIXByb2plY3QoKS5leHBpcmVzX2F0ICYmIGVsYXBzZWQpID8gJyBlbSAnICsgSTE4bi50KCdkYXRldGltZS5kaXN0YW5jZV9pbl93b3Jkcy54XycgKyBlbGFwc2VkLnVuaXQsIHtjb3VudDogZWxhcHNlZC50b3RhbH0sIEkxOG5TY29wZSgpKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLm1ldGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJyNwcm9ncmVzc0Jhci5tZXRlci1maWxsJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGAke3Byb2plY3QoKS5wcm9ncmVzc30lYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2ludG9wLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01LnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udHdlaWdodC1zZW1pYm9sZC5saW5laGVpZ2h0LXRpZ2h0ZXInLCBgJHtwcm9qZWN0KCkucHJvZ3Jlc3MgPyBwYXJzZUludChwcm9qZWN0KCkucHJvZ3Jlc3MpIDogJzAnfSVgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC03LnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02LnctY2xlYXJmaXgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXJpZ2h0LmZvbnRzaXplLXNtYWxsLmxpbmVoZWlnaHQtdGlnaHRlcicsIHJlbWFpbmluZyAmJiByZW1haW5pbmcudG90YWwgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCByZW1haW5pbmcudG90YWwpLCBJMThuLnQoJ3JlbWFpbmluZ190aW1lLicgKyByZW1haW5pbmcudW5pdCwgSTE4blNjb3BlKHtjb3VudDogcmVtYWluaW5nLnRvdGFsfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3RNb2RlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICwgKHByb2plY3QoKS5vcGVuX2Zvcl9jb250cmlidXRpb25zID8gbSgnYSNjb250cmlidXRlX3Byb2plY3RfZm9ybS5idG4uYnRuLWxhcmdlLnUtbWFyZ2luYm90dG9tLTIwW2hyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCJdJyx7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdjb250cmlidXRpb25fY3JlYXRlJyxhY3Q6ICdjb250cmlidXRpb25fYnV0dG9uX2NsaWNrJywgcHJvamVjdDogcHJvamVjdCgpfSwgKCkgPT4gbS5yb3V0ZShgL3Byb2plY3RzLyR7cHJvamVjdCgpLnByb2plY3RfaWR9L2NvbnRyaWJ1dGlvbmApKVxuICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAnY29udHJpYnV0aW9uX2NyZWF0ZScsYWN0OiAnY29udHJpYnV0aW9uX2J1dHRvbl9jbGljaycsIHByb2plY3Q6IHByb2plY3QoKX0sICgpID0+IGgubmF2aWdhdGVUbyhgL3Byb2plY3RzLyR7cHJvamVjdCgpLnByb2plY3RfaWR9L2NvbnRyaWJ1dGlvbnMvbmV3YCkpXG5cbiAgICAgICAgICAgICAgICB9LCBJMThuLnQoJ3N1Ym1pdCcsIEkxOG5TY29wZSgpKSkgOiAnJylcbiAgICAgICAgICAgICAgICAsICgocHJvamVjdCgpLm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMpID8gbS5jb21wb25lbnQocHJvamVjdFJlbWluZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5rJ1xuICAgICAgICAgICAgICAgIH0pIDogJycpLFxuICAgICAgICAgICAgICAgIG0oJ2RpdltjbGFzcz1cImZvbnRzaXplLXNtYWxsZXIgdS1tYXJnaW5ib3R0b20tMzAgJyArIGRpc3BsYXlDYXJkQ2xhc3MoKSArICdcIl0nLCBkaXNwbGF5U3RhdHVzVGV4dCgpKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcucHJvamVjdC1zaGFyZS53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bScsIFtcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhZGRyZXNzVGFnLCB7cHJvamVjdDogcHJvamVjdH0pLFxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGNhdGVnb3J5VGFnLCB7cHJvamVjdDogcHJvamVjdH0pLFxuICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0zMC51LXRleHQtY2VudGVyLXNtYWxsLW9ubHknLCBtKCdidXR0b24uYnRuLmJ0bi1pbmxpbmUuYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwuZGlzcGxheVNoYXJlQm94LnRvZ2dsZVxuICAgICAgICAgICAgICAgIH0sICdDb21wYXJ0aWxoYXIgZXN0ZSBwcm9qZXRvJykpLFxuICAgICAgICAgICAgICAgIGN0cmwuZGlzcGxheVNoYXJlQm94KCkgPyBtKHByb2plY3RTaGFyZUJveCwge1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5U2hhcmVCb3g6IGN0cmwuZGlzcGxheVNoYXJlQm94XG4gICAgICAgICAgICAgICAgfSkgOiAnJ1xuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudXNlci1jJywgbS5jb21wb25lbnQocHJvamVjdFVzZXJDYXJkLCB7XG4gICAgICAgICAgICAgICAgdXNlckRldGFpbHM6IGFyZ3MudXNlckRldGFpbHMsXG4gICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdFxuICAgICAgICAgICAgfSkpXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RTaWRlYmFyO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHBheW1lbnRTdGF0dXMgZnJvbSAnLi9wYXltZW50LXN0YXR1cyc7XG5cbmNvbnN0IHVzZXJDb250cmlidXRpb25EZXRhaWwgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvbiA9IGFyZ3MuY29udHJpYnV0aW9uLFxuICAgICAgICAgICAgcmV3YXJkRGV0YWlscyA9IGFyZ3MucmV3YXJkRGV0YWlscyxcbiAgICAgICAgICAgIGNob3NlblJld2FyZCA9IF8uZmluZFdoZXJlKHJld2FyZERldGFpbHMoKSwge2lkOiBjb250cmlidXRpb24ucmV3YXJkX2lkfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbjogY29udHJpYnV0aW9uLFxuICAgICAgICAgICAgY2hvc2VuUmV3YXJkOiBjaG9zZW5SZXdhcmRcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvbiA9IGFyZ3MuY29udHJpYnV0aW9uO1xuXG4gICAgICAgIHJldHVybiBtKCcudXNlci1jb250cmlidXRpb24tZGV0YWlsJywgW1xuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmxpbmVoZWlnaHQtdGlnaHQuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgJ1ZhbG9yIGRvIGFwb2lvOidcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlJyxcbiAgICAgICAgICAgICAgICAgICAgICBgUiQke2NvbnRyaWJ1dGlvbi52YWx1ZX1gXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLFxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHBheW1lbnRTdGF0dXMsIHtpdGVtOiBjb250cmlidXRpb259KVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JyxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMTAnLFxuICAgICAgICAgICAgICAgICAgICAgICdSZWNvbXBlbnNhOidcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmxpbmVoZWlnaHQtdGlnaHQudS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgIGN0cmwuY2hvc2VuUmV3YXJkLmRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3NlcicsXG4gICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0VzdGltYXRpdmEgZGUgZW50cmVnYTogJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBoLm1vbWVudGlmeShjdHJsLmNob3NlblJld2FyZC5kZWxpdmVyX2F0LCAnTU1NL1lZWVknKVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIClcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlckNvbnRyaWJ1dGlvbkRldGFpbDtcbiIsImltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5cbmNvbnN0IGdldFVzZXJQcm9qZWN0Q29udHJpYnV0aW9ucyA9ICh1c2VyX2lkLCBwcm9qZWN0X2lkKSA9PiB7XG4gICAgY29uc3Qgdm0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHt1c2VyX2lkOiAnZXEnLCBwcm9qZWN0X2lkOiAnZXEnfSk7XG5cbiAgICB2bS51c2VyX2lkKHVzZXJfaWQpO1xuICAgIHZtLnByb2plY3RfaWQocHJvamVjdF9pZCk7XG5cbiAgICBjb25zdCBsUHJvamVjdENvbnRyaWJ1dGlvbnMgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKG1vZGVscy51c2VyQ29udHJpYnV0aW9uLmdldFBhZ2VPcHRpb25zKHZtLnBhcmFtZXRlcnMoKSkpO1xuXG4gICAgcmV0dXJuIGxQcm9qZWN0Q29udHJpYnV0aW9ucy5sb2FkKCk7XG59O1xuXG5jb25zdCBjb250cmlidXRpb25WTSA9ICB7XG4gICAgZ2V0VXNlclByb2plY3RDb250cmlidXRpb25zOiBnZXRVc2VyUHJvamVjdENvbnRyaWJ1dGlvbnNcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRyaWJ1dGlvblZNO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RIaWdobGlnaHQgZnJvbSAnLi9wcm9qZWN0LWhpZ2hsaWdodCc7XG5pbXBvcnQgcHJvamVjdFNpZGViYXIgZnJvbSAnLi9wcm9qZWN0LXNpZGViYXInO1xuaW1wb3J0IHVzZXJDb250cmlidXRpb25EZXRhaWwgZnJvbSAnLi91c2VyLWNvbnRyaWJ1dGlvbi1kZXRhaWwnO1xuaW1wb3J0IGNvbnRyaWJ1dGlvblZNIGZyb20gJy4uL3Ztcy9jb250cmlidXRpb24tdm0nO1xuXG5jb25zdCBwcm9qZWN0SGVhZGVyID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0LFxuICAgICAgICAgICAgY3VycmVudFVzZXIgPSBoLmdldFVzZXIoKSxcbiAgICAgICAgICAgIHByb2plY3RDb250cmlidXRpb25zID0gbS5wcm9wKFtdKTtcblxuICAgICAgICBpZihoLmlzUHJvamVjdFBhZ2UoKSAmJiBjdXJyZW50VXNlciAmJiAhXy5pc1VuZGVmaW5lZChwcm9qZWN0KCkpKXtcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvblZNXG4gICAgICAgICAgICAgICAgLmdldFVzZXJQcm9qZWN0Q29udHJpYnV0aW9ucyhjdXJyZW50VXNlci51c2VyX2lkLCBwcm9qZWN0KCkucHJvamVjdF9pZClcbiAgICAgICAgICAgICAgICAudGhlbihwcm9qZWN0Q29udHJpYnV0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvamVjdENvbnRyaWJ1dGlvbnM6IHByb2plY3RDb250cmlidXRpb25zLFxuICAgICAgICAgICAgc2hvd0NvbnRyaWJ1dGlvbnM6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGxldCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0LFxuICAgICAgICAgICAgcmV3YXJkRGV0YWlscyA9IGFyZ3MucmV3YXJkRGV0YWlscztcblxuICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChwcm9qZWN0KCkpKXtcbiAgICAgICAgICAgIHByb2plY3QgPSBtLnByb3Aoe30pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG0oJyNwcm9qZWN0LWhlYWRlcicsIFtcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi1wcm9kdWN0LicgKyBwcm9qZWN0KCkubW9kZSksXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnBhZ2UtaGVhZGVyLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdoMS5mb250c2l6ZS1sYXJnZXIuZm9udHdlaWdodC1zZW1pYm9sZC5wcm9qZWN0LW5hbWVbaXRlbXByb3A9XCJuYW1lXCJdJywgaC5zZWxmT3JFbXB0eShwcm9qZWN0KCkubmFtZSB8fCBwcm9qZWN0KCkucHJvamVjdF9uYW1lKSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2gyLmZvbnRzaXplLWJhc2UubGluZWhlaWdodC1sb29zZXJbaXRlbXByb3A9XCJhdXRob3JcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAncG9yICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0KCkudXNlciA/IHByb2plY3QoKS51c2VyLm5hbWUgOiBwcm9qZWN0KCkub3duZXJfbmFtZSA/IHByb2plY3QoKS5vd25lcl9uYW1lIDogJydcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICFfLmlzRW1wdHkoY3RybC5wcm9qZWN0Q29udHJpYnV0aW9ucygpKSA/IG0oXCIuY2FyZC5jYXJkLXRlcmNpYXJ5LnUtcmFkaXVzLnUtbWFyZ2ludG9wLTIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIi5mb250c2l6ZS1zbWFsbC51LXRleHQtY2VudGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJzcGFuLmZhLmZhLXRodW1icy11cFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIFZvY8OqIMOpIGFwb2lhZG9yIGRlc3RlIHByb2pldG8hIFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcImEuYWx0LWxpbmtbaHJlZj0namF2YXNjcmlwdDp2b2lkKDApOyddXCIsIHtvbmNsaWNrOiBjdHJsLnNob3dDb250cmlidXRpb25zLnRvZ2dsZX0sIFwiRGV0YWxoZXNcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zaG93Q29udHJpYnV0aW9ucygpID8gbShcIi5jYXJkLnUtbWFyZ2ludG9wLTIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIudy1yb3dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGN0cmwucHJvamVjdENvbnRyaWJ1dGlvbnMoKSwgY29udHJpYnV0aW9uID0+IG0uY29tcG9uZW50KHVzZXJDb250cmlidXRpb25EZXRhaWwsIHtjb250cmlidXRpb246IGNvbnRyaWJ1dGlvbiwgcmV3YXJkRGV0YWlsczogcmV3YXJkRGV0YWlsc30pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICkgOiAnJ1xuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24ucHJvamVjdC1tYWluJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnByb2plY3QtbWFpbicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnByb2plY3QtaGlnaGxpZ2h0JywgbS5jb21wb25lbnQocHJvamVjdEhpZ2hsaWdodCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgbS5jb21wb25lbnQocHJvamVjdFNpZGViYXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJEZXRhaWxzOiBhcmdzLnVzZXJEZXRhaWxzXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RIZWFkZXI7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RSZW1pbmRlciBmcm9tICcuL3Byb2plY3QtcmVtaW5kZXInO1xuXG5jb25zdCBwcm9qZWN0VGFicyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgaXNGaXhlZCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBvcmlnaW5hbFBvc2l0aW9uID0gbS5wcm9wKC0xKTtcblxuICAgICAgICBjb25zdCBmaXhPblNjcm9sbCA9IChlbCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdmlld3BvcnRPZmZzZXQgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuc2Nyb2xsWSA8PSBvcmlnaW5hbFBvc2l0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxQb3NpdGlvbigtMSk7XG4gICAgICAgICAgICAgICAgICAgIGlzRml4ZWQoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2aWV3cG9ydE9mZnNldC50b3AgPCAwIHx8ICh3aW5kb3cuc2Nyb2xsWSA+IG9yaWdpbmFsUG9zaXRpb24oKSAmJiBvcmlnaW5hbFBvc2l0aW9uKCkgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRml4ZWQoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFBvc2l0aW9uKHdpbmRvdy5zY3JvbGxZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRml4ZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBuYXZEaXNwbGF5ID0gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXhOYXZCYXIgPSBmaXhPblNjcm9sbChlbCk7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZpeE5hdkJhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hdkRpc3BsYXk6IG5hdkRpc3BsYXksXG4gICAgICAgICAgICBpc0ZpeGVkOiBpc0ZpeGVkXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCxcbiAgICAgICAgICAgIHJld2FyZHMgPSBhcmdzLnJld2FyZERldGFpbHM7XG5cbiAgICAgICAgbGV0IG1haW5DbGFzcyA9ICghY3RybC5pc0ZpeGVkKCkgfHwgcHJvamVjdCgpLmlzX293bmVyX29yX2FkbWluKSA/ICcudy1zZWN0aW9uLnByb2plY3QtbmF2JyA6ICcudy1zZWN0aW9uLnByb2plY3QtbmF2LnByb2plY3QtbmF2LWZpeGVkJztcblxuICAgICAgICByZXR1cm4gbSgnbmF2LXdyYXBwZXInLCBwcm9qZWN0KCkgPyBbXG4gICAgICAgICAgICBtKG1haW5DbGFzcywge1xuICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC5uYXZEaXNwbGF5XG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFshXy5pc0VtcHR5KHJld2FyZHMoKSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGFbaWQ9XCJyZXdhcmRzLWxpbmtcIl1bY2xhc3M9XCJ3LWhpZGRlbi1tYWluIHctaGlkZGVuLW1lZGl1bSBkYXNoYm9hcmQtbmF2LWxpbmsgbWYgICR7KGguaGFzaE1hdGNoKCcjcmV3YXJkcycpID8gJ3NlbGVjdGVkJyA6ICcnKX1cIl1baHJlZj1cIi8ke3Byb2plY3QoKS5wZXJtYWxpbmt9I3Jld2FyZHNcIl1gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnZmxvYXQ6IGxlZnQ7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X3Jld2FyZHNfdmlldycscHJvamVjdDogcHJvamVjdCgpfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnUmVjb21wZW5zYXMnKSA6IG0oYGFbaWQ9XCJyZXdhcmRzLWxpbmtcIl1bY2xhc3M9XCJ3LWhpZGRlbi1tYWluIHctaGlkZGVuLW1lZGl1bSBkYXNoYm9hcmQtbmF2LWxpbmsgbWYgJHsoaC5oYXNoTWF0Y2goJyNjb250cmlidXRpb25fc3VnZ2VzdGlvbnMnKSA/ICdzZWxlY3RlZCcgOiAnJyl9XCJdW2hyZWY9XCIvJHtwcm9qZWN0KCkucGVybWFsaW5rfSNjb250cmlidXRpb25fc3VnZ2VzdGlvbnNcIl1gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnZmxvYXQ6IGxlZnQ7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2NvbnRyaWJzdWdnZXN0aW9uc192aWV3Jyxwcm9qZWN0OiBwcm9qZWN0KCl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdWYWxvcmVzIFN1Z2VyaWRvcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGFbaWQ9XCJhYm91dC1saW5rXCJdW2NsYXNzPVwiZGFzaGJvYXJkLW5hdi1saW5rIG1mICR7KGguaGFzaE1hdGNoKCcjYWJvdXQnKSB8fCBoLmhhc2hNYXRjaCgnJykgPyAnc2VsZWN0ZWQnIDogJycpfVwiXVtocmVmPVwiLyR7cHJvamVjdCgpLnBlcm1hbGlua30jYWJvdXRcIl1gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnZmxvYXQ6IGxlZnQ7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2Fib3V0X3ZpZXcnLHByb2plY3Q6IHByb2plY3QoKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ1NvYnJlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYVtpZD1cInBvc3RzLWxpbmtcIl1bY2xhc3M9XCJkYXNoYm9hcmQtbmF2LWxpbmsgbWYgJHsoaC5oYXNoTWF0Y2goJyNwb3N0cycpID8gJ3NlbGVjdGVkJyA6ICcnKX1cIl1baHJlZj1cIi8ke3Byb2plY3QoKS5wZXJtYWxpbmt9I3Bvc3RzXCJdYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2Zsb2F0OiBsZWZ0OycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9wb3N0c192aWV3Jyxwcm9qZWN0OiBwcm9qZWN0KCl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vdmlkYWRlcyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmJhZGdlJywgcHJvamVjdCgpID8gcHJvamVjdCgpLnBvc3RzX2NvdW50IDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYVtpZD1cImNvbnRyaWJ1dGlvbnMtbGlua1wiXVtjbGFzcz1cInctaGlkZGVuLXNtYWxsIHctaGlkZGVuLXRpbnkgZGFzaGJvYXJkLW5hdi1saW5rIG1mICR7KGguaGFzaE1hdGNoKCcjY29udHJpYnV0aW9ucycpID8gJ3NlbGVjdGVkJyA6ICcnKX1cIl1baHJlZj1cIi8ke3Byb2plY3QoKS5wZXJtYWxpbmt9I2NvbnRyaWJ1dGlvbnNcIl1gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnZmxvYXQ6IGxlZnQ7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2NvbnRyaWJ1dGlvbnNfdmlldycscHJvamVjdDogcHJvamVjdCgpfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBcG9pYWRvcmVzICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uYmFkZ2Uudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsIHByb2plY3QoKSA/IHByb2plY3QoKS50b3RhbF9jb250cmlidXRvcnMgOiAnLScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYVtpZD1cImNvbW1lbnRzLWxpbmtcIl1bY2xhc3M9XCJkYXNoYm9hcmQtbmF2LWxpbmsgbWYgJHsoaC5oYXNoTWF0Y2goJyNjb21tZW50cycpID8gJ3NlbGVjdGVkJyA6ICcnKX1cIl1baHJlZj1cIi8ke3Byb2plY3QoKS5wZXJtYWxpbmt9I2NvbW1lbnRzXCJdYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2Zsb2F0OiBsZWZ0OycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jb21tZW50c192aWV3Jyxwcm9qZWN0OiBwcm9qZWN0KCl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbWVudMOhcmlvcyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0KCkgPyBtKCdmYjpjb21tZW50cy1jb3VudFtocmVmPVwiaHR0cDovL3d3dy5jYXRhcnNlLm1lLycgKyBwcm9qZWN0KCkucGVybWFsaW5rICsgJ1wiXVtjbGFzcz1cImJhZGdlIHByb2plY3QtZmItY29tbWVudCB3LWhpZGRlbi1zbWFsbCB3LWhpZGRlbi10aW55XCJdW3N0eWxlPVwiZGlzcGxheTogaW5saW5lXCJdJywgbS50cnVzdCgnJm5ic3A7JykpIDogJy0nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QoKSA/IG0oJy53LWNvbC53LWNvbC00LnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCBwcm9qZWN0KCkub3Blbl9mb3JfY29udHJpYnV0aW9ucyA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cucHJvamVjdC1uYXYtYmFjay1idXR0b24nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02LnctY29sLW1lZGl1bS04JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWJ1dHRvbi5idG5baHJlZj1cIi9wcm9qZWN0cy8nICsgcHJvamVjdCgpLmlkICsgJy9jb250cmlidXRpb25zL25ld1wiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAnY29udHJpYnV0aW9uX2NyZWF0ZScsYWN0OiAnY29udHJpYnV0aW9uX2Zsb2F0aW5nYnRuX2NsaWNrJywgcHJvamVjdDogcHJvamVjdCgpfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdBcG9pYXLCoOKAjWVzdGXCoHByb2pldG8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtbWVkaXVtLTQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2Zsb2F0aW5ncmVtaW5kZXJfY2xpY2snLCBwcm9qZWN0OiBwcm9qZWN0KCl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0UmVtaW5kZXIsIHtwcm9qZWN0OiBwcm9qZWN0LCB0eXBlOiAnYnV0dG9uJywgaGlkZVRleHRPbk1vYmlsZTogdHJ1ZX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJykgOiAnJ1xuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIChjdHJsLmlzRml4ZWQoKSAmJiAhcHJvamVjdCgpLmlzX293bmVyX29yX2FkbWluKSA/IG0oJy53LXNlY3Rpb24ucHJvamVjdC1uYXYnKSA6ICcnXG4gICAgICAgIF0gOiAnJyk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFRhYnM7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcmV3YXJkVk0gZnJvbSAnLi4vdm1zL3Jld2FyZC12bSc7XG5pbXBvcnQgcHJvamVjdFZNIGZyb20gJy4uL3Ztcy9wcm9qZWN0LXZtJztcblxuY29uc3QgcHJvamVjdFJld2FyZExpc3QgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IHN0b3JlS2V5ID0gJ3NlbGVjdGVkUmV3YXJkJyxcbiAgICAgICAgICAgIHZtID0gcmV3YXJkVk07XG5cbiAgICAgICAgY29uc3Qgc2V0SW5wdXQgPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+ICFpc0luaXRpYWxpemVkID8gZWwuZm9jdXMoKSA6IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IHN1Ym1pdENvbnRyaWJ1dGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlRmxvYXQgPSBoLm1vbmV0YXJ5VG9GbG9hdCh2bS5jb250cmlidXRpb25WYWx1ZSk7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZUZsb2F0IDwgdm0uc2VsZWN0ZWRSZXdhcmQoKS5taW5pbXVtX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdm0uZXJyb3IoYE8gdmFsb3IgZGUgYXBvaW8gcGFyYSBlc3NhIHJlY29tcGVuc2EgZGV2ZSBzZXIgZGUgbm8gbcOtbmltbyBSJCR7dm0uc2VsZWN0ZWRSZXdhcmQoKS5taW5pbXVtX3ZhbHVlfWApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2bS5lcnJvcignJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVEhJUyBDSEVDSyBJUyBPTkxZIE5FQ0VTU0FSWSBJRiBXSEVOIFdFIFNUQVJUIFJPVVRJTkcgRElSRUNUTFkgVE8gVEhFIC9jb250cmlidXRpb25zL2VkaXQgcGFnZVxuICAgICAgICAgICAgICAgIC8vIGlmICghaC5nZXRVc2VyKCkpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgaC5zdG9yZU9iamVjdChzdG9yZUtleSwge3ZhbHVlOiB2YWx1ZUZsb2F0LCByZXdhcmQ6IHZtLnNlbGVjdGVkUmV3YXJkKCl9KTtcblxuICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gaC5uYXZpZ2F0ZVRvRGV2aXNlKCcvJyArIHByb2plY3RWTS5jdXJyZW50UHJvamVjdCgpLnBlcm1hbGluayk7XG4gICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdm0uY29udHJpYnV0aW9uVmFsdWUodmFsdWVGbG9hdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vaC5uYXZpZ2F0ZVRvKGAvcHJvamVjdHMvJHtwcm9qZWN0Vk0uY3VycmVudFByb2plY3QoKS5pZH0vY29udHJpYnV0aW9ucy9uZXc/cmV3YXJkX2lkPSR7dm0uc2VsZWN0ZWRSZXdhcmQoKS5pZH1gKTtcbiAgICAgICAgICAgICAgICBoLm5hdmlnYXRlVG8oYC9wcm9qZWN0cy8ke3Byb2plY3RWTS5jdXJyZW50UHJvamVjdCgpLnByb2plY3RfaWR9L2NvbnRyaWJ1dGlvbnMvZmFsbGJhY2tfY3JlYXRlP2NvbnRyaWJ1dGlvbiU1QnJld2FyZF9pZCU1RD0ke3ZtLnNlbGVjdGVkUmV3YXJkKCkuaWR9JmNvbnRyaWJ1dGlvbiU1QnZhbHVlJTVEPSR7dmFsdWVGbG9hdH1gKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbS5yb3V0ZShgL3Byb2plY3RzLyR7cHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkuaWR9L3BheW1lbnRgLCB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIHByb2plY3RfdXNlcl9pZDogcHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkudXNlcl9pZFxuICAgICAgICAgICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoaC5nZXRTdG9yZWRPYmplY3Qoc3RvcmVLZXkpKSB7XG4gICAgICAgICAgICBjb25zdCB7dmFsdWUsIHJld2FyZH0gPSBoLmdldFN0b3JlZE9iamVjdChzdG9yZUtleSk7XG5cbiAgICAgICAgICAgIGgucmVtb3ZlU3RvcmVkT2JqZWN0KHN0b3JlS2V5KTtcbiAgICAgICAgICAgIHZtLnNlbGVjdGVkUmV3YXJkKHJld2FyZCk7XG4gICAgICAgICAgICB2bS5jb250cmlidXRpb25WYWx1ZShoLmFwcGx5TW9uZXRhcnlNYXNrKGAke3ZhbHVlfSwwMGApKTtcbiAgICAgICAgICAgIHN1Ym1pdENvbnRyaWJ1dGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFwcGx5TWFzazogdm0uYXBwbHlNYXNrLFxuICAgICAgICAgICAgZXJyb3I6IHZtLmVycm9yLFxuICAgICAgICAgICAgc3VibWl0Q29udHJpYnV0aW9uOiBzdWJtaXRDb250cmlidXRpb24sXG4gICAgICAgICAgICBvcGVuZWRSZXdhcmQ6IHZtLnNlbGVjdGVkUmV3YXJkLFxuICAgICAgICAgICAgc2VsZWN0UmV3YXJkOiB2bS5zZWxlY3RSZXdhcmQsXG4gICAgICAgICAgICBjb250cmlidXRpb25WYWx1ZTogdm0uY29udHJpYnV0aW9uVmFsdWUsXG4gICAgICAgICAgICBzZXRJbnB1dDogc2V0SW5wdXRcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICAvL0ZJWE1FOiBNSVNTSU5HIEFESlVTVFNcbiAgICAgICAgLy8gLSBhZGQgZHJhZnQgYWRtaW4gbW9kaWZpY2F0aW9uc1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0KCkgfHwge29wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6IGZhbHNlfTtcbiAgICAgICAgcmV0dXJuIG0oJyNyZXdhcmRzLnUtbWFyZ2luYm90dG9tLTMwJywgXy5tYXAoYXJncy5yZXdhcmREZXRhaWxzKCksIChyZXdhcmQpID0+IHtcblxuICAgICAgICAgICAgcmV0dXJuIG0oJ2RpdltjbGFzcz1cIicgKyAoaC5yZXdhcmRTb3VsZE91dChyZXdhcmQpID8gJ2NhcmQtZ29uZScgOiAnY2FyZC1yZXdhcmQgJyArIChwcm9qZWN0Lm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMgPyAnY2xpY2thYmxlJyA6ICcnKSkgKyAnIGNhcmQgY2FyZC1zZWNvbmRhcnkgdS1tYXJnaW5ib3R0b20tMTBcIl0nLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBjYXQ6ICdjb250cmlidXRpb25fY3JlYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgYWN0OiAnY29udHJpYnV0aW9uX3Jld2FyZF9jbGljaycsXG4gICAgICAgICAgICAgICAgICAgIGxibDogcmV3YXJkLm1pbmltdW1fdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhRGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV3YXJkX2lkOiByZXdhcmQuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXdhcmRfdmFsdWU6IHJld2FyZC5taW5pbXVtX3ZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBjdHJsLnNlbGVjdFJld2FyZChyZXdhcmQpKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZCcsICdQYXJhIFIkICcgKyBoLmZvcm1hdE51bWJlcihyZXdhcmQubWluaW11bV92YWx1ZSkgKyAnIG91IG1haXMnKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsIGgucGx1cmFsaXplKHJld2FyZC5wYWlkX2NvdW50LCAnIGFwb2lvJywgJyBhcG9pb3MnKSksIChyZXdhcmQubWF4aW11bV9jb250cmlidXRpb25zID4gMCA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIChyZXdhcmQud2FpdGluZ19wYXltZW50X2NvdW50ID4gMCA/IG0oJy5tYXhpbXVtX2NvbnRyaWJ1dGlvbnMuaW5fdGltZV90b19jb25maXJtLmNsZWFyZml4JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5wZW5kaW5nLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCBoLnBsdXJhbGl6ZShyZXdhcmQud2FpdGluZ19wYXltZW50X2NvdW50LCAnIGFwb2lvIGVtIHByYXpvIGRlIGNvbmZpcm1hw6fDo28nLCAnIGFwb2lvcyBlbSBwcmF6byBkZSBjb25maXJtYcOnw6NvLicpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSkgOiAnJyksIChoLnJld2FyZFNvdWxkT3V0KHJld2FyZCkgPyBtKCcudS1tYXJnaW50b3AtMTAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5iYWRnZS5iYWRnZS1nb25lLmZvbnRzaXplLXNtYWxsZXInLCAnRXNnb3RhZGEnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSkgOiBtKCcudS1tYXJnaW50b3AtMTAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5iYWRnZS5iYWRnZS1hdHRlbnRpb24uZm9udHNpemUtc21hbGxlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LWJvbGQnLCAnTGltaXRhZGEnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAoJyArIGgucmV3YXJkUmVtYW5pbmcocmV3YXJkKSArICcgZGUgJyArIHJld2FyZC5tYXhpbXVtX2NvbnRyaWJ1dGlvbnMgKyAnIGRpc3BvbsOtdmVpcyknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pKVxuICAgICAgICAgICAgICAgICAgICBdIDogJycpLFxuICAgICAgICAgICAgICAgIF0pLFxuXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIudS1tYXJnaW50b3AtMjAnLCBtLnRydXN0KGguc2ltcGxlRm9ybWF0KGguc3RyaXAocmV3YXJkLmRlc2NyaXB0aW9uKSkpKSxcbiAgICAgICAgICAgICAgICAoIV8uaXNFbXB0eShyZXdhcmQuZGVsaXZlcl9hdCkgP1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2InLCAnRXN0aW1hdGl2YSBkZSBFbnRyZWdhOiAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGgubW9tZW50aWZ5KHJld2FyZC5kZWxpdmVyX2F0LCAnTU1NL1lZWVknKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIDogJycpLFxuICAgICAgICAgICAgICAgIChwcm9qZWN0Lm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMgJiYgIWgucmV3YXJkU291bGRPdXQocmV3YXJkKSA/IFtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5vcGVuZWRSZXdhcmQoKS5pZCA9PT0gcmV3YXJkLmlkID8gbSgnLnctZm9ybScsXG4gICAgICAgICAgICAgICAgICAgIFx0W1xuICAgICAgICAgICAgICAgICAgICBcdFx0bSgnZm9ybS51LW1hcmdpbnRvcC0zMCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uc3VibWl0OiBjdHJsLnN1Ym1pdENvbnRyaWJ1dGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFtcbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHRtKCcuZGl2aWRlci51LW1hcmdpbmJvdHRvbS0yMCcpLFxuICAgICAgICAgICAgICAgICAgICBcdFx0XHRcdG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LnUtbWFyZ2luYm90dG9tLTEwJyxcbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHRcdCdWYWxvciBkbyBhcG9pbydcbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHQpLFxuICAgICAgICAgICAgICAgICAgICBcdFx0XHRcdG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0yMCcsXG4gICAgICAgICAgICAgICAgICAgIFx0XHRcdFx0XHRbXG4gICAgICAgICAgICAgICAgICAgIFx0XHRcdFx0XHRcdG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudy1jb2wtdGlueS0zJyxcbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHRcdFx0XHRtKCcuYmFjay1yZXdhcmQtaW5wdXQtcmV3YXJkLnBsYWNlaG9sZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHRcdFx0XHRcdCdSJCdcbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHRcdFx0XHQpXG4gICAgICAgICAgICAgICAgICAgIFx0XHRcdFx0XHRcdCksXG4gICAgICAgICAgICAgICAgICAgIFx0XHRcdFx0XHRcdG0oJy53LWNvbC53LWNvbC05LnctY29sLXNtYWxsLTkudy1jb2wtdGlueS05JyxcbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHRcdFx0XHRtKCdpbnB1dC53LWlucHV0LmJhY2stcmV3YXJkLWlucHV0LXJld2FyZFt0eXBlPVwidGVsXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC5zZXRJbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmtleXVwOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuYXBwbHlNYXNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5jb250cmlidXRpb25WYWx1ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBcdFx0XHRcdFx0XHQpXG4gICAgICAgICAgICAgICAgICAgIFx0XHRcdFx0XHRdXG4gICAgICAgICAgICAgICAgICAgIFx0XHRcdFx0KSxcbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHRtKCdpbnB1dC53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bVt0eXBlPVwic3VibWl0XCJdW3ZhbHVlPVwiQ29udGludWFyID5cIl0nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXJyb3IoKS5sZW5ndGggPiAwID8gbSgnLnRleHQtZXJyb3InLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCAke2N0cmwuZXJyb3IoKX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgIFx0XHRcdF1cbiAgICAgICAgICAgICAgICAgICAgXHRcdClcbiAgICAgICAgICAgICAgICAgICAgXHRdXG4gICAgICAgICAgICAgICAgICAgICkgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gbSgnLnByb2plY3QtcmV3YXJkLWJveC1ob3ZlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIG0oJy5wcm9qZWN0LXJld2FyZC1ib3gtc2VsZWN0LXRleHQudS10ZXh0LWNlbnRlcicsICdTZWxlY2lvbmUgZXNzYSByZWNvbXBlbnNhJylcbiAgICAgICAgICAgICAgICAgICAgLy8gXSlcbiAgICAgICAgICAgICAgICBdIDogJycpXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RSZXdhcmRMaXN0O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Qcm9qZWN0U3VnZ2VzdGVkQ29udHJpYnV0aW9ucyBjb21wb25lbnRcbiAqIEEgUHJvamVjdC1zaG93IHBhZ2UgaGVscGVyIHRvIHNob3cgc3VnZ2VzdGVkIGFtb3VudHMgb2YgY29udHJpYnV0aW9uc1xuICpcbiAqIEV4YW1wbGUgb2YgdXNlOlxuICogdmlldzogKCkgPT4ge1xuICogICAuLi5cbiAqICAgbS5jb21wb25lbnQoYy5Qcm9qZWN0U3VnZ2VzdGVkQ29udHJpYnV0aW9ucywge3Byb2plY3Q6IHByb2plY3R9KVxuICogICAuLi5cbiAqIH1cbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuY29uc3QgcHJvamVjdFN1Z2dlc3RlZENvbnRyaWJ1dGlvbnMgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QoKTtcblxuICAgICAgICBjb25zdCBzdWdnZXN0aW9uVXJsID0gKGFtb3VudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGAvcHJvamVjdHMvJHtwcm9qZWN0LnByb2plY3RfaWR9L2NvbnRyaWJ1dGlvbnMvbmV3P2Ftb3VudD0ke2Ftb3VudH1gO1xuICAgICAgICB9LCBzdWdnZXN0ZWRWYWx1ZXMgPSBbMTAsIDI1LCA1MCwgMTAwXTtcblxuICAgICAgICByZXR1cm4gbSgnI3N1Z2dlc3Rpb25zJywgXy5tYXAoc3VnZ2VzdGVkVmFsdWVzLCAoYW1vdW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcHJvamVjdCA/IG0oYGFbaHJlZj1cIiR7c3VnZ2VzdGlvblVybChhbW91bnQpfVwiXS5jYXJkLXJld2FyZC5jYXJkLWJpZy5jYXJkLXNlY29uZGFyeS51LW1hcmdpbmJvdHRvbS0yMGAsIFtcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyJywgYFIkwqAke2Ftb3VudH1gKVxuICAgICAgICAgICAgXSkgOiAnJztcbiAgICAgICAgfSkpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcHJvamVjdERhdGFUYWJsZSBmcm9tICcuL3Byb2plY3QtZGF0YS10YWJsZSc7XG5pbXBvcnQgcHJvamVjdERhdGFDaGFydCBmcm9tICcuL3Byb2plY3QtZGF0YS1jaGFydCc7XG5cbmNvbnN0IHByb2plY3RDb250cmlidXRpb25zID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBjb250cmlidXRpb25zUGVyTG9jYXRpb24gPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgICBjb250cmlidXRpb25zUGVyRGF5ID0gbS5wcm9wKFtdKSxcbiAgICAgICAgICAgICAgbGlzdFZNID0gcG9zdGdyZXN0LnBhZ2luYXRpb25WTShtb2RlbHMuY29udHJpYnV0b3IpLFxuICAgICAgICAgICAgICBmaWx0ZXJTdGF0cyA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICAgICAgICAgICAgcHJvamVjdF9pZDogJ2VxJ1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgZmlsdGVyVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6ICdlcSdcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIGdyb3VwZWRDb2xsZWN0aW9uID0gKGNvbGxlY3Rpb24gPSBbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgbGV0IGdyb3VwZWQgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgW11cbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgZ3JvdXAgPSAwO1xuXG4gICAgICAgICAgICAgICAgICBfLm1hcChjb2xsZWN0aW9uLCAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXBlZFtncm91cF0ubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAgPSBncm91cCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwZWRbZ3JvdXBdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgZ3JvdXBlZFtncm91cF0ucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXBlZDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY29udHJpYnV0aW9uc1N0YXRzID0gbS5wcm9wKHt9KTtcblxuICAgICAgICBmaWx0ZXJWTS5wcm9qZWN0X2lkKGFyZ3MucHJvamVjdCgpLmlkKTtcbiAgICAgICAgZmlsdGVyU3RhdHMucHJvamVjdF9pZChhcmdzLnByb2plY3QoKS5pZCk7XG5cbiAgICAgICAgaWYgKCFsaXN0Vk0uY29sbGVjdGlvbigpLmxlbmd0aCkge1xuICAgICAgICAgICAgbGlzdFZNLmZpcnN0UGFnZShmaWx0ZXJWTS5wYXJhbWV0ZXJzKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vVE9ETzogQWJzdHJhY3QgdGFibGUgZmV0Y2ggYW5kIGNvbnRydWN0aW9uIGxvZ2ljIHRvIGNvbnRyaWJ1dGlvbnMtdm0gdG8gYXZvaWQgaW5zaWdodHMuanMgZHVwbGljYXRlZCBjb2RlLlxuICAgICAgICBjb25zdCBsQ29udHJpYnV0aW9uc1BlckRheSA9IHBvc3RncmVzdC5sb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyRGF5LmdldFJvd09wdGlvbnMoZmlsdGVyU3RhdHMucGFyYW1ldGVycygpKSk7XG4gICAgICAgIGxDb250cmlidXRpb25zUGVyRGF5LmxvYWQoKS50aGVuKGNvbnRyaWJ1dGlvbnNQZXJEYXkpO1xuXG4gICAgICAgIGxldCBjb250cmlidXRpb25zUGVyTG9jYXRpb25UYWJsZSA9IFtcbiAgICAgICAgICAgIFsnRXN0YWRvJywgJ0Fwb2lvcycsICdSJCBhcG9pYWRvcyAoJSBkbyB0b3RhbCknXVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBidWlsZFBlckxvY2F0aW9uVGFibGUgPSAoY29udHJpYnV0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICghXy5pc0VtcHR5KGNvbnRyaWJ1dGlvbnMpKSA/IF8ubWFwKF8uZmlyc3QoY29udHJpYnV0aW9ucykuc291cmNlLCAoY29udHJpYnV0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbiA9IFtdO1xuXG4gICAgICAgICAgICAgICAgY29sdW1uLnB1c2goY29udHJpYnV0aW9uLnN0YXRlX2Fjcm9ueW0gfHwgJ091dHJvL290aGVyJyk7XG4gICAgICAgICAgICAgICAgY29sdW1uLnB1c2goY29udHJpYnV0aW9uLnRvdGFsX2NvbnRyaWJ1dGlvbnMpO1xuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKFtjb250cmlidXRpb24udG90YWxfY29udHJpYnV0ZWQsIFsvL0FkZGluZyByb3cgd2l0aCBjdXN0b20gY29tcGFyYXRvciA9PiByZWFkIHByb2plY3QtZGF0YS10YWJsZSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICBtKGBpbnB1dFt0eXBlPVwiaGlkZGVuXCJdW3ZhbHVlPVwiJHtjb250cmlidXRpb24udG90YWxfY29udHJpYnV0ZWR9XCJgKSxcbiAgICAgICAgICAgICAgICAgICAgJ1IkICcsXG4gICAgICAgICAgICAgICAgICAgIGguZm9ybWF0TnVtYmVyKGNvbnRyaWJ1dGlvbi50b3RhbF9jb250cmlidXRlZCwgMiwgMyksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4udy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsICcgKCcgKyBjb250cmlidXRpb24udG90YWxfb25fcGVyY2VudGFnZS50b0ZpeGVkKDIpICsgJyUpJylcbiAgICAgICAgICAgICAgICBdXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlLnB1c2goY29sdW1uKTtcbiAgICAgICAgICAgIH0pIDogW107XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbiA9IHBvc3RncmVzdC5sb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyTG9jYXRpb24uZ2V0Um93T3B0aW9ucyhmaWx0ZXJTdGF0cy5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgbENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbi5sb2FkKCkudGhlbihidWlsZFBlckxvY2F0aW9uVGFibGUpO1xuXG4gICAgICAgIGNvbnN0IGxDb250cmlidXRpb25zU3RhdHMgPSBwb3N0Z3Jlc3QubG9hZGVyKG1vZGVscy5wcm9qZWN0Q29udHJpYnV0aW9yc1N0YXQuZ2V0Um93T3B0aW9ucyhmaWx0ZXJTdGF0cy5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgbENvbnRyaWJ1dGlvbnNTdGF0cy5sb2FkKCkudGhlbihkYXRhID0+IGNvbnRyaWJ1dGlvbnNTdGF0cyhfLmZpcnN0KGRhdGEpKSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpc3RWTTogbGlzdFZNLFxuICAgICAgICAgICAgZmlsdGVyVk06IGZpbHRlclZNLFxuICAgICAgICAgICAgZ3JvdXBlZENvbGxlY3Rpb246IGdyb3VwZWRDb2xsZWN0aW9uLFxuICAgICAgICAgICAgbENvbnRyaWJ1dGlvbnNTdGF0czogbENvbnRyaWJ1dGlvbnNTdGF0cyxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlOiBjb250cmlidXRpb25zUGVyTG9jYXRpb25UYWJsZSxcbiAgICAgICAgICAgIGxDb250cmlidXRpb25zUGVyTG9jYXRpb246IGxDb250cmlidXRpb25zUGVyTG9jYXRpb24sXG4gICAgICAgICAgICBjb250cmlidXRpb25zUGVyRGF5OiBjb250cmlidXRpb25zUGVyRGF5LFxuICAgICAgICAgICAgbENvbnRyaWJ1dGlvbnNQZXJEYXk6IGxDb250cmlidXRpb25zUGVyRGF5LFxuICAgICAgICAgICAgY29udHJpYnV0aW9uc1N0YXRzOiBjb250cmlidXRpb25zU3RhdHNcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBsaXN0ID0gY3RybC5saXN0Vk0sXG4gICAgICAgICAgICAgIHN0YXRzID0gY3RybC5jb250cmlidXRpb25zU3RhdHMoKSxcbiAgICAgICAgICAgICAgZ3JvdXBlZENvbGxlY3Rpb24gPSBjdHJsLmdyb3VwZWRDb2xsZWN0aW9uKGxpc3QuY29sbGVjdGlvbigpKTtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3RfY29udHJpYnV0aW9ucycsIG0oJyNjb250cmlidXRpb25zX3RvcCcsIFtcbiAgICAgICAgICAgIG0oJy5zZWN0aW9uLnctc2VjdGlvbicsXG4gICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgbSgnLnctcm93JywgY3RybC5sQ29udHJpYnV0aW9uc1N0YXRzKCkgPyBoLmxvYWRlcigpIDogIV8uaXNFbXB0eShzdGF0cykgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0yMC51LXRleHQtY2VudGVyLXNtYWxsLW9ubHkudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1tZWdhanVtYm8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy50b3RhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncGVzc29hcyBhcG9pYW0gZXN0ZSBwcm9qZXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCcuY2FyZC5jYXJkLXRlcmNpYXJ5LnUtcmFkaXVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tMjAudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Fwb2lhZG9yZXMgbm92b3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7TWF0aC5mbG9vcihzdGF0cy5uZXdfcGVyY2VudCl9JWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Fwb2lhZG9yZXMgcXVlIG51bmNhIHRpbmhhbSBhcG9pYWRvIHVtIHByb2pldG8gbm8gQ2F0YXJzZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbmJvdHRvbS0yMC53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bS53LWhpZGRlbi1zbWFsbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Fwb2lhZG9yZXMgcmVjb3JyZW50ZXMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7TWF0aC5jZWlsKHN0YXRzLnJldHVybmluZ19wZXJjZW50KX0lYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBvaWFkb3JlcyBxdWUgasOhIHRpbmhhbSBhcG9pYWRvIHVtIHByb2pldG8gbm8gQ2F0YXJzZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF0gOiAnJylcbiAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICApLFxuICAgICAgICAgICAgbSgnLmRpdmlkZXIudy1zZWN0aW9uJyksXG4gICAgICAgICAgICBtKCcuc2VjdGlvbi53LXNlY3Rpb24nLCBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tNDAudS10ZXh0LWNlbnRlcicsICdBcG9pYWRvcmVzJyksXG4gICAgICAgICAgICAgICAgbSgnLnByb2plY3QtY29udHJpYnV0aW9ucy53LWNsZWFyZml4JywgXy5tYXAoZ3JvdXBlZENvbGxlY3Rpb24sIChncm91cCwgaWR4KSA9PiBtKCcudy1yb3cnLCBfLm1hcChncm91cCwgKGNvbnRyaWJ1dGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnByb2plY3QtY29udHJpYnV0aW9uLWl0ZW0udy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhlcmUgbmV3IGNhcmRcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5jYXJkLmNhcmQtYmFja2VyLnUtbWFyZ2luYm90dG9tLTIwLnUtcmFkaXVzLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYVtocmVmPVwiL3VzZXJzLycgKyBjb250cmlidXRpb24udXNlcl9pZCArICdcIl1bc3R5bGU9XCJkaXNwbGF5OiBibG9jaztcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdDogJ3Byb2plY3RfdmlldycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Q6ICdwcm9qZWN0X2JhY2tlcl9saW5rJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxibDogY29udHJpYnV0aW9uLnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBhcmdzLnByb2plY3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLnUtbWFyZ2luYm90dG9tLTEwLnUtcm91bmRbc3JjPVwiJyArICghXy5pc0VtcHR5KGNvbnRyaWJ1dGlvbi5kYXRhLnByb2ZpbGVfaW1nX3RodW1ibmFpbCkgPyBjb250cmlidXRpb24uZGF0YS5wcm9maWxlX2ltZ190aHVtYm5haWwgOiAnL2Fzc2V0cy9jYXRhcnNlX2Jvb3RzdHJhcC91c2VyLmpwZycpICsgJ1wiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQubGluZWhlaWdoLXRpZ2h0LmxpbmstaGlkZGVuLWRhcmtbaHJlZj1cIi91c2Vycy8nICsgY29udHJpYnV0aW9uLnVzZXJfaWQgKyAnXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXQ6ICdwcm9qZWN0X3ZpZXcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0OiAncHJvamVjdF9iYWNrZXJfbGluaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYmw6IGNvbnRyaWJ1dGlvbi51c2VyX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogYXJncy5wcm9qZWN0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjb250cmlidXRpb24uZGF0YS5uYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5mb250c2l6ZS1zbWFsbGVzdC51LW1hcmdpbmJvdHRvbS0xMCcsIGAke2NvbnRyaWJ1dGlvbi5kYXRhLmNpdHl9LCR7Y29udHJpYnV0aW9uLmRhdGEuc3RhdGV9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIGNvbnRyaWJ1dGlvbi5kYXRhLnRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzKSwnIGFwb2lhZG9zIMKgfCDCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIGNvbnRyaWJ1dGlvbi5kYXRhLnRvdGFsX3B1Ymxpc2hlZF9wcm9qZWN0cyksJyBjcmlhZG8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tKCcuYnRuLWJvdHRvbS1jYXJkLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTQudy1jb2wtdGlueS0zJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIG0oXCJhLmJ0bi5idG4tbWVkaXVtLnctYnV0dG9uW2hyZWY9JyMnXVwiLCBcIlNlZ3VpbmRvXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgbShcIi53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTQudy1jb2wtdGlueS0zXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9dKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5ldyBjYXJkXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH0pKSkpLFxuICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS00MC51LW1hcmdpbnRvcC0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtcHVzaC01JywgWyFsaXN0LmlzTG9hZGluZygpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuaXNMYXN0UGFnZSgpID8gJycgOiBtKCdidXR0b24jbG9hZC1tb3JlLmJ0bi5idG4tbWVkaXVtLmJ0bi10ZXJjaWFyeScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBsaXN0Lm5leHRQYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnQ2FycmVnYXIgbWFpcycpIDogaC5sb2FkZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSkpXG4gICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICBtKCcuYmVmb3JlLWZvb3Rlci5iZy1ncmF5LnNlY3Rpb24udy1zZWN0aW9uJywgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTYwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiAnMzAwcHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9LCBbIWN0cmwubENvbnRyaWJ1dGlvbnNQZXJEYXkoKSA/IG0uY29tcG9uZW50KHByb2plY3REYXRhQ2hhcnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogY3RybC5jb250cmlidXRpb25zUGVyRGF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1IkIGFycmVjYWRhZG9zIHBvciBkaWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhS2V5OiAndG90YWxfYW1vdW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXM6IChpdGVtKSA9PiBoLm1vbWVudGlmeShpdGVtLnBhaWRfYXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbXB0eVN0YXRlOiAnQXBvaW9zIG7Do28gY29udGFiaWxpemFkb3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBoLmxvYWRlcigpXSksXG4gICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMTAuZm9udHNpemUtbGFyZ2UudS10ZXh0LWNlbnRlcicsICdEZSBvbmRlIHZlbSBvcyBhcG9pb3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICghY3RybC5sQ29udHJpYnV0aW9uc1BlckxvY2F0aW9uKCkgPyAhXy5pc0VtcHR5KF8ucmVzdChjdHJsLmNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlKSkgPyBtLmNvbXBvbmVudChwcm9qZWN0RGF0YVRhYmxlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGU6IGN0cmwuY29udHJpYnV0aW9uc1BlckxvY2F0aW9uVGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNvcnRJbmRleDogLTJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogJycgOiBoLmxvYWRlcigpKVxuICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgXSkpKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q29udHJpYnV0aW9ucztcbiIsIi8qKlxuICogd2luZG93LmMucHJvamVjdFJlcG9ydCBjb21wb25lbnRcbiAqIFJlbmRlciBwcm9qZWN0IHJlcG9ydCBmb3JtXG4gKlxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5cbmNvbnN0IHByb2plY3RSZXBvcnQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBkaXNwbGF5Rm9ybSA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICBzZW5kU3VjY2VzcyA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBzdWJtaXREaXNhYmxlZCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICB1c2VyID0gaC5nZXRVc2VyKCksXG4gICAgICAgICAgICBlbWFpbCA9IG0ucHJvcCh1c2VyLmVtYWlsKSxcbiAgICAgICAgICAgIGRldGFpbHMgPSBtLnByb3AoJycpLFxuICAgICAgICAgICAgcmVhc29uID0gbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIGwgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgY2hlY2tMb2dpbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5Rm9ybS50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvbG9naW4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZW5kUmVwb3J0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN1Ym1pdERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgICAgIGxldCBsb2FkZXJPcHRzID0gbW9kZWxzLnByb2plY3RSZXBvcnQucG9zdE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwoKSxcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogZGV0YWlscygpLFxuICAgICAgICAgICAgICAgICAgICByZWFzb246IHJlYXNvbigpICxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdF9pZDogaC5nZXRDdXJyZW50UHJvamVjdCgpLnByb2plY3RfaWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihsb2FkZXJPcHRzKTtcblxuICAgICAgICAgICAgICAgIGwubG9hZCgpLnRoZW4oc2VuZFN1Y2Nlc3ModHJ1ZSkpO1xuICAgICAgICAgICAgICAgIHN1Ym1pdERpc2FibGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGVja0xvZ2luOiBjaGVja0xvZ2luLFxuICAgICAgICAgICAgZGlzcGxheUZvcm06IGRpc3BsYXlGb3JtLFxuICAgICAgICAgICAgc2VuZFN1Y2Nlc3M6IHNlbmRTdWNjZXNzLFxuICAgICAgICAgICAgc3VibWl0RGlzYWJsZWQ6IHN1Ym1pdERpc2FibGVkLFxuICAgICAgICAgICAgc2VuZFJlcG9ydDogc2VuZFJlcG9ydCxcbiAgICAgICAgICAgIHVzZXI6IHVzZXIsXG4gICAgICAgICAgICBlbWFpbDogZW1haWwsXG4gICAgICAgICAgICBkZXRhaWxzOiBkZXRhaWxzLFxuICAgICAgICAgICAgcmVhc29uOiByZWFzb25cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBjdHJsLnVzZXI7XG4gICAgICAgIHJldHVybiBtKCcuY2FyZC5jYXJkLXRlcmNpYXJ5LnUtcmFkaXVzJyxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0yMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdFc3RlIHByb2pldG8gZGVzcmVzcGVpdGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVxcJ2h0dHA6Ly9zdXBvcnRlLmNhdGFyc2UubWUvaGMvcHQtYnIvYXJ0aWNsZXMvMjAyMzg3NjM4XFwnXVt0YXJnZXQ9XFwnX2JsYW5rXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25vc3NhcyByZWdyYXM/ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgY3RybC5zZW5kU3VjY2VzcygpID9cbiAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybScsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ09icmlnYWRvISBBIHN1YSBkZW7Dum5jaWEgZm9pIHJlY2ViaWRhLidcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICApIDpcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuYS53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnkuYnRuLWlubGluZVtocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddJyx7b25jbGljazogY3RybC5jaGVja0xvZ2lufSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdEZW51bmNpYXIgZXN0ZSBwcm9qZXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgY3RybC5kaXNwbGF5Rm9ybSgpID8gbSgnI3JlcG9ydC1mb3JtLnUtbWFyZ2ludG9wLTMwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdmb3JtJywge29uc3VibWl0OiBjdHJsLnNlbmRSZXBvcnR9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1BvciBxdWUgdm9jw6ogZXN0w6EgZGVudW5jaWFuZG8gZXN0ZSBwcm9qZXRvPydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzZWxlY3Qudy1zZWxlY3QudGV4dC1maWVsZC5wb3NpdGl2ZVtyZXF1aXJlZD1cXCdyZXF1aXJlZFxcJ10nLCB7b25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5yZWFzb24pfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTZWxlY2lvbmUgdW0gbW90aXZvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ1Zpb2xhw6fDo28gZGUgcHJvcHJpZWRhZGUgaW50ZWxlY3R1YWxcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdWaW9sYcOnw6NvIGRlIHByb3ByaWVkYWRlIGludGVsZWN0dWFsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ0NhbMO6bmlhLCBpbmrDunJpYSwgZGlmYW1hw6fDo28gb3UgZGlzY3JpbWluYcOnw6NvXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ2Fsw7puaWEsIGluasO6cmlhLCBkaWZhbWHDp8OjbyBvdSBkaXNjcmltaW5hw6fDo28nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnRXNjb3BvIGRlIHByb2pldG8gcHJvaWJpZG9cXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdFc2NvcG8gZGUgcHJvamV0byBwcm9pYmlkbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdSZWNvbXBlbnNhcyBwcm9pYmlkYXNcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSZWNvbXBlbnNhcyBwcm9pYmlkYXMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnQ2VuYXMgZGUgc2V4byBleHBsw61jaXRhcyBlIGdyYXR1aXRhc1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NlbmFzIGRlIHNleG8gZXhwbMOtY2l0YXMgZSBncmF0dWl0YXMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnQWJ1c28gZGUgU1BBTVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FidXNvIGRlIFNQQU0nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnT3V0cm9zXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnT3V0cm9zJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3RleHRhcmVhLnctaW5wdXQudGV4dC1maWVsZC5wb3NpdGl2ZS51LW1hcmdpbmJvdHRvbS0zMCcsIHtwbGFjZWhvbGRlcjogJ1BvciBmYXZvciwgZMOqIG1haXMgZGV0YWxoZXMgcXVlIG5vcyBhanVkZW0gYSBpZGVudGlmaWNhciBvIHByb2JsZW1hJywgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5kZXRhaWxzKX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1idXR0b24uYnRuLmJ0bi1tZWRpdW0uYnRuLWlubGluZS5idG4tZGFya1t0eXBlPVxcJ3N1Ym1pdFxcJ11bdmFsdWU9XFwnRW52aWFyIGRlbsO6bmNpYVxcJ10nLCB7ZGlzYWJsZWQ6IGN0cmwuc3VibWl0RGlzYWJsZWQoKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKSA6ICcnXVxuXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFJlcG9ydDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcHJvamVjdFJld2FyZExpc3QgZnJvbSAnLi9wcm9qZWN0LXJld2FyZC1saXN0JztcbmltcG9ydCBwcm9qZWN0UmVwb3J0IGZyb20gJy4vcHJvamVjdC1yZXBvcnQnO1xuaW1wb3J0IHByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zIGZyb20gJy4vcHJvamVjdC1zdWdnZXN0ZWQtY29udHJpYnV0aW9ucyc7XG5cbmNvbnN0IHByb2plY3RBYm91dCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCgpIHx8IHt9LFxuICAgICAgICAgICAgb25saW5lRGF5cyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZGlmZiA9IG1vbWVudChwcm9qZWN0LnpvbmVfb25saW5lX2RhdGUpLmRpZmYobW9tZW50KHByb2plY3Quem9uZV9leHBpcmVzX2F0KSksXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gbW9tZW50LmR1cmF0aW9uKGRpZmYpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIC1NYXRoLmNlaWwoZHVyYXRpb24uYXNEYXlzKCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgbGV0IGZ1bmRpbmdQZXJpb2QgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHByb2plY3QuaXNfcHVibGlzaGVkICYmIGguZXhpc3R5KHByb2plY3Quem9uZV9leHBpcmVzX2F0KSkgPyBtKCcuZnVuZGluZy1wZXJpb2QnLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgJ1BlcsOtb2RvIGRlIGNhbXBhbmhhJyksXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLnUtdGV4dC1jZW50ZXItc21hbGwtb25seScsIGAke2gubW9tZW50aWZ5KHByb2plY3Quem9uZV9vbmxpbmVfZGF0ZSl9IC0gJHtoLm1vbWVudGlmeShwcm9qZWN0LnpvbmVfZXhwaXJlc19hdCl9ICgke29ubGluZURheXMoKX0gZGlhcylgKVxuICAgICAgICAgICAgXSkgOiAnJztcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3QtYWJvdXQnLCBbXG4gICAgICAgICAgICBtKCcucHJvamVjdC1hYm91dC53LWNvbC53LWNvbC04Jywge1xuICAgICAgICAgICAgICAgIGNvbmZpZzogaC5VSUhlbHBlcigpXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1iYXNlJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdzdHJvbmcnLCAnTyBwcm9qZXRvJyksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2VbaXRlbXByb3A9XCJhYm91dFwiXScsIG0udHJ1c3QoaC5zZWxmT3JFbXB0eShwcm9qZWN0LmFib3V0X2h0bWwsICcuLi4nKSkpLFxuICAgICAgICAgICAgICAgIHByb2plY3QuYnVkZ2V0ID8gW1xuICAgICAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZCcsICdPcsOnYW1lbnRvJyksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtYmFzZScsIG0udHJ1c3QocHJvamVjdC5idWRnZXQpKVxuICAgICAgICAgICAgICAgIF0gOiAnJyxcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0UmVwb3J0KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgIV8uaXNFbXB0eShhcmdzLnJld2FyZERldGFpbHMoKSkgPyBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0zMCcsICdSZWNvbXBlbnNhcycpLFxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3RSZXdhcmRMaXN0LCB7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IGFyZ3MucHJvamVjdCxcbiAgICAgICAgICAgICAgICAgICAgcmV3YXJkRGV0YWlsczogYXJncy5yZXdhcmREZXRhaWxzXG4gICAgICAgICAgICAgICAgfSksIGZ1bmRpbmdQZXJpb2QoKVxuICAgICAgICAgICAgXSA6IFtcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTMwJywgJ1N1Z2VzdMO1ZXPCoGRlwqBhcG9pbycpLFxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zLCB7cHJvamVjdDogYXJncy5wcm9qZWN0fSksXG4gICAgICAgICAgICAgICAgZnVuZGluZ1BlcmlvZCgpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0QWJvdXQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RSZXBvcnQgZnJvbSAnLi9wcm9qZWN0LXJlcG9ydCc7XG5cbmNvbnN0IHByb2plY3RDb21tZW50cyA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICBjb25zdCBsb2FkQ29tbWVudHMgPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXNJbml0aWFsaXplZCkge3JldHVybjt9XG4gICAgICAgICAgICAgICAgaC5mYlBhcnNlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7bG9hZENvbW1lbnRzOiBsb2FkQ29tbWVudHN9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QoKTtcbiAgICAgICAgcmV0dXJuIG0oJy53LXJvdycsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC03JyxcbiAgICAgICAgICAgICAgICBtKCcuZmItY29tbWVudHNbZGF0YS1ocmVmPVwiaHR0cDovL3d3dy5jYXRhcnNlLm1lLycgKyBwcm9qZWN0LnBlcm1hbGluayArICdcIl1bZGF0YS1udW0tcG9zdHM9NTBdW2RhdGEtd2lkdGg9XCI2MTBcIl0nLCB7Y29uZmlnOiBjdHJsLmxvYWRDb21tZW50cygpfSlcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnLCBtLmNvbXBvbmVudChwcm9qZWN0UmVwb3J0KSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RDb21tZW50cztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBwcm9qZWN0UG9zdHMgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGxpc3RWTSA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnByb2plY3RQb3N0RGV0YWlsKSxcbiAgICAgICAgICAgIGZpbHRlclZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgICAgICAgICAgcHJvamVjdF9pZDogJ2VxJyxcbiAgICAgICAgICAgICAgICBpZDogJ2VxJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZmlsdGVyVk0ucHJvamVjdF9pZChhcmdzLnByb2plY3QoKS5pZCk7XG5cbiAgICAgICAgaWYgKF8uaXNOdW1iZXIoYXJncy5wb3N0X2lkKSkge1xuICAgICAgICAgICAgZmlsdGVyVk0uaWQoYXJncy5wb3N0X2lkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbGlzdFZNLmNvbGxlY3Rpb24oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UoZmlsdGVyVk0ucGFyYW1ldGVycygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsaXN0Vk06IGxpc3RWTSxcbiAgICAgICAgICAgIGZpbHRlclZNOiBmaWx0ZXJWTVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBjdHJsLmxpc3RWTSxcbiAgICAgICAgICAgIHByb2plY3QgPSBhcmdzLnByb2plY3QoKSB8fCB7fTtcblxuICAgICAgICByZXR1cm4gbSgnLnByb2plY3QtcG9zdHMudy1zZWN0aW9uJywgW1xuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtbWFyZ2ludG9wLTIwJywgW1xuICAgICAgICAgICAgICAgIChwcm9qZWN0LmlzX293bmVyX29yX2FkbWluID8gW1xuICAgICAgICAgICAgICAgICAgICAoIWxpc3QuaXNMb2FkaW5nKCkpID9cbiAgICAgICAgICAgICAgICAgICAgKF8uaXNFbXB0eShsaXN0LmNvbGxlY3Rpb24oKSkgPyBtKCcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTMwLnUtbWFyZ2ludG9wLTIwJywgJ1RvZGEgbm92aWRhZGUgcHVibGljYWRhIG5vIENhdGFyc2Ugw6kgZW52aWFkYSBkaXJldGFtZW50ZSBwYXJhIG8gZW1haWwgZGUgcXVlbSBqw6EgYXBvaW91IHNldSBwcm9qZXRvIGUgdGFtYsOpbSBmaWNhIGRpc3BvbsOtdmVsIHBhcmEgdmlzdWFsaXphw6fDo28gbm8gc2l0ZS4gVm9jw6ogcG9kZSBvcHRhciBwb3IgZGVpeMOhLWxhIHDDumJsaWNhLCBvdSB2aXPDrXZlbCBzb21lbnRlIHBhcmEgc2V1cyBhcG9pYWRvcmVzIGFxdWkgbmVzdGEgYWJhLicpXG4gICAgICAgICAgICAgICAgICAgIF0pIDogJycpIDogJycsXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmJ0bi5idG4tZWRpdC5idG4tc21hbGxbaHJlZj0nL3B0L3Byb2plY3RzLyR7cHJvamVjdC5pZH0vZWRpdCNwb3N0cyddYCwgJ0VzY3JldmVyIG5vdmlkYWRlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnKSxcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdIDogJycpLCAoXy5tYXAobGlzdC5jb2xsZWN0aW9uKCksIChwb3N0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5wb3N0JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tNjAgLnctY2xlYXJmaXgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udGNvbG9yLXNlY29uZGFyeS51LXRleHQtY2VudGVyJywgaC5tb21lbnRpZnkocG9zdC5jcmVhdGVkX2F0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdwLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2VyLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tMzAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5saW5rLWhpZGRlbltocmVmPVwiL3Byb2plY3RzLyR7cG9zdC5wcm9qZWN0X2lkfS9wb3N0cy8ke3Bvc3QuaWR9I3Bvc3RzXCJdYCwgcG9zdC50aXRsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFfLmlzRW1wdHkocG9zdC5jb21tZW50X2h0bWwpID8gbSgnLmZvbnRzaXplLWJhc2UnLCBtLnRydXN0KHBvc3QuY29tbWVudF9odG1sKSkgOiBtKCcuZm9udHNpemUtYmFzZScsICdQb3N0IGV4Y2x1c2l2byBwYXJhIGFwb2lhZG9yZXMuJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbmJvdHRvbS02MCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEnKVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1wdXNoLTUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAoIV8uaXNVbmRlZmluZWQoYXJncy5wb3N0X2lkKSA/ICcnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAoIWxpc3QuaXNMb2FkaW5nKCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAobGlzdC5pc0xhc3RQYWdlKCkgPyAnTmVuaHVtYSBub3ZpZGFkZS4nIDogbSgnYnV0dG9uI2xvYWQtbW9yZS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBsaXN0Lm5leHRQYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdDYXJyZWdhciBtYWlzJykpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaC5sb2FkZXIoKSkpLFxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFBvc3RzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RSZXdhcmRMaXN0IGZyb20gJy4vcHJvamVjdC1yZXdhcmQtbGlzdCc7XG5pbXBvcnQgcHJvamVjdFN1Z2dlc3RlZENvbnRyaWJ1dGlvbnMgZnJvbSAnLi9wcm9qZWN0LXN1Z2dlc3RlZC1jb250cmlidXRpb25zJztcbmltcG9ydCBwcm9qZWN0Q29udHJpYnV0aW9ucyBmcm9tICcuL3Byb2plY3QtY29udHJpYnV0aW9ucyc7XG5pbXBvcnQgcHJvamVjdEFib3V0IGZyb20gJy4vcHJvamVjdC1hYm91dCc7XG5pbXBvcnQgcHJvamVjdENvbW1lbnRzIGZyb20gJy4vcHJvamVjdC1jb21tZW50cyc7XG5pbXBvcnQgcHJvamVjdFBvc3RzIGZyb20gJy4vcHJvamVjdC1wb3N0cyc7XG5cbmNvbnN0IHByb2plY3RNYWluID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBoYXNoID0gbS5wcm9wKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSxcbiAgICAgICAgICAgICAgZGlzcGxheVRhYkNvbnRlbnQgPSAocHJvamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY19vcHRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXG4gICAgICAgICAgICAgICAgICAgICAgcG9zdF9pZDogYXJncy5wb3N0X2lkXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFicyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI3Jld2FyZHMnOiBtKCcudy1jb2wudy1jb2wtMTInLCBtLmNvbXBvbmVudChwcm9qZWN0UmV3YXJkTGlzdCwgXy5leHRlbmQoe30sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV3YXJkRGV0YWlsczogYXJncy5yZXdhcmREZXRhaWxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgY19vcHRzKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjY29udHJpYnV0aW9uX3N1Z2dlc3Rpb25zJzogbS5jb21wb25lbnQocHJvamVjdFN1Z2dlc3RlZENvbnRyaWJ1dGlvbnMsIGNfb3B0cyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNjb250cmlidXRpb25zJzogbS5jb21wb25lbnQocHJvamVjdENvbnRyaWJ1dGlvbnMsIGNfb3B0cyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNhYm91dCc6IG0uY29tcG9uZW50KHByb2plY3RBYm91dCwgXy5leHRlbmQoe30sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV3YXJkRGV0YWlsczogYXJncy5yZXdhcmREZXRhaWxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgY19vcHRzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNjb21tZW50cyc6IG0uY29tcG9uZW50KHByb2plY3RDb21tZW50cywgY19vcHRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI3Bvc3RzJzogbS5jb21wb25lbnQocHJvamVjdFBvc3RzLCBjX29wdHMpXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICBpZiAoXy5pc051bWJlcihhcmdzLnBvc3RfaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAncG9zdHMnO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBoYXNoKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShoYXNoKCkpIHx8IGhhc2goKSA9PT0gJyNfPV8nIHx8IGhhc2goKSA9PT0gJyNwcmV2aWV3Jykge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJzWycjYWJvdXQnXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYnNbaGFzaCgpXTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICBoLnJlZHJhd0hhc2hDaGFuZ2UoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcGxheVRhYkNvbnRlbnQ6IGRpc3BsYXlUYWJDb250ZW50LFxuICAgICAgICAgICAgaGFzaDogaGFzaFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCdzZWN0aW9uLnNlY3Rpb25baXRlbXR5cGU9XCJodHRwOi8vc2NoZW1hLm9yZy9DcmVhdGl2ZVdvcmtcIl0nLCBbXG4gICAgICAgICAgICBtKGAke2N0cmwuaGFzaCgpICE9PSAnI2NvbnRyaWJ1dGlvbnMnID8gJy53LWNvbnRhaW5lcicgOiAnLmFib3V0LXRhYi1jb250ZW50J31gLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctcm93JywgYXJncy5wcm9qZWN0KCkgPyBjdHJsLmRpc3BsYXlUYWJDb250ZW50KGFyZ3MucHJvamVjdCkgOiBoLmxvYWRlcigpKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdE1haW47XG4iLCIvLyBUT0RPOiBNYWtlIHdvcmsgd2hlbiBkaXJlY3RseSBsb2FkZWRcbi8vIFRPRE86IE1ha2UgaXQgY2hvb3NlIHRoZSByaWdodCByZXdhcmQgd2hlbiBzZW5kaW5nIHRvIGNvbnRyaWJ1dGlvbnMvbmV3XG4vLyBUT0RPOiBNYWtlIHN1cmUgaW50ZXIgcm91dGluZyB3b3Jrc1xuLy8gVE9ETzogQWRkIFRoYW5rIFlvdSBQYWdlXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcHJvamVjdFZNIGZyb20gJy4uL3Ztcy9wcm9qZWN0LXZtJztcbmltcG9ydCByZXdhcmRWTSBmcm9tICcuLi92bXMvcmV3YXJkLXZtJztcbmltcG9ydCBwcm9qZWN0SGVhZGVyIGZyb20gJy4uL2MvcHJvamVjdC1oZWFkZXInO1xuaW1wb3J0IHByb2plY3RUYWJzIGZyb20gJy4uL2MvcHJvamVjdC10YWJzJztcbmltcG9ydCBwcm9qZWN0TWFpbiBmcm9tICcuLi9jL3Byb2plY3QtbWFpbic7XG5pbXBvcnQgcHJvamVjdERhc2hib2FyZE1lbnUgZnJvbSAnLi4vYy9wcm9qZWN0LWRhc2hib2FyZC1tZW51JztcblxuY29uc3QgcHJvamVjdHNTaG93ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCB7cHJvamVjdF9pZCwgcHJvamVjdF91c2VyX2lkfSA9IGFyZ3M7XG5cbiAgICAgICAgaC5hbmFseXRpY3Mud2luZG93U2Nyb2xsKHtjYXQ6ICdwcm9qZWN0X3ZpZXcnLGFjdDogJ3Byb2plY3RfcGFnZV9zY3JvbGwnfSk7XG4gICAgICAgIFxuXG4gICAgICAgIGlmIChwcm9qZWN0X2lkKSB7XG4gICAgICAgICAgICBwcm9qZWN0Vk0uaW5pdChwcm9qZWN0X2lkLCBwcm9qZWN0X3VzZXJfaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvamVjdFZNLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvamVjdFZNO1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBjdHJsLmN1cnJlbnRQcm9qZWN0KCkgPyBjdHJsLmN1cnJlbnRQcm9qZWN0IDogbS5wcm9wKHt9KTtcblxuICAgICAgICByZXR1cm4gbSgnLnByb2plY3Qtc2hvdycsIFtcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0SGVhZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXG4gICAgICAgICAgICAgICAgICAgIHJld2FyZERldGFpbHM6IGN0cmwucmV3YXJkRGV0YWlscyxcbiAgICAgICAgICAgICAgICAgICAgdXNlckRldGFpbHM6IGN0cmwudXNlckRldGFpbHNcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0VGFicywge1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICByZXdhcmREZXRhaWxzOiBjdHJsLnJld2FyZERldGFpbHNcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0TWFpbiwge1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICBwb3N0X2lkOiBhcmdzLnBvc3RfaWQsXG4gICAgICAgICAgICAgICAgICAgIHJld2FyZERldGFpbHM6IGN0cmwucmV3YXJkRGV0YWlsc1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChwcm9qZWN0KCkgJiYgcHJvamVjdCgpLmlzX293bmVyX29yX2FkbWluID8gbS5jb21wb25lbnQocHJvamVjdERhc2hib2FyZE1lbnUsIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdFxuICAgICAgICAgICAgICAgIH0pIDogJycpXG4gICAgICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0c1Nob3c7XG4iLCJpbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgdXNlcnNWTSBmcm9tICcuL3VzZXItdm0nO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5jb25zdCBwYXltZW50Vk0gPSAobW9kZSkgPT4ge1xuICAgIGNvbnN0IGZpZWxkcyA9IHtcbiAgICAgICAgICAgIGNvbXBsZXRlTmFtZSAgOiBtLnByb3AoJycpLFxuICAgICAgICAgICAgZW1haWwgOiBtLnByb3AoJycpLFxuICAgICAgICAgICAgYW5vbnltb3VzIDogbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIGNvdW50cmllcyA6IG0ucHJvcCgpLFxuICAgICAgICAgICAgdXNlckNvdW50cnlJZCA6IG0ucHJvcCgpLFxuICAgICAgICAgICAgemlwQ29kZSA6IG0ucHJvcCgnJyksXG4gICAgICAgICAgICBzdHJlZXQgOiBtLnByb3AoJycpLFxuICAgICAgICAgICAgbnVtYmVyIDogbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIGFkZHJlc3NDb21wbGVtZW50IDogbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIG5laWdoYm91cmhvb2QgOiBtLnByb3AoJycpLFxuICAgICAgICAgICAgY2l0eSA6IG0ucHJvcCgnJyksXG4gICAgICAgICAgICBzdGF0ZXMgOiBtLnByb3AoW10pLFxuICAgICAgICAgICAgdXNlclN0YXRlIDogbS5wcm9wKCksXG4gICAgICAgICAgICBvd25lckRvY3VtZW50IDogbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIHBob25lIDogbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIGVycm9yczogbS5wcm9wKFtdKVxuICAgICAgICB9LFxuICAgICAgICBmYXEgPSBJMThuLnRyYW5zbGF0aW9uc1tJMThuLmN1cnJlbnRMb2NhbGUoKV0ucHJvamVjdHMuZmFxW21vZGVdLFxuICAgICAgICBjdXJyZW50VXNlciA9IGguZ2V0VXNlcigpLFxuICAgICAgICBjb3VudHJpZXNMb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyKG1vZGVscy5jb3VudHJ5LmdldFBhZ2VPcHRpb25zKCkpLFxuICAgICAgICBzdGF0ZXNMb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyKG1vZGVscy5zdGF0ZS5nZXRQYWdlT3B0aW9ucygpKTtcblxuXG4gICAgY29uc3QgcG9wdWxhdGVGb3JtID0gKGZldGNoZWREYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBfLmZpcnN0KGZldGNoZWREYXRhKTtcblxuICAgICAgICBmaWVsZHMuY29tcGxldGVOYW1lKGRhdGEubmFtZSk7XG4gICAgICAgIGZpZWxkcy5lbWFpbChkYXRhLmVtYWlsKTtcbiAgICAgICAgZmllbGRzLmNpdHkoZGF0YS5hZGRyZXNzLmNpdHkpO1xuICAgICAgICBmaWVsZHMuemlwQ29kZShkYXRhLmFkZHJlc3MuemlwY29kZSk7XG4gICAgICAgIGZpZWxkcy5zdHJlZXQoZGF0YS5hZGRyZXNzLnN0cmVldCk7XG4gICAgICAgIGZpZWxkcy5udW1iZXIoZGF0YS5hZGRyZXNzLm51bWJlcik7XG4gICAgICAgIGZpZWxkcy5hZGRyZXNzQ29tcGxlbWVudChkYXRhLmFkZHJlc3MuY29tcGxlbWVudCk7XG4gICAgICAgIGZpZWxkcy51c2VyU3RhdGUoZGF0YS5hZGRyZXNzLnN0YXRlKTtcbiAgICAgICAgZmllbGRzLnVzZXJDb3VudHJ5SWQoZGF0YS5hZGRyZXNzLmNvdW50cnlfaWQpO1xuICAgICAgICBmaWVsZHMub3duZXJEb2N1bWVudChkYXRhLm93bmVyX2RvY3VtZW50KTtcbiAgICAgICAgZmllbGRzLnBob25lKGRhdGEuYWRkcmVzcy5waG9uZW51bWJlcik7XG4gICAgICAgIGZpZWxkcy5uZWlnaGJvdXJob29kKGRhdGEuYWRkcmVzcy5uZWlnaGJvdXJob29kKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaXNJbnRlcm5hdGlvbmFsID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gIV8uaXNFbXB0eShmaWVsZHMuY291bnRyaWVzKCkpID8gZmllbGRzLnVzZXJDb3VudHJ5SWQoKSAhPSBfLmZpbmRXaGVyZShmaWVsZHMuY291bnRyaWVzKCksIHtuYW1lOiAnQnJhc2lsJ30pLmlkIDogZmFsc2U7XG4gICAgfTtcblxuICAgIGNvbnN0IGNoZWNrRW1wdHlGaWVsZHMgPSAoY2hlY2tlZEZpZWxkcykgPT4ge1xuICAgICAgICByZXR1cm4gXy5tYXAoY2hlY2tlZEZpZWxkcywgKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICBpZihfLmlzRW1wdHkoU3RyaW5nKGZpZWxkc1tmaWVsZF0oKSkudHJpbSgpKSkge1xuICAgICAgICAgICAgICAgIGZpZWxkcy5lcnJvcnMoKS5wdXNoKHtmaWVsZDogZmllbGQsIG1lc3NhZ2U6ICdPIGNhbXBvIG7Do28gcG9kZSBzZXIgdmF6aW8uJ30pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgY2hlY2tFbWFpbCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaXNWYWxpZCA9IGgudmFsaWRhdGVFbWFpbChmaWVsZHMuZW1haWwoKSk7XG5cbiAgICAgICAgaWYoIWlzVmFsaWQpe1xuICAgICAgICAgICAgZmllbGRzLmVycm9ycygpLnB1c2goe2ZpZWxkOiAnZW1haWwnLCBtZXNzYWdlOiAnRS1tYWlsIGludsOhbGlkby4nfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgY2hlY2tEb2N1bWVudCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaXNWYWxpZCA9IGgudmFsaWRhdGVDcGYoZmllbGRzLm93bmVyRG9jdW1lbnQoKS5yZXBsYWNlKC9bXFwufFxcLV0qL2csJycpKTtcblxuICAgICAgICBpZighaXNWYWxpZCl7XG4gICAgICAgICAgICBmaWVsZHMuZXJyb3JzKCkucHVzaCh7ZmllbGQ6ICdvd25lckRvY3VtZW50JywgbWVzc2FnZTogJ0NQRiBpbnbDoWxpZG8uJ30pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRhdGUgPSAoKSA9PiB7XG4gICAgICAgIGZpZWxkcy5lcnJvcnMoW10pO1xuXG4gICAgICAgIGNoZWNrRW1wdHlGaWVsZHMoWydjb21wbGV0ZU5hbWUnLCAnc3RyZWV0JywgJ251bWJlcicsICduZWlnaGJvdXJob29kJywgJ2NpdHknXSk7XG5cbiAgICAgICAgY2hlY2tFbWFpbCgpO1xuXG4gICAgICAgIGlmKCFpc0ludGVybmF0aW9uYWwoKSl7XG4gICAgICAgICAgICBjaGVja0VtcHR5RmllbGRzKFsncGhvbmUnXSk7XG4gICAgICAgICAgICBjaGVja0RvY3VtZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXy5pc0VtcHR5KGZpZWxkcy5lcnJvcnMoKSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHJlc2V0RmllbGRFcnJvciA9IChmaWVsZE5hbWUpID0+ICgpID0+IHtcbiAgICAgICAgY29uc3QgZXJyb3JzID0gZmllbGRzLmVycm9ycygpLFxuICAgICAgICAgICAgZXJyb3JGaWVsZCA9IF8uZmluZFdoZXJlKGZpZWxkcy5lcnJvcnMoKSwge2ZpZWxkOiBmaWVsZE5hbWV9KSxcbiAgICAgICAgICAgIG5ld0Vycm9ycyA9IF8uY29tcG9zZShmaWVsZHMuZXJyb3JzLCBfLndpdGhvdXQpO1xuXG4gICAgICAgIHJldHVybiBuZXdFcnJvcnMoZmllbGRzLmVycm9ycygpLCBlcnJvckZpZWxkKTtcbiAgICB9O1xuXG4gICAgY291bnRyaWVzTG9hZGVyLmxvYWQoKS50aGVuKGZpZWxkcy5jb3VudHJpZXMpO1xuICAgIHN0YXRlc0xvYWRlci5sb2FkKCkudGhlbihmaWVsZHMuc3RhdGVzKTtcbiAgICB1c2Vyc1ZNLmZldGNoVXNlcihjdXJyZW50VXNlci51c2VyX2lkLCBmYWxzZSkudGhlbihwb3B1bGF0ZUZvcm0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmllbGRzOiBmaWVsZHMsXG4gICAgICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSxcbiAgICAgICAgaXNJbnRlcm5hdGlvbmFsOiBpc0ludGVybmF0aW9uYWwsXG4gICAgICAgIHJlc2V0RmllbGRFcnJvcjogcmVzZXRGaWVsZEVycm9yLFxuICAgICAgICBmYXE6IGZhcVxuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXltZW50Vk07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IHVzZXJWTSBmcm9tICcuLi92bXMvdXNlci12bSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuZmFxJyk7XG5cbmNvbnN0IGZhcUJveCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IGFyZ3MubW9kZSxcbiAgICAgICAgICAgIHF1ZXN0aW9ucyA9IGFyZ3MuZmFxLnF1ZXN0aW9ucyxcbiAgICAgICAgICAgIHNlbGVjdGVkUXVlc3Rpb24gPSBtLnByb3AoLTEpLFxuICAgICAgICAgICAgc2NvcGVkUXVlc3Rpb25zID0gbS5wcm9wKHF1ZXN0aW9ucyk7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0UXVlc3Rpb24gPSAoaWR4KSA9PiAoKSA9PiBzZWxlY3RlZFF1ZXN0aW9uKGlkeCk7XG5cbiAgICAgICAgY29uc3QgdXBkYXRlUXVlc3Rpb25zRGF0YSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICAvL1Jld3JpdGVzIHF1ZXN0aW9ucyBmcm9tIHRyYW5zbGF0ZSB3aXRoIHByb3BlciBzY29wZVxuICAgICAgICAgICAgY29uc3QgdXNlciA9IGRhdGFbMF07XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkUXVlc3Rpb25zID0gXy5tYXAocXVlc3Rpb25zLCAocXVlc3QsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiBxdWVzdC5xdWVzdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiBJMThuLnQoYCR7bW9kZX0ucXVlc3Rpb25zLiR7aWR4fS5hbnN3ZXJgLCBJMThuU2NvcGUoe3VzZXJMaW5rOiBgL3VzZXJzLyR7dXNlci5pZH1gLCB1c2VyTmFtZTogdXNlci5uYW1lfSkpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzY29wZWRRdWVzdGlvbnModXBkYXRlZFF1ZXN0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdXNlclZNLmZldGNoVXNlcihhcmdzLnByb2plY3RVc2VySWQsIGZhbHNlKS50aGVuKHVwZGF0ZVF1ZXN0aW9uc0RhdGEpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY29wZWRRdWVzdGlvbnM6IHNjb3BlZFF1ZXN0aW9ucyxcbiAgICAgICAgICAgIHNlbGVjdFF1ZXN0aW9uOiBzZWxlY3RRdWVzdGlvbixcbiAgICAgICAgICAgIHNlbGVjdGVkUXVlc3Rpb246IHNlbGVjdGVkUXVlc3Rpb25cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuY2FyZC51LXJhZGl1cycsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgICBtKFwiLnctcm93LnUtbWFyZ2luYm90dG9tLTMwXCIsXG4gICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgIG0oXCIudy1jb2wudy1jb2wtMi53LWNvbC1zbWFsbC0yLnctY29sLXRpbnktMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJpbWdbd2lkdGg9JzMwJ11cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IGFyZ3MubW9kZSA9PT0gJ2FvbicgPyAnL2Fzc2V0cy9hb24tYmFkZ2UucG5nJyA6ICcvYXNzZXRzL2ZsZXgtYmFkZ2UucG5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgbShcIi53LWNvbC53LWNvbC0xMC53LWNvbC1zbWFsbC0xMC53LWNvbC10aW55LTEwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgbShcIi53LWlubGluZS1ibG9jay5mb250c2l6ZS1zbWFsbGVzdC53LWlubGluZS1ibG9jay5mb250Y29sb3Itc2Vjb25kYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MuZmFxLmRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICBtKFwiLnUtbWFyZ2luYm90dG9tLTIwLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGRcIixcbiAgICAgICAgICAgICAgICBcIkTDunZpZGFzIGZyZXF1ZW50ZXNcIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG0oJ3VsLnctbGlzdC11bnN0eWxlZCcsXG4gICAgICAgICAgICAgICAgXy5tYXAoY3RybC5zY29wZWRRdWVzdGlvbnMoKSwgKHF1ZXN0aW9uLCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xpLmZvbnRzaXplLXNtYWxsZXIuYWx0LWxpbmsubGlzdC1xdWVzdGlvbicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnNlbGVjdFF1ZXN0aW9uKGlkeClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG0oJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmFxLWJveC1hcnJvdycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCAke3F1ZXN0aW9uLnF1ZXN0aW9ufWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdsaS5saXN0LWFuc3dlcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5zZWxlY3RlZFF1ZXN0aW9uKCkgPT09IGlkeCA/ICdsaXN0LWFuc3dlci1vcGVuZWQnIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG0oJ3AuZm9udHNpemUtc21hbGxlcicsIG0udHJ1c3QocXVlc3Rpb24uYW5zd2VyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgXVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZhcUJveDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgdG9vbHRpcCBmcm9tICcuL3Rvb2x0aXAnO1xuXG5jb25zdCBwYXltZW50Rm9ybSA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICBjb25zdCBidWlsZFRvb2x0aXAgPSAodG9vbHRpcFRleHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudCh0b29sdGlwLCB7XG4gICAgICAgICAgICAgICAgZWw6ICcudG9vbHRpcC13cmFwcGVyLmZhLmZhLXF1ZXN0aW9uLWNpcmNsZS5mb250Y29sb3Itc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0b29sdGlwVGV4dCxcbiAgICAgICAgICAgICAgICB3aWR0aDogMzgwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYnVpbGRUb29sdGlwOiBidWlsZFRvb2x0aXAsXG4gICAgICAgICAgICB0b2dnbGVCb2xldG86IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSlcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnW2lkPVxcJ3N0ZXAyXFwnXScsIFtcbiAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLXNtYWxsLW9ubHkudS1tYXJnaW5ib3R0b20tMzAnLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLFxuICAgICAgICAgICAgICAgICAgICAnRXNjb2xoYSBvIG1laW8gZGUgcGFnYW1lbnRvJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnkuZm9udHdlaWdodC1zZW1pYm9sZCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1sb2NrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICcuJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAnIFBBR0FNRU5UTyBTRUdVUk8nXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLmZsZXgtcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgIG0oJ2Eudy1pbmxpbmUtYmxvY2suYnRuLXNlbGVjdC5mbGV4LWNvbHVtbi51LXRleHQtY2VudGVyW2hyZWY9XFwnamF2YXNjcmlwdDp2b2lkKDApO1xcJ10nLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlQm9sZXRvLnRvZ2dsZSxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICFjdHJsLnRvZ2dsZUJvbGV0bygpID8gJ3NlbGVjdGVkJyA6ICcnXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdDYXJ0w6NvIGRlIGNyw6lkaXRvJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTcyOTliZDhmMzI2YTI0ZDQ4MjhhMGZkX2NyZWRpdC1jYXJkcy5wbmdcXCddJylcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCdhLnctaW5saW5lLWJsb2NrLmJ0bi1zZWxlY3QuZmxleC1jb2x1bW4udS10ZXh0LWNlbnRlcltocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddJywge1xuICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnRvZ2dsZUJvbGV0by50b2dnbGUsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLnRvZ2dsZUJvbGV0bygpID8gJ3NlbGVjdGVkJyA6ICcnXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdCb2xldG8gYmFuY8OhcmlvJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTcyOTljNmVmOTZhNmU0NDQ4OWE3YTA3X2JvbGV0by5wbmdcXCddW3dpZHRoPVxcJzQ4XFwnXScpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLCAhY3RybC50b2dnbGVCb2xldG8oKSA/IG0oJyNjcmVkaXQtY2FyZC1zZWN0aW9uJywgW20oJy53LWZvcm0udS1tYXJnaW5ib3R0b20tNDAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2Zvcm1bZGF0YS1uYW1lPVxcJ0VtYWlsIEZvcm1cXCddW2lkPVxcJ2VtYWlsLWZvcm1cXCddW25hbWU9XFwnZW1haWwtZm9ybVxcJ10nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwuZmllbGQtbGFiZWwuZm9udHdlaWdodC1zZW1pYm9sZFtmb3I9XFwnZW1haWwtNjFcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vbWUgbm8gY2FydMOjbyBkZSBjcsOpZGl0byAqJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci10ZXJjaWFyeS51LW1hcmdpbmJvdHRvbS0xMC5maWVsZC1sYWJlbC10aXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTm9tZSBpbXByZXNzbyBuYSBmcmVudGUgZG8gc2V1IGNhcnTDo28gZGUgY3LDqWRpdG8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWlucHV0LnRleHQtZmllbGRbZGF0YS1uYW1lPVxcJ0VtYWlsIDYxXFwnXVtpZD1cXCdlbWFpbC02MVxcJ11bbmFtZT1cXCdlbWFpbC02MVxcJ11bcmVxdWlyZWQ9XFwncmVxdWlyZWRcXCddW3R5cGU9XFwnZW1haWxcXCddJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPVxcJ2VtYWlsLTY2XFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdOw7ptZXJvIGRvIGNhcnTDo28gZGUgY3LDqWRpdG8gKidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3ItdGVyY2lhcnkudS1tYXJnaW5ib3R0b20tMTAuZmllbGQtbGFiZWwtdGlwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ08gbsO6bWVybyBub3JtYWxtZW50ZSBjb20gMTYgZMOtZ2l0b3MgbmEgZnJlbnRlIGRvIHNldSBjYXJ0w6NvIGRlIGNyw6lkaXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW2RhdGEtbmFtZT1cXCdFbWFpbCA2NlxcJ11baWQ9XFwnZW1haWwtNjZcXCddW25hbWU9XFwnZW1haWwtNjZcXCddW3JlcXVpcmVkPVxcJ3JlcXVpcmVkXFwnXVt0eXBlPVxcJ2VtYWlsXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj1cXCdlbWFpbC03MFxcJ10nLFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0V4cGlyYcOnw6NvIChtbS9hYWFhKSogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5idWlsZFRvb2x0aXAoJ0NvcHkgdG9vbHRpcCBkZSB2YWxpZGFkZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci10ZXJjaWFyeS51LW1hcmdpbmJvdHRvbS0xMC5maWVsZC1sYWJlbC10aXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQSBkYXRhIGRlIHZhbGlkYWRlLCBnZXJhbG1lbnRlIG5hIGZyZW50ZSBkbyBjYXJ0w6NvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNvbC10aW55LTYudy1zdWItY29sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NlbGVjdC53LXNlbGVjdC50ZXh0LWZpZWxkW2lkPVxcJ2ZpZWxkLTJcXCddW25hbWU9XFwnZmllbGQtMlxcJ10nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMDEgLSBKYW5laXJvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ0ZpcnN0XFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcwMiAtIEZldmVyZWlybydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdTZWNvbmRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzAzIC0gTWFyw6dvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ1RoaXJkXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcwNCAtIEFicmlsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMDUgLSBNYWlvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMDYgLSBKdW5obydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNvbC10aW55LTYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc2VsZWN0Lnctc2VsZWN0LnRleHQtZmllbGRbaWQ9XFwnZmllbGQtMlxcJ11bbmFtZT1cXCdmaWVsZC0yXFwnXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcyMDE2J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ0ZpcnN0XFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcyMDE3J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ1NlY29uZFxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMjAxOCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdUaGlyZFxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMjAxOSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPVxcJ2VtYWlsLTY3XFwnXScsW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ8OzZGlnbyBkZSBTZWd1cmFuw6dhIChDVlYgLyBDVlYyKSogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5idWlsZFRvb2x0aXAoJ0NvcHkgdG9vbHRpcCBjw7NkaWdvIGRlIHNlZ3VyYW7Dp2EnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3ItdGVyY2lhcnkudS1tYXJnaW5ib3R0b20tMTAuZmllbGQtbGFiZWwtdGlwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ09zIDMgZMOtZ2l0b3MgKHF1YW5kbyBuYSBmcmVudGUpIG91IDQgZMOtZ2l0b3MgKHF1YW5kbyBhdHLDoXMpIGRvIHNldSBjYXJ0w6NvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC53LWNvbC10aW55LTYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW2RhdGEtbmFtZT1cXCdFbWFpbCA2N1xcJ11baWQ9XFwnZW1haWwtNjdcXCddW25hbWU9XFwnZW1haWwtNjdcXCddW3JlcXVpcmVkPVxcJ3JlcXVpcmVkXFwnXVt0eXBlPVxcJ2VtYWlsXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXRpbnktNi51LXRleHQtY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1tzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NzI5OGMxYzdlOTk5MjZlNzcxMjdiZGRfY3Z2LWNhcmQuanBnXFwnXVt3aWR0aD1cXCcxNzZcXCddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwuZmllbGQtbGFiZWwuZm9udHdlaWdodC1zZW1pYm9sZFtmb3I9XFwnZmllbGRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQYXJjZWxhcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc2VsZWN0Lnctc2VsZWN0LnRleHQtZmllbGRbaWQ9XFwnZmllbGRcXCddW25hbWU9XFwnZmllbGRcXCddJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcxIFggUiQ3NSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnRmlyc3RcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmlyc3QgQ2hvaWNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdTZWNvbmRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU2Vjb25kIENob2ljZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnVGhpcmRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVGhpcmQgQ2hvaWNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuXG4gICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EuYnRuLmJ0bi1sYXJnZS51LW1hcmdpbmJvdHRvbS0yMFtocmVmPVxcJyNcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmluYWxpemFyIHBhZ2FtZW50bydcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQW8gYXBvaWFyLCB2b2PDqiBjb25jb3JkYSBjb20gb3MgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XFwnI1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVGVybW9zIGRlIFVzbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVxcJyNcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1BvbMOtdGljYSBkZSBQcml2YWNpZGFkZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSA6IG0oJyNib2xldG8tc2VjdGlvbicsIFttKCdmb3JtLnNpbXBsZV9mb3JtLmVkaXRfdXNlclthY2NlcHQtY2hhcnNldD1cXCdVVEYtOFxcJ11bYWN0aW9uPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKVxcJ11baWQ9XFwnZWRpdF91c2VyXzM4NzYyMlxcJ11bbWV0aG9kPVxcJ3Bvc3RcXCddW25vdmFsaWRhdGU9XFwnbm92YWxpZGF0ZVxcJ10nLCBbXG4gICAgICAgICAgICAgICAgbSgnZGl2Jywge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnbm9uZSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXRbbmFtZT1cXCd1dGY4XFwnXVt0eXBlPVxcJ2hpZGRlblxcJ11bdmFsdWU9XFwn4pyTXFwnXScpLFxuICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dFtuYW1lPVxcJ19tZXRob2RcXCddW3R5cGU9XFwnaGlkZGVuXFwnXVt2YWx1ZT1cXCdwYXRjaFxcJ10nKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXRbbmFtZT1cXCdhdXRoZW50aWNpdHlfdG9rZW5cXCddW3R5cGU9XFwnaGlkZGVuXFwnXVt2YWx1ZT1cXCdyVTlTUUZoelVrdjhXTGJSZnE5VFlSSFAzRVpLT3VVa09sem1jRVV2OVZBPVxcJ10nKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcucGF5bWVudC1lcnJvci1tZXNzYWdlLmNhcmQuY2FyZC1lcnJvci51LXJhZGl1cy56aW5kZXgtMTAudS1tYXJnaW5ib3R0b20tMzAudy1oaWRkZW4nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIuZm9udHdlaWdodC1ib2xkLnUtbWFyZ2luYm90dG9tLTEwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1ZlcmlmaXF1ZSBvcyBkYWRvcyBpbmZvcm1hZG9zJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLm1lc3NhZ2UtdGV4dC5mb250c2l6ZS1zbWFsbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi50cmFuc2xhdGlvbl9taXNzaW5nW3RpdGxlPVxcJ3RyYW5zbGF0aW9uIG1pc3Npbmc6IHB0LmNhdGFyc2VfcGFnYXJtZS5wYWdhcm1lLnJldmlldy5yZXZpZXdfZXJyb3JzXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUmV2aWV3IEVycm9ycydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW50b3AtMzAudS1tYXJnaW5ib3R0b20tNjAudS1yYWRpdXMuY2FyZC1iaWcuY2FyZCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwudS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRXNzZSBib2xldG8gYmFuY8OhcmlvIHZlbmNlIG5vIGRpYSAyOS8wNi8yMDE2LidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS00MCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBbyBnZXJhciBvIGJvbGV0bywgbyByZWFsaXphZG9yIGrDoSBlc3TDoSBjb250YW5kbyBjb20gbyBzZXUgYXBvaW8uIFBhZ3VlIGF0w6kgYSBkYXRhIGRlIHZlbmNpbWVudG8gcGVsYSBpbnRlcm5ldCwgY2FzYXMgbG90w6lyaWNhcywgY2FpeGFzIGVsZXRyw7RuaWNvcyBvdSBhZ8OqbmNpYSBiYW5jw6FyaWEuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5sb2FkZXIudS10ZXh0LWNlbnRlci53LWNvbC53LWNvbC0xMi51LW1hcmdpbmJvdHRvbS0zMFtpZD1cXCdjYXJkLWxvYWRpbmdcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWdbYWx0PVxcJ0xvYWRlclxcJ11bc3JjPVxcJy9hc3NldHMvY2F0YXJzZV9ib290c3RyYXAvbG9hZGVyLWI2NDJmMmYwMjEyNDU0MDI2YTVjN2M0MDYyMDQyN2MxLmdpZlxcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LmJ0bi5idG4tbGFyZ2UudS1tYXJnaW5ib3R0b20tMjBbaWQ9XFwnYnVpbGRfYm9sZXRvXFwnXVtuYW1lPVxcJ2NvbW1pdFxcJ11bdHlwZT1cXCdzdWJtaXRcXCddW3ZhbHVlPVxcJ0ltcHJpbWlyIGJvbGV0b1xcJ10nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTMwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBbyBhcG9pYXIsIHZvY8OqIGNvbmNvcmRhIGNvbSBvcyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EuYWx0LWxpbmtbaHJlZj1cXCcvcHQvdGVybXMtb2YtdXNlXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdUZXJtb3MgZGUgVXNvICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVxcJy9wdC9wcml2YWN5LXBvbGljeVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUG9sw610aWNhIGRlIFByaXZhY2lkYWRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKV0pXG5cbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF5bWVudEZvcm07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuY29uc3QgaW5saW5lRXJyb3IgPSB7XG4gIHZpZXcoY3RybCwgYXJncykge1xuICAgIHJldHVybiAgbShcIi5mb250c2l6ZS1zbWFsbGVyLnRleHQtZXJyb3IudS1tYXJnaW5ib3R0b20tMjAuZmEuZmEtZXhjbGFtYXRpb24tdHJpYW5nbGVcIiwgbSgnc3BhbicsIGAgJHthcmdzLm1lc3NhZ2V9YCkpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlubGluZUVycm9yO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCByZXdhcmRWTSBmcm9tICcuLi92bXMvcmV3YXJkLXZtJztcbmltcG9ydCBwYXltZW50Vk0gZnJvbSAnLi4vdm1zL3BheW1lbnQtdm0nO1xuaW1wb3J0IHByb2plY3RWTSBmcm9tICcuLi92bXMvcHJvamVjdC12bSc7XG5pbXBvcnQgZmFxQm94IGZyb20gJy4uL2MvZmFxLWJveCc7XG5pbXBvcnQgcGF5bWVudEZvcm0gZnJvbSAnLi4vYy9wYXltZW50LWZvcm0nO1xuaW1wb3J0IGlubGluZUVycm9yIGZyb20gJy4uL2MvaW5saW5lLWVycm9yJztcblxuY29uc3QgcHJvamVjdHNQYXltZW50ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBtb2RlID0gcHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkubW9kZSxcbiAgICAgICAgICAgIHByb2plY3RVc2VySWQgPSBwcm9qZWN0Vk0uY3VycmVudFByb2plY3QoKS51c2VyX2lkLFxuICAgICAgICAgICAgdmFsdWUgPSByZXdhcmRWTS5nZXRWYWx1ZSgpLFxuICAgICAgICAgICAgdm0gPSBwYXltZW50Vk0obW9kZSksXG4gICAgICAgICAgICBzaG93UGF5bWVudEZvcm0gPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgcmV3YXJkID0gcmV3YXJkVk0uc2VsZWN0ZWRSZXdhcmQsXG4gICAgICAgICAgICBkb2N1bWVudE1hc2sgPSBfLnBhcnRpYWwoaC5tYXNrLCAnOTk5Ljk5OS45OTktOTknKSxcbiAgICAgICAgICAgIHppcGNvZGVNYXNrID0gXy5wYXJ0aWFsKGgubWFzaywgJzk5OTk5LTk5OScpO1xuXG4gICAgICAgIGNvbnN0IHZhbGlkYXRlRm9ybSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmKHZtLnZhbGlkYXRlKCkpIHtcbiAgICAgICAgICAgICAgICBzaG93UGF5bWVudEZvcm0odHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZmllbGRIYXNFcnJvciA9IChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkV2l0aEVycm9yID0gXy5maW5kV2hlcmUodm0uZmllbGRzLmVycm9ycygpLCB7ZmllbGQ6IGZpZWxkTmFtZX0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZmllbGRXaXRoRXJyb3IgPyBtLmNvbXBvbmVudChpbmxpbmVFcnJvciwge21lc3NhZ2U6IGZpZWxkV2l0aEVycm9yLm1lc3NhZ2V9KSA6ICcnO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGFwcGx5RG9jdW1lbnRNYXNrID0gXy5jb21wb3NlKHZtLmZpZWxkcy5vd25lckRvY3VtZW50LCBkb2N1bWVudE1hc2spO1xuXG4gICAgICAgIGNvbnN0IGFwcGx5WmlwY29kZU1hc2sgPSBfLmNvbXBvc2Uodm0uZmllbGRzLnppcGNvZGUsIHppcGNvZGVNYXNrKTtcblxuICAgICAgICBpZighaC5nZXRVc2VyKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBoLm5hdmlnYXRlVG9EZXZpc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhcHBseURvY3VtZW50TWFzazogYXBwbHlEb2N1bWVudE1hc2ssXG4gICAgICAgICAgICBhcHBseVppcGNvZGVNYXNrOiBhcHBseVppcGNvZGVNYXNrLFxuICAgICAgICAgICAgZmllbGRIYXNFcnJvcjogZmllbGRIYXNFcnJvcixcbiAgICAgICAgICAgIHZhbGlkYXRlRm9ybTogdmFsaWRhdGVGb3JtLFxuICAgICAgICAgICAgcHJvamVjdFVzZXJJZDogcHJvamVjdFVzZXJJZCxcbiAgICAgICAgICAgIHNob3dQYXltZW50Rm9ybTogc2hvd1BheW1lbnRGb3JtLFxuICAgICAgICAgICAgcmV3YXJkOiByZXdhcmQsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBtb2RlOiBtb2RlLFxuICAgICAgICAgICAgdm06IHZtXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbShcIi53LXNlY3Rpb24udy1jbGVhcmZpeC5zZWN0aW9uXCIsXG4gICAgICAgIFx0W1xuICAgICAgICBcdFx0bShcIi53LWNvbFwiLFxuICAgICAgICBcdFx0XHRtKFwiLnctY2xlYXJmaXgudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0uY2FyZC51LXJhZGl1cy51LW1hcmdpbmJvdHRvbS0yMFwiLFxuICAgICAgICBcdFx0XHRcdFtcbiAgICAgICAgXHRcdFx0XHRcdG0oXCIuZm9udHNpemUtc21hbGxlci5mb250d2VpZ2h0LXNlbWlib2xkXCIsXG4gICAgICAgIFx0XHRcdFx0XHRcdFwiVmFsb3IgZG8gYXBvaW9cIlxuICAgICAgICBcdFx0XHRcdFx0KSxcbiAgICAgICAgXHRcdFx0XHRcdG0oXCJhLnctaW5saW5lLWJsb2NrLmFycm93LWFkbWluLmZhLmZhLWNoZXZyb24tZG93bi5mb250Y29sb3Itc2Vjb25kYXJ5W2RhdGEtaXg9J3Nob3ctcmV3YXJkLWRldGFpbHMnXVtkYXRhLXZpdmFsZGktc3BhdG5hdi1jbGlja2FibGU9JzEnXVtocmVmPScjJ11cIiksXG4gICAgICAgIFx0XHRcdFx0XHRtKFwiLnctY2xlYXJmaXgudS1tYXJnaW5ib3R0b20tMjBcIixcbiAgICAgICAgXHRcdFx0XHRcdFx0bShcIi5mb250c2l6ZS1sYXJnZXIudGV4dC1zdWNjZXNzLnUtbGVmdFwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdGBSJCR7Y3RybC52YWx1ZX1gXG4gICAgICAgIFx0XHRcdFx0XHRcdClcbiAgICAgICAgXHRcdFx0XHRcdCksXG4gICAgICAgIFx0XHRcdFx0XHRtKFwiLnctY2xlYXJmaXguYmFjay1wYXltZW50LWluZm8tcmV3YXJkW2RhdGEtaXg9J2Rpc3BsYXktbm9uZS1vbi1sb2FkJ11cIiwge3N0eWxlOiB7XCJkaXNwbGF5XCI6IFwibm9uZVwifX0sXG4gICAgICAgIFx0XHRcdFx0XHRcdFtcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRtKFwiLmZvbnRzaXplLXNtYWxsZXIuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMFwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XCJSZWNvbXBlbnNhIHNlbGVjaW9uYWRhXCJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHQpLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdG0oXCIuZm9udHNpemUtc21hbGxlc3RcIiwgYCR7Y3RybC5yZXdhcmQoKS5kZXNjcmlwdGlvbn1gKSxcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRtKGBhLmZvbnRzaXplLXNtYWxsLmxpbmstaGlkZGVuLnUtcmlnaHQuZm9udHdlaWdodC1zZW1pYm9sZFtocmVmPVwiL3Byb2plY3RzLyR7cHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkuaWR9L2NvbnRyaWJ1dGlvblwiXWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IG0ucm91dGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFwiRWRpdGFyXCJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHQpXG4gICAgICAgIFx0XHRcdFx0XHRcdF1cbiAgICAgICAgXHRcdFx0XHRcdClcbiAgICAgICAgXHRcdFx0XHRdXG4gICAgICAgIFx0XHRcdClcbiAgICAgICAgXHRcdCksXG4gICAgICAgIFx0XHRtKFwiLnctY29udGFpbmVyXCIsXG4gICAgICAgIFx0XHRcdG0oXCIudy1yb3dcIixcbiAgICAgICAgXHRcdFx0XHRbXG4gICAgICAgIFx0XHRcdFx0XHRtKFwiLnctY29sLnctY29sLThcIixcbiAgICAgICAgXHRcdFx0XHRcdFx0W1xuICAgICAgICBcdFx0XHRcdFx0XHRcdGN0cmwudm0uZmllbGRzLmVycm9ycygpID8gbShcIi53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bS53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmNhcmQuY2FyZC1lcnJvci51LXJhZGl1cy56aW5kZXgtMTAudS1tYXJnaW5ib3R0b20tMzAuZm9udHNpemUtc21hbGxlcltkYXRhLWl4PSdkaXNwbGF5LW5vbmUtb24tbG9hZCddXCIsIHtzdHlsZToge1wiZGlzcGxheVwiOiBcImJsb2NrXCJ9fSxcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFtcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0bShcIi51LW1hcmdpbmJvdHRvbS0xMC5mb250d2VpZ2h0LWJvbGRcIixcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcIlBvciBmYXZvciwgcmV2ZWphIG9zIGNhbXBvcyBhYmFpeG8gYW50ZXMgZGUgcHJvc3NlZ3VpclwiXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdCksXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJkaXZcIixcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcIlRoaXMgaXMgc29tZSB0ZXh0IGluc2lkZSBvZiBhIGRpdiBibG9jay5cIlxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHQpLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRtKFwiZGl2XCIsXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XCJUaGlzIGlzIHNvbWUgdGV4dCBpbnNpZGUgb2YgYSBkaXYgYmxvY2suXCJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0KVxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XVxuICAgICAgICBcdFx0XHRcdFx0XHRcdCkgOiAnJyxcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRtKFwiLnctZm9ybVwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0W1xuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRtKFwiZm9ybS51LW1hcmdpbmJvdHRvbS00MFtkYXRhLW5hbWU9J0VtYWlsIEZvcm0nXVtpZD0nZW1haWwtZm9ybSddW25hbWU9J2VtYWlsLWZvcm0nXVwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFtcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudS1tYXJnaW5ib3R0b20tNDAudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5XCIsXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFtcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiLmZvbnR3ZWlnaHQtc2VtaWJvbGQubGluZWhlaWdodC10aWdodC5mb250c2l6ZS1sYXJnZVwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCJEYWRvcyBkZSBjb250YXRvIGUgZW5kZXJlw6dvXCJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIuZm9udHNpemUtc21hbGxlclwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCIqIFByZWVuY2hpbWVudG8gb2JyaWdhdMOzcmlvXCJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdF1cbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiLnctcm93XCIsXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFtcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiLnctY29sLnctY29sLTcudy1zdWItY29sXCIsXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRbXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj0nY29tcGxldGUtbmFtZSddXCIsXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCJOb21lIGNvbXBsZXRvICpcIlxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW2lkPSdjb21wbGV0ZS1uYW1lJ11bbmFtZT0nY29tcGxldGUtbmFtZSddXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZm9jdXM6IGN0cmwudm0ucmVzZXRGaWVsZEVycm9yKCdjb21wbGV0ZU5hbWUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmZpZWxkSGFzRXJyb3IoJ2NvbXBsZXRlTmFtZScpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC52bS5maWVsZHMuY29tcGxldGVOYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy5jb21wbGV0ZU5hbWUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdOb21lIENvbXBsZXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5maWVsZEhhc0Vycm9yKCdjb21wbGV0ZU5hbWUnKVxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcIi53LWNvbC53LWNvbC01XCIsXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRbXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj0nZW1haWwnXVwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiRW1haWwgKlwiXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJpbnB1dC53LWlucHV0LnRleHQtZmllbGRbaWQ9J2VtYWlsJ11cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ2VtYWlsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5maWVsZEhhc0Vycm9yKCdlbWFpbCcpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2VtYWlsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwudm0uZmllbGRzLmVtYWlsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy5lbWFpbCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2VtYWlsQGNhdGFyc2UubWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmZpZWxkSGFzRXJyb3IoJ2VtYWlsJylcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdF1cbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdF1cbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiLnctY2hlY2tib3gudy1jbGVhcmZpeFwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRbXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcImlucHV0LnctY2hlY2tib3gtaW5wdXRbaWQ9J2Fub255bW91cyddW25hbWU9J2Fub255bW91cyddW3R5cGU9J2NoZWNrYm94J11cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwudm0uZmllbGRzLmFub255bW91cyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY3RybC52bS5maWVsZHMuYW5vbnltb3VzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwibGFiZWwudy1mb3JtLWxhYmVsLmZvbnRzaXplLXNtYWxsZXN0W2Zvcj0nYW5vbnltb3VzJ11cIixcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiUXVlcm8gcXVlIG1ldSBhcG9pbyBuw6NvIGZpcXVlIHDDumJsaWNvXCJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdF1cbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjdHJsLnZtLmZpZWxkcy5hbm9ueW1vdXMoKSA/IG0oXCIuY2FyZC5jYXJkLW1lc3NhZ2UudS1yYWRpdXMuemluZGV4LTEwLmZvbnRzaXplLXNtYWxsZXN0XCIsXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJkaXZcIixcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRbXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwic3Bhbi5mb250d2VpZ2h0LWJvbGRcIixcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0W1xuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiVm9jw6ogdGVtIGNlcnRlemEgcXVlIHF1ZXIgcXVlIHNldSBhcG9pbyBzZWphIGFuw7RuaW1vP1wiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0udHJ1c3QoXCImbmJzcDtcIiksXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcImJyXCIpXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdF1cbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiYnJcIiksXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIk8gdmFsb3IgZG8gc2V1IGFwb2lvIG7Do28gc2Vyw6EgZGl2dWxnYWRvIHBhcmEgbmluZ3XDqW0gYWzDqW0gZG8gZG9ubyBkbyBwcm9qZXRvLiBTb21lbnRlIG8gcHJvcG9uZW50ZSB0ZXLDoSBhY2Vzc28gYSBlc3NhIGluZm9ybWHDp8OjbywgaW5kZXBlbmRlbnRlIHNlIG8gc2V1IGludmVzdGltZW50byBzZWphIHDDumJsaWNvIG91IGFuw7RuaW1vLlwiXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpIDogJydcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRdXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdClcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdF1cbiAgICAgICAgXHRcdFx0XHRcdFx0XHQpLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdG0oXCIudS1tYXJnaW5ib3R0b20tNDBcIixcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdG0oXCIudy1mb3JtXCIsXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudy1yb3dcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudy1jb2wudy1jb2wtNi53LXN1Yi1jb2xcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcImxhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPSdjb3VudHJ5J11cIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIlBhw61zICpcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwic2VsZWN0Lnctc2VsZWN0LnRleHQtZmllbGRbaWQ9J2NvdW50cnknXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLnZtLmZpZWxkcy51c2VyQ291bnRyeUlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy51c2VyQ291bnRyeUlkKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAoY3RybC52bS5maWVsZHMuY291bnRyaWVzKCksIChjb3VudHJ5LCBpZHgpID0+IG0oXCJvcHRpb25cIiwge3ZhbHVlOiBjb3VudHJ5LmlkLCBrZXk6IGlkeCwgc2VsZWN0ZWQ6IGNvdW50cnkuaWQgPT09IGN0cmwudm0uZmllbGRzLnVzZXJDb3VudHJ5SWQoKX0sIGNvdW50cnkubmFtZSkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudy1jb2wudy1jb2wtNlwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IWN0cmwudm0uaXNJbnRlcm5hdGlvbmFsKCkgPyBbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj0nemlwLWNvZGUnXVwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiQ0VQXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcImlucHV0LnctaW5wdXQudGV4dC1maWVsZFtpZD0nemlwLWNvZGUnXVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmtleXVwOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuYXBwbHlaaXBjb2RlTWFzayksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy56aXBDb2RlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnNDIxMDAwMDAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdF0gOiAnJ1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudy1yb3dcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudy1jb2wudy1jb2wtNi53LXN1Yi1jb2xcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcImxhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPSdzdHJlZXQnXVwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiUnVhICpcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW2lkPSdzdHJlZXQnXVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZm9jdXM6IGN0cmwudm0ucmVzZXRGaWVsZEVycm9yKCdzdHJlZXQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGN0cmwuZmllbGRIYXNFcnJvcignc3RyZWV0JykgPyAnZXJyb3InIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC52bS5maWVsZHMuc3RyZWV0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwudm0uZmllbGRzLnN0cmVldCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdSdWEgRGEgTWluaGEgQ2FzYSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmZpZWxkSGFzRXJyb3IoJ3N0cmVldCcpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiLnctY29sLnctY29sLTZcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudy1yb3dcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNi53LXN1Yi1jb2wtbWlkZGxlXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj0nbnVtYmVyJ11cIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIk7Dum1lcm8gKlwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJpbnB1dC53LWlucHV0LnRleHQtZmllbGRbaWQ9J251bWJlciddXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ251bWJlcicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5maWVsZEhhc0Vycm9yKCdudW1iZXInKSA/ICdlcnJvcicgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLnZtLmZpZWxkcy5udW1iZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC52bS5maWVsZHMubnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJzQyMSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmZpZWxkSGFzRXJyb3IoJ251bWJlcicpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiLnctY29sLnctY29sLTYudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTZcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcImxhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPSdhZGRyZXNzLWNvbXBsZW1lbnQnXVwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiQ29tcGxlbWVudG9cIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW2lkPSdhZGRyZXNzLWNvbXBsZW1lbnQnXVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZm9jdXM6IGN0cmwudm0ucmVzZXRGaWVsZEVycm9yKCdhZGRyZXNzQ29tcGxlbWVudCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5maWVsZEhhc0Vycm9yKCdhZGRyZXNzQ29tcGxlbWVudCcpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwudm0uZmllbGRzLmFkZHJlc3NDb21wbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwudm0uZmllbGRzLmFkZHJlc3NDb21wbGVtZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnUmVzaWRlbmNpYWwgMTIzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZmllbGRIYXNFcnJvcignYWRkcmVzc0NvbXBsZW1lbnQnKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudy1yb3dcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudy1jb2wudy1jb2wtNC53LXN1Yi1jb2xcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcImxhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPSduZWlnaGJvdXJob29kJ11cIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIkJhaXJybyAqXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcImlucHV0LnctaW5wdXQudGV4dC1maWVsZFtpZD0nbmVpZ2hib3VyaG9vZCddXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ25laWdoYm91cmhvb2QnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGN0cmwuZmllbGRIYXNFcnJvcignbmVpZ2hib3VyaG9vZCcpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwudm0uZmllbGRzLm5laWdoYm91cmhvb2QpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC52bS5maWVsZHMubmVpZ2hib3VyaG9vZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTw6NvIEpvc8OpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZmllbGRIYXNFcnJvcignbmVpZ2hib3VyaG9vZCcpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiLnctY29sLnctY29sLTQudy1zdWItY29sXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj0nY2l0eSddXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCJDaWRhZGUgKlwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJpbnB1dC53LWlucHV0LnRleHQtZmllbGRbaWQ9J2NpdHknXVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZm9jdXM6IGN0cmwudm0ucmVzZXRGaWVsZEVycm9yKCdjaXR5JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmZpZWxkSGFzRXJyb3IoJ2NpdHknKSA/ICdlcnJvcicgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLnZtLmZpZWxkcy5jaXR5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwudm0uZmllbGRzLmNpdHkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnQ2lkYWRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZmllbGRIYXNFcnJvcignY2l0eScpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiLnctY29sLnctY29sLTRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcImxhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPSdzdGF0ZSddXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCJFc3RhZG8gKlwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCJzZWxlY3Qudy1zZWxlY3QudGV4dC1maWVsZFtpZD0nc3RhdGUnXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLnZtLmZpZWxkcy51c2VyU3RhdGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwudm0uZmllbGRzLnVzZXJTdGF0ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGN0cmwudm0uZmllbGRzLnN0YXRlcygpLCAoc3RhdGUsIGlkeCkgPT4gbSgnb3B0aW9uJywge3ZhbHVlOiBzdGF0ZS5hY3JvbnltLCBzZWxlY3RlZDogc3RhdGUuYWNyb255bSA9PT0gY3RybC52bS5maWVsZHMudXNlclN0YXRlKCl9LCBzdGF0ZS5uYW1lKSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCFjdHJsLnZtLmlzSW50ZXJuYXRpb25hbCgpID8gbShcIi53LXJvd1wiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcIi53LWNvbC53LWNvbC02Lnctc3ViLWNvbFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwibGFiZWwuZmllbGQtbGFiZWwuZm9udHdlaWdodC1zZW1pYm9sZFtmb3I9J2RvY3VtZW50J11cIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIkNQRiAqXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcImlucHV0LnctaW5wdXQudGV4dC1maWVsZFtpZD0nZG9jdW1lbnQnXVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZm9jdXM6IGN0cmwudm0ucmVzZXRGaWVsZEVycm9yKCdvd25lckRvY3VtZW50JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmZpZWxkSGFzRXJyb3IoJ293bmVyRG9jdW1lbnQnKSA/ICdlcnJvcicgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RlbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ua2V5dXA6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5hcHBseURvY3VtZW50TWFzayksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy5vd25lckRvY3VtZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAncmVxdWlyZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5maWVsZEhhc0Vycm9yKCdvd25lckRvY3VtZW50Jylcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIudy1jb2wudy1jb2wtNlwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwibGFiZWwuZmllbGQtbGFiZWwuZm9udHdlaWdodC1zZW1pYm9sZFtmb3I9J3Bob25lJ11cIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIlRlbGVmb25lICpcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW2lkPSdwaG9uZSddXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ3Bob25lJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmZpZWxkSGFzRXJyb3IoJ3Bob25lJykgPyAnZXJyb3InIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLnZtLmZpZWxkcy5waG9uZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy5waG9uZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogJ3JlcXVpcmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZmllbGRIYXNFcnJvcigncGhvbmUnKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSA6ICcnXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdF1cbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdClcbiAgICAgICAgXHRcdFx0XHRcdFx0XHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIi53LXJvdy51LW1hcmdpbmJvdHRvbS00MFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIudy1jb2wudy1jb2wtcHVzaC0zLnctY29sLTZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcImJ1dHRvbi5idG4uYnRuLWxhcmdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC52YWxpZGF0ZUZvcm1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlByw7N4aW1vIHBhc3NvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNob3dQYXltZW50Rm9ybSgpID8gbS5jb21wb25lbnQocGF5bWVudEZvcm0pIDogJydcbiAgICAgICAgXHRcdFx0XHRcdFx0XVxuICAgICAgICBcdFx0XHRcdFx0KSxcbiAgICAgICAgXHRcdFx0XHRcdG0oXCIudy1jb2wudy1jb2wtNFwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRbXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0bShcIi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmNhcmQudS1yYWRpdXMudS1tYXJnaW5ib3R0b20tMjBcIixcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFtcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0bShcIi5mb250c2l6ZS1zbWFsbGVyLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMjBcIixcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcIlZhbG9yIGRvIGFwb2lvXCJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0KSxcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0bShcIi53LWNsZWFyZml4LnUtbWFyZ2luYm90dG9tLTIwXCIsXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0W1xuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bShcIi5mb250c2l6ZS1sYXJnZXIudGV4dC1zdWNjZXNzLnUtbGVmdFwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRgUiQke2N0cmwudmFsdWV9YFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oYGEuZm9udHNpemUtc21hbGwubGluay1oaWRkZW4udS1yaWdodC5mb250d2VpZ2h0LXNlbWlib2xkW2hyZWY9XCIvcHJvamVjdHMvJHtwcm9qZWN0Vk0uY3VycmVudFByb2plY3QoKS5pZH0vY29udHJpYnV0aW9uXCJdYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBtLnJvdXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXCJFZGl0YXJcIlxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KVxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdF1cbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0KSxcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0bShcIi5iYWNrLXBheW1lbnQtaW5mby1yZXdhcmRcIixcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRbXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtKFwiLmZvbnRzaXplLXNtYWxsZXIuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMFwiLFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIlJlY29tcGVuc2Egc2VsZWNpb25hZGFcIlxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG0oXCIuZm9udHNpemUtc21hbGxlc3RcIiwgY3RybC5yZXdhcmQoKS5kZXNjcmlwdGlvbilcblxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdF1cbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0KVxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XVxuICAgICAgICBcdFx0XHRcdFx0XHRcdCksXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0bS5jb21wb25lbnQoZmFxQm94LCB7bW9kZTogY3RybC5tb2RlLCBmYXE6IGN0cmwudm0uZmFxLCBwcm9qZWN0VXNlcklkOiBjdHJsLnByb2plY3RVc2VySWR9KVxuICAgICAgICBcdFx0XHRcdFx0XHRdXG4gICAgICAgIFx0XHRcdFx0XHQpXG4gICAgICAgIFx0XHRcdFx0XVxuICAgICAgICBcdFx0XHQpXG4gICAgICAgIFx0XHQpXG4gICAgICAgIFx0XVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RzUGF5bWVudDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RWTSBmcm9tICcuLi92bXMvcHJvamVjdC12bSc7XG5pbXBvcnQgcmV3YXJkVk0gZnJvbSAnLi4vdm1zL3Jld2FyZC12bSc7XG5pbXBvcnQgZmFxQm94IGZyb20gJy4uL2MvZmFxLWJveCc7XG5cbmNvbnN0IHByb2plY3RzUmV3YXJkID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCB2bSA9IHJld2FyZFZNLFxuICAgICAgICAgICAgc2VsZWN0ZWRSZXdhcmQgPSB2bS5zZWxlY3RlZFJld2FyZCxcbiAgICAgICAgICAgIHNlbGVjdFJld2FyZCA9IHZtLnNlbGVjdFJld2FyZCxcbiAgICAgICAgICAgIHJld2FyZHMgPSB2bS5yZXdhcmRzKCksXG4gICAgICAgICAgICBtb2RlID0gcHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkubW9kZSxcbiAgICAgICAgICAgIGZhcSA9IEkxOG4udHJhbnNsYXRpb25zW0kxOG4uY3VycmVudExvY2FsZSgpXS5wcm9qZWN0cy5mYXFbbW9kZV07XG5cbiAgICAgICAgLy9UT0RPIHVuaWZ5IHByb2plY3RzUmV3YXJkIGFuZCBwcm9qZWN0LXJld2FyZC1saXN0IHJld2FyZCBzdWJtaXNzaW9uLiBmaXggcm91dGluZyBpc3N1ZS5cbiAgICAgICAgY29uc3Qgc3VibWl0Q29udHJpYnV0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVGbG9hdCA9IGgubW9uZXRhcnlUb0Zsb2F0KHZtLmNvbnRyaWJ1dGlvblZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlRmxvYXQgPCB2bS5zZWxlY3RlZFJld2FyZCgpLm1pbmltdW1fdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2bS5lcnJvcihgTyB2YWxvciBkZSBhcG9pbyBwYXJhIGVzc2EgcmVjb21wZW5zYSBkZXZlIHNlciBkZSBubyBtw61uaW1vIFIkJHt2bS5zZWxlY3RlZFJld2FyZCgpLm1pbmltdW1fdmFsdWV9YCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghaC5nZXRVc2VyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaC5zdG9yZU9iamVjdChzdG9yZUtleSwge3ZhbHVlOiB2YWx1ZUZsb2F0LCByZXdhcmQ6IHZtLnNlbGVjdGVkUmV3YXJkKCl9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaC5uYXZpZ2F0ZVRvRGV2aXNlKCcvJyArIHByb2plY3RWTS5jdXJyZW50UHJvamVjdCgpLnBlcm1hbGluayk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdm0uZXJyb3IoJycpO1xuICAgICAgICAgICAgICAgICAgICB2bS5jb250cmlidXRpb25WYWx1ZSh2YWx1ZUZsb2F0KTtcbiAgICAgICAgICAgICAgICAgICAgbS5yb3V0ZShgL3Byb2plY3RzLyR7cHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkuaWR9L3BheW1lbnRgLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0X3VzZXJfaWQ6IHByb2plY3RWTS5jdXJyZW50UHJvamVjdCgpLnVzZXJfaWRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IHJld2FyZCA9PiByZXdhcmQuaWQgPT09IHNlbGVjdGVkUmV3YXJkKCkuaWQ7XG5cbiAgICAgICAgaWYoXy5maXJzdChyZXdhcmRzKS5pZCAhPT0gdm0ubm9SZXdhcmQuaWQpe1xuICAgICAgICAgICAgcmV3YXJkcy51bnNoaWZ0KHZtLm5vUmV3YXJkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXdhcmRzOiByZXdhcmRzLFxuICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0LFxuICAgICAgICAgICAgY29udHJpYnV0aW9uVmFsdWU6IHZtLmNvbnRyaWJ1dGlvblZhbHVlLFxuICAgICAgICAgICAgc3VibWl0Q29udHJpYnV0aW9uOiBzdWJtaXRDb250cmlidXRpb24sXG4gICAgICAgICAgICBhcHBseU1hc2s6IHZtLmFwcGx5TWFzayxcbiAgICAgICAgICAgIGVycm9yOiB2bS5lcnJvcixcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAgICBzZWxlY3RlZFJld2FyZDogc2VsZWN0ZWRSZXdhcmQsXG4gICAgICAgICAgICBzZWxlY3RSZXdhcmQ6IHNlbGVjdFJld2FyZCxcbiAgICAgICAgICAgIGZhcTogZmFxXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGN0cmwucHJvamVjdDtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3QtcmV3YXJkcycsIFtcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24ucGFnZS1oZWFkZXIudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2gxLmZvbnRzaXplLWxhcmdlci5mb250d2VpZ2h0LXNlbWlib2xkLnByb2plY3QtbmFtZVtpdGVtcHJvcD1cIm5hbWVcIl0nLCBoLnNlbGZPckVtcHR5KHByb2plY3QoKS5uYW1lIHx8IHByb2plY3QoKS5wcm9qZWN0X25hbWUpKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnaDIuZm9udHNpemUtYmFzZS5saW5laGVpZ2h0LWxvb3NlcltpdGVtcHJvcD1cImF1dGhvclwiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb3IgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QoKS51c2VyID8gcHJvamVjdCgpLnVzZXIubmFtZSA6IHByb2plY3QoKS5vd25lcl9uYW1lID8gcHJvamVjdCgpLm93bmVyX25hbWUgOiAnJ1xuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLmhlYWRlci1jb250LW5ldycsXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5saW5laGVpZ2h0LXRpZ2h0LnRleHQtc3VjY2Vzcy5mb250c2l6ZS1sYXJnZS51LXRleHQtY2VudGVyLXNtYWxsLW9ubHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdFc2NvbGhhIGEgcmVjb21wZW5zYSBlIGVtIHNlZ3VpZGEgbyB2YWxvciBkbyBhcG9pbydcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbSgnLnNlY3Rpb25baWQ9XFwnbmV3LWNvbnRyaWJ1dGlvblxcJ10nLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0uYmFjay1yZXdhcmQtZm9ybScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZm9ybS5zaW1wbGVfZm9ybS5uZXdfY29udHJpYnV0aW9uJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGN0cmwuc3VibWl0Q29udHJpYnV0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIF8ubWFwKGN0cmwucmV3YXJkcywgKHJld2FyZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBjdHJsLmlzU2VsZWN0ZWQocmV3YXJkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb25ldGFyeU1pbmltdW0gPSBoLmFwcGx5TW9uZXRhcnlNYXNrKHJld2FyZC5taW5pbXVtX3ZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oJ3NwYW4ucmFkaW8udy1yYWRpby53LWNsZWFyZml4LmJhY2stcmV3YXJkLXJhZGlvLXJld2FyZCcse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogaXNTZWxlY3RlZCA/ICdzZWxlY3RlZCcgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC5zZWxlY3RSZXdhcmQocmV3YXJkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG0oYGxhYmVsW2Zvcj0nY29udHJpYnV0aW9uX3Jld2FyZF9pZF8ke3Jld2FyZC5pZH0nXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgaW5wdXQucmFkaW9fYnV0dG9ucy5vcHRpb25hbC53LWlucHV0LnRleHQtZmllbGQudy1yYWRpby1pbnB1dC5iYWNrLXJld2FyZC1yYWRpby1idXR0b25baWQ9J2NvbnRyaWJ1dGlvbl9yZXdhcmRfaWRfJHtyZXdhcmQuaWR9J11bbmFtZT0nY29udHJpYnV0aW9uW3Jld2FyZF9pZF0nXVt0eXBlPSdyYWRpbyddW3ZhbHVlPScke3Jld2FyZC5pZH0nXWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogaXNTZWxlY3RlZCA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsYWJlbC53LWZvcm0tbGFiZWwuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwW2Zvcj0nY29udHJpYnV0aW9uX3Jld2FyZF8ke3Jld2FyZC5pZH0nXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZC5pZCA9PT0gLTEgPyAnTsOjbyBxdWVybyByZWNvbXBlbnNhJyA6IGBSJCAke3Jld2FyZC5taW5pbXVtX3ZhbHVlfSBvdSBtYWlzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZCA/IG0oJy53LXJvdy5iYWNrLXJld2FyZC1tb25leScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXNtYWxsLTgudy1jb2wtdGlueS04Lnctc3ViLWNvbC1taWRkbGUudy1jbGVhcmZpeCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudy1jb2wtdGlueS0zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmJhY2stcmV3YXJkLWlucHV0LXJld2FyZC5wbGFjZWhvbGRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUiQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC05LnctY29sLXNtYWxsLTkudy1jb2wtdGlueS05JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudXNlci1yZXdhcmQtdmFsdWUuYmFjay1yZXdhcmQtaW5wdXQtcmV3YXJkW2F1dG9jb21wbGV0ZT1cXCdvZmZcXCddW3R5cGU9XFwndGVsXFwnXScse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmVycm9yKCkgPyAnZXJyb3InIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluOiBtb25ldGFyeU1pbmltdW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1vbmV0YXJ5TWluaW11bSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmtleXVwOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuYXBwbHlNYXNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5jb250cmlidXRpb25WYWx1ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXJyb3IoKS5sZW5ndGggPiAwID8gbSgnLnRleHQtZXJyb3InLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdicicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1leGNsYW1hdGlvbi10cmlhbmdsZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCAke2N0cmwuZXJyb3IoKX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnN1Ym1pdC1mb3JtLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2J1dHRvbi5idG4uYnRuLWxhcmdlJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGludWFyICAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWNoZXZyb24tcmlnaHQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmJhY2stcmV3YXJkLXJld2FyZC1kZXNjcmlwdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLnUtbWFyZ2luYm90dG9tLTEwJywgcmV3YXJkLmRlc2NyaXB0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZC5kZWxpdmVyX2F0ID8gbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnRXN0aW1hdGl2YSBkZSBlbnRyZWdhOiAnICsgaC5tb21lbnRpZnkocmV3YXJkLmRlbGl2ZXJfYXQsICdNTU0vWVlZWScpKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOyAvL0VuZCBtYXAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgbS5jb21wb25lbnQoZmFxQm94LCB7bW9kZTogY3RybC5wcm9qZWN0KCkubW9kZSwgZmFxOiBjdHJsLmZhcX0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RzUmV3YXJkO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcHJvamVjdERhc2hib2FyZE1lbnUgZnJvbSAnLi4vYy9wcm9qZWN0LWRhc2hib2FyZC1tZW51JztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMucHVibGlzaCcpO1xuXG5jb25zdCBwdWJsaXNoID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgZmlsdGVyc1ZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgICAgICAgICAgcHJvamVjdF9pZDogJ2VxJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwcm9qZWN0QWNjb3VudCA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBwcm9qZWN0RGV0YWlscyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBhY2NlcHRUZXJtID0gbS5wcm9wKFt0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZV0pLFxuICAgICAgICAgICAgZmxleEFjY2VwdFRlcm0gPSBtLnByb3AoW3RydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlXSksXG4gICAgICAgICAgICBzaG93TmV4dFRlcm0gPSAoaW5kZXgsIGFjY2VwdFRlcm1zKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHRlcm1zID0gYWNjZXB0VGVybXMoKTtcbiAgICAgICAgICAgICAgICBpZiAodGVybXNbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlcm1zW2luZGV4XSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBhY2NlcHRUZXJtcyh0ZXJtcyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0VGVybSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3ctaGlkZGVuIHB1Ymxpc2gtcnVsZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRUZXJtWzBdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUZXJtWzBdLmNsYXNzTGlzdC5yZW1vdmUoJ3ctaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9zaG93IHB1Ymxpc2ggYnV0dG9uIGFmdGVyIGFjY2VwdGluZyBhbGwgcnVsZXNcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IHRlcm1zLmxlbmd0aCAtIDEpe1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwdWJsaXNoLWJ0bi1zZWN0aW9uJylbMF0uY2xhc3NMaXN0LnJlbW92ZSgndy1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9hZGVyID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbjtcblxuICAgICAgICBmaWx0ZXJzVk0ucHJvamVjdF9pZChhcmdzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykpO1xuXG4gICAgICAgIGNvbnN0IGwgPSBsb2FkZXIobW9kZWxzLnByb2plY3REZXRhaWwuZ2V0Um93T3B0aW9ucyhmaWx0ZXJzVk0ucGFyYW1ldGVycygpKSksXG4gICAgICAgICAgICBhY2NvdW50TCA9IGxvYWRlcihtb2RlbHMucHJvamVjdEFjY291bnQuZ2V0Um93T3B0aW9ucyhmaWx0ZXJzVk0ucGFyYW1ldGVycygpKSk7XG4gICAgICAgIGwubG9hZCgpLnRoZW4ocHJvamVjdERldGFpbHMpO1xuICAgICAgICBhY2NvdW50TC5sb2FkKCkudGhlbihwcm9qZWN0QWNjb3VudCk7XG5cbiAgICAgICAgbGV0IGV4cGlyZXNBdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3QgPSBfLmZpcnN0KHByb2plY3REZXRhaWxzKCkpO1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudCgpLmFkZChwcm9qZWN0Lm9ubGluZV9kYXlzLCAnZGF5cycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsOiBsLFxuICAgICAgICAgICAgYWNjb3VudEw6IGFjY291bnRMLFxuICAgICAgICAgICAgZXhwaXJlc0F0OiBleHBpcmVzQXQsXG4gICAgICAgICAgICBmaWx0ZXJzVk06IGZpbHRlcnNWTSxcbiAgICAgICAgICAgIGFjY2VwdFRlcm06IGFjY2VwdFRlcm0sXG4gICAgICAgICAgICBmbGV4QWNjZXB0VGVybTogZmxleEFjY2VwdFRlcm0sXG4gICAgICAgICAgICBzaG93TmV4dFRlcm06IHNob3dOZXh0VGVybSxcbiAgICAgICAgICAgIHByb2plY3RBY2NvdW50OiBwcm9qZWN0QWNjb3VudCxcbiAgICAgICAgICAgIHByb2plY3REZXRhaWxzOiBwcm9qZWN0RGV0YWlsc1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBfLmZpcnN0KGN0cmwucHJvamVjdERldGFpbHMoKSksXG4gICAgICAgICAgYWNjb3VudCA9IF8uZmlyc3QoY3RybC5wcm9qZWN0QWNjb3VudCgpKSxcbiAgICAgICAgICBmbGV4VGVybXMgPSAocHJvamVjdCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnMS85JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxuICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdSZWdyYXMgZGEgbW9kYWxpZGFkZSBGTEVYJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsICdWb2PDqiBlc2NvbGhldSBhIGNhbXBhbmhhIGZsZXjDrXZlbC4gRGVzc2EgbWFuZWlyYSwgdm9jw6ogaXLDoSByZWNlYmVyIHRvZG9zIG9zIHJlY3Vyc29zIGFycmVjYWRhZG9zIGp1bnRvIGFvcyBhcG9pYWRvcmVzIGFvIGZpbmFsIGRvIHByYXpvIGRhIGNhbXBhbmhhIChkZXNjb250YW5kbyBhIHRheGEgZG8gQ2F0YXJzZSkgZSBkZXZlcsOhIGN1bXByaXIgY29tIGEgZXhlY3XDp8OjbyBkbyBwcm9qZXRvIGUgY29tIGEgZW50cmVnYSBkYXMgcmVjb21wZW5zYXMgb2ZlcmVjaWRhcyBpbmRlcGVuZGVudGUgZG8gcXVhbnRvIGFycmVjYWRhci4nKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICcyLzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ01ldGEgZGUgYXJyZWNhZGHDp8OjbycpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCAnQSBtZXRhIG7Do28gcG9kZXLDoSBzZXIgYWx0ZXJhZGEgYXDDs3MgbyBwdWJsaWNhw6fDo28gZG8gcHJvamV0by4nKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICczLzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1RheGFzJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAnQW8gZmluYWwgZGEgY2FtcGFuaGEsIGNvYnJhcmVtb3MgMTMlIHNvYnJlIG8gJyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAndmFsb3IgdG90YWwgYXJyZWNhZGFkby4nKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc0LzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1ByYXpvIGRhIGNhbXBhbmhhJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsICdVbWEgdmV6IGRlZmluaWRvLCBvIHByYXpvIGRlIGVuY2VycmFtZW50byBuw6NvIHBvZGVyw6Egc2VyIGFsdGVyYWRvLiBDYXNvIHZvY8OqIHRlbmhhIGluaWNpYWRvIGEgY2FtcGFuaGEgY29tIG8gcHJhem8gZW0gYWJlcnRvLCBkZXZlcsOhIGRlZmluaS1sbyBkdXJhbnRlIGEgY2FtcGFuaGEsIHBvZGVuZG8gZGVpeGFyIGEgY2FtcGFuaGEgYWJlcnRhIHBvciBubyBtw6F4aW1vIDEyIG1lc2VzLicpXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzUvOScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUHJhem8gcGFyYSByZXBhc3NlJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgJ1F1YW5kbyBvIHByYXpvIGRvIHNldSBwcm9qZXRvIGNoZWdhciBhbyBmaW0sIHZvY8OqIGRldmVyw6EgY29uZmlybWFyIHNldXMgZGFkb3MgYmFuY8Ohcmlvcy4gQXDDs3MgZXNzYSBjb25maXJtYcOnw6NvLCBvIENhdGFyc2UgZGVwb3NpdGFyw6EgbmEgc3VhIGNvbnRhIGNvcnJlbnRlIGVtIGF0w6kgMTAgZGlhcyDDunRlaXMuIE8gdmFsb3IgZGVwb3NpdGFkbyBqw6EgZXN0YXLDoSBjb25zaWRlcmFuZG8gbyBkZXNjb250byBkZSAxMyUgZGEgdGF4YS4nKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc2LzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ08gcXVlIHBvZGUgZSBuw6NvIHBvZGUgYWx0ZXJhciBuYSBww6FnaW5hIGRvIHByb2pldG8gYSBwYXJ0aXIgZGEgcHVibGljYcOnw6NvPycpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgW20oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnVm9jw6ogbsOjbyBwb2RlcsOhOicpLCcgYWx0ZXJhciBvIHRpcG8gZGUgZmluYW5jaWFtZW50bywgbm9tZSBkbyBwcm9qZXRvLCBhIFVSTCAobGluaykgZG8gcHJvamV0bywgYSBjYXRlZ29yaWEgZXNjb2xoaWRhLCBhIG1ldGEgZGUgYXJyZWNhZGHDp8OjbywgbyBwcmF6byAoY2FzbyBqw6EgdGVuaGEgZGVmaW5pZG8pLCBhcyByZWNvbXBlbnNhcyBvbmRlIGV4aXN0aXJlbSBhcG9pb3MgasOhIGVmZXR1YWRvcyBlIGEgY29udGEgYmFuY8OhcmlhIHJlZ2lzdHJhZGEuXFxcbiAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgICAgICAgICAgICAgICAgICAgLG0oJ2JyJyksbSgnYnInKSxtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnVm9jw6ogcG9kZXLDoTogJyksJ2VkaXRhciBvIGNvbnRlw7pkbyBkYSBkZXNjcmnDp8OjbyBkbyBwcm9qZXRvLCBhbHRlcmFyIG8gdsOtZGVvIHByaW5jaXBhbCBkYSBjYW1wYW5oYSwgYSBpbWFnZW0gZG8gcHJvamV0bywgYSBmcmFzZSBkZSBlZmVpdG8sIGFzIHJlY29tcGVuc2FzIG9uZGUgbsOjbyBleGlzdGlyZW0gYXBvaW9zIGVmZXR1YWRvcywgYWzDqW0gZGUgYWRpY2lvbmFyIG5vdmFzIHJlY29tcGVuc2FzIGR1cmFudGUgYSBhcnJlY2FkYcOnw6NvLiddKV1cbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnNy85JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxuICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdSZXNwb25zYWJpbGlkYWRlIGRvIENhdGFyc2UnKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIFttKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyksbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ08gQ2F0YXJzZSDDqSByZXNwb25zw6F2ZWw6JyksJ8KgcGVsbyBkZXNlbnZvbHZpbWVudG8gdGVjbm9sw7NnaWNvIGRhIHBsYXRhZm9ybWEsIGF0ZW5kaW1lbnRvIGRlIGTDunZpZGFzIGUgcHJvYmxlbWFzICh0YW50byBkZSBhcG9pYWRvcmVzIHF1YW50byBkZSByZWFsaXphZG9yZXMpLCBwb3IgaG9zcGVkYXIgbyBwcm9qZXRvIG5hIHBsYXRhZm9ybWEgZSBwb3IgZ2FyYW50aXIgYSBzZWd1cmFuw6dhIGRhcyB0cmFuc2HDp8O1ZXMgZmluYW5jZWlyYXMuXFwgJyxtKCdicicpLG0oJ2JyJyksbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ08gQ2F0YXJzZSBuw6NvIMOpIHJlc3BvbnPDoXZlbDonKSwnwqBwZWxvIGZpbmFuY2lhbWVudG8sIGRpdnVsZ2HDp8OjbyBlIGV4ZWN1w6fDo28sIG5lbSBwZWxhIGVudHJlZ2EgZGUgcmVjb21wZW5zYXMgZG9zIHByb2pldG9zIGluc2NyaXRvcy4nXSldXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzgvOScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnU3VhcyByZXNwb25zYWJpbGlkYWRlcycpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyksbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyksJ8OJIHN1YSByZXNwb25zYWJpbGlkYWRlIHR1ZG8gYXF1aWxvIHF1ZSBkaXogcmVzcGVpdG8gYSBmb3JtYXRhw6fDo28gZG8gcHJvamV0bywgcGxhbmVqYW1lbnRvIGUgZGl2dWxnYcOnw6NvIGRhIGNhbXBhbmhhIGRlIGFycmVjYWRhw6fDo28sIG1vYmlsaXphw6fDo28gZGUgYXBvaWFkb3JlcywgZXhlY3XDp8OjbyBkbyBwcm9qZXRvLCBwcm9kdcOnw6NvIGUgZW50cmVnYSBkZSByZWNvbXBlbnNhcyBkZW50cm8gZG8gcHJhem8gZXN0aW1hZG8gZSBjb211bmljYcOnw6NvIGNvbSBhcG9pYWRvcmVzLiddKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnOS85JyksXG4gICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdSZXRpcmFkYXMgZGUgcHJvamV0b3Mgbm8gYXInKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLCdPIENBVEFSU0UgcmVzZXJ2YS1zZSBvIGRpcmVpdG8gZGUsIGEgc2V1IGV4Y2x1c2l2byBjcml0w6lyaW8gZSB1bWEgdmV6IG5vdGlmaWNhZG8gYSByZXNwZWl0bywgY2FuY2VsYXIgcHJvamV0b3MgZSBlbmNlcnJhciBhcyBjb250YXMgZGUgQ1JJQURPUkVTIERFIFBST0pFVE9TIHF1ZSB2aW9sZW0gbm9zc2FzICcsbSgnYS5hbHQtbGlua1tocmVmPVxcJ2h0dHA6Ly9zdXBvcnRlLmNhdGFyc2UubWUvaGMvcHQtYnIvYXJ0aWNsZXMvMjAyMzg3NjM4LURpcmV0cml6ZXMtcGFyYS1jcmlhJUMzJUE3JUMzJUEzby1kZS1wcm9qZXRvc1xcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnUmVncmFzIGRvIEpvZ28nKSwnIGUgJyxtKCdhLmFsdC1saW5rW2hyZWY9XFwnaHR0cDovL3d3dy5jYXRhcnNlLm1lL3Rlcm1zLW9mLXVzZVxcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnVGVybW9zIGRlIFVzbycpLCcuJ10pXG4gICAgICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgXTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgdGVybXMgPSAocHJvamVjdCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gW20oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnMS85JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAnICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUmVncmFzIGRhIG1vZGFsaWRhZGUgVHVkby1vdS1uYWRhJylcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbJ1ZvY8OqIGVzY29saGV1IGEgY2FtcGFuaGEgdHVkby1vdS1uYWRhLiBEZXNzYSBtYW5laXJhLCB2b2PDqiBzw7MgaXLDoSByZWNlYmVyIG9zIHJlY3Vyc29zIGFycmVjYWRhZG9zICcsbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ2Nhc28gYXRpbmphIG91IHN1cGVyZSBhIG1ldGEgZGUgYXJyZWNhZGHDp8OjbycpLCcuIENhc28gY29udHLDoXJpbywgdG9kb3Mgc2V1cyBhcG9pYWRvcmVzIHNlcsOjbyByZWVtYm9sc2Fkb3MuIFZvY8OqIHNlcsOhIHJlc3BvbnPDoXZlbCBwZWxhIGVudHJlZ2EgZGFzIHJlY29tcGVuc2FzIG9mZXJlY2lkYXMgc2Ugc2V1IHByb2pldG8gYWxjYW7Dp2FyIGEgbWV0YSBkZSBhcnJlY2FkYcOnw6NvLiddKVxuICAgICAgICAgICAgICAgICAgICBdKSxcblxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzIvOScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7c3R5bGU6IHsnZm9udC13ZWlnaHQnOiAnIDYwMCd9fSwgJ01ldGEgZGUgYXJyZWNhZGHDp8OjbycpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgJ0EgbWV0YSBuw6NvIHBvZGVyw6Egc2VyIGFsdGVyYWRhIGFww7NzIG8gcHVibGljYcOnw6NvIGRvIHByb2pldG8uJyksXG5cbiAgICAgICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICczLzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdUYXhhcycpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvYnJhbW9zIDEzJSBzb2JyZSBvICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAndmFsb3IgdG90YWwgYXJyZWNhZGFkbycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJyBwZWxvIHNldSBwcm9qZXRvIGNhc28gZWxlIGF0aW5qYSBvdSBzdXBlcmUgYSBtZXRhIGRlbnRybyBkbyBwcmF6byBkYSBjYW1wYW5oYS4gU2UgbyBwcm9qZXRvIG7Do28gYXRpbmdpciBhIG1ldGEsIG5lbmh1bWEgdGF4YSBzZXLDoSBjb2JyYWRhLicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnKVxuICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnNC85JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3BhbicsIHtzdHlsZTogeydmb250LXdlaWdodCc6ICcgNjAwJ319LCAnUHJhem8gZGEgY2FtcGFuaGEnKVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIGBTZXUgcHJvamV0byBlc3RhcsOhIGVtIGFycmVjYWRhw6fDo28gbm8gQ2F0YXJzZSBhdMOpIG8gZGlhICR7aC5tb21lbnRpZnkoY3RybC5leHBpcmVzQXQoKSl9IMOgcyAyM2g1OW1pbjU5cy4gRXN0ZSBwcmF6byBuw6NvIHBvZGVyw6Egc2VyIGFsdGVyYWRvIGFww7NzIGEgcHVibGljYcOnw6NvIGRvIHByb2pldG8uYClcbiAgICAgICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc1LzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdSZWdyYXMgZG8gcmVwYXNzZSBlIHJlZW1ib2xzbycpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbJ1F1YW5kbyBvIHByYXpvIGRvIHNldSBwcm9qZXRvIGNoZWdhciBhbyBmaW0sIHZvY8OqIGRldmVyw6EgY29uZmlybWFyIHNldXMgZGFkb3MgYmFuY8Ohcmlvcy4gQXDDs3MgZXNzYSBjb25maXJtYcOnw6NvLCBvIENhdGFyc2UgZGVwb3NpdGFyw6EgbyB2YWxvciBhcnJlY2FkYWRvLCBqw6EgY29tIG8gZGVzY29udG8gZGEgdGF4YSwgbmEgc3VhIGNvbnRhIGNvcnJlbnRlIGVtIGF0w6kgMTAgZGlhcyDDunRlaXMuIENhc28gbyBwcm9qZXRvIG7Do28gYXRpbmphIDEwMCUgZGEgbWV0YSBkZW50cm8gZG8gcHJhem8sIG8gQ2F0YXJzZSBpcsOhIHJlZW1ib2xzYXIgb3MgYXBvaWFkb3Jlcy4gJyxtKCdhLmFsdC1saW5rW2hyZWY9XFwnaHR0cDovL3N1cG9ydGUuY2F0YXJzZS5tZS9oYy9wdC1ici9hcnRpY2xlcy8yMDIzNjU1MDdcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJywgJ1NhaWJhIG1haXMgc29icmUgbyBwcm9jZXNzbyBkZSByZWVtYm9sc28nKSwnLiddKVxuICAgICAgICAgICAgICAgICAgICBdKSxcblxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzYvOScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7c3R5bGU6IHsnZm9udC13ZWlnaHQnOiAnIDYwMCd9fSwgJ08gcXVlIHBvZGUgZSBuw6NvIHBvZGUgYWx0ZXJhciBuYSBww6FnaW5hIGRvIHByb2pldG8gYSBwYXJ0aXIgZGEgcHVibGljYcOnw6NvPycpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIFttKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1ZvY8OqIG7Do28gcG9kZXLDoTonKSwnIGFsdGVyYXIgbyBub21lIGRvIHByb2pldG8sIGEgVVJMIChsaW5rKSBkbyBwcm9qZXRvLCBhIGNhdGVnb3JpYSBlc2NvbGhpZGEsIG8gdGlwbyBkZSBmaW5hbmNpYW1lbnRvLCBhIGNvbnRhIGJhbmPDoXJpYSwgYSBtZXRhIGRlIGFycmVjYWRhw6fDo28sIG8gcHJhem8gZXNjb2xoaWRvIGUgYXMgcmVjb21wZW5zYXMgb25kZSBleGlzdGlyZW0gYXBvaW9zIGrDoSBlZmV0dWFkb3MuXFwgJyxtKCdicicpLG0oJ2JyJyksbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1ZvY8OqIHBvZGVyw6E6ICcpLCdlZGl0YXIgbyBjb250ZcO6ZG8gZGEgZGVzY3Jpw6fDo28gZG8gcHJvamV0bywgYWx0ZXJhciBvIHbDrWRlbyBwcmluY2lwYWwgZGEgY2FtcGFuaGEsIGEgaW1hZ2VtIGRvIHByb2pldG8sIGEgZnJhc2UgZGUgZWZlaXRvLCBhcyByZWNvbXBlbnNhcyBvbmRlIG7Do28gZXhpc3RpcmVtIGFwb2lvcyBlZmV0dWFkb3MsIGFsw6ltIGRlIGFkaWNpb25hciBub3ZhcyByZWNvbXBlbnNhcyBkdXJhbnRlIGEgYXJyZWNhZGHDp8Ojby4nXSldXSksXG5cbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc3LzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdSZXNwb25zYWJpbGlkYWRlIGRvIENhdGFyc2UnKVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBbbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdPIENhdGFyc2Ugw6kgcmVzcG9uc8OhdmVsOicpLCfCoHBlbG8gZGVzZW52b2x2aW1lbnRvIHRlY25vbMOzZ2ljbyBkYSBwbGF0YWZvcm1hLCBhdGVuZGltZW50byBkZSBkw7p2aWRhcyBlIHByb2JsZW1hcyAodGFudG8gZGUgYXBvaWFkb3JlcyBxdWFudG8gZGUgcmVhbGl6YWRvcmVzKSwgcG9yIGhvc3BlZGFyIG8gcHJvamV0byBuYSBwbGF0YWZvcm1hIGUgcG9yIGdhcmFudGlyIGEgc2VndXJhbsOnYSBkYXMgdHJhbnNhw6fDtWVzIGZpbmFuY2VpcmFzLlxcICcsbSgnYnInKSxtKCdicicpLG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdPIENhdGFyc2UgbsOjbyDDqSByZXNwb25zw6F2ZWw6JyksJ8KgcGVsbyBmaW5hbmNpYW1lbnRvLCBkaXZ1bGdhw6fDo28gZSBleGVjdcOnw6NvLCBuZW0gcGVsYSBlbnRyZWdhIGRlIHJlY29tcGVuc2FzIGRvcyBwcm9qZXRvcyBpbnNjcml0b3MuJ10pXV0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnOC85JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3BhbicsIHtzdHlsZTogeydmb250LXdlaWdodCc6ICcgNjAwJ319LCAnU3VhcyByZXNwb25zYWJpbGlkYWRlcycpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLCfDiSBzdWEgcmVzcG9uc2FiaWxpZGFkZSB0dWRvIGFxdWlsbyBxdWUgZGl6IHJlc3BlaXRvIGEgZm9ybWF0YcOnw6NvIGRvIHByb2pldG8sIHBsYW5lamFtZW50byBlIGRpdnVsZ2HDp8OjbyBkYSBjYW1wYW5oYSBkZSBhcnJlY2FkYcOnw6NvLCBtb2JpbGl6YcOnw6NvIGRlIGFwb2lhZG9yZXMsIGV4ZWN1w6fDo28gZG8gcHJvamV0bywgcHJvZHXDp8OjbyBlIGVudHJlZ2EgZGUgcmVjb21wZW5zYXMgZGVudHJvIGRvIHByYXpvIGVzdGltYWRvIGUgY29tdW5pY2HDp8OjbyBjb20gYXBvaWFkb3Jlcy4nXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc5LzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdSZXRpcmFkYXMgZGUgcHJvamV0b3Mgbm8gYXInKVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnKSwnTyBDQVRBUlNFIHJlc2VydmEtc2UgbyBkaXJlaXRvIGRlLCBhIHNldSBleGNsdXNpdm8gY3JpdMOpcmlvIGUgdW1hIHZleiBub3RpZmljYWRvIGEgcmVzcGVpdG8sIGNhbmNlbGFyIHByb2pldG9zIGUgZW5jZXJyYXIgYXMgY29udGFzIGRlIENSSUFET1JFUyBERSBQUk9KRVRPUyBxdWUgdmlvbGVtIG5vc3NhcyAnLG0oJ2EuYWx0LWxpbmtbaHJlZj1cXCdodHRwOi8vc3Vwb3J0ZS5jYXRhcnNlLm1lL2hjL3B0LWJyL2FydGljbGVzLzIwMjM4NzYzOC1EaXJldHJpemVzLXBhcmEtY3JpYSVDMyVBNyVDMyVBM28tZGUtcHJvamV0b3NcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJywgJ1JlZ3JhcyBkbyBKb2dvJyksJyBlICcsbSgnYS5hbHQtbGlua1tocmVmPVxcJ2h0dHA6Ly93d3cuY2F0YXJzZS5tZS90ZXJtcy1vZi11c2VcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJywgJ1Rlcm1vcyBkZSBVc28nKSwnLiddKVxuICAgICAgICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gWyFjdHJsLmwoKSAmJiAhY3RybC5hY2NvdW50TCgpID8gW1xuICAgICAgICAocHJvamVjdC5pc19vd25lcl9vcl9hZG1pbiA/IG0uY29tcG9uZW50KHByb2plY3REYXNoYm9hcmRNZW51LCB7XG4gICAgICAgICAgICBwcm9qZWN0OiBtLnByb3AocHJvamVjdCksXG4gICAgICAgICAgICBoaWRlUHVibGlzaDogdHJ1ZVxuICAgICAgICB9KSA6ICcnKSxcbiAgICAgICAgbShgLnctc2VjdGlvbi5zZWN0aW9uLXByb2R1Y3QuJHtwcm9qZWN0Lm1vZGV9YCksXG4gICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJyksXG4gICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgbSgnaW1nLnUtbWFyZ2luYm90dG9tLTIwW3NyYz1cXCcvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL2xhdW5jaC1pY29uLnBuZ1xcJ11bd2lkdGg9XFwnOTRcXCddJyksXG4gICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0yMCcsICdQcm9udG8gcGFyYSBsYW7Dp2FyIHN1YSBjYW1wYW5oYT8nKSxcbiAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTMwJywgJ1ByZXBhcmFtb3MgdW1hIGxpc3RhIGNvbSBpbmZvcm1hw6fDtWVzIGltcG9ydGFudGVzIHBhcmEgdm9jw6ogY2hlY2FyIGFudGVzIGRlIGNvbG9jYXIgc2V1IHByb2pldG8gbm8gYXIhJylcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgbSgnLmRpdmlkZXInKSxcbiAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLW9uZS1jb2x1bW4uYmctZ3JheS5zZWN0aW9uLmJlZm9yZS1mb290ZXInLCBbXG4gICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgbSgnLmNhcmQubWVkaXVtLnUtbWFyZ2luYm90dG9tLTYwLmNhcmQtdGVyY2lhcnknLCBbXG4gICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNsZWFyZml4JywgW1xuICAgICAgICAgICAgICAgICAgbSgnaW1nLmNhcmQtcHJvamVjdC10aHVtYi51LXJpZ2h0W3NyYz0nICsgcHJvamVjdC5sYXJnZV9pbWFnZSArICddJylcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0zMC5mb250c2l6ZS1iYXNlJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1TDrXR1bG86ICcpLCBwcm9qZWN0Lm5hbWVdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdMaW5rOiAnKSxgd3d3LmNhdGFyc2UubWUvJHtwcm9qZWN0LnBlcm1hbGlua31gXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnTW9kYWxpZGFkZSBkZSBmaW5hbmNpYW1lbnRvOiAnKSwgSTE4bi50KHByb2plY3QubW9kZSwgSTE4blNjb3BlKCkpXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnTWV0YSBkZSBhcnJlY2FkYcOnw6NvOiAnKSxgUiQgJHtoLmZvcm1hdE51bWJlcihwcm9qZWN0LmdvYWwsIDIsIDMpfWBdKSxcbiAgICAgICAgICAgICAgICAgICAgKHByb2plY3Qub25saW5lX2RheXMgIT09IG51bGwpID8gbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIGBQcmF6bzogJHtwcm9qZWN0Lm9ubGluZV9kYXlzfSAkeyhwcm9qZWN0Lm9ubGluZV9kYXlzID4gMSkgPyAnZGlhcycgOiAnZGlhJyB9YCldKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1Jlc3BvbnPDoXZlbDogJyksIGFjY291bnQub3duZXJfbmFtZV0pLFxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ0NQRi9DTlBKOiAnKSwgYWNjb3VudC5vd25lcl9kb2N1bWVudF0pXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMScpLFxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbmJvdHRvbS0xMCcpLFxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udGNvbG9yLXNlY29uZGFyeScsICdPcyBkYWRvcyBhY2ltYSBuw6NvIHBvZGVtIHNlciBhbHRlcmFkb3MgYXDDs3MgbyBwcm9qZXRvIGVudHJhciBubyBhci4gU2Ugdm9jw6ogcHJlY2lzYSBmYXplciBtdWRhbsOnYXMsIG5hdmVndWUgbmEgYmFycmEgbGF0ZXJhbCBlIHZvbHRlIGFxdWkgcXVhbmRvIGVzdGl2ZXIgdHVkbyBwcm9udG8hJylcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEnKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy5jYXJkLm1lZGl1bS51LXJhZGl1cy51LW1hcmdpbmJvdHRvbS02MCcsIFtcbiAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUmVsZW1icmUgbm9zc2FzIHJlZ3JhcycpLFxuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJyksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsJywgWydBbnRlcyBkZSBwdWJsaWNhciwgY2xpcXVlIG5vcyBjw61yY3Vsb3MgYWJhaXhvIGUgY29uZmlybWUgcXVlIHZvY8OqIGVzdMOhIGNpZW50ZSBkZSBjb21vIGZ1bmNpb25hIG8gQ2F0YXJzZS4gUXVhbHF1ZXIgZMO6dmlkYSwgJyxtKCdhLmFsdC1saW5rW2hyZWY9XFwnaHR0cHM6Ly9lcXVpcGVjYXRhcnNlLnplbmRlc2suY29tL2FjY291bnQvZHJvcGJveGVzLzIwMjk4NTM3XFwnXVt0YXJnZXQ9XFwnX2JsYW5rXFwnXScsICdlbnRyZSBlbSBjb250YXRvJyksJyEnXSlcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pLFxuXG4gICAgICAgICAgICAgIF8ubWFwKHByb2plY3QubW9kZSA9PSAnZmxleCcgPyBmbGV4VGVybXMocHJvamVjdCkgOiB0ZXJtcyhwcm9qZWN0KSwgKHRlcm0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbShgLnUtbWFyZ2luYm90dG9tLTMwLmZvbnRzaXplLWJhc2Uke2luZGV4ID09IDAgPyAnJyA6ICcudy1oaWRkZW4ucHVibGlzaC1ydWxlcyd9YCwgW1xuICAgICAgICAgICAgICAgICAgICBtKGAudy1yb3dbaWQ9J3J1bGUtJHtpbmRleH0nXWAsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMS51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtKChwcm9qZWN0Lm1vZGUgPT0gJ2ZsZXgnID8gY3RybC5mbGV4QWNjZXB0VGVybSgpIDogY3RybC5hY2NlcHRUZXJtKCkpW2luZGV4XSA/IGBhLnctaW5saW5lLWJsb2NrLmNoZWNrYm94LWJpZ1tocmVmPScjcnVsZS0ke2luZGV4ICsgMX0nXWAgOiBgYS53LWlubGluZS1ibG9jay5jaGVja2JveC1iaWcuY2hlY2tib3gtLXNlbGVjdGVkLmZhLmZhLWNoZWNrLmZhLWxnW2hyZWY9JyNydWxlLSR7aW5kZXggKyAxfSddYCwge29uY2xpY2s6ICgpID0+IGN0cmwuc2hvd05leHRUZXJtKGluZGV4LCAocHJvamVjdC5tb2RlID09ICdmbGV4JyA/IGN0cmwuZmxleEFjY2VwdFRlcm0gOiBjdHJsLmFjY2VwdFRlcm0pKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIHRlcm1cbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1yb3cucHVibGlzaC1idG4tc2VjdGlvbi53LWhpZGRlbicsIFtcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnKSxcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgbShgYS5idG4uYnRuLWxhcmdlLnUtbWFyZ2luYm90dG9tLTIwW2hyZWY9LyR7cHJvamVjdC5tb2RlID09ICdmbGV4JyA/ICdmbGV4aWJsZV9wcm9qZWN0cycgOiAncHJvamVjdHMnfS8ke3Byb2plY3QuaWR9L3B1c2hfdG9fb25saW5lXWAsICdQdWJsaWNhciBhZ29yYSEnKSxcbiAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci5mb250c2l6ZS1zbWFsbGVyJywgW1xuICAgICAgICAgICAgICAgICAgJ0FvIHB1YmxpY2FyIG8gc2V1IHByb2pldG8sIHZvY8OqIGVzdMOhIGFjZWl0YW5kbyBvcyAnLFxuICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVxcJy90ZXJtcy1vZi11c2VcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJywgJ1Rlcm1vcyBkZSBVc28nKSxcbiAgICAgICAgICAgICAgICAgICcgZSAnLFxuICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVxcJy9wcml2YWN5LXBvbGljeVxcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnUG9saXRpY2EgZGUgUHJpdmFjaWRhZGUnKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcpXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICAnXFxcbiAgICAnXG4gICAgICBdIDogaC5sb2FkZXIoKV07XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHVibGlzaDtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5jb25zdCBzdGFydFZNID0gKEkxOG4pID0+IHtcbiAgICBjb25zdCBpMThuU3RhcnQgPSBJMThuLnRyYW5zbGF0aW9uc1tJMThuLmN1cnJlbnRMb2NhbGUoKV0ucGFnZXMuc3RhcnQsXG4gICAgICAgIHRlc3RpbW9uaWFscyA9IGkxOG5TdGFydC50ZXN0aW1vbmlhbHMsXG4gICAgICAgIGNhdGVnb3J5UHJvamVjdHMgPSBpMThuU3RhcnQuY2F0ZWdvcnlQcm9qZWN0cyxcbiAgICAgICAgcGFuZXMgPSBpMThuU3RhcnQucGFuZXMsXG4gICAgICAgIHFhID0gaTE4blN0YXJ0LnFhO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVzdGltb25pYWxzOiBfLm1hcCh0ZXN0aW1vbmlhbHMsICh0ZXN0aW1vbmlhbCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0aHVtYlVybDogdGVzdGltb25pYWwudGh1bWIsXG4gICAgICAgICAgICAgICAgY29udGVudDogdGVzdGltb25pYWwuY29udGVudCxcbiAgICAgICAgICAgICAgICBuYW1lOiB0ZXN0aW1vbmlhbC5uYW1lLFxuICAgICAgICAgICAgICAgIHRvdGFsczogdGVzdGltb25pYWwudG90YWxzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgcGFuZXM6IF8ubWFwKHBhbmVzLCAocGFuZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogcGFuZS5sYWJlbCxcbiAgICAgICAgICAgICAgICBzcmM6IHBhbmUuc3JjXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgcXVlc3Rpb25zOiB7XG4gICAgICAgICAgICBjb2xfMTogXy5tYXAocWEuY29sXzEsIChxdWVzdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiBxdWVzdGlvbi5xdWVzdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiBxdWVzdGlvbi5hbnN3ZXJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjb2xfMjogXy5tYXAocWEuY29sXzIsIChxdWVzdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiBxdWVzdGlvbi5xdWVzdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiBxdWVzdGlvbi5hbnN3ZXJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgY2F0ZWdvcnlQcm9qZWN0czogXy5tYXAoY2F0ZWdvcnlQcm9qZWN0cywgKGNhdGVnb3J5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5SWQ6IGNhdGVnb3J5LmNhdGVnb3J5X2lkLFxuICAgICAgICAgICAgICAgIHNhbXBsZVByb2plY3RzOiBbXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5LnNhbXBsZV9wcm9qZWN0X2lkcy5wcmltYXJ5LFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5zYW1wbGVfcHJvamVjdF9pZHMuc2Vjb25kYXJ5XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc3RhcnRWTTtcbiIsIi8qKlxuICogd2luZG93LmMueW91dHViZUxpZ2h0Ym94IGNvbXBvbmVudFxuICogQSB2aXN1YWwgY29tcG9uZW50IHRoYXQgZGlzcGxheXMgYSBsaWdodGJveCB3aXRoIGEgeW91dHViZSB2aWRlb1xuICpcbiAqIEV4YW1wbGU6XG4gKiB2aWV3OiAoKSA9PiB7XG4gKiAgICAgIC4uLlxuICogICAgICBtLmNvbXBvbmVudChjLnlvdXR1YmVMaWdodGJveCwge3NyYzogJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9RmxGVGNEU0tuTE0nfSlcbiAqICAgICAgLi4uXG4gKiAgfVxuICovXG5cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IHlvdXR1YmVMaWdodGJveCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgbGV0IHBsYXllcjtcbiAgICAgICAgY29uc3Qgc2hvd0xpZ2h0Ym94ID0gaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKSxcbiAgICAgICAgICAgIHNldFlvdXR1YmUgPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFNjcmlwdFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgICAgICAgICAgICAgICAgICAgdGFnLnNyYyA9ICdodHRwczovL3d3dy55b3V0dWJlLmNvbS9pZnJhbWVfYXBpJztcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RTY3JpcHRUYWcucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGFnLCBmaXJzdFNjcmlwdFRhZyk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vbllvdVR1YmVJZnJhbWVBUElSZWFkeSA9IGNyZWF0ZVBsYXllcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xvc2VWaWRlbyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQocGxheWVyKSkge1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIucGF1c2VWaWRlbygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNob3dMaWdodGJveC50b2dnbGUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjcmVhdGVQbGF5ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcGxheWVyID0gbmV3IFlULlBsYXllcigneXR2aWRlbycsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnNTI4JyxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc5NDAnLFxuICAgICAgICAgICAgICAgICAgICB2aWRlb0lkOiBhcmdzLnNyYyxcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyVmFyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0luZm86IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2Rlc3RCcmFuZGluZzogMFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdvblN0YXRlQ2hhbmdlJzogKHN0YXRlKSA9PiAoc3RhdGUuZGF0YSA9PT0gMCkgPyBjbG9zZVZpZGVvKCkgOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaG93TGlnaHRib3g6IHNob3dMaWdodGJveCxcbiAgICAgICAgICAgIHNldFlvdXR1YmU6IHNldFlvdXR1YmUsXG4gICAgICAgICAgICBjbG9zZVZpZGVvOiBjbG9zZVZpZGVvXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJyN5b3V0dWJlLWxpZ2h0Ym94JywgW1xuICAgICAgICAgICAgbSgnYSN5b3V0dWJlLXBsYXkudy1saWdodGJveC53LWlubGluZS1ibG9jay5mYS5mYS1wbGF5LWNpcmNsZS5mb250Y29sb3ItbmVnYXRpdmUuZmEtNXhbaHJlZj1cXCdqYXZhc2NyaXB0OnZvaWQoMCk7XFwnXScsIHtcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuc2hvd0xpZ2h0Ym94LnRvZ2dsZSgpO1xuICAgICAgICAgICAgICAgICAgICBhcmdzLm9uY2xpY2sgJiYgYXJncy5vbmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtKGAjbGlnaHRib3gudy1saWdodGJveC1iYWNrZHJvcFtzdHlsZT1cImRpc3BsYXk6JHtjdHJsLnNob3dMaWdodGJveCgpID8gJ2Jsb2NrJyA6ICdub25lJ31cIl1gLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctbGlnaHRib3gtY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1saWdodGJveC1jb250ZW50JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctbGlnaHRib3gtdmlldycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1saWdodGJveC1mcmFtZScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZmlndXJlLnctbGlnaHRib3gtZmlndXJlJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnctbGlnaHRib3gtaW1nLnctbGlnaHRib3gtaW1hZ2Vbc3JjPVxcJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCUzQ3N2ZyUyMHhtbG5zPSUyMmh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJTIyJTIwd2lkdGg9JTIyOTQwJTIyJTIwaGVpZ2h0PSUyMjUyOCUyMi8lM0VcXCddJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcjeXR2aWRlby5lbWJlZGx5LWVtYmVkLnctbGlnaHRib3gtZW1iZWQnLCB7Y29uZmlnOiBjdHJsLnNldFlvdXR1YmV9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWxpZ2h0Ym94LXNwaW5uZXIudy1saWdodGJveC1oaWRlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1saWdodGJveC1jb250cm9sLnctbGlnaHRib3gtbGVmdC53LWxpZ2h0Ym94LWluYWN0aXZlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1saWdodGJveC1jb250cm9sLnctbGlnaHRib3gtcmlnaHQudy1saWdodGJveC1pbmFjdGl2ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnI3lvdXR1YmUtY2xvc2Uudy1saWdodGJveC1jb250cm9sLnctbGlnaHRib3gtY2xvc2UnLCB7b25jbGljazogY3RybC5jbG9zZVZpZGVvfSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWxpZ2h0Ym94LXN0cmlwJylcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgeW91dHViZUxpZ2h0Ym94O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBzdGFydFZNIGZyb20gJy4uL3Ztcy9zdGFydC12bSc7XG5pbXBvcnQgeW91dHViZUxpZ2h0Ym94IGZyb20gJy4uL2MveW91dHViZS1saWdodGJveCc7XG5pbXBvcnQgc2xpZGVyIGZyb20gJy4uL2Mvc2xpZGVyJztcbmltcG9ydCBsYW5kaW5nUUEgZnJvbSAnLi4vYy9sYW5kaW5nLXFhJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncGFnZXMuc3RhcnQnKTtcblxuY29uc3Qgc3RhcnQgPSB7XG4gICAgY29udHJvbGxlcigpIHtcbiAgICAgICAgaC5hbmFseXRpY3Mud2luZG93U2Nyb2xsKHtjYXQ6ICdwcm9qZWN0X3N0YXJ0JyxhY3Q6ICdzdGFydF9wYWdlX3Njcm9sbCd9KTtcbiAgICAgICAgY29uc3Qgc3RhdHMgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgY2F0ZWdvcmllcyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBzZWxlY3RlZFBhbmUgPSBtLnByb3AoMCksXG4gICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5ID0gbS5wcm9wKFtdKSxcbiAgICAgICAgICAgIGZlYXR1cmVkUHJvamVjdHMgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeUlkeCA9IG0ucHJvcCgtMSksXG4gICAgICAgICAgICBzdGFydHZtID0gc3RhcnRWTShJMThuKSxcbiAgICAgICAgICAgIGZpbHRlcnMgPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNLFxuICAgICAgICAgICAgcGFuZUltYWdlcyA9IHN0YXJ0dm0ucGFuZXMsXG4gICAgICAgICAgICBjYXRlZ29yeXZtID0gZmlsdGVycyh7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlfaWQ6ICdlcSdcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcHJvamVjdHZtID0gZmlsdGVycyh7XG4gICAgICAgICAgICAgICAgcHJvamVjdF9pZDogJ2VxJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB1c2Vydm0gPSBmaWx0ZXJzKHtcbiAgICAgICAgICAgICAgICBpZDogJ2VxJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBsb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyLFxuICAgICAgICAgICAgc3RhdHNMb2FkZXIgPSBsb2FkZXIobW9kZWxzLnN0YXRpc3RpYy5nZXRSb3dPcHRpb25zKCkpLFxuICAgICAgICAgICAgbG9hZENhdGVnb3JpZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVscy5jYXRlZ29yeS5nZXRQYWdlKGZpbHRlcnMoe30pLm9yZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FzYydcbiAgICAgICAgICAgICAgICB9KS5wYXJhbWV0ZXJzKCkpLnRoZW4oY2F0ZWdvcmllcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VsZWN0UGFuZSA9IChpZHgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFBhbmUoaWR4KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxDYXRlZ29yeSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGVyKG1vZGVscy5jYXRlZ29yeVRvdGFscy5nZXRSb3dPcHRpb25zKGNhdGVnb3J5dm0ucGFyYW1ldGVycygpKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbFByb2plY3QgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRlcihtb2RlbHMucHJvamVjdERldGFpbC5nZXRSb3dPcHRpb25zKHByb2plY3R2bS5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsVXNlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGVyKG1vZGVscy51c2VyRGV0YWlsLmdldFJvd09wdGlvbnModXNlcnZtLnBhcmFtZXRlcnMoKSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlbGVjdENhdGVnb3J5ID0gKGNhdGVnb3J5KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeUlkeChjYXRlZ29yeS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5dm0uY2F0ZWdvcnlfaWQoY2F0ZWdvcnkuaWQpO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5KFtjYXRlZ29yeV0pO1xuICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICBsQ2F0ZWdvcnkoKS5sb2FkKCkudGhlbihsb2FkQ2F0ZWdvcnlQcm9qZWN0cyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRVc2VyID0gKHVzZXIsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVkUHJvamVjdHMoKVtpZHhdID0gXy5leHRlbmQoe30sIGZlYXR1cmVkUHJvamVjdHMoKVtpZHhdLCB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJUaHVtYjogIF8uZmlyc3QodXNlcikucHJvZmlsZV9pbWdfdGh1bWJuYWlsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0UHJvamVjdCA9IChwcm9qZWN0LCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlZFByb2plY3RzKClbaWR4XSA9IF8uZmlyc3QocHJvamVjdCk7XG4gICAgICAgICAgICAgICAgdXNlcnZtLmlkKF8uZmlyc3QocHJvamVjdCkudXNlci5pZCk7XG4gICAgICAgICAgICAgICAgbFVzZXIoKS5sb2FkKCkudGhlbigodXNlcikgPT4gc2V0VXNlcih1c2VyLCBpZHgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsb2FkQ2F0ZWdvcnlQcm9qZWN0cyA9IChjYXRlZ29yeSkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnkoY2F0ZWdvcnkpO1xuICAgICAgICAgICAgICAgIGxldCBjYXRlZ29yeVByb2plY3RzID0gXy5maW5kV2hlcmUoc3RhcnR2bS5jYXRlZ29yeVByb2plY3RzLCB7XG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5SWQ6IF8uZmlyc3QoY2F0ZWdvcnkpLmNhdGVnb3J5X2lkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZWRQcm9qZWN0cyhbXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKGNhdGVnb3J5UHJvamVjdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKGNhdGVnb3J5UHJvamVjdHMuc2FtcGxlUHJvamVjdHMsIChwcm9qZWN0X2lkLCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChwcm9qZWN0X2lkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3R2bS5wcm9qZWN0X2lkKHByb2plY3RfaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxQcm9qZWN0KCkubG9hZCgpLnRoZW4oKHByb2plY3QpID0+IHNldFByb2plY3QocHJvamVjdCwgaWR4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgc3RhdHNMb2FkZXIubG9hZCgpLnRoZW4oc3RhdHMpO1xuICAgICAgICBsb2FkQ2F0ZWdvcmllcygpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0czogc3RhdHMsXG4gICAgICAgICAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzLFxuICAgICAgICAgICAgcGFuZUltYWdlczogcGFuZUltYWdlcyxcbiAgICAgICAgICAgIHNlbGVjdENhdGVnb3J5OiBzZWxlY3RDYXRlZ29yeSxcbiAgICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk6IHNlbGVjdGVkQ2F0ZWdvcnksXG4gICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5SWR4OiBzZWxlY3RlZENhdGVnb3J5SWR4LFxuICAgICAgICAgICAgc2VsZWN0UGFuZTogc2VsZWN0UGFuZSxcbiAgICAgICAgICAgIHNlbGVjdGVkUGFuZTogc2VsZWN0ZWRQYW5lLFxuICAgICAgICAgICAgZmVhdHVyZWRQcm9qZWN0czogZmVhdHVyZWRQcm9qZWN0cyxcbiAgICAgICAgICAgIHRlc3RpbW9uaWFsczogc3RhcnR2bS50ZXN0aW1vbmlhbHMsXG4gICAgICAgICAgICBxdWVzdGlvbnM6IHN0YXJ0dm0ucXVlc3Rpb25zXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IHN0YXRzID0gXy5maXJzdChjdHJsLnN0YXRzKCkpO1xuICAgICAgICBjb25zdCB0ZXN0aW1vbmlhbHMgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gXy5tYXAoY3RybC50ZXN0aW1vbmlhbHMsICh0ZXN0aW1vbmlhbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBtKCcuY2FyZC51LXJhZGl1cy5jYXJkLWJpZy5jYXJkLXRlcmNpYXJ5JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oYGltZy50aHVtYi10ZXN0aW1vbmlhbC51LXJvdW5kLnUtbWFyZ2luYm90dG9tLTIwW3NyYz1cIiR7dGVzdGltb25pYWwudGh1bWJVcmx9XCJdYClcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMzAnLCBgXCIke3Rlc3RpbW9uaWFsLmNvbnRlbnR9XCJgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UuZm9udHdlaWdodC1zZW1pYm9sZCcsIHRlc3RpbW9uaWFsLm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLCB0ZXN0aW1vbmlhbC50b3RhbHMpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG0oJyNzdGFydCcsIFtcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uaGVyby1mdWxsLmhlcm8tc3RhcnQnLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1tZWdhanVtYm8uZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS00MCcsIEkxOG4udCgnc2xvZ2FuJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jb2wtcHVzaC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EuYnRuLmJ0bi1sYXJnZS51LW1hcmdpbmJvdHRvbS0xMFtocmVmPVwiI3N0YXJ0LWZvcm1cIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogaC5zY3JvbGxUbygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF9zdGFydCcsYWN0OiAnc3RhcnRfYnRuc3RhcnRfY2xpY2snfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBJMThuLnQoJ3N1Ym1pdCcsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBfLmlzRW1wdHkoc3RhdHMpID8gJycgOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdC5saW5laGVpZ2h0LWxvb3NlJywgaC5mb3JtYXROdW1iZXIoc3RhdHMudG90YWxfY29udHJpYnV0b3JzLCAwLCAzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1zbWFsbC5zdGFydC1zdGF0cycsIEkxOG4udCgnaGVhZGVyLnBlb3BsZScsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlc3QubGluZWhlaWdodC1sb29zZScsIHN0YXRzLnRvdGFsX2NvbnRyaWJ1dGVkLnRvU3RyaW5nKCkuc2xpY2UoMCwgMikgKyAnIG1pbGjDtWVzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1zbWFsbC5zdGFydC1zdGF0cycsIEkxOG4udCgnaGVhZGVyLm1vbmV5JywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdC5saW5laGVpZ2h0LWxvb3NlJywgaC5mb3JtYXROdW1iZXIoc3RhdHMudG90YWxfcHJvamVjdHNfc3VjY2VzcywgMCwgMykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtc21hbGwuc3RhcnQtc3RhdHMnLCBJMThuLnQoJ2hlYWRlci5zdWNjZXNzJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24nLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTAudy1jb2wtcHVzaC0xLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlci51LW1hcmdpbmJvdHRvbS0xMC5mb250d2VpZ2h0LXNlbWlib2xkJywgSTE4bi50KCdwYWdlLXRpdGxlJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwnLCBJMThuLnQoJ3BhZ2Utc3VidGl0bGUnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNsZWFyZml4Lmhvdy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5ob3ctY29sLTAxJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5pbmZvLWhvd3dvcmtzLWJhY2tlcnMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlJywgSTE4bi50KCdiYW5uZXIuMScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdiYW5uZXIuMicsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuaW5mby1ob3d3b3Jrcy1iYWNrZXJzJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZScsIEkxOG4udCgnYmFubmVyLjMnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZScsIEkxOG4udCgnYmFubmVyLjQnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmhvdy1jb2wtMDInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5ob3ctY29sLTAzJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlJywgSTE4bi50KCdiYW5uZXIuNScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLCBJMThuLnQoJ2Jhbm5lci42JywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZS51LW1hcmdpbnRvcC0zMCcsIEkxOG4udCgnYmFubmVyLjcnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdiYW5uZXIuOCcsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctaGlkZGVuLW1haW4udy1oaWRkZW4tbWVkaXVtLmhvdy1jb2wtMDEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmluZm8taG93d29ya3MtYmFja2VycycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UnLCBJMThuLnQoJ2Jhbm5lci4xJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLCBJMThuLnQoJ2Jhbm5lci4yJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5pbmZvLWhvd3dvcmtzLWJhY2tlcnMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlJywgSTE4bi50KCdiYW5uZXIuMycsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgIEkxOG4udCgnYmFubmVyLjQnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5kaXZpZGVyJyksXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24tbGFyZ2UnLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtbGFyZ2VzdC5mb250d2VpZ2h0LXNlbWlib2xkJywgSTE4bi50KCdmZWF0dXJlcy50aXRsZScsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTIwJywgSTE4bi50KCdmZWF0dXJlcy5zdWJ0aXRsZScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bS51LW1hcmdpbnRvcC0zMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIEkxOG4udCgnZmVhdHVyZXMuZmVhdHVyZV8xJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIEkxOG4udCgnZmVhdHVyZXMuZmVhdHVyZV8yJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIEkxOG4udCgnZmVhdHVyZXMuZmVhdHVyZV8zJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIEkxOG4udCgnZmVhdHVyZXMuZmVhdHVyZV80JywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIEkxOG4udCgnZmVhdHVyZXMuZmVhdHVyZV81JywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIEkxOG4udCgnZmVhdHVyZXMuZmVhdHVyZV82JywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctdGFicy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctdGFiLW1lbnUudy1jb2wudy1jb2wtNCcsIF8ubWFwKGN0cmwucGFuZUltYWdlcywgKHBhbmUsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKGBidG4udy10YWItbGluay53LWlubGluZS1ibG9jay50YWItbGlzdC1pdGVtJHsoaWR4ID09PSBjdHJsLnNlbGVjdGVkUGFuZSgpKSA/ICcuc2VsZWN0ZWQnIDogJyd9YCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF9zdGFydCcsYWN0OiAnc3RhcnRfc29sdXRpb25fY2xpY2snLGxibDogcGFuZS5sYWJlbH0sY3RybC5zZWxlY3RQYW5lKGlkeCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcGFuZS5sYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy10YWItY29udGVudC53LWNvbC53LWNvbC04JywgXy5tYXAoY3RybC5wYW5lSW1hZ2VzLCAocGFuZSwgaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oJy53LXRhYi1wYW5lJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBpbWdbc3JjPVwiJHtwYW5lLnNyY31cIl0ucGFuZS1pbWFnZSR7KGlkeCA9PT0gY3RybC5zZWxlY3RlZFBhbmUoKSkgPyAnLnNlbGVjdGVkJyA6ICcnfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi1sYXJnZS5jYXJkLXRlcmNpYXJ5JyxcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS00MCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1sYXJnZXN0LmZvbnR3ZWlnaHQtc2VtaWJvbGQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnbW9kZS50aXRsZScsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnbW9kZS5zdWJ0aXRsZScsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZmxleC1yb3cudS1tYXJnaW5ib3R0b20tNDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZmxleC1jb2x1bW4uY2FyZC51LXJhZGl1cy51LW1hcmdpbmJvdHRvbS0zMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0zMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTYzMmYzMzRlYzhhMzY3ZDM0MWI0YmJhX2JhZGdlLWFvbi5wbmdcXCddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZsZXgtY29sdW1uLnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ21vZGUuYW9uLmluZm8nLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZmxleC1jb2x1bW4uZm9udGNvbG9yLXNlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ21vZGUuYW9uLmluZm9fMicsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mbGV4LWNvbHVtbi5jYXJkLnUtcmFkaXVzLnUtbWFyZ2luYm90dG9tLTMwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTMwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1tzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NjMyZWJhY2QwOTI5NTdmMzRlYWVhOWNfYmFkZ2UtZmxleC5wbmdcXCddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZsZXgtY29sdW1uLnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnbW9kZS5mbGV4LmluZm8nLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZmxleC1jb2x1bW4uZm9udGNvbG9yLXNlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ21vZGUuZmxleC5pbmZvXzInLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0zMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UuZm9udHdlaWdodC1zZW1pYm9sZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ21vZGUudGF4X2luZm8nLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnbW9kZS5mYWlsZWRfaW5mbycsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KEkxOG4udCgnbW9kZS5tb3JlX2xpbmsnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24tbGFyZ2UuYmctYmx1ZS1vbmUnLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIubGluZWhlaWdodC10aWdodC5mb250Y29sb3ItbmVnYXRpdmUudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ3ZpZGVvLnRpdGxlJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgndmlkZW8uc3VidGl0bGUnLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHlvdXR1YmVMaWdodGJveCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBJMThuLnQoJ3ZpZGVvLnNyYycsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3N0YXJ0JyxhY3Q6ICdzdGFydF92aWRlb19wbGF5J30pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuc2VjdGlvbi1jYXRlZ29yaWVzJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnctY29sLXB1c2gtMScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTQwLmZvbnRjb2xvci1uZWdhdGl2ZScsIEkxOG4udCgnY2F0ZWdvcmllcy50aXRsZScsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXRhYnMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy10YWItbWVudS51LXRleHQtY2VudGVyJywgXy5tYXAoY3RybC5jYXRlZ29yaWVzKCksIChjYXRlZ29yeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKGBhLnctdGFiLWxpbmsudy1pbmxpbmUtYmxvY2suYnRuLWNhdGVnb3J5LnNtYWxsLmJ0bi1pbmxpbmUkeyhjdHJsLnNlbGVjdGVkQ2F0ZWdvcnlJZHgoKSA9PT0gY2F0ZWdvcnkuaWQpID8gJy53LS1jdXJyZW50JyA6ICcnfWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3Rfc3RhcnQnLGFjdDogJ3N0YXJ0X2NhdGVnb3J5X2NsaWNrJyxsYmw6IGNhdGVnb3J5Lm5hbWV9LCBjdHJsLnNlbGVjdENhdGVnb3J5KGNhdGVnb3J5KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIGNhdGVnb3J5Lm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy10YWItY29udGVudC51LW1hcmdpbnRvcC00MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy10YWItcGFuZS53LS10YWItYWN0aXZlJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCAoY3RybC5zZWxlY3RlZENhdGVnb3J5SWR4KCkgIT09IC0xKSA/IF8ubWFwKGN0cmwuc2VsZWN0ZWRDYXRlZ29yeSgpLCAoY2F0ZWdvcnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1qdW1iby51LW1hcmdpbmJvdHRvbS0yMCcsIGNhdGVnb3J5Lm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tbWVkaXVtLmJ0bi1pbmxpbmUuYnRuLWRhcmtbaHJlZj1cIiNzdGFydC1mb3JtXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBoLnNjcm9sbFRvKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgSTE4bi50KCdzdWJtaXQnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTcnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1tZWdhanVtYm8uZm9udGNvbG9yLW5lZ2F0aXZlJywgYFIkICR7Y2F0ZWdvcnkudG90YWxfc3VjY2Vzc2Z1bF92YWx1ZSA/IGguZm9ybWF0TnVtYmVyKGNhdGVnb3J5LnRvdGFsX3N1Y2Nlc3NmdWxfdmFsdWUsIDIsIDMpIDogJy4uLid9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0yMCcsICdEb2Fkb3MgcGFyYSBwcm9qZXRvcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbWVnYWp1bWJvLmZvbnRjb2xvci1uZWdhdGl2ZScsIChjYXRlZ29yeS5zdWNjZXNzZnVsX3Byb2plY3RzKSA/IGNhdGVnb3J5LnN1Y2Nlc3NmdWxfcHJvamVjdHMgOiAnLi4uJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsICdQcm9qZXRvcyBmaW5hbmNpYWRvcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhXy5pc0VtcHR5KGN0cmwuZmVhdHVyZWRQcm9qZWN0cygpKSA/IF8ubWFwKGN0cmwuZmVhdHVyZWRQcm9qZWN0cygpLCAocHJvamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFfLmlzVW5kZWZpbmVkKHByb2plY3QpID8gbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBpbWcudXNlci1hdmF0YXJbc3JjPVwiJHtoLnVzZUF2YXRhck9yRGVmYXVsdChwcm9qZWN0LnVzZXJUaHVtYil9XCJdYClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBwcm9qZWN0LnVzZXIubmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnY2F0ZWdvcmllcy5wbGVkZ2VkJywgSTE4blNjb3BlKHtwbGVkZ2VkOiBoLmZvcm1hdE51bWJlcihwcm9qZWN0LnBsZWRnZWQpLCBjb250cmlidXRvcnM6IHByb2plY3QudG90YWxfY29udHJpYnV0b3JzfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5saW5rLWhpZGRlbltocmVmPVwiLyR7cHJvamVjdC5wZXJtYWxpbmt9XCJdYCwgcHJvamVjdC5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6IG0oJy5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdjYXRlZ29yaWVzLmxvYWRpbmdfZmVhdHVyZWQnLCBJMThuU2NvcGUoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0uY29tcG9uZW50KHNsaWRlciwge1xuICAgICAgICAgICAgICAgIHNsaWRlczogdGVzdGltb25pYWxzKCksXG4gICAgICAgICAgICAgICAgdGl0bGU6IEkxOG4udCgndGVzdGltb25pYWxzX3RpdGxlJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgICAgIHNsaWRlQ2xhc3M6ICdzbGlkZS10ZXN0aW1vbmlhbHMtY29udGVudCcsXG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnc2xpZGUtdGVzdGltb25pYWxzJyxcbiAgICAgICAgICAgICAgICBvbmNoYW5nZTogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3Rfc3RhcnQnLGFjdDogJ3N0YXJ0X3Rlc3RpbW9uaWFsc19jaGFuZ2UnfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5kaXZpZGVyLnUtbWFyZ2ludG9wLTMwJyksXG4gICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlci51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTYwLnUtbWFyZ2ludG9wLTQwJywgSTE4bi50KCdxYV90aXRsZScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTYwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIF8ubWFwKGN0cmwucXVlc3Rpb25zLmNvbF8xLCAocXVlc3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChsYW5kaW5nUUEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbjogcXVlc3Rpb24ucXVlc3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiBxdWVzdGlvbi5hbnN3ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3Rfc3RhcnQnLGFjdDogJ3N0YXJ0X3FhX2NsaWNrJyxsYmw6IHF1ZXN0aW9uLnF1ZXN0aW9ufSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgXy5tYXAoY3RybC5xdWVzdGlvbnMuY29sXzIsIChxdWVzdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KGxhbmRpbmdRQSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiBxdWVzdGlvbi5xdWVzdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IHF1ZXN0aW9uLmFuc3dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF9zdGFydCcsYWN0OiAnc3RhcnRfcWFfY2xpY2snLGxibDogcXVlc3Rpb24ucXVlc3Rpb259KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJyNzdGFydC1mb3JtLnctc2VjdGlvbi5zZWN0aW9uLWxhcmdlLnUtdGV4dC1jZW50ZXIuYmctcHVycGxlLmJlZm9yZS1mb290ZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtanVtYm8uZm9udGNvbG9yLW5lZ2F0aXZlLnUtbWFyZ2luYm90dG9tLTYwJywgJ0NyaWUgbyBzZXUgcmFzY3VuaG8gZ3JhdHVpdGFtZW50ZSEnKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnZm9ybVthY3Rpb249XCIvcHJvamVjdHMvZmFsbGJhY2tfY3JlYXRlXCJdW21ldGhvZD1cIkdFVFwiXS53LXJvdy53LWZvcm0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbnN1Ym1pdDogaC5hbmFseXRpY3Mub25lVGltZUV2ZW50KHtjYXQ6ICdwcm9qZWN0X2NyZWF0ZScsYWN0OiAnY3JlYXRlX2Zvcm1fc3VibWl0J30pXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyLmZvbnRjb2xvci1uZWdhdGl2ZS51LW1hcmdpbmJvdHRvbS0xMCcsIEkxOG4udCgnZm9ybS50aXRsZScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXRbbmFtZT1cInV0ZjhcIl1bdHlwZT1cImhpZGRlblwiXVt2YWx1ZT1cIuKck1wiXScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGlucHV0W25hbWU9XCJhdXRoZW50aWNpdHlfdG9rZW5cIl1bdHlwZT1cImhpZGRlblwiXVt2YWx1ZT1cIiR7aC5hdXRoZW50aWNpdHlUb2tlbigpfVwiXWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZC5tZWRpdW0udS1tYXJnaW5ib3R0b20tMzBbdHlwZT1cInRleHRcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9qZWN0W25hbWVdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IGguYW5hbHl0aWNzLm9uZVRpbWVFdmVudCh7Y2F0OiAncHJvamVjdF9jcmVhdGUnLGFjdDogJ2NyZWF0ZV9mb3JtX2NoYW5nZScsbGJsOiAnbmFtZSd9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIuZm9udGNvbG9yLW5lZ2F0aXZlLnUtbWFyZ2luYm90dG9tLTEwJywgJ25hIGNhdGVnb3JpYScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NlbGVjdC53LXNlbGVjdC50ZXh0LWZpZWxkLm1lZGl1bS51LW1hcmdpbmJvdHRvbS00MCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb2plY3RbY2F0ZWdvcnlfaWRdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IGguYW5hbHl0aWNzLm9uZVRpbWVFdmVudCh7Y2F0OiAncHJvamVjdF9jcmVhdGUnLGFjdDogJ2NyZWF0ZV9mb3JtX2NoYW5nZScsbGJsOiAnY2F0ZWdvcnknfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVwiXCJdJywgSTE4bi50KCdmb3JtLnNlbGVjdF9kZWZhdWx0JywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAoY3RybC5jYXRlZ29yaWVzKCksIChjYXRlZ29yeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oYG9wdGlvblt2YWx1ZT1cIiR7Y2F0ZWdvcnkuaWR9XCJdYCwgY2F0ZWdvcnkubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS04MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1wdXNoLTQudS1tYXJnaW50b3AtNDAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGlucHV0W3R5cGU9XCJzdWJtaXRcIl1bdmFsdWU9XCIke0kxOG4udCgnZm9ybS5zdWJtaXQnLCBJMThuU2NvcGUoKSl9XCJdLnctYnV0dG9uLmJ0bi5idG4tbGFyZ2VgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzdGFydDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5cbmNvbnN0IHRlYW1Ub3RhbCA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICBjb25zdCB2bSA9IHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb246IG0ucHJvcChbXSlcbiAgICAgICAgfTtcblxuICAgICAgICBtb2RlbHMudGVhbVRvdGFsLmdldFJvdygpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHZtLmNvbGxlY3Rpb24oZGF0YSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2bTogdm1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnI3RlYW0tdG90YWwtc3RhdGljLnctc2VjdGlvbi5zZWN0aW9uLW9uZS1jb2x1bW4uc2VjdGlvbi51LW1hcmdpbnRvcC00MC51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgY3RybC52bS5jb2xsZWN0aW9uKCkubWFwKCh0ZWFtVG90YWwpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tMzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSG9qZSBzb21vcyAnICsgdGVhbVRvdGFsLm1lbWJlcl9jb3VudCArICcgcGVzc29hcyBlc3BhbGhhZGFzIHBvciAnICsgdGVhbVRvdGFsLnRvdGFsX2NpdGllcyArICcgY2lkYWRlcyBlbSAnICsgdGVhbVRvdGFsLmNvdW50cmllcy5sZW5ndGggK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHBhw61zZXMgKCcgKyB0ZWFtVG90YWwuY291bnRyaWVzLnRvU3RyaW5nKCkgKyAnKSEgTyBDYXRhcnNlIMOpIGluZGVwZW5kZW50ZSwgc2VtIGludmVzdGlkb3JlcywgZGUgY8OzZGlnbyBhYmVydG8gZSBjb25zdHJ1w61kbyBjb20gYW1vci4gTm9zc2EgcGFpeMOjbyDDqSBjb25zdHJ1aXIgdW0gYW1iaWVudGUgb25kZSBjYWRhIHZleiBtYWlzIHByb2pldG9zIHBvc3NhbSBnYW5oYXIgdmlkYS4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyLmxpbmVoZWlnaHQtdGlnaHQudGV4dC1zdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vc3NhIGVxdWlwZSwganVudGEsIGrDoSBhcG9pb3UgUiQnICsgaC5mb3JtYXROdW1iZXIodGVhbVRvdGFsLnRvdGFsX2Ftb3VudCkgKyAnIHBhcmEgJyArIHRlYW1Ub3RhbC50b3RhbF9jb250cmlidXRlZF9wcm9qZWN0cyArICcgcHJvamV0b3MhJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdGVhbVRvdGFsO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcblxuY29uc3QgdGVhbU1lbWJlcnMgPSB7XG4gICAgY29udHJvbGxlcigpIHtcbiAgICAgICAgY29uc3Qgdm0gPSB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogbS5wcm9wKFtdKVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ3JvdXBDb2xsZWN0aW9uID0gKGNvbGxlY3Rpb24sIGdyb3VwVG90YWwpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5tYXAoXy5yYW5nZShNYXRoLmNlaWwoY29sbGVjdGlvbi5sZW5ndGggLyBncm91cFRvdGFsKSksIChpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnNsaWNlKGkgKiBncm91cFRvdGFsLCAoaSArIDEpICogZ3JvdXBUb3RhbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIG1vZGVscy50ZWFtTWVtYmVyLmdldFBhZ2UoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICB2bS5jb2xsZWN0aW9uKGdyb3VwQ29sbGVjdGlvbihkYXRhLCA0KSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2bTogdm1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCkge1xuICAgICAgICByZXR1cm4gbSgnI3RlYW0tbWVtYmVycy1zdGF0aWMudy1zZWN0aW9uLnNlY3Rpb24nLCBbXG4gICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgXy5tYXAoY3RybC52bS5jb2xsZWN0aW9uKCksIChncm91cCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnctcm93LnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChncm91cCwgKG1lbWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcudGVhbS1tZW1iZXIudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC0zLnctY29sLXRpbnktNi51LW1hcmdpbmJvdHRvbS00MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVwiL3VzZXJzLycgKyBtZW1iZXIuaWQgKyAnXCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLmJpZy51LXJvdW5kLnUtbWFyZ2luYm90dG9tLTEwW3NyYz1cIicgKyBtZW1iZXIuaW1nICsgJ1wiXScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtYmFzZScsIG1lbWJlci5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnQXBvaW91ICcgKyBtZW1iZXIudG90YWxfY29udHJpYnV0ZWRfcHJvamVjdHMgKyAnIHByb2pldG9zJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0ZWFtTWVtYmVycztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHRlYW1Ub3RhbCBmcm9tICcuLi9jL3RlYW0tdG90YWwnO1xuaW1wb3J0IHRlYW1NZW1iZXJzIGZyb20gJy4uL2MvdGVhbS1tZW1iZXJzJztcblxuY29uc3QgdGVhbSA9IHtcbiAgICB2aWV3KCkge1xuICAgICAgICByZXR1cm4gbSgnI3N0YXRpYy10ZWFtLWFwcCcsIFtcbiAgICAgICAgICAgIG0uY29tcG9uZW50KHRlYW1Ub3RhbCksXG4gICAgICAgICAgICBtLmNvbXBvbmVudCh0ZWFtTWVtYmVycylcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdGVhbTtcbiIsIi8qKlxuICogd2luZG93LmMuVXNlckJhbGFuY2VSZXF1ZXN0TW9kYWxDb250ZW50IGNvbXBvbmVudFxuICogUmVuZGVyIHRoZSBjdXJyZW50IHVzZXIgYmFuayBhY2NvdW50IHRvIGNvbmZpcm0gZnVuZCByZXF1ZXN0XG4gKlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuVXNlckJhbGFuY2VSZXF1ZXN0TW9kZWxDb250ZW50LCB7XG4gKiAgICAgYmFsYW5jZToge3VzZXJfaWQ6IDEyMywgYW1vdW50OiAxMjN9IC8vIHVzZXJCYWxhbmNlIHN0cnVjdFxuICogfSlcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3VzZXJzLmJhbGFuY2UnKTtcblxuY29uc3QgdXNlckJhbGFuY2VSZXF1ZXN0TW9kZWxDb250ZW50ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3VzZXJfaWQ6ICdlcSd9KSxcbiAgICAgICAgICAgICAgYmFsYW5jZSA9IGFyZ3MuYmFsYW5jZSxcbiAgICAgICAgICAgICAgbG9hZGVyT3B0cyA9IG1vZGVscy5iYWxhbmNlVHJhbnNmZXIucG9zdE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgICAgdXNlcl9pZDogYmFsYW5jZS51c2VyX2lkfSksXG4gICAgICAgICAgICAgIHJlcXVlc3RMb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKGxvYWRlck9wdHMpLFxuICAgICAgICAgICAgICBkaXNwbGF5RG9uZSA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICAgIHJlcXVlc3RGdW5kID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmVxdWVzdExvYWRlci5sb2FkKCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGFyZ3MuYmFsYW5jZU1hbmFnZXIubG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgIGFyZ3MuYmFsYW5jZVRyYW5zYWN0aW9uTWFuYWdlci5sb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgZGlzcGxheURvbmUudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICBhcmdzLmJhbmtBY2NvdW50TWFuYWdlci5sb2FkKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlcXVlc3RMb2FkZXI6IHJlcXVlc3RMb2FkZXIsXG4gICAgICAgICAgICByZXF1ZXN0RnVuZDogcmVxdWVzdEZ1bmQsXG4gICAgICAgICAgICBiYW5rQWNjb3VudHM6IGFyZ3MuYmFua0FjY291bnRNYW5hZ2VyLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBkaXNwbGF5RG9uZTogZGlzcGxheURvbmUsXG4gICAgICAgICAgICBsb2FkQmFua0E6IGFyZ3MuYmFua0FjY291bnRNYW5hZ2VyLmxvYWRlclxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGJhbGFuY2UgPSBhcmdzLmJhbGFuY2U7XG5cbiAgICAgICAgcmV0dXJuIChjdHJsLmxvYWRCYW5rQSgpID8gaC5sb2FkZXIoKSA6IG0oJ2RpdicsIF8ubWFwKGN0cmwuYmFua0FjY291bnRzKCksIChpdGVtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctaGVhZGVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS10ZXh0LWNlbnRlcicsIEkxOG4udCgnd2l0aGRyYXcnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgKGN0cmwuZGlzcGxheURvbmUoKSA/IG0oJy5tb2RhbC1kaWFsb2ctY29udGVudC51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZmEuZmEtY2hlY2stY2lyY2xlLmZhLTV4LnRleHQtc3VjY2Vzcy51LW1hcmdpbmJvdHRvbS00MCcpLFxuICAgICAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLWxhcmdlJywgSTE4bi50KCdzdWNlc3NfbWVzc2FnZScsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICBdKSA6IG0oJy5tb2RhbC1kaWFsb2ctY29udGVudCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnVmFsb3I6JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4udGV4dC1zdWNjZXNzJywgYFIkICR7aC5mb3JtYXROdW1iZXIoYmFsYW5jZS5hbW91bnQsIDIsIDMpfWApXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7c3R5bGU6IHsnZm9udC13ZWlnaHQnOiAnIDYwMCd9fSwgSTE4bi50KCdiYW5rLmFjY291bnQnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwudS1tYXJnaW5ib3R0b20tMTAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdiYW5rLm5hbWUnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub3duZXJfbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdiYW5rLmNwZl9jbnBqJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm93bmVyX2RvY3VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ2JhbmsuYmFua19uYW1lJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmJhbmtfbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdiYW5rLmFnZW5jeScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7aXRlbS5hZ2VuY3l9LSR7aXRlbS5hZ2VuY3lfZGlnaXR9YFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdiYW5rLmFjY291bnQnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2l0ZW0uYWNjb3VudH0tJHtpdGVtLmFjY291bnRfZGlnaXR9YFxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgXSkpLFxuICAgICAgICAgICAgICAgICghY3RybC5kaXNwbGF5RG9uZSgpID9cbiAgICAgICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1uYXYtYm90dG9tJywgW1xuICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjdHJsLnJlcXVlc3RMb2FkZXIoKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmxvYWRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG0oJ2EuYnRuLmJ0bi1sYXJnZS5idG4tcmVxdWVzdC1mdW5kW2hyZWY9XCJqczp2b2lkKDApO1wiXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge29uY2xpY2s6IGN0cmwucmVxdWVzdEZ1bmR9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTb2xpY2l0YXIgc2FxdWUnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMycpXG4gICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICBdKSA6ICcnKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSkpKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VyQmFsYW5jZVJlcXVlc3RNb2RlbENvbnRlbnQ7XG4iLCIvKipcbiAqIHdpbmRvdy5jLlVzZXJCYWxhbmNlIGNvbXBvbmVudFxuICogUmVuZGVyIHRoZSBjdXJyZW50IHVzZXIgdG90YWwgYmFsYW5jZSBhbmQgcmVxdWVzdCBmdW5kIGFjdGlvblxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlVzZXJCYWxhbmNlLCB7XG4gKiAgICAgdXNlcl9pZDogMTIzLFxuICogfSlcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGFsQm94IGZyb20gJy4vbW9kYWwtYm94JztcbmltcG9ydCB1c2VyQmFsYW5jZVJlcXVlc3RNb2RhbENvbnRlbnQgZnJvbSAnLi91c2VyLWJhbGFuY2UtcmVxdWVzdC1tb2RhbC1jb250ZW50JztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAndXNlcnMuYmFsYW5jZScpO1xuXG5jb25zdCB1c2VyQmFsYW5jZSA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgYXJncy5iYWxhbmNlTWFuYWdlci5sb2FkKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVzZXJCYWxhbmNlczogYXJncy5iYWxhbmNlTWFuYWdlci5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgZGlzcGxheU1vZGFsOiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgYmFsYW5jZSA9IF8uZmlyc3QoY3RybC51c2VyQmFsYW5jZXMoKSksXG4gICAgICAgICAgICBiYWxhbmNlUmVxdWVzdE1vZGFsQyA9IFtcbiAgICAgICAgICAgICAgICB1c2VyQmFsYW5jZVJlcXVlc3RNb2RhbENvbnRlbnQsXG4gICAgICAgICAgICAgICAgXy5leHRlbmQoe30sIHtiYWxhbmNlOiBiYWxhbmNlfSwgYXJncylcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uc2VjdGlvbi51c2VyLWJhbGFuY2Utc2VjdGlvbicsIFtcbiAgICAgICAgICAgIChjdHJsLmRpc3BsYXlNb2RhbCgpID8gbS5jb21wb25lbnQobW9kYWxCb3gsIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5TW9kYWw6IGN0cmwuZGlzcGxheU1vZGFsLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGJhbGFuY2VSZXF1ZXN0TW9kYWxDXG4gICAgICAgICAgICB9KSA6ICcnKSxcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnUtdGV4dC1jZW50ZXItc21hbGwtb25seS51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCd0b3RhbHMnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi50ZXh0LXN1Y2Nlc3MnLCBgUiQgJHtoLmZvcm1hdE51bWJlcihiYWxhbmNlLmFtb3VudCwgMiwgMyl9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oYGFbY2xhc3M9XCJyLWZ1bmQtYnRuIHctYnV0dG9uIGJ0biBidG4tbWVkaXVtIHUtbWFyZ2luYm90dG9tLTEwICR7KGJhbGFuY2UuYW1vdW50IDw9IDAgPyAnYnRuLWluYWN0aXZlJyA6ICcnKX1cIl1baHJlZj1cImpzOnZvaWQoMCk7XCJdYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAge29uY2xpY2s6IChiYWxhbmNlLmFtb3VudCA+IDAgPyBjdHJsLmRpc3BsYXlNb2RhbC50b2dnbGUgOiAnanM6dm9pZCgwKTsnKX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnd2l0aGRyYXdfY3RhJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VyQmFsYW5jZTtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3VzZXJzLmJhbGFuY2UnKTtcblxuY29uc3QgdXNlckJhbGFuY2VUcmFzYWN0aW9uUm93ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBleHBhbmRlZCA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKGFyZ3MuaW5kZXggPT0gMCkge1xuICAgICAgICAgICAgZXhwYW5kZWQudG9nZ2xlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXhwYW5kZWQ6IGV4cGFuZGVkXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGFyZ3MuaXRlbSxcbiAgICAgICAgICAgICAgY3JlYXRlZEF0ID0gaC5tb21lbnRGcm9tU3RyaW5nKGl0ZW0uY3JlYXRlZF9hdCwgJ1lZWVktTU0tREQnKTtcblxuICAgICAgICByZXR1cm4gbShgZGl2W2NsYXNzPSdiYWxhbmNlLWNhcmQgJHsoY3RybC5leHBhbmRlZCgpID8gJ2NhcmQtZGV0YWlsZWQtb3BlbicgOiAnJyl9J11gLFxuICAgICAgICAgICAgICAgICBtKCcudy1jbGVhcmZpeC5jYXJkLmNhcmQtY2xpY2thYmxlJywgW1xuICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXRpbnktMicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmxpbmVoZWlnaHQtdGlnaHRlc3QnLCBjcmVhdGVkQXQuZm9ybWF0KCdEIE1NTScpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci10ZXJjaWFyeScsIGNyZWF0ZWRBdC5mb3JtYXQoJ1lZWVknKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTAudy1jb2wtdGlueS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXIuZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udCgnZGViaXQnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1iYXNlLnRleHQtZXJyb3InLCBgUiQgJHtoLmZvcm1hdE51bWJlcihNYXRoLmFicyhpdGVtLmRlYml0KSwgMiwgMyl9YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlci5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdjcmVkaXQnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1iYXNlLnRleHQtc3VjY2VzcycsIGBSJCAke2guZm9ybWF0TnVtYmVyKGl0ZW0uY3JlZGl0LCAyLCAzKX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVyLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ3RvdGFscycsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLWJhc2UnLCBgUiQgJHtoLmZvcm1hdE51bWJlcihpdGVtLnRvdGFsX2Ftb3VudCwgMiwgMyl9YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICBtKGBhLnctaW5saW5lLWJsb2NrLmFycm93LWFkbWluLiR7KGN0cmwuZXhwYW5kZWQoKSA/ICdhcnJvdy1hZG1pbi1vcGVuZWQnIDogJycpfS5mYS5mYS1jaGV2cm9uLWRvd24uZm9udGNvbG9yLXNlY29uZGFyeVtocmVmPVwianM6KHZvaWQoMCkpO1wiXWAsIHtvbmNsaWNrOiBjdHJsLmV4cGFuZGVkLnRvZ2dsZX0pXG4gICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAoY3RybC5leHBhbmRlZCgpID8gbSgnLmNhcmQnLCBfLm1hcChpdGVtLnNvdXJjZSwgKHRyYW5zYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gdHJhbnNhY3Rpb24uYW1vdW50ID49IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCdkaXYnLFtcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cuZm9udHNpemUtc21hbGwudS1tYXJnaW5ib3R0b20tMTAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgLnRleHQtJHsocG9zID8gJ3N1Y2Nlc3MnIDogJ2Vycm9yJyl9YCwgYCR7cG9zID8gJysnIDogJy0nfSBSJCAke2guZm9ybWF0TnVtYmVyKE1hdGguYWJzKHRyYW5zYWN0aW9uLmFtb3VudCksIDIsIDMpfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBgJHt0cmFuc2FjdGlvbi5ldmVudF9uYW1lfSAke3RyYW5zYWN0aW9uLm9yaWdpbl9vYmplY3QubmFtZX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5kaXZpZGVyLnUtbWFyZ2luYm90dG9tLTEwJylcbiAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICB9KSkgOiAnJylcbiAgICAgICAgICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJCYWxhbmNlVHJhc2FjdGlvblJvdztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB1c2VyQmFsYW5jZVRyYW5zYWN0aW9uUm93IGZyb20gJy4vdXNlci1iYWxhbmNlLXRyYW5zYWN0aW9uLXJvdyc7XG5cbmNvbnN0IHVzZXJCYWxhbmNlVHJhbnNhY3Rpb25zID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBhcmdzLmJhbGFuY2VUcmFuc2FjdGlvbk1hbmFnZXIubG9hZCgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsaXN0OiBhcmdzLmJhbGFuY2VUcmFuc2FjdGlvbk1hbmFnZXIubGlzdFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBjdHJsLmxpc3Q7XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uc2VjdGlvbi5jYXJkLXRlcmNpYXJ5LmJlZm9yZS1mb290ZXIuYmFsYW5jZS10cmFuc2FjdGlvbnMtYXJlYScsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIF8ubWFwKGxpc3QuY29sbGVjdGlvbigpLCAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQoXG4gICAgICAgICAgICAgICAgICAgIHVzZXJCYWxhbmNlVHJhbnNhY3Rpb25Sb3csIHtpdGVtOiBpdGVtLCBpbmRleDogaW5kZXh9KTtcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIG0oJy5jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2ludG9wLTQwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1wdXNoLTUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAhbGlzdC5pc0xvYWRpbmcoKSA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmlzTGFzdFBhZ2UoKSA/ICcnIDogbSgnYnV0dG9uI2xvYWQtbW9yZS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGxpc3QubmV4dFBhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnQ2FycmVnYXIgbWFpcycpXG4gICAgICAgICAgICAgICAgICAgICAgICApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGgubG9hZGVyKClcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlckJhbGFuY2VUcmFuc2FjdGlvbnM7XG4iLCIvKipcbiAqIHdpbmRvdy5jLnJvb3QuQmFsYW5jZSBjb21wb25lbnRcbiAqIEEgcm9vdCBjb21wb25lbnQgdG8gc2hvdyB1c2VyIGJhbGFuY2UgYW5kIHRyYW5zYWN0aW9uc1xuICpcbiAqIEV4YW1wbGU6XG4gKiBUbyBtb3VudCB0aGlzIGNvbXBvbmVudCBqdXN0IGNyZWF0ZSBhIERPTSBlbGVtZW50IGxpa2U6XG4gKiA8ZGl2IGRhdGEtbWl0aHJpbD1cIlVzZXJzQmFsYW5jZVwiIGRhdGEtcGFyYW1ldGVycz1cInsndXNlcl9pZCc6IDEwfVwiPlxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgdXNlckJhbGFuY2UgZnJvbSAnLi4vYy91c2VyLWJhbGFuY2UnO1xuaW1wb3J0IHVzZXJCYWxhbmNlVHJhbnNhY3Rpb25zIGZyb20gJy4uL2MvdXNlci1iYWxhbmNlLXRyYW5zYWN0aW9ucyc7XG5cbmNvbnN0IHVzZXJCYWxhbmNlTWFpbiA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgdXNlcklkVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHt1c2VyX2lkOiAnZXEnfSk7XG5cbiAgICAgICAgdXNlcklkVk0udXNlcl9pZChhcmdzLnVzZXJfaWQpO1xuXG4gICAgICAgIC8vIEhhbmRsZXMgd2l0aCB1c2VyIGJhbGFuY2UgcmVxdWVzdCBkYXRhXG4gICAgICAgIGNvbnN0IGJhbGFuY2VNYW5hZ2VyID0gKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBtLnByb3AoW3thbW91bnQ6IDAsIHVzZXJfaWQ6IGFyZ3MudXNlcl9pZH1dKSxcbiAgICAgICAgICAgICAgICAgIGxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgbW9kZWxzLmJhbGFuY2UuZ2V0Um93V2l0aFRva2VuKHVzZXJJZFZNLnBhcmFtZXRlcnMoKSkudGhlbihjb2xsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbixcbiAgICAgICAgICAgICAgICBsb2FkOiBsb2FkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSgpLFxuXG4gICAgICAgICAgICAgIC8vIEhhbmRsZXMgd2l0aCB1c2VyIGJhbGFuY2UgdHJhbnNhY3Rpb25zIGxpc3QgZGF0YVxuICAgICAgICAgICAgICBiYWxhbmNlVHJhbnNhY3Rpb25NYW5hZ2VyID0gKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGxpc3RWTSA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0oXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZWxzLmJhbGFuY2VUcmFuc2FjdGlvbiwgJ2NyZWF0ZWRfYXQuZGVzYycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0Vk0uZmlyc3RQYWdlKHVzZXJJZFZNLnBhcmFtZXRlcnMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgIGxvYWQ6IGxvYWQsXG4gICAgICAgICAgICAgICAgICAgICAgbGlzdDogbGlzdFZNXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KSgpLFxuXG4gICAgICAgICAgICAgIC8vIEhhbmRsZXMgd2l0aCBiYW5rIGFjY291bnQgdG8gY2hlY2tcbiAgICAgICAgICAgICAgYmFua0FjY291bnRNYW5hZ2VyID0gKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyID0gKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxzLmJhbmtBY2NvdW50LmdldFJvd09wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWRWTS5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlci5sb2FkKCkudGhlbihjb2xsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICBsb2FkOiBsb2FkLFxuICAgICAgICAgICAgICAgICAgICAgIGxvYWRlcjogbG9hZGVyXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiYW5rQWNjb3VudE1hbmFnZXI6IGJhbmtBY2NvdW50TWFuYWdlcixcbiAgICAgICAgICAgIGJhbGFuY2VNYW5hZ2VyOiBiYWxhbmNlTWFuYWdlcixcbiAgICAgICAgICAgIGJhbGFuY2VUcmFuc2FjdGlvbk1hbmFnZXI6IGJhbGFuY2VUcmFuc2FjdGlvbk1hbmFnZXJcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBvcHRzID0gXy5leHRlbmQoe30sIGFyZ3MsIGN0cmwpO1xuICAgICAgICByZXR1cm4gbSgnI2JhbGFuY2UtYXJlYScsIFtcbiAgICAgICAgICAgIG0uY29tcG9uZW50KHVzZXJCYWxhbmNlLCBvcHRzKSxcbiAgICAgICAgICAgIG0oJy5kaXZpZGVyJyksXG4gICAgICAgICAgICBtLmNvbXBvbmVudCh1c2VyQmFsYW5jZVRyYW5zYWN0aW9ucywgb3B0cyksXG4gICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tNDAnKSxcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi5jYXJkLXRlcmNpYXJ5LmJlZm9yZS1mb290ZXInKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VyQmFsYW5jZU1haW47XG4iLCIvKlxuICogVXNlckZvbGxvd0J0biAtIENvbXBvbmVudFxuICogSGFuZGxlcyB3aXRoIGZvbGxvdyAvIHVuZm9sbG93IGFjdGlvbnMgdG8gYW4gdXNlclxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlVzZXJGb2xsb3dCdG4sIHtmb2xsb3dfaWQ6IDEwLCBmb2xsb3dpbmc6IGZhbHNlfSlcbiAqL1xuXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5cbmNvbnN0IFVzZXJGb2xsb3dCdG4gPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGZvbGxvd2luZyA9IG0ucHJvcCgoYXJncy5mb2xsb3dpbmcgfHwgZmFsc2UpKSxcbiAgICAgICAgICAgICAgZm9sbG93Vk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtmb2xsb3dfaWQ6ICdlcSd9KSxcbiAgICAgICAgICAgICAgbG9hZGluZyA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICAgIGhvdmVyID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgICAgdXNlckZvbGxvd0luc2VydCA9IG1vZGVscy51c2VyRm9sbG93LnBvc3RPcHRpb25zKHtcbiAgICAgICAgICAgICAgICAgIGZvbGxvd19pZDogYXJncy5mb2xsb3dfaWR9KSxcbiAgICAgICAgICAgICAgdXNlckZvbGxvd0RlbGV0ZSA9ICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBmb2xsb3dWTS5mb2xsb3dfaWQoYXJncy5mb2xsb3dfaWQpO1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWxzLnVzZXJGb2xsb3cuZGVsZXRlT3B0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgICBmb2xsb3dWTS5wYXJhbWV0ZXJzKCkpO1xuICAgICAgICAgICAgICB9KSgpLFxuICAgICAgICAgICAgICBmb2xsb3cgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBsID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbih1c2VyRm9sbG93SW5zZXJ0KTtcbiAgICAgICAgICAgICAgICAgIGxvYWRpbmcodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgIGwubG9hZCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB1bmZvbGxvdyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKHVzZXJGb2xsb3dEZWxldGUpO1xuICAgICAgICAgICAgICAgICAgbG9hZGluZyh0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgbC5sb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9sbG93aW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb2xsb3dpbmc6IGZvbGxvd2luZyxcbiAgICAgICAgICAgIGZvbGxvdzogZm9sbG93LFxuICAgICAgICAgICAgdW5mb2xsb3c6IHVuZm9sbG93LFxuICAgICAgICAgICAgbG9hZGluZzogbG9hZGluZyxcbiAgICAgICAgICAgIGhvdmVyOiBob3ZlclxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGlmIChjdHJsLmxvYWRpbmcoKSkgeyByZXR1cm4gaC5sb2FkZXIoKTsgfVxuICAgICAgICBpZiAoY3RybC5mb2xsb3dpbmcoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0oJ2Eudy1idXR0b24uYnRuLmJ0bi1tZWRpdW0udS1tYXJnaW50b3AtMjAnLFxuICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudW5mb2xsb3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgb25tb3VzZW92ZXI6ICgpID0+IGN0cmwuaG92ZXIodHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgb25tb3VzZW91dDogKCkgPT4gY3RybC5ob3ZlcihmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAoY3RybC5ob3ZlcigpID8gJ0RlaXhhciBkZSBzZWd1aXInIDogJ1NlZ3VpbmRvJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG0oJ2Eudy1idXR0b24uYnRuLmJ0bi1tZWRpdW0uYnRuLXRlcmNpYXJ5LnUtbWFyZ2ludG9wLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgIHtvbmNsaWNrOiBjdHJsLmZvbGxvd30sXG4gICAgICAgICAgICAgICAgICAgICAnU2VndWlyJyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBVc2VyRm9sbG93QnRuO1xuIiwiLypcbiAqIFVzZXJGb2xsb3dDYXJkIC0gQ29tcG9uZW50XG4gKiBVc2VyIGluZm8gY2FyZCB3aXRoIGZvbGxvdyBidXR0b25cbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5Vc2VyRm9sbG93Q2FyZCwge2ZyaWVuZDogZnJpZW5kfSlcbiAqL1xuXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgVXNlckZvbGxvd0J0biBmcm9tICAnLi4vYy91c2VyLWZvbGxvdy1idG4nO1xuXG5jb25zdCBVc2VyRm9sbG93Q2FyZCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZnJpZW5kID0gbS5wcm9wKGFyZ3MuZnJpZW5kKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZyaWVuZDogZnJpZW5kXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZnJpZW5kID0gY3RybC5mcmllbmQoKSxcbiAgICAgICAgICBwcm9maWxlX2ltZyA9IF8uaXNFbXB0eShmcmllbmQuYXZhdGFyKSA/ICcvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL3VzZXIuanBnJyA6IGZyaWVuZC5hdmF0YXI7XG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtNCcsXG4gICAgICAgICAgbSgnLmNhcmQuY2FyZC1iYWNrZXIudS1tYXJnaW5ib3R0b20tMjAudS1yYWRpdXMudS10ZXh0LWNlbnRlcicsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIG0oYGltZy50aHVtYi51LW1hcmdpbmJvdHRvbS0xMC51LXJvdW5kW3NyYz0nJHtwcm9maWxlX2ltZ30nXWApLFxuICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkLmxpbmVoZWlnaHQtdGlnaHQnLFxuICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW4nLCB7aHJlZjogYC91c2Vycy8ke2ZyaWVuZC5mcmllbmRfaWR9YH0sIGZyaWVuZC5uYW1lKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5mb250c2l6ZS1zbWFsbGVzdC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgKF8uaXNOdWxsKGZyaWVuZC5jaXR5KSA/ICcnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlci5mb250Y29sb3Itc2Vjb25kYXJ5LnUtbWFyZ2luYm90dG9tLTEwJywgYCR7ZnJpZW5kLmNpdHl9LCAke2ZyaWVuZC5zdGF0ZX1gKSlcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXInLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIGZyaWVuZC50b3RhbF9jb250cmlidXRlZF9wcm9qZWN0cyksXG4gICAgICAgICAgICAgICAgICAnIGFwb2lhZG9zICcsXG4gICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICd8ICcsXG4gICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIGZyaWVuZC50b3RhbF9wdWJsaXNoZWRfcHJvamVjdHMpLFxuICAgICAgICAgICAgICAgICAgJyBjcmlhZG9zJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgbSgnLmJ0bi1ib3R0b20tY2FyZC53LXJvdycsXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTMnKSxcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02LnctY29sLXNtYWxsLTQudy1jb2wtdGlueS02JyxcbiAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoVXNlckZvbGxvd0J0biwge2ZvbGxvd2luZzogZnJpZW5kLmZvbGxvd2luZywgZm9sbG93X2lkOiBmcmllbmQuZnJpZW5kX2lkfSlcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC00LnctY29sLXRpbnktMycpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJGb2xsb3dDYXJkO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5sb2FkTW9yZUJ0biBjb21wb25lbnRcbiAqIEJ1dHRvbiB0byBwYWdpbmF0ZSBjb2xsZWN0aW9uXG4gKlxuICogRXhhbXBsZSBvZiB1c2U6XG4gKiB2aWV3OiAoKSA9PiB7XG4gKiAgIC4uLlxuICogICBtLmNvbXBvbmVudChjLmxvYWRNb3JlQnRuLCB7Y29sbGVjdGlvbjogY29sbGVjdGlvbn0pXG4gKiAgIC4uLlxuICogfVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IGxvYWRNb3JlQnRuID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gYXJncy5jb2xsZWN0aW9uO1xuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTInLCBbXG4gICAgICAgICAgICAgICghY29sbGVjdGlvbi5pc0xvYWRpbmcoKSA/XG4gICAgICAgICAgICAgICAoY29sbGVjdGlvbi5pc0xhc3RQYWdlKCkgPyAnJyA6IG0oJ2J1dHRvbiNsb2FkLW1vcmUuYnRuLmJ0bi1tZWRpdW0uYnRuLXRlcmNpYXJ5Jywge1xuICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGNvbGxlY3Rpb24ubmV4dFBhZ2VcbiAgICAgICAgICAgICAgIH0sICdDYXJyZWdhciBtYWlzJykpIDogaC5sb2FkZXIoKSlcbiAgICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2FkTW9yZUJ0bjtcbiIsIi8qKlxuICogd2luZG93LmMudXNlckZyaWVuZHMgY29tcG9uZW50XG4gKiBTaG93cyBhbGwgZnJpZW5kcyBjYXJkcyBhbmQgYSBmb2xsb3ctYWxsIGJ1dHRvblxuICpcbiAqIEV4YW1wbGUgb2YgdXNlOlxuICogdmlldzogKCkgPT4ge1xuICogICAuLi5cbiAqICAgbS5jb21wb25lbnQoYy51c2VyRnJpZW5kcywge3VzZXI6IHVzZXJ9KVxuICogICAuLi5cbiAqIH1cbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgVXNlckZvbGxvd0NhcmQgZnJvbSAgJy4uL2MvdXNlci1mb2xsb3ctY2FyZCc7XG5pbXBvcnQgbG9hZE1vcmVCdG4gZnJvbSAgJy4uL2MvbG9hZC1tb3JlLWJ0bic7XG5cbmNvbnN0IHVzZXJGcmllbmRzID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBtb2RlbHMudXNlckZyaWVuZC5wYWdlU2l6ZSg5KTtcblxuICAgICAgICBjb25zdCB1c2VyRnJpZW5kVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHt1c2VyX2lkOiAnZXEnfSksXG4gICAgICAgICAgICAgIHVzZXIgPSBhcmdzLnVzZXIsXG4gICAgICAgICAgICBmcmllbmRMaXN0Vk0gPSBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy51c2VyRnJpZW5kLCAnZm9sbG93aW5nLmFzYyx0b3RhbF9jb250cmlidXRlZF9wcm9qZWN0cy5kZXNjJywge1xuICAgICAgICAgICAgICAgICdQcmVmZXInOiAgJ2NvdW50PWV4YWN0J1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBhbGxMb2FkaW5nID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIGZvbGxvd0FsbCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBhbGxMb2FkaW5nKHRydWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKG1vZGVscy5mb2xsb3dBbGxGcmllbmRzLnBvc3RPcHRpb25zKHt9KSk7XG5cbiAgICAgICAgICAgICAgICBsLmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZnJpZW5kTGlzdFZNLmZpcnN0UGFnZSh1c2VyRnJpZW5kVk0ucGFyYW1ldGVycygpKTtcbiAgICAgICAgICAgICAgICAgICAgYWxsTG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHVzZXJGcmllbmRWTS51c2VyX2lkKHVzZXIudXNlcl9pZCk7XG5cbiAgICAgICAgaWYgKCFmcmllbmRMaXN0Vk0uY29sbGVjdGlvbigpLmxlbmd0aCkge1xuICAgICAgICAgICAgZnJpZW5kTGlzdFZNLmZpcnN0UGFnZSh1c2VyRnJpZW5kVk0ucGFyYW1ldGVycygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZnJpZW5kTGlzdFZNOiBmcmllbmRMaXN0Vk0sXG4gICAgICAgICAgZm9sbG93QWxsOiBmb2xsb3dBbGwsXG4gICAgICAgICAgYWxsTG9hZGluZzogYWxsTG9hZGluZ1xuICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBsaXN0Vk0gPSBjdHJsLmZyaWVuZExpc3RWTTtcbiAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uYmctZ3JheS5iZWZvcmUtZm9vdGVyLnNlY3Rpb24nLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNDAuY2FyZC51LXJhZGl1cy5jYXJkLXRlcmNpYXJ5JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTcudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsJywgJ0NvbWVjZSBhZ29yYSEgU2lnYSB0b2RvcyBvcyBzZXVzIGFtaWdvcyBvdSBzb21lbnRlIGFsZ3VucyBkZWxlcyBwYXJhIGRlc2NvYnJpciBwcm9qZXRvcyBqdW50b3MhJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGN0cmwuYWxsTG9hZGluZygpID8gaC5sb2FkZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG0oJ2Eudy1idXR0b24uYnRuLmJ0bi1tZWRpdW0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLmZvbGxvd0FsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LGBTaWdhIHRvZG9zIG9zIHNldXMgJHtsaXN0Vk0udG90YWwoKSA/IGxpc3RWTS50b3RhbCgpIDogJyd9IGFtaWdvc2ApKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgXy5tYXAobGlzdFZNLmNvbGxlY3Rpb24oKSwgKGZyaWVuZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KFVzZXJGb2xsb3dDYXJkLCB7ZnJpZW5kOiBmcmllbmR9KTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi5iZy1ncmF5JywgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTYwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtbWFyZ2lucmlnaHQtMjAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChsb2FkTW9yZUJ0biwge2NvbGxlY3Rpb246IGxpc3RWTX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgIDtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VyRnJpZW5kcztcbiIsIi8qKlxuICogd2luZG93LmMudXNlckZvbGxvd3MgY29tcG9uZW50XG4gKiBTaG93cyBhbGwgdXNlciBmb2xsb3dzIGNhcmRzXG4gKlxuICogRXhhbXBsZSBvZiB1c2U6XG4gKiB2aWV3OiAoKSA9PiB7XG4gKiAgIC4uLlxuICogICBtLmNvbXBvbmVudChjLnVzZXJGb2xsb3dzLCB7dXNlcjogdXNlcn0pXG4gKiAgIC4uLlxuICogfVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBVc2VyRm9sbG93Q2FyZCBmcm9tICAnLi4vYy91c2VyLWZvbGxvdy1jYXJkJztcbmltcG9ydCBsb2FkTW9yZUJ0biBmcm9tICAnLi4vYy9sb2FkLW1vcmUtYnRuJztcblxuY29uc3QgdXNlckZvbGxvd3MgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIG1vZGVscy51c2VyRm9sbG93LnBhZ2VTaXplKDkpO1xuICAgICAgICBjb25zdCB1c2VyRnJpZW5kVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHt1c2VyX2lkOiAnZXEnfSksXG4gICAgICAgICAgICAgIHVzZXIgPSBhcmdzLnVzZXIsXG4gICAgICAgICAgICAgIGhhc2ggPSBtLnByb3Aod2luZG93LmxvY2F0aW9uLmhhc2gpLFxuICAgICAgICAgICAgICBmb2xsb3dzTGlzdFZNID0gcG9zdGdyZXN0LnBhZ2luYXRpb25WTShtb2RlbHMudXNlckZvbGxvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWF0ZWRfYXQuZGVzYycsIHtcbiAgICAgICAgICAgICAgICAgICdQcmVmZXInOiAgJ2NvdW50PWV4YWN0J1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB1c2VyRnJpZW5kVk0udXNlcl9pZCh1c2VyLnVzZXJfaWQpO1xuICAgICAgICBpZiAoIWZvbGxvd3NMaXN0Vk0uY29sbGVjdGlvbigpLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9sbG93c0xpc3RWTS5maXJzdFBhZ2UodXNlckZyaWVuZFZNLnBhcmFtZXRlcnMoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sbG93c0xpc3RWTTogZm9sbG93c0xpc3RWTVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGZvbGxvd3NWTSA9IGN0cmwuZm9sbG93c0xpc3RWTTtcbiAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uYmctZ3JheS5iZWZvcmUtZm9vdGVyLnNlY3Rpb24nLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKGZvbGxvd3NWTS5jb2xsZWN0aW9uKCksIChmcmllbmQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChVc2VyRm9sbG93Q2FyZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZnJpZW5kOiBfLmV4dGVuZCh7fSx7Zm9sbG93aW5nOiB0cnVlLCBmcmllbmRfaWQ6IGZyaWVuZC5mb2xsb3dfaWR9LCBmcmllbmQuc291cmNlKX0pO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLmJnLWdyYXknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5yaWdodC0yMCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbS5jb21wb25lbnQobG9hZE1vcmVCdG4sIHtjb2xsZWN0aW9uOiBmb2xsb3dzVk19KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgXSlcblxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICA7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlckZvbGxvd3M7XG4iLCIvKipcbiAqIHdpbmRvdy5jLnVzZXJGb2xsb3dlcnMgY29tcG9uZW50XG4gKiBTaG93cyBhbGwgdXNlciBmb2xsb3dlcnMgY2FyZHNcbiAqXG4gKiBFeGFtcGxlIG9mIHVzZTpcbiAqIHZpZXc6ICgpID0+IHtcbiAqICAgLi4uXG4gKiAgIG0uY29tcG9uZW50KGMudXNlckZvbGxvd2Vycywge3VzZXI6IHVzZXJ9KVxuICogICAuLi5cbiAqIH1cbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgVXNlckZvbGxvd0NhcmQgZnJvbSAgJy4uL2MvdXNlci1mb2xsb3ctY2FyZCc7XG5pbXBvcnQgbG9hZE1vcmVCdG4gZnJvbSAgJy4uL2MvbG9hZC1tb3JlLWJ0bic7XG5cbmNvbnN0IHVzZXJGb2xsb3dlcnMgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIG1vZGVscy51c2VyRm9sbG93ZXIucGFnZVNpemUoOSk7XG4gICAgICAgIGNvbnN0IGZvbGxvd2Vyc0xpc3RWTSA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnVzZXJGb2xsb3dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9sbG93aW5nLmFzYyxjcmVhdGVkX2F0LmRlc2MnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQcmVmZXInOiAgJ2NvdW50PWV4YWN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICB1c2VyID0gYXJncy51c2VyLFxuICAgICAgICAgICAgICB1c2VySWRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe2ZvbGxvd19pZDogJ2VxJ30pO1xuXG4gICAgICAgIHVzZXJJZFZNLmZvbGxvd19pZCh1c2VyLnVzZXJfaWQpO1xuXG4gICAgICAgIGlmICghZm9sbG93ZXJzTGlzdFZNLmNvbGxlY3Rpb24oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvbGxvd2Vyc0xpc3RWTS5maXJzdFBhZ2UodXNlcklkVk0ucGFyYW1ldGVycygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sbG93ZXJzTGlzdFZNOiBmb2xsb3dlcnNMaXN0Vk1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBmb2xsb3dlcnNWTSA9IGN0cmwuZm9sbG93ZXJzTGlzdFZNO1xuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5iZy1ncmF5LmJlZm9yZS1mb290ZXIuc2VjdGlvbicsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKGZvbGxvd2Vyc1ZNLmNvbGxlY3Rpb24oKSwgKGZyaWVuZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KFVzZXJGb2xsb3dDYXJkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmcmllbmQ6IF8uZXh0ZW5kKHt9LHtmcmllbmRfaWQ6IGZyaWVuZC51c2VyX2lkfSwgZnJpZW5kLnNvdXJjZSl9KTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLmJnLWdyYXknLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS02MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtbWFyZ2lucmlnaHQtMjAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtLmNvbXBvbmVudChsb2FkTW9yZUJ0biwge2NvbGxlY3Rpb246IGZvbGxvd2Vyc1ZNfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgICA7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlckZvbGxvd2VycztcbiIsIi8qKlxuICogd2luZG93LmMudXNlckNyZWF0b3JzIGNvbXBvbmVudFxuICogU2hvd3MgYWxsIHVzZXIgY3JlYXRvcnMgc3VnZ2VzdGlvbnMgY2FyZHNcbiAqXG4gKiBFeGFtcGxlIG9mIHVzZTpcbiAqIHZpZXc6ICgpID0+IHtcbiAqICAgLi4uXG4gKiAgIG0uY29tcG9uZW50KGMudXNlckNyZWF0b3JzLCB7dXNlcjogdXNlcn0pXG4gKiAgIC4uLlxuICogfVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBVc2VyRm9sbG93Q2FyZCBmcm9tICAnLi4vYy91c2VyLWZvbGxvdy1jYXJkJztcbmltcG9ydCBsb2FkTW9yZUJ0biBmcm9tICAnLi4vYy9sb2FkLW1vcmUtYnRuJztcblxuY29uc3QgdXNlckNyZWF0b3JzID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBtb2RlbHMuY3JlYXRvclN1Z2dlc3Rpb24ucGFnZVNpemUoOSk7XG5cbiAgICAgICAgY29uc3QgY3JlYXRvcnNMaXN0Vk0gPSBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKFxuICAgICAgICAgICAgbW9kZWxzLmNyZWF0b3JTdWdnZXN0aW9uLFxuICAgICAgICAgICAgXCJmb2xsb3dpbmcuYXNjLCB0b3RhbF9wdWJsaXNoZWRfcHJvamVjdHMuZGVzYywgdG90YWxfY29udHJpYnV0ZWRfcHJvamVjdHMuZGVzY1wiLCB7XG4gICAgICAgICAgICAgICAgJ1ByZWZlcic6ICAnY291bnQ9ZXhhY3QnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWNyZWF0b3JzTGlzdFZNLmNvbGxlY3Rpb24oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNyZWF0b3JzTGlzdFZNLmZpcnN0UGFnZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNyZWF0b3JzTGlzdFZNOiBjcmVhdG9yc0xpc3RWTVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNyZWF0b3JzVk0gPSBjdHJsLmNyZWF0b3JzTGlzdFZNO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1zZWN0aW9uLmJnLWdyYXkuYmVmb3JlLWZvb3Rlci5zZWN0aW9uJywgW1xuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoY3JlYXRvcnNWTS5jb2xsZWN0aW9uKCksIChmcmllbmQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2VyRm9sbG93Q2FyZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyaWVuZDogXy5leHRlbmQoe30se1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJpZW5kX2lkOiBmcmllbmQudXNlcl9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmcmllbmQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi5iZy1ncmF5JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbnJpZ2h0LTIwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbS5jb21wb25lbnQobG9hZE1vcmVCdG4sIHtjb2xsZWN0aW9uOiBjcmVhdG9yc1ZNfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgICA7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlckNyZWF0b3JzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHVzZXJGcmllbmRzIGZyb20gICcuLi9jL3VzZXItZnJpZW5kcyc7XG5pbXBvcnQgdXNlckZvbGxvd3MgZnJvbSAgJy4uL2MvdXNlci1mb2xsb3dzJztcbmltcG9ydCB1c2VyRm9sbG93ZXJzIGZyb20gICcuLi9jL3VzZXItZm9sbG93ZXJzJztcbmltcG9ydCB1c2VyQ3JlYXRvcnMgZnJvbSAgJy4uL2MvdXNlci1jcmVhdG9ycyc7XG5cbmNvbnN0IEZvbGxvd0ZvdW5kRnJpZW5kcyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgdXNlciA9IGguZ2V0VXNlcigpLFxuICAgICAgICAgICAgICBoYXNoID0gbS5wcm9wKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSxcbiAgICAgICAgICAgICAgZGlzcGxheVRhYkNvbnRlbnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBjX29wdHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgdXNlcjogdXNlclxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHRhYnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNjcmVhdG9ycyc6IG0uY29tcG9uZW50KHVzZXJDcmVhdG9ycywgY19vcHRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZyaWVuZHMnOiBtLmNvbXBvbmVudCh1c2VyRnJpZW5kcywgY19vcHRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZvbGxvd3MnOiBtLmNvbXBvbmVudCh1c2VyRm9sbG93cywgY19vcHRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZvbGxvd2Vycyc6IG0uY29tcG9uZW50KHVzZXJGb2xsb3dlcnMsIGNfb3B0cylcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIGhhc2god2luZG93LmxvY2F0aW9uLmhhc2gpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoXy5pc0VtcHR5KGhhc2goKSkgfHwgaGFzaCgpID09PSAnI189XycpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFic1snI2ZyaWVuZHMnXTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYnNbaGFzaCgpXTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICBoLnJlZHJhd0hhc2hDaGFuZ2UoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlcjogdXNlcixcbiAgICAgICAgICAgIGRpc3BsYXlUYWJDb250ZW50OiBkaXNwbGF5VGFiQ29udGVudFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLmRhc2hib2FyZC1oZWFkZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW50b3AtMjAudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlci5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwJywgJ0Rlc2N1YnJhIHByb2pldG9zIGNvbSBzZXVzIGFtaWdvcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbCcsICdTaWdhIG9zIHNldXMgYW1pZ29zIGUgbsOzcyBpcmVtb3MgdGUgbm90aWZpY2FyIHNlbXByZSBxdWUgZWxlcyBsYW7Dp2FyZW0gb3UgYXBvaWFyZW0gYWxndW0gcHJvamV0bycpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xJylcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBbbSgnLmRpdmlkZXIudS1tYXJnaW50b3AtMzAnKSxcbiAgICAgICAgICAgICAgbSgnLnByb2plY3QtbmF2JyxcbiAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2FbaWQ9XCJjcmVhdG9ycy1saW5rXCJdW2NsYXNzPVwiZGFzaGJvYXJkLW5hdi1saW5rICcgKyAoaC5oYXNoTWF0Y2goJyNjcmVhdG9ycycpID8gJ3NlbGVjdGVkJyA6ICcnKSArICdcIl0gW2hyZWY9XCIjY3JlYXRvcnNcIl0nLFxuICAgICAgICAgICAgICAgICAgICAgICdFbmNvbnRyZSByZWFsaXphZG9yZXMnXG4gICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBtKCdhW2lkPVwiZnJpZW5kcy1saW5rXCJdW2NsYXNzPVwiZGFzaGJvYXJkLW5hdi1saW5rICcgKyAoaC5oYXNoTWF0Y2goJyNmcmllbmRzJykgfHwgaC5oYXNoTWF0Y2goJycpID8gJ3NlbGVjdGVkJyA6ICcnKSArICdcIl0gW2hyZWY9XCIjZnJpZW5kc1wiXScsXG4gICAgICAgICAgICAgICAgICAgICAgJ0VuY29udHJlIGFtaWdvcydcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnYVtpZD1cImZvbGxvd3MtbGlua1wiXVtjbGFzcz1cImRhc2hib2FyZC1uYXYtbGluayAnICsgKGguaGFzaE1hdGNoKCcjZm9sbG93cycpID8gJ3NlbGVjdGVkJyA6ICcnKSArICdcIl0gW2hyZWY9XCIjZm9sbG93c1wiXScsXG4gICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZ3VpbmRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmJhZGdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC51c2VyLmZvbGxvd3NfY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2FbaWQ9XCJmb2xsb3dlcnMtbGlua1wiXVtjbGFzcz1cImRhc2hib2FyZC1uYXYtbGluayAnICsgKGguaGFzaE1hdGNoKCcjZm9sbG93ZXJzJykgPyAnc2VsZWN0ZWQnIDogJycpICsgJ1wiXSBbaHJlZj1cIiNmb2xsb3dlcnNcIl0nLFxuICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWd1aWRvcmVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmJhZGdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC51c2VyLmZvbGxvd2Vyc19jb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGN0cmwuZGlzcGxheVRhYkNvbnRlbnQoKVxuICAgICAgICBdO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvbGxvd0ZvdW5kRnJpZW5kcztcbiIsImltcG9ydCBhZG1pblVzZXJzIGZyb20gJy4vcm9vdC9hZG1pbi11c2Vycyc7XG5pbXBvcnQgYWRtaW5Db250cmlidXRpb25zIGZyb20gJy4vcm9vdC9hZG1pbi1jb250cmlidXRpb25zJztcbmltcG9ydCBmbGV4IGZyb20gJy4vcm9vdC9mbGV4JztcbmltcG9ydCBpbnNpZ2h0cyBmcm9tICcuL3Jvb3QvaW5zaWdodHMnO1xuaW1wb3J0IGpvYnMgZnJvbSAnLi9yb290L2pvYnMnO1xuaW1wb3J0IGxpdmVTdGF0aXN0aWNzIGZyb20gJy4vcm9vdC9saXZlLXN0YXRpc3RpY3MnO1xuaW1wb3J0IHByb2plY3RzQ29udHJpYnV0aW9uUmVwb3J0IGZyb20gJy4vcm9vdC9wcm9qZWN0cy1jb250cmlidXRpb24tcmVwb3J0JztcbmltcG9ydCBwcm9qZWN0c0Rhc2hib2FyZCBmcm9tICcuL3Jvb3QvcHJvamVjdHMtZGFzaGJvYXJkJztcbmltcG9ydCBwcm9qZWN0c0V4cGxvcmUgZnJvbSAnLi9yb290L3Byb2plY3RzLWV4cGxvcmUnO1xuaW1wb3J0IHByb2plY3RzSG9tZSBmcm9tICcuL3Jvb3QvcHJvamVjdHMtaG9tZSc7XG5pbXBvcnQgcHJvamVjdHNTaG93IGZyb20gJy4vcm9vdC9wcm9qZWN0cy1zaG93JztcbmltcG9ydCBwcm9qZWN0c1BheW1lbnQgZnJvbSAnLi9yb290L3Byb2plY3RzLXBheW1lbnQnO1xuaW1wb3J0IHByb2plY3RzUmV3YXJkIGZyb20gJy4vcm9vdC9wcm9qZWN0cy1yZXdhcmQnO1xuaW1wb3J0IHB1Ymxpc2ggZnJvbSAnLi9yb290L3B1Ymxpc2gnO1xuaW1wb3J0IHN0YXJ0IGZyb20gJy4vcm9vdC9zdGFydCc7XG5pbXBvcnQgdGVhbSBmcm9tICcuL3Jvb3QvdGVhbSc7XG5pbXBvcnQgdXNlcnNCYWxhbmNlTWFpbiBmcm9tICcuL3Jvb3QvdXNlcnMtYmFsYW5jZS1tYWluJztcbmltcG9ydCBtZW51IGZyb20gJy4vcm9vdC9tZW51JztcbmltcG9ydCBmb290ZXIgZnJvbSAnLi9yb290L2Zvb3Rlcic7XG5pbXBvcnQgRm9sbG93Rm91bmRGcmllbmRzIGZyb20gJy4vcm9vdC9mb2xsb3ctZm91bmQtZnJpZW5kcyc7XG5cblxuY29uc3QgYyA9IHtcbiAgICByb290OiB7XG4gICAgICAgIEFkbWluVXNlcnM6IGFkbWluVXNlcnMsXG4gICAgICAgIEFkbWluQ29udHJpYnV0aW9uczogYWRtaW5Db250cmlidXRpb25zLFxuICAgICAgICBGbGV4OiBmbGV4LFxuICAgICAgICBJbnNpZ2h0czogaW5zaWdodHMsXG4gICAgICAgIEpvYnM6IGpvYnMsXG4gICAgICAgIExpdmVTdGF0aXN0aWNzOiBsaXZlU3RhdGlzdGljcyxcbiAgICAgICAgUHJvamVjdHNDb250cmlidXRpb25SZXBvcnQ6IHByb2plY3RzQ29udHJpYnV0aW9uUmVwb3J0LFxuICAgICAgICBQcm9qZWN0c0Rhc2hib2FyZDogcHJvamVjdHNEYXNoYm9hcmQsXG4gICAgICAgIFByb2plY3RzRXhwbG9yZTogcHJvamVjdHNFeHBsb3JlLFxuICAgICAgICBQcm9qZWN0c0hvbWU6IHByb2plY3RzSG9tZSxcbiAgICAgICAgUHJvamVjdHNTaG93OiBwcm9qZWN0c1Nob3csXG4gICAgICAgIFByb2plY3RzUGF5bWVudDogcHJvamVjdHNQYXltZW50LFxuICAgICAgICBQcm9qZWN0c1Jld2FyZDogcHJvamVjdHNSZXdhcmQsXG4gICAgICAgIFB1Ymxpc2g6IHB1Ymxpc2gsXG4gICAgICAgIFN0YXJ0OiBzdGFydCxcbiAgICAgICAgVGVhbTogdGVhbSxcbiAgICAgICAgVXNlcnNCYWxhbmNlOiB1c2Vyc0JhbGFuY2VNYWluLFxuICAgICAgICBNZW51OiBtZW51LFxuICAgICAgICBGb290ZXI6IGZvb3RlcixcbiAgICAgICAgRm9sbG93Rm91bmRGcmllbmRzOiBGb2xsb3dGb3VuZEZyaWVuZHNcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjO1xuIl0sIm5hbWVzIjpbIkkxOG4iLCJwb3N0Z3Jlc3QiLCJtIiwiXyIsInVzZXJGaWx0ZXJWTSIsInZtIiwicGFyYW1Ub1N0cmluZyIsImNvbnRyaWJ1dGlvbkZpbHRlclZNIiwiYXBwbHlNYXNrIiwiaWRWTSIsInVzZXJEZXRhaWxzIiwiY3VycmVudFByb2plY3QiLCJnZXRDdXJyZW50UHJvamVjdCIsIkkxOG5TY29wZSIsIm1vbWVudCIsIm9ubGluZVN1Y2Nlc3NNb2RhbENvbnRlbnQiLCJGaWx0ZXJNYWluIiwicHJvamVjdHNDb250cmlidXRpb25SZXBvcnRWTSIsIkZpbHRlckRyb3Bkb3duIiwicHJvamVjdEZpbHRlcnNWTSIsInByb2plY3RGaWx0ZXJzIiwidXNlckJhbGFuY2VSZXF1ZXN0TW9kYWxDb250ZW50IiwidXNlckJhbGFuY2VUcmFuc2FjdGlvblJvdyIsImZsZXgiLCJwcm9qZWN0c0NvbnRyaWJ1dGlvblJlcG9ydCIsInVzZXJzQmFsYW5jZU1haW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQUdJLGFBQWEsRUFEakI7TUFFSSxZQUFZLFNBQVosU0FBWSxDQUFDLEdBQUQsRUFBUztBQUFFLEVBQUEsV0FBTyxPQUFPLFFBQVAsQ0FBZ0IsSUFBaEIsS0FBeUIsR0FBaEM7QUFBc0MsRUFBQSxDQUZqRTtNQUdJLGNBQWMsU0FBZCxXQUFjLENBQUMsSUFBRCxFQUFVO0FBQ3BCLEVBQUEsUUFBTSxhQUFhLEtBQUssT0FBTCxDQUFhLE1BQWIsRUFBcUIsS0FBckIsRUFBNEIsT0FBNUIsQ0FBb0MsTUFBcEMsRUFBNEMsS0FBNUMsQ0FBbkI7VUFDSSxRQUFRLElBQUksTUFBSixDQUFXLFdBQVcsVUFBWCxHQUF3QixX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
