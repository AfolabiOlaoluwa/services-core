var c = (function (m$1,I18n$1,postgrest$1,replaceDiacritics,_$1,moment$1,Chart) {
  'use strict';

  m$1 = 'default' in m$1 ? m$1['default'] : m$1;
  I18n$1 = 'default' in I18n$1 ? I18n$1['default'] : I18n$1;
  postgrest$1 = 'default' in postgrest$1 ? postgrest$1['default'] : postgrest$1;
  replaceDiacritics = 'default' in replaceDiacritics ? replaceDiacritics['default'] : replaceDiacritics;
  _$1 = 'default' in _$1 ? _$1['default'] : _$1;
  moment$1 = 'default' in moment$1 ? moment$1['default'] : moment$1;
  Chart = 'default' in Chart ? Chart['default'] : Chart;

  var babelHelpers = {};
  babelHelpers.typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers;

  var _dataCache = {};
  var hashMatch = function hashMatch(str) {
      return window.location.hash === str;
  };
  var paramByName = function paramByName(name) {
      var normalName = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]'),
          regex = new RegExp('[\\?&]' + normalName + '=([^&#]*)'),
          results = regex.exec(location.search);
      return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  };
  var selfOrEmpty = function selfOrEmpty(obj) {
      var emptyState = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

      return obj ? obj : emptyState;
  };
  var setMomentifyLocale = function setMomentifyLocale() {
      moment.locale('pt', {
          months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
          monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_')
      });
  };
  var existy = function existy(x) {
      return x != null;
  };
  var momentify = function momentify(date, format) {
      format = format || 'DD/MM/YYYY';
      return date ? moment(date).locale('pt').format(format) : 'no date';
  };
  var storeAction = function storeAction(action, value) {
      if (!sessionStorage.getItem(action)) {
          return sessionStorage.setItem(action, String(value));
      }
  };
  var storeObject = function storeObject(sessionKey, obj) {
      return sessionStorage.setItem(sessionKey, JSON.stringify(obj));
  };
  var getStoredObject = function getStoredObject(sessionKey) {
      if (sessionStorage.getItem(sessionKey)) {
          return JSON.parse(sessionStorage.getItem(sessionKey));
      } else {
          return undefined;
      }
  };
  var callStoredAction = function callStoredAction(action) {
      var item = sessionStorage.getItem(action);

      if (item) {
          sessionStorage.removeItem(action);
          return item;
      } else {
          return false;
      }
  };
  var discuss = function discuss(page, identifier) {
      var d = document,
          s = d.createElement('script');
      window.disqus_config = function () {
          this.page.url = page;
          this.page.identifier = identifier;
      };
      s.src = '//catarseflex.disqus.com/embed.js';
      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
      return m('');
  };
  var validateEmail = function validateEmail(email) {
      var re = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
      return re.test(email);
  };
  var validateCpf = function validateCpf(strCPF) {
      var sum = 0,
          remainder = void 0;

      if (strCPF == '00000000000') return false;

      for (var i = 1; i <= 9; i++) {
          sum = sum + parseInt(strCPF.substring(i - 1, i)) * (11 - i);
      }
      remainder = sum * 10 % 11;

      if (remainder == 10 || remainder == 11) {
          remainder = 0;
      }

      if (remainder != parseInt(strCPF.substring(9, 10))) {
          return false;
      }

      sum = 0;

      for (var _i = 1; _i <= 10; _i++) {
          sum = sum + parseInt(strCPF.substring(_i - 1, _i)) * (12 - _i);
      }

      remainder = sum * 10 % 11;

      if (remainder == 10 || remainder == 11) {
          remainder = 0;
      }

      if (remainder != parseInt(strCPF.substring(10, 11))) {
          return false;
      }

      return true;
  };
  var validationErrors = m.prop([]);
  var resetValidations = function resetValidations() {
      return validationErrors([]);
  };
  var validate = function validate() {
      var errorFields = m.prop([]);

      return {
          submit: function submit(fields, fn) {
              return function () {
                  resetValidations();

                  _.map(fields, function (field) {
                      if (field.rule === 'email') {
                          if (!validateEmail(field.prop())) {
                              validationErrors().push({ field: field.prop, message: 'E-mail inválido.' });
                          }
                      }

                      if (field.rule === 'text') {
                          if (field.prop().trim() === '') {
                              validationErrors().push({ field: field.prop, message: 'O campo não pode ser vazio.' });
                          }
                      }
                  });

                  return !validationErrors().length > 0 ? fn() : false;
              };
          },
          hasError: function hasError(fieldProp) {
              return _.reduce(validationErrors(), function (memo, fieldError) {
                  return fieldError.field() === fieldProp() || memo;
              }, false);
          }
      };
  };
  var momentFromString = function momentFromString(date, format) {
      var european = moment(date, format || 'DD/MM/YYYY');
      return european.isValid() ? european : moment(date);
  };
  var translatedTimeUnits = {
      days: 'dias',
      minutes: 'minutos',
      hours: 'horas',
      seconds: 'segundos'
  };
  var translatedTime = function translatedTime(time) {
      var translatedTime = translatedTimeUnits,
          unit = function unit() {
          var projUnit = translatedTime[time.unit || 'seconds'];

          return time.total <= 1 ? projUnit.slice(0, -1) : projUnit;
      };

      return {
          unit: unit(),
          total: time.total
      };
  };
  var generateFormatNumber = function generateFormatNumber(s, c) {
      return function (number, n, x) {
          if (!_.isNumber(number)) {
              return null;
          }

          var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
              num = number.toFixed(Math.max(0, ~ ~n));
          return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));
      };
  };
  var formatNumber = generateFormatNumber('.', ',');
  var toggleProp = function toggleProp(defaultState, alternateState) {
      var p = m.prop(defaultState);
      p.toggle = function () {
          return p(p() === alternateState ? defaultState : alternateState);
      };

      return p;
  };
  var idVM = postgrest.filtersVM({
      id: 'eq'
  });
  var getCurrentProject = function getCurrentProject() {
      if (_dataCache.currentProject) return _dataCache.currentProject;

      var root = document.getElementById('application'),
          data = root && root.getAttribute('data-parameters');
      if (data) {
          return _dataCache.currentProject = JSON.parse(data);
      } else {
          return false;
      }
  };
  var getRdToken = function getRdToken() {
      if (_dataCache.rdToken) return _dataCache.rdToken;

      var meta = _.first(document.querySelectorAll('[name=rd-token]'));
      return meta ? _dataCache.rdToken = meta.content : undefined;
  };
  var getMailchimpUrl = function getMailchimpUrl() {
      if (_dataCache.mailchumUrl) return _dataCache.mailchumUrl;

      var meta = _.first(document.querySelectorAll('[name=mailchimp-url]'));
      return meta ? _dataCache.mailchumUrl = meta.content : undefined;
  };
  var getUser = function getUser() {
      if (_dataCache.user) return _dataCache.user;

      var body = document.getElementsByTagName('body'),
          data = _.first(body).getAttribute('data-user');
      if (data) {
          return _dataCache.user = JSON.parse(data);
      } else {
          return false;
      }
  };
  var getBlogPosts = function getBlogPosts() {
      if (_dataCache.blogPosts) return _dataCache.blogPosts;

      var posts = _.first(document.getElementsByTagName('body')).getAttribute('data-blog');

      if (posts) {
          return _dataCache.blogPosts = JSON.parse(posts);
      } else {
          return false;
      }
  };
  var getApiHost = function getApiHost() {
      if (_dataCache.apiHost) return _dataCache.apiHost;

      var el = document.getElementById('api-host');
      return _dataCache.apiHost = el && el.getAttribute('content');
  };
  var locationActionMatch = function locationActionMatch(action) {
      var act = window.location.pathname.split('/').slice(-1)[0];
      return action === act;
  };
  var useAvatarOrDefault = function useAvatarOrDefault(avatarPath) {
      return avatarPath || '/assets/catarse_bootstrap/user.jpg';
  };
  var loader = function loader() {
      return m('.u-text-center.u-margintop-30 u-marginbottom-30', [m('img[alt="Loader"][src="https://s3.amazonaws.com/catarse.files/loader.gif"]')]);
  };
  var newFeatureBadge = function newFeatureBadge() {
      return m('span.badge.badge-success.margin-side-5', I18n$1.t('projects.new_feature_badge'));
  };
  var fbParse = function fbParse() {
      var tryParse = function tryParse() {
          try {
              window.FB.XFBML.parse();
          } catch (e) {
              console.log(e);
          }
      };

      return window.setTimeout(tryParse, 500); //use timeout to wait async of facebook
  };
  var pluralize = function pluralize(count, s, p) {
      return count > 1 ? count + p : count + s;
  };
  var strip = function strip(html) {
      var tmp = document.createElement('div');
      tmp.innerHTML = html;
      return tmp.textContent || tmp.innerText || '';
  };
  var simpleFormat = function simpleFormat() {
      var str = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

      str = str.replace(/\r\n?/, '\n');
      if (str.length > 0) {
          str = str.replace(/\n\n+/g, '</p><p>');
          str = str.replace(/\n/g, '<br />');
          str = '<p>' + str + '</p>';
      }
      return str;
  };
  var rewardSouldOut = function rewardSouldOut(reward) {
      return reward.maximum_contributions > 0 ? reward.paid_count + reward.waiting_payment_count >= reward.maximum_contributions : false;
  };
  var rewardRemaning = function rewardRemaning(reward) {
      return reward.maximum_contributions - (reward.paid_count + reward.waiting_payment_count);
  };
  var parseUrl = function parseUrl(href) {
      var l = document.createElement('a');
      l.href = href;
      return l;
  };
  var UIHelper = function UIHelper() {
      return function (el, isInitialized) {
          if (!isInitialized && window.$) {
              window.UIHelper.setupResponsiveIframes($(el));
          }
      };
  };
  var toAnchor = function toAnchor() {
      return function (el, isInitialized) {
          if (!isInitialized) {
              var hash = window.location.hash.substr(1);
              if (hash === el.id) {
                  window.location.hash = '';
                  setTimeout(function () {
                      window.location.hash = el.id;
                  });
              }
          }
      };
  };
  var navigateToDevise = function navigateToDevise() {
      window.location.href = '/pt/login';
      return false;
  };
  var navigateTo = function navigateTo(path) {
      window.location.href = path;
      return false;
  };
  var cumulativeOffset = function cumulativeOffset(element) {
      var top = 0,
          left = 0;
      do {
          top += element.offsetTop || 0;
          left += element.offsetLeft || 0;
          element = element.offsetParent;
      } while (element);

      return {
          top: top,
          left: left
      };
  };
  var closeModal = function closeModal() {
      //temp for rails unstyled close links
      var elById = document.getElementById('modal-close');
      if (_.isElement(elById)) {
          elById.onclick = function (event) {
              event.preventDefault();
              document.getElementsByClassName('modal-backdrop')[0].style.display = 'none';
          };
      }

      var el = document.getElementsByClassName('modal-close')[0];
      if (_.isElement(el)) {
          el.onclick = function (event) {
              event.preventDefault();

              document.getElementsByClassName('modal-backdrop')[0].style.display = 'none';
          };
      };
  };
  var closeFlash = function closeFlash() {
      var el = document.getElementsByClassName('icon-close')[0];
      if (_.isElement(el)) {
          el.onclick = function (event) {
              event.preventDefault();

              el.parentElement.remove();
          };
      };
  };
  var i18nScope = function i18nScope(scope, obj) {
      obj = obj || {};
      return _.extend({}, obj, { scope: scope });
  };
  var redrawHashChange = function redrawHashChange(before) {
      var callback = _.isFunction(before) ? function () {
          before();
          m.redraw();
      } : m.redraw;

      window.addEventListener('hashchange', callback, false);
  };
  var authenticityToken = function authenticityToken() {
      var meta = _.first(document.querySelectorAll('[name=csrf-token]'));
      return meta ? meta.content : undefined;
  };
  var animateScrollTo = function animateScrollTo(el) {
      var scrolled = window.scrollY;

      var offset = cumulativeOffset(el).top,
          duration = 300,
          dFrame = (offset - scrolled) / duration,

      //EaseInOutCubic easing function. We'll abstract all animation funs later.
      eased = function eased(t) {
          return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
      },
          animation = setInterval(function () {
          var pos = eased(scrolled / offset) * scrolled;

          window.scrollTo(0, pos);

          if (scrolled >= offset) {
              clearInterval(animation);
          }

          scrolled = scrolled + dFrame;
      }, 1);
  };
  var scrollTo = function scrollTo() {
      var setTrigger = function setTrigger(el, anchorId) {
          el.onclick = function () {
              var anchorEl = document.getElementById(anchorId);

              if (_.isElement(anchorEl)) {
                  animateScrollTo(anchorEl);
              }

              return false;
          };
      };

      return function (el, isInitialized) {
          if (!isInitialized) {
              setTrigger(el, el.hash.slice(1));
          }
      };
  };
  var projectStateTextClass = function projectStateTextClass(state) {
      var statusText = {
          online: {
              cssClass: 'text-success',
              text: 'NO AR'
          },
          successful: {
              cssClass: 'text-success',
              text: 'FINANCIADO'
          },
          failed: {
              cssClass: 'text-error',
              text: 'NÃO FINANCIADO'
          },
          waiting_funds: {
              cssClass: 'text-waiting',
              text: 'AGUARDANDO'
          },
          rejected: {
              cssClass: 'text-error',
              text: 'RECUSADO'
          },
          draft: {
              cssClass: '',
              text: 'RASCUNHO'
          },
          in_analysis: {
              cssClass: '',
              text: 'EM ANÁLISE'
          },
          approved: {
              cssClass: 'text-success',
              text: 'APROVADO'
          }
      };

      return statusText[state];
  };
  var RDTracker = function RDTracker(eventId) {
      return function (el, isInitialized) {
          if (!isInitialized) {
              var integrationScript = document.createElement('script');
              integrationScript.type = 'text/javascript';
              integrationScript.id = 'RDIntegration';

              if (!document.getElementById(integrationScript.id)) {
                  document.body.appendChild(integrationScript);
                  integrationScript.onload = function () {
                      return RdIntegration.integrate(getRdToken(), eventId);
                  };
                  integrationScript.src = 'https://d335luupugsy2.cloudfront.net/js/integration/stable/rd-js-integration.min.js';
              }

              return false;
          }
      };
  };
  var analyticsEvent = function analyticsEvent(eventObj) {
      var fn = arguments.length <= 1 || arguments[1] === undefined ? Function.prototype : arguments[1];

      //https://developers.google.com/analytics/devguides/collection/analyticsjs/command-queue-reference#send
      if (!eventObj) {
          return fn;
      }

      return function () {
          try {
              if (!eventObj.project) eventObj.project = getCurrentProject();
              if (!eventObj.user) eventObj.user = getUser();
              CatarseAnalytics.event(eventObj);
          } catch (e) {
              console.error('[h.analyticsEvent] error:', e);
          }
          fn();
      };
  };
  var _analyticsOneTimeEventFired = {};
  var analyticsOneTimeEvent = function analyticsOneTimeEvent(eventObj, fn) {
      if (!eventObj) {
          return fn;
      }

      var eventKey = _.compact([eventObj.cat, eventObj.act]).join('_');
      if (!eventKey) {
          throw new Error('Should inform cat or act');
      }
      return function () {
          if (!_analyticsOneTimeEventFired[eventKey]) {
              //console.log('oneTimeEvent',eventKey);
              _analyticsOneTimeEventFired[eventKey] = true;
              var fireEvent = analyticsEvent(eventObj, fn);
              fireEvent();
          }
      };
  };
  var monetaryToFloat = function monetaryToFloat(propValue) {
      return parseFloat(propValue().replace('.', '').replace(',', '.'));
  };
  var applyMonetaryMask = function applyMonetaryMask(number) {
      var onlyNumbers = String(number).replace(/[^0-9]|[.,]/g, ''),
          integerPart = onlyNumbers.slice(0, onlyNumbers.length - 2),
          decimalPart = onlyNumbers.slice(onlyNumbers.length - 2);

      integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

      return integerPart + ',' + decimalPart;
  };
  var noNumbersMask = function noNumbersMask(value) {
      return value.replace(/[0-9]/g, '');
  };
  var numbersOnlyMask = function numbersOnlyMask(value) {
      return value.replace(/[^0-9]/g, '');
  };
  var addChar = function addChar(position, maskChar) {
      return function (char) {
          return function (string) {
              if (string.length === position && char !== maskChar) {
                  return string + maskChar;
              }
              return string;
          };
      };
  };
  var readMaskDefinition = function readMaskDefinition(maskCharDefinitions) {
      return function (maskDefinition) {
          return _.compact(_.map(maskDefinition, function (letter, index) {
              return letter in maskCharDefinitions ? null : [index, letter];
          }));
      };
  };
  var isCharAllowed = function isCharAllowed(maskCharDefinitions) {
      return function (maskDefinition) {
          return function (position, newChar) {
              if (position >= maskDefinition.length) {
                  return false;
              }

              var maskChar = maskDefinition.charAt(position);
              if (maskChar in maskCharDefinitions) {
                  return maskCharDefinitions[maskChar].test(newChar);
              } else {
                  return newChar === maskChar || isCharAllowed(maskCharDefinitions)(maskDefinition)(position + 1, newChar);
              }
          };
      };
  };
  var applyMask = function applyMask(maskDefinition) {
      var maskFunctions = _.map(maskDefinition, function (maskChar) {
          return addChar(maskChar[0], maskChar[1]);
      });
      return function (string, newChar) {
          var addNewCharFunctions = _.map(maskFunctions, function (el) {
              return el(newChar);
          });
          var applyMaskFunctions = _.reduce(addNewCharFunctions, function (memo, f) {
              return _.isFunction(memo) ? _.compose(f, memo) : f;
          });
          return applyMaskFunctions(string);
      };
  };
  var mask = function mask(maskDefinition, value) {
      var maskCharDefinitions = {
          '9': /\d/,
          'A': /[a-zA-Z]/
      },
          readMask = readMaskDefinition(maskCharDefinitions),
          isStrCharAllowed = isCharAllowed(maskCharDefinitions),
          applyValueMask = applyMask(readMask(maskDefinition)),
          restrictInput = isStrCharAllowed(maskDefinition);

      return _.reduce(value, function (memo, chr) {
          if (restrictInput(memo.length, chr)) {
              memo = applyValueMask(memo, chr) + chr;
          }
          return memo;
      }, '');
  };
  var removeStoredObject = function removeStoredObject(sessionKey) {
      return sessionStorage.removeItem(sessionKey);
  };
  var currentProject = m.prop();
  var setProject = function setProject(project) {
      currentProject(project);
  };
  var getProject = function getProject() {
      return currentProject;
  };
  var currentReward = m.prop();
  var setReward = function setReward(reward) {
      currentReward(reward);
  };
  var getReward = function getReward() {
      return currentReward;
  };
  var buildLink = function buildLink(link, refStr) {
      return '/' + link + (refStr ? '?ref=' + refStr : '');
  };
  var analyticsWindowScroll = function analyticsWindowScroll(eventObj) {
      if (eventObj) {
          (function () {
              var fired = false;
              window.addEventListener('scroll', function (e) {
                  //console.log('windowScroll');
                  if (!fired && window.$ && $(document).scrollTop() > $(window).height() * (3 / 4)) {
                      fired = true;
                      var fireEvent = analyticsEvent(eventObj);
                      fireEvent();
                  }
              });
          })();
      }
  };
  var analytics = {
      event: analyticsEvent,
      oneTimeEvent: analyticsOneTimeEvent,
      windowScroll: analyticsWindowScroll
  };
  var projectFullPermalink = function projectFullPermalink(project) {
      var permalink = void 0;
      if (typeof project === 'function') {
          permalink = project().permalink;
      } else {
          permalink = project.permalink;
      }

      return 'https://www.catarse.me/' + permalink;
  };
  var isHome = function isHome() {
      var path = window.location.pathname;

      return path == '/pt' || path == '/';
  };
  var isProjectPage = function isProjectPage() {
      var path = window.location.pathname,
          isOnInsights = path.indexOf('/insights') > -1,
          isOnEdit = path.indexOf('/edit') > -1,
          isOnContribution = path.indexOf('/contribution') > -1;

      return !isOnEdit && !isOnInsights && !isOnContribution;
  };
  var setPageTitle = function setPageTitle(title) {
      return function (el, isInitialized) {
          var titleEl = document.getElementsByTagName('title')[0],
              currentTitle = titleEl.innerText;

          if (currentTitle !== title) {
              return titleEl.innerText = title;
          }
      };
  };
  var checkReminder = function checkReminder() {
      var reminder = sessionStorage.getItem('reminder');

      if (reminder && isHome()) {
          window.location.href = '/projects/' + reminder;
      }
  };
  var rootUrl = function rootUrl() {
      if (_dataCache.rootUrl) return _dataCache.rootUrl;

      var meta = _.first(document.querySelectorAll('[name=root-url]'));
      return meta ? _dataCache.rootUrl = meta.content : undefined;
  };
  setMomentifyLocale();
  closeFlash();
  closeModal();
  checkReminder();

  var h = {
      authenticityToken: authenticityToken,
      buildLink: buildLink,
      cumulativeOffset: cumulativeOffset,
      discuss: discuss,
      existy: existy,
      validateEmail: validateEmail,
      validateCpf: validateCpf,
      momentify: momentify,
      momentFromString: momentFromString,
      formatNumber: formatNumber,
      idVM: idVM,
      getUser: getUser,
      getApiHost: getApiHost,
      getMailchimpUrl: getMailchimpUrl,
      getCurrentProject: getCurrentProject,
      toggleProp: toggleProp,
      loader: loader,
      newFeatureBadge: newFeatureBadge,
      fbParse: fbParse,
      pluralize: pluralize,
      simpleFormat: simpleFormat,
      translatedTime: translatedTime,
      rewardSouldOut: rewardSouldOut,
      rewardRemaning: rewardRemaning,
      parseUrl: parseUrl,
      hashMatch: hashMatch,
      redrawHashChange: redrawHashChange,
      useAvatarOrDefault: useAvatarOrDefault,
      locationActionMatch: locationActionMatch,
      navigateToDevise: navigateToDevise,
      navigateTo: navigateTo,
      storeAction: storeAction,
      callStoredAction: callStoredAction,
      UIHelper: UIHelper,
      toAnchor: toAnchor,
      paramByName: paramByName,
      i18nScope: i18nScope,
      RDTracker: RDTracker,
      selfOrEmpty: selfOrEmpty,
      scrollTo: scrollTo,
      projectStateTextClass: projectStateTextClass,
      validationErrors: validationErrors,
      validate: validate,
      analytics: analytics,
      strip: strip,
      storeObject: storeObject,
      getStoredObject: getStoredObject,
      removeStoredObject: removeStoredObject,
      setProject: setProject,
      getProject: getProject,
      setReward: setReward,
      getReward: getReward,
      applyMonetaryMask: applyMonetaryMask,
      noNumbersMask: noNumbersMask,
      numbersOnlyMask: numbersOnlyMask,
      monetaryToFloat: monetaryToFloat,
      mask: mask,
      projectFullPermalink: projectFullPermalink,
      isProjectPage: isProjectPage,
      setPageTitle: setPageTitle,
      getBlogPosts: getBlogPosts,
      rootUrl: rootUrl
  };

  var models = {
      country: postgrest$1.model('countries'),
      state: postgrest$1.model('states'),
      contributionDetail: postgrest$1.model('contribution_details'),
      contributionActivity: postgrest$1.model('contribution_activities'),
      projectDetail: postgrest$1.model('project_details'),
      userDetail: postgrest$1.model('user_details'),
      balance: postgrest$1.model('balances'),
      balanceTransaction: postgrest$1.model('balance_transactions'),
      balanceTransfer: postgrest$1.model('balance_transfers'),
      user: postgrest$1.model('users'),
      bankAccount: postgrest$1.model('bank_accounts'),
      rewardDetail: postgrest$1.model('reward_details'),
      projectReminder: postgrest$1.model('project_reminders'),
      projectReport: postgrest$1.model('project_reports'),
      contributions: postgrest$1.model('contributions'),
      directMessage: postgrest$1.model('direct_messages'),
      teamTotal: postgrest$1.model('team_totals'),
      recommendedProjects: postgrest$1.model('recommended_projects'),
      projectAccount: postgrest$1.model('project_accounts'),
      projectAccountError: postgrest$1.model('project_account_errors'),
      projectContribution: postgrest$1.model('project_contributions'),
      projectContributiorsStat: postgrest$1.model('project_stat_contributors'),
      projectPostDetail: postgrest$1.model('project_posts_details'),
      projectContributionsPerDay: postgrest$1.model('project_contributions_per_day'),
      projectContributionsPerLocation: postgrest$1.model('project_contributions_per_location'),
      projectContributionsPerRef: postgrest$1.model('project_contributions_per_ref'),
      projectTransfer: postgrest$1.model('project_transfers'),
      project: postgrest$1.model('projects'),
      projectSearch: postgrest$1.model('rpc/project_search'),
      category: postgrest$1.model('categories'),
      categoryTotals: postgrest$1.model('category_totals'),
      categoryFollower: postgrest$1.model('category_followers'),
      teamMember: postgrest$1.model('team_members'),
      notification: postgrest$1.model('notifications'),
      statistic: postgrest$1.model('statistics'),
      successfulProject: postgrest$1.model('successful_projects'),
      finishedProject: postgrest$1.model('finished_projects'),
      userFriend: postgrest$1.model('user_friends'),
      userFollow: postgrest$1.model('user_follows'),
      followAllFriends: postgrest$1.model('rpc/follow_all_friends'),
      contributor: postgrest$1.model('contributors'),
      userFollower: postgrest$1.model('user_followers'),
      creatorSuggestion: postgrest$1.model('creator_suggestions'),
      userContribution: postgrest$1.model('user_contributions'),
      inviteProjectEmail: postgrest$1.model('rpc/invite_project_email'),
      deleteProject: postgrest$1.model('rpc/delete_project'),
      cancelProject: postgrest$1.model('rpc/cancel_project')
  };

  models.teamMember.pageSize(40);
  models.rewardDetail.pageSize(false);
  models.project.pageSize(30);
  models.category.pageSize(50);
  models.contributionActivity.pageSize(40);
  models.successfulProject.pageSize(9);
  models.finishedProject.pageSize(9);
  models.country.pageSize(false);
  models.state.pageSize(false);
  models.projectContribution.pageSize(9);
  models.contributor.pageSize(9);
  models.recommendedProjects.pageSize(3);

  var userListVM = postgrest.paginationVM(models.user, 'id.desc', { 'Prefer': 'count=exact' });

  var vm = postgrest.filtersVM({
      full_text_index: '@@',
      deactivated_at: 'is.null'
  });
  var paramToString = function paramToString(p) {
      return (p || '').toString().trim();
  };
  // Set default values
  vm.deactivated_at(null).order({
      id: 'desc'
  });

  vm.deactivated_at.toFilter = function () {
      var filter = JSON.parse(vm.deactivated_at());
      return filter;
  };

  vm.full_text_index.toFilter = function () {
      var filter = paramToString(vm.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  var filterMain = {
      view: function view(ctrl, args) {
          var inputWrapperClass = args.inputWrapperClass || '.w-input.text-field.positive.medium',
              btnClass = args.btnClass || '.btn.btn-large.u-marginbottom-10';

          return m$1('.w-row', [m$1('.w-col.w-col-10', [m$1('input' + inputWrapperClass + '[placeholder="' + args.placeholder + '"][type="text"]', {
              onchange: m$1.withAttr('value', args.vm),
              value: args.vm()
          })]), m$1('.w-col.w-col-2', [m$1('input#filter-btn' + btnClass + '[type="submit"][value="Buscar"]')])]);
      }
  };

  var adminFilter = {
      controller: function controller() {
          return {
              toggler: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var filterBuilder = args.filterBuilder,
              data = args.data,
              label = args.label || '',
              main = _$1.findWhere(filterBuilder, {
              component: filterMain
          });

          return m$1('#admin-contributions-filter.w-section.page-header', [m$1('.w-container', [m$1('.fontsize-larger.u-text-center.u-marginbottom-30', label), m$1('.w-form', [m$1('form', {
              onsubmit: args.submit
          }, [main ? m$1.component(main.component, main.data) : '', m$1('.u-marginbottom-20.w-row', m$1('button.w-col.w-col-12.fontsize-smallest.link-hidden-light[style="background: none; border: none; outline: none; text-align: left;"][type="button"]', {
              onclick: ctrl.toggler.toggle
          }, 'Filtros avançados  >')), ctrl.toggler() ? m$1('#advanced-search.w-row.admin-filters', [_$1.map(filterBuilder, function (f) {
              return f.component !== filterMain ? m$1.component(f.component, f.data) : '';
          })]) : ''])])])]);
      }
  };

  var adminItem = {
      controller: function controller(args) {
          return {
              displayDetailBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var item = args.item;

          return m$1('.w-clearfix.card.u-radius.u-marginbottom-20.results-admin-items', [m$1.component(args.listItem, {
              item: item,
              key: args.key
          }), m$1('button.w-inline-block.arrow-admin.fa.fa-chevron-down.fontcolor-secondary', {
              onclick: ctrl.displayDetailBox.toggle
          }), ctrl.displayDetailBox() ? m$1.component(args.listDetail, {
              item: item,
              key: args.key
          }) : '']);
      }
  };

  var adminList = {
      controller: function controller(args) {
          var list = args.vm.list;

          if (!list.collection().length && list.firstPage) {
              list.firstPage().then(null, function (serverError) {
                  args.vm.error(serverError.message);
              });
          }
      },
      view: function view(ctrl, args) {
          var list = args.vm.list,
              error = args.vm.error,
              label = args.label || '';

          return m$1('.w-section.section', [m$1('.w-container', error() ? m$1('.card.card-error.u-radius.fontweight-bold', error()) : [m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-9', [m$1('.fontsize-base', list.isLoading() ? 'Carregando ' + label.toLowerCase() + '...' : [m$1('span.fontweight-semibold', list.total()), ' ' + label.toLowerCase() + ' encontrados'])])]), m$1('#admin-contributions-list.w-container', [list.collection().map(function (item) {
              return m$1.component(adminItem, {
                  listItem: args.listItem,
                  listDetail: args.listDetail,
                  item: item,
                  key: item.id
              });
          }), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-2.w-col-push-5', [list.isLoading() ? h.loader() : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais')])])])])])])]);
      }
  };

  var adminUser = {
      view: function view(ctrl, args) {
          var user = args.item;

          return m$1('.w-row.admin-user', [m$1('.w-col.w-col-3.w-col-small-3.u-marginbottom-10', [m$1('img.user-avatar[src="' + h.useAvatarOrDefault(user.profile_img_thumbnail) + '"]')]), m$1('.w-col.w-col-9.w-col-small-9', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-10', [m$1('a.alt-link[target="_blank"][href="/users/' + user.id + '/edit"]', user.name || user.email)]), m$1('.fontsize-smallest', 'Usuário: ' + user.id), m$1('.fontsize-smallest.fontcolor-secondary', 'Email: ' + user.email), args.additional_data])]);
      }
  };

  var adminUserItem = {
      view: function view(ctrl, args) {
          return m$1('.w-row', [m$1('.w-col.w-col-4', [m$1.component(adminUser, args)])]);
      }
  };

  var adminResetPassword = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              error = m$1.prop(false),
              fail = m$1.prop(false),
              key = builder.property,
              data = {},
              item = args.item;

          builder.requestOptions.config = function (xhr) {
              if (h.authenticityToken()) {
                  xhr.setRequestHeader('X-CSRF-Token', h.authenticityToken());
              }
          };

          var l = m$1.prop(false),
              load = function load() {
              return m$1.request(_$1.extend({}, { data: data }, builder.requestOptions));
          },
              newPassword = m$1.prop(''),
              error_message = m$1.prop('');

          var requestError = function requestError(err) {
              l(false);
              error_message(err.errors[0]);
              complete(true);
              error(true);
          };
          var updateItem = function updateItem(res) {
              l(false);
              _$1.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              l(true);
              data[key] = newPassword();
              load().then(updateItem, requestError);
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
              };
          };

          return {
              complete: complete,
              error: error,
              error_message: error_message,
              l: l,
              newPassword: newPassword,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m$1('label', data.innerLabel), m$1('input.w-input.text-field[type="text"][name="' + data.property + '"][placeholder="' + data.placeholder + '"]', {
              onchange: m$1.withAttr('value', ctrl.newPassword),
              value: ctrl.newPassword()
          }), m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', 'Senha alterada com sucesso.')])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', ctrl.error_message())])])]) : '']);
      }
  };

  var adminInputAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              error = m$1.prop(false),
              fail = m$1.prop(false),
              data = {},
              item = args.item,
              key = builder.property,
              forceValue = builder.forceValue || null,
              newValue = m$1.prop(forceValue);

          h.idVM.id(item[builder.updateKey]);

          var l = postgrest.loaderWithToken(builder.model.patchOptions(h.idVM.parameters(), data));

          var updateItem = function updateItem(res) {
              _.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              data[key] = newValue();
              l.load().then(updateItem, function () {
                  complete(true);
                  error(true);
              });
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
                  newValue(forceValue);
              };
          };

          return {
              complete: complete,
              error: error,
              l: l,
              newValue: newValue,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m$1('label', data.innerLabel), data.forceValue === undefined ? m$1('input.w-input.text-field[type="text"][placeholder="' + data.placeholder + '"]', {
              onchange: m$1.withAttr('value', ctrl.newValue),
              value: ctrl.newValue()
          }) : '', m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', data.successMessage)])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', 'Houve um problema na requisição. ' + data.errorMessage)])])]) : '']);
      }
  };

  var adminNotificationHistory = {
      controller: function controller(args) {
          var notifications = m$1.prop([]),
              getNotifications = function getNotifications(user) {
              var notification = models.notification;
              notification.getPageWithToken(postgrest.filtersVM({
                  user_id: 'eq',
                  sent_at: 'is.null'
              }).user_id(user.id).sent_at(!null).order({
                  sent_at: 'desc'
              }).parameters()).then(notifications);
          };

          getNotifications(args.user);

          return {
              notifications: notifications
          };
      },
      view: function view(ctrl) {
          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Histórico de notificações'), ctrl.notifications().map(function (cEvent) {
              return m$1('.w-row.fontsize-smallest.lineheight-looser.date-event', [m$1('.w-col.w-col-24', [m$1('.fontcolor-secondary', h.momentify(cEvent.sent_at, 'DD/MM/YYYY, HH:mm'), ' - ', cEvent.template_name, cEvent.origin ? ' - ' + cEvent.origin : '')])]);
          })]);
      }
  };

  var adminUserDetail = {
      controller: function controller() {
          return {
              actions: {
                  reset: {
                      property: 'password',
                      callToAction: 'Redefinir',
                      innerLabel: 'Nova senha de Usuário:',
                      outerLabel: 'Redefinir senha',
                      placeholder: 'ex: 123mud@r',
                      model: models.user
                  },
                  reactivate: {
                      property: 'deactivated_at',
                      updateKey: 'id',
                      callToAction: 'Reativar',
                      innerLabel: 'Tem certeza que deseja reativar esse usuário?',
                      successMessage: 'Usuário reativado com sucesso!',
                      errorMessage: 'O usuário não pôde ser reativado!',
                      outerLabel: 'Reativar usuário',
                      forceValue: null,
                      model: models.user
                  }
              }
          };
      },
      view: function view(ctrl, args) {
          var actions = ctrl.actions,
              item = args.item,
              details = args.details,
              addOptions = function addOptions(builder, id) {
              return _$1.extend({}, builder, {
                  requestOptions: {
                      url: '/users/' + id + '/new_password',
                      method: 'POST'
                  }
              });
          };

          return m$1('#admin-contribution-detail-box', [m$1('.divider.u-margintop-20.u-marginbottom-20'), m$1('.w-row.u-marginbottom-30', [m$1.component(adminResetPassword, {
              data: addOptions(actions.reset, item.id),
              item: item
          }), item.deactivated_at ? m$1.component(adminInputAction, { data: actions.reactivate, item: item }) : '']), m$1('.w-row.card.card-terciary.u-radius', [m$1.component(adminNotificationHistory, {
              user: item
          })])]);
      }
  };

  var dropdown = {
      view: function view(ctrl, args) {
          var opts = _$1.isFunction(args.options) ? args.options() : args.options;

          return m$1('select' + args.classes + '[id="' + args.id + '"]', {
              onchange: m$1.withAttr('value', args.valueProp),
              value: args.valueProp()
          }, _$1.map(opts, function (data) {
              return m$1('option[value="' + data.value + '"]', data.option);
          }));
      }
  };

  var filterDropdown = {
      view: function view(ctrl, args) {
          var wrapper_c = args.wrapper_class || '.w-col.w-col-3.w-col-small-6';
          return m$1(wrapper_c, [m$1('label.fontsize-smaller[for="' + args.index + '"]', args.custom_label ? m$1.component(args.custom_label[0], args.custom_label[1]) : args.label), m$1.component(dropdown, {
              id: args.index,
              classes: '.w-select.text-field.positive',
              valueProp: args.vm,
              options: args.options
          })]);
      }
  };

  var adminUsers = {
      controller: function controller() {
          var listVM = userListVM,
              filterVM = vm,
              error = m$1.prop(''),
              itemBuilder = [{
              component: adminUser,
              wrapperClass: '.w-col.w-col-4'
          }],
              filterBuilder = [{ //name
              component: filterMain,
              data: {
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por nome, e-mail, Ids do usuário...'
              }
          }, { //status
              component: filterDropdown,
              data: {
                  label: 'Com o estado',
                  index: 'status',
                  name: 'deactivated_at',
                  vm: filterVM.deactivated_at,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: null,
                      option: 'ativo'
                  }, {
                      value: !null,
                      option: 'desativado'
                  }]
              }
          }],
              submit = function submit() {
              listVM.firstPage(filterVM.parameters()).then(null, function (serverError) {
                  error(serverError.message);
              });
              return false;
          };

          return {
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              listVM: {
                  list: listVM,
                  error: error
              },
              submit: submit
          };
      },
      view: function view(ctrl) {
          var label = 'Usuários';

          return [m$1.component(adminFilter, {
              form: ctrl.filterVM.formDescriber,
              filterBuilder: ctrl.filterBuilder,
              label: label,
              submit: ctrl.submit
          }), m$1.component(adminList, {
              vm: ctrl.listVM,
              label: label,
              listItem: adminUserItem,
              listDetail: adminUserDetail
          })];
      }
  };

  var contributionListVM = postgrest.paginationVM(models.contributionDetail, 'id.desc', { 'Prefer': 'count=exact' });

  var vm$1 = postgrest$1.filtersVM({
      full_text_index: '@@',
      state: 'eq',
      gateway: 'eq',
      value: 'between',
      created_at: 'between'
  });
  var paramToString$1 = function paramToString(p) {
      return (p || '').toString().trim();
  };
  // Set default values
  vm$1.state('');
  vm$1.gateway('');
  vm$1.order({
      id: 'desc'
  });

  vm$1.created_at.lte.toFilter = function () {
      var filter = paramToString$1(vm$1.created_at.lte());
      return filter && h.momentFromString(filter).endOf('day').format('');
  };

  vm$1.created_at.gte.toFilter = function () {
      var filter = paramToString$1(vm$1.created_at.gte());
      return filter && h.momentFromString(filter).format();
  };

  vm$1.full_text_index.toFilter = function () {
      var filter = paramToString$1(vm$1.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  var adminProject = {
      view: function view(ctrl, args) {
          var project = args.item;
          return m$1('.w-row.admin-project', [m$1('.w-col.w-col-3.w-col-small-3.u-marginbottom-10', [m$1('img.thumb-project.u-radius[src=' + project.project_img + '][width=50]')]), m$1('.w-col.w-col-9.w-col-small-9', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-10', [m$1('a.alt-link[target="_blank"][href="/' + project.permalink + '"]', project.project_name)]), m$1('.fontsize-smallest.fontweight-semibold', project.project_state), m$1('.fontsize-smallest.fontcolor-secondary', h.momentify(project.project_online_date) + ' a ' + h.momentify(project.project_expires_at))])]);
      }
  };

  var adminContribution = {
      view: function view(ctrl, args) {
          var contribution = args.item;
          return m$1('.w-row.admin-contribution', [m$1('.fontweight-semibold.lineheight-tighter.u-marginbottom-10.fontsize-small', 'R$' + contribution.value), m$1('.fontsize-smallest.fontcolor-secondary', h.momentify(contribution.created_at, 'DD/MM/YYYY HH:mm[h]')), m$1('.fontsize-smallest', ['ID do Gateway: ', m$1('a.alt-link[target="_blank"][href="https://dashboard.pagar.me/#/transactions/' + contribution.gateway_id + '"]', contribution.gateway_id)])]);
      }
  };

  var adminContributionUser = {
      view: function view(ctrl, args) {
          var item = args.item,
              user = {
              profile_img_thumbnail: item.user_profile_img,
              id: item.user_id,
              name: item.user_name,
              email: item.email
          };

          var additionalData = m$1('.fontsize-smallest.fontcolor-secondary', 'Gateway: ' + item.payer_email);
          return m$1.component(adminUser, { item: user, additional_data: additionalData });
      }
  };

  //Add translations to payment state.
  var I18nScope = _.partial(h.i18nScope, 'projects.payment');

  var paymentStatus = {
      controller: function controller(args) {
          var payment = args.item,
              card = null,
              displayPaymentMethod = void 0,
              paymentMethodClass = void 0,
              stateClass = void 0;

          card = function card() {
              if (payment.gateway_data) {
                  switch (payment.gateway.toLowerCase()) {
                      case 'moip':
                          return {
                              first_digits: payment.gateway_data.cartao_bin,
                              last_digits: payment.gateway_data.cartao_final,
                              brand: payment.gateway_data.cartao_bandeira
                          };
                      case 'pagarme':
                          return {
                              first_digits: payment.gateway_data.card_first_digits,
                              last_digits: payment.gateway_data.card_last_digits,
                              brand: payment.gateway_data.card_brand
                          };
                  }
              }
          };

          displayPaymentMethod = function displayPaymentMethod() {
              switch (payment.payment_method.toLowerCase()) {
                  case 'boletobancario':
                      return m$1('span#boleto-detail', '');
                  case 'cartaodecredito':
                      var cardData = card();
                      if (cardData) {
                          return m$1('#creditcard-detail.fontsize-smallest.fontcolor-secondary.lineheight-tight', [cardData.first_digits + '******' + cardData.last_digits, m$1('br'), cardData.brand + ' ' + payment.installments + 'x']);
                      }
                      return '';
              }
          };

          paymentMethodClass = function paymentMethodClass() {
              switch (payment.payment_method.toLowerCase()) {
                  case 'boletobancario':
                      return '.fa-barcode';
                  case 'cartaodecredito':
                      return '.fa-credit-card';
                  default:
                      return '.fa-question';
              }
          };

          stateClass = function stateClass() {
              switch (payment.state) {
                  case 'paid':
                      return '.text-success';
                  case 'refunded':
                      return '.text-refunded';
                  case 'pending':
                  case 'pending_refund':
                      return '.text-waiting';
                  default:
                      return '.text-error';
              }
          };

          return {
              displayPaymentMethod: displayPaymentMethod,
              paymentMethodClass: paymentMethodClass,
              stateClass: stateClass
          };
      },
      view: function view(ctrl, args) {
          var payment = args.item;

          return m$1('.w-row.payment-status', [m$1('.fontsize-smallest.lineheight-looser.fontweight-semibold', [m$1('span.fa.fa-circle' + ctrl.stateClass()), ' ' + I18n$1.t(payment.state, I18nScope())]), m$1('.fontsize-smallest.fontweight-semibold', [m$1('span.fa' + ctrl.paymentMethodClass()), ' ', m$1('a.link-hidden[href="#"]', payment.payment_method)]), m$1('.fontsize-smallest.fontcolor-secondary.lineheight-tight', [ctrl.displayPaymentMethod()])]);
      }
  };

  var adminContributionItem = {
      controller: function controller() {
          return {
              itemBuilder: [{
                  component: adminContributionUser,
                  wrapperClass: '.w-col.w-col-4'
              }, {
                  component: adminProject,
                  wrapperClass: '.w-col.w-col-4'
              }, {
                  component: adminContribution,
                  wrapperClass: '.w-col.w-col-2'
              }, {
                  component: paymentStatus,
                  wrapperClass: '.w-col.w-col-2'
              }]
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-row', _.map(ctrl.itemBuilder, function (panel) {
              return m$1(panel.wrapperClass, [m$1.component(panel.component, {
                  item: args.item,
                  key: args.key
              })]);
          }));
      }
  };

  var adminRadioAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              data = {},
              error = m$1.prop(false),
              fail = m$1.prop(false),
              item = args.item(),
              description = m$1.prop(item.description || ''),
              key = builder.getKey,
              newID = m$1.prop(''),
              getFilter = {},
              setFilter = {},
              radios = m$1.prop([]),
              getAttr = builder.radios,
              getKey = builder.getKey,
              getKeyValue = args.getKeyValue,
              updateKey = builder.updateKey,
              updateKeyValue = args.updateKeyValue,
              validate = builder.validate,
              selectedItem = builder.selectedItem || m$1.prop();

          setFilter[updateKey] = 'eq';
          var setVM = postgrest.filtersVM(setFilter);
          setVM[updateKey](updateKeyValue);

          getFilter[getKey] = 'eq';
          var getVM = postgrest.filtersVM(getFilter);
          getVM[getKey](getKeyValue);

          var getLoader = postgrest.loaderWithToken(builder.getModel.getPageOptions(getVM.parameters()));

          var setLoader = postgrest.loaderWithToken(builder.updateModel.patchOptions(setVM.parameters(), data));

          var updateItem = function updateItem(data) {
              if (data.length > 0) {
                  var newItem = _$1.findWhere(radios(), {
                      id: data[0][builder.selectKey]
                  });
                  selectedItem(newItem);
              } else {
                  error({
                      message: 'Nenhum item atualizado'
                  });
              }
              complete(true);
          };

          var populateRadios = function populateRadios(data) {
              var emptyState = builder.addEmpty;

              radios(data);

              if (!_$1.isUndefined(emptyState)) {
                  radios().unshift(emptyState);
              }
          };

          var fetch = function fetch() {
              getLoader.load().then(populateRadios, error);
          };

          var submit = function submit() {
              if (newID()) {
                  var validation = validate(radios(), newID());
                  if (_$1.isUndefined(validation)) {
                      data[builder.selectKey] = newID() === -1 ? null : newID();
                      setLoader.load().then(updateItem, error);
                  } else {
                      complete(true);
                      error({
                          message: validation
                      });
                  }
              }
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
                  newID('');
              };
          };

          var setDescription = function setDescription(text) {
              description(text);
              m$1.redraw();
          };

          fetch();

          return {
              complete: complete,
              description: description,
              setDescription: setDescription,
              error: error,
              setLoader: setLoader,
              getLoader: getLoader,
              newID: newID,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload,
              radios: radios
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              item = args.item(),
              btnValue = ctrl.setLoader() || ctrl.getLoader() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [ctrl.radios() ? _$1.map(ctrl.radios(), function (radio, index) {
              return m$1('.w-radio', [m$1('input#r-' + index + '.w-radio-input[type=radio][name="admin-radio"][value="' + radio.id + '"]', {
                  checked: radio.id === (item[data.selectKey] || item.id),
                  onclick: function onclick() {
                      ctrl.newID(radio.id);
                      ctrl.setDescription(radio.description);
                  }
              }), m$1('label.w-form-label[for="r-' + index + '"]', 'R$' + radio.minimum_value)]);
          }) : h.loader(), m$1('strong', 'Descrição'), m$1('p', ctrl.description()), m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', 'Recompensa alterada com sucesso!')])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', ctrl.error().message)])])]) : '']);
      }
  };

  var adminExternalAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              error = m$1.prop(false),
              fail = m$1.prop(false),
              data = {},
              item = args.item;

          builder.requestOptions.config = function (xhr) {
              if (h.authenticityToken()) {
                  xhr.setRequestHeader('X-CSRF-Token', h.authenticityToken());
              }
          };

          var reload = _$1.compose(builder.model.getRowWithToken, h.idVM.id(item[builder.updateKey]).parameters),
              l = m$1.prop(false);

          var reloadItem = function reloadItem() {
              return reload().then(updateItem);
          };

          var requestError = function requestError(err) {
              l(false);
              complete(true);
              error(true);
          };

          var updateItem = function updateItem(res) {
              _$1.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              l(true);
              m$1.request(builder.requestOptions).then(reloadItem, requestError);
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
              };
          };

          return {
              l: l,
              complete: complete,
              error: error,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m$1('label', data.innerLabel), m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', 'Requisição feita com sucesso.')])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', 'Houve um problema na requisição.')])])]) : '']);
      }
  };

  var adminTransaction = {
      view: function view(ctrl, args) {
          var contribution = args.contribution;
          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Detalhes do apoio'), m$1('.fontsize-smallest.lineheight-looser', ['Valor: R$' + h.formatNumber(contribution.value, 2, 3), m$1('br'), 'Taxa: R$' + h.formatNumber(contribution.gateway_fee, 2, 3), m$1('br'), 'Aguardando Confirmação: ' + (contribution.waiting_payment ? 'Sim' : 'Não'), m$1('br'), 'Anônimo: ' + (contribution.anonymous ? 'Sim' : 'Não'), m$1('br'), 'Id pagamento: ' + contribution.gateway_id, m$1('br'), 'Apoio: ' + contribution.contribution_id, m$1('br'), 'Chave: \n', m$1('br'), contribution.key, m$1('br'), 'Meio: ' + contribution.gateway, m$1('br'), 'Operadora: ' + (contribution.gateway_data && contribution.gateway_data.acquirer_name), m$1('br'), contribution.is_second_slip ? [m$1('a.link-hidden[href="#"]', 'Boleto bancário'), ' ', m$1('span.badge', '2a via')] : ''])]);
      }
  };

  var adminTransactionHistory = {
      controller: function controller(args) {
          var contribution = args.contribution,
              mapEvents = _$1.reduce([{
              date: contribution.paid_at,
              name: 'Apoio confirmado'
          }, {
              date: contribution.pending_refund_at,
              name: 'Reembolso solicitado'
          }, {
              date: contribution.refunded_at,
              name: 'Estorno realizado'
          }, {
              date: contribution.created_at,
              name: 'Apoio criado'
          }, {
              date: contribution.refused_at,
              name: 'Apoio cancelado'
          }, {
              date: contribution.deleted_at,
              name: 'Apoio excluído'
          }, {
              date: contribution.chargeback_at,
              name: 'Chargeback'
          }], function (memo, item) {
              if (item.date !== null && item.date !== undefined) {
                  item.originalDate = item.date;
                  item.date = h.momentify(item.date, 'DD/MM/YYYY, HH:mm');
                  return memo.concat(item);
              }

              return memo;
          }, []);

          return {
              orderedEvents: _$1.sortBy(mapEvents, 'originalDate')
          };
      },
      view: function view(ctrl) {
          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Histórico da transação'), ctrl.orderedEvents.map(function (cEvent) {
              return m$1('.w-row.fontsize-smallest.lineheight-looser.date-event', [m$1('.w-col.w-col-6', [m$1('.fontcolor-secondary', cEvent.date)]), m$1('.w-col.w-col-6', [m$1('div', cEvent.name)])]);
          })]);
      }
  };

  var adminReward = {
      view: function view(ctrl, args) {
          var reward = args.reward(),
              available = parseInt(reward.paid_count) + parseInt(reward.waiting_payment_count);

          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Recompensa'), m$1('.fontsize-smallest.lineheight-looser', reward.id ? ['ID: ' + reward.id, m$1('br'), 'Valor mínimo: R$' + h.formatNumber(reward.minimum_value, 2, 3), m$1('br'), m$1.trust('Disponíveis: ' + available + ' / ' + (reward.maximum_contributions || '&infin;')), m$1('br'), 'Aguardando confirmação: ' + reward.waiting_payment_count, m$1('br'), 'Descrição: ' + reward.description] : 'Apoio sem recompensa')]);
      }
  };

  var adminContributionDetail = {
      controller: function controller(args) {
          var l = void 0;
          var loadReward = function loadReward() {
              var model = models.rewardDetail,
                  reward_id = args.item.reward_id,
                  opts = model.getRowOptions(h.idVM.id(reward_id).parameters()),
                  reward = m$1.prop({});

              l = postgrest.loaderWithToken(opts);

              if (reward_id) {
                  l.load().then(_$1.compose(reward, _$1.first));
              }

              return reward;
          };

          return {
              reward: loadReward(),
              actions: {
                  transfer: {
                      property: 'user_id',
                      updateKey: 'id',
                      callToAction: 'Transferir',
                      innerLabel: 'Id do novo apoiador:',
                      outerLabel: 'Transferir Apoio',
                      placeholder: 'ex: 129908',
                      successMessage: 'Apoio transferido com sucesso!',
                      errorMessage: 'O apoio não foi transferido!',
                      model: models.contributionDetail
                  },
                  reward: {
                      getKey: 'project_id',
                      updateKey: 'contribution_id',
                      selectKey: 'reward_id',
                      radios: 'rewards',
                      callToAction: 'Alterar Recompensa',
                      outerLabel: 'Recompensa',
                      getModel: models.rewardDetail,
                      updateModel: models.contributionDetail,
                      selectedItem: loadReward(),
                      addEmpty: { id: -1, minimum_value: 10, description: 'Sem recompensa' },
                      validate: function validate(rewards, newRewardID) {
                          var reward = _$1.findWhere(rewards, { id: newRewardID });
                          return args.item.value >= reward.minimum_value ? undefined : 'Valor mínimo da recompensa é maior do que o valor da contribuição.';
                      }
                  },
                  refund: {
                      updateKey: 'id',
                      callToAction: 'Reembolso direto',
                      innerLabel: 'Tem certeza que deseja reembolsar esse apoio?',
                      outerLabel: 'Reembolsar Apoio',
                      model: models.contributionDetail
                  },
                  remove: {
                      property: 'state',
                      updateKey: 'id',
                      callToAction: 'Apagar',
                      innerLabel: 'Tem certeza que deseja apagar esse apoio?',
                      outerLabel: 'Apagar Apoio',
                      forceValue: 'deleted',
                      successMessage: 'Apoio removido com sucesso!',
                      errorMessage: 'O apoio não foi removido!',
                      model: models.contributionDetail
                  }
              },
              l: l
          };
      },
      view: function view(ctrl, args) {
          var actions = ctrl.actions,
              item = args.item,
              reward = ctrl.reward;

          var addOptions = function addOptions(builder, id) {
              return _$1.extend({}, builder, {
                  requestOptions: {
                      url: '/admin/contributions/' + id + '/gateway_refund',
                      method: 'PUT'
                  }
              });
          };

          return m$1('#admin-contribution-detail-box', [m$1('.divider.u-margintop-20.u-marginbottom-20'), m$1('.w-row.u-marginbottom-30', [m$1.component(adminInputAction, {
              data: actions.transfer,
              item: item
          }), ctrl.l() ? h.loader : m$1.component(adminRadioAction, {
              data: actions.reward,
              item: reward,
              getKeyValue: item.project_id,
              updateKeyValue: item.contribution_id
          }), m$1.component(adminExternalAction, {
              data: addOptions(actions.refund, item.id),
              item: item
          }), m$1.component(adminInputAction, {
              data: actions.remove,
              item: item
          })]), m$1('.w-row.card.card-terciary.u-radius', [m$1.component(adminTransaction, {
              contribution: item
          }), m$1.component(adminTransactionHistory, {
              contribution: item
          }), ctrl.l() ? h.loader : m$1.component(adminReward, {
              reward: reward,
              key: item.key
          })])]);
      }
  };

  var filterNumberRange = {
      view: function view(ctrl, args) {
          return m$1('.w-col.w-col-3.w-col-small-6', [m$1('label.fontsize-smaller[for="' + args.index + '"]', args.label), m$1('.w-row', [m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[id="' + args.index + '"][type="text"]', {
              onchange: m$1.withAttr('value', args.first),
              value: args.first()
          })]), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m$1('.fontsize-smaller.u-text-center.lineheight-looser', 'e')]), m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[type="text"]', {
              onchange: m$1.withAttr('value', args.last),
              value: args.last()
          })])])]);
      }
  };

  var filterDateRange = {
      view: function view(ctrl, args) {
          return m$1('.w-col.w-col-3.w-col-small-6', [m$1('label.fontsize-smaller[for="' + args.index + '"]', args.label), m$1('.w-row', [m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[id="' + args.index + '"][type="text"]', {
              onchange: m$1.withAttr('value', args.first),
              value: args.first()
          })]), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m$1('.fontsize-smaller.u-text-center.lineheight-looser', 'e')]), m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[type="text"]', {
              onchange: m$1.withAttr('value', args.last),
              value: args.last()
          })])])]);
      }
  };

  var adminContributions = {
      controller: function controller() {
          var listVM = contributionListVM,
              filterVM = vm$1,
              error = m$1.prop(''),
              filterBuilder = [{ //full_text_index
              component: filterMain,
              data: {
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por projeto, email, Ids do usuário e do apoio...'
              }
          }, { //state
              component: filterDropdown,
              data: {
                  label: 'Com o estado',
                  name: 'state',
                  vm: filterVM.state,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: 'paid',
                      option: 'paid'
                  }, {
                      value: 'refused',
                      option: 'refused'
                  }, {
                      value: 'pending',
                      option: 'pending'
                  }, {
                      value: 'pending_refund',
                      option: 'pending_refund'
                  }, {
                      value: 'refunded',
                      option: 'refunded'
                  }, {
                      value: 'chargeback',
                      option: 'chargeback'
                  }, {
                      value: 'deleted',
                      option: 'deleted'
                  }]
              }
          }, { //gateway
              component: filterDropdown,
              data: {
                  label: 'gateway',
                  name: 'gateway',
                  vm: filterVM.gateway,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: 'Pagarme',
                      option: 'Pagarme'
                  }, {
                      value: 'MoIP',
                      option: 'MoIP'
                  }, {
                      value: 'PayPal',
                      option: 'PayPal'
                  }, {
                      value: 'Credits',
                      option: 'Créditos'
                  }]
              }
          }, { //value
              component: filterNumberRange,
              data: {
                  label: 'Valores entre',
                  first: filterVM.value.gte,
                  last: filterVM.value.lte
              }
          }, { //created_at
              component: filterDateRange,
              data: {
                  label: 'Período do apoio',
                  first: filterVM.created_at.gte,
                  last: filterVM.created_at.lte
              }
          }],
              submit = function submit() {
              error(false);
              listVM.firstPage(filterVM.parameters()).then(null, function (serverError) {
                  error(serverError.message);
              });
              return false;
          };

          return {
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              listVM: {
                  list: listVM,
                  error: error
              },
              data: {
                  label: 'Apoios'
              },
              submit: submit
          };
      },
      view: function view(ctrl) {
          return [m$1.component(adminFilter, {
              form: ctrl.filterVM.formDescriber,
              filterBuilder: ctrl.filterBuilder,
              submit: ctrl.submit
          }), m$1.component(adminList, {
              vm: ctrl.listVM,
              listItem: adminContributionItem,
              listDetail: adminContributionDetail
          })];
      }
  };

  var landingSignup = {
      controller: function controller(args) {
          var builder = args.builder,
              email = m$1.prop(''),
              error = m$1.prop(false),
              submit = function submit() {
              if (h.validateEmail(email())) {
                  return true;
              } else {
                  error(true);
                  return false;
              }
          };
          return {
              email: email,
              submit: submit,
              error: error
          };
      },
      view: function view(ctrl, args) {
          var errorClasses = !ctrl.error ? '.positive.error' : '';
          return m$1('form.w-form[id="email-form"][method="post"][action="' + args.builder.customAction + '"]', {
              onsubmit: ctrl.submit
          }, [m$1('.w-col.w-col-5', [m$1('input' + errorClasses + '.w-input.text-field.medium[name="EMAIL"][placeholder="Digite seu email"][type="text"]', {
              config: h.RDTracker('landing-flex'),
              onchange: m$1.withAttr('value', ctrl.email),
              value: ctrl.email()
          }), ctrl.error() ? m$1('span.fontsize-smaller.text-error', 'E-mail inválido') : '']), m$1('.w-col.w-col-3', [m$1('input.w-button.btn.btn-large[type="submit"][value="Cadastrar"]')])]);
      }
  };

  var error = m.prop('');
  var rewards = m.prop([]);
  var noReward = {
      id: -1,
      description: 'Obrigado. Eu só quero ajudar o projeto.',
      minimum_value: 10
  };
  var contributionValue = m.prop(noReward.minimum_value + ',00');
  var selectedReward = m.prop(noReward);
  var vm$3 = postgrest$1.filtersVM({
      project_id: 'eq'
  });
  var rewardsLoader = function rewardsLoader(project_id) {
      vm$3.project_id(project_id);

      return postgrest$1.loaderWithToken(models.rewardDetail.getPageOptions(vm$3.parameters()));
  };

  var fetchRewards = function fetchRewards(project_id) {
      return rewardsLoader(project_id).load().then(rewards);
  };

  var getSelectedReward = function getSelectedReward() {
      var root = document.getElementById('application'),
          data = root && root.getAttribute('data-contribution');

      if (data) {
          var contribution = JSON.parse(data);
          var reward = selectedReward(contribution.reward);

          m.redraw(true);

          return selectedReward;
      } else {
          return false;
      }
  };

  var selectReward = function selectReward(reward) {
      return function () {
          if (rewardVM.selectedReward() !== reward) {
              rewardVM.selectedReward(reward);

              contributionValue(h.applyMonetaryMask(reward.minimum_value + ',00'));
          }
      };
  };

  var applyMask$1 = _.compose(contributionValue, h.applyMonetaryMask);

  var rewardVM = {
      error: error,
      rewards: rewards,
      applyMask: applyMask$1,
      noReward: noReward,
      fetchRewards: fetchRewards,
      selectReward: selectReward,
      getSelectedReward: getSelectedReward,
      selectedReward: selectedReward,
      contributionValue: contributionValue,
      rewardsLoader: rewardsLoader,
      getValue: contributionValue,
      setValue: contributionValue
  };

  var projectFiltersVM = function projectFiltersVM() {
      var filtersVM = postgrest$1.filtersVM,
          all = filtersVM({
          state: 'eq'
      }).state('online'),
          nearMe = filtersVM({
          near_me: 'eq',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').near_me(true),
          expiring = filtersVM({
          expires_at: 'lte',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').expires_at(moment$1().add(14, 'days').format('YYYY-MM-DD')),
          recent = filtersVM({
          online_date: 'gte',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').online_date(moment$1().subtract(5, 'days').format('YYYY-MM-DD')),
          score = filtersVM({
          score: 'gte',
          open_for_contributions: 'eq'
      }).score('1').open_for_contributions('true'),
          online = filtersVM({
          open_for_contributions: 'eq'
      }).open_for_contributions('true'),
          contributed_by_friends = filtersVM({
          open_for_contributions: 'eq',
          contributed_by_friends: 'eq'
      }).open_for_contributions('true').contributed_by_friends(true),
          successful = filtersVM({
          state: 'eq'
      }).state('successful'),
          finished = filtersVM({}),
          filters = {
          all: {
              title: 'Todas as Categorias',
              filter: all,
              nicename: 'No ar',
              isContextual: false,
              keyName: 'all'
          },
          score: {
              title: 'Todas as Categorias',
              filter: score,
              nicename: 'Populares',
              isContextual: false,
              keyName: 'score'
          },
          contributed_by_friends: {
              title: 'Amigos',
              filter: contributed_by_friends,
              nicename: 'Amigos',
              isContextual: false,
              keyName: 'contributed_by_friends'
          },
          online: {
              title: 'No ar',
              filter: online,
              isContextual: false,
              keyName: 'online'
          },
          expiring: {
              title: 'Reta final',
              filter: expiring,
              isContextual: false,
              keyName: 'expiring'
          },
          successful: {
              title: 'Todas as Categorias',
              filter: successful,
              nicename: 'Financiados',
              isContextual: false,
              keyName: 'successful'
          },
          finished: {
              title: 'Todas as Categorias',
              filter: finished,
              nicename: 'Finalizados',
              isContextual: false,
              keyName: 'finished'
          },
          recent: {
              title: 'Recentes',
              filter: recent,
              isContextual: false,
              keyName: 'recent'
          },
          near_me: {
              title: 'Próximos a mim',
              filter: nearMe,
              isContextual: false,
              keyName: 'near_me'
          }
      };

      var setContextFilters = function setContextFilters(contextFilters) {
          _.map(contextFilters, function (filterKey) {
              return filters[filterKey].isContextual = true;
          });

          return filters;
      },
          getContextFilters = function getContextFilters() {
          return _.filter(filters, function (filter) {
              return filter.isContextual;
          });
      },
          removeContextFilter = function removeContextFilter(filter) {
          filters[filter.keyName].isContextual = false;

          return filters;
      };

      return {
          filters: filters,
          setContextFilters: setContextFilters,
          getContextFilters: getContextFilters,
          removeContextFilter: removeContextFilter
      };
  };

  var idVM$2 = h.idVM;
  var userDetails$1 = m$1.prop([]);
  var currentUser = m$1.prop();
  var createdVM = postgrest$1.filtersVM({ project_user_id: 'eq' });
  var getUserCreatedProjects = function getUserCreatedProjects(user_id) {
      var pageSize = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];

      createdVM.project_user_id(user_id).order({ project_id: 'desc' });

      models.project.pageSize(pageSize);

      var lUserCreated = postgrest$1.loaderWithToken(models.project.getPageOptions(createdVM.parameters()));

      return lUserCreated.load();
  };

  var getPublicUserContributedProjects = function getPublicUserContributedProjects(user_id) {
      var pageSize = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];

      var contextVM = postgrest$1.filtersVM({
          user_id: 'eq'
      });

      contextVM.user_id(user_id);

      models.contributor.pageSize(pageSize);

      var lUserContributed = postgrest$1.loaderWithToken(models.contributor.getPageOptions(contextVM.parameters()));

      return lUserContributed.load();
  };

  var getUserContributedProjects = function getUserContributedProjects(user_id) {
      var pageSize = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];

      var contextVM = postgrest$1.filtersVM({
          user_id: 'eq',
          state: 'in'
      });

      contextVM.user_id(user_id).order({
          created_at: 'desc'
      }).state(['refunded', 'pending_refund', 'paid']);

      models.userContribution.pageSize(pageSize);

      var lUserContributed = postgrest$1.loaderWithToken(models.userContribution.getPageOptions(contextVM.parameters()));

      return lUserContributed.load();
  };

  var fetchUser = function fetchUser(user_id) {
      var handlePromise = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
      var customProp = arguments.length <= 2 || arguments[2] === undefined ? currentUser : arguments[2];

      idVM$2.id(user_id);

      var lUser = postgrest$1.loaderWithToken(models.userDetail.getRowOptions(idVM$2.parameters()));

      return !handlePromise ? lUser.load() : lUser.load().then(_$1.compose(customProp, _$1.first));
  };

  var displayImage = function displayImage(user) {
      return user.profile_img_thumbnail || "https://catarse.me/assets/catarse_bootstrap/user.jpg";
  };

  var displayCover = function displayCover(user) {
      return user.profile_cover_image || displayImage(user);
  };

  var getUserRecommendedProjects = function getUserRecommendedProjects(contribution) {
      var sample3 = _$1.partial(_$1.sample, _$1, 3);
      var loaders = m$1.prop([]);
      var collection = m$1.prop([]);

      var _h$getUser = h.getUser();

      var user_id = _h$getUser.user_id;


      var loader = function loader() {
          return _$1.reduce(loaders(), function (memo, curr) {
              var _memo = _$1.isFunction(memo) ? memo() : memo,
                  _curr = _$1.isFunction(curr) ? curr() : curr;

              return _memo && _curr;
          }, true);
      };

      var loadPopular = function loadPopular() {
          var filters = projectFiltersVM().filters;
          var popular = postgrest$1.loaderWithToken(models.project.getPageOptions(_$1.extend({}, { order: 'score.desc' }, filters['score'].filter.parameters())));

          loaders().push(popular);

          popular.load().then(_$1.compose(collection, sample3));
      };

      var pushProject = function pushProject(_ref) {
          var project_id = _ref.project_id;

          var project = postgrest$1.loaderWithToken(models.project.getPageOptions(postgrest$1.filtersVM({ project_id: 'eq' }).project_id(project_id).parameters()));

          loaders().push(project);
          project.load().then(function (data) {
              collection().push(_$1.first(data));
          });
      };

      var projects = postgrest$1.loaderWithToken(models.recommendedProjects.getPageOptions(postgrest$1.filtersVM({ user_id: 'eq' }).user_id(user_id).parameters()));

      projects.load().then(function (recommended) {
          console.log('Recommended response is: ', recommended);
          if (recommended.length > 0) {
              _$1.map(recommended, pushProject);
          } else {
              loadPopular();
          }
      });

      return {
          loader: loader,
          collection: collection
      };
  };

  var userVM = {
      getUserCreatedProjects: getUserCreatedProjects,
      getUserRecommendedProjects: getUserRecommendedProjects,
      getUserContributedProjects: getUserContributedProjects,
      getPublicUserContributedProjects: getPublicUserContributedProjects,
      currentUser: currentUser,
      displayImage: displayImage,
      displayCover: displayCover,
      fetchUser: fetchUser
  };

  var idVM$1 = h.idVM;
  var currentProject$1 = m$1.prop();
  var userDetails = m$1.prop();
  var projectContributions = m$1.prop([]);
  var vm$2 = postgrest$1.filtersVM({ project_id: 'eq' });
  var setProject$1 = function setProject(project_user_id) {
      return function (data) {
          currentProject$1(_$1.first(data));

          if (!project_user_id) {
              userVM.fetchUser(currentProject$1().user_id, true, userDetails);
          }

          return currentProject$1;
      };
  };

  var init = function init(project_id, project_user_id) {
      vm$2.project_id(project_id);

      var lProject = postgrest$1.loaderWithToken(models.projectDetail.getRowOptions(vm$2.parameters()));

      fetchParallelData(project_id, project_user_id);

      return lProject.load().then(setProject$1(project_user_id));
  };

  var resetData = function resetData() {
      userDetails({});
      rewardVM.rewards([]);
  };

  var fetchParallelData = function fetchParallelData(project_id, project_user_id) {
      if (project_user_id) {
          userVM.fetchUser(project_user_id, true, userDetails);
      }

      rewardVM.fetchRewards(project_id);
  };

  var getCurrentProject$1 = function getCurrentProject() {
      var root = document.getElementById('application'),
          data = root && root.getAttribute('data-parameters');

      if (data) {
          var _currentProject = currentProject$1(JSON.parse(data));

          var project_id = _currentProject.project_id;
          var project_user_id = _currentProject.project_user_id;


          m$1.redraw(true);

          init(project_id, project_user_id);

          return currentProject$1();
      } else {
          return false;
      }
  };

  var routeToProject = function routeToProject(project, ref) {
      return function () {
          currentProject$1(project);

          resetData();

          m$1.route(h.buildLink(project.permalink, ref), { project_id: project.project_id, project_user_id: project.project_user_id });

          return false;
      };
  };

  var setProjectPageTitle = function setProjectPageTitle() {
      if (currentProject$1()) {
          var projectName = currentProject$1().project_name || currentProject$1().name;

          return projectName ? h.setPageTitle(projectName) : Function.prototype;
      }
  };

  var projectVM = {
      userDetails: userDetails,
      getCurrentProject: getCurrentProject$1,
      projectContributions: projectContributions,
      currentProject: currentProject$1,
      rewardDetails: rewardVM.rewards,
      routeToProject: routeToProject,
      setProjectPageTitle: setProjectPageTitle,
      init: init
  };

  var projectFriends = {
      controller: function controller(args) {
          var project = args.project,
              friendsSample = m$1.prop([]),
              listVM = postgrest$1.paginationVM(models.contributor, 'user_id.desc', {
              'Prefer': 'count=exact'
          }),
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq',
              is_follow: 'eq'
          }).project_id(project.project_id).is_follow(true);

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters()).then(function () {
                  friendsSample(_$1.sample(listVM.collection(), 2));
              });
          }
          return {
              project: project,
              listVM: listVM,
              friendsSample: friendsSample
          };
      },
      view: function view(ctrl, args) {
          var project = ctrl.project,
              friendsCount = ctrl.listVM.collection().length;
          return m$1('.friend-backed-card', [m$1('.friend-facepile', [_$1.map(ctrl.friendsSample(), function (user) {
              var profile_img = _$1.isEmpty(user.data.profile_img_thumbnail) ? '/assets/catarse_bootstrap/user.jpg' : user.data.profile_img_thumbnail;
              return m$1('img.user-avatar[src=\'' + profile_img + '\']');
          })]), m$1('p.fontsize-smallest.friend-namepile.lineheight-tighter', [m$1('span.fontweight-semibold', _$1.map(ctrl.friendsSample(), function (user) {
              return user.data.name.split(' ')[0];
          }).join(friendsCount > 2 ? ', ' : ' e ')), friendsCount > 2 ? [' e ', m$1('span.fontweight-semibold', 'mais ' + (friendsCount - ctrl.friendsSample().length))] : '', friendsCount > 1 ? ' apoiaram' : ' apoiou'])]);
      }
  };

  var I18nScope$1 = _$1.partial(h.i18nScope, 'projects.card');
  var projectCard = {
      controller: function controller(args) {
          var project = args.project,
              progress = project.progress.toFixed(2),
              remainingTextObj = h.translatedTime(project.remaining_time),
              elapsedTextObj = h.translatedTime(project.elapsed_time),
              type = args.type || 'small';

          var css = function css() {
              var cssClasses = {
                  'small': {
                      wrapper: '.w-col.w-col-4',
                      innerWrapper: '.card-project.card.u-radius',
                      thumb: '.card-project-thumb',
                      descriptionWrapper: '',
                      description: '.card-project-description.alt',
                      title: '.fontweight-semibold.u-text-center-small-only.lineheight-tight.u-marginbottom-10.fontsize-base',
                      author: '.w-hidden-small.w-hidden-tiny.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.w-hidden-small.w-hidden-tiny.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden-small.w-hidden-tiny.card-project-author.altt'
                  },
                  'medium': {
                      wrapper: '.w-col.w-col-6',
                      innerWrapper: '.card-project.card.u-radius',
                      thumb: '.card-project-thumb.medium',
                      descriptionWrapper: '',
                      description: '.card-project-description.alt',
                      title: '.fontsize-large.fontweight-semibold.u-marginbottom-10',
                      author: '.w-hidden-small.w-hidden-tiny.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.w-hidden-small.w-hidden-tiny.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden-small.w-hidden-tiny.card-project-author.altt'
                  },
                  'big': {
                      wrapper: '.card.u-radius.card-project',
                      innerWrapper: '.w-row',
                      thumb: '.w-col.w-col-8.w-col-medium-6.card-project-thumb.big',
                      descriptionWrapper: '.w-col.w-col-4.w-col-medium-6',
                      description: '.card-project-description.big',
                      title: '.fontsize-large.fontweight-semibold.u-marginbottom-10',
                      author: '.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden'
                  }
              };

              return cssClasses[type];
          };

          var cardMeter = function cardMeter() {
              var failed = function failed() {
                  return project.state === 'failed' || project.state === 'waiting_funds' ? 'card-secondary' : '';
              };

              return '.card-project-meter.' + project.mode + '.' + project.state + '.' + progress + '.' + failed();
          };

          return {
              css: css,
              type: type,
              progress: progress,
              remainingTextObj: remainingTextObj,
              elapsedTextObj: elapsedTextObj,
              cardMeter: cardMeter
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1(ctrl.css().wrapper, [m$1(ctrl.css().innerWrapper, [m$1('a' + ctrl.css().thumb + '[href="/' + project.permalink + '"]', {
              onclick: projectVM.routeToProject(project, args.ref),
              style: {
                  'background-image': 'url(' + project.project_img + ')',
                  'display': 'block'
              }
          }), m$1(ctrl.css().descriptionWrapper, [m$1(ctrl.css().description, [m$1(ctrl.css().title, [m$1('a.link-hidden[href="/' + project.permalink + '"]', {
              onclick: projectVM.routeToProject(project, args.ref)
          }, project.project_name)]), m$1(ctrl.css().author, I18n$1.t('by', I18nScope$1()) + ' ' + project.owner_name), m$1(ctrl.css().headline, [m$1('a.link-hidden[href="/' + project.permalink + '"]', {
              onclick: projectVM.routeToProject(project, args.ref)
          }, project.headline)])]), m$1(ctrl.css().city, [m$1('.fontsize-smallest.fontcolor-secondary', [m$1('span.fa.fa-map-marker.fa-1', ' '), ' ' + (project.city_name ? project.city_name : '') + ', ' + (project.state_acronym ? project.state_acronym : '')])]), m$1(ctrl.cardMeter(), [_$1.contains(['successful', 'failed', 'waiting_funds'], project.state) ? m$1('div', project.state === 'successful' && ctrl.progress < 100 ? I18n$1.t('display_status.flex_successful', I18nScope$1()) : I18n$1.t('display_status.' + project.state, I18nScope$1())) : m$1('.meter', [m$1('.meter-fill', {
              style: {
                  width: (ctrl.progress > 100 ? 100 : ctrl.progress) + '%'
              }
          })])]), m$1('.card-project-stats', [m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4', [m$1('.fontsize-base.fontweight-semibold', Math.ceil(project.progress) + '%')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.u-text-center-small-only', [m$1('.fontsize-smaller.fontweight-semibold', 'R$ ' + h.formatNumber(project.pledged)), m$1('.fontsize-smallest.lineheight-tightest', 'Levantados')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.u-text-right', project.expires_at ? [m$1('.fontsize-smaller.fontweight-semibold', ctrl.remainingTextObj.total + ' ' + ctrl.remainingTextObj.unit), m$1('.fontsize-smallest.lineheight-tightest', ctrl.remainingTextObj.total > 1 ? 'Restantes' : 'Restante')] : [m$1('.fontsize-smallest.lineheight-tight', ['Iniciado há', m$1('br'), ctrl.elapsedTextObj.total + ' ' + ctrl.elapsedTextObj.unit])])])])]), args.showFriends && ctrl.type === 'big' ? m$1('.w-col.w-col-4.w-col-medium-6', [m$1.component(projectFriends, { project: project })]) : '']), args.showFriends && ctrl.type !== 'big' ? m$1.component(projectFriends, { project: project }) : '']);
      }
  };

  var projectRow = {
      view: function view(ctrl, args) {
          var collection = args.collection,
              title = args.title || collection.title,
              ref = args.ref,
              showFriends = args.showFriends,
              wrapper = args.wrapper || '.w-section.section.u-marginbottom-40';

          if (collection.loader() || collection.collection().length > 0) {
              return m$1(wrapper, [m$1('.w-container', [!_$1.isUndefined(collection.title) || !_$1.isUndefined(collection.hash) ? m$1('.w-row.u-marginbottom-30', [m$1(showFriends ? '.w-col.w-col-8.w-col-small-6.w-col-tiny-6' : '.w-col.w-col-10.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-large.lineheight-looser', title)]), m$1(showFriends ? '.w-col.w-col-4.w-col-small-6.w-col-tiny-6' : '.w-col.w-col-2.w-col-small-6.w-col-tiny-6', [m$1('.w-row', [showFriends ? m$1('.w-col.w-col-6', [m$1('a.btn.btn-no-border.btn-small.btn-terciary[href="/connect-facebook?ref=' + ref + '"]', 'Encontrar amigos')]) : '', m$1(showFriends ? '.w-col.w-col-6' : '.w-col.w-col-12', m$1('a.btn.btn-small.btn-terciary[href="/explore?ref=' + ref + '&filter=' + collection.hash + '"]', {
                  config: m$1.route
              }, 'Ver todos'))])])]) : '', collection.loader() ? h.loader() : m$1('.w-row', _$1.map(collection.collection(), function (project) {
                  return m$1.component(projectCard, {
                      project: project,
                      ref: ref,
                      showFriends: showFriends
                  });
              }))])]);
          } else {
              return m$1('div');
          }
      }
  };

  var landingQA = {
      controller: function controller(args) {
          return {
              showAnswer: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('.card.qa-card.u-marginbottom-20.u-radius.btn-terciary', [m$1('.fontsize-base', {
              onclick: function onclick() {
                  ctrl.showAnswer.toggle();
                  args.onclick && args.onclick();
              }
          }, args.question), ctrl.showAnswer() ? m$1('p.u-margintop-20.fontsize-small', m$1.trust(args.answer)) : '']);
      }
  };

  var Flex = {
      controller: function controller() {
          var stats = m$1.prop([]),
              projects = m$1.prop([]),
              l = m$1.prop(),
              sample3 = _.partial(_.sample, _, 3),
              builder = {
              customAction: 'http://fazum.catarse.me/obrigado-landing-catarse-flex'
          },
              addDisqus = function addDisqus(el, isInitialized) {
              if (!isInitialized) {
                  h.discuss('https://catarse.me/flex', 'flex_page');
              }
          },
              flexVM = postgrest$1.filtersVM({
              mode: 'eq',
              state: 'eq',
              recommended: 'eq'
          }),
              statsLoader = postgrest$1.loaderWithToken(models.statistic.getRowOptions());

          flexVM.mode('flex').state('online').recommended(true);

          var projectsLoader = postgrest$1.loader(models.project.getPageOptions(flexVM.parameters()));

          statsLoader.load().then(stats);

          projectsLoader.load().then(_.compose(projects, sample3));

          return {
              addDisqus: addDisqus,
              builder: builder,
              statsLoader: statsLoader,
              stats: stats,
              projectsLoader: projectsLoader,
              projects: {
                  loader: projectsLoader,
                  collection: projects
              }
          };
      },
      view: function view(ctrl, args) {
          var stats = _.first(ctrl.stats());

          return [m$1('.w-section.hero-full.hero-zelo', [m$1('.w-container.u-text-center', [m$1('img.logo-flex-home[src=\'/assets/logo-flex.png\'][width=\'359\']'), m$1('.w-row', [m$1('.w-col.fontsize-large.u-marginbottom-60.w-col-push-2.w-col-8', 'Vamos construir uma nova modalidade de crowdfunding! Cadastre seu email e saiba como inscrever o seu projeto no flex!')]), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1.component(landingSignup, {
              builder: ctrl.builder
          }), m$1('.w-col.w-col-2')])])]), [m$1('.section', [m$1('.w-container', [m$1('.fontsize-largest.u-margintop-40.u-text-center', 'Pra quem será?'), m$1('.fontsize-base.u-text-center.u-marginbottom-60', 'Iniciaremos a fase de testes com categorias de projetos específicas'), m$1('div', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-6', [m$1('.u-text-center.u-marginbottom-20', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e393a01b66e250aca67cb_icon-zelo-com.png\'][width=\'210\']'), m$1('.fontsize-largest.lineheight-loose', 'Causas')]), m$1('p.fontsize-base', 'Flexibilidade para causas de impacto! Estaremos abertos a campanhas de organizações ou pessoas físicas para arrecadação de recursos para causas pessoais, projetos assistenciais, saúde, ajudas humanitárias, proteção aos animais, empreendedorismo socioambiental, ativismo ou qualquer coisa que una as pessoas para fazer o bem.')]), m$1('.w-col.w-col-6', [m$1('.u-text-center.u-marginbottom-20', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e3929a0daea230a5f12cd_icon-zelo-pessoal.png\'][width=\'210\']'), m$1('.fontsize-largest.lineheight-loose', 'Vaquinhas')]), m$1('p.fontsize-base', 'Campanhas simples que precisam de flexibilidade para arrecadar dinheiro com pessoas próximas. Estaremos abertos a uma variedade de campanhas pessoais que podem ir desde cobrir custos de estudos a ajudar quem precisa de tratamento médico. De juntar a grana para fazer aquela festa a comprar presentes para alguém com a ajuda da galera. ')])])])])]), m$1('.w-section.section.bg-greenlime.fontcolor-negative', [m$1('.w-container', [m$1('.fontsize-largest.u-margintop-40.u-marginbottom-60.u-text-center', 'Como funcionará?'), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39c578b284493e2a428a_zelo-money.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Fique com quanto arrecadar'), m$1('p.u-text-center.fontsize-base', 'O flex é para impulsionar campanhas onde todo dinheiro é bem vindo! Você fica com tudo que conseguir arrecadar.')]), m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39d37c013d4a3ee687d2_icon-reward.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Não precisa de recompensas'), m$1('p.u-text-center.fontsize-base', 'No flex oferecer recompensas é opcional. Você escolhe se oferecê-las faz sentido para o seu projeto e campanha.')])]), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39fb01b66e250aca67e3_icon-curad.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Você mesmo publica seu projeto'), m$1('p.u-text-center.fontsize-base', 'Todos os projetos inscritos no flex entram no ar. Agilidade e facilidade para você captar recursos através da internet.')]), m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39e77c013d4a3ee687d4_icon-time.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Encerre a campanha quando quiser'), m$1('p.u-text-center.fontsize-base', 'Não há limite de tempo de captação. Você escolhe  quando encerrar sua campanha e receber os valores arrecadados.')])])])]), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-editable.fontsize-larger.u-margintop-40.u-margin-bottom-40.u-text-center', 'Conheça alguns dos primeiros projetos flex'), ctrl.projectsLoader() ? h.loader() : m$1.component(projectRow, { collection: ctrl.projects, ref: 'ctrse_flex', wrapper: '.w-row.u-margintop-40' })])]), m$1('.w-section.divider'), m$1('.w-section.section', [m$1('.w-container', [m$1('.fontsize-larger.u-text-center.u-marginbottom-60.u-margintop-40', 'Dúvidas'), m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-6', [m$1.component(landingQA, {
              question: 'Quais são as taxas da modalidade flexível? ',
              answer: 'Como no Catarse, enviar um projeto não custa nada! A taxa cobrada no serviço Catarse flex é de 13% sobre o valor arrecadado.'
          }), m$1.component(landingQA, {
              question: 'De onde vem o dinheiro do meu projeto?',
              answer: 'Família, amigos, fãs e membros de comunidades que você faz parte são seus maiores colaboradores. São eles que irão divulgar sua campanha para as pessoas que eles conhecem, e assim o círculo de apoiadores vai aumentando e a sua campanha ganha força.'
          }), m$1.component(landingQA, {
              question: 'Qual a diferença entre o flexível e o "tudo ou nada"?',
              answer: 'Atualmente o Catarse utiliza apenas o modelo "tudo ou nada", onde você só fica com o dinheiro se bater a meta de arrecadação dentro do prazo da campanha. O modelo flexível é diferente pois permite que o realizador fique com o que arrecadar, independente de atingir ou não a meta do projeto no prazo da campanha. Não haverá limite de tempo para as campanhas. Nosso sistema flexível será algo novo em relação aos modelos que existem atualmente no mercado.'
          })]), m$1('.w-col.w-col-6', [m$1.component(landingQA, {
              question: 'Posso inscrever projetos para a modalidade flexível já?',
              answer: 'Sim. Cadastre seu email e saiba como inscrever o seu projeto no flex!'
          }), m$1.component(landingQA, {
              question: 'Por quê vocês querem fazer o Catarse flex?',
              answer: 'Acreditamos que o ambiente do crowdfunding brasileiro ainda tem espaço para muitas ações, testes e experimentações para entender de fato o que as pessoas precisam. Sonhamos com tornar o financiamento coletivo um hábito no Brasil. O Catarse flex é mais um passo nessa direção.'
          }), m$1.component(landingQA, {
              question: 'Quando vocês irão lançar o Catarse flex?',
              answer: 'Ainda não sabemos quando abriremos o flex para o público em geral, mas você pode cadastrar seu email nessa página e receber um material especial de como inscrever seu projeto.'
          })])])])]), m$1('.w-section.section-large.u-text-center.bg-purple', [m$1('.w-container.fontcolor-negative', [m$1('.fontsize-largest', 'Inscreva seu projeto!'), m$1('.fontsize-base.u-marginbottom-60', 'Cadastre seu email e saiba como inscrever o seu projeto no flex!'), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1.component(landingSignup, {
              builder: ctrl.builder
          }), m$1('.w-col.w-col-2')])])]), m$1('.w-section.section-one-column.bg-catarse-zelo.section-large[style="min-height: 50vh;"]', [m$1('.w-container.u-text-center', [m$1('.w-editable.u-marginbottom-40.fontsize-larger.lineheight-tight.fontcolor-negative', 'O flex é um experimento e iniciativa do Catarse, maior plataforma de crowdfunding do Brasil.'), m$1('.w-row.u-text-center', ctrl.statsLoader() ? h.loader() : [m$1('.w-col.w-col-4', [m$1('.fontsize-jumbo.text-success.lineheight-loose', h.formatNumber(stats.total_contributors, 0, 3)), m$1('p.start-stats.fontsize-base.fontcolor-negative', 'Pessoas ja apoiaram pelo menos 01 projeto no Catarse')]), m$1('.w-col.w-col-4', [m$1('.fontsize-jumbo.text-success.lineheight-loose', h.formatNumber(stats.total_projects_success, 0, 3)), m$1('p.start-stats.fontsize-base.fontcolor-negative', 'Projetos ja foram financiados no Catarse')]), m$1('.w-col.w-col-4', [m$1('.fontsize-jumbo.text-success.lineheight-loose', stats.total_contributed.toString().slice(0, 2) + ' milhões'), m$1('p.start-stats.fontsize-base.fontcolor-negative', 'Foram investidos em ideias publicadas no Catarse')])])])]), m$1('.w-section.section.bg-blue-one.fontcolor-negative', [m$1('.w-container', [m$1('.fontsize-large.u-text-center.u-marginbottom-20', 'Recomende o Catarse flex para amigos! '), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.w-row', [m$1('.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle', [m$1('div', [m$1('img.icon-share-mobile[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/53a3f66e05eb6144171d8edb_facebook-xxl.png\']'), m$1('a.w-button.btn.btn-large.btn-fb[href="http://www.facebook.com/sharer/sharer.php?u=https://www.catarse.me/flex?ref=facebook&title=' + encodeURIComponent('Conheça o novo Catarse Flex!') + '"][target="_blank"]', 'Compartilhar')])]), m$1('.w-col.w-col-6.w-col-small-6.w-col-tiny-6', [m$1('div', [m$1('img.icon-share-mobile[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/53a3f65105eb6144171d8eda_twitter-256.png\']'), m$1('a.w-button.btn.btn-large.btn-tweet[href="http://twitter.com/?status=' + encodeURIComponent('Vamos construir uma nova modalidade de crowdfunding para o Catarse! Junte-se a nós, inscreva seu email!') + 'https://www.catarse.me/flex?ref=twitter"][target="_blank"]', 'Tuitar')])])])]), m$1('.w-col.w-col-2')])])]), m$1('.w-section.section-large.bg-greenlime', [m$1('.w-container', [m$1('#participe-do-debate.u-text-center', { config: h.toAnchor() }, [m$1('h1.fontsize-largest.fontcolor-negative', 'Construa o flex conosco'), m$1('.fontsize-base.u-marginbottom-60.fontcolor-negative', 'Inicie uma conversa, pergunte, comente, critique e faça sugestões!')]), m$1('#disqus_thread.card.u-radius[style="min-height: 50vh;"]', {
              config: ctrl.addDisqus
          })])])]];
      }
  };

  var tooltip = {
      controller: function controller(args) {
          var parentHeight = m$1.prop(0),
              width = m$1.prop(args.width || 280),
              top = m$1.prop(0),
              left = m$1.prop(0),
              opacity = m$1.prop(0),
              parentOffset = m$1.prop({ top: 0, left: 0 }),
              tooltip = h.toggleProp(0, 1),
              toggle = function toggle() {
              tooltip.toggle();
              m$1.redraw();
          };

          var setParentPosition = function setParentPosition(el, isInitialized) {
              if (!isInitialized) {
                  parentOffset(h.cumulativeOffset(el));
              }
          },
              setPosition = function setPosition(el, isInitialized) {
              if (!isInitialized) {
                  var elTop = el.offsetHeight + el.offsetParent.offsetHeight;
                  var style = window.getComputedStyle(el);

                  if (window.innerWidth < el.offsetWidth + 2 * parseFloat(style.paddingLeft) + 30) {
                      //30 here is a safe margin
                      el.style.width = window.innerWidth - 30; //Adding the safe margin
                      left(-parentOffset().left + 15); //positioning center of window, considering margin
                  } else if (parentOffset().left + el.offsetWidth / 2 <= window.innerWidth && parentOffset().left - el.offsetWidth / 2 >= 0) {
                          left(-el.offsetWidth / 2); //Positioning to the center
                      } else if (parentOffset().left + el.offsetWidth / 2 > window.innerWidth) {
                              left(-el.offsetWidth + el.offsetParent.offsetWidth); //Positioning to the left
                          } else if (parentOffset().left - el.offsetWidth / 2 < 0) {
                                  left(-el.offsetParent.offsetWidth); //Positioning to the right
                              }
                  top(-elTop); //Setting top position
              }
          };

          return {
              width: width,
              top: top,
              left: left,
              opacity: opacity,
              tooltip: tooltip,
              toggle: toggle,
              setPosition: setPosition,
              setParentPosition: setParentPosition
          };
      },
      view: function view(ctrl, args) {
          var width = ctrl.width();
          return m$1(args.el, {
              onclick: ctrl.toggle,
              config: ctrl.setParentPosition,
              style: { cursor: 'pointer' }
          }, ctrl.tooltip() ? [m$1('.tooltip.dark[style="width: ' + width + 'px; top: ' + ctrl.top() + 'px; left: ' + ctrl.left() + 'px;"]', {
              config: ctrl.setPosition
          }, [m$1('.fontsize-smallest', args.text)])] : '');
      }
  };

  var I18nScope$3 = _$1.partial(h.i18nScope, 'projects.dashboard_nav');
  var linksScope = _$1.partial(h.i18nScope, 'projects.dashboard_nav_links');

  var projectDashboardMenu = {
      controller: function controller(args) {
          var body = document.getElementsByTagName('body')[0],
              editLinksToggle = h.toggleProp(true, false),
              showPublish = h.toggleProp(true, false),
              bodyToggleForNav = h.toggleProp('body-project open', 'body-project closed');

          var projectThumb = function projectThumb(project) {
              if (_$1.isEmpty(project.large_image)) {
                  if (_$1.isEmpty(project.thumb_image)) {
                      return '/assets/thumb-project.png';
                  } else {
                      return project.thumb_image;
                  }
              } else {
                  return project.large_image;
              }
          };

          if (args.project().is_published) {
              editLinksToggle.toggle(false);
          }

          if (args.hidePublish) {
              showPublish.toggle(false);
          }

          return {
              body: body,
              editLinksToggle: editLinksToggle,
              showPublish: showPublish,
              bodyToggleForNav: bodyToggleForNav,
              projectThumb: projectThumb
          };
      },
      view: function view(ctrl, args) {
          var project = args.project(),
              projectRoute = '/projects/' + project.project_id,
              editRoute = projectRoute + '/edit',
              editLinkClass = 'dashboard-nav-link-left ' + (project.is_published ? 'indent' : '');
          var optionalOpt = m$1('span.fontsize-smallest.fontcolor-secondary', ' (opcional)');

          ctrl.body.className = ctrl.bodyToggleForNav();

          return m$1('#project-nav', [m$1('.project-nav-wrapper', [m$1('nav.w-section.dashboard-nav.side', [m$1('a#dashboard_preview_link.w-inline-block.dashboard-project-name[href="' + (project.is_published ? '/' + project.permalink : editRoute + '#preview') + '"]', [m$1('img.thumb-project-dashboard[src="' + (project ? ctrl.projectThumb(project) : '/assets/thumb-project.png') + '"][width="114"]'), m$1('.fontcolor-negative.lineheight-tight.fontsize-small', project.name), m$1('img.u-margintop-10[src="/assets/catarse_bootstrap/badge-' + project.mode + '-h.png"][width=80]')]), m$1('#info-links', [m$1('a#dashboard_home_link[class="dashboard-nav-link-left ' + (h.locationActionMatch('insights') ? 'selected' : '') + '"][href="' + projectRoute + '/insights"]', [m$1('span.fa.fa-bar-chart.fa-lg.fa-fw'), I18n$1.t('start_tab', I18nScope$3())]), project.is_published ? [m$1('a#dashboard_reports_link.dashboard-nav-link-left[href="' + projectRoute + '/contributions_report"]', [m$1('span.fa.fa.fa-table.fa-lg.fa-fw'), I18n$1.t('reports_tab', I18nScope$3())]), m$1('a#dashboard_reports_link.dashboard-nav-link-left.u-marginbottom-30[href="' + editRoute + '#posts' + '"]', [m$1('span.fa.fa-bullhorn.fa-fw.fa-lg'), I18n$1.t('posts_tab', I18nScope$3()), m$1('span.badge', project.posts_count)])] : '']), m$1('.edit-project-div', [!project.is_published ? '' : m$1('button#toggle-edit-menu.dashboard-nav-link-left', {
              onclick: ctrl.editLinksToggle.toggle
          }, [m$1('span.fa.fa-pencil.fa-fw.fa-lg'), I18n$1.t('edit_project', I18nScope$3())]), ctrl.editLinksToggle() ? m$1('#edit-menu-items', [m$1('#dashboard-links', [!project.is_published || project.is_admin_role ? [m$1('a#basics_link[class="' + editLinkClass + '"][href="' + editRoute + '#basics' + '"]', I18n$1.t(project.mode + '.basics_tab', linksScope())), m$1('a#goal_link[class="' + editLinkClass + '"][href="' + editRoute + '#goal' + '"]', I18n$1.t(project.mode + '.goal_tab', linksScope()))] : '', m$1('a#description_link[class="' + editLinkClass + '"][href="' + editRoute + '#description' + '"]', I18n$1.t(project.mode + '.description_tab', linksScope())), m$1('a#video_link[class="' + editLinkClass + '"][href="' + editRoute + '#video' + '"]', ['Vídeo', m$1('span.fontsize-smallest.fontcolor-secondary', ' (opcional)')]), m$1('a#budget_link[class="' + editLinkClass + '"][href="' + editRoute + '#budget' + '"]', I18n$1.t(project.mode + '.budget_tab', linksScope())), m$1('a#card_link[class="' + editLinkClass + '"][href="' + editRoute + '#card' + '"]', I18n$1.t(project.mode + '.card_tab', linksScope())), m$1('a#dashboard_reward_link[class="' + editLinkClass + '"][href="' + editRoute + '#reward' + '"]', ['Recompensas', optionalOpt]), m$1('a#dashboard_user_about_link[class="' + editLinkClass + '"][href="' + editRoute + '#user_about' + '"]', I18n$1.t(project.mode + '.about_you_tab', linksScope())), project.is_published || project.state === 'draft' || project.is_admin_role ? [m$1('a#dashboard_user_settings_link[class="' + editLinkClass + '"][href="' + editRoute + '#user_settings' + '"]', I18n$1.t(project.mode + '.account_tab', linksScope()))] : '', !project.is_published ? [m$1('a#dashboard_preview_link[class="' + editLinkClass + '"][href="' + editRoute + '#preview' + '"]', [m$1('span.fa.fa-fw.fa-eye.fa-lg'), I18n$1.t(project.mode + '.preview_tab', linksScope())])] : ''])]) : '', !project.is_published && ctrl.showPublish() ? [m$1('.btn-send-draft-fixed', project.mode === 'aon' ? [project.state === 'draft' ? m$1('a.btn.btn-medium[href="/projects/' + project.project_id + '/validate_publish"]', [I18n$1.t('publish', I18nScope$3()), m$1.trust('&nbsp;&nbsp;'), m$1('span.fa.fa-chevron-right')]) : ''] : [project.state === 'draft' ? m$1('a.btn.btn-medium[href="/flexible_projects/' + project.project_id + '/validate_publish"]', [I18n$1.t('publish', I18nScope$3()), m$1.trust('&nbsp;&nbsp;'), m$1('span.fa.fa-chevron-right')]) : ''])] : [project.mode === 'flex' && project.is_published ? [m$1('.btn-send-draft-fixed', _$1.isNull(project.expires_at) ? m$1('a.w-button.btn.btn-medium.btn-secondary-dark[href="/projects/' + project.project_id + '/edit#announce_expiration"]', I18n$1.t('announce_expiration', I18nScope$3())) : '')] : '']])])]), m$1('a.btn-dashboard href="javascript:void(0);"', {
              onclick: ctrl.bodyToggleForNav.toggle
          }, [m$1('span.fa.fa-bars.fa-lg')])]);
      }
  };

  var modalBox = {
      view: function view(ctrl, args) {
          return m$1('.modal-backdrop', [m$1('.modal-dialog-outer', [m$1('.modal-dialog-inner.modal-dialog-small', [m$1('a.w-inline-block.modal-close.fa.fa-close.fa-lg[href="javascript:void(0);"]', {
              onclick: args.displayModal.toggle
          }), m$1.component(args.content[0], args.content[1])])])]);
      }
  };

  var adminProjectDetailsCard = {
      controller: function controller(args) {
          var project = args.resource,
              isFinalLap = function isFinalLap() {
              // @TODO: use 8 days because timezone on js
              return !_.isNull(project.expires_at) && moment$1().add(8, 'days') >= moment$1(project.zone_expires_at);
          };
          return {
              project: project,
              remainingTextObj: h.translatedTime(project.remaining_time),
              elapsedTextObj: h.translatedTime(project.elapsed_time),
              isFinalLap: isFinalLap
          };
      },
      view: function view(ctrl) {
          var project = ctrl.project,
              progress = project.progress.toFixed(2),
              statusTextObj = h.projectStateTextClass(project.state),
              remainingTextObj = ctrl.remainingTextObj,
              elapsedTextObj = ctrl.elapsedTextObj;

          return m$1('.project-details-card.card.u-radius.card-terciary.u-marginbottom-20', [m$1('div', [m$1('.fontsize-small.fontweight-semibold', [m$1('span.fontcolor-secondary', 'Status:'), ' ', m$1('span', {
              class: statusTextObj.cssClass
          }, ctrl.isFinalLap() && project.open_for_contributions ? 'RETA FINAL' : statusTextObj.text), ' ']), project.is_published ? [m$1('.meter.u-margintop-20.u-marginbottom-10', [m$1('.meter-fill', {
              style: {
                  width: (progress > 100 ? 100 : progress) + '%'
              }
          })]), m$1('.w-row', [m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'financiado'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', progress + '%')]), m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'levantados'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', ['R$ ' + h.formatNumber(project.pledged, 2)])]), m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'apoios'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', project.total_contributions)]), m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [_.isNull(project.expires_at) ? [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'iniciado há'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', elapsedTextObj.total + ' ' + elapsedTextObj.unit)] : [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'restam'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', remainingTextObj.total + ' ' + remainingTextObj.unit)]])])] : ''])]);
      }
  };

  var onlineSuccessModalContent = {
      view: function view(ctrl, args) {
          return m$1('.modal-dialog-content.u-text-center', [m$1('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m$1('p.fontsize-larger.lineheight-tight', 'Sua campanha está no ar!!! Parabéns por esse primeiro grande passo. Boa sorte nessa jornada ;)')]);
      }
  };

  var projectDataStats = {
      view: function view(ctrl, args) {
          var project = args.project(),
              progress = project.progress.toFixed(2),
              statusTextObj = h.projectStateTextClass(project.state),
              remainingTextObj = h.translatedTime(project.remaining_time),
              elapsedTextObj = h.translatedTime(project.elapsed_time);

          return m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-3.u-text-center-small-only', [m$1('.fontsize-small.fontweight-semibold.u-marginbottom-20', [m$1('span.fontcolor-secondary', 'Status: '), m$1('span', { class: statusTextObj.cssClass }, statusTextObj.text)])]), m$1('.w-col.w-col-9', [m$1('.w-row.u-text-center', [m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', progress + '%'), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small.u-marginbottom-10', 'financiado')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', 'R$ ' + h.formatNumber(project.pledged, 2)), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small.u-marginbottom-10', 'levantados')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', project.total_contributions), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'apoios')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [_$1.isNull(project.expires_at) ? [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', elapsedTextObj.total + ' ' + elapsedTextObj.unit), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'iniciado há')] : [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', '' + remainingTextObj.total), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', remainingTextObj.unit + ' ' + (remainingTextObj.total > 0 ? 'restantes' : 'restante'))]])])])]);
      }
  };

  var deleteProjectModalContent = {
    controller: function controller(args) {
      var l = m$1.prop(false),
          deleteSuccess = m$1.prop(false),
          confirmed = m$1.prop(true),
          check = m$1.prop('');

      var deleteProject = function deleteProject() {
        if (check() === 'deletar-rascunho') {
          var loaderOpts = models.deleteProject.postOptions({
            _project_id: args.project.project_id
          });
          l = postgrest$1.loaderWithToken(loaderOpts);
          l.load().then(deleteSuccess(true));
        } else {
          confirmed(false);
        }
        return false;
      };

      return {
        deleteProject: deleteProject,
        confirmed: confirmed,
        deleteSuccess: deleteSuccess,
        check: check
      };
    },
    view: function view(ctrl, args) {
      var project = args.project;
      return m$1('div', ctrl.deleteSuccess() ? '' : m$1('.modal-dialog-header', m$1('.fontsize-large.u-text-center', ['Confirmar ', m$1('span.fa.fa-trash', '')])), m$1('form.modal-dialog-content', { onsubmit: ctrl.deleteProject }, ctrl.deleteSuccess() ? [m$1('.fontsize-base.u-margintop-30', 'Projeto deletado com sucesso. Clique no link abaixo para voltar a página inicial.'), m$1('a.btn.btn-inactive.btn-large.u-margintop-30[href=\'/pt/users/' + h.getUser().user_id + '/edit#projects\']', 'Voltar')] : [m$1('.fontsize-base.u-marginbottom-60', ['O projeto será deletado permanentemente e todos os dados que você preencheu na edição do rascunho não poderão ser recuperados.']), m$1('.fontsize-base.u-marginbottom-10', ['Confirme escrevendo ', 'no campo abaixo ', m$1('span.fontweight-semibold.text-error', 'deletar-rascunho')]), m$1('.w-form', [m$1('div', m$1('input.positive.text-field.u-marginbottom-40.w-input[maxlength=\'256\'][type=\'text\']', { class: ctrl.confirmed() ? false : 'error', placeholder: 'deletar-rascunho', onchange: m$1.withAttr('value', ctrl.check) }))]), m$1('div', m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.u-text-center.w-col.w-col-6', [m$1('input.btn.btn-inactive.btn-large.u-marginbottom-20[type=\'submit\'][value=\'Deletar para sempre\']'), m$1('a.fontsize-small.link-hidden-light[href=\'#\']', { onclick: args.displayDeleteModal.toggle }, 'Cancelar')]), m$1('.w-col.w-col-3')]))]));
    }
  };

  var projectDeleteButton = {
      controller: function controller(args) {
          var displayDeleteModal = h.toggleProp(false, true);
          return {
              displayDeleteModal: displayDeleteModal
          };
      },
      view: function view(ctrl, args) {
          return m$1('div', [ctrl.displayDeleteModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayDeleteModal,
              content: [deleteProjectModalContent, { displayDeleteModal: ctrl.displayDeleteModal, project: args.project }]
          }) : '', m$1('.before-footer', m$1('.w-container', m$1('a.btn.btn-inline.btn-no-border.btn-small.btn-terciary.u-marginbottom-20.u-right.w-button[href=\'javascript:void(0);\']', { onclick: ctrl.displayDeleteModal.toggle, style: { 'transition': 'all 0.5s ease 0s' } }, [m$1.trust('&nbsp;'), 'Deletar projeto ', m$1('span.fa.fa-trash', '')])))]);
      }
  };

  var cancelProjectModalContent = {
      controller: function controller(args) {
          var l = m$1.prop(false),
              checkError = m$1.prop(false),
              check = m$1.prop('');

          var showNextModal = function showNextModal() {
              if (check() === 'cancelar-projeto') {
                  args.displayModal.toggle();
                  document.getElementById('send-message').style.display = 'block';
              } else {
                  checkError(true);
              }
              return false;
          };

          return {
              showNextModal: showNextModal,
              checkError: checkError,
              check: check
          };
      },
      view: function view(ctrl, args) {
          return m$1('form.cancel-project-modal.modal-dialog-content', { onsubmit: ctrl.showNextModal }, [m$1('.fontsize-small.u-marginbottom-20', ['Após o cancelamento, sua campanha constará na plataforma como "não financiada" e os seus apoiadores serão imediatamente reembolsados. ', m$1('span.fontweight-semibold', 'Essa ação não poderá ser desfeita!'), m$1('br'), m$1('span.fontweight-semibold')]), m$1('.fontsize-small.u-marginbottom-10', ['Se você tem certeza que deseja cancelar seu projeto, confirme escrevendo ', m$1('span.fontweight-semibold.text-error', 'cancelar-projeto '), 'no campo abaixo. Em seguida te pediremos para escrever uma mensagem aos seus apoiadores e seu projeto será então cancelado.', m$1('span.fontweight-semibold.text-error')]), m$1('.w-form', [m$1('input.positive.text-field.u-marginbottom-40.w-input[maxlength=\'256\'][type=\'text\']', { class: !ctrl.checkError() ? false : 'error', placeholder: 'cancelar-projeto', onchange: m$1.withAttr('value', ctrl.check) })]), m$1('div', m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.u-text-center.w-col.w-col-6', [m$1('input.btn.btn-inactive.btn-large.u-marginbottom-20[type=\'submit\'][value=\'Próximo passo >\']'), m$1('a.fontsize-small.link-hidden-light[href=\'#\']', { onclick: args.displayModal.toggle }, 'Cancelar')]), m$1('.w-col.w-col-3')]))]);
      }
  };

  var projectCancelButton = {
      controller: function controller(args) {
          var displayCancelModal = h.toggleProp(false, true);
          return {
              displayCancelModal: displayCancelModal
          };
      },
      view: function view(ctrl, args) {
          return m$1('div', [ctrl.displayCancelModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayCancelModal,
              content: [cancelProjectModalContent, { displayModal: ctrl.displayCancelModal }]
          }) : '', m$1('.w-row.before-footer', m$1('.w-col.w-col-12', m$1('.w-container', m$1('button.btn.btn-cancel.btn-inline.btn-no-border.btn-small.btn-terciary.u-marginbottom-20.u-right.w-button', { onclick: ctrl.displayCancelModal.toggle, style: { 'transition': 'all 0.5s ease 0s' } }, [m$1('span.fa.fa-times-circle', ''), m$1.trust('&nbsp;'), 'Cancelar projeto']))))]);
      }
  };

  var projectDataChart = {
      controller: function controller(args) {
          var resource = _$1.first(args.collection()),
              source = !_$1.isUndefined(resource) ? resource.source : [],
              mountDataset = function mountDataset() {
              return [{
                  fillColor: 'rgba(126,194,69,0.2)',
                  strokeColor: 'rgba(126,194,69,1)',
                  pointColor: 'rgba(126,194,69,1)',
                  pointStrokeColor: '#fff',
                  pointHighlightFill: '#fff',
                  pointHighlightStroke: 'rgba(220,220,220,1)',
                  data: _$1.map(source, function (item) {
                      return item[args.dataKey];
                  })
              }];
          },
              renderChart = function renderChart(element, isInitialized) {
              if (!isInitialized) {
                  var ctx = element.getContext('2d');

                  new Chart(ctx).Line({
                      labels: _$1.map(source, function (item) {
                          return args.xAxis(item);
                      }),
                      datasets: mountDataset()
                  });
              }
          };

          return {
              renderChart: renderChart,
              source: source
          };
      },
      view: function view(ctrl, args) {
          return m$1('.card.u-radius.medium.u-marginbottom-30', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', args.label), m$1('.w-row', [m$1('.w-col.w-col-12.overflow-auto', [!_$1.isEmpty(ctrl.source) ? m$1('canvas[id="chart"][width="860"][height="300"]', {
              config: ctrl.renderChart
          }) : m$1('.w-col.w-col-8.w-col-push-2', m$1('p.fontsize-base', args.emptyState))])])]);
      }
  };

  var projectDataTable = {
      controller: function controller(args) {
          var table = m$1.prop(args.table),
              sortIndex = m$1.prop(-1);

          var comparator = function comparator(a, b) {
              var idx = sortIndex(),

              //Check if a custom comparator is used => Read component description
              x = _$1.isArray(a[idx]) && a[idx].length > 1 ? a[idx][0] : a[idx],
                  y = _$1.isArray(b[idx]) && b[idx].length > 1 ? b[idx][0] : b[idx];

              if (x < y) {
                  return -1;
              }
              if (y < x) {
                  return 1;
              }
              return 0;
          };

          var sortTable = function sortTable(idx) {
              var header = _$1.first(table()),
                  body = void 0;
              if (sortIndex() === idx) {
                  body = _$1.rest(table()).reverse();
              } else {
                  sortIndex(idx);
                  body = _$1.rest(table()).sort(comparator);
              }

              table(_$1.union([header], body));
          };

          sortTable(Math.abs(args.defaultSortIndex) || 0);

          if (args.defaultSortIndex < 0) {
              sortTable(Math.abs(args.defaultSortIndex) || 0);
          }

          return {
              table: table,
              sortTable: sortTable
          };
      },
      view: function view(ctrl, args) {
          var header = _$1.first(ctrl.table()),
              body = _$1.rest(ctrl.table());
          return m$1('.table-outer.u-marginbottom-60', [m$1('.w-row.table-row.fontweight-semibold.fontsize-smaller.header', _$1.map(header, function (heading, idx) {
              var sort = function sort() {
                  return ctrl.sortTable(idx);
              };
              return m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.table-col', [m$1('a.link-hidden[href="javascript:void(0);"]', {
                  onclick: sort
              }, [heading + ' ', m$1('span.fa.fa-sort')])]);
          })), m$1('.table-inner.fontsize-small', _$1.map(body, function (rowData) {
              return m$1('.w-row.table-row', _$1.map(rowData, function (row) {
                  //Check if a custom comparator is used => Read component description
                  row = _$1.isArray(row) && row.length > 1 ? row[1] : row;
                  return m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.table-col', [m$1('div', row)]);
              }));
          }))]);
      }
  };

  var projectReminderCount = {
      view: function view(ctrl, args) {
          var project = args.resource;
          return m$1('#project-reminder-count.card.u-radius.u-text-center.medium.u-marginbottom-80', [m$1('.fontsize-large.fontweight-semibold', 'Total de pessoas que clicaram no botão Lembrar-me'), m$1('.fontsize-smaller.u-marginbottom-30', 'Um lembrete por email é enviado 48 horas antes do término da sua campanha'), m$1('.fontsize-jumbo', project.reminder_count)]);
      }
  };

  var dashboardInfo = {
      controller: function controller(args) {
          var toRedraw = args.dataToRedraw || {},
              listenToReplace = function listenToReplace(element, isInitialized, context) {

              if (isInitialized) return;

              _$1.map(element.children, function (item) {
                  var toR = toRedraw[item.getAttribute('id')];

                  if (toR) {
                      item[toR.action] = toR.actionSource;
                  }
              });
          };

          return {
              listenToReplace: listenToReplace
          };
      },
      view: function view(ctrl, args) {
          var content = args.content;

          return m$1('.w-container', [m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6.w-col-push-3', [m$1('.u-text-center', [m$1('img.u-marginbottom-20', { src: content.icon, width: 94 }), m$1('.fontsize-large.fontweight-semibold.u-marginbottom-20', content.title), m$1('.fontsize-base.u-marginbottom-30', { config: ctrl.listenToReplace }, m$1.trust(content.text)), content.cta ? m$1('a.btn.btn-large.btn-inline', { href: content.href, onclick: args.nextStage }, content.cta) : ''])])])]);
      }
  };

  var I18nScope$6 = _$1.partial(h.i18nScope, 'projects.successful_onboard.confirm_account.refuse');

  var projectSuccessfulOnboardConfirmAccountError = {
      controller: function controller(args) {
          var errorReasonM = m$1.prop(''),
              error = m$1.prop(false);

          var addErrorReason = function addErrorReason() {
              if (errorReasonM().trim() === '') {
                  return error(true);
              } else {
                  return args.addErrorReason(errorReasonM).call();
              }
          };

          return {
              addErrorReason: addErrorReason,
              errorReasonM: errorReasonM,
              error: error
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-row.bank-transfer-answer', [m$1('.w-col.w-col-6.w-col-push-3', [m$1('.w-form.bank-transfer-problem.card.u-radius', [m$1('form#successful-onboard-error', [m$1('a.w-inline-block.u-right.btn.btn-terciary.btn-no-border.btn-inline.fa.fa-close', { href: '#confirm_account', onclick: args.changeToAction('start') }), m$1('label.field-label.fontweight-semibold.u-marginbottom-20', I18n$1.t('title', I18nScope$6())), m$1('textarea.w-input.text-field', {
              placeholder: I18n$1.t('placeholder', I18nScope$6()),
              class: ctrl.error() ? 'error' : '',
              onfocus: function onfocus() {
                  return ctrl.error(false);
              },
              onchange: m$1.withAttr('value', ctrl.errorReasonM)
          }), ctrl.error() ? m$1('.w-row', [m$1('.w-col.w-col-6.w-col-push-3.u-text-center', [m$1('span.fontsize-smallest.text-error', 'Campo Obrigatório')])]) : '', m$1('.w-row', [m$1('.w-col.w-col-4.w-col-push-4', [m$1('a.w-button.btn.btn-medium', {
              href: '#confirm_account_refuse',
              onclick: ctrl.addErrorReason
          }, I18n$1.t('cta', I18nScope$6()))])])])])])]);
      }
  };

  var I18nScope$7 = _$1.partial(h.i18nScope, 'projects.successful_onboard.confirm_account');

  var projectSuccessfulOnboardConfirmAccountAccept = {
      view: function view(ctrl, args) {
          return m$1('.w-row.bank-transfer-answer', [m$1('.w-col.w-col-6.w-col-push-3', [m$1('.w-form.bank-transfer-confirm.card.u-radius', [m$1('form#successful-onboard-form', [m$1('a.w-inline-block.u-right.btn.btn-terciary.btn-no-border.btn-inline.fa.fa-close', { href: '#confirm_account', onclick: args.changeToAction('start') }), m$1('label.field-label.fontweight-semibold.u-marginbottom-20', I18n$1.t('accept.title', I18nScope$7())), m$1('.fontsize-smaller.u-marginbottom-30', I18n$1.t('accept.info', I18nScope$7())), m$1('.w-row', [m$1('.w-col.w-col-4.w-col-push-4', [!args.acceptAccountLoader() ? m$1('a.w-button.btn.btn-medium', {
              href: '#accept_account',
              onclick: args.acceptAccount
          }, I18n$1.t('accept.cta', I18nScope$7())) : h.loader()])])])])])]);
      }
  };

  var I18nScope$5 = _$1.partial(h.i18nScope, 'projects.successful_onboard.confirm_account');

  var projectSuccessfulOnboardConfirmAccount = {
      controller: function controller(args) {
          var actionStages = {
              'error': projectSuccessfulOnboardConfirmAccountError,
              'accept': projectSuccessfulOnboardConfirmAccountAccept
          },
              currentStage = m$1.prop('start'),
              actionStage = function actionStage() {
              return actionStages[currentStage()];
          },
              changeToAction = function changeToAction(stage) {
              return function () {
                  currentStage(stage);

                  return false;
              };
          };

          return {
              changeToAction: changeToAction,
              actionStage: actionStage,
              currentStage: currentStage
          };
      },
      view: function view(ctrl, args) {
          var projectAccount = args.projectAccount,
              actionStage = ctrl.actionStage,
              currentStage = ctrl.currentStage,
              personKind = projectAccount.owner_document.length > 14 ? 'juridical' : 'natural',
              juridicalPerson = projectAccount.owner_document.length > 14;

          return m$1('.w-container.u-marginbottom-40', [m$1('.u-text-center', [m$1('.fontsize-large.fontweight-semibold.u-marginbottom-30', I18n$1.t('title', I18nScope$5()))]), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6', [m$1('.fontsize-base.u-marginbottom-30.card.card-terciary', [m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.label', I18nScope$5())), I18n$1.t('person.' + personKind + '.label', I18nScope$5())]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.' + personKind + '.name', I18nScope$5())), projectAccount.owner_name]), projectAccount.state_inscription && juridicalPerson ? m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.state_inscription', I18nScope$5())), projectAccount.state_inscription]) : '', m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.' + personKind + '.document', I18nScope$5())), projectAccount.owner_document]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.bank.name', I18nScope$5())), projectAccount.bank_name]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.bank.agency', I18nScope$5())), '' + projectAccount.agency + (_$1.isEmpty(projectAccount.agency_digit) ? '' : '-' + projectAccount.agency_digit)]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.bank.account', I18nScope$5())), projectAccount.account + '-' + projectAccount.account_digit])])]), m$1('.w-col.w-col-6', [m$1('.fontsize-base.u-marginbottom-30.card.card-terciary', [m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.address', I18nScope$5())), projectAccount.address_street + ', ' + projectAccount.address_number + ' ' + (!_$1.isNull(projectAccount.address_complement) ? ', ' + projectAccount.address_complement : '')]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.neighbourhood', I18nScope$5())), projectAccount.address_neighbourhood]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.city', I18nScope$5())), projectAccount.address_city]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.state', I18nScope$5())), projectAccount.address_state]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.zip_code', I18nScope$5())), projectAccount.address_zip_code])])])]), currentStage() === 'start' ? m$1('#confirmation-dialog.w-row.bank-transfer-answer', [m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6.w-hidden-small.w-hidden-tiny'), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('a#confirm-account.btn.btn-large', { href: '#confirm_account', onclick: ctrl.changeToAction('accept') }, 'Sim')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('a#refuse-account.btn.btn-large.btn-terciary', { href: '#error_account', onclick: ctrl.changeToAction('error') }, 'Não')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6.w-hidden-small.w-hidden-tiny')]) : m$1.component(actionStage(), {
              projectAccount: projectAccount,
              changeToAction: ctrl.changeToAction,
              addErrorReason: args.addErrorReason,
              acceptAccount: args.acceptAccount,
              acceptAccountLoader: args.acceptAccountLoader
          })]);
      }
  };

  var successfulProjectTaxModal = {
      view: function view(ctrl, args) {
          var pt = args.projectTransfer;

          return m$1('div', [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', 'Extrato do projeto')]), m$1('.modal-dialog-content', [m$1('p.fontsize-small.u-marginbottom-40', ['Confira o extrato do seu projeto, já incluindo as taxas e retenções. Se você tiver dúvidas sobre como esse cálculo é feito, ', m$1('a.alt-link[href="http://suporte.catarse.me/hc/pt-br/articles/202037493-FINANCIADO-Como-ser%C3%A1-feito-o-repasse-do-dinheiro-"][target="__blank"]', 'acesse aqui'), '.']), m$1('div', [m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-4', [m$1('.text-success', '+ R$ ' + h.formatNumber(pt.pledged, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Arrecadação total (' + pt.total_contributions + ' apoios)')])]), pt.irrf_tax > 0 ? m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-4', [m$1('.text-success', '+ R$ ' + h.formatNumber(pt.irrf_tax, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Retenção IRF (Imposto de Renda na Fonte)')])]) : '', m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-4', [m$1('.text-error', '- R$ ' + h.formatNumber(pt.catarse_fee, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Taxa do Catarse e meio de pagamento (' + h.formatNumber(pt.service_fee * 100, 2) + '%) ')])]), m$1('.divider.u-marginbottom-10'), m$1('.w-row.fontsize-base.fontweight-semibold', [m$1('.w-col.w-col-4', [m$1('div', 'R$ ' + h.formatNumber(pt.total_amount, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Total a ser transferido')])])])])]);
      }
  };

  var I18nScope$8 = _$1.partial(h.i18nScope, 'projects.successful_onboard');

  var parseAccountData = function parseAccountData(account, transfer) {
      return {
          transfer_limit_date: h.momentify(account.transfer_limit_date),
          total_amount: h.formatNumber(transfer.total_amount, 2),
          bank_name: account.bank_name,
          agency: '' + account.agency + (account.agency_digit ? '-' + account.agency_digit : ''),
          account: '' + account.account + (account.account_digit ? '-' + account.account_digit : ''),
          user_email: account.user_email
      };
  };

  var insightVM = {
      content: function content(state, data) {
          var translations = I18n$1.translations[I18n$1.currentLocale()].projects.successful_onboard[state],
              translationContext = state === 'finished' ? {} : parseAccountData(_$1.first(data.account()), _$1.first(data.transfer()));
          var contentObj = {};

          _$1.map(translations, function (translation, translationKey) {
              contentObj = _$1.extend({}, contentObj, babelHelpers.defineProperty({}, translationKey, I18n$1.t(state + '.' + translationKey, I18nScope$8(translationContext))));
          });
          return contentObj;
      }
  };

  var I18nScope$4 = _.partial(h.i18nScope, 'projects.successful_onboard');

  var projectSuccessfulOnboard = {
      controller: function controller(args) {
          var projectIdVM = postgrest$1.filtersVM({ project_id: 'eq' }),
              projectAccounts = m$1.prop([]),
              projectTransfers = m$1.prop([]),
              showTaxModal = h.toggleProp(false, true),
              onboardComponents = {
              'start': dashboardInfo,
              'confirm_account': projectSuccessfulOnboardConfirmAccount,
              'error_account': dashboardInfo,
              'pending_transfer': dashboardInfo,
              'finished': dashboardInfo
          },
              currentState = m$1.prop('start'),
              currentComponent = function currentComponent() {
              return onboardComponents[currentState()];
          },
              content = function content() {
              return insightVM.content(currentState(), {
                  account: projectAccounts,
                  transfer: projectTransfers,
                  showTaxModal: showTaxModal
              });
          },
              loader = postgrest$1.loaderWithToken,
              declineAccountLoader = function declineAccountLoader(errorMsg) {
              var pa = _.first(projectAccounts());

              return postgrest$1.loaderWithToken(models.projectAccountError.postOptions({
                  project_id: args.project().project_id,
                  reason: errorMsg
              }));
          },
              acceptAccountLoader = postgrest$1.loaderWithToken(models.projectAccount.postOptions({
              project_id: args.project().project_id
          }));

          projectIdVM.project_id(args.project().project_id);

          var lProjectAccount = loader(models.projectAccount.getRowOptions(projectIdVM.parameters()));
          lProjectAccount.load().then(function (data) {
              projectAccounts(data);

              loadCurrentStage();
          });

          var lProjectTransfer = loader(models.projectTransfer.getRowOptions(projectIdVM.parameters()));
          lProjectTransfer.load().then(projectTransfers);

          var setStage = function setStage(state) {
              currentState(state);

              return currentComponent;
          },
              nextStage = function nextStage() {
              var keys = _.keys(onboardComponents),
                  nextKey = keys[_.indexOf(keys, currentState()) + 1];

              currentState(nextKey);

              return currentComponent;
          },
              loadCurrentStage = function loadCurrentStage() {
              if (!lProjectAccount()) {
                  var pa = _.first(projectAccounts());

                  if (_.isNull(pa)) {
                      return setStage('finished')();
                  }

                  if (_.isNull(pa.error_reason) && _.isNull(pa.transfer_state)) {
                      return setStage('start')();
                  } else if (!_.isNull(pa.error_reason)) {
                      return setStage('error_account')();
                  } else if (!_.isNull(pa.transfer_state)) {
                      if (pa.transfer_state == 'transferred') {
                          return setStage('finished')();
                      } else {
                          return setStage('pending_transfer')();
                      }
                  }
              }

              return false;
          },


          // TODO: need to add an error validation to not null
          addErrorReason = function addErrorReason(errorProp) {
              return function () {
                  var fn = declineAccountLoader(errorProp());
                  fn.load().then(function () {
                      setStage('error_account')();
                  });

                  return false;
              };
          },
              acceptAccount = function acceptAccount() {
              acceptAccountLoader.load().then(function () {
                  setStage('pending_transfer')();
              });

              return false;
          };

          return {
              projectAccounts: projectAccounts,
              projectTransfers: projectTransfers,
              lProjectAccount: lProjectAccount,
              lProjectTransfer: lProjectTransfer,
              setStage: setStage,
              nextStage: nextStage,
              currentComponent: currentComponent,
              addErrorReason: addErrorReason,
              acceptAccount: acceptAccount,
              acceptAccountLoader: acceptAccountLoader,
              content: content,
              declineAccountLoader: declineAccountLoader,
              loadCurrentStage: loadCurrentStage,
              showTaxModal: showTaxModal
          };
      },
      view: function view(ctrl, args) {
          var projectAccount = _.first(ctrl.projectAccounts()),
              projectTransfer = _.first(ctrl.projectTransfers()),
              lpa = ctrl.lProjectAccount,
              lpt = ctrl.lProjectTransfer;

          return m$1('.w-section.section', [ctrl.showTaxModal() ? m$1.component(modalBox, {
              displayModal: ctrl.showTaxModal,
              content: [successfulProjectTaxModal, {
                  projectTransfer: projectTransfer
              }]
          }) : '', !lpa() && !lpt() ? m$1.component(ctrl.currentComponent(), {
              projectTransfer: projectTransfer,
              projectAccount: projectAccount,
              setStage: ctrl.setStage,
              addErrorReason: ctrl.addErrorReason,
              acceptAccount: ctrl.acceptAccount,
              acceptAccountLoader: ctrl.acceptAccountLoader,
              nextStage: ctrl.nextStage,
              content: ctrl.content(),
              dataToRedraw: {
                  'tax_link': {
                      action: 'onclick',
                      actionSource: function actionSource() {
                          ctrl.showTaxModal.toggle();
                          m$1.redraw();
                      }
                  }
              }
          }) : h.loader()]);
      }
  };

  var facebookButton = {
      controller: function controller(args) {
          var share = function share() {
              if (FB) {
                  FB.ui({
                      method: args.messenger ? 'send' : 'share',
                      link: args.url,
                      href: args.url
                  });
              }
          };

          return {
              share: share
          };
      },
      view: function view(ctrl, args) {
          var buttonCss = function buttonCss() {
              if (args.mobile) {
                  return 'w-hidden-main w-hidden-medium u-marginbottom-20 btn btn-medium btn-fb';
              } else if (args.big) {
                  return 'btn btn-fb btn-large u-marginbottom-20 w-button';
              } else if (args.medium) {
                  return 'btn ' + (args.messenger ? 'btn-messenger' : 'btn-fb') + ' btn-medium u-marginbottom-20 w-button';
              } else {
                  return 'btn btn-inline btn-medium btn-terciary u-marginright-20';
              }
          };

          return m$1('button', {
              class: buttonCss(),
              onclick: ctrl.share
          }, [m$1('span.fa', {
              class: args.messenger ? 'fa-comment' : 'fa-facebook'
          }), args.messenger ? ' Messenger' : ' Facebook']);
      }
  };

  var popNotification = {
      controller: function controller() {
          return {
              displayNotification: h.toggleProp(true, false)
          };
      },
      view: function view(ctrl, args) {
          return ctrl.displayNotification() ? m$1('.flash.w-clearfix.card.card-notification.u-radius.zindex-20', [m$1('img.icon-close[src="/assets/catarse_bootstrap/x.png"][width="12"][alt="fechar"]', {
              onclick: ctrl.displayNotification.toggle
          }), m$1('.fontsize-small', args.message)]) : m$1('span');
      }
  };

  var copyTextInput = {
      controller: function controller(args) {
          var showSuccess = m$1.prop(false);

          var select = function select(el) {
              var range = void 0,
                  selection = void 0;

              if (document.body.createTextRange) {
                  range = document.body.createTextRange();
                  range.moveToElementText(el);
                  range.select();
              } else if (window.getSelection) {
                  selection = window.getSelection();
                  range = document.createRange();
                  range.selectNodeContents(el);
                  selection.removeAllRanges();
                  selection.addRange(range);
              }
          };

          var setClickHandler = function setClickHandler(el, isInitialized) {
              var copy = void 0;
              if (!isInitialized) {
                  (function () {
                      var textarea = document.getElementById('copy-textarea');
                      el.onclick = function () {
                          select(textarea);
                          copy = document.execCommand('copy');
                          if (copy) {
                              showSuccess(true);
                              m$1.redraw();
                          } else {
                              textarea.blur();
                          }
                      };
                  })();
              }
          };

          return {
              setClickHandler: setClickHandler,
              showSuccess: showSuccess
          };
      },
      view: function view(ctrl, args) {
          return m$1('#clipboard.w-row', [m$1('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', m$1('textarea#copy-textarea.positive.text-field.w-input', {
              style: 'margin-bottom:0;'
          }, args.value)), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', m$1('.btn.btn-medium.btn-no-border.btn-terciary.fa.fa-clipboard.w-button', {
              config: ctrl.setClickHandler
          })), ctrl.showSuccess() ? m$1.component(popNotification, { message: 'Link copiado' }) : '']);
      }
  };

  var inviteEmailsFromImport = {
      controller: function controller(args) {
          var checkedList = m$1.prop([]),
              loading = m$1.prop(false),
              filterTerm = m$1.prop(''),
              filteredData = m$1.prop(args.dataEmails()),
              filtering = m$1.prop(false),
              onCheckGenerator = function onCheckGenerator(item) {
              return function () {
                  var matchEmail = function matchEmail(resource) {
                      return resource.email === item.email;
                  };
                  if (_$1.find(checkedList(), matchEmail)) {
                      checkedList(_$1.reject(checkedList(), matchEmail));
                  } else {
                      checkedList().push(item);
                  }
              };
          },
              submitInvites = function submitInvites() {
              loading(true);

              if (!_$1.isEmpty(checkedList)) {
                  postgrest$1.loaderWithToken(models.inviteProjectEmail.postOptions({
                      data: {
                          project_id: args.project.project_id,
                          emails: _$1.map(checkedList(), function (x) {
                              return x.email;
                          })
                      }
                  })).load().then(function (data) {
                      args.modalToggle.toggle();
                      loading(false);
                      args.showSuccess(true);
                  });
              }
          },
              search = function search() {
              if (!filtering()) {
                  filtering(true);
                  var searchFilter = void 0;
                  var matchSearch = function matchSearch(item) {
                      var pattern = '\b' + _$1.escape(filterTerm()),
                          regex = new RegExp(pattern, 'gim');

                      return !_$1.isNull(item.email.match(regex)) || !_$1.isNull(item.name.match(regex));
                  };

                  if (!_$1.isEmpty(filterTerm()) || !_$1.isUndefined(filterTerm())) {
                      searchFilter = _$1.filter(args.dataEmails(), matchSearch);
                  }

                  filtering(false);
                  return searchFilter || args.dataEmails;
              }
          };

          return {
              onCheckGenerator: onCheckGenerator,
              submitInvites: submitInvites,
              checkedList: checkedList,
              filterTerm: filterTerm,
              loading: loading,
              search: search,
              filteredData: filteredData,
              filtering: filtering
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1('div', [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', 'Convide seus amigos')]), m$1('.modal-dialog-content', !args.loadingContacts() && !ctrl.loading() ? [m$1('.filter-area', [m$1('.w-row.u-margintop-20', [m$1('.w-sub-col.w-col.w-col-12', [m$1('form[action="javascript:void(0);"]', [m$1('input.w-input.text-field[type="text"][placeholder="Busque pelo nome ou email."]', {
              onkeyup: m$1.withAttr('value', ctrl.filterTerm),
              onchange: function onchange(e) {
                  e.preventDefault();
              }
          })])])])]), m$1('.emails-area.u-margintop-40', { style: { height: '250px', 'overflow-x': 'auto' } }, ctrl.filtering() ? h.loader() : _$1.map(ctrl.search(), function (item, i) {
              return m$1('.w-row.u-marginbottom-20', [m$1('.w-sub-col.w-col.w-col-1', [m$1('input[type=\'checkbox\'][name=\'check_' + i + '\']', { onchange: ctrl.onCheckGenerator(item) })]), m$1('.w-sub-col.w-col.w-col-4', [m$1('label.fontsize-small[for=\'check_' + i + '\']', item.name)]), m$1('.w-sub-col.w-col.w-col-7', [m$1('label.fontsize-small.fontweight-semibold[for=\'check_' + i + '\']', item.email)])]);
          }))] : h.loader()), m$1('.modal-dialog-nav-bottom.u-text-center', [!args.loadingContacts() && !ctrl.loading() && !ctrl.filtering() ? m$1('.u-text-center.u-margintop-20', [m$1('a.btn.btn-inline.btn-medium.w-button[href="javascript:void(0)"]', {
              onclick: ctrl.submitInvites
          }, 'Enviar ' + ctrl.checkedList().length + ' convites')]) : !ctrl.loading() ? 'carregando contatos...' : 'enviando convites...'])]);
      }
  };

  var projectGoogleContactImport = {
      controller: function controller(args) {
          var clientId = document.getElementById('google_oauth_client'),
              modalToggle = h.toggleProp(false, true),
              feedPageUrl = 'https://www.google.com/m8/feeds/contacts/default/full?alt=json&max-results=1000',
              dataEmails = m$1.prop([]),
              loadingContacts = m$1.prop(false),
              fetch = function fetch(token, pageUrl) {
              if (!modalToggle()) {
                  modalToggle.toggle();
                  loadingContacts(true);
                  m$1.redraw();
              }

              m$1.request({
                  url: pageUrl || feedPageUrl,
                  dataType: 'jsonp',
                  data: token
              }).then(function (data) {
                  var nextLink = _$1.find(data.feed.link, function (l) {
                      return l.rel === 'next';
                  }),
                      reducedList = _$1.reduce(data.feed.entry, function (memo, entry) {
                      if ('gd$email' in entry && entry.gd$email.length > 0) {
                          (function () {
                              var gemails = entry.gd$email,
                                  name = entry.title.$t;

                              _$1.each(gemails, function (email) {
                                  memo.push({
                                      email: email.address,
                                      name: name
                                  });
                              });
                          })();
                      }

                      return memo;
                  }, []);

                  dataEmails(dataEmails().concat(reducedList));

                  if (_$1.isUndefined(nextLink)) {
                      loadingContacts(false);
                      m$1.redraw();
                  } else {
                      fetch(token, nextLink.href);
                  }
              });
          },
              auth = function auth() {
              var config = {
                  client_id: clientId.getAttribute('data-token'),
                  'scope': 'https://www.googleapis.com/auth/contacts.readonly'
              };
              gapi.auth.authorize(config, function () {
                  fetch(gapi.auth.getToken());
              });
          };

          return {
              auth: auth,
              modalToggle: modalToggle,
              loadingContacts: loadingContacts,
              dataEmails: dataEmails
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1('#google_contact_wrapper', [ctrl.modalToggle() ? m$1.component(modalBox, {
              displayModal: ctrl.modalToggle,
              content: [inviteEmailsFromImport, {
                  project: args.project,
                  dataEmails: ctrl.dataEmails,
                  loadingContacts: ctrl.loadingContacts,
                  modalToggle: ctrl.modalToggle,
                  showSuccess: args.showSuccess
              }]
          }) : '', m$1('a.btn.btn-inline.btn-no-border.btn-terciary.w-inline-block[href=\'javascript:void(0);\']', {
              onclick: ctrl.auth
          }, [m$1('img[src=\'http://uploads.webflow.com/57ba58b4846cc19e60acdd5b/57bc339f77f314e23b94d44d_gmail-icon.png\'][width=\'25\']'), m$1('._w-inline-block.fontsize-smallest', 'Contatos do gmail')])]);
      }
  };

  var projectEmailInvite = {
      controller: function controller(args) {
          var emailText = m$1.prop(''),
              loading = m$1.prop(false),
              project = args.project,
              showSuccess = m$1.prop(false),
              submitInvite = function submitInvite() {
              if (_$1.isEmpty(emailText()) || loading() === true) {} else {
                  loading(true);
                  var emailList = _$1.reduce(emailText().split('\n'), function (memo, text) {
                      if (h.validateEmail(text)) {
                          memo.push(text);
                      }
                      return memo;
                  }, []);

                  if (!_$1.isEmpty(emailList)) {
                      showSuccess(false);
                      postgrest$1.loaderWithToken(models.inviteProjectEmail.postOptions({
                          data: {
                              project_id: project.project_id,
                              emails: emailList
                          }
                      })).load().then(function (data) {
                          emailText('');
                          loading(false);
                          showSuccess(true);
                      });
                  } else {
                      loading(false);
                  }
              }
          };

          return {
              emailText: emailText,
              submitInvite: submitInvite,
              loading: loading,
              showSuccess: showSuccess
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1('.email-invite-box', [ctrl.showSuccess() ? m$1.component(popNotification, { message: 'Convites enviados.' }) : '', ctrl.loading() ? h.loader() : [m$1('.w-form', [m$1('form', [m$1('.u-marginbottom-10', [m$1.component(projectGoogleContactImport, {
              project: project,
              showSuccess: ctrl.showSuccess
          })
          //    m("a.btn.btn-inline.btn-no-border.btn-terciary.w-inline-block[href='#']", [
          //        m("._w-inline-block.fontsize-smallest", "Upload CSV")
          //    ])
          ]), m$1('textarea.positive.text-field.w-input[maxlength="5000"][placeholder="Adicione um ou mais emails, separados por linha."]', {
              onchange: m$1.withAttr('value', ctrl.emailText),
              value: ctrl.emailText()
          })])]), m$1('.u-text-center', [m$1('a.btn.btn-inline.btn-medium.w-button[href="javascript:void(0)"]', {
              onclick: ctrl.submitInvite
          }, 'Enviar convites')])]]);
      }
  };

  var projectInviteCard = {
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1('.card.card-secondary.u-marginbottom-20.u-radius.w-clearfix', [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-30.u-text-center', 'Convide seus amigos para apoiar sua campanha'), m$1('.w-row', [m$1('.invite-friends-back-col-1', [m$1.component(facebookButton, { url: h.projectFullPermalink(project) + '?ref=facebook&utm_source=facebook.com&utm_medium=social&utm_campaign=project_share_insights', medium: true }), m$1.component(facebookButton, { messenger: true, url: h.projectFullPermalink(project) + '?ref=facebook&utm_source=facebook.com&utm_medium=messenger&utm_campaign=project_share_insights', medium: true }), m$1('.w-form', [m$1('form[data-name=\'Email Form 2\'][id=\'email-form-2\'][name=\'email-form-2\']', [m$1('.fontcolor-secondary.fontsize-smallest', 'Link direto'), m$1.component(copyTextInput, { value: h.projectFullPermalink(project) + '?ref=project_link' })])])]), m$1('.invite-friends-back-col-2', m$1.component(projectEmailInvite, { project: project }))])]);
      }
  };

  var I18nScope$2 = _$1.partial(h.i18nScope, 'projects.insights');

  var insights = {
      controller: function controller(args) {
          var filtersVM = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              displayModal = h.toggleProp(false, true),
              projectDetails = m$1.prop([]),
              contributionsPerDay = m$1.prop([]),
              contributionsPerLocation = m$1.prop([]),
              loader = postgrest$1.loaderWithToken,
              setProjectId = function setProjectId() {
              try {
                  var project_id = m$1.route.param('project_id');

                  filtersVM.project_id(project_id);
              } catch (e) {
                  filtersVM.project_id(args.root.getAttribute('data-id'));
              }
          };

          if (h.paramByName('online_success') === 'true') {
              displayModal.toggle();
          }

          setProjectId();

          var l = loader(models.projectDetail.getRowOptions(filtersVM.parameters()));
          l.load().then(projectDetails);

          var lContributionsPerDay = loader(models.projectContributionsPerDay.getRowOptions(filtersVM.parameters()));
          lContributionsPerDay.load().then(contributionsPerDay);

          var contributionsPerLocationTable = [['Estado', 'Apoios', 'R$ apoiados (% do total)']];
          var buildPerLocationTable = function buildPerLocationTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  var column = [];

                  column.push(contribution.state_acronym || 'Outro/other');
                  column.push(contribution.total_contributions);
                  column.push([contribution.total_contributed, [//Adding row with custom comparator => read project-data-table description
                  m$1('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_contributed, 2, 3), m$1('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerLocationTable.push(column);
              }) : [];
          };

          var lContributionsPerLocation = loader(models.projectContributionsPerLocation.getRowOptions(filtersVM.parameters()));
          lContributionsPerLocation.load().then(buildPerLocationTable);

          var contributionsPerRefTable = [[I18n$1.t('ref_table.header.origin', I18nScope$2()), I18n$1.t('ref_table.header.contributions', I18nScope$2()), I18n$1.t('ref_table.header.amount', I18nScope$2())]];
          var buildPerRefTable = function buildPerRefTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  //Test if the string matches a word starting with ctrse_ and followed by any non-digit group of characters
                  //This allows to remove any versioned referral (i.e.: ctrse_newsletter_123) while still getting ctrse_test_ref
                  var re = /(ctrse_[\D]*)/,
                      test = re.exec(contribution.referral_link);

                  var column = [];

                  if (test) {
                      //Removes last underscore if it exists
                      contribution.referral_link = test[0].substr(-1) === '_' ? test[0].substr(0, test[0].length - 1) : test[0];
                  }

                  column.push(contribution.referral_link ? I18n$1.t('referral.' + contribution.referral_link, I18nScope$2({ defaultValue: contribution.referral_link })) : I18n$1.t('referral.others', I18nScope$2()));
                  column.push(contribution.total);
                  column.push([contribution.total_amount, [m$1('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_amount, 2, 3), m$1('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerRefTable.push(column);
              }) : [];
          };

          var lContributionsPerRef = loader(models.projectContributionsPerRef.getRowOptions(filtersVM.parameters()));
          lContributionsPerRef.load().then(buildPerRefTable);

          return {
              l: l,
              lContributionsPerRef: lContributionsPerRef,
              lContributionsPerLocation: lContributionsPerLocation,
              lContributionsPerDay: lContributionsPerDay,
              displayModal: displayModal,
              filtersVM: filtersVM,
              projectDetails: projectDetails,
              contributionsPerDay: contributionsPerDay,
              contributionsPerLocationTable: contributionsPerLocationTable,
              contributionsPerRefTable: contributionsPerRefTable
          };
      },
      view: function view(ctrl) {
          var project = _$1.first(ctrl.projectDetails()) || {
              user: {
                  name: 'Realizador'
              }
          },
              buildTooltip = function buildTooltip(el) {
              return m$1.component(tooltip, {
                  el: el,
                  text: ['Informa de onde vieram os apoios de seu projeto. Saiba como usar essa tabela e planejar melhor suas ações de comunicação ', m$1('a[href="' + I18n$1.t('ref_table.help_url', I18nScope$2()) + '"][target=\'_blank\']', 'aqui.')],
                  width: 380
              });
          };

          if (!ctrl.l()) {
              project.user.name = project.user.name || 'Realizador';
          }

          return m$1('.project-insights', !ctrl.l() ? [project.is_owner_or_admin ? m$1.component(projectDashboardMenu, {
              project: m$1.prop(project)
          }) : '', ctrl.displayModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: [onlineSuccessModalContent]
          }) : '', m$1('.w-container', project.state === 'successful' ? m$1.component(projectSuccessfulOnboard, { project: m$1.prop(project) }) : [m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-8.w-col-push-2', [m$1('.fontweight-semibold.fontsize-larger.lineheight-looser.u-marginbottom-10.u-text-center.dashboard-header', I18n$1.t('campaign_title', I18nScope$2())), project.state === 'online' ? m$1.component(projectInviteCard, { project: project }) : '', project.state === 'draft' ? m$1.component(adminProjectDetailsCard, {
              resource: project
          }) : '', m$1('p.' + project.state + '-project-text.fontsize-small.lineheight-loose', [project.mode === 'flex' && _$1.isNull(project.expires_at) && project.state !== 'draft' ? m$1('span', [I18n$1.t('finish_explanation', I18nScope$2()), m$1('a.alt-link[href="http://suporte.catarse.me/hc/pt-br/articles/208141033-Como-definir-o-prazo-no-Catarse-flex-"][target="_blank"]', I18n$1.t('know_more', I18nScope$2()))]) : m$1.trust(I18n$1.t('campaign.' + project.mode + '.' + project.state, I18nScope$2({ username: project.user.name, expires_at: h.momentify(project.zone_expires_at), sent_to_analysis_at: h.momentify(project.sent_to_analysis_at) })))])])])]), project.state === 'draft' ? m$1.component(projectDeleteButton, { project: project }) : '', project.is_published ? [m$1('.divider'), m$1('.w-section.section-one-column.section.bg-gray.before-footer', [m$1('.w-container', [m$1.component(projectDataStats, { project: m$1.prop(project) }), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m$1.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: I18n$1.t('amount_per_day_label', I18nScope$2()),
              dataKey: 'total_amount',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              },
              emptyState: I18n$1.t('amount_per_day_empty', I18nScope$2())
          }) : h.loader()])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m$1.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: I18n$1.t('contributions_per_day_label', I18nScope$2()),
              dataKey: 'total',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              },
              emptyState: I18n$1.t('contributions_per_day_empty', I18nScope$2())
          }) : h.loader()])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', [m$1('.project-contributions-per-ref', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', [I18n$1.t('ref_origin_title', I18nScope$2()), h.newFeatureBadge(), buildTooltip('span.fontsize-smallest.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary')]), !ctrl.lContributionsPerRef() ? !_$1.isEmpty(_$1.rest(ctrl.contributionsPerRefTable)) ? m$1.component(projectDataTable, {
              table: ctrl.contributionsPerRefTable,
              defaultSortIndex: -2
          }) : m$1('.card.u-radius.medium.u-marginbottom-60', m$1('.w-row.u-text-center.u-margintop-40.u-marginbottom-40', m$1('.w-col.w-col-8.w-col-push-2', m$1('p.fontsize-base', I18n$1.t('contributions_per_ref_empty', I18nScope$2()))))) : h.loader()])])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', [m$1('.project-contributions-per-ref', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', I18n$1.t('location_origin_title', I18nScope$2())), !ctrl.lContributionsPerLocation() ? !_$1.isEmpty(_$1.rest(ctrl.contributionsPerLocationTable)) ? m$1.component(projectDataTable, {
              table: ctrl.contributionsPerLocationTable,
              defaultSortIndex: -2
          }) : m$1('.card.u-radius.medium.u-marginbottom-60', m$1('.w-row.u-text-center.u-margintop-40.u-marginbottom-40', m$1('.w-col.w-col-8.w-col-push-2', m$1('p.fontsize-base', I18n$1.t('contributions_per_location_empty', I18nScope$2()))))) : h.loader()])])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', [m$1.component(projectReminderCount, {
              resource: project
          })])])])]), project.state === 'online' ? m$1.component(projectCancelButton, { project: project }) : ''] : ''] : h.loader());
      }
  };

  var I18nScope$9 = _.partial(h.i18nScope, 'pages.jobs');

  var jobs = {
      view: function view(ctrl, args) {
          return [m$1('.w-section.hero-jobs.hero-medium', [m$1('.w-containe.u-text-center', [m$1('img.icon-hero[src="/assets/logo-white.png"]'), m$1('.u-text-center.u-marginbottom-20.fontsize-largest', I18n$1.t('title', I18nScope$9()))])]), m$1('.w-section.section', [m$1('.w-container.u-margintop-40', [m$1('.w-row', [m$1('.w-col.w-col-8.w-col-push-2.u-text-center', [m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('info', I18nScope$9())), m$1('a[href="/projects/new"].w-button.btn.btn-large.btn-inline', I18n$1.t('cta', I18nScope$9()))])])])])];
      }
  };

  var liveStatistics = {
      controller: function controller() {
          var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

          var pageStatistics = m$1.prop([]),
              notificationData = m$1.prop({});

          models.statistic.getRow().then(pageStatistics);
          // args.socket is a socket provided by socket.io
          // can see there https://github.com/catarse/catarse-live/blob/master/public/index.js#L8
          if (args.socket && _$1.isFunction(args.socket.on)) {
              args.socket.on('new_paid_contributions', function (msg) {
                  notificationData(JSON.parse(msg.payload));
                  models.statistic.getRow().then(pageStatistics);
                  m$1.redraw();
              });
          }

          return {
              pageStatistics: pageStatistics,
              notificationData: notificationData
          };
      },
      view: function view(ctrl) {
          var data = ctrl.notificationData();

          return m$1('.w-section.bg-stats.section.min-height-100', [m$1('.w-container.u-text-center', _$1.map(ctrl.pageStatistics(), function (stat) {
              return [m$1('img.u-marginbottom-60[src="https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/55ada5dd11b36a52616d97df_symbol-catarse.png"]'), m$1('.fontcolor-negative.u-marginbottom-40', [m$1('.fontsize-megajumbo.fontweight-semibold', 'R$ ' + h.formatNumber(stat.total_contributed, 2, 3)), m$1('.fontsize-large', 'Doados para projetos publicados por aqui')]), m$1('.fontcolor-negative.u-marginbottom-60', [m$1('.fontsize-megajumbo.fontweight-semibold', stat.total_contributors), m$1('.fontsize-large', 'Pessoas já apoiaram pelo menos 1 projeto no Catarse')])];
          })), !_$1.isEmpty(data) ? m$1('.w-container', [m$1('div', [m$1('.card.u-radius.u-marginbottom-60.medium', [m$1('.w-row', [m$1('.w-col.w-col-4', [m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4', [m$1('img.thumb.u-round[src="' + h.useAvatarOrDefault(data.user_image) + '"]')]), m$1('.w-col.w-col-8.w-col-small-8', [m$1('.fontsize-large.lineheight-tight', data.user_name)])])]), m$1('.w-col.w-col-4.u-text-center.fontsize-base.u-margintop-20', [m$1('div', 'acabou de apoiar o')]), m$1('.w-col.w-col-4', [m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4', [m$1('img.thumb-project.u-radius[src="' + data.project_image + '"][width="75"]')]), m$1('.w-col.w-col-8.w-col-small-8', [m$1('.fontsize-large.lineheight-tight', data.project_name)])])])])])])]) : '', m$1('.u-text-center.fontsize-large.u-marginbottom-10.fontcolor-negative', [m$1('a.link-hidden.fontcolor-negative[href="https://github.com/catarse"][target="_blank"]', [m$1('span.fa.fa-github', '.'), ' Open Source com orgulho! '])])]);
      }
  };

  var projectContributionReportHeader = {
      view: function view(ctrl, args) {
          var filterBuilder = args.filterBuilder,
              paymentStateFilter = _$1.findWhere(filterBuilder, { label: 'payment_state' }),
              rewardFilter = _$1.findWhere(filterBuilder, { label: 'reward_filter' }),
              mainFilter = _$1.findWhere(filterBuilder, { component: filterMain }),
              project_id = args.filterVM.project_id();

          rewardFilter.data.options = args.mapRewardsToOptions();

          return m$1('.w-section.dashboard-header', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [m$1('.fontsize-larger.u-text-center.fontweight-semibold.lineheight-looser.u-marginbottom-30', 'Relatório de apoios')]), m$1('.w-col.w-col-3')]), m$1('.w-form', [m$1('form', { onsubmit: args.submit }, [m$1('.w-row', [m$1('.w-col.w-col-5', [m$1('.w-row', [m$1.component(paymentStateFilter.component, paymentStateFilter.data), m$1.component(rewardFilter.component, rewardFilter.data)])]), m$1('.w-col.w-col-7.u-margintop-20', [m$1('.w-row', [m$1('.w-col.w-col-8._w-sub-col', [m$1.component(mainFilter.component, mainFilter.data)]), m$1('.w-col.w-col-4.w-clearfix.w-hidden-small.w-hidden-tiny', [m$1('a.alt-link.u-right.fontsize-small.lineheight-looser[href="/projects/' + project_id + '/download_reports"]', [m$1('span.fa.fa-download', '.'), ' Baixar relatórios'])])])])])])])])]);
      }
  };

  var projectContributionReportContentCard = {
      controller: function controller(args) {
          var project = args.project(),
              stateClass = function stateClass(state) {
              var classes = {
                  online: {
                      'paid': 'text-success.fa-circle',
                      'refunded': 'text-error.fa-circle',
                      'pending_refund': 'text-error.fa-circle',
                      'pending': 'text-waiting.fa-circle',
                      'refused': 'text-error.fa-circle'
                  },
                  failed: {
                      'paid': 'text-error.fa-circle-o',
                      'refunded': 'text-refunded.fa-circle',
                      'pending_refund': 'text-refunded.fa-circle-o',
                      'pending': 'text-refunded',
                      'refused': 'text-refunded'
                  },
                  waiting_funds: {
                      'paid': 'text-success.fa-circle',
                      'refunded': 'text-error.fa-circle',
                      'pending_refund': 'text-error.fa-circle',
                      'pending': 'text-waiting.fa-circle',
                      'refused': 'text-error.fa-circle'
                  },
                  successful: {
                      'paid': 'text-success.fa-circle',
                      'refunded': 'text-error.fa-circle',
                      'pending_refund': 'text-error.fa-circle',
                      'pending': 'text-waiting.fa-circle',
                      'refused': 'text-error.fa-circle'
                  }
              };

              return classes[project.state][state];
          };

          return {
              stateClass: stateClass
          };
      },
      view: function view(ctrl, args) {
          var contribution = args.contribution(),
              profile_img = _$1.isEmpty(contribution.profile_img_thumbnail) ? '/assets/catarse_bootstrap/user.jpg' : contribution.profile_img_thumbnail,
              reward = contribution.reward || { minimum_value: 0, description: 'Nenhuma recompensa selecionada' };
          return m$1('.w-clearfix.card', [m$1('.w-row', [m$1('.w-col.w-col-1.w-col-tiny-1', [m$1('img.user-avatar.u-marginbottom-10[src=\'' + profile_img + '\']')]), m$1('.w-col.w-col-11.w-col-tiny-11', [m$1('.w-row', [m$1('.w-col.w-col-3', [m$1('.fontcolor-secondary.fontsize-mini.fontweight-semibold', h.momentify(contribution.created_at, 'DD/MM/YYYY, HH:mm')), m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter', contribution.user_name), m$1('.fontsize-smallest.lineheight-looser', [contribution.has_another ? [m$1('a.link-hidden-light.badge.badge-light', '+1 apoio ')] : '', contribution.anonymous ? m$1('span.fa.fa-eye-slash.fontcolor-secondary', m$1('span.fontcolor-secondary[style="font-size:11px;"]', ' Apoio não-público')) : '']), m$1('.fontsize-smallest.lineheight-looser', contribution.email)]), m$1('.w-col.w-col-3', [m$1('.lineheight-tighter', [m$1('span.fa.fontsize-smallest.' + ctrl.stateClass(contribution.state)), '   ', m$1('span.fontsize-large', 'R$ ' + h.formatNumber(contribution.value, 2, 3))])]), m$1('.w-col.w-col-3.w-hidden-small.w-hidden-tiny', [m$1('.fontsize-smallest.fontweight-semibold', 'Recompensa: R$ ' + h.formatNumber(reward.minimum_value, 2, 3)), m$1('.fontsize-smallest', reward.description.substring(0, 80) + '...')]) /*,
m(".w-col.w-col-2.w-hidden-small.w-hidden-tiny.u-text-center", [
m(".fontsize-smallest.fontcolor-secondary", "Enviei!"),
m(".fontsize-smallest.u-marginbottom-20.lineheight-loose", [
m("a.checkbox-big[href='#']", ".")

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ]),
m(".w-col.w-col-2", [
m(".fontsize-smallest", [
m("a.link-hidden[href='#']", "Questionário")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ," "
m("span.fontweight-semibold.text-waiting", "enviado")

m(".fontsize-smallest.fontcolor-terciary", "em 29/10/2015")

          ])])])]);
      }
  };

  var projectContributionReportContent = {
      view: function view(ctrl, args) {
          var list = args.list;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-9.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-base', [m$1('span.fontweight-semibold', list.isLoading() ? '' : list.total()), ' apoios'])])]),
          //m(".fontsize-large.fontweight-semibold", "R$ 12.000,00")

          /*
           TODO: ordering filter template
          m(".w-col.w-col-3.w-col-small-6.w-col-tiny-6", [
              m(".w-form", [
                  m("form[data-name='Email Form 5'][id='email-form-5'][name='email-form-5']", [
                      m(".fontsize-smallest.fontcolor-secondary", "Ordenar por:"),
                      m("select.w-select.text-field.positive.fontsize-smallest[id='field-9'][name='field-9']", [
                          m("option[value='']", "Data (recentes para antigos)"),
                          m("option[value='']", "Data (antigos para recentes)"),
                          m("option[value='']", "Valor (maior para menor)"),
                          m("option[value='First']", "Valor (menor para maior)")
                      ])
                  ])
              ])
          ])*/
          _$1.map(list.collection(), function (item) {
              var contribution = m$1.prop(item);
              return m$1.component(projectContributionReportContentCard, { project: args.project, contribution: contribution });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])])]);
      }
  };

  var vm$4 = postgrest.filtersVM({
      full_text_index: '@@',
      state: 'in',
      reward_id: 'eq',
      project_id: 'eq'
  });
  var paramToString$2 = function paramToString(p) {
      return (p || '').toString().trim();
  };
  vm$4.state('');
  vm$4.order({
      id: 'desc'
  });

  vm$4.full_text_index.toFilter = function () {
      var filter = paramToString$2(vm$4.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  vm$4.withNullParameters = function () {
      var withNullVm = postgrest.filtersVM({
          full_text_index: '@@',
          state: 'in',
          reward_id: 'is',
          project_id: 'eq'
      });

      withNullVm.full_text_index(vm$4.full_text_index());
      withNullVm.order(vm$4.order());
      withNullVm.state(vm$4.state());
      withNullVm.reward_id(vm$4.reward_id());
      withNullVm.project_id(vm$4.project_id());

      return withNullVm.parameters();
  };

  var I18nScope$10 = _$1.partial(h.i18nScope, 'projects.contributions_report.legend_labels');

  var ProjectContributionStateLegendModal = {
      controller: function controller(args) {
          var translate = function translate(path) {
              return I18n$1.t(path, I18nScope$10());
          };

          return {
              stages: {
                  online: [{
                      label: translate('online.paid.label'),
                      text: translate('online.paid.text'),
                      i_class: '.fa.fa-circle.text-success'
                  }, {
                      label: translate('online.pending.label'),
                      text: translate('online.pending.text'),
                      i_class: '.fa.fa-circle.text-waiting'
                  }, {
                      label: translate('online.refunded.label'),
                      text: translate('online.refunded.text'),
                      i_class: '.fa.fa-circle.text-error'
                  }],
                  failed: [{
                      label: translate('failed.pending_refund.label'),
                      text: translate('failed.pending_refund.text'),
                      i_class: '.fa.fa-circle-o.text-refunded'
                  }, {
                      label: translate('failed.refunded.label'),
                      text: translate('failed.refunded.text'),
                      i_class: '.fa.fa-circle.text-refunded'
                  }, {
                      label: translate('failed.paid.label'),
                      text: translate('failed.paid.text'),
                      i_class: '.fa.fa-circle-o.text-error'
                  }],
                  successful: [{
                      label: translate('successful.paid.label'),
                      text: translate('successful.paid.text'),
                      i_class: '.fa.fa-circle.text-success'
                  }, {
                      label: translate('successful.refunded.label'),
                      text: translate('successful.refunded.text'),
                      i_class: '.fa.fa-circle.text-error'
                  }]

              }
          };
      },
      view: function view(ctrl, args) {
          var project = _$1.first(args.project()),
              project_stage = project.state == 'waiting_funds' ? 'online' : project.state;

          return m$1('div', [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', 'Status do apoio')]), m$1('.modal-dialog-content', _$1.map(ctrl.stages[project_stage], function (item, i) {
              return m$1('.u-marginbottom-20', [m$1('.fontsize-small.fontweight-semibold', [m$1('span' + item.i_class), '  ' + item.label]), m$1('.fontsize-smaller', m$1.trust(item.text))]);
          }))]);
      }
  };

  var InfoProjectContributionStateLegend = {
      controller: function controller(args) {
          return {
              modalToggle: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('span', [args.text, m$1.trust('&nbsp;'), m$1('a.fa.fa-question-circle.fontcolor-secondary[href="#"]', {
              onclick: ctrl.modalToggle.toggle
          }, ''), ctrl.modalToggle() ? m$1.component(modalBox, {
              displayModal: ctrl.modalToggle,
              content: [ProjectContributionStateLegendModal, {
                  project: args.project
              }]
          }) : '']);
      }
  };

  var projectContributionReport = {
      controller: function controller(args) {
          var listVM = postgrest$1.paginationVM(models.projectContribution, 'id.desc', { 'Prefer': 'count=exact' }),
              filterVM = vm$4,
              project = m$1.prop([{}]),
              rewards = m$1.prop([]),
              contributionStateOptions = m$1.prop([]),
              reloadSelectOptions = function reloadSelectOptions(project_state) {
              var opts = [{ value: '', option: 'Todos' }];

              var options_map = {
                  'online': [{ value: 'paid', option: 'Confirmado' }, { value: 'pending', option: 'Iniciado' }, { value: 'refunded,chargeback,deleted,pending_refund', option: 'Contestado' }],
                  'waiting_funds': [{ value: 'paid', option: 'Confirmado' }, { value: 'pending', option: 'Iniciado' }, { value: 'refunded,chargeback,deleted,pending_refund', option: 'Contestado' }],
                  'failed': [{ value: 'pending_refund', option: 'Reembolso em andamento' }, { value: 'refunded', option: 'Reembolsado' }, { value: 'paid', option: 'Reembolso não iniciado' }],
                  'successful': [{ value: 'paid', option: 'Confirmado' }, { value: 'refunded,chargeback,deleted,pending_refund', option: 'Contestado' }]
              };

              opts = opts.concat(options_map[project_state] || []);

              contributionStateOptions(opts);
          },
              filterBuilder = [{
              component: filterMain,
              data: {
                  inputWrapperClass: '.w-input.text-field',
                  btnClass: '.btn.btn-medium',
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por nome ou email do apoiador'
              }
          }, {
              label: 'reward_filter',
              component: filterDropdown,
              data: {
                  label: 'Recompensa',
                  name: 'reward_id',
                  vm: filterVM.reward_id,
                  wrapper_class: '.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle',
                  options: []
              }
          }, {
              label: 'payment_state',
              component: filterDropdown,
              data: {
                  custom_label: [InfoProjectContributionStateLegend, {
                      text: 'Status do apoio',
                      project: project
                  }],
                  name: 'state',
                  vm: filterVM.state,
                  wrapper_class: '.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle',
                  options: contributionStateOptions
              }
          }],
              submit = function submit() {
              if (filterVM.reward_id() === 'null') {
                  listVM.firstPage(filterVM.withNullParameters()).then(null);
              } else {
                  listVM.firstPage(filterVM.parameters()).then(null);
              }

              return false;
          };

          filterVM.project_id(args.root.getAttribute('data-id'));

          var lReward = postgrest$1.loaderWithToken(models.rewardDetail.getPageOptions({ project_id: 'eq.' + filterVM.project_id() }));
          var lProject = postgrest$1.loaderWithToken(models.projectDetail.getPageOptions({ project_id: 'eq.' + filterVM.project_id() }));

          lReward.load().then(rewards);
          lProject.load().then(function (data) {
              project(data);
              reloadSelectOptions(_$1.first(data).state);
          });

          var mapRewardsToOptions = function mapRewardsToOptions() {
              var options = [];
              if (!lReward()) {
                  options = _$1.map(rewards(), function (r) {
                      return {
                          value: r.id,
                          option: 'R$ ' + h.formatNumber(r.minimum_value, 2, 3) + ' - ' + r.description.substring(0, 20)
                      };
                  });
              }

              options.unshift({
                  value: null,
                  option: 'Sem recompensa'
              });

              options.unshift({
                  value: '',
                  option: 'Todas'
              });

              return options;
          };

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }

          return {
              listVM: listVM,
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              submit: submit,
              lReward: lReward,
              lProject: lProject,
              rewards: rewards,
              project: project,
              mapRewardsToOptions: mapRewardsToOptions
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM;

          if (!ctrl.lProject()) {
              return [m$1.component(projectDashboardMenu, { project: m$1.prop(_$1.first(ctrl.project())) }), m$1.component(projectContributionReportHeader, {
                  submit: ctrl.submit,
                  filterBuilder: ctrl.filterBuilder,
                  form: ctrl.filterVM.formDescriber,
                  mapRewardsToOptions: ctrl.mapRewardsToOptions,
                  filterVM: ctrl.filterVM
              }), m$1('.divider.u-margintop-30'), m$1.component(projectContributionReportContent, {
                  list: list,
                  project: m$1.prop(_$1.first(ctrl.project()))
              })];
          } else {
              return h.loader();
          }
      }
  };

  var projectsDashboard = {
      controller: function controller(args) {
          projectVM.init(args.project_id, args.project_user_id);

          return projectVM;
      },
      view: function view(ctrl) {
          var project = ctrl.currentProject;

          return project().is_owner_or_admin ? m$1.component(projectDashboardMenu, { project: project }) : '';
      }
  };

  var search = {
      view: function view(ctrl) {
          var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

          var action = args.action || '/pt/explore?ref=ctrse_explore_pgsearch',
              method = args.method || 'GET';

          return m$1('#search.w-container.w-hidden-main.w-hidden-medium', [m$1('.w-row', [m$1('.w-col.w-col-10.u-marginbottom-20', [m$1('.w-form', [m$1('form#email-form', { action: action, method: method }, [m$1('.w-row', [m$1('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', [m$1('input[type="text"][name="pg_search"][placeholder="Busque projetos"]#pg_search_inside.w-input.text-field.negative.prefix')]), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m$1('button.w-inline-block.btn.btn-dark.btn-attached.postfix', [m$1('img.header-lupa[src="https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/54e44178b2135fce2b6cd235_lupa.png"]')])])])])])])])]);
      }
  };

  var categoryButton = {
      view: function view(ctrl, args) {
          var category = args.category;

          return m$1('.w-col.w-col-2.w-col-small-6.w-col-tiny-6', [m$1('a.w-inline-block.btn-category[href=\'#by_category_id/' + category.id + '\']', [m$1('div', [category.name, m$1('span.badge.explore', category.online_projects)])])]);
      }
  };

  var SignedFriendFacebookConnect = {
      controller: function controller(args) {
          var mapWithAvatar = function mapWithAvatar() {
              return _$1.sample(_$1.filter(args.friendListVM.collection(), function (item) {
                  return !_$1.isNull(item.avatar);
              }), 8);
          };

          return {
              mapWithAvatar: mapWithAvatar
          };
      },
      view: function view(ctrl, args) {
          if (args.friendListVM.isLoading()) {
              return h.loader();
          } else {
              var total = args.friendListVM.total();
              return m$1('.w-section.section.bg-backs-carrosel.section-large', [m$1('.w-container', [m$1('.card.card-big', [m$1('.w-row', [m$1('.w-col.w-col-8', [m$1('.fontsize-largest.u-marginbottom-20', 'Encontre projetos incríveis junto com seus amigos'), m$1('.fontsize-small', 'O universo do Catarse junto com a sua rede do Facebook te farão descobrir projetos incríveis!')]), m$1('.w-col.w-col-4.u-text-center', [m$1('.fontsize-smallest.u-marginbottom-10', total + ' dos seus amigos estão no Catarse!'), m$1('.u-marginbottom-20', [_$1.map(ctrl.mapWithAvatar(), function (item) {
                  return m$1('img.thumb.small.u-round.u-marginbottom-10[src="' + item.avatar + '"]');
              })]), total > 0 ? m$1('a.w-button.btn.btn-large[href="/follow-fb-friends"]', 'Procure seus amigos') : m$1('a.w-button.btn.btn-fb.btn-large.u-margintop-30.u-marginbottom-10[href="/connect-facebook"]', 'Conecte seu facebook')])])])])]);
          }
      }
  };

  var UnsignedFriendFacebookConnect = {
      controller: function controller(args) {
          return {
              largeBg: function () {
                  if (_$1.isUndefined(args)) {
                      return false;
                  } else {
                      return _$1.isUndefined(args.largeBg) ? false : args.largeBg;
                  }
              }()
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-section.section' + (ctrl.largeBg ? '.bg-backs-carrosel.section-large' : ''), [m$1('.w-container', [m$1('.card.card-big', [m$1('.w-row', [m$1('.w-col.w-col-8', [m$1('.fontsize-largest.u-marginbottom-20', 'Encontre projetos incríveis junto com seus amigos'), m$1('.fontsize-small', 'O universo do Catarse junto com a sua rede do Facebook te farão descobrir projetos incríveis!')]), m$1('.w-col.w-col-4', [m$1('a.w-button.btn.btn-fb.btn-large.u-margintop-30.u-marginbottom-10[href="/connect-facebook"]', 'Conecte seu facebook'), m$1('.fontsize-smallest.fontcolor-secondary.u-text-center', 'Nós nunca postaremos nada no facebook sem sua permissão')])])])])]);
      }
  };

  var I18nScope$11 = _$1.partial(h.i18nScope, 'pages.explore');

  // TODO Slim down controller by abstracting logic to view-models where it fits
  var projectsExplore = {
      controller: function controller(args) {
          var filters = postgrest$1.filtersVM,
              projectFiltersVM$$ = projectFiltersVM(),
              filtersMap = projectFiltersVM$$.filters,
              defaultFilter = h.paramByName('filter') || 'all',
              fallbackFilter = 'all',
              currentFilter = m$1.prop(filtersMap[defaultFilter]),
              changeFilter = function changeFilter(newFilter) {
              currentFilter(filtersMap[newFilter]);
              loadRoute();
          },
              resetContextFilter = function resetContextFilter() {
              currentFilter(filtersMap[defaultFilter]);
              projectFiltersVM$$.setContextFilters(['finished', 'all', 'contributed_by_friends']);
          },
              currentUser = h.getUser(),
              currentUserId = currentUser.id,
              hasFBAuth = currentUser.has_fb_auth,
              buildTooltip = function buildTooltip(tooltipText) {
              return m$1.component(tooltip, {
                  el: '.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary',
                  text: tooltipText,
                  width: 380
              });
          },
              hint = function hint() {
              // TODO Add copies to i18n.
              var hintText = '',
                  tooltipText = '',
                  hasHint = false;
              if (currentFilter().keyName === 'all') {
                  hasHint = true;
                  hintText = 'Ordenados por popularidade ';
                  tooltipText = 'O nosso fator popularidade é uma mistura da seleção do time do Catarse com um valor que é calculado pela velocidade de arrecadação do projeto';
              } else if (currentFilter().keyName === 'finished') {
                  hasHint = true;
                  hintText = 'Ordenados por R$ alcançado ';
                  tooltipText = 'Os projetos com maior meta de arrecadação alcançada ficam no topo';
              } else if (currentFilter().keyName === 'contributed_by_friends') {
                  hasHint = true;
                  hintText = 'Projetos apoiados por amigos ';
                  tooltipText = 'Projetos apoiados por amigos';
              }

              return hasHint ? m$1('.fontsize-smaller.fontcolor-secondary', [hintText, buildTooltip(tooltipText)]) : '';
          },
              isSearch = m$1.prop(false),
              categoryCollection = m$1.prop([]),
              categoryId = m$1.prop(),
              findCategory = function findCategory(id) {
              return _$1.find(categoryCollection(), function (c) {
                  return c.id === parseInt(id);
              });
          },
              category = _$1.compose(findCategory, categoryId),
              loadCategories = function loadCategories() {
              return models.category.getPageWithToken(filters({}).order({ name: 'asc' }).parameters()).then(categoryCollection);
          },

          // just small fix when have two scored projects only
          checkForMinScoredProjects = function checkForMinScoredProjects(collection) {
              return _$1.size(_$1.filter(collection, function (x) {
                  return x.score >= 1;
              })) >= 3;
          },

          // Fake projects object to be able to render page while loadding (in case of search)
          projects = m$1.prop({ collection: m$1.prop([]), isLoading: function isLoading() {
                  return true;
              }, isLastPage: function isLastPage() {
                  return true;
              } }),
              loadRoute = function loadRoute() {
              var route = window.location.hash.match(/\#([^\/]*)\/?(\d+)?/),
                  cat = route && route[2] && findCategory(route[2]),
                  filterFromRoute = function filterFromRoute() {
                  var byCategory = filters({
                      category_id: 'eq'
                  });

                  return route && route[1] && filtersMap[route[1]] || cat && { title: cat.name, filter: byCategory.category_id(cat.id) };
              },
                  filter = filterFromRoute() || currentFilter(),
                  search = h.paramByName('pg_search'),
                  searchProjects = function searchProjects() {
                  var l = postgrest$1.loaderWithToken(models.projectSearch.postOptions({ query: search })),
                      page = { // We build an object with the same interface as paginationVM
                      collection: m$1.prop([]),
                      isLoading: l,
                      isLastPage: function isLastPage() {
                          return true;
                      },
                      nextPage: function nextPage() {
                          return false;
                      }
                  };
                  l.load().then(page.collection);
                  return page;
              },
                  loadProjects = function loadProjects() {
                  var pages = postgrest$1.paginationVM(models.project);
                  var parameters = _$1.extend({}, currentFilter().filter.parameters(), filter.filter.order({
                      open_for_contributions: 'desc',
                      state_order: 'asc',
                      state: 'desc',
                      score: 'desc',
                      pledged: 'desc'
                  }).parameters());
                  pages.firstPage(parameters);
                  return pages;
              },
                  loadFinishedProjects = function loadFinishedProjects() {
                  var pages = postgrest$1.paginationVM(models.finishedProject),
                      parameters = _$1.extend({}, currentFilter().filter.parameters(), filter.filter.order({
                      state_order: 'asc',
                      state: 'desc',
                      pledged: 'desc'
                  }).parameters());
                  pages.firstPage(parameters);

                  return pages;
              };

              if (_$1.isString(search) && search.length > 0 && route === null) {
                  isSearch(true);
                  title('Busca ' + search);
                  projects(searchProjects());
              } else if (currentFilter().keyName === 'finished') {
                  isSearch(false);
                  projects(loadFinishedProjects());
              } else {
                  isSearch(false);
                  title(filter.title);
                  if (!_$1.isNull(route) && route[1] == 'finished') {
                      projects(loadFinishedProjects());
                  } else {
                      projects(loadProjects());
                  }
              }
              categoryId(cat && cat.id);
              route || _$1.isString(search) && search.length > 0 ? toggleCategories(false) : toggleCategories(true);
          },
              title = m$1.prop(),
              toggleCategories = h.toggleProp(false, true);

          window.addEventListener('hashchange', function () {
              resetContextFilter();
              loadRoute();
              m$1.redraw();
          }, false);

          // Initial loads
          resetContextFilter();
          models.project.pageSize(9);
          loadCategories().then(loadRoute);

          if (args.filter) {
              currentFilter(filtersMap[args.filter]);
          }

          if (!currentFilter()) {
              currentFilter(filtersMap[defaultFilter]);
          }

          return {
              categories: categoryCollection,
              changeFilter: changeFilter,
              fallbackFilter: fallbackFilter,
              projects: projects,
              category: category,
              title: title,
              hint: hint,
              filtersMap: filtersMap,
              currentFilter: currentFilter,
              projectFiltersVM: projectFiltersVM$$,
              toggleCategories: toggleCategories,
              isSearch: isSearch,
              hasFBAuth: hasFBAuth,
              checkForMinScoredProjects: checkForMinScoredProjects
          };
      },
      view: function view(ctrl, args) {
          var projects_collection = ctrl.projects().collection(),
              projectsCount = projects_collection.length,
              widowProjects = [],
              filterKeyName = ctrl.currentFilter().keyName,
              isContributedByFriendsFilter = filterKeyName === 'contributed_by_friends';

          if (!ctrl.projects().isLoading() && _$1.isEmpty(projects_collection) && !ctrl.isSearch()) {
              if (isContributedByFriendsFilter && !ctrl.hasFBAuth) {} else {
                  ctrl.projectFiltersVM.removeContextFilter(ctrl.currentFilter());
                  ctrl.changeFilter(ctrl.fallbackFilter);
              }
          }

          return m$1('#explore', { config: h.setPageTitle(I18n$1.t('header_html', I18nScope$11())) }, [m$1('.w-section.hero-search', [m$1.component(search), m$1('.w-container.u-marginbottom-10', [m$1('.u-text-center.u-marginbottom-40', [m$1('a#explore-open.link-hidden-white.fontweight-light.fontsize-larger[href="javascript:void(0);"]', { onclick: function onclick() {
                  return ctrl.toggleCategories.toggle();
              } }, ['Explore projetos incríveis ', m$1('span#explore-btn.fa.fa-angle-down' + (ctrl.toggleCategories() ? '.opened' : ''), '')])]), m$1('#categories.category-slider' + (ctrl.toggleCategories() ? '.opened' : ''), [m$1('.w-row.u-marginbottom-30', [_$1.map(ctrl.categories(), function (category) {
              return m$1.component(categoryButton, { category: category });
          })])])])]), m$1('.w-section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-9.w-col-small-8.w-col-tiny-8', [m$1('.fontsize-larger', ctrl.title()), ctrl.hint()]), m$1('.w-col.w-col-3.w-col-small-4.w-col-tiny-4', !ctrl.isSearch() ? m$1('select.w-select.text-field.positive', { onchange: m$1.withAttr('value', ctrl.changeFilter) }, _$1.map(ctrl.projectFiltersVM.getContextFilters(), function (pageFilter, idx) {
              var projects = ctrl.projects(),
                  isSelected = ctrl.currentFilter() == pageFilter;

              return m$1('option[value="' + pageFilter.keyName + '"]', { selected: isSelected }, pageFilter.nicename);
          })) : '')])])]), isContributedByFriendsFilter && _$1.isEmpty(projects_collection) ? !ctrl.hasFBAuth ? m$1.component(UnsignedFriendFacebookConnect) : '' : '', m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-row', _$1.map(projects_collection, function (project, idx) {
              var cardType = 'small',
                  ref = 'ctrse_explore';

              if (ctrl.isSearch()) {
                  ref = 'ctrse_explore_pgsearch';
              } else if (isContributedByFriendsFilter) {
                  ref = 'ctrse_explore_friends';
              } else if (filterKeyName === 'all') {
                  if (project.score >= 1) {
                      if (idx === 0) {
                          cardType = 'big';
                          ref = 'ctrse_explore_featured_big';
                          widowProjects = [projectsCount - 1, projectsCount - 2];
                      } else if (idx === 1 || idx === 2) {
                          if (ctrl.checkForMinScoredProjects(projects_collection)) {
                              cardType = 'medium';
                              ref = 'ctrse_explore_featured_medium';
                              widowProjects = [];
                          } else {
                              cardType = 'big';
                              ref = 'ctrse_explore_featured_big';
                              widowProjects = [projectsCount - 1];
                          }
                      } else {
                          ref = 'ctrse_explore_featured';
                      }
                  }
              }

              return _$1.indexOf(widowProjects, idx) > -1 && !ctrl.projects().isLastPage() ? '' : m$1.component(projectCard, { project: project, ref: ref, type: cardType, showFriends: isContributedByFriendsFilter });
          })), ctrl.projects().isLoading() ? h.loader() : _$1.isEmpty(projects_collection) && ctrl.hasFBAuth ? m$1('.fontsize-base.w-col.w-col-12', 'Nenhum projeto para mostrar.') : ''])])]), m$1('.w-section.u-marginbottom-80', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-2.w-col-push-5', [ctrl.projects().isLastPage() || ctrl.projects().isLoading() || _$1.isEmpty(projects_collection) ? '' : m$1('a.btn.btn-medium.btn-terciary[href=\'#loadMore\']', { onclick: function onclick() {
                  ctrl.projects().nextPage();return false;
              } }, 'Carregar mais')])])])]), m$1('.w-section.section-large.before-footer.u-margintop-80.bg-gray.divider', [m$1('.w-container.u-text-center', [m$1('img.u-marginbottom-20.icon-hero', { src: 'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/56f4414d3a0fcc0124ec9a24_icon-launch-explore.png' }), m$1('h2.fontsize-larger.u-marginbottom-60', 'Lance sua campanha no Catarse!'), m$1('.w-row', [m$1('.w-col.w-col-4.w-col-push-4', [m$1('a.w-button.btn.btn-large', { href: '/start?ref=ctrse_explore' }, 'Aprenda como')])])])])]);
      }
  };

  var menuSearch = {
      view: function view(ctrl, args) {
          return m$1('span#menu-search', [m$1('.w-form.w-hidden-small.w-hidden-tiny.header-search[id=\'discover-form-wrapper\']', [m$1('form.discover-form[accept-charset=\'UTF-8\'][action=\'/pt/explore?ref=ctrse_header\'][id=\'search-form\'][method=\'get\']', [m$1('div', { style: { 'display': 'none' } }, m$1('input[name=\'utf8\'][type=\'hidden\'][value=\'✓\']')), m$1('input.w-input.text-field.negative.prefix.search-input[autocomplete=\'off\'][id=\'pg_search\'][name=\'pg_search\'][placeholder=\'Busque projetos\'][type=\'text\']')]), m$1('.search-pre-result.w-hidden[data-searchpath=\'/pt/auto_complete_projects\']', [m$1('.result', m$1('.u-text-center', m$1('img[alt=\'Loader\'][src=\'/assets/catarse_bootstrap/loader.gif\']'))), m$1('a.btn.btn-small.btn-terciary.see-more-projects[href=\'javascript:void(0);\']', ' ver todos')])]), m$1('a.w-inline-block.w-hidden-small.w-hidden-tiny.btn.btn-dark.btn-attached.postfix[href=\'#\'][id=\'pg_search_submit\']', m$1('img.header-lupa[alt=\'Lupa\'][data-pin-nopin=\'true\'][src=\'/assets/catarse_bootstrap/lupa.png\']'))]);
      }
  };

  var quickProjectList = {
      view: function view(ctrl, args) {
          return m$1('.quickProjectList', _.map(args.projects(), function (project, idx) {
              return m$1('li.u-marginbottom-10', {
                  key: idx
              }, m$1('.w-row', [m$1('.w-col.w-col-3', m$1('img.thumb.small.u-radius[alt=\'Project thumb 01\'][src=\'' + (project.thumb_image || project.video_cover_image) + '\']')), m$1('.w-col.w-col-9', m$1('a.alt-link.fontsize-smaller[href=\'/' + project.permalink + '?ref=ctrse_search_quick\']', {
                  onclick: projectVM.routeToProject(project, args.ref)
              }, '' + project.name))]));
          }), m$1('li.u-margintop-20', m$1('.w-row', [m$1('.w-col.w-col-6', m$1('a.btn.btn-terciary[href=' + args.loadMoreHref + '?ref=ctrse_search_quick]', 'Ver todos')), m$1('.w-col.w-col-6')])));
      }
  };

  var menuProfile = {
      controller: function controller(args) {
          var contributedProjects = m$1.prop(),
              latestProjects = m$1.prop([]),
              userDetails = m$1.prop({}),
              user_id = args.user.user_id;

          userVM.fetchUser(user_id, true, userDetails);
          //userVM.getUserCreatedProjects(user_id).then(latestProjects);
          //userVM.getUserContributedProjects(user_id).then(contributedProjects);

          return {
              contributedProjects: contributedProjects,
              latestProjects: latestProjects,
              userDetails: userDetails,
              toggleMenu: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var user = ctrl.userDetails();

          return m$1('.w-dropdown.user-profile', [m$1('a.w-dropdown-toggle.dropdown-toggle[href=\'javascript:void()\'][id=\'user-menu\']', {
              onclick: ctrl.toggleMenu.toggle
          }, m$1('img.user-avatar[alt=\'Thumbnail - ' + user.name + '\'][height=\'40\'][src=\'' + h.useAvatarOrDefault(user.profile_img_thumbnail) + '\'][width=\'40\']')), ctrl.toggleMenu() ? m$1('nav.w-dropdown-list.dropdown-list.user-menu.w--open[id=\'user-menu-dropdown\']', { style: 'display:block;' }, [m$1('.w-row', [m$1('.w-col.w-col-12', [m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Meu histórico'), m$1('ul.w-list-unstyled.u-marginbottom-20', [m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#contributions\']', 'Histórico de apoio')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#projects\']', 'Projetos criados')), m$1('li.w-hidden-main.w-hidden-medium.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#projects\']', 'Projetos criados'))]), m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Configurações'), m$1('ul.w-list-unstyled.u-marginbottom-20', [m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#about_me\']', 'Sobre você')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#notifications\']', 'Notificações')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#settings\']', 'Dados e endereço')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#billing\']', 'Banco e cartões'))]), m$1('.divider.u-marginbottom-20'), args.user.is_admin_role ? m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Admin') : '', args.user.is_admin_role ? m$1('ul.w-list-unstyled.u-marginbottom-20', [m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/new-admin#/users\']', 'Usuários')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/new-admin\']', 'Apoios')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/admin/financials\']', 'Rel. Financeiros')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/admin/projects\']', 'Admin projetos')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/dbhero\']', 'Dataclips'))]) : '', m$1('.fontsize-mini', 'Seu e-mail de cadastro é: '), m$1('.fontsize-smallest.u-marginbottom-20', [m$1('span.fontweight-semibold', user.email + ' '), m$1('a.alt-link[href=\'/pt/users/' + user.id + '/edit#settings\']', 'alterar e-mail')]), m$1('.divider.u-marginbottom-20'), m$1('a.alt-link[href=\'/pt/logout\']', 'Sair')])])]) :
          //m(`.w-col.w-col-4.w-hidden-small.w-hidden-tiny`,
          //    [
          //        m(`.fontweight-semibold.fontsize-smaller.u-marginbottom-10`,
          //            `Projetos apoiados`
          //        ),
          //        m(`ul.w-list-unstyled.u-marginbottom-20`, ctrl.contributedProjects() ?
          //            _.isEmpty(ctrl.contributedProjects) ? 'Nenhum projeto.' :
          //            m.component(quickProjectList, {
          //                projects: m.prop(_.map(ctrl.contributedProjects(), (contribution) => {
          //                    return {
          //                        project_id: contribution.project_id,
          //                        project_user_id: contribution.project_user_id,
          //                        thumb_image: contribution.project_img,
          //                        video_cover_image: contribution.project_img,
          //                        permalink: contribution.permalink,
          //                        name: contribution.project_name
          //                    };
          //                })),
          //                loadMoreHref: '/pt/users/${user.id}/edit#contributions',
          //                ref: 'user_menu_my_contributions'
          //            }) : 'carregando...'
          //        )
          //    ]
          //),
          //m(`.w-col.w-col-4.w-hidden-small.w-hidden-tiny`,
          //    [
          //        m(`.fontweight-semibold.fontsize-smaller.u-marginbottom-10`,
          //            `Projetos criados`
          //        ),
          //        m(`ul.w-list-unstyled.u-marginbottom-20`, ctrl.latestProjects() ?
          //            _.isEmpty(ctrl.latestProjects) ? 'Nenhum projeto.' :
          //            m.component(quickProjectList, {
          //                projects: ctrl.latestProjects,
          //                loadMoreHref: '/pt/users/${user.id}/edit#contributions',
          //                ref: 'user_menu_my_projects'
          //            }) : 'carregando...'
          //        )
          //    ]
          //)
          '']);
      }
  };

  var menu = {
      controller: function controller(args) {
          var user = h.getUser(),
              menuCss = function menuCss() {
              var dynamicClasses = void 0;

              return (args.menuTransparency ? 'overlayer' : '') + ' ' + (args.withAlert ? 'with-global-alert' : '');
          },
              homeAttrs = function homeAttrs() {
              if (args.absoluteHome) {
                  return {
                      href: h.rootUrl()
                  };
              } else {
                  return {
                      config: m$1.route
                  };
              }
          };

          return {
              user: user,
              menuCss: menuCss,
              homeAttrs: homeAttrs
          };
      },
      view: function view(ctrl, args) {
          return m$1('header.main-header.w-section', {
              class: ctrl.menuCss()
          }, [m$1('.w-clearfix', [m$1('a.header-logo.w-nav-brand[href=\'/?ref=ctrse_header\'][title=\'Catarse\']', ctrl.homeAttrs(), m$1('img[alt=\'Logo big\'][src=\'/assets/catarse_bootstrap/logo_big.png\']')), m$1('a.w-hidden-small.w-hidden-tiny.header-link.w-nav-link[href=\'/start?ref=ctrse_header\']', { config: m$1.route }, 'Comece seu projeto'), m$1('a.w-hidden-small.w-hidden-tiny.header-link.w-nav-link[href=\'/explore?ref=ctrse_header\']', { config: m$1.route }, 'Explore'), m$1.component(menuSearch), ctrl.user ? m$1.component(menuProfile, { user: ctrl.user }) : m$1('a.w-nav-link.header-link.w-nav-link.btn-edit.u-right[href=\'/pt/login?ref=ctrse_header\']', 'Login'), m$1('a.w-nav-link.w-hidden-small.w-hidden-tiny.header-link.w-nav-link.u-right[href=\'http://blog.catarse.me?ref=ctrse_header\'][target=\'_blank\']', { style: 'float: right;' }, 'Blog')]), m$1('.w-hidden-main.w-hidden-medium.header-controls-mobile', [m$1('a.header-link.w-nav-link[href=\'/pt/start?ref=ctrse_header\']', { onclick: function onclick() {
                  return m$1.route('/start');
              } }, 'Comece seu projeto'), m$1('a.header-link.w-nav-link[href=\'/pt/explore?ref=ctrse_header\']', { onclick: function onclick() {
                  return m$1.route('/explore');
              } }, 'Explore')])]);
      }
  };

  var homeVM = function homeVM() {
      var i18nStart = I18n$1.translations[I18n$1.currentLocale()].projects.home,
          banners = i18nStart.banners;

      return {
          banners: banners
      };
  };

  var slider = {
      controller: function controller(args) {
          var interval = void 0;
          var selectedSlideIdx = m$1.prop(0),
              translationSize = m$1.prop(1600),
              sliderTime = args.sliderTime || 6500,
              decrementSlide = function decrementSlide() {
              if (selectedSlideIdx() > 0) {
                  selectedSlideIdx(selectedSlideIdx() - 1);
              } else {
                  selectedSlideIdx(args.slides.length - 1);
              }
          },
              incrementSlide = function incrementSlide() {
              if (selectedSlideIdx() < args.slides.length - 1) {
                  selectedSlideIdx(selectedSlideIdx() + 1);
              } else {
                  selectedSlideIdx(0);
              }
          },
              startSliderTimer = function startSliderTimer() {
              interval = setInterval(function () {
                  incrementSlide();
                  m$1.redraw();
              }, sliderTime);
          },
              resetSliderTimer = function resetSliderTimer() {
              clearInterval(interval);
              startSliderTimer();
          },
              config = function config(el, isInitialized, context) {
              if (!isInitialized) {
                  translationSize(Math.max(document.documentElement.clientWidth, window.innerWidth || 0));
                  m$1.redraw();
              };

              context.onunload = function () {
                  return clearInterval(interval);
              };
          };

          startSliderTimer();

          return {
              config: config,
              selectedSlideIdx: selectedSlideIdx,
              translationSize: translationSize,
              decrementSlide: decrementSlide,
              incrementSlide: incrementSlide,
              resetSliderTimer: resetSliderTimer
          };
      },
      view: function view(ctrl, args) {
          var slideClass = args.slideClass || '',
              wrapperClass = args.wrapperClass || '',
              effect = args.effect || 'slide',
              sliderClick = function sliderClick(fn, param) {
              fn(param);
              ctrl.resetSliderTimer();
              args.onchange && args.onchange();
          },
              effectStyle = function effectStyle(idx, translateStr) {
              var slideFx = 'transform: ' + translateStr + '; -webkit-transform: ' + translateStr + '; -ms-transform:' + translateStr,
                  fadeFx = idx === ctrl.selectedSlideIdx() ? 'opacity: 1; visibility: visible;' : 'opacity: 0; visibility: hidden;';

              return effect === 'fade' ? fadeFx : slideFx;
          };

          return m$1('.w-slider.' + wrapperClass, {
              config: ctrl.config
          }, [m$1('.fontsize-larger', args.title), m$1('.w-slider-mask', [_$1.map(args.slides, function (slide, idx) {
              var translateValue = (idx - ctrl.selectedSlideIdx()) * ctrl.translationSize(),
                  translateStr = 'translate3d(' + translateValue + 'px, 0, 0)';

              return m$1('.slide.w-slide.' + slideClass, {
                  style: effectStyle(idx, translateStr) + ' ' + slide.customStyle
              }, [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-8.w-col-push-2', slide.content)])])]);
          }), m$1('#slide-prev.w-slider-arrow-left.w-hidden-small.w-hidden-tiny', {
              onclick: function onclick() {
                  return sliderClick(ctrl.decrementSlide);
              }
          }, [m$1('.w-icon-slider-left.fa.fa-lg.fa-angle-left.fontcolor-terciary')]), m$1('#slide-next.w-slider-arrow-right.w-hidden-small.w-hidden-tiny', {
              onclick: function onclick() {
                  return sliderClick(ctrl.incrementSlide);
              }
          }, [m$1('.w-icon-slider-right.fa.fa-lg.fa-angle-right.fontcolor-terciary')]), m$1('.w-slider-nav.w-slider-nav-invert.w-round.slide-nav', _$1(args.slides.length).times(function (idx) {
              return m$1('.slide-bullet.w-slider-dot' + (ctrl.selectedSlideIdx() === idx ? '.w-active' : ''), {
                  onclick: function onclick() {
                      return sliderClick(ctrl.selectedSlideIdx, idx);
                  }
              });
          }))])]);
      }
  };

  var contributionActivities = {
      controller: function controller(args) {
          var interval = void 0;
          var collection = m$1.prop([]),
              resource = m$1.prop(),
              collectionIndex = m$1.prop(0),
              collectionSize = m$1.prop(),
              collectionL = postgrest$1.loader(models.contributionActivity.getPageOptions()),
              nextResource = function nextResource() {
              if (collectionIndex() + 1 > collectionSize()) {
                  collectionIndex(0);
              }

              collectionIndex(collectionIndex() + 1);
              resource(collection()[collectionIndex()]);
              m$1.redraw();
          },
              startConfig = function startConfig(el, isinitialized, context) {
              context.onunload = function () {
                  return clearInterval(interval);
              };
          },
              startTimer = function startTimer() {
              interval = setInterval(nextResource, 15000);
          };

          collectionL.load().then(function (data) {
              collection(data);
              collectionSize(data.length);
              resource(_$1.first(data));
          });

          startTimer();

          return {
              collection: collection,
              collectionL: collectionL,
              resource: resource,
              collectionSize: collectionSize
          };
      },
      view: function view(ctrl, args) {
          if (!ctrl.collectionL() && !_$1.isUndefined(ctrl.resource()) && (ctrl.collectionSize() || 0) > 0) {
              var resource = ctrl.resource(),
                  elapsed = h.translatedTime(resource.elapsed_time),
                  project_link = 'https://catarse.me/' + resource.permalink + '?ref=ctrse_home_activities';

              return m$1('.w-section.section.bg-backs-carrosel', { config: ctrl.startConfig }, [m$1('.w-container.u-text-center.fontcolor-negative', [m$1('.fontsize-large.u-marginbottom-30', 'há ' + parseInt(elapsed.total) + ' ' + elapsed.unit + '...'), m$1('.w-clearfix.w-inline-block.u-marginbottom-10', [m$1('a', { href: project_link }, [m$1('img.thumb-author.u-round', { src: resource.thumbnail, width: 80 })]), m$1('img.thumb-author.u-round', { src: 'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/56d646f7710a7126338b46ff_logo-catarse-back-carrosel.png' }), m$1('a', { href: project_link }, [m$1('img.thumb-author.u-round', { src: resource.project_thumbnail, width: 80, style: 'margin-right: 0;' })])]), m$1('.fontsize-large', resource.name + ' apoiou'), m$1('.fontsize-larger', [m$1('a.link-hidden-white', { href: project_link }, resource.project_name)])])]);
          } else {
              return m$1('div');
          }
      }
  };

  var blogBanner = {
      controller: function controller(args) {
          var posts = h.getBlogPosts();

          return { posts: posts };
      },
      view: function view(ctrl, args) {

          return m$1('section.section-large.bg-gray.before-footer[id=\'blog\']', m$1('.w-container', [m$1('.u-text-center', [m$1('a[href=\'http://blog.catarse.me\'][target=\'blank\']', m$1('img.u-marginbottom-10[alt=\'Icon blog\'][src=\'/assets/icon-blog.png\']')), m$1('.fontsize-large.u-marginbottom-60.text-success', m$1('a.link-hidden-success[href=\'http://blog.catarse.me\'][target=\'__blank\']', 'Blog do Catarse'))]), m$1('.w-row', _$1.map(ctrl.posts, function (post) {
              return m$1('.w-col.w-col-4.col-blog-post', [m$1('a.link-hidden.fontweight-semibold.fontsize-base.u-marginbottom-10[href="' + post[1][1] + '"][target=\'__blank\']', post[0][1]), m$1('.fontsize-smaller.fontcolor-secondary.u-margintop-10', m$1.trust(h.strip(post[6][1].substr(0, 130)) + '...'))]);
          }))]));
      }
  };

  var footer = {
      view: function view() {
          return m$1('footer.main-footer.main-footer-neg', [m$1('section.w-container', m$1('.w-row', [m$1('.w-col.w-col-9', m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.w-hidden-tiny', [m$1('.footer-full-signature-text.fontsize-small', 'Bem-vindo'), m$1('a.link-footer[href=\'http://crowdfunding.catarse.me/paratodos?ref=ctrse_footer\']', ['Como funciona', m$1.trust('&nbsp;'), m$1('span.badge.badge-success', 'Novidade‍')]), m$1('a.link-footer[href=\'https://www.catarse.me/pt/flex?ref=ctrse_footer\']', ' Catarse flex'), m$1('a.link-footer[href=\'https://www.catarse.me/pt/team?ref=ctrse_footer\']', [' Nosso time ', m$1.trust('&lt;'), '3']), m$1('a.link-footer[href=\'http://facebook.com/catarse.me\']', ' Facebook'), m$1('a.link-footer[href=\'http://twitter.com/catarse\']', ' Twitter'), m$1('a.link-footer[href=\'http://instagram.com/catarse\']', ' Instagram'), m$1('a.link-footer[href=\'http://github.com/catarse/catarse\']', ' Github'), m$1('a.link-footer[href=\'http://blog.catarse.me\']', ' Blog'), m$1('a.link-footer[href=\'https://www.catarse.me/pt/jobs\']', ' Trabalhe conosco')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.footer-full-firstcolumn', [m$1('.footer-full-signature-text.fontsize-small', 'Ajuda'), m$1('a.zendesk_widget.link-footer[href=\'https://equipecatarse.zendesk.com/account/dropboxes/20298537\']', ' Contato'), m$1('a.link-footer[href=\'http://crowdfunding.catarse.me/nossa-taxa?ref=ctrse_footer\']', ['Nossa Taxa', m$1.trust('&nbsp;'), m$1('span.badge.badge-success', 'Novidade‍')]), m$1('a.link-footer[href=\'https://www.catarse.me/pt/press?ref=ctrse_footer\']', ' Imprensa'), m$1('a.link-footer[href=\'http://suporte.catarse.me?ref=ctrse_footer/\']', ' Central de Suporte'), m$1('a.link-footer[href=\'https://www.catarse.me/pt/guides?ref=ctrse_footer\']', ' Guia dos Realizadores'), m$1('a.link-footer[href=\'http://pesquisa.catarse.me/\']', ' Retrato FC Brasil 2013/2014'), m$1('a.link-footer[href=\'/pt/terms-of-use\']', ' Termos de uso'), m$1('a.link-footer[href=\'/pt/privacy-policy\']', ' Política de privacidade')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.footer-full-lastcolumn', [m$1('.footer-full-signature-text.fontsize-small', 'Navegue'), m$1('a.w-hidden-small.w-hidden-tiny.link-footer[href=\'/pt/start?ref=ctrse_footer\']', ' Comece seu projeto'), m$1('a.link-footer[href=\'/pt/explore?ref=ctrse_footer\']', ' Explore projetos'), m$1('a.w-hidden-main.w-hidden-medium.w-hidden-small.link-footer[href=\'http://blog.catarse.me?ref=ctrse_footer\']', ' Blog'), m$1('a.w-hidden-main.w-hidden-medium.w-hidden-small.link-footer[href=\'https://equipecatarse.zendesk.com/account/dropboxes/20298537\']', ' Contato'), m$1('a.w-hidden-tiny.link-footer[href=\'/pt/explore?filter=score&ref=ctrse_footer\']', ' Populares'), m$1('a.w-hidden-tiny.link-footer[href=\'/pt/explore?filter=online&ref=ctrse_footer\']', ' No ar'), m$1('a.w-hidden-tiny.link-footer[href=\'/pt/explore?filter=finished&ref=ctrse_footer\']', ' Finalizados')])])), m$1('.w-col.w-col-3.column-social-media-footer', [m$1('.footer-full-signature-text.fontsize-small', 'Assine nossa news'), m$1('.w-form', m$1('form[accept-charset=\'UTF-8\'][action=\'' + h.getMailchimpUrl() + '\'][id=\'mailee-form\'][method=\'post\']', [m$1('.w-form.footer-newsletter', m$1('input.w-input.text-field.prefix[id=\'EMAIL\'][label=\'email\'][name=\'EMAIL\'][placeholder=\'Digite seu email\'][type=\'email\']')), m$1('button.w-inline-block.btn.btn-edit.postfix.btn-attached[style="padding:0;"]', m$1('img.footer-news-icon[alt=\'Icon newsletter\'][src=\'/assets/catarse_bootstrap/icon-newsletter.png\']'))])), m$1('.footer-full-signature-text.fontsize-small', 'Redes sociais'), m$1('.w-widget.w-widget-facebook.u-marginbottom-20', m$1('.facebook', m$1('.fb-like[data-colorscheme=\'dark\'][data-href=\'http://facebook.com/catarse.me\'][data-layout=\'button_count\'][data-send=\'false\'][data-show-faces=\'false\'][data-title=\'\'][data-width=\'260\']'))), m$1('.w-widget.w-widget-twitter', [m$1('a.twitter-follow-button[href="httṕ://twitter.com/catarse"][data-button="blue"][data-text-color="#FFFFFF][data-link-color="#FFFFFF"][data-width="224px"]')]), m$1('.u-margintop-30', [m$1('.footer-full-signature-text.fontsize-small', 'Change language'), m$1('[id=\'google_translate_element\']')])])])), m$1('.w-container', m$1('.footer-full-copyleft', [m$1('img.u-marginbottom-20[alt=\'Logo footer\'][src=\'/assets/logo-footer.png\']'), m$1('.lineheight-loose', m$1('a.link-footer-inline[href=\'http://github.com/catarse/catarse\']', 'Feito com amor | 2016 | Open source'))]))]);
      }
  };

  var I18nScope$12 = _$1.partial(h.i18nScope, 'projects.home');

  var projectsHome = {
      controller: function controller(args) {
          var sample6 = _$1.partial(_$1.sample, _$1, 6),
              loader = postgrest$1.loaderWithToken,
              project = models.project,
              filters = projectFiltersVM().filters,
              userFriendVM = postgrest$1.filtersVM({ user_id: 'eq' }),
              friendListVM = postgrest$1.paginationVM(models.userFriend, 'user_id.desc', {
              'Prefer': 'count=exact'
          }),
              currentUser = h.getUser(),
              hasFBAuth = currentUser.has_fb_auth,
              vm = homeVM();

          project.pageSize(20);

          userFriendVM.user_id(currentUser.user_id);

          if (hasFBAuth && !friendListVM.collection().length) {
              friendListVM.firstPage(userFriendVM.parameters());
          }

          var collections = _$1.map(['score', 'contributed_by_friends'], function (name) {
              var f = filters[name],
                  cLoader = loader(project.getPageOptions(_$1.extend({}, { order: 'score.desc' }, f.filter.parameters()))),
                  collection = m$1.prop([]);

              cLoader.load().then(_$1.compose(collection, sample6));

              return {
                  title: f.nicename,
                  hash: name === 'score' ? 'all' : name,
                  collection: collection,
                  loader: cLoader,
                  showFriends: name === 'contributed_by_friends'
              };
          });

          return {
              collections: collections,
              slidesContent: vm.banners,
              hasFBAuth: hasFBAuth
          };
      },
      view: function view(ctrl) {
          var slides = function slides() {
              return _$1.map(ctrl.slidesContent, function (slide) {
                  var customStyle = 'background-image: url(' + slide.image + ');';
                  var content = m$1('.w-container.u-text-center', [m$1('.w-row.u-marginbottom-40', [m$1('h1.fontcolor-negative.fontsize-megajumbo.u-marginbottom-20', slide.title), m$1('h2.fontcolor-negative.fontsize-large', m$1.trust(slide.subtitle))]), m$1('a.btn.btn-large.u-marginbottom-10.btn-inline', { href: slide.link }, slide.cta)]);

                  return {
                      content: content,
                      customStyle: customStyle
                  };
              });
          };

          return m$1('#projects-home-component', { config: h.setPageTitle(I18n$1.t('header_html', I18nScope$12())) }, [
          // m.component(menu, {transparent: true}),
          m$1.component(slider, {
              slides: slides(),
              effect: 'fade',
              slideClass: 'hero-slide start',
              wrapperClass: 'hero-full hero-full-slide',
              sliderTime: 10000
          }), _$1.map(ctrl.collections, function (collection) {
              return m$1.component(projectRow, {
                  collection: collection,
                  title: collection.title,
                  ref: 'home_' + (collection.hash === 'all' ? 'score' : collection.hash),
                  showFriends: collection.showFriends
              });
          }),
          // m.component(contributionActivities),
          !ctrl.hasFBAuth ? m$1.component(UnsignedFriendFacebookConnect, { largeBg: true }) : '', m$1.component(blogBanner)
          // m.component(footer, {expanded: true}),
          // m.component(contributionActivities)
          ]);
      }
  };

  var projectShareBox = {
      controller: function controller() {
          return {
              displayEmbed: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('.pop-share', {
              style: 'display: block;'
          }, [m$1('.w-hidden-main.w-hidden-medium.w-clearfix', [m$1('a.btn.btn-small.btn-terciary.btn-inline.u-right', {
              onclick: args.displayShareBox.toggle
          }, 'Fechar'), m$1('.fontsize-small.fontweight-semibold.u-marginbottom-30', 'Compartilhe este projeto')]), m$1('.w-widget.w-widget-twitter.w-hidden-small.w-hidden-tiny.share-block', [m$1('iframe[allowtransparency="true"][width="120px"][height="22px"][frameborder="0"][scrolling="no"][src="//platform.twitter.com/widgets/tweet_button.8d007ddfc184e6776be76fe9e5e52d69.en.html#_=1442425984936&count=horizontal&dnt=false&id=twitter-widget-1&lang=en&original_referer=https%3A%2F%2Fwww.catarse.me%2Fpt%2F' + args.project().permalink + '&size=m&text=Confira%20o%20projeto%20' + args.project().name + '%20no%20%40catarse&type=share&url=https%3A%2F%2Fwww.catarse.me%2Fpt%2F' + args.project().permalink + '%3Fref%3Dtwitter%26utm_source%3Dtwitter.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share&via=catarse"]')]), m$1('a.w-hidden-small.widget-embed.w-hidden-tiny.fontsize-small.link-hidden.fontcolor-secondary[href="js:void(0);"]', {
              onclick: ctrl.displayEmbed.toggle
          }, '< embed >'), ctrl.displayEmbed() ? m$1('.embed-expanded.u-margintop-30', [m$1('.fontsize-small.fontweight-semibold.u-marginbottom-20', 'Insira um widget em seu site'), m$1('.w-form', [m$1('input.w-input[type="text"][value="<iframe frameborder="0" height="314px" src="https://www.catarse.me/pt/projects/' + args.project().project_id + '/embed" width="300px" scrolling="no"></iframe>"]')]), m$1('.card-embed', [m$1('iframe[frameborder="0"][height="350px"][src="/projects/' + args.project().project_id + '/embed"][width="300px"][scrolling="no"]')])]) : '', args.project().permalink ? m$1.component(facebookButton, {
              mobile: true,
              url: 'https://www.catarse.me/' + args.project().permalink + '?ref=facebook&utm_source=facebook.com&utm_medium=social&utm_campaign=project_share'
          }) : '', m$1('a.w-hidden-main.w-hidden-medium.btn.btn-medium.btn-tweet.u-marginbottom-20[href="http://twitter.com/?status=Acabei%20de%20apoiar%20o%20projeto%20' + args.project().name + '%20https://www.catarse.me/' + args.project().permalink + '%3Fref%3Dtwitter%26utm_source%3Dtwitter.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share"][target="_blank"]', [m$1('span.fa.fa-twitter'), ' Tweet']), m$1('a.w-hidden-main.w-hidden-medium.btn.btn-medium[data-action="share/whatsapp/share"]', {
              href: 'whatsapp://send?text=' + encodeURIComponent('https://www.catarse.me/' + args.project().permalink + '/?ref=whatsapp&utm_source=whatsapp&utm_medium=social&utm_campaign=project_share')
          }, [m$1('span.fa.fa-whatsapp'), ' Whatsapp'])]);
      }
  };

  var addressTag = {
      view: function view(ctrl, args) {
          var project = args.project,
              address = project().address || {
              state_acronym: '',
              city: ''
          };

          return !_.isNull(address) ? m$1('a.btn.btn-inline.btn-small.btn-transparent.link-hidden-light.u-marginbottom-10[href="/pt/explore?pg_search=' + address.state_acronym + '"]', {
              onclick: h.analytics.event({
                  cat: 'project_view',
                  act: 'project_location_link',
                  lbl: address.city + ' ' + address.state_acronym,
                  project: project()
              })
          }, [m$1('span.fa.fa-map-marker'), ' ' + address.city + ', ' + address.state_acronym]) : '';
      }
  };

  var categoryTag = {
      view: function view(ctrl, args) {
          var project = args.project;

          return project ? m$1('a.btn.btn-inline.btn-small.btn-transparent.link-hidden-light[href="/pt/explore#by_category_id/' + project().category_id + '"]', {
              onclick: h.analytics.event({
                  cat: 'project_view',
                  act: 'project_category_link',
                  lbl: project().category_name,
                  project: project()
              })
          }, [m$1('span.fa.fa-tag'), ' ', project().category_name]) : '';
      }
  };

  var projectHighlight = {
      controller: function controller() {
          return {
              displayShareBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1('#project-highlight', [project().video_embed_url ? m$1('.w-embed.w-video.project-video', {
              style: 'min-height: 240px;'
          }, [m$1('iframe.embedly-embed[itemprop="video"][src="' + project().video_embed_url + '"][frameborder="0"][allowFullScreen]')]) : m$1('.project-image', {
              style: 'background-image:url(\'' + (project().original_image || project().project_img) + '\');'
          }), m$1('.w-hidden-small.w-hidden-tiny', [m$1.component(addressTag, { project: project }), m$1.component(categoryTag, { project: project })]), m$1('.project-blurb', project().headline), m$1('.project-share.w-hidden-small.w-hidden-tiny', m$1('.u-marginbottom-30.u-text-center-small-only', [m$1('.w-inline-block.fontcolor-secondary.fontsize-smaller.u-marginright-20', 'Compartilhar:'), project().permalink ? m$1.component(facebookButton, {
              url: 'https://www.catarse.me/' + project().permalink + '?ref=facebook&utm_source=facebook.com&utm_medium=social&utm_campaign=project_share'
          }) : '', project().permalink ? m$1.component(facebookButton, {
              messenger: true,
              url: 'https://www.catarse.me/' + project().permalink + '?ref=facebook&utm_source=facebook.com&utm_medium=messenger&utm_campaign=project_share'
          }) : '', m$1('button#more-share.btn.btn-inline.btn-medium.btn-terciary', {
              style: {
                  'transition': 'all 0.5s ease 0s'
              },
              onclick: ctrl.displayShareBox.toggle
          }, ['···', ' Mais']), ctrl.displayShareBox() ? m$1(projectShareBox, {
              project: project,
              displayShareBox: ctrl.displayShareBox
          }) : '']))]);
      }
  };

  var projectMode = {
      view: function view(ctrl, args) {
          var project = args.project(),
              mode = project.mode,
              modeImgSrc = mode === 'aon' ? '/assets/aon-badge.png' : '/assets/flex-badge.png',
              modeTitle = mode === 'aon' ? 'Campanha Tudo-ou-nada ' : 'Campanha Flexível ',
              goal = _$1.isNull(project.goal) ? 'não definida' : h.formatNumber(project.goal),
              buildTooltip = function buildTooltip(el) {
              return m$1.component(tooltip, {
                  el: el,
                  text: mode === 'aon' ? 'Somente receberá os recursos se atingir ou ultrapassar a meta até o dia ' + h.momentify(project.zone_expires_at, 'DD/MM/YYYY') + '.' : 'O realizador receberá todos os recursos quando encerrar a campanha, mesmo que não tenha atingido esta meta.',
                  width: 280
              });
          };

          return m$1('#' + mode + '.w-row', [m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [!_$1.isEmpty(project) ? m$1('img[src="' + modeImgSrc + '"][width=\'30\']') : '']), m$1('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', [m$1('.fontsize-base.fontweight-semibold', 'Meta R$ ' + h.selfOrEmpty(goal, '--')), m$1('.w-inline-block.fontsize-smallest._w-inline-block', [!_$1.isEmpty(project) ? modeTitle : '', buildTooltip('span.w-inline-block.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary')])])]);
      }
  };

  var projectReminder = {
      controller: function controller(args) {
          var l = m$1.prop(false);
          var project = args.project,
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              storeReminderName = 'reminder',
              popNotification = m$1.prop(false),
              submitReminder = function submitReminder() {
              if (!h.getUser()) {
                  h.storeAction(storeReminderName, project().project_id);
                  return h.navigateToDevise();
              }
              var loaderOpts = project().in_reminder ? models.projectReminder.deleteOptions(filterVM.parameters()) : models.projectReminder.postOptions({
                  project_id: project().project_id
              });
              l = postgrest$1.loaderWithToken(loaderOpts);

              l.load().then(function () {
                  project().in_reminder = !project().in_reminder;

                  if (project().in_reminder) {
                      popNotification(true);
                      setTimeout(function () {
                          popNotification(false);
                          m$1.redraw();
                      }, 5000);
                  } else {
                      popNotification(false);
                  }
              });
          };

          if (h.callStoredAction(storeReminderName) == project().project_id) {
              submitReminder();
          }

          filterVM.project_id(project().project_id);

          return {
              l: l,
              submitReminder: submitReminder,
              popNotification: popNotification
          };
      },
      view: function view(ctrl, args) {
          var mainClass = args.type === 'button' ? '' : '.u-text-center.u-marginbottom-30',
              buttonClass = args.type === 'button' ? 'w-button btn btn-terciary btn-no-border' : 'btn-link link-hidden fontsize-small',
              hideTextOnMobile = args.hideTextOnMobile || false,
              project = args.project,
              onclickFunc = h.analytics.event({ cat: 'project_view', act: 'project_floatingreminder_click', project: project() }, ctrl.submitReminder);

          return m$1('#project-reminder' + mainClass, [m$1('a.btn.btn-small.btn-terciary.w-hidden-main.w-hidden-medium[data-ix=\'popshare\'][href=\'#\']', {
              onclick: onclickFunc
          }, project().in_reminder ? [m$1('span.fa.fa-heart'), ' Lembrete ativo'] : [m$1('span.fa.fa-heart-o'), ' Lembrar-me']), m$1('button[class="w-hidden-small w-hidden-tiny ' + buttonClass + ' ' + (project().in_reminder ? 'link-hidden-success' : 'fontcolor-secondary') + ' fontweight-semibold"]', {
              onclick: onclickFunc
          }, [ctrl.l() ? h.loader() : project().in_reminder ? m$1('span.fa.fa-heart') : m$1('span.fa.fa-heart-o')]), ctrl.popNotification() ? m$1.component(popNotification, {
              message: 'Ok! Vamos te mandar um lembrete por e-mail 48 horas antes do fim da campanha'
          }) : '']);
      }
  };

  var ownerMessageContent = {
      controller: function controller(args) {
          var l = m$1.prop(false),
              sendSuccess = m$1.prop(false),
              submitDisabled = m$1.prop(false),

          //sets default values when user is not logged in
          user = h.getUser() || { name: '', email: '' },
              from_name = m$1.prop(user.name),
              from_email = m$1.prop(user.email),
              content = m$1.prop('');

          var sendMessage = function sendMessage() {
              if (l()) {
                  return false;
              }
              submitDisabled(true);
              content(content().split('\n').join('<br />'));

              var loaderOpts = models.directMessage.postOptions({
                  from_name: from_name(),
                  from_email: from_email(),
                  user_id: h.getUser().user_id,
                  content: content(),
                  project_id: h.getCurrentProject().project_id,
                  to_user_id: h.getCurrentProject().project_user_id
              });

              l = postgrest.loaderWithToken(loaderOpts);

              l.load().then(sendSuccess(true));

              submitDisabled(false);
              return false;
          };

          return {
              sendMessage: sendMessage,
              submitDisabled: submitDisabled,
              sendSuccess: sendSuccess,
              userDetails: args,
              from_name: from_name,
              from_email: from_email,
              content: content,
              l: l
          };
      },
      view: function view(ctrl, args) {
          var successMessage = m$1('.modal-dialog-content.u-text-center', [m$1('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m$1('p.fontsize-large', 'Sua mensagem foi enviada com sucesso para ' + ctrl.userDetails().name + '. Você vai receber uma cópia no seu email e pode seguir a conversa por lá!')]),
              contactForm = [m$1('.modal-dialog-content', [m$1('.w-form', [m$1('form', { onsubmit: h.validate().submit([{
                  prop: ctrl.from_name,
                  rule: 'text'
              }, {
                  prop: ctrl.from_email,
                  rule: 'email'
              }, {
                  prop: ctrl.content,
                  rule: 'text'
              }], ctrl.sendMessage) }, [m$1('.w-row', [m$1('.w-col.w-col-6.w-sub-col', [m$1('label.fontsize-smaller', 'Seu nome'), m$1('input.w-input.text-field[value=\'' + ctrl.from_name() + '\'][type=\'text\'][required=\'required\']', {
              onchange: m$1.withAttr('value', ctrl.from_name),
              class: h.validate().hasError(ctrl.from_name) ? 'error' : ''
          })]), m$1('.w-col.w-col-6', [m$1('label.fontsize-smaller', 'Seu email'), m$1('input.w-input.text-field[value=\'' + ctrl.from_email() + '\'][type=\'text\'][required=\'required\']', {
              onchange: m$1.withAttr('value', ctrl.from_email),
              class: h.validate().hasError(ctrl.from_email) ? 'error' : ''
          })])]), m$1('label', 'Mensagem'), m$1('textarea.w-input.text-field.height-small[required=\'required\']', {
              onchange: m$1.withAttr('value', ctrl.content),
              class: h.validate().hasError(ctrl.content) ? 'error' : ''
          }), m$1('.u-marginbottom-10.fontsize-smallest.fontcolor-terciary', 'Você receberá uma cópia desta mensagem em seu email.'), m$1('.w-row', h.validationErrors().length ? _$1.map(h.validationErrors(), function (errors) {
              return m$1('span.fontsize-smallest.text-error', [m$1('span.fa.fa-exclamation-triangle'), ' ' + errors.message, m$1('br')]);
          }) : ''), m$1('.modal-dialog-nav-bottom', m$1('.w-row', m$1('.w-col.w-col-6.w-col-push-3', !ctrl.l() ? m$1('input.w-button.btn.btn-large[type="submit"][value="Enviar mensagem"]', { disabled: ctrl.submitDisabled() }) : h.loader())))])])])];

          return m$1('div', [m$1('.modal-dialog-header', m$1('.fontsize-large.u-text-center', 'Enviar mensagem')), ctrl.sendSuccess() ? successMessage : contactForm]);
      }
  };

  var projectUserCard = {
      controller: function controller(args) {
          return { displayModal: h.toggleProp(false, true) };
      },
      view: function view(ctrl, args) {
          var project = args.project;
          var contactModalC = [ownerMessageContent, args.userDetails];
          var userDetail = args.userDetails();

          return m$1('#user-card', !userDetail ? 'carregando...' : m$1('.u-marginbottom-30.u-text-center-small-only', [ctrl.displayModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: contactModalC
          }) : '', m$1('.w-row', [m$1('.w-col.w-col-4', [m$1('img.thumb.u-marginbottom-30.u-round[width="100"][itemprop="image"][src="' + userDetail.profile_img_thumbnail + '"]')]), m$1('.w-col.w-col-8', [m$1('.fontsize-small.link-hidden.fontweight-semibold.u-marginbottom-10.lineheight-tight[itemprop="name"]', [m$1('a.link-hidden[href="/users/' + userDetail.id + '"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_link', lbl: userDetail.id, project: project() }) }, userDetail.name)]), m$1('.fontsize-smallest', [h.pluralize(userDetail.total_published_projects, ' criado', ' criados'), m$1.trust('&nbsp;&nbsp;|&nbsp;&nbsp;'), h.pluralize(userDetail.total_contributed_projects, ' apoiado', ' apoiados')]), m$1('ul.w-hidden-tiny.w-hidden-small.w-list-unstyled.fontsize-smaller.fontweight-semibold.u-margintop-20.u-marginbottom-20', [!_$1.isEmpty(userDetail.facebook_link) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="' + userDetail.facebook_link + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_fb', lbl: userDetail.facebook_link, project: project() }) }, 'Perfil no Facebook')]) : '', !_$1.isEmpty(userDetail.twitter_username) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="https://twitter.com/' + userDetail.twitter_username + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_twitter', lbl: userDetail.twitter_username, project: project() }) }, 'Perfil no Twitter')]) : '', _$1.map(userDetail.links, function (link) {
              var parsedLink = h.parseUrl(link);

              return !_$1.isEmpty(parsedLink.hostname) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="' + link + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_otherlinks', lbl: link, project: project() }) }, parsedLink.hostname)]) : '';
          })]), !_$1.isEmpty(userDetail) ? [m$1('a.w-button.btn.btn-terciary.btn-small.btn-inline[href=\'javascript:void(0);\']', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_sendmsg', lbl: userDetail.id, project: project() }, ctrl.displayModal.toggle) }, 'Enviar mensagem')] : '', args.project().is_admin_role ? m$1('p', userDetail.email) : ''])])]));
      }
  };

  var I18nScope$13 = _$1.partial(h.i18nScope, 'projects.project_sidebar');

  var projectSidebar = {
      controller: function controller(args) {
          var project = args.project,
              animateProgress = function animateProgress(el, isInitialized) {
              if (!isInitialized) {
                  (function () {
                      var animation = void 0,
                          progress = 0,
                          pledged = 0,
                          contributors = 0,
                          pledgedIncrement = project().pledged / project().progress,
                          contributorsIncrement = project().total_contributors / project().progress;

                      var progressBar = document.getElementById('progressBar'),
                          pledgedEl = document.getElementById('pledged'),
                          contributorsEl = document.getElementById('contributors'),
                          animate = function animate() {
                          animation = setInterval(incrementProgress, 28);
                      },
                          incrementProgress = function incrementProgress() {
                          if (progress <= parseInt(project().progress)) {
                              progressBar.style.width = progress + '%';
                              pledgedEl.innerText = 'R$ ' + h.formatNumber(pledged);
                              contributorsEl.innerText = parseInt(contributors) + ' pessoas';
                              el.innerText = progress + '%';
                              pledged = pledged + pledgedIncrement;
                              contributors = contributors + contributorsIncrement;
                              progress = progress + 1;
                          } else {
                              clearInterval(animation);
                          }
                      };

                      setTimeout(function () {
                          animate();
                      }, 1800);
                  })();
              }
          };

          return {
              animateProgress: animateProgress,
              displayShareBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              elapsed = project().elapsed_time,
              remaining = project().remaining_time,
              displayCardClass = function displayCardClass() {
              var states = {
                  'waiting_funds': 'card-waiting',
                  'successful': 'card-success',
                  'failed': 'card-error',
                  'draft': 'card-dark',
                  'in_analysis': 'card-dark',
                  'approved': 'card-dark'
              };

              return states[project().state] ? 'card u-radius zindex-10 ' + states[project().state] : '';
          },
              displayStatusText = function displayStatusText() {
              var states = {
                  'approved': I18n$1.t('display_status.approved', I18nScope$13()),
                  'online': h.existy(project().zone_expires_at) && project().open_for_contributions ? I18n$1.t('display_status.online', I18nScope$13({ date: h.momentify(project().zone_expires_at) })) : '',
                  'failed': I18n$1.t('display_status.failed', I18nScope$13({ date: h.momentify(project().zone_expires_at), goal: project().goal })),
                  'rejected': I18n$1.t('display_status.rejected', I18nScope$13()),
                  'in_analysis': I18n$1.t('display_status.in_analysis', I18nScope$13()),
                  'successful': I18n$1.t('display_status.successful', I18nScope$13({ date: h.momentify(project().zone_expires_at) })),
                  'waiting_funds': I18n$1.t('display_status.waiting_funds', I18nScope$13()),
                  'draft': I18n$1.t('display_status.draft', I18nScope$13())
              };

              return states[project().state];
          };

          return m$1('#project-sidebar.aside', [m$1('.project-stats', [m$1('.project-stats-inner', [m$1('.project-stats-info', [m$1('.u-marginbottom-20', [m$1('#pledged.fontsize-largest.fontweight-semibold.u-text-center-small-only', 'R$ ' + (project().pledged ? h.formatNumber(project().pledged) : '0')), m$1('.fontsize-small.u-text-center-small-only', [I18n$1.t('contributors_call', I18nScope$13()), m$1('span#contributors.fontweight-semibold', I18n$1.t('contributors_count', I18nScope$13({ count: project().total_contributors }))), !project().expires_at && elapsed ? ' em ' + I18n$1.t('datetime.distance_in_words.x_' + elapsed.unit, { count: elapsed.total }, I18nScope$13()) : ''])]), m$1('.meter', [m$1('#progressBar.meter-fill', {
              style: {
                  width: project().progress + '%'
              }
          })]), m$1('.w-row.u-margintop-10', [m$1('.w-col.w-col-5.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-small.fontweight-semibold.lineheight-tighter', (project().progress ? parseInt(project().progress) : '0') + '%')]), m$1('.w-col.w-col-7.w-col-small-6.w-col-tiny-6.w-clearfix', [m$1('.u-right.fontsize-small.lineheight-tighter', remaining && remaining.total ? [m$1('span.fontweight-semibold', remaining.total), I18n$1.t('remaining_time.' + remaining.unit, I18nScope$13({ count: remaining.total }))] : '')])])]), m$1('.w-row', [m$1.component(projectMode, {
              project: project
          })])]), project().open_for_contributions ? m$1('.back-project-btn-div', [m$1('.back-project--btn-row', [m$1('a#contribute_project_form.btn.btn-large.u-marginbottom-20[href="javascript:void(0);"]', {
              onclick: h.analytics.event({
                  cat: 'contribution_create',
                  act: 'contribution_button_click',
                  project: project()
              }, function () {
                  return h.navigateTo('/projects/' + project().project_id + '/contributions/new');
              })

          }, I18n$1.t('submit', I18nScope$13()))]), m$1('.back-project-btn-row-right', m$1.component(projectReminder, {
              project: project,
              type: 'link'
          }))]) : '', m$1('.friend-backed-card.project-page', [!_$1.isUndefined(project()) && project().contributed_by_friends ? m$1.component(projectFriends, { project: project() }) : '']), m$1('div[class="fontsize-smaller u-marginbottom-30 ' + displayCardClass() + '"]', displayStatusText())]), m$1('.project-share.w-hidden-main.w-hidden-medium', [m$1.component(addressTag, { project: project }), m$1.component(categoryTag, { project: project }), m$1('.u-marginbottom-30.u-text-center-small-only', m$1('button.btn.btn-inline.btn-medium.btn-terciary', {
              onclick: ctrl.displayShareBox.toggle
          }, 'Compartilhar este projeto')), ctrl.displayShareBox() ? m$1(projectShareBox, {
              project: project,
              displayShareBox: ctrl.displayShareBox
          }) : '']), m$1('.user-c', m$1.component(projectUserCard, {
              userDetails: args.userDetails,
              project: project
          }))]);
      }
  };

  var userContributionDetail = {
      controller: function controller(args) {
          var contribution = args.contribution,
              rewardDetails = args.rewardDetails,
              chosenReward = _$1.findWhere(rewardDetails(), { id: contribution.reward_id });

          return {
              contribution: contribution,
              chosenReward: chosenReward
          };
      },
      view: function view(ctrl, args) {
          var contribution = args.contribution;

          return m$1('.user-contribution-detail', [m$1('.w-col.w-col-4', [m$1('.fontsize-smallest.lineheight-tight.fontweight-semibold.u-marginbottom-10', 'Valor do apoio:'), m$1('.fontsize-large', 'R$' + contribution.value)]), m$1('.w-col.w-col-4', m$1.component(paymentStatus, { item: contribution })), m$1('.w-col.w-col-4', [m$1('.fontsize-smaller.fontweight-semibold.u-marginbottom-10', 'Recompensa:'), m$1('.fontsize-smallest.lineheight-tight.u-marginbottom-20', !_$1.isUndefined(ctrl.chosenReward) ? ctrl.chosenReward.description : 'Nenhuma recompensa selecionada.'), m$1('.fontsize-smallest.lineheight-looser', !_$1.isUndefined(ctrl.chosenReward) ? [m$1('span.fontweight-semibold', 'Estimativa de entrega: '), h.momentify(ctrl.chosenReward.deliver_at, 'MMM/YYYY')] : '')])]);
      }
  };

  var currentContribution = m.prop({});

  var getUserProjectContributions = function getUserProjectContributions(user_id, project_id, states) {
      var vm = postgrest$1.filtersVM({
          user_id: 'eq',
          project_id: 'eq',
          state: 'in'
      });

      vm.user_id(user_id);
      vm.project_id(project_id);
      vm.state(states);

      var lProjectContributions = postgrest$1.loaderWithToken(models.userContribution.getPageOptions(vm.parameters()));

      return lProjectContributions.load();
  };

  var getCurrentContribution = function getCurrentContribution() {
      var root = document.getElementById('application'),
          data = root && root.getAttribute('data-contribution');

      if (data) {
          currentContribution(JSON.parse(data));

          m.redraw(true);

          return currentContribution;
      } else {
          return false;
      }
  };

  var contributionVM = {
      getCurrentContribution: getCurrentContribution,
      getUserProjectContributions: getUserProjectContributions
  };

  var projectHeader = {
      controller: function controller(args) {
          var project = args.project,
              currentUser = h.getUser();

          if (h.isProjectPage() && currentUser && !_$1.isUndefined(project())) {
              contributionVM.getUserProjectContributions(currentUser.user_id, project().project_id, ['paid', 'refunded', 'pending_refund']).then(args.projectContributions);
          }

          return {
              projectContributions: args.projectContributions,
              showContributions: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              rewardDetails = args.rewardDetails;

          return !_$1.isUndefined(project()) ? m$1('#project-header', [m$1('.w-section.section-product.' + project().mode), m$1('.w-section.page-header.u-text-center', [m$1('.w-container', [m$1('h1.fontsize-larger.fontweight-semibold.project-name[itemprop="name"]', h.selfOrEmpty(project().name || project().project_name)), m$1('h2.fontsize-base.lineheight-looser[itemprop="author"]', ['por ', project().user ? project().user.name : project().owner_name ? project().owner_name : '']), !_$1.isEmpty(ctrl.projectContributions()) ? m$1('.card.card-terciary.u-radius.u-margintop-20', [m$1('.fontsize-small.u-text-center', [m$1('span.fa.fa-thumbs-up'), ' Você é apoiador deste projeto! ', m$1('a.alt-link[href=\'javascript:void(0);\']', { onclick: ctrl.showContributions.toggle }, 'Detalhes')]), ctrl.showContributions() ? m$1('.card.u-margintop-20', m$1('.w-row', _$1.map(ctrl.projectContributions(), function (contribution) {
              return m$1.component(userContributionDetail, { contribution: contribution, rewardDetails: rewardDetails });
          }))) : '']) : ''])]), m$1('.w-section.project-main', [m$1('.w-container', [m$1('.w-row.project-main', [m$1('.w-col.w-col-8.project-highlight', m$1.component(projectHighlight, {
              project: project
          })), m$1('.w-col.w-col-4', m$1.component(projectSidebar, {
              project: project,
              userDetails: args.userDetails
          }))])])])]) : m$1('');
      }
  };

  var projectTabs = {
      controller: function controller(args) {
          var isFixed = m$1.prop(false),
              originalPosition = m$1.prop(-1);

          var fixOnScroll = function fixOnScroll(el) {
              return function () {
                  var viewportOffset = el.getBoundingClientRect();

                  if (window.scrollY <= originalPosition()) {
                      originalPosition(-1);
                      isFixed(false);
                      m$1.redraw();
                  }

                  if (viewportOffset.top < 0 || window.scrollY > originalPosition() && originalPosition() > 0) {
                      if (!isFixed()) {
                          originalPosition(window.scrollY);
                          isFixed(true);
                          m$1.redraw();
                      }
                  }
              };
          };

          var navDisplay = function navDisplay(el, isInitialized) {
              if (!isInitialized) {
                  var fixNavBar = fixOnScroll(el);
                  window.addEventListener('scroll', fixNavBar);
              }
          };

          return {
              navDisplay: navDisplay,
              isFixed: isFixed
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              rewards = args.rewardDetails;

          var mainClass = !ctrl.isFixed() || project().is_owner_or_admin ? '.w-section.project-nav' : '.w-section.project-nav.project-nav-fixed';

          return m$1('nav-wrapper', project() ? [m$1(mainClass, {
              config: ctrl.navDisplay
          }, [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-8', [!_.isEmpty(rewards()) ? m$1('a[id="rewards-link"][class="w-hidden-main w-hidden-medium dashboard-nav-link mf  ' + (h.hashMatch('#rewards') ? 'selected' : '') + '"][href="/' + project().permalink + '#rewards"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_rewards_view', project: project() })
          }, 'Recompensas') : m$1('a[id="rewards-link"][class="w-hidden-main w-hidden-medium dashboard-nav-link mf ' + (h.hashMatch('#contribution_suggestions') ? 'selected' : '') + '"][href="/' + project().permalink + '#contribution_suggestions"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_contribsuggestions_view', project: project() })
          }, 'Valores Sugeridos'), m$1('a[id="about-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#about') || h.hashMatch('') ? 'selected' : '') + '"][href="#about"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_about_view', project: project() })
          }, 'Sobre'), m$1('a[id="posts-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#posts') ? 'selected' : '') + '"][href="#posts"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_posts_view', project: project() })
          }, ['Novidades ', m$1('span.badge', project() ? project().posts_count : '')]), m$1('a[id="contributions-link"][class="w-hidden-small w-hidden-tiny dashboard-nav-link mf ' + (h.hashMatch('#contributions') ? 'selected' : '') + '"][href="#contributions"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_contributions_view', project: project() })
          }, ['Apoiadores ', m$1('span.badge.w-hidden-small.w-hidden-tiny', project() ? project().total_contributors : '-')]), m$1('a[id="comments-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#comments') ? 'selected' : '') + '"][href="#comments"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_comments_view', project: project() })
          }, ['Comentários ', project() ? m$1('fb:comments-count[href="http://www.catarse.me/' + project().permalink + '"][class="badge project-fb-comment w-hidden-small w-hidden-tiny"][style="display: inline"]', m$1.trust('&nbsp;')) : '-'])]), project() ? m$1('.w-col.w-col-4.w-hidden-small.w-hidden-tiny', project().open_for_contributions ? [m$1('.w-row.project-nav-back-button', [m$1('.w-col.w-col-6.w-col-medium-8', [m$1('a.w-button.btn[href="/projects/' + project().project_id + '/contributions/new"]', {
              onclick: h.analytics.event({ cat: 'contribution_create', act: 'contribution_floatingbtn_click', project: project() })
          }, 'Apoiar ‍este projeto')]), m$1('.w-col.w-col-6.w-col-medium-4', {
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_floatingreminder_click', project: project() })
          }, [m$1.component(projectReminder, { project: project, type: 'button', hideTextOnMobile: true })])])] : '') : ''])])]), ctrl.isFixed() && !project().is_owner_or_admin ? m$1('.w-section.project-nav') : ''] : '');
      }
  };

  var projectRewardList = {
      controller: function controller(args) {
          var storeKey = 'selectedReward',
              vm = rewardVM;

          var setInput = function setInput(el, isInitialized) {
              return !isInitialized ? el.focus() : false;
          };

          var submitContribution = function submitContribution() {
              var valueFloat = h.monetaryToFloat(vm.contributionValue);

              if (valueFloat < vm.selectedReward().minimum_value) {
                  vm.error('O valor de apoio para essa recompensa deve ser de no mínimo R$' + vm.selectedReward().minimum_value);
              } else {
                  vm.error('');

                  // THIS CHECK IS ONLY NECESSARY IF WHEN WE START ROUTING DIRECTLY TO THE /contributions/edit page
                  // if (!h.getUser()) {
                  //     h.storeObject(storeKey, {value: valueFloat, reward: vm.selectedReward()});

                  //     return h.navigateToDevise('/' + projectVM.currentProject().permalink);
                  // } else {
                  // vm.contributionValue(valueFloat);
                  //h.navigateTo(`/projects/${projectVM.currentproject().project_id}/contributions/new?reward_id=${vm.selectedReward().id}`);
                  h.navigateTo('/projects/' + projectVM.currentProject().project_id + '/contributions/fallback_create?contribution%5Breward_id%5D=' + vm.selectedReward().id + '&contribution%5Bvalue%5D=' + valueFloat);
                  // m.route(`/projects/${projectVM.currentproject().project_id}/payment`, {
                  //    project_user_id: projectVM.currentProject().user_id
                  // });
                  // }
              }

              return false;
          };

          if (h.getStoredObject(storeKey)) {
              var _h$getStoredObject = h.getStoredObject(storeKey);

              var value = _h$getStoredObject.value;
              var reward = _h$getStoredObject.reward;


              h.removeStoredObject(storeKey);
              vm.selectedReward(reward);
              vm.contributionValue(h.applyMonetaryMask(value + ',00'));
              submitContribution();
          }

          return {
              applyMask: vm.applyMask,
              error: vm.error,
              submitContribution: submitContribution,
              openedReward: vm.selectedReward,
              selectReward: vm.selectReward,
              contributionValue: vm.contributionValue,
              setInput: setInput
          };
      },
      view: function view(ctrl, args) {
          //FIXME: MISSING ADJUSTS
          // - add draft admin modifications
          var project = args.project() || {
              open_for_contributions: false
          };
          return m$1('#rewards.u-marginbottom-30', _$1.map(args.rewardDetails(), function (reward) {

              return m$1('div[class="' + (h.rewardSouldOut(reward) ? 'card-gone' : 'card-reward ' + (project.open_for_contributions ? 'clickable' : '')) + ' card card-secondary u-marginbottom-10"]', {
                  onclick: h.analytics.event({
                      cat: 'contribution_create',
                      act: 'contribution_reward_click',
                      lbl: reward.minimum_value,
                      project: project,
                      extraData: {
                          reward_id: reward.id,
                          reward_value: reward.minimum_value
                      }
                  }, ctrl.selectReward(reward))
              }, [reward.minimum_value >= 100 ? m$1('.tag-circle-installment', [m$1('.fontsize-smallest.fontweight-semibold.lineheight-tightest', '3x'), m$1('.fontsize-mini.lineheight-tightest', 's/ juros')]) : '', m$1('.u-marginbottom-20', [m$1('.fontsize-base.fontweight-semibold', 'Para R$ ' + h.formatNumber(reward.minimum_value) + ' ou mais'), m$1('.fontsize-smaller.fontweight-semibold', h.pluralize(reward.paid_count, ' apoio', ' apoios')), reward.maximum_contributions > 0 ? [reward.waiting_payment_count > 0 ? m$1('.maximum_contributions.in_time_to_confirm.clearfix', [m$1('.pending.fontsize-smallest.fontcolor-secondary', h.pluralize(reward.waiting_payment_count, ' apoio em prazo de confirmação', ' apoios em prazo de confirmação.'))]) : '', h.rewardSouldOut(reward) ? m$1('.u-margintop-10', [m$1('span.badge.badge-gone.fontsize-smaller', 'Esgotada')]) : m$1('.u-margintop-10', [m$1('span.badge.badge-attention.fontsize-smaller', [m$1('span.fontweight-bold', 'Limitada'), ' (' + h.rewardRemaning(reward) + ' de ' + reward.maximum_contributions + ' disponíveis)'])])] : '']), m$1('.fontsize-smaller.u-margintop-20', m$1.trust(h.simpleFormat(h.strip(reward.description)))), !_$1.isEmpty(reward.deliver_at) ? m$1('.fontsize-smaller', [m$1('b', 'Estimativa de Entrega: '), h.momentify(reward.deliver_at, 'MMM/YYYY')]) : '', project.open_for_contributions && !h.rewardSouldOut(reward) ? [ctrl.openedReward().id === reward.id ? m$1('.w-form', [m$1('form.u-margintop-30', {
                  onsubmit: ctrl.submitContribution
              }, [m$1('.divider.u-marginbottom-20'), m$1('.fontcolor-secondary.u-marginbottom-10', 'Valor do apoio'), m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-3', m$1('.back-reward-input-reward.placeholder', 'R$')), m$1('.w-col.w-col-9.w-col-small-9.w-col-tiny-9', m$1('input.w-input.back-reward-input-reward[type="tel"]', {
                  config: ctrl.setInput,
                  onkeyup: m$1.withAttr('value', ctrl.applyMask),
                  value: ctrl.contributionValue()
              }))]), m$1('input.w-button.btn.btn-medium[type="submit"][value="Continuar >"]'), ctrl.error().length > 0 ? m$1('.text-error', [m$1('br'), m$1('span.fa.fa-exclamation-triangle'), ' ' + ctrl.error()]) : ''])]) : ''] :
              // m('.project-reward-box-hover', [
              //     m('.project-reward-box-select-text.u-text-center', 'Selecione essa recompensa')
              // ])
              '']);
          }));
      }
  };

  var projectSuggestedContributions = {
      view: function view(ctrl, args) {
          var project = args.project();

          var suggestionUrl = function suggestionUrl(amount) {
              return '/projects/' + project.project_id + '/contributions/new?amount=' + amount;
          },
              suggestedValues = [10, 25, 50, 100];

          return m$1('#suggestions', _$1.map(suggestedValues, function (amount) {
              return project ? m$1('a[href="' + suggestionUrl(amount) + '"].card-reward.card-big.card-secondary.u-marginbottom-20', [m$1('.fontsize-larger', 'R$ ' + amount)]) : '';
          }));
      }
  };

  var projectContributions$1 = {
      controller: function controller(args) {
          var contributionsPerLocation = m$1.prop([]),
              contributionsPerDay = m$1.prop([]),
              listVM = postgrest$1.paginationVM(models.contributor),
              filterStats = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              groupedCollection = function groupedCollection() {
              var collection = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

              var grouped = [[]],
                  group = 0;

              _$1.map(collection, function (item, index) {
                  if (grouped[group].length >= 3) {
                      group = group + 1;
                      grouped[group] = [];
                  }

                  grouped[group].push(item);
              });

              return grouped;
          },
              contributionsStats = m$1.prop({});

          filterVM.project_id(args.project().project_id);
          filterStats.project_id(args.project().project_id);

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }
          //TODO: Abstract table fetch and contruction logic to contributions-vm to avoid insights.js duplicated code.
          var lContributionsPerDay = postgrest$1.loader(models.projectContributionsPerDay.getRowOptions(filterStats.parameters()));
          lContributionsPerDay.load().then(contributionsPerDay);

          var contributionsPerLocationTable = [['Estado', 'Apoios', 'R$ apoiados (% do total)']];
          var buildPerLocationTable = function buildPerLocationTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  var column = [];

                  column.push(contribution.state_acronym || 'Outro/other');
                  column.push(contribution.total_contributions);
                  column.push([contribution.total_contributed, [//Adding row with custom comparator => read project-data-table description
                  m$1('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_contributed, 2, 3), m$1('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerLocationTable.push(column);
              }) : [];
          };

          var lContributionsPerLocation = postgrest$1.loader(models.projectContributionsPerLocation.getRowOptions(filterStats.parameters()));
          lContributionsPerLocation.load().then(buildPerLocationTable);

          var lContributionsStats = postgrest$1.loader(models.projectContributiorsStat.getRowOptions(filterStats.parameters()));
          lContributionsStats.load().then(function (data) {
              return contributionsStats(_$1.first(data));
          });

          return {
              listVM: listVM,
              filterVM: filterVM,
              groupedCollection: groupedCollection,
              lContributionsStats: lContributionsStats,
              contributionsPerLocationTable: contributionsPerLocationTable,
              lContributionsPerLocation: lContributionsPerLocation,
              contributionsPerDay: contributionsPerDay,
              lContributionsPerDay: lContributionsPerDay,
              contributionsStats: contributionsStats
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM,
              stats = ctrl.contributionsStats(),
              groupedCollection = ctrl.groupedCollection(list.collection());

          return m$1('#project_contributions', m$1('#contributions_top', [m$1('.section.w-section', m$1('.w-container', m$1('.w-row', ctrl.lContributionsStats() ? h.loader() : !_$1.isEmpty(stats) ? [m$1('.u-marginbottom-20.u-text-center-small-only.w-col.w-col-6', [m$1('.fontsize-megajumbo', stats.total), m$1('.fontsize-large', 'pessoas apoiam este projeto')]), m$1('.w-col.w-col-6', m$1('.card.card-terciary.u-radius', m$1('.w-row', [m$1('.u-marginbottom-20.w-col.w-col-6.w-col-small-6', [m$1('.fontweight-semibold.u-marginbottom-10', 'Apoiadores novos'), m$1('.fontsize-largest.u-marginbottom-10', Math.floor(stats.new_percent) + '%'), m$1('.fontsize-smallest', 'apoiadores que nunca tinham apoiado um projeto no Catarse')]), m$1('.w-col.w-col-6.w-col-small-6', [m$1('.divider.u-marginbottom-20.w-hidden-main.w-hidden-medium.w-hidden-small'), m$1('.fontweight-semibold.u-marginbottom-10', 'Apoiadores recorrentes'), m$1('.fontsize-largest.u-marginbottom-10', Math.ceil(stats.returning_percent) + '%'), m$1('.fontsize-smallest', 'apoiadores que já tinham apoiado um projeto no Catarse')])])))] : ''))), m$1('.divider.w-section'), m$1('.section.w-section', m$1('.w-container', [m$1('.fontsize-large.fontweight-semibold.u-marginbottom-40.u-text-center', 'Apoiadores'), m$1('.project-contributions.w-clearfix', _$1.map(groupedCollection, function (group, idx) {
              return m$1('.w-row', _$1.map(group, function (contribution) {
                  return m$1('.project-contribution-item.w-col.w-col-4', [
                  // here new card
                  m$1('.card.card-backer.u-marginbottom-20.u-radius.u-text-center', [m$1('a[href="/users/' + contribution.user_id + '"][style="display: block;"]', {
                      onclick: h.analytics.event({
                          cat: 'project_view',
                          act: 'project_backer_link',
                          lbl: contribution.user_id,
                          project: args.project()
                      })
                  }, [m$1('img.thumb.u-marginbottom-10.u-round[src="' + (!_$1.isEmpty(contribution.data.profile_img_thumbnail) ? contribution.data.profile_img_thumbnail : '/assets/catarse_bootstrap/user.jpg') + '"]')]), m$1('a.fontsize-base.fontweight-semibold.lineheigh-tight.link-hidden-dark[href="/users/' + contribution.user_id + '"]', {
                      onclick: h.analytics.event({
                          cat: 'project_view',
                          act: 'project_backer_link',
                          lbl: contribution.user_id,
                          project: args.project()
                      })
                  }, contribution.data.name), m$1('.fontcolor-secondary.fontsize-smallest.u-marginbottom-10', contribution.data.city + ',' + contribution.data.state), m$1('.fontsize-smaller', [m$1('span.fontweight-semibold', contribution.data.total_contributed_projects), ' apoiados  |  ', m$1('span.fontweight-semibold', contribution.data.total_published_projects), ' criado'])])
                  // new card
                  ]);
              }));
          })),
          //m('.btn-bottom-card.w-row', [
          //    m('.w-col.w-col-3.w-col-small-4.w-col-tiny-3'),
          //    m('.w-col.w-col-6.w-col-small-4.w-col-tiny-6', [
          //        m("a.btn.btn-medium.w-button[href='#']", "Seguindo")
          //    ]),
          //    m(".w-col.w-col-3.w-col-small-4.w-col-tiny-3")
          //])
          m$1('.w-row.u-marginbottom-40.u-margintop-20', [m$1('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])]))]), m$1('.before-footer.bg-gray.section.w-section', m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m$1.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: 'R$ arrecadados por dia',
              dataKey: 'total_amount',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              },
              emptyState: 'Apoios não contabilizados'
          }) : h.loader()])]), m$1('.w-row', m$1('.w-col.w-col-12.u-text-center', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', 'De onde vem os apoios'), !ctrl.lContributionsPerLocation() ? !_$1.isEmpty(_$1.rest(ctrl.contributionsPerLocationTable)) ? m$1.component(projectDataTable, {
              table: ctrl.contributionsPerLocationTable,
              defaultSortIndex: -2
          }) : '' : h.loader()]))])));
      }
  };

  var projectReport = {
    controller: function controller(args) {
      var displayForm = h.toggleProp(false, true),
          sendSuccess = m$1.prop(false),
          submitDisabled = m$1.prop(false),
          user = h.getUser(),
          email = m$1.prop(user.email),
          details = m$1.prop(''),
          reason = m$1.prop(''),
          l = m$1.prop(false),
          checkLogin = function checkLogin() {
        if (user) {
          displayForm.toggle();
        } else {
          window.location.href = '/login';
        }
      },
          sendReport = function sendReport() {
        submitDisabled(true);
        var loaderOpts = models.projectReport.postOptions({
          email: email(),
          details: details(),
          reason: reason(),
          project_id: h.getCurrentProject().project_id
        });
        l = postgrest$1.loaderWithToken(loaderOpts);

        l.load().then(sendSuccess(true));
        submitDisabled(false);
        return false;
      };

      return {
        checkLogin: checkLogin,
        displayForm: displayForm,
        sendSuccess: sendSuccess,
        submitDisabled: submitDisabled,
        sendReport: sendReport,
        user: user,
        email: email,
        details: details,
        reason: reason
      };
    },
    view: function view(ctrl, args) {
      var user = ctrl.user;
      return m$1('.card.card-terciary.u-radius', [m$1('.fontsize-small.u-marginbottom-20', ['Este projeto desrespeita', m$1.trust('&nbsp;'), m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638\'][target=\'_blank\']', 'nossas regras? ')]), ctrl.sendSuccess() ? m$1('.w-form', m$1('p', 'Obrigado! A sua denúncia foi recebida.')) : [m$1('.a.w-button.btn.btn-medium.btn-terciary.btn-inline[href=\'javascript:void(0);\']', { onclick: ctrl.checkLogin }, 'Denunciar este projeto'), ctrl.displayForm() ? m$1('#report-form.u-margintop-30', m$1('.w-form', m$1('form', { onsubmit: ctrl.sendReport }, [m$1('.fontsize-small.fontweight-semibold.u-marginbottom-10', 'Por que você está denunciando este projeto?'), m$1('select.w-select.text-field.positive[required=\'required\']', { onchange: m$1.withAttr('value', ctrl.reason) }, [m$1('option[value=\'\']', 'Selecione um motivo'), m$1('option[value=\'Violação de propriedade intelectual\']', 'Violação de propriedade intelectual'), m$1('option[value=\'Calúnia, injúria, difamação ou discriminação\']', 'Calúnia, injúria, difamação ou discriminação'), m$1('option[value=\'Escopo de projeto proibido\']', 'Escopo de projeto proibido'), m$1('option[value=\'Recompensas proibidas\']', 'Recompensas proibidas'), m$1('option[value=\'Cenas de sexo explícitas e gratuitas\']', 'Cenas de sexo explícitas e gratuitas'), m$1('option[value=\'Abuso de SPAM\']', 'Abuso de SPAM'), m$1('option[value=\'Outros\']', 'Outros')]), m$1('textarea.w-input.text-field.positive.u-marginbottom-30', { placeholder: 'Por favor, dê mais detalhes que nos ajudem a identificar o problema', onchange: m$1.withAttr('value', ctrl.details) }), m$1('input.w-button.btn.btn-medium.btn-inline.btn-dark[type=\'submit\'][value=\'Enviar denúncia\']', { disabled: ctrl.submitDisabled() })]))) : '']]);
    }
  };

  var projectAbout = {
      view: function view(ctrl, args) {
          var project = args.project() || {},
              onlineDays = function onlineDays() {
              var diff = moment(project.zone_online_date).diff(moment(project.zone_expires_at)),
                  duration = moment.duration(diff);

              return -Math.ceil(duration.asDays());
          };
          var fundingPeriod = function fundingPeriod() {
              return project.is_published && h.existy(project.zone_expires_at) ? m$1('.funding-period', [m$1('.fontsize-small.fontweight-semibold.u-text-center-small-only', 'Período de campanha'), m$1('.fontsize-small.u-text-center-small-only', h.momentify(project.zone_online_date) + ' - ' + h.momentify(project.zone_expires_at) + ' (' + onlineDays() + ' dias)')]) : '';
          };

          return m$1('#project-about', [m$1('.project-about.w-col.w-col-8', {
              config: h.UIHelper()
          }, [m$1('p.fontsize-base', [m$1('strong', 'O projeto')]), m$1('.fontsize-base[itemprop="about"]', m$1.trust(h.selfOrEmpty(project.about_html, '...'))), project.budget ? [m$1('p.fontsize-base.fontweight-semibold', 'Orçamento'), m$1('p.fontsize-base', m$1.trust(project.budget))] : '', m$1.component(projectReport)]), m$1('.w-col.w-col-4.w-hidden-small.w-hidden-tiny', !_.isEmpty(args.rewardDetails()) ? [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-30', 'Recompensas'), m$1.component(projectRewardList, {
              project: args.project,
              rewardDetails: args.rewardDetails
          }), fundingPeriod()] : [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-30', 'Sugestões de apoio'), m$1.component(projectSuggestedContributions, { project: args.project }), fundingPeriod()])]);
      }
  };

  var projectComments = {
      controller: function controller() {
          var loadComments = function loadComments(el, isInitialized) {
              return function (el, isInitialized) {
                  if (isInitialized) {
                      return;
                  }
                  h.fbParse();
              };
          };

          return { loadComments: loadComments };
      },
      view: function view(ctrl, args) {
          var project = args.project();
          return m$1('.w-row', [m$1('.w-col.w-col-7', m$1('.fb-comments[data-href="http://www.catarse.me/' + project.permalink + '"][data-num-posts=50][data-width="610"]', { config: ctrl.loadComments() })), m$1('.w-col.w-col-5', m$1.component(projectReport))]);
      }
  };

  var I18nScope$14 = _$1.partial(h.i18nScope, 'projects.posts');

  var projectPosts = {
      controller: function controller(args) {
          var listVM = postgrest$1.paginationVM(models.projectPostDetail),
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq',
              id: 'eq'
          });

          filterVM.project_id(args.project().project_id);

          if (_$1.isNumber(args.post_id)) {
              filterVM.id(args.post_id);
          }

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }

          return {
              listVM: listVM,
              filterVM: filterVM
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM,
              project = args.project() || {};

          return m$1('.project-posts.w-section', [m$1('.w-container.u-margintop-20', [project.is_owner_or_admin ? [!list.isLoading() ? _$1.isEmpty(list.collection()) ? m$1('.w-hidden-small.w-hidden-tiny', [m$1('.fontsize-base.u-marginbottom-30.u-margintop-20', 'Toda novidade publicada no Catarse é enviada diretamente para o email de quem já apoiou seu projeto e também fica disponível para visualização no site. Você pode optar por deixá-la pública, ou visível somente para seus apoiadores aqui nesta aba.')]) : '' : '', m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-4'), m$1('.w-col.w-col-4', [m$1('a.btn.btn-edit.btn-small[href=\'/pt/projects/' + project.project_id + '/edit#posts\']', 'Escrever novidade')]), m$1('.w-col.w-col-4')])] : '', _$1.map(list.collection(), function (post) {
              return m$1('.w-row', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10', [m$1('.post', [m$1('.u-marginbottom-60 .w-clearfix', [m$1('.fontsize-small.fontcolor-secondary.u-text-center', h.momentify(post.created_at)), m$1('p.fontweight-semibold.fontsize-larger.u-text-center.u-marginbottom-30', [m$1('a.link-hidden[href="/projects/' + post.project_id + '/posts/' + post.id + '#posts"]', post.title)]), !_$1.isEmpty(post.comment_html) ? m$1('.fontsize-base', m$1.trust(post.comment_html)) : m$1('.fontsize-base', 'Post exclusivo para apoiadores.')]), m$1('.divider.u-marginbottom-60')])]), m$1('.w-col.w-col-1')]);
          }), m$1('.w-row', [!_$1.isUndefined(args.post_id) ? '' : !list.isLoading() ? list.collection().length === 0 && args.projectContributions().length === 0 ? !project.is_owner_or_admin ? m$1('.w-col.w-col-10.w-col-push-1', m$1('p.fontsize-base', m$1.trust(I18n$1.t('empty', I18nScope$14({
              project_user_name: args.userDetails().name,
              project_id: project.project_id
          }))))) : '' : m$1('.w-col.w-col-2.w-col-push-5', list.isLastPage() ? list.collection().length === 0 ? 'Nenhuma novidade.' : '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais')) : m$1('.w-col.w-col-2.w-col-push-5', h.loader())])])]);
      }
  };

  var projectMain = {
      controller: function controller(args) {
          var hash = m$1.prop(window.location.hash),
              displayTabContent = function displayTabContent(project) {
              var c_opts = {
                  project: project,
                  post_id: args.post_id
              },
                  tabs = {
                  '#rewards': m$1('.w-col.w-col-12', m$1.component(projectRewardList, _$1.extend({}, {
                      rewardDetails: args.rewardDetails
                  }, c_opts))),
                  '#contribution_suggestions': m$1.component(projectSuggestedContributions, c_opts),
                  '#contributions': m$1.component(projectContributions$1, c_opts),
                  '#about': m$1.component(projectAbout, _$1.extend({}, {
                      rewardDetails: args.rewardDetails
                  }, c_opts)),
                  '#comments': m$1.component(projectComments, c_opts),
                  '#posts': m$1.component(projectPosts, _$1.extend({}, {
                      projectContributions: args.projectContributions,
                      userDetails: args.userDetails
                  }, c_opts))
              };

              if (_$1.isNumber(args.post_id)) {
                  window.location.hash = 'posts';
              }

              hash(window.location.hash);

              if (_$1.isEmpty(hash()) || hash() === '#_=_' || hash() === '#preview') {
                  return tabs['#about'];
              }

              return tabs[hash()];
          };

          h.redrawHashChange();

          return {
              displayTabContent: displayTabContent,
              hash: hash
          };
      },
      view: function view(ctrl, args) {
          return m$1('section.section[itemtype="http://schema.org/CreativeWork"]', [m$1('' + (ctrl.hash() !== '#contributions' ? '.w-container' : '.about-tab-content'), [m$1('.w-row', args.project() ? ctrl.displayTabContent(args.project) : h.loader())])]);
      }
  };

  var projectsShow = {
      controller: function controller(args) {
          var project_id = args.project_id;
          var project_user_id = args.project_user_id;


          h.analytics.windowScroll({ cat: 'project_view', act: 'project_page_scroll' });

          if (project_id && !_$1.isNaN(Number(project_id))) {
              projectVM.init(project_id, project_user_id);
          } else {
              projectVM.getCurrentProject();
          }

          return projectVM;
      },
      view: function view(ctrl, args) {
          var project = ctrl.currentProject;

          return m$1('.project-show', {
              config: ctrl.setProjectPageTitle()
          }, [m$1.component(projectHeader, {
              project: project,
              rewardDetails: ctrl.rewardDetails,
              userDetails: ctrl.userDetails,
              projectContributions: ctrl.projectContributions
          }), m$1.component(projectTabs, {
              project: project,
              rewardDetails: ctrl.rewardDetails
          }), m$1.component(projectMain, {
              project: project,
              post_id: args.post_id,
              rewardDetails: ctrl.rewardDetails,
              userDetails: ctrl.userDetails,
              projectContributions: ctrl.projectContributions
          }), project() && project().is_owner_or_admin ? m$1.component(projectDashboardMenu, {
              project: project
          }) : '']);
      }
  };

  var userHeader = {
      view: function view(ctrl, args) {
          var user = args.user,
              profileImage = userVM.displayImage(user),
              coverImage = userVM.displayCover(user);
          return m$1('.hero-half', [m$1('.w-container.content-hero-profile', m$1('.w-row.u-text-center', m$1('.w-col.w-col-8.w-col-push-2', [m$1('.u-marginbottom-20', m$1('.avatar_wrapper', m$1('img.thumb.big.u-round[alt=\'User\'][src=\'' + profileImage + '\']'))), m$1('.fontsize-larger.fontweight-semibold.u-marginbottom-20', user.name), m$1('.w-hidden-small.w-hidden-tiny.u-marginbottom-40.fontsize-base', ['Chegou junto em ' + h.momentify(user.created_at, 'MMMM [de] YYYY'), m$1('br'), user.total_contributed_projects == 0 ? 'Ainda não apoiou projetos' : 'Apoiou ' + h.pluralize(user.total_contributed_projects, ' projeto', ' projetos'), user.total_published_projects > 0 ? ' e já criou ' + h.pluralize(user.total_published_projects, ' projeto', ' projetos') : ''])]))), m$1('.hero-profile', { style: 'background-image:url(\'' + coverImage + '\');' })]);
      }
  };

  var inlineError = {
      view: function view(ctrl, args) {
          return m$1('.fontsize-smaller.text-error.u-marginbottom-20.fa.fa-exclamation-triangle', m$1('span', ' ' + args.message));
      }
  };

  var userCreated = {
      controller: function controller(args) {
          var createdProjects = m$1.prop(),
              user_id = args.userId,
              error = m$1.prop(false),
              pages = postgrest$1.paginationVM(models.project),
              loader = m$1.prop(true),
              contextVM = postgrest$1.filtersVM({
              project_user_id: 'eq',
              state: 'in'
          });

          contextVM.state(['online', 'waiting_funds', 'successful', 'failed']).project_user_id(user_id).order({
              online_date: 'desc'
          });

          models.project.pageSize(9);
          pages.firstPage(contextVM.parameters()).then(function () {
              loader(false);
          }).catch(function (err) {
              error(true);
              loader(false);
              m$1.redraw();
          });

          return {
              projects: pages,
              loader: loader,
              error: error
          };
      },
      view: function view(ctrl, args) {
          var projects_collection = ctrl.projects.collection();

          return m$1('.content[id=\'created-tab\']', ctrl.error() ? m$1.component(inlineError, { message: 'Erro ao carregar os projetos.' }) : !ctrl.loader() ? [!_$1.isEmpty(projects_collection) ? _$1.map(projects_collection, function (project) {
              return m$1.component(projectCard, {
                  project: project,
                  ref: 'user_contributed',
                  showFriends: false
              });
          }) : m$1('.w-container', m$1('.u-margintop-30.u-text-center.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [m$1('.fontsize-large.u-marginbottom-30', 'O que você está esperando para tirar seu projeto do papel aqui no Catarse?'), m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', m$1('a.btn.btn-large[href=\'/start\']', 'Comece agora!')), m$1('.w-col.w-col-3')])]), m$1('.w-col.w-col-3')])), !_$1.isEmpty(projects_collection) ? m$1('.w-row.u-marginbottom-40.u-margintop-30', [m$1('.w-col.w-col-2.w-col-push-5', [ctrl.projects.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: ctrl.projects.nextPage
          }, 'Carregar mais')])]) : ''] : h.loader());
      }
  };

  var userContributed = {
      controller: function controller(args) {
          var contributedProjects = m$1.prop(),
              user_id = args.userId,
              pages = postgrest$1.paginationVM(models.project),
              error = m$1.prop(false),
              loader = m$1.prop(true),
              contextVM = postgrest$1.filtersVM({
              project_id: 'in'
          });

          userVM.getPublicUserContributedProjects(user_id, null).then(function (data) {
              contributedProjects(data);
              if (!_$1.isEmpty(contributedProjects())) {
                  contextVM.project_id(_$1.pluck(contributedProjects(), 'project_id')).order({
                      online_date: 'desc'
                  });

                  models.project.pageSize(9);
                  pages.firstPage(contextVM.parameters()).then(function () {
                      loader(false);
                  });
              } else {
                  loader(false);
              }
          }).catch(function (err) {
              error(true);
              loader(false);
              m$1.redraw();
          });

          return {
              projects: pages,
              error: error,
              loader: loader
          };
      },
      view: function view(ctrl, args) {
          var projects_collection = ctrl.projects.collection();
          return ctrl.error() ? m$1.component(inlineError, { message: 'Erro ao carregar os projetos.' }) : ctrl.loader() ? h.loader() : m$1('.content[id=\'contributed-tab\']', [!_$1.isEmpty(projects_collection) ? _$1.map(projects_collection, function (project) {
              return m$1.component(projectCard, {
                  project: project,
                  ref: 'user_contributed',
                  showFriends: false
              });
          }) : m$1('.w-container', m$1('.u-margintop-30.u-text-center.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [m$1('.fontsize-large.u-marginbottom-30', 'Ora, ora... você ainda não apoiou nenhum projeto no Catarse!'), m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', m$1('a.btn.btn-large[href=\'/explore\']', 'Que tal apoiar agora?')), m$1('.w-col.w-col-3')])]), m$1('.w-col.w-col-3')])), !_$1.isEmpty(projects_collection) ? m$1('.w-row.u-marginbottom-40.u-margintop-30', [m$1('.w-col.w-col-2.w-col-push-5', [!ctrl.projects.isLoading() ? ctrl.projects.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: ctrl.projects.nextPage
          }, 'Carregar mais') : h.loader()])]) : '']);
      }
  };

  var userCard = {
      controller: function controller(args) {
          var userDetails = m$1.prop({}),
              user_id = args.userId;

          userVM.fetchUser(user_id, true, userDetails);

          return {
              userDetails: userDetails
          };
      },
      view: function view(ctrl) {
          var user = ctrl.userDetails(),
              profileImage = userVM.displayImage(user);
          return m$1('#user-card', m$1('.card.card-user.u-radius.u-marginbottom-30[itemprop=\'author\']', [m$1('.w-row', [m$1('.w-col.w-col-4.w.col-small-4.w-col-tiny-4.w-clearfix', m$1('img.thumb.u-round[itemprop=\'image\'][src=\'' + profileImage + '\'][width=\'100\']')), m$1('.w-col.w-col-8.w-col-small-8.w-col-tiny-8', [m$1('.fontsize-small.fontweight-semibold.lineheight-tighter[itemprop=\'name\']', m$1('a.link-hidden[href="/users/' + user.id + '"]', user.name)), m$1('.fontsize-smallest.lineheight-looser[itemprop=\'address\']', user.address_city), m$1('.fontsize-smallest', h.pluralize(user.total_published_projects, ' projeto', ' projetos') + ' criados'), m$1('.fontsize-smallest', 'apoiou ' + h.pluralize(user.total_contributed_projects, ' projeto', ' projetos'))])]), m$1('.project-author-contacts', [m$1('ul.w-list-unstyled.fontsize-smaller.fontweight-semibold', [!_$1.isEmpty(user.facebook_link) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="' + user.facebook_link + '"][target="_blank"]', 'Perfil no Facebook')]) : '', !_$1.isEmpty(user.twitter_username) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="https://twitter.com/' + user.twitter_username + '"][target="_blank"]', 'Perfil no Twitter')]) : '', _$1.map(user.links, function (link) {
              return m$1('li', [m$1('a.link-hidden[itemprop="url"][href="' + link + '"][target="_blank"]', link)]);
          })])]), !_$1.isEmpty(user.email) ? m$1('a.btn.btn-medium.btn-message[href="mailto:' + user.email + '"][itemprop="email"][target="_blank"]', 'Enviar mensagem') : '']));
      }
  };

  var userAbout = {
      controller: function controller(args) {
          var userDetails = m$1.prop({}),
              loader = m$1.prop(true),
              error = m$1.prop(false),
              user_id = args.userId;

          userVM.fetchUser(user_id, true, userDetails).then(function () {
              loader(false);
          }).catch(function (err) {
              error(true);
              loader(false);
              m$1.redraw();
          });

          return {
              userDetails: userDetails,
              error: error,
              loader: loader
          };
      },
      view: function view(ctrl, args) {
          var user = ctrl.userDetails();
          return ctrl.error() ? m$1.component(inlineError, { message: 'Erro ao carregar dados.' }) : ctrl.loader() ? h.loader() : m$1('.content[id=\'about-tab\']', m$1('.w-container[id=\'about-content\']', m$1('.w-row', [m$1('.w-col.w-col-8', m$1('.fontsize-base', user.about_html ? m$1.trust(user.about_html) : '')), m$1('.w-col.w-col-4', user.id ? m$1.component(userCard, { userId: user.id }) : h.loader)])));
      }
  };

  var usersShow = {
      controller: function controller(args) {
          var userDetails = m$1.prop({}),
              user_id = args.user_id.split('-')[0],
              hash = m$1.prop(window.location.hash),
              displayTabContent = function displayTabContent(user) {
              var tabs = {
                  '#created': m$1.component(userCreated, { userId: user.id }),
                  '#contributed': m$1.component(userContributed, { userId: user.id }),
                  '#about': m$1.component(userAbout, { userId: user.id })
              };

              hash(window.location.hash);

              if (_$1.isEmpty(hash()) || hash() === '#_=_') {
                  if (user.total_published_projects > 0) {
                      hash('#created');
                      return tabs['#created'];
                  } else if (user.total_contributed_projects > 0) {
                      hash('#contributed');
                      return tabs['#contributed'];
                  } else {
                      hash('#about');
                      return tabs['#about'];
                  }
              }

              return tabs[hash()];
          };

          h.redrawHashChange();

          userVM.fetchUser(user_id, true, userDetails);

          return {
              displayTabContent: displayTabContent,
              hash: hash,
              userDetails: userDetails
          };
      },
      view: function view(ctrl, args) {
          var user = ctrl.userDetails();

          return m$1('div', [m$1.component(userHeader, { user: user }), m$1('nav.project-nav.u-text-center.u-marginbottom-30.profile', { style: { 'z-index': '10', 'position': 'relative' } }, m$1('.w-container[data-anchor=\'created\']', [!_$1.isEmpty(user) ? user.is_owner_or_admin ? m$1('a.dashboard-nav-link.dashboard[href=\'/pt/users/' + user.id + '/edit\']', [m$1('span.fa.fa-cog'), m$1.trust('&nbsp;'), ' Editar perfil']) : '' : h.loader(), m$1('a[data-target=\'#contributed-tab\'][href=\'#contributed\'][id=\'contributed_link\'][class=\'dashboard-nav-link ' + (ctrl.hash() === '#contributed' ? 'selected' : '') + '\']', ['Apoiados ', m$1.trust('&nbsp;'), m$1('span.badge', user.total_contributed_projects)]), m$1('a[data-target=\'#created-tab\'][href=\'#created\'][id=\'created_link\'][class=\'dashboard-nav-link ' + (ctrl.hash() === '#created' ? 'selected' : '') + '\']', ['Criados ', m$1.trust('&nbsp;'), m$1('span.badge', user.total_published_projects)]), m$1('a[data-target=\'#about-tab\'][href=\'#about\'][id=\'about_link\'][class=\'dashboard-nav-link ' + (ctrl.hash() === '#about' ? 'selected' : '') + '\']', 'Sobre')])), m$1('section.section', m$1('.w-container', m$1('.w-row', user.id ? ctrl.displayTabContent(user) : h.loader())))]);
      }
  };

  var I18nScope$16 = _.partial(h.i18nScope, 'projects.contributions.edit.errors');

  var paymentVM = function paymentVM() {
      var mode = arguments.length <= 0 || arguments[0] === undefined ? 'aon' : arguments[0];

      var pagarme = m.prop({}),
          submissionError = m.prop(false),
          isLoading = m.prop(false);

      var setCsrfToken = function setCsrfToken(xhr) {
          if (h.authenticityToken()) {
              xhr.setRequestHeader('X-CSRF-Token', h.authenticityToken());
          }
          return;
      };

      var fields = {
          completeName: m.prop(''),
          email: m.prop(''),
          anonymous: m.prop(),
          countries: m.prop(),
          userCountryId: m.prop(),
          zipCode: m.prop(''),
          street: m.prop(''),
          number: m.prop(''),
          addressComplement: m.prop(''),
          neighbourhood: m.prop(''),
          city: m.prop(''),
          states: m.prop([]),
          userState: m.prop(),
          ownerDocument: m.prop(''),
          phone: m.prop(''),
          errors: m.prop([])
      };

      var creditCardFields = {
          name: m.prop(''),
          number: m.prop(''),
          expMonth: m.prop(''),
          expYear: m.prop(''),
          save: m.prop(false),
          cvv: m.prop(''),
          errors: m.prop([])
      };

      var faq = I18n$1.translations[I18n$1.currentLocale()].projects.faq[mode],
          currentUser = h.getUser(),
          countriesLoader = postgrest$1.loader(models.country.getPageOptions()),
          statesLoader = postgrest$1.loader(models.state.getPageOptions());

      var populateForm = function populateForm(fetchedData) {
          var data = _.first(fetchedData),
              countryId = data.address.country_id || _.findWhere(fields.countries(), { name: 'Brasil' }).id;

          fields.completeName(data.name);
          fields.email(data.email);
          fields.city(data.address.city);
          fields.zipCode(data.address.zipcode);
          fields.street(data.address.street);
          fields.number(data.address.number);
          fields.addressComplement(data.address.complement);
          fields.userState(data.address.state);
          fields.userCountryId(countryId);
          fields.ownerDocument(data.owner_document);
          fields.phone(data.address.phonenumber);
          fields.neighbourhood(data.address.neighbourhood);
      };

      var expMonthOptions = function expMonthOptions() {
          return [[null, 'Mês'], [1, '01 - Janeiro'], [2, '02 - Fevereiro'], [3, '03 - Março'], [4, '04 - Abril'], [5, '05 - Maio'], [6, '06 - Junho'], [7, '07 - Julho'], [8, '08 - Agosto'], [9, '09 - Setembro'], [10, '10 - Outubro'], [11, '11 - Novembro'], [12, '12 - Dezembro']];
      };

      var expYearOptions = function expYearOptions() {
          var currentYear = moment$1().year();
          var yearsOptions = ['Ano'];
          for (var i = currentYear; i <= currentYear + 25; i++) {
              yearsOptions.push(i);
          }
          return yearsOptions;
      };

      var isInternational = function isInternational() {
          return !_.isEmpty(fields.countries()) ? fields.userCountryId() != _.findWhere(fields.countries(), { name: 'Brasil' }).id : false;
      };

      var checkEmptyFields = function checkEmptyFields(checkedFields) {
          return _.map(checkedFields, function (field) {
              var val = fields[field]();

              if (!h.existy(val) || _.isEmpty(String(val).trim())) {
                  fields.errors().push({ field: field, message: 'O campo não pode ser vazio.' });
              }
          });
      };

      var checkEmail = function checkEmail() {
          var isValid = h.validateEmail(fields.email());

          if (!isValid) {
              fields.errors().push({ field: 'email', message: 'E-mail inválido.' });
          }
      };

      var checkDocument = function checkDocument() {
          //TODO: also validate Cnpj
          var isValid = h.validateCpf(fields.ownerDocument().replace(/[\.|\-]*/g, ''));

          if (!isValid) {
              fields.errors().push({ field: 'ownerDocument', message: 'CPF inválido.' });
          }
      };

      var checkUserState = function checkUserState() {
          if (_.isEmpty(fields.userState()) || fields.userState() === 'null') {
              fields.errors().push({ field: 'userState', message: 'Estado é obrigatório.' });
          }
      };

      var validate = function validate() {
          fields.errors([]);

          checkEmptyFields(['completeName', 'street', 'number', 'city', 'userCountryId']);

          checkEmail();

          if (!isInternational()) {
              checkEmptyFields(['phone', 'neighbourhood', 'zipCode', 'ownerDocument', 'userState']);
              checkUserState();
              checkDocument();
          }

          return _.isEmpty(fields.errors());
      };

      var getSlipPaymentDate = function getSlipPaymentDate(contribution_id) {
          var paymentDate = m.prop();

          m.request({
              method: 'GET',
              config: setCsrfToken,
              url: '/payment/pagarme/' + contribution_id + '/slip_data'
          }).then(paymentDate);

          return paymentDate;
      };

      var sendSlipPayment = function sendSlipPayment(contribution_id, project_id, error, loading, completed) {
          m.request({
              method: 'post',
              url: '/payment/pagarme/' + contribution_id + '/pay_slip.json',
              dataType: 'json'
          }).then(function (data) {
              if (data.payment_status == 'failed') {
                  error(I18n$1.t('submission.slip_submission', I18nScope$16()));
              } else if (data.boleto_url) {
                  completed(true);
                  window.location.href = '/projects/' + project_id + '/contributions/' + contribution_id;
              }
              loading(false);
              m.redraw();
          }).catch(function (err) {
              error(I18n$1.t('submission.slip_submission', I18nScope$16()));
              loading(false);
              completed(false);
              m.redraw();
          });
      };

      var paySlip = function paySlip(contribution_id, project_id, error, loading, completed) {
          error(false);
          m.redraw();
          if (validate()) {
              updateContributionData(contribution_id, project_id).then(function () {
                  sendSlipPayment(contribution_id, project_id, error, loading, completed);
              }).catch(function () {
                  loading(false);
                  error(I18n$1.t('submission.slip_validation', I18nScope$16()));
                  m.redraw();
              });
          } else {
              loading(false);
              error(I18n$1.t('submission.slip_validation', I18nScope$16()));
              m.redraw();
          }
      };

      var savedCreditCards = m.prop([]);

      var getSavedCreditCards = function getSavedCreditCards(user_id) {
          var otherSample = {
              id: -1
          };

          return m.request({
              method: 'GET',
              config: setCsrfToken,
              url: '/users/' + user_id + '/credit_cards'
          }).then(function (creditCards) {
              if (_.isArray(creditCards)) {
                  creditCards.push(otherSample);
              } else {
                  creditCards = [];
              }

              return savedCreditCards(creditCards);
          });
      };

      var requestPayment = function requestPayment(data, contribution_id) {
          return m.request({
              method: 'POST',
              url: '/payment/pagarme/' + contribution_id + '/pay_credit_card',
              data: data,
              config: setCsrfToken
          });
      };

      var payWithSavedCard = function payWithSavedCard(creditCard, installment, contribution_id) {
          var data = {
              card_id: creditCard.card_key,
              payment_card_installments: installment
          };
          return requestPayment(data, contribution_id);
      };

      var setNewCreditCard = function setNewCreditCard() {
          var creditCard = new window.PagarMe.creditCard();
          creditCard.cardHolderName = creditCardFields.name();
          creditCard.cardExpirationMonth = creditCardFields.expMonth();
          creditCard.cardExpirationYear = creditCardFields.expYear();
          creditCard.cardNumber = creditCardFields.number();
          creditCard.cardCVV = creditCardFields.cvv();
          return creditCard;
      };

      var payWithNewCard = function payWithNewCard(contribution_id, installment) {
          var deferred = m.deferred();
          m.request({
              method: 'GET',
              url: '/payment/pagarme/' + contribution_id + '/get_encryption_key',
              config: setCsrfToken
          }).then(function (data) {
              window.PagarMe.encryption_key = data.key;
              var card = setNewCreditCard();
              var errors = card.fieldErrors();
              if (_.keys(errors).length > 0) {
                  deferred.reject({ message: I18n$1.t('submission.card_invalid', I18nScope$16()) });
              } else {
                  card.generateHash(function (cardHash) {
                      var data = {
                          card_hash: cardHash,
                          save_card: creditCardFields.save().toString(),
                          payment_card_installments: installment
                      };
                      requestPayment(data, contribution_id).then(deferred.resolve).catch(deferred.reject);
                  });
              }
          }).catch(function (error) {
              if (!_.isEmpty(error.message)) {
                  deferred.reject(error);
              } else {
                  deferred.reject({ message: I18n$1.t('submission.encryption_error', I18nScope$16()) });
              }
          });

          return deferred.promise;
      };

      var updateContributionData = function updateContributionData(contribution_id, project_id) {
          var contributionData = {
              anonymous: fields.anonymous(),
              country_id: fields.userCountryId(),
              payer_name: fields.completeName(),
              payer_email: fields.email(),
              payer_document: fields.ownerDocument(),
              address_street: fields.street(),
              address_number: fields.number(),
              address_complement: fields.addressComplement(),
              address_neighbourhood: fields.neighbourhood(),
              address_zip_code: fields.zipCode(),
              address_city: fields.city(),
              address_state: fields.userState(),
              address_phone_number: fields.phone()
          };

          return m.request({
              method: 'PUT',
              url: '/projects/' + project_id + '/contributions/' + contribution_id + '.json',
              data: { contribution: contributionData },
              config: setCsrfToken
          });
      };

      var creditCardPaymentSuccess = function creditCardPaymentSuccess(deferred, project_id, contribution_id) {
          return function (data) {
              if (data.payment_status === 'failed') {
                  var errorMsg = data.message || I18n$1.t('submission.payment_failed', I18nScope$16());

                  isLoading(false);
                  submissionError(I18n$1.t('submission.error', I18nScope$16({ message: errorMsg })));
                  m.redraw();
                  deferred.reject();
              } else {
                  window.location.href = '/projects/' + project_id + '/contributions/' + contribution_id;
              }
          };
      };

      var creditCardPaymentFail = function creditCardPaymentFail(deferred) {
          return function (data) {
              var errorMsg = data.message || I18n$1.t('submission.payment_failed', I18nScope$16());

              isLoading(false);
              submissionError(I18n$1.t('submission.error', I18nScope$16({ message: errorMsg })));
              m.redraw();
              deferred.reject();
          };
      };

      var checkAndPayCreditCard = function checkAndPayCreditCard(deferred, selectedCreditCard, contribution_id, project_id, selectedInstallment) {
          return function () {
              if (selectedCreditCard().id && selectedCreditCard().id !== -1) {
                  return payWithSavedCard(selectedCreditCard(), selectedInstallment(), contribution_id).then(creditCardPaymentSuccess(deferred, project_id, contribution_id)).catch(creditCardPaymentFail(deferred));
              } else {
                  return payWithNewCard(contribution_id, selectedInstallment).then(creditCardPaymentSuccess(deferred, project_id, contribution_id)).catch(creditCardPaymentFail(deferred));
              }
          };
      };

      var sendPayment = function sendPayment(selectedCreditCard, selectedInstallment, contribution_id, project_id) {
          var deferred = m.deferred();
          if (validate()) {
              isLoading(true);
              submissionError(false);
              m.redraw();
              updateContributionData(contribution_id, project_id).then(checkAndPayCreditCard(deferred, selectedCreditCard, contribution_id, project_id, selectedInstallment)).catch(function () {
                  isLoading(false);
                  deferred.reject();
              });
          } else {
              isLoading(false);
              deferred.reject();
          }
          return deferred.promise;
      };

      var resetFieldError = function resetFieldError(fieldName) {
          return function () {
              var errors = fields.errors(),
                  errorField = _.findWhere(fields.errors(), { field: fieldName }),
                  newErrors = _.compose(fields.errors, _.without);

              return newErrors(fields.errors(), errorField);
          };
      };

      var resetCreditCardFieldError = function resetCreditCardFieldError(fieldName) {
          return function () {
              var errors = fields.errors(),
                  errorField = _.findWhere(creditCardFields.errors(), { field: fieldName }),
                  newErrors = _.compose(creditCardFields.errors, _.without);

              return newErrors(creditCardFields.errors(), errorField);
          };
      };

      var installments = m.prop([{ value: 10, number: 1 }]);

      var getInstallments = function getInstallments(contribution_id) {
          return m.request({
              method: 'GET',
              url: '/payment/pagarme/' + contribution_id + '/get_installment',
              config: h.setCsrfToken
          }).then(installments);
      };

      var creditCardMask = _.partial(h.mask, '9999 9999 9999 9999');

      var applyCreditCardMask = _.compose(creditCardFields.number, creditCardMask);

      countriesLoader.load().then(fields.countries);
      statesLoader.load().then(function (data) {
          fields.states().push({ acronym: null, name: 'Estado' });
          _.map(data, function (state) {
              return fields.states().push(state);
          });
      });
      userVM.fetchUser(currentUser.user_id, false).then(populateForm);

      return {
          fields: fields,
          validate: validate,
          isInternational: isInternational,
          resetFieldError: resetFieldError,
          getSlipPaymentDate: getSlipPaymentDate,
          paySlip: paySlip,
          installments: installments,
          getInstallments: getInstallments,
          savedCreditCards: savedCreditCards,
          getSavedCreditCards: getSavedCreditCards,
          applyCreditCardMask: applyCreditCardMask,
          creditCardFields: creditCardFields,
          resetCreditCardFieldError: resetCreditCardFieldError,
          expMonthOptions: expMonthOptions,
          expYearOptions: expYearOptions,
          sendPayment: sendPayment,
          submissionError: submissionError,
          isLoading: isLoading,
          pagarme: pagarme,
          faq: faq
      };
  };

  var I18nScope$17 = _.partial(h.i18nScope, 'projects.faq');

  var faqBox = {
      controller: function controller(args) {
          var mode = args.mode,
              questions = args.faq.questions,
              selectedQuestion = m$1.prop(-1),
              scopedQuestions = m$1.prop(questions);

          var selectQuestion = function selectQuestion(idx) {
              return function () {
                  return selectedQuestion(idx);
              };
          };

          var updateQuestionsData = function updateQuestionsData(data) {
              //This function rewrites questions from translate with proper scope for links
              var user = data[0];
              var updatedQuestions = {};
              _.each(questions, function (quest, idx) {
                  _.extend(updatedQuestions, babelHelpers.defineProperty({}, idx + 1, {
                      question: quest.question,
                      answer: I18n$1.t(mode + '.questions.' + idx + '.answer', I18nScope$17({ userLink: '/users/' + user.id, userName: user.name }))
                  }));
              });

              scopedQuestions(updatedQuestions);
          };

          userVM.fetchUser(args.projectUserId, false).then(updateQuestionsData);

          return {
              scopedQuestions: scopedQuestions,
              selectQuestion: selectQuestion,
              selectedQuestion: selectedQuestion
          };
      },
      view: function view(ctrl, args) {
          return m$1('.faq-box.w-hidden-small.w-hidden-tiny.card.u-radius', [m$1('.w-row.u-marginbottom-30', [m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', m$1('img[width=\'30\']', {
              src: args.mode === 'aon' ? '/assets/aon-badge.png' : '/assets/flex-badge.png'
          })), m$1('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', m$1('.w-inline-block.fontsize-smallest.w-inline-block.fontcolor-secondary', args.faq.description))]), m$1('.u-marginbottom-20.fontsize-small.fontweight-semibold', 'Dúvidas frequentes'), m$1('ul.w-list-unstyled', _.map(ctrl.scopedQuestions(), function (question, idx) {
              return [m$1('li#faq_question_' + idx + '.fontsize-smaller.alt-link.list-question', {
                  onclick: ctrl.selectQuestion(idx)
              }, m$1('span', [m$1('span.faq-box-arrow'), ' ' + question.question])), m$1('li.list-answer', {
                  class: ctrl.selectedQuestion() === idx ? 'list-answer-opened' : ''
              }, m$1('p#faq_answer_' + idx + '.fontsize-smaller', m$1.trust(question.answer)))];
          }))]);
      }
  };

  var I18nScope$18 = _.partial(h.i18nScope, 'projects.contributions.edit.errors');

  var paymentSlip = {
      controller: function controller(args) {
          var vm = args.vm,
              slipPaymentDate = vm.getSlipPaymentDate(args.contribution_id),
              loading = m$1.prop(false),
              error = m$1.prop(false),
              completed = m$1.prop(false);

          var buildSlip = function buildSlip() {
              loading(true);
              m$1.redraw();
              vm.paySlip(args.contribution_id, args.project_id, error, loading, completed);

              return false;
          };

          return {
              buildSlip: buildSlip,
              slipPaymentDate: slipPaymentDate,
              loading: loading,
              completed: completed,
              error: error
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-row', m$1('.w-col.w-col-12', m$1('.u-margintop-30.u-marginbottom-60.u-radius.card-big.card', [m$1('.fontsize-small.u-marginbottom-20', ctrl.slipPaymentDate() ? 'Esse boleto bancário vence no dia ' + h.momentify(ctrl.slipPaymentDate().slip_expiration_date) + '.' : 'carregando...'), m$1('.fontsize-small.u-marginbottom-40', 'Ao gerar o boleto, o realizador já está contando com o seu apoio. Pague até a data de vencimento pela internet, casas lotéricas, caixas eletrônicos ou agência bancária.'), m$1('.w-row', m$1('.w-col.w-col-8.w-col-push-2', [ctrl.loading() ? h.loader() : ctrl.completed() ? '' : m$1('input.btn.btn-large.u-marginbottom-20', {
              onclick: ctrl.buildSlip,
              value: 'Imprimir Boleto',
              type: 'submit'
          }), ctrl.error() ? m$1.component(inlineError, { message: ctrl.error() }) : '', m$1('.fontsize-smallest.u-text-center.u-marginbottom-30', ['Ao apoiar, você concorda com os ', m$1('a.alt-link[href=\'/pt/terms-of-use\']', 'Termos de Uso '), 'e ', m$1('a.alt-link[href=\'/pt/privacy-policy\']', 'Política de Privacidade')])]))])));
      }
  };

  var defaultFormat = /(\d{1,4})/g;

  var indexOf = [].indexOf || function (item) {
      for (var i = 0, l = this.length; i < l; i++) {
          if (i in this && this[i] === item) return i;
      }return -1;
  };
  var cards = [{
      type: 'elo',
      patterns: [401178, 401179, 431274, 438935, 451416, 457393, 457631, 457632, 504175, 506699, 5067, 509, 627780, 636297, 636368, 650, 6516, 6550],
      format: defaultFormat,
      length: [16],
      cvvLength: [3],
      luhn: true
  }, {
      type: 'maestro',
      patterns: [5018, 502, 503, 506, 56, 58, 639, 6220, 67],
      format: defaultFormat,
      length: [12, 13, 14, 15, 16, 17, 18, 19],
      cvvLength: [3],
      luhn: true
  }, {
      type: 'forbrugsforeningen',
      patterns: [600],
      format: defaultFormat,
      length: [16],
      cvvLength: [3],
      luhn: true
  }, {
      type: 'dankort',
      patterns: [5019],
      format: defaultFormat,
      length: [16],
      cvvLength: [3],
      luhn: true
  }, {
      type: 'visa',
      patterns: [4],
      format: defaultFormat,
      length: [13, 16],
      cvvLength: [3],
      luhn: true
  }, {
      type: 'mastercard',
      patterns: [51, 52, 53, 54, 55, 22, 23, 24, 25, 26, 27],
      format: defaultFormat,
      length: [16],
      cvvLength: [3],
      luhn: true
  }, {
      type: 'amex',
      patterns: [34, 37],
      format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
      length: [15],
      cvvLength: [3, 4],
      luhn: true
  }, {
      type: 'dinersclub',
      patterns: [30, 36, 38, 39],
      format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
      length: [14],
      cvvLength: [3],
      luhn: true
  }, {
      type: 'discover',
      patterns: [60, 64, 65, 622],
      format: defaultFormat,
      length: [16],
      cvvLength: [3],
      luhn: true
  }, {
      type: 'unionpay',
      patterns: [62, 88],
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvvLength: [3],
      luhn: false
  }, {
      type: 'jcb',
      patterns: [35],
      format: defaultFormat,
      length: [16],
      cvvLength: [3],
      luhn: true
  }];

  var inputCardType = function inputCardType(num) {
      var ref;
      if (!num) {
          return null;
      }
      return ((ref = cardFromNumber(num)) != null ? ref.type : void 0) || null;
  };

  var cardFromType = function cardFromType(type) {
      var card = void 0,
          i = void 0,
          len = void 0;
      for (i = 0, len = cards.length; i < len; i++) {
          card = cards[i];
          if (card.type === type) {
              return card;
          }
      }
  };

  var setCardType = function setCardType(e, type) {
      var $target = void 0,
          allTypes = void 0,
          card = void 0,
          cardType = void 0,
          val = void 0;
      $target = e.currentTarget;
      val = $target.value;
      cardType = inputCardType(val) || 'unknown';
      return type(cardType);
  };

  var formatBackCardNumber = function formatBackCardNumber(e, prop) {
      var $target, value;
      $target = e.currentTarget;
      value = $target.value;
      if (e.which !== 8) {
          return;
      }
      if ($target.selectionStart != null && $target.selectionStart !== value.length) {
          return;
      }
      if (/\d\s$/.test(value)) {
          e.preventDefault();
          return setTimeout(function () {
              return $target.value = prop(value.replace(/\d\s$/, ''));
          });
      } else if (/\s\d?$/.test(value)) {
          e.preventDefault();
          return setTimeout(function () {
              return $target.value = prop(value.replace(/\d$/, ''));
          });
      }
  };

  var replaceFullWidthChars = function replaceFullWidthChars(str) {
      var chars, chr, fullWidth, halfWidth, i, idx, len, value;
      if (str == null) {
          str = '';
      }
      fullWidth = '０１２３４５６７８９';
      halfWidth = '0123456789';
      value = '';
      chars = str.split('');
      for (i = 0, len = chars.length; i < len; i++) {
          chr = chars[i];
          idx = fullWidth.indexOf(chr);
          if (idx > -1) {
              chr = halfWidth[idx];
          }
          value += chr;
      }
      return value;
  };

  var safeVal = function safeVal(value, $target, prop) {
      var currPair, cursor, digit, error, error1, last, prevPair;
      try {
          cursor = $target.selectionStart;
      } catch (error1) {
          error = error1;
          cursor = null;
      }
      last = $target.value;
      $target.value = prop(value);
      if (cursor !== null && $target === document.activeElement) {
          if (cursor === last.length) {
              cursor = value.length;
          }
          if (last !== value) {
              prevPair = last.slice(cursor - 1, +cursor + 1 || 9e9);
              currPair = value.slice(cursor - 1, +cursor + 1 || 9e9);
              digit = value[cursor];
              if (/\d/.test(digit) && prevPair === digit + ' ' && currPair === ' ' + digit) {
                  cursor = cursor + 1;
              }
          }
          $target.selectionStart = cursor;
          return $target.selectionEnd = cursor;
      }
  };

  var reFormatCardNumber = function reFormatCardNumber(e, prop) {
      var $target = e.currentTarget;
      return setTimeout(function () {
          var value;
          value = $target.value;
          value = replaceFullWidthChars(value);
          value = formatCardNumber(value);
          return safeVal(value, $target, prop);
      });
  };

  var formatCardNumber = function formatCardNumber(num) {
      var card = void 0,
          groups = void 0,
          ref = void 0,
          upperLength = void 0;
      num = num.replace(/\D/g, '');
      card = cardFromNumber(num);
      if (!card) {
          return num;
      }
      upperLength = card.length[card.length.length - 1];
      num = num.slice(0, upperLength);
      if (card.format.global) {
          return (ref = num.match(card.format)) != null ? ref.join(' ') : void 0;
      } else {
          groups = card.format.exec(num);
          if (groups == null) {
              return;
          }
          groups.shift();
          groups = _$1.filter(groups, function (n) {
              return n;
          });
          return groups.join(' ');
      }
  };

  var formatCardInputNumber = function formatCardInputNumber(e, prop) {
      var $target = void 0,
          card = void 0,
          digit = void 0,
          length = void 0,
          re = void 0,
          upperLength = void 0,
          value = void 0;
      digit = String.fromCharCode(e.which);
      if (!/^\d+$/.test(digit)) {
          return;
      }
      $target = e.currentTarget;
      value = $target.value;
      card = cardFromNumber(value + digit);
      length = (value.replace(/\D/g, '') + digit).length;
      upperLength = 16;
      if (card) {
          upperLength = card.length[card.length.length - 1];
      }
      if (length >= upperLength) {
          return;
      }
      if ($target.selectionStart != null && $target.selectionStart !== value.length) {
          return;
      }
      if (card && card.type === 'amex') {
          re = /^(\d{4}|\d{4}\s\d{6})$/;
      } else {
          re = /(?:^|\s)(\d{4})$/;
      }
      if (re.test(value)) {
          e.preventDefault();
          return setTimeout(function () {
              return $target.value = prop(value + ' ' + digit);
          });
      } else if (re.test(value + digit)) {
          e.preventDefault();
          return setTimeout(function () {
              return $target.value = prop(value + digit + ' ');
          });
      }
  };

  var cardFromNumber = function cardFromNumber(num) {
      var card = void 0,
          i = void 0,
          j = void 0,
          len = void 0,
          len1 = void 0,
          p = void 0,
          pattern = void 0,
          ref = void 0;
      num = (num + '').replace(/\D/g, '');
      for (i = 0, len = cards.length; i < len; i++) {
          card = cards[i];
          ref = card.patterns;
          for (j = 0, len1 = ref.length; j < len1; j++) {
              pattern = ref[j];
              p = pattern + '';
              if (num.substr(0, p.length) === p) {
                  return card;
              }
          }
      }
  };

  var hasTextSelected = function hasTextSelected($target) {
      var ref = void 0;
      if ($target.selectionStart != null && $target.selectionStart !== $target.selectionEnd) {
          return true;
      }
      if ((typeof document !== 'undefined' && document !== null ? (ref = document.selection) != null ? ref.createRange : void 0 : void 0) != null) {
          if (document.selection.createRange().text) {
              return true;
          }
      }
      return false;
  };

  var restrictNumeric = function restrictNumeric(e) {
      var input = void 0;
      if (e.metaKey || e.ctrlKey) {
          return true;
      }
      if (e.which === 32) {
          return false;
      }
      if (e.which === 0) {
          return true;
      }
      if (e.which < 33) {
          return true;
      }
      input = String.fromCharCode(e.which);
      return !!/[\d\s]/.test(input);
  };

  var restrictCardNumber = function restrictCardNumber(e) {
      var $target = void 0,
          card = void 0,
          digit = void 0,
          value = void 0;
      $target = e.currentTarget;
      digit = String.fromCharCode(e.which);
      if (!/^\d+$/.test(digit)) {
          return;
      }
      if (hasTextSelected($target)) {
          return;
      }
      value = ($target.value + digit).replace(/\D/g, '');
      card = cardFromNumber(value);
      if (card) {
          return value.length <= card.length[card.length.length - 1];
      } else {
          return value.length <= 16;
      }
  };
  var setEvents = function setEvents(el, cardType, prop) {
      el.onkeypress = function (event) {
          restrictNumeric(event);
          restrictCardNumber(event);
          formatCardInputNumber(event, prop);
      };
      el.oninput = function (event) {
          reFormatCardNumber(event, prop);
          setCardType(event, cardType);
      };
      el.onkeydown = function (event) {
          return formatBackCardNumber(event, prop);
      };
      el.onkeyup = function (event) {
          setCardType(event, cardType);
      };
      el.onpaste = function (event) {
          return reFormatCardNumber(event, prop);
      };
      el.onchange = function (event) {
          CatarseAnalytics.oneTimeEvent({ cat: 'contribution_finish', act: 'contribution_cc_edit' });
          reFormatCardNumber(event, prop);
      };
  };

  var luhnCheck = function luhnCheck(num) {
      var digit, digits, i, len, odd, sum;
      odd = true;
      sum = 0;
      digits = (num + '').split('').reverse();
      for (i = 0, len = digits.length; i < len; i++) {
          digit = digits[i];
          digit = parseInt(digit, 10);
          if (odd = !odd) {
              digit *= 2;
          }
          if (digit > 9) {
              digit -= 9;
          }
          sum += digit;
      }
      return sum % 10 === 0;
  };

  var validateCardNumber = function validateCardNumber(num) {
      var card = void 0,
          ref = void 0;
      num = (num + '').replace(/\s+|-/g, '');
      if (!/^\d+$/.test(num)) {
          return false;
      }
      card = cardFromNumber(num);
      if (!card) {
          return false;
      }
      return (ref = num.length, indexOf.call(card.length, ref) >= 0) && (card.luhn === false || luhnCheck(num));
  };

  var validateCardExpiry = function validateCardExpiry(month, year) {
      var currentTime, expiry, ref;
      if ((typeof month === 'undefined' ? 'undefined' : babelHelpers.typeof(month)) === 'object' && 'month' in month) {
          ref = month, month = ref.month, year = ref.year;
      }
      if (!(month && year)) {
          return false;
      }
      month = String(month).trim();
      year = String(year).trim();
      if (!/^\d+$/.test(month)) {
          return false;
      }
      if (!/^\d+$/.test(year)) {
          return false;
      }
      if (!(1 <= month && month <= 12)) {
          return false;
      }
      if (year.length === 2) {
          if (year < 70) {
              year = '20' + year;
          } else {
              year = '19' + year;
          }
      }
      if (year.length !== 4) {
          return false;
      }
      expiry = new Date(year, month);
      currentTime = new Date();
      expiry.setMonth(expiry.getMonth() - 1);
      expiry.setMonth(expiry.getMonth() + 1, 1);
      return expiry > currentTime;
  };

  var validateCardcvv = function validateCardcvv(cvv, type) {
      var card = void 0,
          ref = void 0;
      cvv = String(cvv).trim();
      if (!/^\d+$/.test(cvv)) {
          return false;
      }
      card = cardFromType(type);
      if (card != null) {
          return ref = cvv.length, indexOf.call(card.cvvLength, ref) >= 0;
      } else {
          return cvv.length >= 3 && cvv.length <= 4;
      }
  };

  var creditCardVM = {
      setEvents: setEvents,
      validateCardNumber: validateCardNumber,
      validateCardcvv: validateCardcvv,
      validateCardExpiry: validateCardExpiry
  };

  var creditCardInput = {
      controller: function controller(args) {
          var cardType = args.type || m$1.prop('unknown');
          // TODO: move all input logic to vdom paradigm
          // CreditCard Input still handle events on a dom-based model.
          var setCreditCardHandlers = function setCreditCardHandlers(el, isInitialized) {
              if (!isInitialized) {
                  creditCardVM.setEvents(el, cardType, args.value);
              }
          };

          return {
              setCreditCardHandlers: setCreditCardHandlers,
              cardType: cardType
          };
      },
      view: function view(ctrl, args) {
          return m$1('input.w-input.text-field[name="' + args.name + '"][required="required"][type="tel"]', {
              onfocus: args.onfocus,
              class: args.class,
              config: ctrl.setCreditCardHandlers,
              onblur: args.onblur
          });
      }
  };

  var I18nScope$19 = _$1.partial(h.i18nScope, 'projects.contributions.edit.errors');

  var paymentCreditCard = {
      controller: function controller(args) {
          var vm = args.vm,
              loadingInstallments = m$1.prop(true),
              loadingSavedCreditCards = m$1.prop(true),
              selectedCreditCard = m$1.prop({ id: -1 }),
              selectedInstallment = m$1.prop('1'),
              showForm = m$1.prop(false),
              creditCardType = m$1.prop('unknown'),
              errors = m$1.prop([]);

          var onSubmit = function onSubmit() {
              if (selectedCreditCard().id === -1) {
                  checkcvv();
                  checkExpiry();
                  checkCreditCard();
                  checkCreditCardName();
              } else {
                  vm.creditCardFields.errors([]);
              }

              if (vm.creditCardFields.errors().length === 0) {
                  vm.sendPayment(selectedCreditCard, selectedInstallment, args.contribution_id, args.project_id);
              }

              return false;
          };

          var handleValidity = function handleValidity(isValid, errorObj) {
              if (!isValid) {
                  vm.creditCardFields.errors().push(errorObj);
              } else {
                  var errorsWithout = _$1.reject(vm.creditCardFields.errors(), function (err) {
                      return _$1.isEqual(err, errorObj);
                  });
                  vm.creditCardFields.errors(errorsWithout);
              }
          };

          var checkcvv = function checkcvv() {
              var isValid = creditCardVM.validateCardcvv(vm.creditCardFields.cvv(), creditCardType()),
                  errorObj = { field: 'cvv', message: I18n.t('inline.creditcard_cvv', I18nScope$19()) };

              handleValidity(isValid, errorObj);

              return isValid;
          };

          var checkExpiry = function checkExpiry() {
              var isValid = creditCardVM.validateCardExpiry(vm.creditCardFields.expMonth(), vm.creditCardFields.expYear()),
                  errorObj = { field: 'expiry', message: I18n.t('inline.creditcard_expiry', I18nScope$19()) };

              handleValidity(isValid, errorObj);

              return isValid;
          };

          var checkCreditCard = function checkCreditCard() {
              var isValid = creditCardVM.validateCardNumber(vm.creditCardFields.number()),
                  errorObj = { field: 'number', message: I18n.t('inline.creditcard_number', I18nScope$19()) };

              handleValidity(isValid, errorObj);

              return isValid;
          };

          var checkCreditCardName = function checkCreditCardName() {
              var trimmedString = vm.creditCardFields.name().replace(/ /g, '');
              var charsOnly = /^[a-zA-Z]*$/;
              var errorObj = { field: 'name', message: I18n.t('inline.creditcard_name', I18nScope$19()) };
              var isValid = !(_$1.isEmpty(trimmedString) || !charsOnly.test(trimmedString));

              handleValidity(isValid, errorObj);

              return isValid;
          };

          var applyCreditCardNameMask = _$1.compose(vm.creditCardFields.name, h.noNumbersMask);

          var applyCvvMask = function applyCvvMask(value) {
              var setValue = h.numbersOnlyMask(value.substr(0, 4));

              return vm.creditCardFields.cvv(setValue);
          };

          var fieldHasError = function fieldHasError(fieldName) {
              var fieldWithError = _$1.findWhere(vm.creditCardFields.errors(), { field: fieldName });

              return fieldWithError ? m$1.component(inlineError, { message: fieldWithError.message }) : '';
          };

          var buildTooltip = function buildTooltip(tooltipText) {
              return m$1.component(tooltip, {
                  el: '.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary',
                  text: tooltipText,
                  width: 380
              });
          };

          var isCreditCardSelected = function isCreditCardSelected(card, idx) {
              return selectedCreditCard() === card;
          };

          var loadPagarme = function loadPagarme(el, isInit) {
              if (!isInit) {
                  var script = document.createElement('script');
                  script.src = '//assets.pagar.me/js/pagarme.min.js';
                  document.body.appendChild(script);
                  script.onload = function () {
                      vm.pagarme(window.PagarMe);
                  };
              }
          };

          var selectCreditCard = function selectCreditCard(card) {
              selectedCreditCard(card);

              if (card.id === -1) {
                  showForm(true);
              } else {
                  showForm(false);
              }
          };

          vm.getInstallments(args.contribution_id).then(function () {
              loadingInstallments(false);
              m$1.redraw();
          });

          vm.getSavedCreditCards(args.user_id).then(function (savedCards) {
              loadingSavedCreditCards(false);
              selectCreditCard(savedCards[0]);
              m$1.redraw();
          });

          return {
              vm: vm,
              onSubmit: onSubmit,
              fieldHasError: fieldHasError,
              buildTooltip: buildTooltip,
              loadingInstallments: loadingInstallments,
              loadingSavedCreditCards: loadingSavedCreditCards,
              installments: vm.installments,
              selectedInstallment: selectedInstallment,
              savedCreditCards: vm.savedCreditCards,
              creditCard: vm.creditCardFields,
              creditCardType: creditCardType,
              checkCreditCard: checkCreditCard,
              checkCreditCardName: checkCreditCardName,
              applyCreditCardNameMask: applyCreditCardNameMask,
              applyCreditCardMask: vm.applyCreditCardMask,
              applyCvvMask: applyCvvMask,
              checkcvv: checkcvv,
              selectCreditCard: selectCreditCard,
              isCreditCardSelected: isCreditCardSelected,
              expMonths: vm.expMonthOptions(),
              expYears: vm.expYearOptions(),
              loadPagarme: loadPagarme,
              showForm: showForm
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-form.u-marginbottom-40', {
              config: ctrl.loadPagarme
          }, [m$1('form[name="email-form"]', {
              onsubmit: ctrl.onSubmit
          }, [!ctrl.loadingSavedCreditCards() && ctrl.savedCreditCards().length > 1 ? m$1('.my-credit-cards.w-form.back-payment-form-creditcard.records-choice.u-marginbottom-40', _$1.map(ctrl.savedCreditCards(), function (card, idx) {
              return m$1('div#credit-card-record-' + idx + '.w-row.creditcard-records', {
                  style: 'cursor:pointer;',
                  onclick: function onclick() {
                      return ctrl.selectCreditCard(card);
                  }
              }, [m$1('.w-col.w-col-1.w-sub-col', m$1('.w-radio.w-clearfix.back-payment-credit-card-radio-field', m$1('input', {
                  checked: ctrl.isCreditCardSelected(card, idx),
                  name: 'payment_subscription_card',
                  type: 'radio',
                  value: card.card_key
              }))), card.id === -1 ? m$1('.w-col.w-col-11', m$1('.fontsize-small.fontweight-semibold.fontcolor-secondary', 'Usar outro cartão de crédito.')) : [m$1('.w-col.w-col-2.w-sub-col.w-sub-col-middle', m$1('.fontsize-small.fontweight-semibold.text-success', card.card_brand.toUpperCase())), m$1('.w-col.w-col-5.w-sub-col.w-sub-col-middle', m$1('.fontsize-small.fontweight-semibold.u-marginbottom-20', 'XXXX.XXXX.XXXX.' + card.last_digits)), m$1('.w-col.w-col-4', ctrl.loadingInstallments() || ctrl.installments().length <= 1 ? '' : m$1('select.w-select.text-field.text-field-creditcard', {
                  onchange: m$1.withAttr('value', ctrl.selectedInstallment),
                  value: ctrl.selectedInstallment()
              }, _$1.map(ctrl.installments(), function (installment) {
                  return m$1('option[value="' + installment.number + '"]', installment.number + ' X R$ ' + installment.amount);
              })))]]);
          })) : ctrl.loadingSavedCreditCards() ? m$1('.fontsize-small.u-marginbottom-40', 'Carregando informações de cartão...') : '', !ctrl.showForm() ? '' : m$1('#credit-card-payment-form.u-marginbottom-40', [m$1('div#credit-card-name', [m$1('label.field-label.fontweight-semibold[for="credit-card-name"]', 'Nome no cartão de crédito *'), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip.u-marginbottom-10', 'Nome impresso na frente do seu cartão de crédito'), m$1('input.w-input.text-field[name="credit-card-name"][required="required"][type="text"]', {
              onfocus: ctrl.vm.resetCreditCardFieldError('name'),
              class: ctrl.fieldHasError('name') ? 'error' : '',
              onblur: ctrl.checkCreditCardName,
              onkeyup: m$1.withAttr('value', ctrl.applyCreditCardNameMask),
              value: ctrl.creditCard.name()
          }), ctrl.fieldHasError('name')]), m$1('div#credit-card-number', [m$1('label.field-label.fontweight-semibold[for="credit-card-number"]', 'Número do cartão de crédito *'), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip.u-marginbottom-10', 'O número normalmente com 16 dígitos na frente do seu cartão de crédito'), m$1.component(creditCardInput, {
              onfocus: ctrl.vm.resetCreditCardFieldError('number'),
              onblur: ctrl.checkCreditCard,
              class: ctrl.fieldHasError('number') ? 'error' : '',
              value: ctrl.creditCard.number,
              name: 'credit-card-number',
              type: ctrl.creditCardType
          }), ctrl.fieldHasError('number')]), m$1('div#credit-card-date', [m$1('label.field-label.fontweight-semibold[for="expiration-date"]', ['Expiração (mm/aaaa)* ']), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip.u-marginbottom-10', 'A data de validade, geralmente na frente do cartão'), m$1('.w-row', [m$1('.w-col.w-col-6.w-col-tiny-6.w-sub-col-middle', m$1('select.w-select.text-field[name="expiration-date_month"]', {
              onfocus: ctrl.vm.resetCreditCardFieldError('expiry'),
              class: ctrl.fieldHasError('expiry') ? 'error' : '',
              onchange: m$1.withAttr('value', ctrl.creditCard.expMonth),
              value: ctrl.creditCard.expMonth()
          }, _$1.map(ctrl.expMonths, function (month) {
              return m$1('option', { value: month[0] }, month[1]);
          }))), m$1('.w-col.w-col-6.w-col-tiny-6', m$1('select.w-select.text-field[name="expiration-date_year"]', {
              onfocus: ctrl.vm.resetCreditCardFieldError('expiry'),
              class: ctrl.fieldHasError('expiry') ? 'error' : '',
              onchange: m$1.withAttr('value', ctrl.creditCard.expYear),
              value: ctrl.creditCard.expYear()
          }, _$1.map(ctrl.expYears, function (year) {
              return m$1('option', { value: year }, year);
          }))), m$1('.w-col.w-col-12', ctrl.fieldHasError('expiry'))])]), m$1('div#credit-card-cvv', [m$1('label.field-label.fontweight-semibold[for="credit-card-cvv"]', ['Código de Segurança (CVV / CVV2)* ', ctrl.buildTooltip('Os 3 ou 4 dígitos que estão nas costas dos cartões VISA, MASTER, DINERS, ELO e na frente do cartão AMEX.')]), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip.u-marginbottom-10', 'Os 3 dígitos (quando na frente) ou 4 dígitos (quando atrás) do seu cartão'), m$1('.w-row', [m$1('.w-col.w-col-8.w-col-tiny-6.w-sub-col-middle', m$1('input.w-input.text-field[name="credit-card-cvv"][required="required"][type="tel"]', {
              onfocus: ctrl.vm.resetCreditCardFieldError('cvv'),
              class: ctrl.fieldHasError('cvv') ? 'error' : '',
              onkeyup: m$1.withAttr('value', ctrl.applyCvvMask),
              onblur: ctrl.checkcvv,
              value: ctrl.creditCard.cvv()
          }), ctrl.fieldHasError('cvv')), m$1('.w-col.w-col-4.w-col-tiny-6.u-text-center', m$1('img[src="https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/57298c1c7e99926e77127bdd_cvv-card.jpg"][width="176"]'))])]), ctrl.loadingInstallments() || ctrl.installments().length <= 1 ? '' : m$1('.w-row', [m$1('.w-col.w-col-6', [m$1('label.field-label.fontweight-semibold[for="split"]', 'Parcelas'), m$1('select.w-select.text-field[name="split"]', {
              onchange: m$1.withAttr('value', ctrl.selectedInstallment),
              value: ctrl.selectedInstallment()
          }, _$1.map(ctrl.installments(), function (installment) {
              return m$1('option[value="' + installment.number + '"]', installment.number + ' X R$ ' + installment.amount);
          }))]), m$1('.w-col.w-col-6')]), m$1('.w-checkbox.w-clearfix', [m$1('input#payment_save_card.w-checkbox-input[type="checkbox"][name="payment_save_card"]', {
              onchange: m$1.withAttr('checked', ctrl.creditCard.save),
              checked: ctrl.creditCard.save()
          }), m$1('label.w-form-label[for="payment_save_card"]', 'Quero salvar meu cartão de crédito para facilitar apoios futuros.')])]), m$1('.w-row', [m$1('.w-col.w-col-8.w-col-push-2', [!_$1.isEmpty(ctrl.vm.submissionError()) ? m$1('.card.card-error.u-radius.zindex-10.u-marginbottom-30.fontsize-smaller', m$1('.u-marginbottom-10.fontweight-bold', m$1.trust(ctrl.vm.submissionError()))) : '', ctrl.vm.isLoading() ? h.loader() : m$1('input.btn.btn-large.u-marginbottom-20[type="submit"]', { value: 'Finalizar pagamento' }, ''), m$1('.fontsize-smallest.u-text-center.u-marginbottom-30', ['Ao apoiar, você concorda com os ', m$1('a.alt-link[href=\'/pt/terms-of-use\']', 'Termos de Uso '), 'e ', m$1('a.alt-link[href=\'/pt/privacy-policy\']', 'Política de Privacidade')])])])])]);
      }
  };

  var paymentForm = {
      controller: function controller() {
          return {
              toggleBoleto: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('#catarse_pagarme_form', [m$1('.u-text-center-small-only.u-marginbottom-30', [m$1('.fontsize-large.fontweight-semibold', 'Escolha o meio de pagamento'), m$1('.fontsize-smallest.fontcolor-secondary.fontweight-semibold', [m$1('span.fa.fa-lock'), ' PAGAMENTO SEGURO'])]), m$1('.flex-row.u-marginbottom-40', [m$1('a.w-inline-block.btn-select.flex-column.u-marginbottom-20.u-text-center[href=\'javascript:void(0);\']', {
              onclick: ctrl.toggleBoleto.toggle,
              class: !ctrl.toggleBoleto() ? 'selected' : ''
          }, [m$1('.fontsize-base.fontweight-semibold', 'Cartão de crédito'), m$1('.fontcolor-secondary.fontsize-smallest.u-marginbottom-20', '(não aceitamos cartão de débito)'), m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/57299bd8f326a24d4828a0fd_credit-cards.png\']')]), !args.vm.isInternational() ? m$1('a.w-inline-block.btn-select.flex-column.u-marginbottom-20.u-text-center[href=\'javascript:void(0);\']', {
              onclick: ctrl.toggleBoleto.toggle,
              class: ctrl.toggleBoleto() ? 'selected' : ''
          }, [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-20', 'Boleto bancário'), m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/57299c6ef96a6e44489a7a07_boleto.png\'][width=\'48\']')]) : m$1('.flex-column')]), !ctrl.toggleBoleto() ? m$1('#credit-card-section', [m$1.component(paymentCreditCard, { vm: args.vm, contribution_id: args.contribution_id, project_id: args.project_id, user_id: args.user_id })]) : !args.vm.isInternational() ? m$1('#boleto-section', [m$1.component(paymentSlip, { vm: args.vm, contribution_id: args.contribution_id, project_id: args.project_id })]) : '']);
      }
  };

  var I18nScope$15 = _.partial(h.i18nScope, 'projects.contributions');

  var projectsPayment = {
      controller: function controller(args) {
          var project = projectVM.getCurrentProject(),
              mode = project.mode,
              projectUserId = project.user.id,
              vm = paymentVM(mode),
              showPaymentForm = m$1.prop(false),
              contribution = contributionVM.getCurrentContribution(),
              reward = m$1.prop(contribution().reward),
              value = contribution().value,
              phoneMask = _.partial(h.mask, '(99) 9999-99999'),
              documentMask = _.partial(h.mask, '999.999.999-99'),
              zipcodeMask = _.partial(h.mask, '99999-999');

          //Teste para verificarmos se o chat nessa página irá trazer maior num. contribuições.
          if (_.contains([41679, 40191, 40271, 38768, 42815, 43002, 42129, 41867, 39655], project.project_id)) {
              window.$zopim && window.$zopim.livechat || function (d, s) {
                  var z = window.$zopim = function (c) {
                      z._.push(c);
                  },
                      $ = z.s = d.createElement(s),
                      e = d.getElementsByTagName(s)[0];z.set = function (o) {
                      z.set._.push(o);
                  };z._ = [];z.set._ = [];$.async = !0;$.setAttribute('charset', 'utf-8');$.src = '//v2.zopim.com/?2qPtIfZX0Exh5Szx5JUoUxWKqrTQI5Tm';z.t = +new Date();$.type = 'text/javascript';e.parentNode.insertBefore($, e);
              }(document, 'script');
              setTimeout(function t() {
                  var c = window.$zopim && window.$zopim.livechat;
                  if (c) {
                      var u = h.getUser();
                      if (u) {
                          c.setEmail(u.email);
                          c.setName(u.name);
                      }
                  } else {
                      setTimeout(t, 30 * 1000);
                  }
              }, 30 * 1000);
          }

          var validateForm = function validateForm() {
              if (vm.validate()) {
                  showPaymentForm(true);
              }
          };

          var fieldHasError = function fieldHasError(fieldName) {
              var fieldWithError = _.findWhere(vm.fields.errors(), {
                  field: fieldName
              });

              return fieldWithError ? m$1.component(inlineError, {
                  message: fieldWithError.message
              }) : '';
          };

          var setStateOther = function setStateOther(el, isInit) {
              if (!isInit) {
                  vm.fields.userState('');
              }
          };

          var applyDocumentMask = _.compose(vm.fields.ownerDocument, documentMask);

          var applyZipcodeMask = _.compose(vm.fields.zipCode, zipcodeMask);

          var applyPhoneMask = _.compose(vm.fields.phone, phoneMask);

          var addressChange = function addressChange(fn) {
              return function (e) {
                  CatarseAnalytics.oneTimeEvent({
                      cat: 'contribution_finish',
                      act: vm.isInternational ? 'contribution_address_br' : 'contribution_address_int'
                  });

                  if (_.isFunction(fn)) {
                      fn(e);
                  }
              };
          };

          if (!h.getUser()) {
              return h.navigateToDevise();
          }

          return {
              addressChange: addressChange,
              applyDocumentMask: applyDocumentMask,
              applyZipcodeMask: applyZipcodeMask,
              applyPhoneMask: applyPhoneMask,
              fieldHasError: fieldHasError,
              setStateOther: setStateOther,
              validateForm: validateForm,
              projectUserId: projectUserId,
              showPaymentForm: showPaymentForm,
              contribution: contribution,
              reward: reward,
              value: value,
              mode: mode,
              vm: vm
          };
      },
      view: function view(ctrl, args) {
          return m$1('#project-payment.w-section.w-clearfix.section', [m$1('.w-col', m$1('.w-clearfix.w-hidden-main.w-hidden-medium.card.u-radius.u-marginbottom-20', [m$1('.fontsize-smaller.fontweight-semibold', 'Valor do apoio'), m$1('a.w-inline-block.arrow-admin.fa.fa-chevron-down.fontcolor-secondary[href=\'#\']'), m$1('.w-clearfix.u-marginbottom-20', m$1('.fontsize-larger.text-success.u-left', 'R$ ' + Number(ctrl.value).toFixed())), m$1('.w-clearfix.back-payment-info-reward', {
              style: {
                  'display': 'none'
              }
          }, [m$1('.fontsize-smaller.fontweight-semibold.u-marginbottom-10', 'Recompensa selecionada'), m$1('.fontsize-smallest', '' + ctrl.reward().description), m$1('a.fontsize-small.link-hidden.u-right.fontweight-semibold[href="/projects/' + projectVM.currentProject().project_id + '/contributions/new"]', 'Editar')])])), m$1('.w-container', m$1('.w-row', [m$1('.w-col.w-col-8', [!_.isEmpty(ctrl.vm.fields.errors()) ? m$1('.card.card-error.u-radius.zindex-10.u-marginbottom-30.fontsize-smaller[data-ix=\'display-none-on-load\']', m$1('.u-marginbottom-10.fontweight-bold', ['Por favor, reveja os campos abaixo antes de prosseguir', m$1('.errors', _.map(ctrl.vm.fields.errors(), function (error) {
              return m$1('p', error.message);
          }))])) : '', m$1('.w-form', [m$1('form.u-marginbottom-40[data-name=\'Email Form\'][id=\'email-form\'][name=\'email-form\']', [m$1('.u-marginbottom-40.u-text-center-small-only', [m$1('.fontweight-semibold.lineheight-tight.fontsize-large', 'Dados de contato e endereço'), m$1('.fontsize-smaller', '* Preenchimento obrigatório')]), m$1('.w-row', [m$1('.w-col.w-col-7.w-sub-col', [m$1('label.field-label.fontweight-semibold[for=\'complete-name\']', 'Nome completo *'), m$1('input.w-input.text-field[id=\'complete-name\'][name=\'complete-name\']', {
              onfocus: ctrl.vm.resetFieldError('completeName'),
              class: ctrl.fieldHasError('completeName') ? 'error' : false,
              type: 'text',
              onchange: m$1.withAttr('value', ctrl.vm.fields.completeName),
              value: ctrl.vm.fields.completeName(),
              required: 'required',
              placeholder: 'Nome Completo'
          }), ctrl.fieldHasError('completeName')]), m$1('.w-col.w-col-5', [m$1('label.field-label.fontweight-semibold[for=\'email\']', 'Email *'), m$1('input.w-input.text-field[id=\'email\']', {
              onfocus: ctrl.vm.resetFieldError('email'),
              class: ctrl.fieldHasError('email') ? 'error' : false,
              type: 'email',
              onchange: m$1.withAttr('value', ctrl.vm.fields.email),
              value: ctrl.vm.fields.email(),
              required: 'required',
              placeholder: 'email@catarse.me'
          }), ctrl.fieldHasError('email')])]), m$1('.w-checkbox.w-clearfix', [m$1('input.w-checkbox-input[id=\'anonymous\'][name=\'anonymous\'][type=\'checkbox\']', {
              onclick: function onclick() {
                  return CatarseAnalytics.event({ cat: 'contribution_finish', act: 'contribution_anonymous_change' });
              },
              onchange: m$1.withAttr('value', ctrl.vm.fields.anonymous),
              checked: ctrl.vm.fields.anonymous()
          }), m$1('label.w-form-label.fontsize-smallest[for=\'anonymous\']', 'Quero que meu apoio não fique público')]), ctrl.vm.fields.anonymous() ? m$1('.card.card-message.u-radius.zindex-10.fontsize-smallest', m$1('div', [m$1('span.fontweight-bold', [I18n$1.t('edit.anonymous_confirmation_title', I18nScope$15()), m$1('br')]), m$1('br'), I18n$1.t('edit.anonymous_confirmation', I18nScope$15())])) : ''])]), m$1('.u-marginbottom-40', m$1('.w-form', [m$1('.w-row', [m$1('.w-col.w-col-6.w-sub-col', [m$1('label.field-label.fontweight-semibold[for=\'country\']', 'País *'), m$1('select.w-select.text-field[id=\'country\']', {
              onfocus: ctrl.vm.resetFieldError('userCountryId'),
              class: ctrl.fieldHasError('userCountryId') ? 'error' : false,
              onchange: m$1.withAttr('value', ctrl.vm.fields.userCountryId),
              value: ctrl.vm.fields.userCountryId()
          }, _.map(ctrl.vm.fields.countries(), function (country, idx) {
              return m$1('option', {
                  value: country.id,
                  key: idx,
                  selected: country.id === ctrl.vm.fields.userCountryId()
              }, country.name);
          })), ctrl.fieldHasError('userCountryId')]), m$1('.w-col.w-col-6', [m$1('label.field-label.fontweight-semibold[for=\'zip-code\']', !ctrl.vm.isInternational() ? 'CEP *' : 'ZIP'), m$1('input.w-input.text-field[id=\'zip-code\']', {
              type: 'tel',
              onfocus: ctrl.vm.resetFieldError('zipCode'),
              class: ctrl.fieldHasError('zipCode') ? 'error' : false,
              onchange: ctrl.addressChange(),
              onkeyup: m$1.withAttr('value', function (value) {
                  return !ctrl.vm.isInternational() ? ctrl.applyZipcodeMask(value) : ctrl.vm.fields.zipCode(value);
              }),
              value: ctrl.vm.fields.zipCode(),
              placeholder: '42100000'
          }), ctrl.fieldHasError('zipCode')])]), m$1('.w-row', [m$1('.w-col.w-col-6.w-sub-col', [m$1('label.field-label.fontweight-semibold[for=\'street\']', 'Rua *'), m$1('input.w-input.text-field[id=\'street\']', {
              onfocus: ctrl.vm.resetFieldError('street'),
              class: ctrl.fieldHasError('street') ? 'error' : false,
              type: 'text',
              onchange: ctrl.addressChange(m$1.withAttr('value', ctrl.vm.fields.street)),
              value: ctrl.vm.fields.street(),
              required: 'required',
              placeholder: 'Rua Da Minha Casa'
          }), ctrl.fieldHasError('street')]), m$1('.w-col.w-col-6', m$1('.w-row', [m$1('.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle', [m$1('label.field-label.fontweight-semibold[for=\'number\']', 'Número *'), m$1('input.w-input.text-field[id=\'number\']', {
              onfocus: ctrl.vm.resetFieldError('number'),
              class: ctrl.fieldHasError('number') ? 'error' : false,
              type: 'text',
              onchange: ctrl.addressChange(m$1.withAttr('value', ctrl.vm.fields.number)),
              value: ctrl.vm.fields.number(),
              required: 'required',
              placeholder: '421'
          }), ctrl.fieldHasError('number')]), m$1('.w-col.w-col-6.w-col-small-6.w-col-tiny-6', [m$1('label.field-label.fontweight-semibold[for=\'address-complement\']', 'Complemento'), m$1('input.w-input.text-field[id=\'address-complement\']', {
              onfocus: ctrl.vm.resetFieldError('addressComplement'),
              class: ctrl.fieldHasError('addressComplement') ? 'error' : false,
              type: 'text',
              onchange: ctrl.addressChange(m$1.withAttr('value', ctrl.vm.fields.addressComplement)),
              value: ctrl.vm.fields.addressComplement(),
              placeholder: 'Residencial 123'
          }), ctrl.fieldHasError('addressComplement')])]))]), m$1('.w-row', [m$1('.w-col.w-col-4.w-sub-col', [m$1('label.field-label.fontweight-semibold[for=\'neighbourhood\']', 'Bairro ' + (ctrl.vm.isInternational() ? '' : '*')), m$1('input.w-input.text-field[id=\'neighbourhood\']', {
              onfocus: ctrl.vm.resetFieldError('neighbourhood'),
              class: ctrl.fieldHasError('neighbourhood') ? 'error' : false,
              type: 'text',
              onchange: ctrl.addressChange(m$1.withAttr('value', ctrl.vm.fields.neighbourhood)),
              value: ctrl.vm.fields.neighbourhood(),
              required: !ctrl.vm.isInternational(),
              placeholder: 'São José'
          }), ctrl.fieldHasError('neighbourhood')]), m$1('.w-col.w-col-4.w-sub-col', [m$1('label.field-label.fontweight-semibold[for=\'city\']', 'Cidade *'), m$1('input.w-input.text-field[id=\'city\']', {
              onfocus: ctrl.vm.resetFieldError('city'),
              class: ctrl.fieldHasError('city') ? 'error' : false,
              type: 'text',
              onchange: ctrl.addressChange(m$1.withAttr('value', ctrl.vm.fields.city)),
              value: ctrl.vm.fields.city(),
              required: 'required',
              placeholder: 'Cidade'
          }), ctrl.fieldHasError('city')]), m$1('.w-col.w-col-4', [m$1('label.field-label.fontweight-semibold[for=\'state\']', 'Estado *'), ctrl.vm.isInternational() ? m$1('input.w-input.text-field[id=\'address-state\']', {
              onchange: ctrl.addressChange(m$1.withAttr('value', ctrl.vm.fields.userState)),
              value: ctrl.vm.fields.userState()
          }) : m$1('select.w-select.text-field[id=\'address-state\']', {
              onfocus: ctrl.vm.resetFieldError('userState'),
              class: ctrl.fieldHasError('userState') ? 'error' : false,
              onchange: ctrl.addressChange(m$1.withAttr('value', ctrl.vm.fields.userState)),
              value: ctrl.vm.fields.userState()
          }, _.map(ctrl.vm.fields.states(), function (state, idx) {
              return m$1('option', {
                  value: state.acronym,
                  selected: state.acronym === ctrl.vm.fields.userState()
              }, state.name);
          })), ctrl.fieldHasError('userState')])]), !ctrl.vm.isInternational() ? m$1('.w-row', [m$1('.w-col.w-col-6.w-sub-col', [m$1('label.field-label.fontweight-semibold[for=\'document\']', 'CPF *'), m$1('input.w-input.text-field[id=\'document\']', {
              onfocus: ctrl.vm.resetFieldError('ownerDocument'),
              class: ctrl.fieldHasError('ownerDocument') ? 'error' : false,
              type: 'tel',
              onkeyup: m$1.withAttr('value', ctrl.applyDocumentMask),
              value: ctrl.vm.fields.ownerDocument(),
              required: 'required'
          }), ctrl.fieldHasError('ownerDocument')]), m$1('.w-col.w-col-6', [m$1('label.field-label.fontweight-semibold[for=\'phone\']', 'Telefone *'), m$1('input.w-input.text-field[id=\'phone\']', {
              onfocus: ctrl.vm.resetFieldError('phone'),
              class: ctrl.fieldHasError('phone') ? 'error' : false,
              type: 'tel',
              onkeyup: m$1.withAttr('value', ctrl.applyPhoneMask),
              value: ctrl.vm.fields.phone(),
              required: 'required'
          }), ctrl.fieldHasError('phone')])]) : ''])), m$1('.w-row.u-marginbottom-40', m$1('.w-col.w-col-push-3.w-col-6', m$1('button.btn.btn-large', {
              onclick: function onclick() {
                  return CatarseAnalytics.event({ cat: 'contribution_finish', act: 'contribution_next_click' }, ctrl.validateForm);
              }
          }, 'Próximo passo'))), ctrl.showPaymentForm() ? m$1.component(paymentForm, {
              vm: ctrl.vm,
              contribution_id: ctrl.contribution().id,
              project_id: projectVM.currentProject().project_id,
              user_id: h.getUser().user_id
          }) : '']), m$1('.w-col.w-col-4', [m$1('.w-hidden-small.w-hidden-tiny.card.u-radius.u-marginbottom-20', [m$1('.fontsize-smaller.fontweight-semibold.u-marginbottom-20', 'Valor do apoio'), m$1('.w-clearfix.u-marginbottom-20', [m$1('.fontsize-larger.text-success.u-left', 'R$ ' + Number(ctrl.value).toFixed()), m$1('a.fontsize-small.link-hidden.u-right.fontweight-semibold[href="/projects/' + projectVM.currentProject().project_id + '/contributions/new' + (ctrl.reward().id ? '?reward_id=' + ctrl.reward().id : '') + '"]', 'Editar')]), m$1('.back-payment-info-reward', [m$1('.fontsize-smaller.fontweight-semibold.u-marginbottom-10', 'Recompensa selecionada'), m$1('.fontsize-smallest', ctrl.reward().description ? ctrl.reward().description : 'Você irá apoiar com R$ ' + Number(ctrl.value).toFixed() + ' e não quer nenhuma recompensa por seu apoio.')])]), m$1.component(faqBox, {
              mode: ctrl.mode,
              faq: ctrl.vm.faq,
              projectUserId: ctrl.projectUserId
          })])]))]);
      }
  };

  var projectsReward = {
      controller: function controller(args) {
          var vm = rewardVM,
              selectedReward = vm.selectedReward,
              selectReward = vm.selectReward,
              rewards = vm.rewards(),
              mode = projectVM.currentProject().mode,
              faq = I18n$1.translations[I18n$1.currentLocale()].projects.faq[mode];

          //TODO unify projectsReward and project-reward-list reward submission. fix routing issue.
          var submitContribution = function submitContribution() {
              var valueFloat = h.monetaryToFloat(vm.contributionValue);

              if (valueFloat < vm.selectedReward().minimum_value) {
                  vm.error('O valor de apoio para essa recompensa deve ser de no mínimo R$' + vm.selectedReward().minimum_value);
              } else {
                  if (!h.getUser()) {
                      h.storeObject(storeKey, { value: valueFloat, reward: vm.selectedReward() });

                      return h.navigateToDevise('/' + projectVM.currentProject().permalink);
                  } else {
                      vm.error('');
                      vm.contributionValue(valueFloat);
                      m$1.route('/projects/' + projectVM.currentproject().project_id + '/payment', {
                          project_user_id: projectVM.currentProject().user_id
                      });
                  }
              }

              return false;
          };

          var isSelected = function isSelected(reward) {
              return reward.id === selectedReward().id;
          };

          if (_$1.first(rewards).id !== vm.noReward.id) {
              rewards.unshift(vm.noReward);
          }

          return {
              rewards: rewards,
              project: projectVM.currentProject,
              contributionValue: vm.contributionValue,
              submitContribution: submitContribution,
              applyMask: vm.applyMask,
              error: vm.error,
              isSelected: isSelected,
              selectedReward: selectedReward,
              selectReward: selectReward,
              faq: faq
          };
      },
      view: function view(ctrl, args) {
          var project = ctrl.project;

          return m$1('#project-rewards', [m$1('.w-section.page-header.u-text-center', [m$1('.w-container', [m$1('h1.fontsize-larger.fontweight-semibold.project-name[itemprop="name"]', h.selfOrEmpty(project().name || project().project_name)), m$1('h2.fontsize-base.lineheight-looser[itemprop="author"]', ['por ', project().user ? project().user.name : project().owner_name ? project().owner_name : ''])])]), m$1('.w-section.header-cont-new', m$1('.w-container', m$1('.fontweight-semibold.lineheight-tight.text-success.fontsize-large.u-text-center-small-only', 'Escolha a recompensa e em seguida o valor do apoio'))), m$1('.section[id=\'new-contribution\']', m$1('.w-container', m$1('.w-row', [m$1('.w-col.w-col-8', m$1('.w-form.back-reward-form', m$1('form.simple_form.new_contribution', {
              onsubmit: ctrl.submitContribution
          }, _$1.map(ctrl.rewards, function (reward, index) {
              var isSelected = ctrl.isSelected(reward),
                  monetaryMinimum = h.applyMonetaryMask(reward.minimum_value);

              return m$1('span.radio.w-radio.w-clearfix.back-reward-radio-reward', {
                  class: isSelected ? 'selected' : '',
                  onclick: ctrl.selectReward(reward),
                  key: index
              }, m$1('label[for=\'contribution_reward_id_' + reward.id + '\']', [m$1('input.radio_buttons.optional.w-input.text-field.w-radio-input.back-reward-radio-button[id=\'contribution_reward_id_' + reward.id + '\'][name=\'contribution[reward_id]\'][type=\'radio\'][value=\'' + reward.id + '\']', {
                  checked: isSelected ? true : false
              }), m$1('label.w-form-label.fontsize-base.fontweight-semibold.u-marginbottom-10[for=\'contribution_reward_' + reward.id + '\']', reward.id === -1 ? 'Não quero recompensa' : 'R$ ' + reward.minimum_value + ' ou mais'), isSelected ? m$1('.w-row.back-reward-money', [m$1('.w-col.w-col-8.w-col-small-8.w-col-tiny-8.w-sub-col-middle.w-clearfix', [m$1('.w-row', [m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-3', m$1('.back-reward-input-reward.placeholder', 'R$')), m$1('.w-col.w-col-9.w-col-small-9.w-col-tiny-9', m$1('input.user-reward-value.back-reward-input-reward[autocomplete=\'off\'][type=\'tel\']', {
                  class: ctrl.error() ? 'error' : '',
                  min: monetaryMinimum,
                  placeholder: monetaryMinimum,
                  onkeyup: m$1.withAttr('value', ctrl.applyMask),
                  value: ctrl.contributionValue()
              }))]), ctrl.error().length > 0 ? m$1('.text-error', [m$1('br'), m$1('span.fa.fa-exclamation-triangle'), ' ' + ctrl.error()]) : '']), m$1('.submit-form.w-col.w-col-4.w-col-small-4.w-col-tiny-4', m$1('button.btn.btn-large', ['Continuar  ', m$1('span.fa.fa-chevron-right')]))]) : '', m$1('.back-reward-reward-description', [m$1('.fontsize-smaller.u-marginbottom-10', reward.description), reward.deliver_at ? m$1('.fontsize-smallest.fontcolor-secondary', 'Estimativa de entrega: ' + h.momentify(reward.deliver_at, 'MMM/YYYY')) : ''])])); //End map return
          })))), m$1('.w-col.w-col-4', m$1.component(faqBox, { mode: ctrl.project().mode, faq: ctrl.faq }))])))]);
      }
  };

  var I18nScope$20 = _$1.partial(h.i18nScope, 'projects.publish');

  var publish = {
    controller: function controller(args) {
      var filtersVM = postgrest.filtersVM({
        project_id: 'eq'
      }),
          projectAccount = m$1.prop([]),
          projectDetails = m$1.prop([]),
          acceptTerm = m$1.prop([true, true, true, true, true, true, true, true, true]),
          flexAcceptTerm = m$1.prop([true, true, true, true, true, true, true, true, true]),
          showNextTerm = function showNextTerm(index, acceptTerms) {
        var terms = acceptTerms();
        if (terms[index]) {
          terms[index] = false;
          acceptTerms(terms);
          var nextTerm = document.getElementsByClassName('w-hidden publish-rules');
          if (nextTerm[0] !== undefined) {
            nextTerm[0].classList.remove('w-hidden');
          }
        }
        //show publish button after accepting all rules
        if (index === terms.length - 1) {
          document.getElementsByClassName('publish-btn-section')[0].classList.remove('w-hidden');
        }
      },
          loader = postgrest.loaderWithToken;

      filtersVM.project_id(args.root.getAttribute('data-id'));

      var l = loader(models.projectDetail.getRowOptions(filtersVM.parameters())),
          accountL = loader(models.projectAccount.getRowOptions(filtersVM.parameters()));
      l.load().then(projectDetails);
      accountL.load().then(projectAccount);

      var expiresAt = function expiresAt() {
        var project = _$1.first(projectDetails());
        return moment().add(project.online_days, 'days');
      };

      return {
        l: l,
        accountL: accountL,
        expiresAt: expiresAt,
        filtersVM: filtersVM,
        acceptTerm: acceptTerm,
        flexAcceptTerm: flexAcceptTerm,
        showNextTerm: showNextTerm,
        projectAccount: projectAccount,
        projectDetails: projectDetails
      };
    },
    view: function view(ctrl, args) {
      var project = _$1.first(ctrl.projectDetails()),
          account = _$1.first(ctrl.projectAccount()),
          flexTerms = function flexTerms(project) {
        return [m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '1/9'), ' ', m$1('span.fontweight-semibold', 'Regras da modalidade FLEX')]), m$1('div', 'Você escolheu a campanha flexível. Dessa maneira, você irá receber todos os recursos arrecadados junto aos apoiadores ao final do prazo da campanha (descontando a taxa do Catarse) e deverá cumprir com a execução do projeto e com a entrega das recompensas oferecidas independente do quanto arrecadar.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '2/9'), ' ', m$1('span.fontweight-semibold', 'Meta de arrecadação')]), m$1('div', 'A meta não poderá ser alterada após o publicação do projeto.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '3/9'), ' ', m$1('span.fontweight-semibold', 'Taxas')]), m$1('div', ['Ao final da campanha, cobraremos 13% sobre o ', m$1('span.fontweight-semibold', 'valor total arrecadado.')])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '4/9'), ' ', m$1('span.fontweight-semibold', 'Prazo da campanha')]), m$1('div', 'Uma vez definido, o prazo de encerramento não poderá ser alterado. Caso você tenha iniciado a campanha com o prazo em aberto, deverá defini-lo durante a campanha, podendo deixar a campanha aberta por no máximo 12 meses.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '5/9'), ' ', m$1('span.fontweight-semibold', 'Prazo para repasse')]), m$1('div', 'Quando o prazo do seu projeto chegar ao fim, você deverá confirmar seus dados bancários. Após essa confirmação, o Catarse depositará na sua conta corrente em até 10 dias úteis. O valor depositado já estará considerando o desconto de 13% da taxa.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '6/9'), ' ', m$1('span.fontweight-semibold', 'O que pode e não pode alterar na página do projeto a partir da publicação?')]), [m$1('div', [m$1('span.fontweight-semibold', 'Você não poderá:'), ' alterar o tipo de financiamento, nome do projeto, a URL (link) do projeto, a categoria escolhida, a meta de arrecadação, o prazo (caso já tenha definido), as recompensas onde existirem apoios já efetuados e a conta bancária registrada.\
                    ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'Você poderá: '), 'editar o conteúdo da descrição do projeto, alterar o vídeo principal da campanha, a imagem do projeto, a frase de efeito, as recompensas onde não existirem apoios efetuados, além de adicionar novas recompensas durante a arrecadação.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '7/9'), ' ', m$1('span.fontweight-semibold', 'Responsabilidade do Catarse')]), [m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold', 'O Catarse é responsável:'), ' pelo desenvolvimento tecnológico da plataforma, atendimento de dúvidas e problemas (tanto de apoiadores quanto de realizadores), por hospedar o projeto na plataforma e por garantir a segurança das transações financeiras.\ ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'O Catarse não é responsável:'), ' pelo financiamento, divulgação e execução, nem pela entrega de recompensas dos projetos inscritos.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '8/9'), ' ', m$1('span.fontweight-semibold', 'Suas responsabilidades')]), m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold'), 'É sua responsabilidade tudo aquilo que diz respeito a formatação do projeto, planejamento e divulgação da campanha de arrecadação, mobilização de apoiadores, execução do projeto, produção e entrega de recompensas dentro do prazo estimado e comunicação com apoiadores.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '9/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Retiradas de projetos no ar')]), m$1('div', [m$1('span.fontweight-semibold'), 'O CATARSE reserva-se o direito de, a seu exclusivo critério e uma vez notificado a respeito, cancelar projetos e encerrar as contas de CRIADORES DE PROJETOS que violem nossas ', m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638-Diretrizes-para-cria%C3%A7%C3%A3o-de-projetos\'][target=\'_blank\']', 'Regras do Jogo'), ' e ', m$1('a.alt-link[href=\'http://www.catarse.me/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), '.'])])];
      },
          terms = function terms(project) {
        return [m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '1/9'), ' ', m$1('span.fontweight-semibold', 'Regras da modalidade Tudo-ou-nada')]), m$1('div', ['Você escolheu a campanha tudo-ou-nada. Dessa maneira, você só irá receber os recursos arrecadados ', m$1('span.fontweight-semibold', 'caso atinja ou supere a meta de arrecadação'), '. Caso contrário, todos seus apoiadores serão reembolsados. Você será responsável pela entrega das recompensas oferecidas se seu projeto alcançar a meta de arrecadação.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '2/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Meta de arrecadação')]), m$1('div', 'A meta não poderá ser alterada após o publicação do projeto.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '3/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Taxas')]), m$1('div', ['Cobramos 13% sobre o ', m$1('span.fontweight-semibold', 'valor total arrecadado'), ' pelo seu projeto caso ele atinja ou supere a meta dentro do prazo da campanha. Se o projeto não atingir a meta, nenhuma taxa será cobrada.', m$1('span.fontweight-semibold')])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '4/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Prazo da campanha')]), m$1('div', 'Seu projeto estará em arrecadação no Catarse até o dia ' + h.momentify(ctrl.expiresAt()) + ' às 23h59min59s. Este prazo não poderá ser alterado após a publicação do projeto.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '5/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Regras do repasse e reembolso')]), m$1('div', ['Quando o prazo do seu projeto chegar ao fim, você deverá confirmar seus dados bancários. Após essa confirmação, o Catarse depositará o valor arrecadado, já com o desconto da taxa, na sua conta corrente em até 10 dias úteis. Caso o projeto não atinja 100% da meta dentro do prazo, o Catarse irá reembolsar os apoiadores. ', m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202365507\'][target=\'_blank\']', 'Saiba mais sobre o processo de reembolso'), '.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '6/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'O que pode e não pode alterar na página do projeto a partir da publicação?')]), [m$1('div', [m$1('span.fontweight-semibold', 'Você não poderá:'), ' alterar o nome do projeto, a URL (link) do projeto, a categoria escolhida, o tipo de financiamento, a conta bancária, a meta de arrecadação, o prazo escolhido e as recompensas onde existirem apoios já efetuados.\ ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'Você poderá: '), 'editar o conteúdo da descrição do projeto, alterar o vídeo principal da campanha, a imagem do projeto, a frase de efeito, as recompensas onde não existirem apoios efetuados, além de adicionar novas recompensas durante a arrecadação.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '7/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Responsabilidade do Catarse')]), [m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold', 'O Catarse é responsável:'), ' pelo desenvolvimento tecnológico da plataforma, atendimento de dúvidas e problemas (tanto de apoiadores quanto de realizadores), por hospedar o projeto na plataforma e por garantir a segurança das transações financeiras.\ ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'O Catarse não é responsável:'), ' pelo financiamento, divulgação e execução, nem pela entrega de recompensas dos projetos inscritos.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '8/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Suas responsabilidades')]), m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold'), 'É sua responsabilidade tudo aquilo que diz respeito a formatação do projeto, planejamento e divulgação da campanha de arrecadação, mobilização de apoiadores, execução do projeto, produção e entrega de recompensas dentro do prazo estimado e comunicação com apoiadores.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '9/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Retiradas de projetos no ar')]), m$1('div', [m$1('span.fontweight-semibold'), 'O CATARSE reserva-se o direito de, a seu exclusivo critério e uma vez notificado a respeito, cancelar projetos e encerrar as contas de CRIADORES DE PROJETOS que violem nossas ', m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638-Diretrizes-para-cria%C3%A7%C3%A3o-de-projetos\'][target=\'_blank\']', 'Regras do Jogo'), ' e ', m$1('a.alt-link[href=\'http://www.catarse.me/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), '.'])])];
      };

      return [!ctrl.l() && !ctrl.accountL() ? [project.is_owner_or_admin ? m$1.component(projectDashboardMenu, {
        project: m$1.prop(project),
        hidePublish: true
      }) : '', m$1('.w-section.section-product.' + project.mode), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img.u-marginbottom-20[src=\'/assets/catarse_bootstrap/launch-icon.png\'][width=\'94\']'), m$1('.fontsize-large.fontweight-semibold.u-marginbottom-20', 'Pronto para lançar sua campanha?'), m$1('.fontsize-base.u-marginbottom-30', 'Preparamos uma lista com informações importantes para você checar antes de colocar seu projeto no ar!')])]), m$1('.w-col.w-col-3')])])]), m$1('.divider'), m$1('.w-section.section-one-column.bg-gray.section.before-footer', [m$1('.w-container', [m$1('.card.medium.u-marginbottom-60.card-terciary', [m$1('.w-row', [m$1('.w-col.w-col-6.w-clearfix', [m$1('img.card-project-thumb.u-right[src=' + project.large_image + ']')]), m$1('.w-col.w-col-6', [m$1('.u-marginbottom-30.fontsize-base', [m$1('div', [m$1('span.fontweight-semibold', 'Título: '), project.name]), m$1('div', [m$1('span.fontweight-semibold', 'Link: '), 'www.catarse.me/' + project.permalink]), m$1('div', [m$1('span.fontweight-semibold', 'Modalidade de financiamento: '), I18n$1.t(project.mode, I18nScope$20())]), m$1('div', [m$1('span.fontweight-semibold', 'Meta de arrecadação: '), 'R$ ' + h.formatNumber(project.goal, 2, 3)]), project.online_days !== null ? m$1('div', [m$1('span.fontweight-semibold', 'Prazo: ' + project.online_days + ' ' + (project.online_days > 1 ? 'dias' : 'dia'))]) : '', m$1('div', [m$1('span.fontweight-semibold', 'Responsável: '), account.owner_name]), m$1('div', [m$1('span.fontweight-semibold', 'CPF/CNPJ: '), account.owner_document])])])]), m$1('.u-text-center', [m$1('.w-row', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10', [m$1('.divider.u-marginbottom-10'), m$1('.fontsize-small.fontcolor-secondary', 'Os dados acima não podem ser alterados após o projeto entrar no ar. Se você precisa fazer mudanças, navegue na barra lateral e volte aqui quando estiver tudo pronto!')]), m$1('.w-col.w-col-1')])])]), m$1('.card.medium.u-radius.u-marginbottom-60', [m$1('.u-text-center.u-marginbottom-60', [m$1('.fontsize-large.fontweight-semibold', 'Relembre nossas regras'), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.fontsize-small', ['Antes de publicar, clique nos círculos abaixo e confirme que você está ciente de como funciona o Catarse. Qualquer dúvida, ', m$1('a.alt-link[href=\'https://equipecatarse.zendesk.com/account/dropboxes/20298537\'][target=\'_blank\']', 'entre em contato'), '!'])]), m$1('.w-col.w-col-2')])]), _$1.map(project.mode == 'flex' ? flexTerms(project) : terms(project), function (term, index) {
        return m$1('.u-marginbottom-30.fontsize-base' + (index == 0 ? '' : '.w-hidden.publish-rules'), [m$1('.w-row[id=\'rule-' + index + '\']', [m$1('.w-col.w-col-1.u-text-center', [m$1('div', [m$1((project.mode == 'flex' ? ctrl.flexAcceptTerm() : ctrl.acceptTerm())[index] ? 'a.w-inline-block.checkbox-big[href=\'#rule-' + (index + 1) + '\']' : 'a.w-inline-block.checkbox-big.checkbox--selected.fa.fa-check.fa-lg[href=\'#rule-' + (index + 1) + '\']', { onclick: function onclick() {
            return ctrl.showNextTerm(index, project.mode == 'flex' ? ctrl.flexAcceptTerm : ctrl.acceptTerm);
          } })])]), term])]);
      })]), m$1('.w-row.publish-btn-section.w-hidden', [m$1('.w-col.w-col-4'), m$1('.w-col.w-col-4', [m$1('a.btn.btn-large.u-marginbottom-20[href=/' + (project.mode == 'flex' ? 'flexible_projects' : 'projects') + '/' + project.project_id + '/push_to_online]', 'Publicar agora!'), m$1('.u-text-center.fontsize-smaller', ['Ao publicar o seu projeto, você está aceitando os ', m$1('a.alt-link[href=\'/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), ' e ', m$1('a.alt-link[href=\'/privacy-policy\'][target=\'_blank\']', 'Politica de Privacidade')])]), m$1('.w-col.w-col-4')])])]), '\
    '] : h.loader()];
    }
  };

  var startVM = function startVM(I18n) {
      var i18nStart = I18n.translations[I18n.currentLocale()].pages.start,
          testimonials = i18nStart.testimonials,
          categoryProjects = i18nStart.categoryProjects,
          panes = i18nStart.panes,
          qa = i18nStart.qa;

      return {
          testimonials: _$1.map(testimonials, function (testimonial) {
              return {
                  thumbUrl: testimonial.thumb,
                  content: testimonial.content,
                  name: testimonial.name,
                  totals: testimonial.totals
              };
          }),
          panes: _$1.map(panes, function (pane) {
              return {
                  label: pane.label,
                  src: pane.src
              };
          }),
          questions: {
              col_1: _$1.map(qa.col_1, function (question) {
                  return {
                      question: question.question,
                      answer: question.answer
                  };
              }),
              col_2: _$1.map(qa.col_2, function (question) {
                  return {
                      question: question.question,
                      answer: question.answer
                  };
              })
          },
          categoryProjects: _$1.map(categoryProjects, function (category) {
              return {
                  categoryId: category.category_id,
                  sampleProjects: [category.sample_project_ids.primary, category.sample_project_ids.secondary]
              };
          })
      };
  };

  var youtubeLightbox = {
      controller: function controller(args) {
          var player = void 0;
          var showLightbox = h.toggleProp(false, true),
              setYoutube = function setYoutube(el, isInitialized) {
              if (!isInitialized) {
                  var tag = document.createElement('script'),
                      firstScriptTag = document.getElementsByTagName('script')[0];
                  tag.src = 'https://www.youtube.com/iframe_api';
                  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                  window.onYouTubeIframeAPIReady = createPlayer;
              }
          },
              closeVideo = function closeVideo() {
              if (!_.isUndefined(player)) {
                  player.pauseVideo();
              }

              showLightbox.toggle();

              return false;
          },
              createPlayer = function createPlayer() {
              player = new YT.Player('ytvideo', {
                  height: '528',
                  width: '940',
                  videoId: args.src,
                  playerVars: {
                      showInfo: 0,
                      modestBranding: 0
                  },
                  events: {
                      'onStateChange': function onStateChange(state) {
                          return state.data === 0 ? closeVideo() : false;
                      }
                  }
              });
          };

          return {
              showLightbox: showLightbox,
              setYoutube: setYoutube,
              closeVideo: closeVideo
          };
      },
      view: function view(ctrl, args) {
          return m$1('#youtube-lightbox', [m$1('a#youtube-play.w-lightbox.w-inline-block.fa.fa-play-circle.fontcolor-negative.fa-5x[href=\'javascript:void(0);\']', {
              onclick: function onclick() {
                  ctrl.showLightbox.toggle();
                  args.onclick && args.onclick();
              }
          }), m$1('#lightbox.w-lightbox-backdrop[style="display:' + (ctrl.showLightbox() ? 'block' : 'none') + '"]', [m$1('.w-lightbox-container', [m$1('.w-lightbox-content', [m$1('.w-lightbox-view', [m$1('.w-lightbox-frame', [m$1('figure.w-lightbox-figure', [m$1('img.w-lightbox-img.w-lightbox-image[src=\'data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20width=%22940%22%20height=%22528%22/%3E\']'), m$1('#ytvideo.embedly-embed.w-lightbox-embed', { config: ctrl.setYoutube })])])]), m$1('.w-lightbox-spinner.w-lightbox-hide'), m$1('.w-lightbox-control.w-lightbox-left.w-lightbox-inactive'), m$1('.w-lightbox-control.w-lightbox-right.w-lightbox-inactive'), m$1('#youtube-close.w-lightbox-control.w-lightbox-close', { onclick: ctrl.closeVideo })]), m$1('.w-lightbox-strip')])])]);
      }
  };

  var I18nScope$21 = _$1.partial(h.i18nScope, 'pages.start');

  var start = {
      controller: function controller() {
          h.analytics.windowScroll({ cat: 'project_start', act: 'start_page_scroll' });
          var stats = m$1.prop([]),
              categories = m$1.prop([]),
              selectedPane = m$1.prop(0),
              selectedCategory = m$1.prop([]),
              featuredProjects = m$1.prop([]),
              selectedCategoryIdx = m$1.prop(-1),
              startvm = startVM(I18n$1),
              filters = postgrest$1.filtersVM,
              paneImages = startvm.panes,
              categoryvm = filters({
              category_id: 'eq'
          }),
              projectvm = filters({
              project_id: 'eq'
          }),
              uservm = filters({
              id: 'eq'
          }),
              loader = postgrest$1.loader,
              statsLoader = loader(models.statistic.getRowOptions()),
              loadCategories = function loadCategories() {
              return models.category.getPage(filters({}).order({
                  name: 'asc'
              }).parameters()).then(categories);
          },
              selectPane = function selectPane(idx) {
              return function () {
                  selectedPane(idx);
              };
          },
              lCategory = function lCategory() {
              return loader(models.categoryTotals.getRowOptions(categoryvm.parameters()));
          },
              lProject = function lProject() {
              return loader(models.projectDetail.getRowOptions(projectvm.parameters()));
          },
              lUser = function lUser() {
              return loader(models.userDetail.getRowOptions(uservm.parameters()));
          },
              selectCategory = function selectCategory(category) {
              return function () {
                  selectedCategoryIdx(category.id);
                  categoryvm.category_id(category.id);
                  selectedCategory([category]);
                  m$1.redraw();
                  lCategory().load().then(loadCategoryProjects);
              };
          },
              setUser = function setUser(user, idx) {
              featuredProjects()[idx] = _$1.extend({}, featuredProjects()[idx], {
                  userThumb: _$1.first(user).profile_img_thumbnail
              });
          },
              setProject = function setProject(project, idx) {
              featuredProjects()[idx] = _$1.first(project);
              uservm.id(_$1.first(project).user.id);
              lUser().load().then(function (user) {
                  return setUser(user, idx);
              });
          },
              loadCategoryProjects = function loadCategoryProjects(category) {
              selectedCategory(category);
              var categoryProjects = _$1.findWhere(startvm.categoryProjects, {
                  categoryId: _$1.first(category).category_id
              });
              featuredProjects([]);
              if (!_$1.isUndefined(categoryProjects)) {
                  _$1.map(categoryProjects.sampleProjects, function (project_id, idx) {
                      if (!_$1.isUndefined(project_id)) {
                          projectvm.project_id(project_id);
                          lProject().load().then(function (project) {
                              return setProject(project, idx);
                          });
                      }
                  });
              }
          };

          statsLoader.load().then(stats);
          loadCategories();

          return {
              stats: stats,
              categories: categories,
              paneImages: paneImages,
              selectCategory: selectCategory,
              selectedCategory: selectedCategory,
              selectedCategoryIdx: selectedCategoryIdx,
              selectPane: selectPane,
              selectedPane: selectedPane,
              featuredProjects: featuredProjects,
              testimonials: startvm.testimonials,
              questions: startvm.questions
          };
      },
      view: function view(ctrl, args) {
          var stats = _$1.first(ctrl.stats());
          var testimonials = function testimonials() {
              return _$1.map(ctrl.testimonials, function (testimonial) {
                  var content = m$1('.card.u-radius.card-big.card-terciary', [m$1('.u-text-center.u-marginbottom-20', [m$1('img.thumb-testimonial.u-round.u-marginbottom-20[src="' + testimonial.thumbUrl + '"]')]), m$1('p.fontsize-large.u-marginbottom-30', '"' + testimonial.content + '"'), m$1('.u-text-center', [m$1('.fontsize-large.fontweight-semibold', testimonial.name), m$1('.fontsize-base', testimonial.totals)])]);

                  return {
                      content: content
                  };
              });
          };

          return m$1('#start', { config: h.setPageTitle(I18n$1.t('header_html', I18nScope$21())) }, [m$1('.w-section.hero-full.hero-start', [m$1('.w-container.u-text-center', [m$1('.fontsize-megajumbo.fontweight-semibold.u-marginbottom-40', I18n$1.t('slogan', I18nScope$21())), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-4.w-col-push-4', [m$1('a.btn.btn-large.u-marginbottom-10[href="#start-form"]', {
              config: h.scrollTo(),
              onclick: h.analytics.event({ cat: 'project_start', act: 'start_btnstart_click' })
          }, I18n$1.t('submit', I18nScope$21()))])]), m$1('.w-row', _$1.isEmpty(stats) ? '' : [m$1('.w-col.w-col-4', [m$1('.fontsize-largest.lineheight-loose', h.formatNumber(stats.total_contributors, 0, 3)), m$1('p.fontsize-small.start-stats', I18n$1.t('header.people', I18nScope$21()))]), m$1('.w-col.w-col-4', [m$1('.fontsize-largest.lineheight-loose', stats.total_contributed.toString().slice(0, 2) + ' milhões'), m$1('p.fontsize-small.start-stats', I18n$1.t('header.money', I18nScope$21()))]), m$1('.w-col.w-col-4', [m$1('.fontsize-largest.lineheight-loose', h.formatNumber(stats.total_projects_success, 0, 3)), m$1('p.fontsize-small.start-stats', I18n$1.t('header.success', I18nScope$21()))])])])]), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-10.w-col-push-1.u-text-center', [m$1('.fontsize-larger.u-marginbottom-10.fontweight-semibold', I18n$1.t('page-title', I18nScope$21())), m$1('.fontsize-small', I18n$1.t('page-subtitle', I18nScope$21()))])]), m$1('.w-clearfix.how-row', [m$1('.w-hidden-small.w-hidden-tiny.how-col-01', [m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.1', I18nScope$21())), m$1('.fontsize-base', I18n$1.t('banner.2', I18nScope$21()))]), m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.3', I18nScope$21())), m$1('.fontsize-base', I18n$1.t('banner.4', I18nScope$21()))])]), m$1('.how-col-02'), m$1('.how-col-03', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.5', I18nScope$21())), m$1('.fontsize-base', I18n$1.t('banner.6', I18nScope$21())), m$1('.fontweight-semibold.fontsize-large.u-margintop-30', I18n$1.t('banner.7', I18nScope$21())), m$1('.fontsize-base', I18n$1.t('banner.8', I18nScope$21()))]), m$1('.w-hidden-main.w-hidden-medium.how-col-01', [m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.1', I18nScope$21())), m$1('.fontsize-base', I18n$1.t('banner.2', I18nScope$21()))]), m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.3', I18nScope$21())), m$1('.fontsize-base', I18n$1.t('banner.4', I18nScope$21()))])])])])]), m$1('.w-section.divider'), m$1('.w-section.section-large', [m$1('.w-container.u-text-center.u-marginbottom-60', [m$1('div', [m$1('span.fontsize-largest.fontweight-semibold', I18n$1.t('features.title', I18nScope$21()))]), m$1('.w-hidden-small.w-hidden-tiny.fontsize-large.u-marginbottom-20', I18n$1.t('features.subtitle', I18nScope$21())), m$1('.w-hidden-main.w-hidden-medium.u-margintop-30', [m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_1', I18nScope$21())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_2', I18nScope$21())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_3', I18nScope$21())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_4', I18nScope$21())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_5', I18nScope$21())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_6', I18nScope$21()))])]), m$1('.w-container', [m$1('.w-tabs.w-hidden-small.w-hidden-tiny', [m$1('.w-tab-menu.w-col.w-col-4', _$1.map(ctrl.paneImages, function (pane, idx) {
              return m$1('btn.w-tab-link.w-inline-block.tab-list-item' + (idx === ctrl.selectedPane() ? '.selected' : ''), {
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_solution_click', lbl: pane.label }, ctrl.selectPane(idx))
              }, pane.label);
          })), m$1('.w-tab-content.w-col.w-col-8', _$1.map(ctrl.paneImages, function (pane, idx) {
              return m$1('.w-tab-pane', [m$1('img[src="' + pane.src + '"].pane-image' + (idx === ctrl.selectedPane() ? '.selected' : ''))]);
          }))])])]), m$1('.w-section.section-large.card-terciary', m$1('.w-container', [m$1('.u-text-center.u-marginbottom-40', [m$1('div', m$1('span.fontsize-largest.fontweight-semibold', I18n$1.t('mode.title', I18nScope$21()))), m$1('.w-row', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10', m$1('.fontsize-large.u-marginbottom-20', I18n$1.t('mode.subtitle', I18nScope$21()))), m$1('.w-col.w-col-1')])]), m$1('div', m$1('.flex-row.u-marginbottom-40', [m$1('.flex-column.card.u-radius.u-marginbottom-30', [m$1('.u-text-center.u-marginbottom-30', m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/5632f334ec8a367d341b4bba_badge-aon.png\']')), m$1('.fontsize-large.flex-column.u-marginbottom-20', [I18n$1.t('mode.aon.info', I18nScope$21()), m$1.trust('&nbsp;')]), m$1('.fontsize-base.flex-column.fontcolor-secondary', I18n$1.t('mode.aon.info_2', I18nScope$21()))]), m$1('.flex-column.card.u-radius.u-marginbottom-30', [m$1('.u-text-center.u-marginbottom-30', m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/5632ebacd092957f34eaea9c_badge-flex.png\']')), m$1('.fontsize-large.flex-column.u-marginbottom-20', I18n$1.t('mode.flex.info', I18nScope$21())), m$1('.fontsize-base.flex-column.fontcolor-secondary', I18n$1.t('mode.flex.info_2', I18nScope$21()))])])), m$1('.u-text-center.u-marginbottom-30', [m$1('.fontsize-large.fontweight-semibold', I18n$1.t('mode.tax_info', I18nScope$21())), m$1('.fontsize-smallest.fontcolor-secondary', [I18n$1.t('mode.failed_info', I18nScope$21()), m$1.trust(I18n$1.t('mode.more_link', I18nScope$21()))])])])), m$1('.w-section.section-large.bg-blue-one', [m$1('.w-container.u-text-center', [m$1('.fontsize-larger.lineheight-tight.fontcolor-negative.u-marginbottom-20', [I18n$1.t('video.title', I18nScope$21()), m$1('br'), I18n$1.t('video.subtitle', I18nScope$21())]), m$1.component(youtubeLightbox, {
              src: I18n$1.t('video.src', I18nScope$21()),
              onclick: h.analytics.event({ cat: 'project_start', act: 'start_video_play' })
          })])]), m$1('.w-hidden-small.w-hidden-tiny.section-categories', [m$1('.w-container', [m$1('.u-text-center', [m$1('.w-row', [m$1('.w-col.w-col-10.w-col-push-1', [m$1('.fontsize-large.u-marginbottom-40.fontcolor-negative', I18n$1.t('categories.title', I18nScope$21()))])])]), m$1('.w-tabs', [m$1('.w-tab-menu.u-text-center', _$1.map(ctrl.categories(), function (category) {
              return m$1('a.w-tab-link.w-inline-block.btn-category.small.btn-inline' + (ctrl.selectedCategoryIdx() === category.id ? '.w--current' : ''), {
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_category_click', lbl: category.name }, ctrl.selectCategory(category))
              }, [m$1('div', category.name)]);
          })), m$1('.w-tab-content.u-margintop-40', [m$1('.w-tab-pane.w--tab-active', [m$1('.w-row', ctrl.selectedCategoryIdx() !== -1 ? _$1.map(ctrl.selectedCategory(), function (category) {
              return [m$1('.w-col.w-col-5', [m$1('.fontsize-jumbo.u-marginbottom-20', category.name), m$1('a.w-button.btn.btn-medium.btn-inline.btn-dark[href="#start-form"]', {
                  config: h.scrollTo()
              }, I18n$1.t('submit', I18nScope$21()))]), m$1('.w-col.w-col-7', [m$1('.fontsize-megajumbo.fontcolor-negative', 'R$ ' + (category.total_successful_value ? h.formatNumber(category.total_successful_value, 2, 3) : '...')), m$1('.fontsize-large.u-marginbottom-20', 'Doados para projetos'), m$1('.fontsize-megajumbo.fontcolor-negative', category.successful_projects ? category.successful_projects : '...'), m$1('.fontsize-large.u-marginbottom-30', 'Projetos financiados'), !_$1.isEmpty(ctrl.featuredProjects()) ? _$1.map(ctrl.featuredProjects(), function (project) {
                  return !_$1.isUndefined(project) ? m$1('.w-row.u-marginbottom-10', [m$1('.w-col.w-col-1', [m$1('img.user-avatar[src="' + h.useAvatarOrDefault(project.userThumb) + '"]')]), m$1('.w-col.w-col-11', [m$1('.fontsize-base.fontweight-semibold', project.user.name), m$1('.fontsize-smallest', [I18n$1.t('categories.pledged', I18nScope$21({ pledged: h.formatNumber(project.pledged), contributors: project.total_contributors })), m$1('a.link-hidden[href="/' + project.permalink + '"]', project.name)])])]) : m$1('.fontsize-base', I18n$1.t('categories.loading_featured', I18nScope$21()));
              }) : ''])];
          }) : '')])])])])]), m$1.component(slider, {
              slides: testimonials(),
              title: I18n$1.t('testimonials_title', I18nScope$21()),
              slideClass: 'slide-testimonials-content',
              wrapperClass: 'slide-testimonials',
              onchange: h.analytics.event({ cat: 'project_start', act: 'start_testimonials_change' })
          }), m$1('.w-section.divider.u-margintop-30'), m$1('.w-container', [m$1('.fontsize-larger.u-text-center.u-marginbottom-60.u-margintop-40', I18n$1.t('qa_title', I18nScope$21())), m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-6', _$1.map(ctrl.questions.col_1, function (question) {
              return m$1.component(landingQA, {
                  question: question.question,
                  answer: question.answer,
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_qa_click', lbl: question.question })
              });
          })), m$1('.w-col.w-col-6', _$1.map(ctrl.questions.col_2, function (question) {
              return m$1.component(landingQA, {
                  question: question.question,
                  answer: question.answer,
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_qa_click', lbl: question.question })
              });
          }))])]), m$1('#start-form.w-section.section-large.u-text-center.bg-purple.before-footer', [m$1('.w-container', [m$1('.fontsize-jumbo.fontcolor-negative.u-marginbottom-60', 'Crie o seu rascunho gratuitamente!'), m$1('form[action="/projects/fallback_create"][method="GET"].w-row.w-form', {
              onsubmit: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_submit' })
          }, [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.fontsize-larger.fontcolor-negative.u-marginbottom-10', I18n$1.t('form.title', I18nScope$21())), m$1('input[name="utf8"][type="hidden"][value="✓"]'), m$1('input[name="authenticity_token"][type="hidden"][value="' + h.authenticityToken() + '"]'), m$1('input.w-input.text-field.medium.u-marginbottom-30[type="text"]', {
              name: 'project[name]',
              onchange: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_change', lbl: 'name' })
          }), m$1('.fontsize-larger.fontcolor-negative.u-marginbottom-10', 'na categoria'), m$1('select.w-select.text-field.medium.u-marginbottom-40', {
              name: 'project[category_id]',
              onchange: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_change', lbl: 'category' })
          }, [m$1('option[value=""]', I18n$1.t('form.select_default', I18nScope$21())), _$1.map(ctrl.categories(), function (category) {
              return m$1('option[value="' + category.id + '"]', category.name);
          })])]), m$1('.w-col.w-col-2'), m$1('.w-row.u-marginbottom-80', [m$1('.w-col.w-col-4.w-col-push-4.u-margintop-40', [m$1('input[type="submit"][value="' + I18n$1.t('form.submit', I18nScope$21()) + '"].w-button.btn.btn-large')])])])])])]);
      }
  };

  var teamTotal = {
      controller: function controller() {
          var vm = {
              collection: m$1.prop([])
          };

          models.teamTotal.getRow().then(function (data) {
              vm.collection(data);
          });

          return {
              vm: vm
          };
      },
      view: function view(ctrl, args) {
          return m$1('#team-total-static.w-section.section-one-column.section.u-margintop-40.u-text-center.u-marginbottom-20', [ctrl.vm.collection().map(function (teamTotal) {
              return m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.fontsize-base.u-marginbottom-30', 'Hoje somos ' + teamTotal.member_count + ' pessoas espalhadas por ' + teamTotal.total_cities + ' cidades em ' + teamTotal.countries.length + ' países (' + teamTotal.countries.toString() + ')! O Catarse é independente, sem investidores, de código aberto e construído com amor. Nossa paixão é construir um ambiente onde cada vez mais projetos possam ganhar vida.'), m$1('.fontsize-larger.lineheight-tight.text-success', 'Nossa equipe, junta, já apoiou R$' + h.formatNumber(teamTotal.total_amount) + ' para ' + teamTotal.total_contributed_projects + ' projetos!')]), m$1('.w-col.w-col-2')])]);
          })]);
      }
  };

  var teamMembers = {
      controller: function controller() {
          var vm = {
              collection: m$1.prop([])
          },
              groupCollection = function groupCollection(collection, groupTotal) {
              return _$1.map(_$1.range(Math.ceil(collection.length / groupTotal)), function (i) {
                  return collection.slice(i * groupTotal, (i + 1) * groupTotal);
              });
          };

          models.teamMember.getPage().then(function (data) {
              vm.collection(groupCollection(data, 4));
          });

          return {
              vm: vm
          };
      },
      view: function view(ctrl) {
          return m$1('#team-members-static.w-section.section', [m$1('.w-container', [_$1.map(ctrl.vm.collection(), function (group) {
              return m$1('.w-row.u-text-center', [_$1.map(group, function (member) {
                  return m$1('.team-member.w-col.w-col-3.w-col-small-3.w-col-tiny-6.u-marginbottom-40', [m$1('a.alt-link[href="/users/' + member.id + '"]', [m$1('img.thumb.big.u-round.u-marginbottom-10[src="' + member.img + '"]'), m$1('.fontweight-semibold.fontsize-base', member.name)]), m$1('.fontsize-smallest.fontcolor-secondary', 'Apoiou ' + member.total_contributed_projects + ' projetos')]);
              })]);
          })])]);
      }
  };

  var team = {
      view: function view() {
          return m$1('#static-team-app', [m$1.component(teamTotal), m$1.component(teamMembers)]);
      }
  };

  var I18nScope$23 = _$1.partial(h.i18nScope, 'users.balance');

  var userBalanceRequestModelContent = {
      controller: function controller(args) {
          var vm = postgrest.filtersVM({ user_id: 'eq' }),
              balance = args.balance,
              loaderOpts = models.balanceTransfer.postOptions({
              user_id: balance.user_id }),
              requestLoader = postgrest.loaderWithToken(loaderOpts),
              displayDone = h.toggleProp(false, true),
              requestFund = function requestFund() {
              requestLoader.load().then(function (data) {
                  args.balanceManager.load();
                  args.balanceTransactionManager.load();
                  displayDone.toggle();
              });
          };

          args.bankAccountManager.load();

          return {
              requestLoader: requestLoader,
              requestFund: requestFund,
              bankAccounts: args.bankAccountManager.collection,
              displayDone: displayDone,
              loadBankA: args.bankAccountManager.loader
          };
      },
      view: function view(ctrl, args) {
          var balance = args.balance;

          return ctrl.loadBankA() ? h.loader() : m$1('div', _$1.map(ctrl.bankAccounts(), function (item) {
              return [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', I18n$1.t('withdraw', I18nScope$23()))]), ctrl.displayDone() ? m$1('.modal-dialog-content.u-text-center', [m$1('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m$1('p.fontsize-large', I18n$1.t('sucess_message', I18nScope$23()))]) : m$1('.modal-dialog-content', [m$1('.fontsize-base.u-marginbottom-20', [m$1('span.fontweight-semibold', 'Valor:'), m$1.trust('&nbsp;'), m$1('span.text-success', 'R$ ' + h.formatNumber(balance.amount, 2, 3))]), m$1('.fontsize-base.u-marginbottom-10', [m$1('span', { style: { 'font-weight': ' 600' } }, I18n$1.t('bank.account', I18nScope$23()))]), m$1('.fontsize-small.u-marginbottom-10', [m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.name', I18nScope$23())), m$1.trust('&nbsp;'), item.owner_name]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.cpf_cnpj', I18nScope$23())), m$1.trust('&nbsp;'), item.owner_document]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.bank_name', I18nScope$23())), m$1.trust('&nbsp;'), item.bank_name]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.agency', I18nScope$23())), m$1.trust('&nbsp;'), item.agency + '-' + item.agency_digit]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.account', I18nScope$23())), m$1.trust('&nbsp;'), item.account + '-' + item.account_digit])])]), !ctrl.displayDone() ? m$1('.modal-dialog-nav-bottom', [m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [ctrl.requestLoader() ? h.loader() : m$1('a.btn.btn-large.btn-request-fund[href="js:void(0);"]', { onclick: ctrl.requestFund }, 'Solicitar saque')]), m$1('.w-col.w-col-3')])]) : ''];
          }));
      }
  };

  var I18nScope$22 = _$1.partial(h.i18nScope, 'users.balance');

  var userBalance = {
      controller: function controller(args) {
          args.balanceManager.load();

          return {
              userBalances: args.balanceManager.collection,
              displayModal: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var balance = _$1.first(ctrl.userBalances()),
              balanceRequestModalC = [userBalanceRequestModelContent, _$1.extend({}, { balance: balance }, args)];

          return m$1('.w-section.section.user-balance-section', [ctrl.displayModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: balanceRequestModalC
          }) : '', m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-8.u-text-center-small-only.u-marginbottom-20', [m$1('.fontsize-larger', [I18n.t('totals', I18nScope$22()), m$1('span.text-success', 'R$ ' + h.formatNumber(balance.amount, 2, 3))])]), m$1('.w-col.w-col-4', [m$1('a[class="r-fund-btn w-button btn btn-medium u-marginbottom-10 ' + (balance.amount <= 0 ? 'btn-inactive' : '') + '"][href="js:void(0);"]', { onclick: balance.amount > 0 ? ctrl.displayModal.toggle : 'js:void(0);' }, I18n.t('withdraw_cta', I18nScope$22()))])])])]);
      }
  };

  var I18nScope$24 = _.partial(h.i18nScope, 'users.balance');

  var userBalanceTrasactionRow = {
      controller: function controller(args) {
          var expanded = h.toggleProp(false, true);

          if (args.index == 0) {
              expanded.toggle();
          }

          return {
              expanded: expanded
          };
      },
      view: function view(ctrl, args) {
          var item = args.item,
              createdAt = h.momentFromString(item.created_at, 'YYYY-MM-DD');

          return m$1('div[class=\'balance-card ' + (ctrl.expanded() ? 'card-detailed-open' : '') + '\']', m$1('.w-clearfix.card.card-clickable', [m$1('.w-row', [m$1('.w-col.w-col-2.w-col-tiny-2', [m$1('.fontsize-small.lineheight-tightest', createdAt.format('D MMM')), m$1('.fontsize-smallest.fontcolor-terciary', createdAt.format('YYYY'))]), m$1('.w-col.w-col-10.w-col-tiny-10', [m$1('.w-row', [m$1('.w-col.w-col-4', [m$1('div', [m$1('span.fontsize-smaller.fontcolor-secondary', I18n.t('debit', I18nScope$24())), m$1.trust('&nbsp;'), m$1('span.fontsize-base.text-error', 'R$ ' + h.formatNumber(Math.abs(item.debit), 2, 3))])]), m$1('.w-col.w-col-4', [m$1('div', [m$1('span.fontsize-smaller.fontcolor-secondary', I18n.t('credit', I18nScope$24())), m$1.trust('&nbsp;'), m$1('span.fontsize-base.text-success', 'R$ ' + h.formatNumber(item.credit, 2, 3))])]), m$1('.w-col.w-col-4', [m$1('div', [m$1('span.fontsize-smaller.fontcolor-secondary', I18n.t('totals', I18nScope$24())), m$1.trust('&nbsp;'), m$1('span.fontsize-base', 'R$ ' + h.formatNumber(item.total_amount, 2, 3))])])])])]), m$1('a.w-inline-block.arrow-admin.' + (ctrl.expanded() ? 'arrow-admin-opened' : '') + '.fa.fa-chevron-down.fontcolor-secondary[href="js:(void(0));"]', { onclick: ctrl.expanded.toggle })]), ctrl.expanded() ? m$1('.card', _.map(item.source, function (transaction) {
              var pos = transaction.amount >= 0;

              return m$1('div', [m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-2', [m$1('.text-' + (pos ? 'success' : 'error'), (pos ? '+' : '-') + ' R$ ' + h.formatNumber(Math.abs(transaction.amount), 2, 3))]), m$1('.w-col.w-col-10', [m$1('div', transaction.event_name + ' ' + transaction.origin_object.name)])]), m$1('.divider.u-marginbottom-10')]);
          })) : '');
      }
  };

  var userBalanceTransactions = {
      controller: function controller(args) {
          args.balanceTransactionManager.load();

          return {
              list: args.balanceTransactionManager.list
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.list;

          return m$1('.w-section.section.card-terciary.before-footer.balance-transactions-area', [m$1('.w-container', _$1.map(list.collection(), function (item, index) {
              return m$1.component(userBalanceTrasactionRow, { item: item, index: index });
          })), m$1('.container', [m$1('.w-row.u-margintop-40', [m$1('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])]);
      }
  };

  var userBalanceMain = {
      controller: function controller(args) {
          var userIdVM = postgrest$1.filtersVM({ user_id: 'eq' });

          userIdVM.user_id(args.user_id);

          // Handles with user balance request data
          var balanceManager = function () {
              var collection = m$1.prop([{ amount: 0, user_id: args.user_id }]),
                  load = function load() {
                  models.balance.getRowWithToken(userIdVM.parameters()).then(collection);
              };

              return {
                  collection: collection,
                  load: load
              };
          }(),


          // Handles with user balance transactions list data
          balanceTransactionManager = function () {
              var listVM = postgrest$1.paginationVM(models.balanceTransaction, 'created_at.desc'),
                  load = function load() {
                  listVM.firstPage(userIdVM.parameters());
              };

              return {
                  load: load,
                  list: listVM
              };
          }(),


          // Handles with bank account to check
          bankAccountManager = function () {
              var collection = m$1.prop([]),
                  loader = function () {
                  return postgrest$1.loaderWithToken(models.bankAccount.getRowOptions(userIdVM.parameters()));
              }(),
                  load = function load() {
                  loader.load().then(collection);
              };

              return {
                  collection: collection,
                  load: load,
                  loader: loader
              };
          }();

          return {
              bankAccountManager: bankAccountManager,
              balanceManager: balanceManager,
              balanceTransactionManager: balanceTransactionManager
          };
      },
      view: function view(ctrl, args) {
          var opts = _$1.extend({}, args, ctrl);
          return m$1('#balance-area', [m$1.component(userBalance, opts), m$1('.divider'), m$1.component(userBalanceTransactions, opts), m$1('.u-marginbottom-40'), m$1('.w-section.section.card-terciary.before-footer')]);
      }
  };

  var UserFollowBtn = {
      controller: function controller(args) {
          var following = m$1.prop(args.following || false),
              followVM = postgrest$1.filtersVM({ follow_id: 'eq' }),
              loading = m$1.prop(false),
              hover = m$1.prop(false),
              userFollowInsert = models.userFollow.postOptions({
              follow_id: args.follow_id }),
              userFollowDelete = function () {
              followVM.follow_id(args.follow_id);

              return models.userFollow.deleteOptions(followVM.parameters());
          }(),
              follow = function follow() {
              var l = postgrest$1.loaderWithToken(userFollowInsert);
              loading(true);

              l.load().then(function () {
                  following(true);
                  loading(false);
              });
          },
              unfollow = function unfollow() {
              var l = postgrest$1.loaderWithToken(userFollowDelete);
              loading(true);

              l.load().then(function () {
                  following(false);
                  loading(false);
              });
          };

          return {
              following: following,
              follow: follow,
              unfollow: unfollow,
              loading: loading,
              hover: hover
          };
      },
      view: function view(ctrl, args) {
          if (ctrl.loading()) {
              return h.loader();
          }
          if (ctrl.following()) {
              return m$1('a.w-button.btn.btn-medium.u-margintop-20', {
                  onclick: ctrl.unfollow,
                  onmouseover: function onmouseover() {
                      return ctrl.hover(true);
                  },
                  onmouseout: function onmouseout() {
                      return ctrl.hover(false);
                  }
              }, ctrl.hover() ? 'Deixar de seguir' : 'Seguindo');
          } else {
              return m$1('a.w-button.btn.btn-medium.btn-terciary.u-margintop-20', { onclick: ctrl.follow }, 'Seguir');
          }
      }
  };

  var UserFollowCard = {
    controller: function controller(args) {
      var friend = m$1.prop(args.friend);
      return {
        friend: friend
      };
    },
    view: function view(ctrl, args) {
      var friend = ctrl.friend(),
          profile_img = _$1.isEmpty(friend.avatar) ? '/assets/catarse_bootstrap/user.jpg' : friend.avatar;
      return m$1('.w-col.w-col-4', m$1('.card.card-backer.u-marginbottom-20.u-radius.u-text-center', [m$1('img.thumb.u-marginbottom-10.u-round[src=\'' + profile_img + '\']'), m$1('.fontsize-base.fontweight-semibold.lineheight-tight', m$1('a.link-hidden', { href: '/users/' + friend.friend_id }, friend.name)), m$1('.fontcolor-secondary.fontsize-smallest.u-marginbottom-10', _$1.isNull(friend.city) ? '' : m$1('.fontsize-smaller.fontcolor-secondary.u-marginbottom-10', friend.city + ', ' + friend.state)), m$1('.fontsize-smaller', [m$1('span.fontweight-semibold', friend.total_contributed_projects), ' apoiados ', m$1.trust('&nbsp;'), '| ', m$1.trust('&nbsp;'), m$1('span.fontweight-semibold', friend.total_published_projects), ' criados']), m$1('.btn-bottom-card.w-row', [m$1('.w-col.w-col-3.w-col-small-4.w-col-tiny-3'), m$1('.w-col.w-col-6.w-col-small-4.w-col-tiny-6', m$1.component(UserFollowBtn, { following: friend.following, follow_id: friend.friend_id })), m$1('.w-col.w-col-3.w-col-small-4.w-col-tiny-3')])]));
    }
  };

  var loadMoreBtn = {
      view: function view(ctrl, args) {
          var collection = args.collection;
          return m$1('.w-col.w-col-2', [!collection.isLoading() ? collection.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: collection.nextPage
          }, 'Carregar mais') : h.loader()]);
      }
  };

  var userFriends = {
      controller: function controller(args) {
          models.userFriend.pageSize(9);

          var userFriendVM = postgrest$1.filtersVM({ user_id: 'eq' }),
              user = args.user,
              friendListVM = postgrest$1.paginationVM(models.userFriend, 'following.asc,total_contributed_projects.desc', {
              'Prefer': 'count=exact'
          }),
              allLoading = m$1.prop(false),
              followAll = function followAll() {
              allLoading(true);
              var l = postgrest$1.loaderWithToken(models.followAllFriends.postOptions({}));

              l.load().then(function () {
                  friendListVM.firstPage(userFriendVM.parameters());
                  allLoading(false);
              });
          };

          userFriendVM.user_id(user.user_id);

          if (!friendListVM.collection().length) {
              friendListVM.firstPage(userFriendVM.parameters());
          }

          return {
              friendListVM: friendListVM,
              followAll: followAll,
              allLoading: allLoading
          };
      },
      view: function view(ctrl, args) {
          var listVM = ctrl.friendListVM;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row.u-marginbottom-40.card.u-radius.card-terciary', [m$1('.w-col.w-col-7.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-small', 'Comece agora! Siga todos os seus amigos ou somente alguns deles para descobrir projetos juntos!')]), m$1('.w-col.w-col-5.w-col-small-6.w-col-tiny-6', [ctrl.allLoading() ? h.loader() : m$1('a.w-button.btn.btn-medium', {
              onclick: ctrl.followAll
          }, 'Siga todos os seus ' + (listVM.total() ? listVM.total() : '') + ' amigos')])]), m$1('.w-row', [_$1.map(listVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, { friend: friend });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: listVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var userFollows = {
      controller: function controller(args) {
          models.userFollow.pageSize(9);
          var userFriendVM = postgrest$1.filtersVM({ user_id: 'eq' }),
              user = args.user,
              hash = m$1.prop(window.location.hash),
              followsListVM = postgrest$1.paginationVM(models.userFollow, 'created_at.desc', {
              'Prefer': 'count=exact'
          });

          userFriendVM.user_id(user.user_id);
          if (!followsListVM.collection().length) {
              followsListVM.firstPage(userFriendVM.parameters());
          }

          return {
              followsListVM: followsListVM
          };
      },
      view: function view(ctrl, args) {
          var followsVM = ctrl.followsListVM;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row', [_$1.map(followsVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, { friend: _$1.extend({}, { following: true, friend_id: friend.follow_id }, friend.source) });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: followsVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var userFollowers = {
      controller: function controller(args) {
          models.userFollower.pageSize(9);
          var followersListVM = postgrest$1.paginationVM(models.userFollower, 'following.asc,created_at.desc', {
              'Prefer': 'count=exact'
          }),
              user = args.user,
              userIdVM = postgrest$1.filtersVM({ follow_id: 'eq' });

          userIdVM.follow_id(user.user_id);

          if (!followersListVM.collection().length) {
              followersListVM.firstPage(userIdVM.parameters());
          }
          return {
              followersListVM: followersListVM
          };
      },
      view: function view(ctrl, args) {
          var followersVM = ctrl.followersListVM;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row', [_$1.map(followersVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, { friend: _$1.extend({}, { friend_id: friend.user_id }, friend.source) });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: followersVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var userCreators = {
      controller: function controller(args) {
          models.creatorSuggestion.pageSize(9);

          var creatorsListVM = postgrest$1.paginationVM(models.creatorSuggestion, 'following.asc, total_published_projects.desc, total_contributed_projects.desc', {
              'Prefer': 'count=exact'
          });

          if (!creatorsListVM.collection().length) {
              creatorsListVM.firstPage();
          }

          return {
              creatorsListVM: creatorsListVM
          };
      },
      view: function view(ctrl, args) {
          var creatorsVM = ctrl.creatorsListVM;

          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row', [_$1.map(creatorsVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, {
                  friend: _$1.extend({}, {
                      friend_id: friend.user_id
                  }, friend)
              });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: creatorsVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var FollowFoundFriends = {
      controller: function controller(args) {
          var user = h.getUser(),
              hash = m$1.prop(window.location.hash),
              displayTabContent = function displayTabContent() {
              var c_opts = {
                  user: user
              },
                  tabs = {
                  '#creators': m$1.component(userCreators, c_opts),
                  '#friends': m$1.component(userFriends, c_opts),
                  '#follows': m$1.component(userFollows, c_opts),
                  '#followers': m$1.component(userFollowers, c_opts)
              };

              hash(window.location.hash);

              if (_$1.isEmpty(hash()) || hash() === '#_=_') {
                  return tabs['#friends'];
              }

              return tabs[hash()];
          };

          h.redrawHashChange();

          return {
              user: user,
              displayTabContent: displayTabContent
          };
      },
      view: function view(ctrl, args) {
          return [m$1('.w-section.dashboard-header', [m$1('.w-container', [m$1('.w-row.u-margintop-20.u-marginbottom-20', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10.u-text-center', [m$1('.fontsize-larger.fontweight-semibold.u-marginbottom-10', 'Descubra projetos com seus amigos'), m$1('.fontsize-small', 'Siga os seus amigos e nós iremos te notificar sempre que eles lançarem ou apoiarem algum projeto')]), m$1('.w-col.w-col-1')])])]), [m$1('.divider.u-margintop-30'), m$1('.project-nav', m$1('.u-text-center.w-container', [m$1('a[id="creators-link"][class="dashboard-nav-link ' + (h.hashMatch('#creators') ? 'selected' : '') + '"] [href="#creators"]', 'Encontre realizadores'), m$1('a[id="friends-link"][class="dashboard-nav-link ' + (h.hashMatch('#friends') || h.hashMatch('') ? 'selected' : '') + '"] [href="#friends"]', 'Encontre amigos'), m$1('a[id="follows-link"][class="dashboard-nav-link ' + (h.hashMatch('#follows') ? 'selected' : '') + '"] [href="#follows"]', ['Seguindo', m$1.trust('&nbsp;'), m$1('span.w-hidden-small.w-hidden-tiny.badge', ctrl.user.follows_count)]), m$1('a[id="followers-link"][class="dashboard-nav-link ' + (h.hashMatch('#followers') ? 'selected' : '') + '"] [href="#followers"]', ['Seguidores', m$1.trust('&nbsp;'), m$1('span.w-hidden-small.w-hidden-tiny.badge', ctrl.user.followers_count)])]))], ctrl.displayTabContent()];
      }
  };

  var I18nScope$25 = _$1.partial(h.i18nScope, 'projects.contributions');

  var thankYou = {
      controller: function controller(args) {
          var recommendedProjects = userVM.getUserRecommendedProjects(),
              isSlip = !_$1.isEmpty(args.contribution.slip_url);

          var setEvents = function setEvents(el, isInitialized) {
              if (!isInitialized) {
                  CatarseAnalytics.event({
                      cat: 'contribution_finish',
                      act: 'contribution_finished',
                      lbl: isSlip ? 'slip' : 'creditcard',
                      val: args.contribution.value,
                      extraData: {
                          contribution_id: args.contribution.contribution_id
                      }
                  });

                  CatarseAnalytics.checkout('' + args.contribution.contribution_id, '[' + args.contribution.project.permalink + '] ' + args.contribution.reward.minimum_value + ' [' + (isSlip ? 'slip' : 'creditcard') + ']', '' + args.contribution.reward.reward_id, '' + args.contribution.project.category, '' + args.contribution.value, '' + args.contribution.value * args.contribution.project.service_fee);
              }
          };

          return {
              setEvents: setEvents,
              displayShareBox: h.toggleProp(false, true),
              isSlip: isSlip,
              recommendedProjects: recommendedProjects
          };
      },
      view: function view(ctrl, args) {
          return m$1('#thank-you', { config: ctrl.setEvents }, [m$1(".page-header.u-marginbottom-30", m$1(".w-container", m$1(".w-row", m$1(".w-col.w-col-10.w-col-push-1", [m$1(".u-marginbottom-20.u-text-center", m$1('img.big.thumb.u-round[src=\'' + args.contribution.project.user_thumb + '\']')), m$1("#thank-you.u-text-center", !ctrl.isSlip ? [m$1("#creditcard-thank-you.fontsize-larger.text-success.u-marginbottom-20", I18n$1.t('thank_you.thank_you', I18nScope$25())), m$1(".fontsize-base.u-marginbottom-40", m$1.trust(I18n$1.t('thank_you.thank_you_text_html', I18nScope$25({
              total: args.contribution.project.total_contributions,
              email: args.contribution.contribution_email,
              link2: '/pt/users/' + h.getUser().user_id + '/edit#contributions'
          })))), m$1(".fontsize-base.fontweight-semibold.u-marginbottom-20", "Compartilhe com seus amigos e ajude esse projeto a bater a meta!")] : [m$1('#slip-thank-you.fontsize-largest.text-success.u-marginbottom-20', I18n$1.t('thank_you_slip.thank_you', I18nScope$25())), m$1('.fontsize-base.u-marginbottom-40', I18n$1.t('thank_you_slip.thank_you_text_html', I18nScope$25({ email: args.contribution.contribution_email })))]), ctrl.isSlip ? '' : m$1(".w-row", [m$1(".w-hidden-small.w-hidden-tiny", [m$1('.w-sub-col.w-col.w-col-4', m$1.component(facebookButton, {
              url: 'https://www.catarse.me/' + args.contribution.project.permalink + '?ref=ctrse_thankyou&utm_source=facebook.com&utm_medium=social&utm_campaign=project_share',
              big: true
          })), m$1('.w-sub-col.w-col.w-col-4', m$1.component(facebookButton, {
              messenger: true,
              big: true,
              url: 'https://www.catarse.me/' + args.contribution.project.permalink + '?ref=ctrse_thankyou&utm_source=facebook.com&utm_medium=messenger&utm_campaign=thanks_share'
          })), m$1('.w-col.w-col-4', m$1('a.btn.btn-large.btn-tweet.u-marginbottom-20[href="http://twitter.com/?status=Acabei%20de%20apoiar%20o%20projeto%20' + args.contribution.project.name + '%20https://www.catarse.me/' + args.contribution.project.permalink + '%3Fref%3Dtwitter%26utm_source%3Dtwitter.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share"][target="_blank"]', [m$1('span.fa.fa-twitter'), ' Twitter']))]), m$1(".w-hidden-main.w-hidden-medium", [m$1('.u-marginbottom-30.u-text-center-small-only', m$1('button.btn.btn-large.btn-terciary.u-marginbottom-40', {
              onclick: ctrl.displayShareBox.toggle
          }, 'Compartilhe')), ctrl.displayShareBox() ? m$1(projectShareBox, {
              // Mocking a project m.prop
              project: m$1.prop({
                  permalink: args.contribution.project.permalink,
                  name: args.contribution.project.name
              }),
              displayShareBox: ctrl.displayShareBox
          }) : ''])])])))), m$1(".section.u-marginbottom-40", m$1(".w-container", ctrl.isSlip ? m$1('.w-row', m$1('.w-col.w-col-8.w-col-offset-2', m$1('iframe.slip', {
              src: args.contribution.slip_url,
              width: '100%',
              height: '905px',
              frameborder: '0',
              style: 'overflow: hidden;'
          }))) : [m$1('.fontsize-large.fontweight-semibold.u-marginbottom-30.u-text-center', I18n$1.t('thank_you.project_recommendations', I18nScope$25())), m$1.component(projectRow, {
              collection: ctrl.recommendedProjects,
              ref: 'ctrse_thankyou_r'
          })]))]);
      }
  };

  var c = {
      root: {
          AdminUsers: adminUsers,
          AdminContributions: adminContributions,
          Flex: Flex,
          Insights: insights,
          Jobs: jobs,
          LiveStatistics: liveStatistics,
          ProjectsContributionReport: projectContributionReport,
          ProjectsDashboard: projectsDashboard,
          ProjectsExplore: projectsExplore,
          ProjectsHome: projectsHome,
          ProjectsShow: projectsShow,
          UsersShow: usersShow,
          ProjectsPayment: projectsPayment,
          ProjectsReward: projectsReward,
          ThankYou: thankYou,
          Publish: publish,
          Start: start,
          Team: team,
          UsersBalance: userBalanceMain,
          Menu: menu,
          Footer: footer,
          FollowFoundFriends: FollowFoundFriends
      }
  };

  return c;

}(m,I18n,postgrest,replaceDiacritics,_,moment,Chart));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjLyoqLyouanMiLCJzb3VyY2VzIjpbInNyYy9oLmpzIiwic3JjL21vZGVscy5qcyIsInNyYy92bXMvdXNlci1saXN0LXZtLmpzIiwic3JjL3Ztcy91c2VyLWZpbHRlci12bS5qcyIsInNyYy9jL2ZpbHRlci1tYWluLmpzIiwic3JjL2MvYWRtaW4tZmlsdGVyLmpzIiwic3JjL2MvYWRtaW4taXRlbS5qcyIsInNyYy9jL2FkbWluLWxpc3QuanMiLCJzcmMvYy9hZG1pbi11c2VyLmpzIiwic3JjL2MvYWRtaW4tdXNlci1pdGVtLmpzIiwic3JjL2MvYWRtaW4tcmVzZXQtcGFzc3dvcmQuanMiLCJzcmMvYy9hZG1pbi1pbnB1dC1hY3Rpb24uanMiLCJzcmMvYy9hZG1pbi1ub3RpZmljYXRpb24taGlzdG9yeS5qcyIsInNyYy9jL2FkbWluLXVzZXItZGV0YWlsLmpzIiwic3JjL2MvZHJvcGRvd24uanMiLCJzcmMvYy9maWx0ZXItZHJvcGRvd24uanMiLCJzcmMvcm9vdC9hZG1pbi11c2Vycy5qcyIsInNyYy92bXMvY29udHJpYnV0aW9uLWxpc3Qtdm0uanMiLCJzcmMvdm1zL2NvbnRyaWJ1dGlvbi1maWx0ZXItdm0uanMiLCJzcmMvYy9hZG1pbi1wcm9qZWN0LmpzIiwic3JjL2MvYWRtaW4tY29udHJpYnV0aW9uLmpzIiwic3JjL2MvYWRtaW4tY29udHJpYnV0aW9uLXVzZXIuanMiLCJzcmMvYy9wYXltZW50LXN0YXR1cy5qcyIsInNyYy9jL2FkbWluLWNvbnRyaWJ1dGlvbi1pdGVtLmpzIiwic3JjL2MvYWRtaW4tcmFkaW8tYWN0aW9uLmpzIiwic3JjL2MvYWRtaW4tZXh0ZXJuYWwtYWN0aW9uLmpzIiwic3JjL2MvYWRtaW4tdHJhbnNhY3Rpb24uanMiLCJzcmMvYy9hZG1pbi10cmFuc2FjdGlvbi1oaXN0b3J5LmpzIiwic3JjL2MvYWRtaW4tcmV3YXJkLmpzIiwic3JjL2MvYWRtaW4tY29udHJpYnV0aW9uLWRldGFpbC5qcyIsInNyYy9jL2ZpbHRlci1udW1iZXItcmFuZ2UuanMiLCJzcmMvYy9maWx0ZXItZGF0ZS1yYW5nZS5qcyIsInNyYy9yb290L2FkbWluLWNvbnRyaWJ1dGlvbnMuanMiLCJzcmMvYy9sYW5kaW5nLXNpZ251cC5qcyIsInNyYy92bXMvcmV3YXJkLXZtLmpzIiwic3JjL3Ztcy9wcm9qZWN0LWZpbHRlcnMtdm0uanMiLCJzcmMvdm1zL3VzZXItdm0uanMiLCJzcmMvdm1zL3Byb2plY3Qtdm0uanMiLCJzcmMvYy9wcm9qZWN0LWZyaWVuZHMuanMiLCJzcmMvYy9wcm9qZWN0LWNhcmQuanMiLCJzcmMvYy9wcm9qZWN0LXJvdy5qcyIsInNyYy9jL2xhbmRpbmctcWEuanMiLCJzcmMvcm9vdC9mbGV4LmpzIiwic3JjL2MvdG9vbHRpcC5qcyIsInNyYy9jL3Byb2plY3QtZGFzaGJvYXJkLW1lbnUuanMiLCJzcmMvYy9tb2RhbC1ib3guanMiLCJzcmMvYy9hZG1pbi1wcm9qZWN0LWRldGFpbHMtY2FyZC5qcyIsInNyYy9jL29ubGluZS1zdWNjZXNzLW1vZGFsLWNvbnRlbnQuanMiLCJzcmMvYy9wcm9qZWN0LWRhdGEtc3RhdHMuanMiLCJzcmMvYy9kZWxldGUtcHJvamVjdC1tb2RhbC1jb250ZW50LmpzIiwic3JjL2MvcHJvamVjdC1kZWxldGUtYnV0dG9uLmpzIiwic3JjL2MvY2FuY2VsLXByb2plY3QtbW9kYWwtY29udGVudC5qcyIsInNyYy9jL3Byb2plY3QtY2FuY2VsLWJ1dHRvbi5qcyIsInNyYy9jL3Byb2plY3QtZGF0YS1jaGFydC5qcyIsInNyYy9jL3Byb2plY3QtZGF0YS10YWJsZS5qcyIsInNyYy9jL3Byb2plY3QtcmVtaW5kZXItY291bnQuanMiLCJzcmMvYy9kYXNoYm9hcmQtaW5mby5qcyIsInNyYy9jL3Byb2plY3Qtc3VjY2Vzc2Z1bC1vbmJvYXJkLWNvbmZpcm0tYWNjb3VudC1lcnJvci5qcyIsInNyYy9jL3Byb2plY3Qtc3VjY2Vzc2Z1bC1vbmJvYXJkLWNvbmZpcm0tYWNjb3VudC1hY2NlcHQuanMiLCJzcmMvYy9wcm9qZWN0LXN1Y2Nlc3NmdWwtb25ib2FyZC1jb25maXJtLWFjY291bnQuanMiLCJzcmMvYy9zdWNjZXNzZnVsLXByb2plY3QtdGF4LW1vZGFsLmpzIiwic3JjL3Ztcy9pbnNpZ2h0LXZtLmpzIiwic3JjL2MvcHJvamVjdC1zdWNjZXNzZnVsLW9uYm9hcmQuanMiLCJzcmMvYy9mYWNlYm9vay1idXR0b24uanMiLCJzcmMvYy9wb3Atbm90aWZpY2F0aW9uLmpzIiwic3JjL2MvY29weS10ZXh0LWlucHV0LmpzIiwic3JjL2MvaW52aXRlLWVtYWlscy1mcm9tLWltcG9ydC5qcyIsInNyYy9jL3Byb2plY3QtZ29vZ2xlLWNvbnRhY3QtaW1wb3J0LmpzIiwic3JjL2MvcHJvamVjdC1lbWFpbC1pbnZpdGUuanMiLCJzcmMvYy9wcm9qZWN0LWludml0ZS1jYXJkLmpzIiwic3JjL3Jvb3QvaW5zaWdodHMuanMiLCJzcmMvcm9vdC9qb2JzLmpzIiwic3JjL3Jvb3QvbGl2ZS1zdGF0aXN0aWNzLmpzIiwic3JjL2MvcHJvamVjdC1jb250cmlidXRpb24tcmVwb3J0LWhlYWRlci5qcyIsInNyYy9jL3Byb2plY3QtY29udHJpYnV0aW9uLXJlcG9ydC1jb250ZW50LWNhcmQuanMiLCJzcmMvYy9wcm9qZWN0LWNvbnRyaWJ1dGlvbi1yZXBvcnQtY29udGVudC5qcyIsInNyYy92bXMvcHJvamVjdHMtY29udHJpYnV0aW9uLXJlcG9ydC12bS5qcyIsInNyYy9jL3Byb2plY3QtY29udHJpYnV0aW9uLXN0YXRlLWxlZ2VuZC1tb2RhbC5qcyIsInNyYy9jL2luZm8tcHJvamVjdC1jb250cmlidXRpb24tc3RhdGUtbGVnZW5kLmpzIiwic3JjL3Jvb3QvcHJvamVjdHMtY29udHJpYnV0aW9uLXJlcG9ydC5qcyIsInNyYy9yb290L3Byb2plY3RzLWRhc2hib2FyZC5qcyIsInNyYy9jL3NlYXJjaC5qcyIsInNyYy9jL2NhdGVnb3J5LWJ1dHRvbi5qcyIsInNyYy9jL3NpZ25lZC1mcmllbmQtZmFjZWJvb2stY29ubmVjdC5qcyIsInNyYy9jL3Vuc2lnbmVkLWZyaWVuZC1mYWNlYm9vay1jb25uZWN0LmpzIiwic3JjL3Jvb3QvcHJvamVjdHMtZXhwbG9yZS5qcyIsInNyYy9jL21lbnUtc2VhcmNoLmpzIiwic3JjL2MvcXVpY2stcHJvamVjdC1saXN0LmpzIiwic3JjL2MvbWVudS1wcm9maWxlLmpzIiwic3JjL3Jvb3QvbWVudS5qcyIsInNyYy92bXMvaG9tZS12bS5qcyIsInNyYy9jL3NsaWRlci5qcyIsInNyYy9jL2NvbnRyaWJ1dGlvbi1hY3Rpdml0aWVzLmpzIiwic3JjL3Jvb3QvYmxvZy1iYW5uZXIuanMiLCJzcmMvcm9vdC9mb290ZXIuanMiLCJzcmMvcm9vdC9wcm9qZWN0cy1ob21lLmpzIiwic3JjL2MvcHJvamVjdC1zaGFyZS1ib3guanMiLCJzcmMvYy9hZGRyZXNzLXRhZy5qcyIsInNyYy9jL2NhdGVnb3J5LXRhZy5qcyIsInNyYy9jL3Byb2plY3QtaGlnaGxpZ2h0LmpzIiwic3JjL2MvcHJvamVjdC1tb2RlLmpzIiwic3JjL2MvcHJvamVjdC1yZW1pbmRlci5qcyIsInNyYy9jL293bmVyLW1lc3NhZ2UtY29udGVudC5qcyIsInNyYy9jL3Byb2plY3QtdXNlci1jYXJkLmpzIiwic3JjL2MvcHJvamVjdC1zaWRlYmFyLmpzIiwic3JjL2MvdXNlci1jb250cmlidXRpb24tZGV0YWlsLmpzIiwic3JjL3Ztcy9jb250cmlidXRpb24tdm0uanMiLCJzcmMvYy9wcm9qZWN0LWhlYWRlci5qcyIsInNyYy9jL3Byb2plY3QtdGFicy5qcyIsInNyYy9jL3Byb2plY3QtcmV3YXJkLWxpc3QuanMiLCJzcmMvYy9wcm9qZWN0LXN1Z2dlc3RlZC1jb250cmlidXRpb25zLmpzIiwic3JjL2MvcHJvamVjdC1jb250cmlidXRpb25zLmpzIiwic3JjL2MvcHJvamVjdC1yZXBvcnQuanMiLCJzcmMvYy9wcm9qZWN0LWFib3V0LmpzIiwic3JjL2MvcHJvamVjdC1jb21tZW50cy5qcyIsInNyYy9jL3Byb2plY3QtcG9zdHMuanMiLCJzcmMvYy9wcm9qZWN0LW1haW4uanMiLCJzcmMvcm9vdC9wcm9qZWN0cy1zaG93LmpzIiwic3JjL2MvdXNlci1oZWFkZXIuanMiLCJzcmMvYy9pbmxpbmUtZXJyb3IuanMiLCJzcmMvYy91c2VyLWNyZWF0ZWQuanMiLCJzcmMvYy91c2VyLWNvbnRyaWJ1dGVkLmpzIiwic3JjL2MvdXNlci1jYXJkLmpzIiwic3JjL2MvdXNlci1hYm91dC5qcyIsInNyYy9yb290L3VzZXJzLXNob3cuanMiLCJzcmMvdm1zL3BheW1lbnQtdm0uanMiLCJzcmMvYy9mYXEtYm94LmpzIiwic3JjL2MvcGF5bWVudC1zbGlwLmpzIiwic3JjL3Ztcy9jcmVkaXQtY2FyZC12bS5qcyIsInNyYy9jL2NyZWRpdC1jYXJkLWlucHV0LmpzIiwic3JjL2MvcGF5bWVudC1jcmVkaXQtY2FyZC5qcyIsInNyYy9jL3BheW1lbnQtZm9ybS5qcyIsInNyYy9yb290L3Byb2plY3RzLXBheW1lbnQuanMiLCJzcmMvcm9vdC9wcm9qZWN0cy1yZXdhcmQuanMiLCJzcmMvcm9vdC9wdWJsaXNoLmpzIiwic3JjL3Ztcy9zdGFydC12bS5qcyIsInNyYy9jL3lvdXR1YmUtbGlnaHRib3guanMiLCJzcmMvcm9vdC9zdGFydC5qcyIsInNyYy9jL3RlYW0tdG90YWwuanMiLCJzcmMvYy90ZWFtLW1lbWJlcnMuanMiLCJzcmMvcm9vdC90ZWFtLmpzIiwic3JjL2MvdXNlci1iYWxhbmNlLXJlcXVlc3QtbW9kYWwtY29udGVudC5qcyIsInNyYy9jL3VzZXItYmFsYW5jZS5qcyIsInNyYy9jL3VzZXItYmFsYW5jZS10cmFuc2FjdGlvbi1yb3cuanMiLCJzcmMvYy91c2VyLWJhbGFuY2UtdHJhbnNhY3Rpb25zLmpzIiwic3JjL3Jvb3QvdXNlcnMtYmFsYW5jZS1tYWluLmpzIiwic3JjL2MvdXNlci1mb2xsb3ctYnRuLmpzIiwic3JjL2MvdXNlci1mb2xsb3ctY2FyZC5qcyIsInNyYy9jL2xvYWQtbW9yZS1idG4uanMiLCJzcmMvYy91c2VyLWZyaWVuZHMuanMiLCJzcmMvYy91c2VyLWZvbGxvd3MuanMiLCJzcmMvYy91c2VyLWZvbGxvd2Vycy5qcyIsInNyYy9jL3VzZXItY3JlYXRvcnMuanMiLCJzcmMvcm9vdC9mb2xsb3ctZm91bmQtZnJpZW5kcy5qcyIsInNyYy9yb290L3RoYW5rLXlvdS5qcyIsInNyYy9jLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuXG5jb25zdFxuICAgIF9kYXRhQ2FjaGUgPSB7fSxcbiAgICBoYXNoTWF0Y2ggPSAoc3RyKSA9PiB7IHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9PT0gc3RyOyB9LFxuICAgIHBhcmFtQnlOYW1lID0gKG5hbWUpID0+IHtcbiAgICAgICAgY29uc3Qgbm9ybWFsTmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXScpLFxuICAgICAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKCdbXFxcXD8mXScgKyBub3JtYWxOYW1lICsgJz0oW14mI10qKScpLFxuICAgICAgICAgICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWMobG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHMgPT09IG51bGwgPyAnJyA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgICB9LFxuICBcdHNlbGZPckVtcHR5ID0gKG9iaiwgZW1wdHlTdGF0ZSA9ICcnKSA9PiB7XG4gICAgICByZXR1cm4gb2JqID8gb2JqIDogZW1wdHlTdGF0ZTtcbiAgXHR9LFxuICAgIHNldE1vbWVudGlmeUxvY2FsZSA9ICgpID0+IHtcbiAgICAgICAgbW9tZW50LmxvY2FsZSgncHQnLCB7XG4gICAgICAgICAgICAgICAgbW9udGhzIDogJ0phbmVpcm9fRmV2ZXJlaXJvX01hcsOnb19BYnJpbF9NYWlvX0p1bmhvX0p1bGhvX0Fnb3N0b19TZXRlbWJyb19PdXR1YnJvX05vdmVtYnJvX0RlemVtYnJvJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2Zldl9tYXJfYWJyX21haV9qdW5fanVsX2Fnb19zZXRfb3V0X25vdl9kZXonLnNwbGl0KCdfJylcbiAgICAgICAgICAgIH0pO1xuICAgIH0sXG4gICAgZXhpc3R5ID0gKHgpID0+IHtcbiAgICAgICAgcmV0dXJuIHggIT0gbnVsbDtcbiAgICB9LFxuXG4gICAgbW9tZW50aWZ5ID0gKGRhdGUsIGZvcm1hdCkgPT4ge1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJ0REL01NL1lZWVknO1xuICAgICAgICByZXR1cm4gZGF0ZSA/IG1vbWVudChkYXRlKS5sb2NhbGUoJ3B0JykuZm9ybWF0KGZvcm1hdCkgOiAnbm8gZGF0ZSc7XG4gICAgfSxcblxuICAgIHN0b3JlQWN0aW9uID0gKGFjdGlvbiwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKCFzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGFjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGFjdGlvbiwgU3RyaW5nKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcmVPYmplY3QgPSAoc2Vzc2lvbktleSwgb2JqKSA9PiB7XG4gICAgICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHNlc3Npb25LZXksIEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICAgIH0sXG5cbiAgICBnZXRTdG9yZWRPYmplY3QgPSAoc2Vzc2lvbktleSkgPT4ge1xuICAgICAgICBpZiAoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShzZXNzaW9uS2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShzZXNzaW9uS2V5KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNhbGxTdG9yZWRBY3Rpb24gPSAoYWN0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGFjdGlvbik7XG5cbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRpc2N1c3MgPSAocGFnZSwgaWRlbnRpZmllcikgPT4ge1xuICAgICAgICBjb25zdCBkID0gZG9jdW1lbnQsXG4gICAgICAgICAgICBzID0gZC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgd2luZG93LmRpc3F1c19jb25maWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZS51cmwgPSBwYWdlO1xuICAgICAgICAgICAgdGhpcy5wYWdlLmlkZW50aWZpZXIgPSBpZGVudGlmaWVyO1xuICAgICAgICB9O1xuICAgICAgICBzLnNyYyA9ICcvL2NhdGFyc2VmbGV4LmRpc3F1cy5jb20vZW1iZWQuanMnO1xuICAgICAgICBzLnNldEF0dHJpYnV0ZSgnZGF0YS10aW1lc3RhbXAnLCArbmV3IERhdGUoKSk7XG4gICAgICAgIChkLmhlYWQgfHwgZC5ib2R5KS5hcHBlbmRDaGlsZChzKTtcbiAgICAgICAgcmV0dXJuIG0oJycpO1xuICAgIH0sXG5cbiAgICB2YWxpZGF0ZUVtYWlsID0gKGVtYWlsKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlID0gL14oKFtePD4oKVtcXF1cXC4sOzpcXHNAXFxcIl0rKFxcLltePD4oKVtcXF1cXC4sOzpcXHNAXFxcIl0rKSopfChcXFwiLitcXFwiKSlAKChbXjw+KClbXFxdXFwuLDs6XFxzQFxcXCJdK1xcLikrW148PigpW1xcXVxcLiw7Olxcc0BcXFwiXXsyLH0pJC9pO1xuICAgICAgICByZXR1cm4gcmUudGVzdChlbWFpbCk7XG4gICAgfSxcblxuICAgIHZhbGlkYXRlQ3BmID0gKHN0ckNQRikgPT4ge1xuICAgICAgICBsZXQgc3VtID0gMCwgcmVtYWluZGVyO1xuXG4gICAgICAgIGlmIChzdHJDUEYgPT0gJzAwMDAwMDAwMDAwJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDk7IGkrKykge1xuICAgICAgICAgICAgc3VtID0gc3VtICsgcGFyc2VJbnQoc3RyQ1BGLnN1YnN0cmluZyhpIC0gMSwgaSkpICogKDExIC0gaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVtYWluZGVyID0gKHN1bSAqIDEwKSAlIDExO1xuXG4gICAgICAgIGlmICgocmVtYWluZGVyID09IDEwKSB8fCAocmVtYWluZGVyID09IDExKSl7XG4gICAgICAgICAgICByZW1haW5kZXIgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbWFpbmRlciAhPSBwYXJzZUludChzdHJDUEYuc3Vic3RyaW5nKDksIDEwKSkpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VtID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAxMDsgaSsrKXtcbiAgICAgICAgICAgIHN1bSA9IHN1bSArIHBhcnNlSW50KHN0ckNQRi5zdWJzdHJpbmcoaSAtIDEsIGkpKSAqICgxMiAtIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVtYWluZGVyID0gKHN1bSAqIDEwKSAlIDExO1xuXG4gICAgICAgIGlmICgocmVtYWluZGVyID09IDEwKSB8fCAocmVtYWluZGVyID09IDExKSl7XG4gICAgICAgICAgICByZW1haW5kZXIgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbWFpbmRlciAhPSBwYXJzZUludChzdHJDUEYuc3Vic3RyaW5nKDEwLCAxMSkpKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICB2YWxpZGF0aW9uRXJyb3JzID0gbS5wcm9wKFtdKSxcblxuICAgIHJlc2V0VmFsaWRhdGlvbnMgPSAoKSA9PiB2YWxpZGF0aW9uRXJyb3JzKFtdKSxcblxuICAgIHZhbGlkYXRlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvckZpZWxkcyA9IG0ucHJvcChbXSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Ym1pdChmaWVsZHMsIGZuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRWYWxpZGF0aW9ucygpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKGZpZWxkcywgZmllbGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLnJ1bGUgPT09ICdlbWFpbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkYXRlRW1haWwoZmllbGQucHJvcCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JzKCkucHVzaCh7ZmllbGQ6IGZpZWxkLnByb3AsIG1lc3NhZ2U6ICdFLW1haWwgaW52w6FsaWRvLid9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5ydWxlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQucHJvcCgpLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9ycygpLnB1c2goe2ZpZWxkOiBmaWVsZC5wcm9wLCBtZXNzYWdlOiAnTyBjYW1wbyBuw6NvIHBvZGUgc2VyIHZhemlvLid9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhdmFsaWRhdGlvbkVycm9ycygpLmxlbmd0aCA+IDAgPyBmbigpIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNFcnJvcihmaWVsZFByb3ApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5yZWR1Y2UodmFsaWRhdGlvbkVycm9ycygpLCAobWVtbywgZmllbGRFcnJvcikgPT4gZmllbGRFcnJvci5maWVsZCgpID09PSBmaWVsZFByb3AoKSB8fCBtZW1vLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG1vbWVudEZyb21TdHJpbmcgPSAoZGF0ZSwgZm9ybWF0KSA9PiB7XG4gICAgICAgIGNvbnN0IGV1cm9wZWFuID0gbW9tZW50KGRhdGUsIGZvcm1hdCB8fCAnREQvTU0vWVlZWScpO1xuICAgICAgICByZXR1cm4gZXVyb3BlYW4uaXNWYWxpZCgpID8gZXVyb3BlYW4gOiBtb21lbnQoZGF0ZSk7XG4gICAgfSxcblxuICAgIHRyYW5zbGF0ZWRUaW1lVW5pdHMgPSB7XG4gICAgICAgIGRheXM6ICdkaWFzJyxcbiAgICAgICAgbWludXRlczogJ21pbnV0b3MnLFxuICAgICAgICBob3VyczogJ2hvcmFzJyxcbiAgICAgICAgc2Vjb25kczogJ3NlZ3VuZG9zJ1xuICAgIH0sXG4gICAgLy9PYmplY3QgbWFuaXB1bGF0aW9uIGhlbHBlcnNcbiAgICB0cmFuc2xhdGVkVGltZSA9ICh0aW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZWRUaW1lID0gdHJhbnNsYXRlZFRpbWVVbml0cyxcbiAgICAgICAgICAgIHVuaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvalVuaXQgPSB0cmFuc2xhdGVkVGltZVt0aW1lLnVuaXQgfHwgJ3NlY29uZHMnXTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAodGltZS50b3RhbCA8PSAxKSA/IHByb2pVbml0LnNsaWNlKDAsIC0xKSA6IHByb2pVbml0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdW5pdDogdW5pdCgpLFxuICAgICAgICAgICAgdG90YWw6IHRpbWUudG90YWxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgLy9OdW1iZXIgZm9ybWF0dGluZyBoZWxwZXJzXG4gICAgZ2VuZXJhdGVGb3JtYXROdW1iZXIgPSAocywgYykgPT4ge1xuICAgICAgICByZXR1cm4gKG51bWJlciwgbiwgeCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFfLmlzTnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmUgPSAnXFxcXGQoPz0oXFxcXGR7JyArICh4IHx8IDMpICsgJ30pKycgKyAobiA+IDAgPyAnXFxcXEQnIDogJyQnKSArICcpJyxcbiAgICAgICAgICAgICAgICBudW0gPSBudW1iZXIudG9GaXhlZChNYXRoLm1heCgwLCB+fm4pKTtcbiAgICAgICAgICAgIHJldHVybiAoYyA/IG51bS5yZXBsYWNlKCcuJywgYykgOiBudW0pLnJlcGxhY2UobmV3IFJlZ0V4cChyZSwgJ2cnKSwgJyQmJyArIChzIHx8ICcsJykpO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgZm9ybWF0TnVtYmVyID0gZ2VuZXJhdGVGb3JtYXROdW1iZXIoJy4nLCAnLCcpLFxuXG4gICAgdG9nZ2xlUHJvcCA9IChkZWZhdWx0U3RhdGUsIGFsdGVybmF0ZVN0YXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IHAgPSBtLnByb3AoZGVmYXVsdFN0YXRlKTtcbiAgICAgICAgcC50b2dnbGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcCgoKHAoKSA9PT0gYWx0ZXJuYXRlU3RhdGUpID8gZGVmYXVsdFN0YXRlIDogYWx0ZXJuYXRlU3RhdGUpKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcDtcbiAgICB9LFxuXG4gICAgaWRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICBpZDogJ2VxJ1xuICAgIH0pLFxuXG4gICAgZ2V0Q3VycmVudFByb2plY3QgPSAoKSA9PiB7XG4gICAgICAgIGlmIChfZGF0YUNhY2hlLmN1cnJlbnRQcm9qZWN0KVxuICAgICAgICAgIHJldHVybiBfZGF0YUNhY2hlLmN1cnJlbnRQcm9qZWN0O1xuXG4gICAgICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwbGljYXRpb24nKSxcbiAgICAgICAgICAgICAgZGF0YSA9IHJvb3QgJiYgcm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyYW1ldGVycycpO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUuY3VycmVudFByb2plY3QgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldFJkVG9rZW4gPSAoKSA9PiB7XG4gICAgICAgIGlmIChfZGF0YUNhY2hlLnJkVG9rZW4pXG4gICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUucmRUb2tlbjtcblxuICAgICAgICBjb25zdCBtZXRhID0gXy5maXJzdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbbmFtZT1yZC10b2tlbl0nKSk7XG4gICAgICAgIHJldHVybiBtZXRhID8gKF9kYXRhQ2FjaGUucmRUb2tlbiA9IG1ldGEuY29udGVudCkgOiB1bmRlZmluZWQ7XG4gICAgfSxcblxuICAgIGdldE1haWxjaGltcFVybCA9ICgpID0+IHtcbiAgICAgICAgaWYgKF9kYXRhQ2FjaGUubWFpbGNodW1VcmwpXG4gICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUubWFpbGNodW1Vcmw7XG5cbiAgICAgICAgY29uc3QgbWV0YSA9IF8uZmlyc3QoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW25hbWU9bWFpbGNoaW1wLXVybF0nKSk7XG4gICAgICAgIHJldHVybiBtZXRhID8gKF9kYXRhQ2FjaGUubWFpbGNodW1VcmwgPSBtZXRhLmNvbnRlbnQpIDogdW5kZWZpbmVkO1xuICAgIH0sXG5cbiAgICBnZXRVc2VyID0gKCkgPT4ge1xuICAgICAgICBpZiAoX2RhdGFDYWNoZS51c2VyKVxuICAgICAgICAgIHJldHVybiBfZGF0YUNhY2hlLnVzZXI7XG5cbiAgICAgICAgY29uc3QgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JyksXG4gICAgICAgICAgICBkYXRhID0gXy5maXJzdChib2R5KS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXNlcicpO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUudXNlciA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0QmxvZ1Bvc3RzID0gKCkgPT4ge1xuICAgICAgICBpZiAoX2RhdGFDYWNoZS5ibG9nUG9zdHMpXG4gICAgICAgICAgICByZXR1cm4gX2RhdGFDYWNoZS5ibG9nUG9zdHM7XG5cbiAgICAgICAgdmFyIHBvc3RzID0gXy5maXJzdChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtYmxvZycpO1xuXG4gICAgICAgIGlmIChwb3N0cykge1xuICAgICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUuYmxvZ1Bvc3RzID0gSlNPTi5wYXJzZShwb3N0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0QXBpSG9zdCA9ICgpID0+IHtcbiAgICAgICAgaWYgKF9kYXRhQ2FjaGUuYXBpSG9zdClcbiAgICAgICAgICByZXR1cm4gX2RhdGFDYWNoZS5hcGlIb3N0O1xuXG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcGktaG9zdCcpO1xuICAgICAgICByZXR1cm4gX2RhdGFDYWNoZS5hcGlIb3N0ID0gZWwgJiYgZWwuZ2V0QXR0cmlidXRlKCdjb250ZW50Jyk7XG4gICAgfSxcblxuICAgIGxvY2F0aW9uQWN0aW9uTWF0Y2ggPSAoYWN0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpLnNsaWNlKC0xKVswXTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbiA9PT0gYWN0O1xuICAgIH0sXG5cbiAgICB1c2VBdmF0YXJPckRlZmF1bHQgPSAoYXZhdGFyUGF0aCkgPT4ge1xuICAgICAgICByZXR1cm4gYXZhdGFyUGF0aCB8fCAnL2Fzc2V0cy9jYXRhcnNlX2Jvb3RzdHJhcC91c2VyLmpwZyc7XG4gICAgfSxcblxuICAgIC8vVGVtcGxhdGVzXG4gICAgbG9hZGVyID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbSgnLnUtdGV4dC1jZW50ZXIudS1tYXJnaW50b3AtMzAgdS1tYXJnaW5ib3R0b20tMzAnLCBbXG4gICAgICAgICAgICBtKCdpbWdbYWx0PVwiTG9hZGVyXCJdW3NyYz1cImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9jYXRhcnNlLmZpbGVzL2xvYWRlci5naWZcIl0nKVxuICAgICAgICBdKTtcbiAgICB9LFxuXG4gICAgbmV3RmVhdHVyZUJhZGdlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbSgnc3Bhbi5iYWRnZS5iYWRnZS1zdWNjZXNzLm1hcmdpbi1zaWRlLTUnLCBJMThuLnQoJ3Byb2plY3RzLm5ld19mZWF0dXJlX2JhZGdlJykpO1xuICAgIH0sXG5cbiAgICBmYlBhcnNlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0cnlQYXJzZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgd2luZG93LkZCLlhGQk1MLnBhcnNlKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KHRyeVBhcnNlLCA1MDApOyAvL3VzZSB0aW1lb3V0IHRvIHdhaXQgYXN5bmMgb2YgZmFjZWJvb2tcbiAgICB9LFxuXG4gICAgcGx1cmFsaXplID0gKGNvdW50LCBzLCBwKSA9PiB7XG4gICAgICAgIHJldHVybiAoY291bnQgPiAxID8gY291bnQgKyBwIDogY291bnQgKyBzKTtcbiAgICB9LFxuXG4gICAgc3RyaXAgPSAoaHRtbCkgPT4gIHtcbiAgICAgICAgdmFyIHRtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0bXAuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgcmV0dXJuIHRtcC50ZXh0Q29udGVudCB8fCB0bXAuaW5uZXJUZXh0IHx8ICcnO1xuICAgIH0sXG5cbiAgICBzaW1wbGVGb3JtYXQgPSAoc3RyID0gJycpID0+IHtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcclxcbj8vLCAnXFxuJyk7XG4gICAgICAgIGlmIChzdHIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcblxcbisvZywgJzwvcD48cD4nKTtcbiAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXG4vZywgJzxiciAvPicpO1xuICAgICAgICAgICAgc3RyID0gJzxwPicgKyBzdHIgKyAnPC9wPic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9LFxuXG4gICAgcmV3YXJkU291bGRPdXQgPSAocmV3YXJkKSA9PiB7XG4gICAgICAgIHJldHVybiAocmV3YXJkLm1heGltdW1fY29udHJpYnV0aW9ucyA+IDAgP1xuICAgICAgICAgICAgKHJld2FyZC5wYWlkX2NvdW50ICsgcmV3YXJkLndhaXRpbmdfcGF5bWVudF9jb3VudCA+PSByZXdhcmQubWF4aW11bV9jb250cmlidXRpb25zKSA6IGZhbHNlKTtcbiAgICB9LFxuXG4gICAgcmV3YXJkUmVtYW5pbmcgPSAocmV3YXJkKSA9PiB7XG4gICAgICAgIHJldHVybiByZXdhcmQubWF4aW11bV9jb250cmlidXRpb25zIC0gKHJld2FyZC5wYWlkX2NvdW50ICsgcmV3YXJkLndhaXRpbmdfcGF5bWVudF9jb3VudCk7XG4gICAgfSxcblxuICAgIHBhcnNlVXJsID0gKGhyZWYpID0+IHtcbiAgICAgICAgY29uc3QgbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgbC5ocmVmID0gaHJlZjtcbiAgICAgICAgcmV0dXJuIGw7XG4gICAgfSxcblxuICAgIFVJSGVscGVyID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQgJiYgd2luZG93LiQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuVUlIZWxwZXIuc2V0dXBSZXNwb25zaXZlSWZyYW1lcygkKGVsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHRvQW5jaG9yID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpe1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc2ggPT09IGVsLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gZWwuaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgbmF2aWdhdGVUb0RldmlzZSA9ICgpID0+IHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL3B0L2xvZ2luJztcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBuYXZpZ2F0ZVRvID0gKHBhdGgpID0+IHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwYXRoO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGN1bXVsYXRpdmVPZmZzZXQgPSAoZWxlbWVudCkgPT4ge1xuICAgICAgICBsZXQgdG9wID0gMCwgbGVmdCA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHRvcCArPSBlbGVtZW50Lm9mZnNldFRvcCAgfHwgMDtcbiAgICAgICAgICAgIGxlZnQgKz0gZWxlbWVudC5vZmZzZXRMZWZ0IHx8IDA7XG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gICAgICAgIH0gd2hpbGUgKGVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICAgIGxlZnQ6IGxlZnRcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgY2xvc2VNb2RhbCA9ICgpID0+IHtcbiAgICAgICAgLy90ZW1wIGZvciByYWlscyB1bnN0eWxlZCBjbG9zZSBsaW5rc1xuICAgICAgICBsZXQgZWxCeUlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsLWNsb3NlJyk7XG4gICAgICAgIGlmIChfLmlzRWxlbWVudChlbEJ5SWQpKXtcbiAgICAgICAgICAgIGVsQnlJZC5vbmNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtb2RhbC1iYWNrZHJvcCcpWzBdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbW9kYWwtY2xvc2UnKVswXTtcbiAgICAgICAgaWYgKF8uaXNFbGVtZW50KGVsKSl7XG4gICAgICAgICAgICBlbC5vbmNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21vZGFsLWJhY2tkcm9wJylbMF0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNsb3NlRmxhc2ggPSAoKSA9PiB7XG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ljb24tY2xvc2UnKVswXTtcbiAgICAgICAgaWYgKF8uaXNFbGVtZW50KGVsKSl7XG4gICAgICAgICAgICBlbC5vbmNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIGVsLnBhcmVudEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBpMThuU2NvcGUgPSAoc2NvcGUsIG9iaikgPT4ge1xuICAgICAgICBvYmogPSBvYmogfHwge307XG4gICAgICAgIHJldHVybiBfLmV4dGVuZCh7fSwgb2JqLCB7c2NvcGU6IHNjb3BlfSk7XG4gICAgfSxcblxuICAgIHJlZHJhd0hhc2hDaGFuZ2UgPSAoYmVmb3JlKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gXy5pc0Z1bmN0aW9uKGJlZm9yZSkgP1xuICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgICB9IDogbS5yZWRyYXc7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgIH0sXG5cbiAgICBhdXRoZW50aWNpdHlUb2tlbiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbWV0YSA9IF8uZmlyc3QoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW25hbWU9Y3NyZi10b2tlbl0nKSk7XG4gICAgICAgIHJldHVybiBtZXRhID8gbWV0YS5jb250ZW50IDogdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgYW5pbWF0ZVNjcm9sbFRvID0gKGVsKSA9PiB7XG4gICAgICAgIGxldCBzY3JvbGxlZCA9IHdpbmRvdy5zY3JvbGxZO1xuXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGN1bXVsYXRpdmVPZmZzZXQoZWwpLnRvcCxcbiAgICAgICAgICAgIGR1cmF0aW9uID0gMzAwLFxuICAgICAgICAgICAgZEZyYW1lID0gKG9mZnNldCAtIHNjcm9sbGVkKSAvIGR1cmF0aW9uLFxuICAgICAgICAgICAgLy9FYXNlSW5PdXRDdWJpYyBlYXNpbmcgZnVuY3Rpb24uIFdlJ2xsIGFic3RyYWN0IGFsbCBhbmltYXRpb24gZnVucyBsYXRlci5cbiAgICAgICAgICAgIGVhc2VkID0gKHQpID0+IHQgPCAuNSA/IDQgKiB0ICogdCAqIHQgOiAodCAtIDEpICogKDIgKiB0IC0gMikgKiAoMiAqIHQgLSAyKSArIDEsXG4gICAgICAgICAgICBhbmltYXRpb24gPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHBvcyA9IGVhc2VkKHNjcm9sbGVkIC8gb2Zmc2V0KSAqIHNjcm9sbGVkO1xuXG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHBvcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsZWQgPj0gb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoYW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzY3JvbGxlZCA9IHNjcm9sbGVkICsgZEZyYW1lO1xuICAgICAgICAgICAgfSwgMSk7XG4gICAgfSxcbiAgICBzY3JvbGxUbyA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2V0VHJpZ2dlciA9IChlbCwgYW5jaG9ySWQpID0+IHtcbiAgICAgICAgICAgIGVsLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhbmNob3JJZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5pc0VsZW1lbnQoYW5jaG9yRWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVTY3JvbGxUbyhhbmNob3JFbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICBzZXRUcmlnZ2VyKGVsLCBlbC5oYXNoLnNsaWNlKDEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgICAgIHByb2plY3RTdGF0ZVRleHRDbGFzcyA9IChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzVGV4dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgb25saW5lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3RleHQtc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnTk8gQVInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAndGV4dC1zdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdGSU5BTkNJQURPJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmYWlsZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAndGV4dC1lcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnTsODTyBGSU5BTkNJQURPJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB3YWl0aW5nX2Z1bmRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3RleHQtd2FpdGluZycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnQUdVQVJEQU5ETydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAndGV4dC1lcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnUkVDVVNBRE8nXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRyYWZ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnUkFTQ1VOSE8nXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGluX2FuYWx5c2lzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRU0gQU7DgUxJU0UnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3RleHQtc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnQVBST1ZBRE8nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gc3RhdHVzVGV4dFtzdGF0ZV07XG4gICAgICAgIH0sXG4gICAgICAgIFJEVHJhY2tlciA9IChldmVudElkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVncmF0aW9uU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGludGVncmF0aW9uU2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRpb25TY3JpcHQuaWQgPSAnUkRJbnRlZ3JhdGlvbic7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbnRlZ3JhdGlvblNjcmlwdC5pZCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpbnRlZ3JhdGlvblNjcmlwdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlZ3JhdGlvblNjcmlwdC5vbmxvYWQgPSAoKSA9PiBSZEludGVncmF0aW9uLmludGVncmF0ZShnZXRSZFRva2VuKCksIGV2ZW50SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRpb25TY3JpcHQuc3JjID0gJ2h0dHBzOi8vZDMzNWx1dXB1Z3N5Mi5jbG91ZGZyb250Lm5ldC9qcy9pbnRlZ3JhdGlvbi9zdGFibGUvcmQtanMtaW50ZWdyYXRpb24ubWluLmpzJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIGFuYWx5dGljc0V2ZW50ID0gKGV2ZW50T2JqLCBmbj1GdW5jdGlvbi5wcm90b3R5cGUpID0+IHtcbiAgICAgICAgLy9odHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hbmFseXRpY3MvZGV2Z3VpZGVzL2NvbGxlY3Rpb24vYW5hbHl0aWNzanMvY29tbWFuZC1xdWV1ZS1yZWZlcmVuY2Ujc2VuZFxuICAgICAgICBpZiAoIWV2ZW50T2JqKXtcbiAgICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghZXZlbnRPYmoucHJvamVjdClcbiAgICAgICAgICAgICAgICAgIGV2ZW50T2JqLnByb2plY3QgPSBnZXRDdXJyZW50UHJvamVjdCgpO1xuICAgICAgICAgICAgICAgIGlmICghZXZlbnRPYmoudXNlcilcbiAgICAgICAgICAgICAgICAgIGV2ZW50T2JqLnVzZXIgPSBnZXRVc2VyKCk7XG4gICAgICAgICAgICAgICAgQ2F0YXJzZUFuYWx5dGljcy5ldmVudChldmVudE9iaik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW2guYW5hbHl0aWNzRXZlbnRdIGVycm9yOicsZSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZuKCk7XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBfYW5hbHl0aWNzT25lVGltZUV2ZW50RmlyZWQgPSB7fSxcbiAgICBhbmFseXRpY3NPbmVUaW1lRXZlbnQgPSAoZXZlbnRPYmosIGZuKSA9PiB7XG4gICAgICAgIGlmICghZXZlbnRPYmopIHtcbiAgICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV2ZW50S2V5ID0gXy5jb21wYWN0KFtldmVudE9iai5jYXQsZXZlbnRPYmouYWN0XSkuam9pbignXycpO1xuICAgICAgICBpZiAoIWV2ZW50S2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nob3VsZCBpbmZvcm0gY2F0IG9yIGFjdCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIV9hbmFseXRpY3NPbmVUaW1lRXZlbnRGaXJlZFtldmVudEtleV0pIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdvbmVUaW1lRXZlbnQnLGV2ZW50S2V5KTtcbiAgICAgICAgICAgICAgICBfYW5hbHl0aWNzT25lVGltZUV2ZW50RmlyZWRbZXZlbnRLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJlRXZlbnQgPSBhbmFseXRpY3NFdmVudChldmVudE9iaiwgZm4pO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbW9uZXRhcnlUb0Zsb2F0ID0gKHByb3BWYWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChwcm9wVmFsdWUoKS5yZXBsYWNlKCcuJywgJycpLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICB9LFxuXG4gICAgYXBwbHlNb25ldGFyeU1hc2sgPSAobnVtYmVyKSA9PiB7XG4gICAgICAgIGxldCBvbmx5TnVtYmVycyA9IFN0cmluZyhudW1iZXIpLnJlcGxhY2UoL1teMC05XXxbLixdL2csICcnKSxcbiAgICAgICAgICAgIGludGVnZXJQYXJ0ID0gb25seU51bWJlcnMuc2xpY2UoMCwgb25seU51bWJlcnMubGVuZ3RoIC0gMiksXG4gICAgICAgICAgICBkZWNpbWFsUGFydCA9IG9ubHlOdW1iZXJzLnNsaWNlKG9ubHlOdW1iZXJzLmxlbmd0aCAtIDIpO1xuXG4gICAgICAgIGludGVnZXJQYXJ0ID0gaW50ZWdlclBhcnQucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgJy4nKTtcblxuICAgICAgICByZXR1cm4gYCR7aW50ZWdlclBhcnR9LCR7ZGVjaW1hbFBhcnR9YDtcbiAgICB9LFxuXG4gICAgbm9OdW1iZXJzTWFzayA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgJycpO1xuICAgIH0sXG5cbiAgICBudW1iZXJzT25seU1hc2sgPSAodmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJylcbiAgICB9LFxuXG4gICAgYWRkQ2hhciA9IChwb3NpdGlvbiwgbWFza0NoYXIpID0+IHtcbiAgICAgICAgcmV0dXJuIChjaGFyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID09PSBwb3NpdGlvbiAmJiBjaGFyICE9PSBtYXNrQ2hhcil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoc3RyaW5nICsgbWFza0NoYXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHJlYWRNYXNrRGVmaW5pdGlvbiA9IChtYXNrQ2hhckRlZmluaXRpb25zKSA9PiB7XG4gICAgICAgIHJldHVybiAobWFza0RlZmluaXRpb24pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBfLmNvbXBhY3QoXy5tYXAobWFza0RlZmluaXRpb24sIChsZXR0ZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChsZXR0ZXIgaW4gbWFza0NoYXJEZWZpbml0aW9ucyA/IG51bGwgOiBbaW5kZXgsIGxldHRlcl0pO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBpc0NoYXJBbGxvd2VkID0gKG1hc2tDaGFyRGVmaW5pdGlvbnMpID0+IHtcbiAgICAgICAgcmV0dXJuIChtYXNrRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChwb3NpdGlvbiwgbmV3Q2hhcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA+PSBtYXNrRGVmaW5pdGlvbi5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbWFza0NoYXIgPSBtYXNrRGVmaW5pdGlvbi5jaGFyQXQocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGlmIChtYXNrQ2hhciBpbiBtYXNrQ2hhckRlZmluaXRpb25zKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tDaGFyRGVmaW5pdGlvbnNbbWFza0NoYXJdLnRlc3QobmV3Q2hhcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuZXdDaGFyID09PSBtYXNrQ2hhciB8fCBpc0NoYXJBbGxvd2VkKG1hc2tDaGFyRGVmaW5pdGlvbnMpKG1hc2tEZWZpbml0aW9uKShwb3NpdGlvbiArIDEsIG5ld0NoYXIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgLy9cbiAgICBhcHBseU1hc2sgPSAobWFza0RlZmluaXRpb24pID0+IHtcbiAgICAgICAgY29uc3QgbWFza0Z1bmN0aW9ucyA9IF8ubWFwKG1hc2tEZWZpbml0aW9uLCAobWFza0NoYXIpID0+IGFkZENoYXIobWFza0NoYXJbMF0sIG1hc2tDaGFyWzFdKSk7XG4gICAgICAgIHJldHVybiAoc3RyaW5nLCBuZXdDaGFyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZGROZXdDaGFyRnVuY3Rpb25zID0gXy5tYXAobWFza0Z1bmN0aW9ucywgKGVsKSA9PiBlbChuZXdDaGFyKSk7XG4gICAgICAgICAgICBjb25zdCBhcHBseU1hc2tGdW5jdGlvbnMgPSBfLnJlZHVjZShhZGROZXdDaGFyRnVuY3Rpb25zLCAobWVtbywgZikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXy5pc0Z1bmN0aW9uKG1lbW8pID8gXy5jb21wb3NlKGYsIG1lbW8pIDogZik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBhcHBseU1hc2tGdW5jdGlvbnMoc3RyaW5nKTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgLy9BZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Rpb2dvYi9qcXVlcnkuZml4ZWRtYXNrXG4gICAgbWFzayA9IChtYXNrRGVmaW5pdGlvbiwgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgbWFza0NoYXJEZWZpbml0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAnOSc6IC9cXGQvLFxuICAgICAgICAgICAgICAgICdBJzogL1thLXpBLVpdL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRNYXNrID0gcmVhZE1hc2tEZWZpbml0aW9uKG1hc2tDaGFyRGVmaW5pdGlvbnMpLFxuICAgICAgICAgICAgaXNTdHJDaGFyQWxsb3dlZCA9IGlzQ2hhckFsbG93ZWQobWFza0NoYXJEZWZpbml0aW9ucyksXG4gICAgICAgICAgICBhcHBseVZhbHVlTWFzayA9IGFwcGx5TWFzayhyZWFkTWFzayhtYXNrRGVmaW5pdGlvbikpLFxuICAgICAgICAgICAgcmVzdHJpY3RJbnB1dCA9IGlzU3RyQ2hhckFsbG93ZWQobWFza0RlZmluaXRpb24pO1xuXG4gICAgICAgIHJldHVybiBfLnJlZHVjZSh2YWx1ZSwgKG1lbW8sIGNocikgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3RyaWN0SW5wdXQobWVtby5sZW5ndGgsIGNocikpe1xuICAgICAgICAgICAgICAgIG1lbW8gPSBhcHBseVZhbHVlTWFzayhtZW1vLCBjaHIpICsgY2hyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sICcnKTtcbiAgICB9LFxuXG4gICAgICByZW1vdmVTdG9yZWRPYmplY3QgPSAoc2Vzc2lvbktleSkgPT4ge1xuICAgICAgICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKHNlc3Npb25LZXkpO1xuICAgICAgfSxcblxuICAgICAgY3VycmVudFByb2plY3QgPSBtLnByb3AoKSxcbiAgICAgICAgc2V0UHJvamVjdCA9IChwcm9qZWN0KSA9PiB7XG4gICAgICAgICAgICBjdXJyZW50UHJvamVjdChwcm9qZWN0KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UHJvamVjdCA9ICgpID0+IGN1cnJlbnRQcm9qZWN0LFxuICAgICAgICBjdXJyZW50UmV3YXJkID0gbS5wcm9wKCksXG4gICAgICAgIHNldFJld2FyZCA9IChyZXdhcmQpID0+IHtcbiAgICAgICAgICAgIGN1cnJlbnRSZXdhcmQocmV3YXJkKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UmV3YXJkID0gKCkgPT4gY3VycmVudFJld2FyZCxcbiAgICAgICAgYnVpbGRMaW5rID0gKGxpbmssIHJlZlN0cikgPT4gIGAvJHtsaW5rfSR7cmVmU3RyID8gJz9yZWY9JyArIHJlZlN0ciA6ICcnfWAsXG4gICAgICAgIGFuYWx5dGljc1dpbmRvd1Njcm9sbCA9IChldmVudE9iaikgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50T2JqKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCd3aW5kb3dTY3JvbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJlZCAmJiB3aW5kb3cuJCAmJiAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSA+ICQod2luZG93KS5oZWlnaHQoKSAqICgzIC8gNCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcmVFdmVudCA9IGFuYWx5dGljc0V2ZW50KGV2ZW50T2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgYW5hbHl0aWNzID0ge1xuICAgICAgICBldmVudDogYW5hbHl0aWNzRXZlbnQsXG4gICAgICAgIG9uZVRpbWVFdmVudDogYW5hbHl0aWNzT25lVGltZUV2ZW50LFxuICAgICAgICB3aW5kb3dTY3JvbGw6IGFuYWx5dGljc1dpbmRvd1Njcm9sbFxuICAgIH0sXG4gICAgcHJvamVjdEZ1bGxQZXJtYWxpbmsgPSAocHJvamVjdCkgPT4ge1xuICAgICAgICBsZXQgcGVybWFsaW5rO1xuICAgICAgICBpZiAodHlwZW9mIHByb2plY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHBlcm1hbGluayA9IHByb2plY3QoKS5wZXJtYWxpbms7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZXJtYWxpbmsgPSBwcm9qZWN0LnBlcm1hbGluaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS8ke3Blcm1hbGlua31gO1xuICAgIH0sXG4gICAgaXNIb21lID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBwYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuXG4gICAgICAgIHJldHVybiBwYXRoID09ICcvcHQnIHx8IHBhdGggPT0gJy8nO1xuICAgIH0sXG4gICAgaXNQcm9qZWN0UGFnZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICAgICAgaXNPbkluc2lnaHRzID0gcGF0aC5pbmRleE9mKCcvaW5zaWdodHMnKSA+IC0xLFxuICAgICAgICAgICAgICBpc09uRWRpdCA9IHBhdGguaW5kZXhPZignL2VkaXQnKSA+IC0xLFxuICAgICAgICAgICAgICBpc09uQ29udHJpYnV0aW9uID0gcGF0aC5pbmRleE9mKCcvY29udHJpYnV0aW9uJykgPiAtMTtcblxuICAgICAgICByZXR1cm4gIWlzT25FZGl0ICYmICFpc09uSW5zaWdodHMgJiYgIWlzT25Db250cmlidXRpb247XG4gICAgfSxcbiAgICBzZXRQYWdlVGl0bGUgPSAodGl0bGUpID0+IHtcbiAgICAgICAgcmV0dXJuIChlbCwgaXNJbml0aWFsaXplZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGl0bGVFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0aXRsZScpWzBdLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRUaXRsZSA9IHRpdGxlRWwuaW5uZXJUZXh0O1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFRpdGxlICE9PSB0aXRsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aXRsZUVsLmlubmVyVGV4dCA9IHRpdGxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY2hlY2tSZW1pbmRlciA9ICgpID0+IHtcbiAgICAgICAgbGV0IHJlbWluZGVyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgncmVtaW5kZXInKTtcblxuICAgICAgICBpZiAocmVtaW5kZXIgJiYgaXNIb21lKCkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9wcm9qZWN0cy8ke3JlbWluZGVyfWA7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJvb3RVcmwgPSAoKSA9PiB7XG4gICAgICAgIGlmIChfZGF0YUNhY2hlLnJvb3RVcmwpXG4gICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUucm9vdFVybDtcblxuICAgICAgICBjb25zdCBtZXRhID0gXy5maXJzdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbbmFtZT1yb290LXVybF0nKSk7XG4gICAgICAgIHJldHVybiBtZXRhID8gKF9kYXRhQ2FjaGUucm9vdFVybCA9IG1ldGEuY29udGVudCkgOiB1bmRlZmluZWQ7XG4gICAgfTtcblxuXG5zZXRNb21lbnRpZnlMb2NhbGUoKTtcbmNsb3NlRmxhc2goKTtcbmNsb3NlTW9kYWwoKTtcbmNoZWNrUmVtaW5kZXIoKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGF1dGhlbnRpY2l0eVRva2VuLFxuICAgIGJ1aWxkTGluayxcbiAgICBjdW11bGF0aXZlT2Zmc2V0LFxuICAgIGRpc2N1c3MsXG4gICAgZXhpc3R5LFxuICAgIHZhbGlkYXRlRW1haWwsXG4gICAgdmFsaWRhdGVDcGYsXG4gICAgbW9tZW50aWZ5LFxuICAgIG1vbWVudEZyb21TdHJpbmcsXG4gICAgZm9ybWF0TnVtYmVyLFxuICAgIGlkVk0sXG4gICAgZ2V0VXNlcixcbiAgICBnZXRBcGlIb3N0LFxuICAgIGdldE1haWxjaGltcFVybCxcbiAgICBnZXRDdXJyZW50UHJvamVjdCxcbiAgICB0b2dnbGVQcm9wLFxuICAgIGxvYWRlcixcbiAgICBuZXdGZWF0dXJlQmFkZ2UsXG4gICAgZmJQYXJzZSxcbiAgICBwbHVyYWxpemUsXG4gICAgc2ltcGxlRm9ybWF0LFxuICAgIHRyYW5zbGF0ZWRUaW1lLFxuICAgIHJld2FyZFNvdWxkT3V0LFxuICAgIHJld2FyZFJlbWFuaW5nLFxuICAgIHBhcnNlVXJsLFxuICAgIGhhc2hNYXRjaCxcbiAgICByZWRyYXdIYXNoQ2hhbmdlLFxuICAgIHVzZUF2YXRhck9yRGVmYXVsdCxcbiAgICBsb2NhdGlvbkFjdGlvbk1hdGNoLFxuICAgIG5hdmlnYXRlVG9EZXZpc2UsXG4gICAgbmF2aWdhdGVUbyxcbiAgICBzdG9yZUFjdGlvbixcbiAgICBjYWxsU3RvcmVkQWN0aW9uLFxuICAgIFVJSGVscGVyLFxuICAgIHRvQW5jaG9yLFxuICAgIHBhcmFtQnlOYW1lLFxuICAgIGkxOG5TY29wZSxcbiAgICBSRFRyYWNrZXIsXG4gICAgc2VsZk9yRW1wdHksXG4gICAgc2Nyb2xsVG8sXG4gICAgcHJvamVjdFN0YXRlVGV4dENsYXNzLFxuICAgIHZhbGlkYXRpb25FcnJvcnMsXG4gICAgdmFsaWRhdGUsXG4gICAgYW5hbHl0aWNzLFxuICAgIHN0cmlwLFxuICAgIHN0b3JlT2JqZWN0LFxuICAgIGdldFN0b3JlZE9iamVjdCxcbiAgICByZW1vdmVTdG9yZWRPYmplY3QsXG4gICAgc2V0UHJvamVjdCxcbiAgICBnZXRQcm9qZWN0LFxuICAgIHNldFJld2FyZCxcbiAgICBnZXRSZXdhcmQsXG4gICAgYXBwbHlNb25ldGFyeU1hc2ssXG4gICAgbm9OdW1iZXJzTWFzayxcbiAgICBudW1iZXJzT25seU1hc2ssXG4gICAgbW9uZXRhcnlUb0Zsb2F0LFxuICAgIG1hc2ssXG4gICAgcHJvamVjdEZ1bGxQZXJtYWxpbmssXG4gICAgaXNQcm9qZWN0UGFnZSxcbiAgICBzZXRQYWdlVGl0bGUsXG4gICAgZ2V0QmxvZ1Bvc3RzLFxuICAgIHJvb3RVcmxcbn07XG4iLCJpbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcblxuY29uc3QgbW9kZWxzID0ge1xuICAgIGNvdW50cnk6IHBvc3RncmVzdC5tb2RlbCgnY291bnRyaWVzJyksXG4gICAgc3RhdGU6IHBvc3RncmVzdC5tb2RlbCgnc3RhdGVzJyksXG4gICAgY29udHJpYnV0aW9uRGV0YWlsOiBwb3N0Z3Jlc3QubW9kZWwoJ2NvbnRyaWJ1dGlvbl9kZXRhaWxzJyksXG4gICAgY29udHJpYnV0aW9uQWN0aXZpdHk6IHBvc3RncmVzdC5tb2RlbCgnY29udHJpYnV0aW9uX2FjdGl2aXRpZXMnKSxcbiAgICBwcm9qZWN0RGV0YWlsOiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RfZGV0YWlscycpLFxuICAgIHVzZXJEZXRhaWw6IHBvc3RncmVzdC5tb2RlbCgndXNlcl9kZXRhaWxzJyksXG4gICAgYmFsYW5jZTogcG9zdGdyZXN0Lm1vZGVsKCdiYWxhbmNlcycpLFxuICAgIGJhbGFuY2VUcmFuc2FjdGlvbjogcG9zdGdyZXN0Lm1vZGVsKCdiYWxhbmNlX3RyYW5zYWN0aW9ucycpLFxuICAgIGJhbGFuY2VUcmFuc2ZlcjogcG9zdGdyZXN0Lm1vZGVsKCdiYWxhbmNlX3RyYW5zZmVycycpLFxuICAgIHVzZXI6IHBvc3RncmVzdC5tb2RlbCgndXNlcnMnKSxcbiAgICBiYW5rQWNjb3VudDogcG9zdGdyZXN0Lm1vZGVsKCdiYW5rX2FjY291bnRzJyksXG4gICAgcmV3YXJkRGV0YWlsOiBwb3N0Z3Jlc3QubW9kZWwoJ3Jld2FyZF9kZXRhaWxzJyksXG4gICAgcHJvamVjdFJlbWluZGVyOiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RfcmVtaW5kZXJzJyksXG4gICAgcHJvamVjdFJlcG9ydDogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X3JlcG9ydHMnKSxcbiAgICBjb250cmlidXRpb25zOiBwb3N0Z3Jlc3QubW9kZWwoJ2NvbnRyaWJ1dGlvbnMnKSxcbiAgICBkaXJlY3RNZXNzYWdlOiBwb3N0Z3Jlc3QubW9kZWwoJ2RpcmVjdF9tZXNzYWdlcycpLFxuICAgIHRlYW1Ub3RhbDogcG9zdGdyZXN0Lm1vZGVsKCd0ZWFtX3RvdGFscycpLFxuICAgIHJlY29tbWVuZGVkUHJvamVjdHM6IHBvc3RncmVzdC5tb2RlbCgncmVjb21tZW5kZWRfcHJvamVjdHMnKSxcbiAgICBwcm9qZWN0QWNjb3VudDogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X2FjY291bnRzJyksXG4gICAgcHJvamVjdEFjY291bnRFcnJvcjogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X2FjY291bnRfZXJyb3JzJyksXG4gICAgcHJvamVjdENvbnRyaWJ1dGlvbjogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X2NvbnRyaWJ1dGlvbnMnKSxcbiAgICBwcm9qZWN0Q29udHJpYnV0aW9yc1N0YXQ6IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF9zdGF0X2NvbnRyaWJ1dG9ycycpLFxuICAgIHByb2plY3RQb3N0RGV0YWlsOiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RfcG9zdHNfZGV0YWlscycpLFxuICAgIHByb2plY3RDb250cmlidXRpb25zUGVyRGF5OiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RfY29udHJpYnV0aW9uc19wZXJfZGF5JyksXG4gICAgcHJvamVjdENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbjogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X2NvbnRyaWJ1dGlvbnNfcGVyX2xvY2F0aW9uJyksXG4gICAgcHJvamVjdENvbnRyaWJ1dGlvbnNQZXJSZWY6IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF9jb250cmlidXRpb25zX3Blcl9yZWYnKSxcbiAgICBwcm9qZWN0VHJhbnNmZXI6IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF90cmFuc2ZlcnMnKSxcbiAgICBwcm9qZWN0OiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RzJyksXG4gICAgcHJvamVjdFNlYXJjaDogcG9zdGdyZXN0Lm1vZGVsKCdycGMvcHJvamVjdF9zZWFyY2gnKSxcbiAgICBjYXRlZ29yeTogcG9zdGdyZXN0Lm1vZGVsKCdjYXRlZ29yaWVzJyksXG4gICAgY2F0ZWdvcnlUb3RhbHM6IHBvc3RncmVzdC5tb2RlbCgnY2F0ZWdvcnlfdG90YWxzJyksXG4gICAgY2F0ZWdvcnlGb2xsb3dlcjogcG9zdGdyZXN0Lm1vZGVsKCdjYXRlZ29yeV9mb2xsb3dlcnMnKSxcbiAgICB0ZWFtTWVtYmVyOiBwb3N0Z3Jlc3QubW9kZWwoJ3RlYW1fbWVtYmVycycpLFxuICAgIG5vdGlmaWNhdGlvbjogcG9zdGdyZXN0Lm1vZGVsKCdub3RpZmljYXRpb25zJyksXG4gICAgc3RhdGlzdGljOiBwb3N0Z3Jlc3QubW9kZWwoJ3N0YXRpc3RpY3MnKSxcbiAgICBzdWNjZXNzZnVsUHJvamVjdDogcG9zdGdyZXN0Lm1vZGVsKCdzdWNjZXNzZnVsX3Byb2plY3RzJyksXG4gICAgZmluaXNoZWRQcm9qZWN0OiBwb3N0Z3Jlc3QubW9kZWwoJ2ZpbmlzaGVkX3Byb2plY3RzJyksXG4gICAgdXNlckZyaWVuZDogcG9zdGdyZXN0Lm1vZGVsKCd1c2VyX2ZyaWVuZHMnKSxcbiAgICB1c2VyRm9sbG93OiBwb3N0Z3Jlc3QubW9kZWwoJ3VzZXJfZm9sbG93cycpLFxuICAgIGZvbGxvd0FsbEZyaWVuZHM6IHBvc3RncmVzdC5tb2RlbCgncnBjL2ZvbGxvd19hbGxfZnJpZW5kcycpLFxuICAgIGNvbnRyaWJ1dG9yOiBwb3N0Z3Jlc3QubW9kZWwoJ2NvbnRyaWJ1dG9ycycpLFxuICAgIHVzZXJGb2xsb3dlcjogcG9zdGdyZXN0Lm1vZGVsKCd1c2VyX2ZvbGxvd2VycycpLFxuICAgIGNyZWF0b3JTdWdnZXN0aW9uOiBwb3N0Z3Jlc3QubW9kZWwoJ2NyZWF0b3Jfc3VnZ2VzdGlvbnMnKSxcbiAgICB1c2VyQ29udHJpYnV0aW9uOiBwb3N0Z3Jlc3QubW9kZWwoJ3VzZXJfY29udHJpYnV0aW9ucycpLFxuICAgIGludml0ZVByb2plY3RFbWFpbDogcG9zdGdyZXN0Lm1vZGVsKCdycGMvaW52aXRlX3Byb2plY3RfZW1haWwnKSxcbiAgICBkZWxldGVQcm9qZWN0OiBwb3N0Z3Jlc3QubW9kZWwoJ3JwYy9kZWxldGVfcHJvamVjdCcpLFxuICAgIGNhbmNlbFByb2plY3Q6IHBvc3RncmVzdC5tb2RlbCgncnBjL2NhbmNlbF9wcm9qZWN0Jylcbn07XG5cbm1vZGVscy50ZWFtTWVtYmVyLnBhZ2VTaXplKDQwKTtcbm1vZGVscy5yZXdhcmREZXRhaWwucGFnZVNpemUoZmFsc2UpO1xubW9kZWxzLnByb2plY3QucGFnZVNpemUoMzApO1xubW9kZWxzLmNhdGVnb3J5LnBhZ2VTaXplKDUwKTtcbm1vZGVscy5jb250cmlidXRpb25BY3Rpdml0eS5wYWdlU2l6ZSg0MCk7XG5tb2RlbHMuc3VjY2Vzc2Z1bFByb2plY3QucGFnZVNpemUoOSk7XG5tb2RlbHMuZmluaXNoZWRQcm9qZWN0LnBhZ2VTaXplKDkpO1xubW9kZWxzLmNvdW50cnkucGFnZVNpemUoZmFsc2UpO1xubW9kZWxzLnN0YXRlLnBhZ2VTaXplKGZhbHNlKTtcbm1vZGVscy5wcm9qZWN0Q29udHJpYnV0aW9uLnBhZ2VTaXplKDkpO1xubW9kZWxzLmNvbnRyaWJ1dG9yLnBhZ2VTaXplKDkpO1xubW9kZWxzLnJlY29tbWVuZGVkUHJvamVjdHMucGFnZVNpemUoMyk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vZGVscztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy51c2VyLCAnaWQuZGVzYycsIHsnUHJlZmVyJzogJ2NvdW50PWV4YWN0J30pO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcmVwbGFjZURpYWNyaXRpY3MgZnJvbSAncmVwbGFjZURpYWNyaXRpY3MnO1xuXG5jb25zdCB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICBmdWxsX3RleHRfaW5kZXg6ICdAQCcsXG4gICAgICAgIGRlYWN0aXZhdGVkX2F0OiAnaXMubnVsbCdcbiAgICB9KSxcblxuICAgIHBhcmFtVG9TdHJpbmcgPSBmdW5jdGlvbihwKSB7XG4gICAgICAgIHJldHVybiAocCB8fCAnJykudG9TdHJpbmcoKS50cmltKCk7XG4gICAgfTtcblxuLy8gU2V0IGRlZmF1bHQgdmFsdWVzXG52bS5kZWFjdGl2YXRlZF9hdChudWxsKS5vcmRlcih7XG4gICAgaWQ6ICdkZXNjJ1xufSk7XG5cbnZtLmRlYWN0aXZhdGVkX2F0LnRvRmlsdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZpbHRlciA9IEpTT04ucGFyc2Uodm0uZGVhY3RpdmF0ZWRfYXQoKSk7XG4gICAgcmV0dXJuIGZpbHRlcjtcbn07XG5cbnZtLmZ1bGxfdGV4dF9pbmRleC50b0ZpbHRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmaWx0ZXIgPSBwYXJhbVRvU3RyaW5nKHZtLmZ1bGxfdGV4dF9pbmRleCgpKTtcbiAgICByZXR1cm4gZmlsdGVyICYmIHJlcGxhY2VEaWFjcml0aWNzKGZpbHRlcikgfHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdm07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuY29uc3QgZmlsdGVyTWFpbiA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgaW5wdXRXcmFwcGVyQ2xhc3MgPSBhcmdzLmlucHV0V3JhcHBlckNsYXNzIHx8ICcudy1pbnB1dC50ZXh0LWZpZWxkLnBvc2l0aXZlLm1lZGl1bScsXG4gICAgICAgICAgICAgIGJ0bkNsYXNzID0gYXJncy5idG5DbGFzcyB8fCAnLmJ0bi5idG4tbGFyZ2UudS1tYXJnaW5ib3R0b20tMTAnO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTAnLCBbXG4gICAgICAgICAgICAgICAgbShgaW5wdXQke2lucHV0V3JhcHBlckNsYXNzfVtwbGFjZWhvbGRlcj1cIiR7YXJncy5wbGFjZWhvbGRlcn1cIl1bdHlwZT1cInRleHRcIl1gLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGFyZ3Mudm0pLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXJncy52bSgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInLCBbXG4gICAgICAgICAgICAgICAgbShgaW5wdXQjZmlsdGVyLWJ0biR7YnRuQ2xhc3N9W3R5cGU9XCJzdWJtaXRcIl1bdmFsdWU9XCJCdXNjYXJcIl1gKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZmlsdGVyTWFpbjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBmaWx0ZXJNYWluIGZyb20gJy4vZmlsdGVyLW1haW4nO1xuXG5jb25zdCBhZG1pbkZpbHRlciA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9nZ2xlcjogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlckJ1aWxkZXIgPSBhcmdzLmZpbHRlckJ1aWxkZXIsXG4gICAgICAgICAgICBkYXRhID0gYXJncy5kYXRhLFxuICAgICAgICAgICAgbGFiZWwgPSBhcmdzLmxhYmVsIHx8ICcnLFxuICAgICAgICAgICAgbWFpbiA9IF8uZmluZFdoZXJlKGZpbHRlckJ1aWxkZXIsIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlck1haW5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBtKCcjYWRtaW4tY29udHJpYnV0aW9ucy1maWx0ZXIudy1zZWN0aW9uLnBhZ2UtaGVhZGVyJywgW1xuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0zMCcsIGxhYmVsKSxcbiAgICAgICAgICAgICAgICBtKCcudy1mb3JtJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdmb3JtJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGFyZ3Muc3VibWl0XG4gICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW4gPyBtLmNvbXBvbmVudChtYWluLmNvbXBvbmVudCwgbWFpbi5kYXRhKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtbWFyZ2luYm90dG9tLTIwLnctcm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdidXR0b24udy1jb2wudy1jb2wtMTIuZm9udHNpemUtc21hbGxlc3QubGluay1oaWRkZW4tbGlnaHRbc3R5bGU9XCJiYWNrZ3JvdW5kOiBub25lOyBib3JkZXI6IG5vbmU7IG91dGxpbmU6IG5vbmU7IHRleHQtYWxpZ246IGxlZnQ7XCJdW3R5cGU9XCJidXR0b25cIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlci50b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnRmlsdHJvcyBhdmFuw6dhZG9zIMKgPicpKSwgKGN0cmwudG9nZ2xlcigpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcjYWR2YW5jZWQtc2VhcmNoLnctcm93LmFkbWluLWZpbHRlcnMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGZpbHRlckJ1aWxkZXIsIGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZi5jb21wb25lbnQgIT09IGZpbHRlck1haW4pID8gbS5jb21wb25lbnQoZi5jb21wb25lbnQsIGYuZGF0YSkgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluRmlsdGVyO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pbkl0ZW0gPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwbGF5RGV0YWlsQm94OiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGFyZ3MuaXRlbTtcblxuICAgICAgICByZXR1cm4gbSgnLnctY2xlYXJmaXguY2FyZC51LXJhZGl1cy51LW1hcmdpbmJvdHRvbS0yMC5yZXN1bHRzLWFkbWluLWl0ZW1zJywgW1xuICAgICAgICAgICAgbS5jb21wb25lbnQoYXJncy5saXN0SXRlbSwge1xuICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICAgICAgICAgICAga2V5OiBhcmdzLmtleVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtKCdidXR0b24udy1pbmxpbmUtYmxvY2suYXJyb3ctYWRtaW4uZmEuZmEtY2hldnJvbi1kb3duLmZvbnRjb2xvci1zZWNvbmRhcnknLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogY3RybC5kaXNwbGF5RGV0YWlsQm94LnRvZ2dsZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjdHJsLmRpc3BsYXlEZXRhaWxCb3goKSA/IG0uY29tcG9uZW50KGFyZ3MubGlzdERldGFpbCwge1xuICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICAgICAgICAgICAga2V5OiBhcmdzLmtleVxuICAgICAgICAgICAgfSkgOiAnJ1xuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pbkl0ZW07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IGFkbWluSXRlbSBmcm9tICcuL2FkbWluLWl0ZW0nO1xuXG5jb25zdCBhZG1pbkxpc3QgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBhcmdzLnZtLmxpc3Q7XG5cbiAgICAgICAgaWYgKCFsaXN0LmNvbGxlY3Rpb24oKS5sZW5ndGggJiYgbGlzdC5maXJzdFBhZ2UpIHtcbiAgICAgICAgICAgIGxpc3QuZmlyc3RQYWdlKCkudGhlbihudWxsLCBmdW5jdGlvbihzZXJ2ZXJFcnJvcikge1xuICAgICAgICAgICAgICAgIGFyZ3Mudm0uZXJyb3Ioc2VydmVyRXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBhcmdzLnZtLmxpc3QsXG4gICAgICAgICAgICBlcnJvciA9IGFyZ3Mudm0uZXJyb3IsXG4gICAgICAgICAgICBsYWJlbCA9IGFyZ3MubGFiZWwgfHwgJyc7XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgZXJyb3IoKSA/XG4gICAgICAgICAgICAgICAgbSgnLmNhcmQuY2FyZC1lcnJvci51LXJhZGl1cy5mb250d2VpZ2h0LWJvbGQnLCBlcnJvcigpKSA6IFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmlzTG9hZGluZygpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYENhcnJlZ2FuZG8gJHtsYWJlbC50b0xvd2VyQ2FzZSgpfS4uLmAgOiBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgbGlzdC50b3RhbCgpKSwgYCAke2xhYmVsLnRvTG93ZXJDYXNlKCl9IGVuY29udHJhZG9zYF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnI2FkbWluLWNvbnRyaWJ1dGlvbnMtbGlzdC53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuY29sbGVjdGlvbigpLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChhZG1pbkl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEl0ZW06IGFyZ3MubGlzdEl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3REZXRhaWw6IGFyZ3MubGlzdERldGFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpdGVtLmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXB1c2gtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmlzTG9hZGluZygpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmxvYWRlcigpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdidXR0b24jbG9hZC1tb3JlLmJ0bi5idG4tbWVkaXVtLmJ0bi10ZXJjaWFyeScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogbGlzdC5uZXh0UGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdDYXJyZWdhciBtYWlzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIClcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5MaXN0O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgYWRtaW5Vc2VyID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCB1c2VyID0gYXJncy5pdGVtO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1yb3cuYWRtaW4tdXNlcicsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudS1tYXJnaW5ib3R0b20tMTAnLCBbXG4gICAgICAgICAgICAgICAgbSgnaW1nLnVzZXItYXZhdGFyW3NyYz1cIicgKyBoLnVzZUF2YXRhck9yRGVmYXVsdCh1c2VyLnByb2ZpbGVfaW1nX3RodW1ibmFpbCkgKyAnXCJdJylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTkudy1jb2wtc21hbGwtOScsIFtcbiAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1zbWFsbGVyLmxpbmVoZWlnaHQtdGlnaHRlci51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1t0YXJnZXQ9XCJfYmxhbmtcIl1baHJlZj1cIi91c2Vycy8nICsgdXNlci5pZCArICcvZWRpdFwiXScsIHVzZXIubmFtZSB8fCB1c2VyLmVtYWlsKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdCcsICdVc3XDoXJpbzogJyArIHVzZXIuaWQpLFxuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJ0VtYWlsOiAnICsgdXNlci5lbWFpbCksXG4gICAgICAgICAgICAgICAgYXJncy5hZGRpdGlvbmFsX2RhdGFcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluVXNlcjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgYWRtaW5Vc2VyIGZyb20gJy4vYWRtaW4tdXNlcic7XG5cbmNvbnN0IGFkbWluVXNlckl0ZW0gPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKFxuICAgICAgICAgICAgJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5Vc2VyLCBhcmdzKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Vc2VySXRlbTtcbiIsIi8qKlxuICogd2luZG93LmMuQWRtaW5SZXNldFBhc3N3b3JkIGNvbXBvbmVudFxuICogTWFrZXMgYWpheCByZXF1ZXN0IHRvIHVwZGF0ZSBVc2VyIHBhc3N3b3JkLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLkFkbWluUmVzZXRQYXNzd29yZCwge1xuICogICAgIGRhdGE6IHt9LFxuICogICAgIGl0ZW06IHJvd0Zyb21EYXRhYmFzZVxuICogfSlcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pblJlc2V0UGFzc3dvcmQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBidWlsZGVyID0gYXJncy5kYXRhLFxuICAgICAgICAgICAgY29tcGxldGUgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZXJyb3IgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZmFpbCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBrZXkgPSBidWlsZGVyLnByb3BlcnR5LFxuICAgICAgICAgICAgZGF0YSA9IHt9LFxuICAgICAgICAgICAgaXRlbSA9IGFyZ3MuaXRlbTtcblxuICAgICAgICBidWlsZGVyLnJlcXVlc3RPcHRpb25zLmNvbmZpZyA9ICh4aHIpID0+IHtcbiAgICAgICAgICAgIGlmIChoLmF1dGhlbnRpY2l0eVRva2VuKCkpIHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1DU1JGLVRva2VuJywgaC5hdXRoZW50aWNpdHlUb2tlbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBsID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIGxvYWQgPSAoKSA9PiBtLnJlcXVlc3QoXy5leHRlbmQoe30sIHtkYXRhOiBkYXRhfSwgYnVpbGRlci5yZXF1ZXN0T3B0aW9ucykpLFxuICAgICAgICAgICAgbmV3UGFzc3dvcmQgPSBtLnByb3AoJycpLFxuICAgICAgICAgICAgZXJyb3JfbWVzc2FnZSA9IG0ucHJvcCgnJyk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEVycm9yID0gKGVycikgPT4ge1xuICAgICAgICAgICAgbChmYWxzZSk7XG4gICAgICAgICAgICBlcnJvcl9tZXNzYWdlKGVyci5lcnJvcnNbMF0pO1xuICAgICAgICAgICAgY29tcGxldGUodHJ1ZSk7XG4gICAgICAgICAgICBlcnJvcih0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdXBkYXRlSXRlbSA9IChyZXMpID0+IHtcbiAgICAgICAgICAgIGwoZmFsc2UpO1xuICAgICAgICAgICAgXy5leHRlbmQoaXRlbSwgcmVzWzBdKTtcbiAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHN1Ym1pdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGwodHJ1ZSk7XG4gICAgICAgICAgICBkYXRhW2tleV0gPSBuZXdQYXNzd29yZCgpO1xuICAgICAgICAgICAgbG9hZCgpLnRoZW4odXBkYXRlSXRlbSwgcmVxdWVzdEVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB1bmxvYWQgPSAoZWwsIGlzaW5pdCwgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgY29udGV4dC5vbnVubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBlcnJvcihmYWxzZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICBlcnJvcl9tZXNzYWdlOiBlcnJvcl9tZXNzYWdlLFxuICAgICAgICAgICAgbDogbCxcbiAgICAgICAgICAgIG5ld1Bhc3N3b3JkOiBuZXdQYXNzd29yZCxcbiAgICAgICAgICAgIHN1Ym1pdDogc3VibWl0LFxuICAgICAgICAgICAgdG9nZ2xlcjogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKSxcbiAgICAgICAgICAgIHVubG9hZDogdW5sb2FkXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3MuZGF0YSxcbiAgICAgICAgICAgIGJ0blZhbHVlID0gKGN0cmwubCgpKSA/ICdwb3IgZmF2b3IsIGFndWFyZGUuLi4nIDogZGF0YS5jYWxsVG9BY3Rpb247XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC0yJywgW1xuICAgICAgICAgICAgbSgnYnV0dG9uLmJ0bi5idG4tc21hbGwuYnRuLXRlcmNpYXJ5Jywge1xuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlci50b2dnbGVcbiAgICAgICAgICAgIH0sIGRhdGEub3V0ZXJMYWJlbCksIChjdHJsLnRvZ2dsZXIoKSkgP1xuICAgICAgICAgICAgbSgnLmRyb3Bkb3duLWxpc3QuY2FyZC51LXJhZGl1cy5kcm9wZG93bi1saXN0LW1lZGl1bS56aW5kZXgtMTAnLCB7XG4gICAgICAgICAgICAgICAgY29uZmlnOiBjdHJsLnVubG9hZFxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIG0oJ2Zvcm0udy1mb3JtJywge1xuICAgICAgICAgICAgICAgICAgICBvbnN1Ym1pdDogY3RybC5zdWJtaXRcbiAgICAgICAgICAgICAgICB9LCAoIWN0cmwuY29tcGxldGUoKSkgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsJywgZGF0YS5pbm5lckxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW3R5cGU9XCJ0ZXh0XCJdW25hbWU9XCInICsgZGF0YS5wcm9wZXJ0eSArICdcIl1bcGxhY2Vob2xkZXI9XCInICsgZGF0YS5wbGFjZWhvbGRlciArICdcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLm5ld1Bhc3N3b3JkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLm5ld1Bhc3N3b3JkKClcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctYnV0dG9uLmJ0bi5idG4tc21hbGxbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIicgKyBidG5WYWx1ZSArICdcIl0nKVxuICAgICAgICAgICAgICAgIF0gOiAoIWN0cmwuZXJyb3IoKSkgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZG9uZVtzdHlsZT1cImRpc3BsYXk6YmxvY2s7XCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsICdTZW5oYSBhbHRlcmFkYSBjb20gc3VjZXNzby4nKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZXJyb3Jbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AnLCBjdHJsLmVycm9yX21lc3NhZ2UoKSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSkgOiAnJ1xuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pblJlc2V0UGFzc3dvcmQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pbklucHV0QWN0aW9uID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBidWlsZGVyID0gYXJncy5kYXRhLFxuICAgICAgICAgICAgY29tcGxldGUgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZXJyb3IgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZmFpbCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBkYXRhID0ge30sXG4gICAgICAgICAgICBpdGVtID0gYXJncy5pdGVtLFxuICAgICAgICAgICAga2V5ID0gYnVpbGRlci5wcm9wZXJ0eSxcbiAgICAgICAgICAgIGZvcmNlVmFsdWUgPSBidWlsZGVyLmZvcmNlVmFsdWUgfHwgbnVsbCxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gbS5wcm9wKGZvcmNlVmFsdWUpO1xuXG4gICAgICAgIGguaWRWTS5pZChpdGVtW2J1aWxkZXIudXBkYXRlS2V5XSk7XG5cbiAgICAgICAgY29uc3QgbCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4oYnVpbGRlci5tb2RlbC5wYXRjaE9wdGlvbnMoaC5pZFZNLnBhcmFtZXRlcnMoKSwgZGF0YSkpO1xuXG4gICAgICAgIGNvbnN0IHVwZGF0ZUl0ZW0gPSBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgIF8uZXh0ZW5kKGl0ZW0sIHJlc1swXSk7XG4gICAgICAgICAgICBjb21wbGV0ZSh0cnVlKTtcbiAgICAgICAgICAgIGVycm9yKGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzdWJtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IG5ld1ZhbHVlKCk7XG4gICAgICAgICAgICBsLmxvYWQoKS50aGVuKHVwZGF0ZUl0ZW0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgICAgIGVycm9yKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdW5sb2FkID0gZnVuY3Rpb24oZWwsIGlzaW5pdCwgY29udGV4dCkge1xuICAgICAgICAgICAgY29udGV4dC5vbnVubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBlcnJvcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUoZm9yY2VWYWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICBsOiBsLFxuICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgc3VibWl0OiBzdWJtaXQsXG4gICAgICAgICAgICB0b2dnbGVyOiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpLFxuICAgICAgICAgICAgdW5sb2FkOiB1bmxvYWRcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBkYXRhID0gYXJncy5kYXRhLFxuICAgICAgICAgICAgYnRuVmFsdWUgPSAoY3RybC5sKCkpID8gJ3BvciBmYXZvciwgYWd1YXJkZS4uLicgOiBkYXRhLmNhbGxUb0FjdGlvbjtcblxuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTInLCBbXG4gICAgICAgICAgICBtKCdidXR0b24uYnRuLmJ0bi1zbWFsbC5idG4tdGVyY2lhcnknLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogY3RybC50b2dnbGVyLnRvZ2dsZVxuICAgICAgICAgICAgfSwgZGF0YS5vdXRlckxhYmVsKSwgKGN0cmwudG9nZ2xlcigpKSA/XG4gICAgICAgICAgICBtKCcuZHJvcGRvd24tbGlzdC5jYXJkLnUtcmFkaXVzLmRyb3Bkb3duLWxpc3QtbWVkaXVtLnppbmRleC0xMCcsIHtcbiAgICAgICAgICAgICAgICBjb25maWc6IGN0cmwudW5sb2FkXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgbSgnZm9ybS53LWZvcm0nLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uc3VibWl0OiBjdHJsLnN1Ym1pdFxuICAgICAgICAgICAgICAgIH0sICghY3RybC5jb21wbGV0ZSgpKSA/IFtcbiAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwnLCBkYXRhLmlubmVyTGFiZWwpLCAoZGF0YS5mb3JjZVZhbHVlID09PSB1bmRlZmluZWQpID9cbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW3R5cGU9XCJ0ZXh0XCJdW3BsYWNlaG9sZGVyPVwiJyArIGRhdGEucGxhY2Vob2xkZXIgKyAnXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5uZXdWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5uZXdWYWx1ZSgpXG4gICAgICAgICAgICAgICAgICAgIH0pIDogJycsXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctYnV0dG9uLmJ0bi5idG4tc21hbGxbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIicgKyBidG5WYWx1ZSArICdcIl0nKVxuICAgICAgICAgICAgICAgIF0gOiAoIWN0cmwuZXJyb3IoKSkgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZG9uZVtzdHlsZT1cImRpc3BsYXk6YmxvY2s7XCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsIGRhdGEuc3VjY2Vzc01lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSA6IFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybS1lcnJvcltzdHlsZT1cImRpc3BsYXk6YmxvY2s7XCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsICdIb3V2ZSB1bSBwcm9ibGVtYSBuYSByZXF1aXNpw6fDo28uICcgKyBkYXRhLmVycm9yTWVzc2FnZSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSkgOiAnJ1xuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pbklucHV0QWN0aW9uO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5BZG1pbk5vdGlmaWNhdGlvbkhpc3RvcnkgY29tcG9uZW50XG4gKiBSZXR1cm4gbm90aWZpY2F0aW9ucyBsaXN0IGZyb20gYW4gVXNlciBvYmplY3QuXG4gKlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuQWRtaW5Ob3RpZmljYXRpb25IaXN0b3J5LCB7XG4gKiAgICAgdXNlcjogdXNlclxuICogfSlcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5jb25zdCBhZG1pbk5vdGlmaWNhdGlvbkhpc3RvcnkgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbnMgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgZ2V0Tm90aWZpY2F0aW9ucyA9ICh1c2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG5vdGlmaWNhdGlvbiA9IG1vZGVscy5ub3RpZmljYXRpb247XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmdldFBhZ2VXaXRoVG9rZW4ocG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJfaWQ6ICdlcScsXG4gICAgICAgICAgICAgICAgICAgIHNlbnRfYXQ6ICdpcy5udWxsJ1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnVzZXJfaWQodXNlci5pZClcbiAgICAgICAgICAgICAgICAuc2VudF9hdCghbnVsbClcbiAgICAgICAgICAgICAgICAub3JkZXIoe1xuICAgICAgICAgICAgICAgICAgICBzZW50X2F0OiAnZGVzYydcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5wYXJhbWV0ZXJzKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4obm90aWZpY2F0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGdldE5vdGlmaWNhdGlvbnMoYXJncy51c2VyKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbm90aWZpY2F0aW9uczogbm90aWZpY2F0aW9uc1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsKSB7XG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIubGluZWhlaWdodC10aWdodGVyLnUtbWFyZ2luYm90dG9tLTIwJywgJ0hpc3TDs3JpY28gZGUgbm90aWZpY2HDp8O1ZXMnKSxcbiAgICAgICAgICAgIGN0cmwubm90aWZpY2F0aW9ucygpLm1hcCgoY0V2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0oJy53LXJvdy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3Nlci5kYXRlLWV2ZW50JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMjQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeScsIGgubW9tZW50aWZ5KGNFdmVudC5zZW50X2F0LCAnREQvTU0vWVlZWSwgSEg6bW0nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJyAtICcsIGNFdmVudC50ZW1wbGF0ZV9uYW1lLCBjRXZlbnQub3JpZ2luID8gJyAtICcgKyBjRXZlbnQub3JpZ2luIDogJycpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Ob3RpZmljYXRpb25IaXN0b3J5O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5BZG1pblVzZXJEZXRhaWwgY29tcG9uZW50XG4gKiBSZXR1cm4gYWN0aW9uIGlucHV0cyB0byBiZSB1c2VkIGluc2lkZSBBZG1pbkxpc3QgY29tcG9uZW50LlxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLkFkbWluTGlzdCwge1xuICogICAgIGRhdGE6IHt9LFxuICogICAgIGxpc3REZXRhaWw6IGMuQWRtaW5Vc2VyRGV0YWlsXG4gKiB9KVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGFkbWluUmVzZXRQYXNzd29yZCBmcm9tICcuL2FkbWluLXJlc2V0LXBhc3N3b3JkJztcbmltcG9ydCBhZG1pbklucHV0QWN0aW9uIGZyb20gJy4vYWRtaW4taW5wdXQtYWN0aW9uJztcbmltcG9ydCBhZG1pbk5vdGlmaWNhdGlvbkhpc3RvcnkgZnJvbSAnLi9hZG1pbi1ub3RpZmljYXRpb24taGlzdG9yeSc7XG5cbmNvbnN0IGFkbWluVXNlckRldGFpbCA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWN0aW9uczoge1xuICAgICAgICAgICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiAncGFzc3dvcmQnLFxuICAgICAgICAgICAgICAgICAgICBjYWxsVG9BY3Rpb246ICdSZWRlZmluaXInLFxuICAgICAgICAgICAgICAgICAgICBpbm5lckxhYmVsOiAnTm92YSBzZW5oYSBkZSBVc3XDoXJpbzonLFxuICAgICAgICAgICAgICAgICAgICBvdXRlckxhYmVsOiAnUmVkZWZpbmlyIHNlbmhhJyxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdleDogMTIzbXVkQHInLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogbW9kZWxzLnVzZXJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlYWN0aXZhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6ICdkZWFjdGl2YXRlZF9hdCcsXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUtleTogJ2lkJyxcbiAgICAgICAgICAgICAgICAgICAgY2FsbFRvQWN0aW9uOiAnUmVhdGl2YXInLFxuICAgICAgICAgICAgICAgICAgICBpbm5lckxhYmVsOiAnVGVtIGNlcnRlemEgcXVlIGRlc2VqYSByZWF0aXZhciBlc3NlIHVzdcOhcmlvPycsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAnVXN1w6FyaW8gcmVhdGl2YWRvIGNvbSBzdWNlc3NvIScsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ08gdXN1w6FyaW8gbsOjbyBww7RkZSBzZXIgcmVhdGl2YWRvIScsXG4gICAgICAgICAgICAgICAgICAgIG91dGVyTGFiZWw6ICdSZWF0aXZhciB1c3XDoXJpbycsXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlVmFsdWU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBtb2RlbHMudXNlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBhY3Rpb25zID0gY3RybC5hY3Rpb25zLFxuICAgICAgICAgICAgaXRlbSA9IGFyZ3MuaXRlbSxcbiAgICAgICAgICAgIGRldGFpbHMgPSBhcmdzLmRldGFpbHMsXG4gICAgICAgICAgICBhZGRPcHRpb25zID0gKGJ1aWxkZXIsIGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZXh0ZW5kKHt9LCBidWlsZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IChgL3VzZXJzLyR7aWR9L25ld19wYXNzd29yZGApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnI2FkbWluLWNvbnRyaWJ1dGlvbi1kZXRhaWwtYm94JywgW1xuICAgICAgICAgICAgbSgnLmRpdmlkZXIudS1tYXJnaW50b3AtMjAudS1tYXJnaW5ib3R0b20tMjAnKSxcbiAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0zMCcsIFtcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pblJlc2V0UGFzc3dvcmQsIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYWRkT3B0aW9ucyhhY3Rpb25zLnJlc2V0LCBpdGVtLmlkKSxcbiAgICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChpdGVtLmRlYWN0aXZhdGVkX2F0KSA/XG4gICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluSW5wdXRBY3Rpb24sIHtkYXRhOiBhY3Rpb25zLnJlYWN0aXZhdGUsIGl0ZW06IGl0ZW19KSA6ICcnXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy53LXJvdy5jYXJkLmNhcmQtdGVyY2lhcnkudS1yYWRpdXMnLCBbXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5Ob3RpZmljYXRpb25IaXN0b3J5LCB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXI6IGl0ZW1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pblVzZXJEZXRhaWw7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5jb25zdCBkcm9wZG93biA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IG9wdHMgPSAoXy5pc0Z1bmN0aW9uKGFyZ3Mub3B0aW9ucykgPyBhcmdzLm9wdGlvbnMoKSA6IGFyZ3Mub3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIG0oXG4gICAgICAgICAgICBgc2VsZWN0JHthcmdzLmNsYXNzZXN9W2lkPVwiJHthcmdzLmlkfVwiXWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgYXJncy52YWx1ZVByb3ApLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBhcmdzLnZhbHVlUHJvcCgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXy5tYXAob3B0cywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtKCdvcHRpb25bdmFsdWU9XCInICsgZGF0YS52YWx1ZSArICdcIl0nLCBkYXRhLm9wdGlvbik7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRyb3Bkb3duO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgZHJvcGRvd24gZnJvbSAnLi9kcm9wZG93bic7XG5cbmNvbnN0IGZpbHRlckRyb3Bkb3duID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCB3cmFwcGVyX2MgPSBhcmdzLndyYXBwZXJfY2xhc3MgfHwgJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYnO1xuICAgICAgICByZXR1cm4gbSh3cmFwcGVyX2MsIFtcbiAgICAgICAgICAgIG0oJ2xhYmVsLmZvbnRzaXplLXNtYWxsZXJbZm9yPVwiJyArIGFyZ3MuaW5kZXggKyAnXCJdJyxcbiAgICAgICAgICAgICAgKGFyZ3MuY3VzdG9tX2xhYmVsID8gbS5jb21wb25lbnQoYXJncy5jdXN0b21fbGFiZWxbMF0sIGFyZ3MuY3VzdG9tX2xhYmVsWzFdKSA6IGFyZ3MubGFiZWwpKSxcbiAgICAgICAgICAgIG0uY29tcG9uZW50KGRyb3Bkb3duLCB7XG4gICAgICAgICAgICAgICAgaWQ6IGFyZ3MuaW5kZXgsXG4gICAgICAgICAgICAgICAgY2xhc3NlczogJy53LXNlbGVjdC50ZXh0LWZpZWxkLnBvc2l0aXZlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZVByb3A6IGFyZ3Mudm0sXG4gICAgICAgICAgICAgICAgb3B0aW9uczogYXJncy5vcHRpb25zXG4gICAgICAgICAgICB9KVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmaWx0ZXJEcm9wZG93bjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgdXNlckxpc3RWTSBmcm9tICcuLi92bXMvdXNlci1saXN0LXZtJztcbmltcG9ydCB1c2VyRmlsdGVyVk0gZnJvbSAnLi4vdm1zL3VzZXItZmlsdGVyLXZtJztcbmltcG9ydCBhZG1pbkZpbHRlciBmcm9tICcuLi9jL2FkbWluLWZpbHRlcic7XG5pbXBvcnQgYWRtaW5MaXN0IGZyb20gJy4uL2MvYWRtaW4tbGlzdCc7XG5pbXBvcnQgYWRtaW5Vc2VySXRlbSBmcm9tICcuLi9jL2FkbWluLXVzZXItaXRlbSc7XG5pbXBvcnQgYWRtaW5Vc2VyRGV0YWlsIGZyb20gJy4uL2MvYWRtaW4tdXNlci1kZXRhaWwnO1xuaW1wb3J0IGFkbWluVXNlciBmcm9tICcuLi9jL2FkbWluLXVzZXInO1xuaW1wb3J0IGZpbHRlck1haW4gZnJvbSAnLi4vYy9maWx0ZXItbWFpbic7XG5pbXBvcnQgZmlsdGVyRHJvcGRvd24gZnJvbSAnLi4vYy9maWx0ZXItZHJvcGRvd24nO1xuXG5jb25zdCBhZG1pblVzZXJzID0ge1xuICAgIGNvbnRyb2xsZXIoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RWTSA9IHVzZXJMaXN0Vk0sXG4gICAgICAgICAgICBmaWx0ZXJWTSA9IHVzZXJGaWx0ZXJWTSxcbiAgICAgICAgICAgIGVycm9yID0gbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIGl0ZW1CdWlsZGVyID0gW3tcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGFkbWluVXNlcixcbiAgICAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICcudy1jb2wudy1jb2wtNCdcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgZmlsdGVyQnVpbGRlciA9IFt7IC8vbmFtZVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogZmlsdGVyTWFpbixcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIHZtOiBmaWx0ZXJWTS5mdWxsX3RleHRfaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnQnVzcXVlIHBvciBub21lLCBlLW1haWwsIElkcyBkbyB1c3XDoXJpby4uLicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sIHsgLy9zdGF0dXNcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlckRyb3Bkb3duLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdDb20gbyBlc3RhZG8nLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogJ3N0YXR1cycsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkZWFjdGl2YXRlZF9hdCcsXG4gICAgICAgICAgICAgICAgICAgIHZtOiBmaWx0ZXJWTS5kZWFjdGl2YXRlZF9hdCxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1F1YWxxdWVyIHVtJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ2F0aXZvJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIW51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb246ICdkZXNhdGl2YWRvJ1xuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgc3VibWl0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UoZmlsdGVyVk0ucGFyYW1ldGVycygpKS50aGVuKG51bGwsIGZ1bmN0aW9uKHNlcnZlckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yKHNlcnZlckVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbHRlclZNOiBmaWx0ZXJWTSxcbiAgICAgICAgICAgIGZpbHRlckJ1aWxkZXI6IGZpbHRlckJ1aWxkZXIsXG4gICAgICAgICAgICBsaXN0Vk06IHtcbiAgICAgICAgICAgICAgICBsaXN0OiBsaXN0Vk0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VibWl0OiBzdWJtaXRcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCkge1xuICAgICAgICBjb25zdCBsYWJlbCA9ICdVc3XDoXJpb3MnO1xuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pbkZpbHRlciwge1xuICAgICAgICAgICAgICAgIGZvcm06IGN0cmwuZmlsdGVyVk0uZm9ybURlc2NyaWJlcixcbiAgICAgICAgICAgICAgICBmaWx0ZXJCdWlsZGVyOiBjdHJsLmZpbHRlckJ1aWxkZXIsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgICAgICAgIHN1Ym1pdDogY3RybC5zdWJtaXRcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5MaXN0LCB7XG4gICAgICAgICAgICAgICAgdm06IGN0cmwubGlzdFZNLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgICAgICBsaXN0SXRlbTogYWRtaW5Vc2VySXRlbSxcbiAgICAgICAgICAgICAgICBsaXN0RGV0YWlsOiBhZG1pblVzZXJEZXRhaWxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF07XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Vc2VycztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy5jb250cmlidXRpb25EZXRhaWwsICdpZC5kZXNjJywgeydQcmVmZXInOiAnY291bnQ9ZXhhY3QnfSk7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgcmVwbGFjZURpYWNyaXRpY3MgZnJvbSAncmVwbGFjZURpYWNyaXRpY3MnO1xuXG5jb25zdCB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICBmdWxsX3RleHRfaW5kZXg6ICdAQCcsXG4gICAgICAgIHN0YXRlOiAnZXEnLFxuICAgICAgICBnYXRld2F5OiAnZXEnLFxuICAgICAgICB2YWx1ZTogJ2JldHdlZW4nLFxuICAgICAgICBjcmVhdGVkX2F0OiAnYmV0d2VlbidcbiAgICB9KSxcblxuICAgIHBhcmFtVG9TdHJpbmcgPSBmdW5jdGlvbihwKSB7XG4gICAgICAgIHJldHVybiAocCB8fCAnJykudG9TdHJpbmcoKS50cmltKCk7XG4gICAgfTtcblxuLy8gU2V0IGRlZmF1bHQgdmFsdWVzXG52bS5zdGF0ZSgnJyk7XG52bS5nYXRld2F5KCcnKTtcbnZtLm9yZGVyKHtcbiAgICBpZDogJ2Rlc2MnXG59KTtcblxudm0uY3JlYXRlZF9hdC5sdGUudG9GaWx0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZmlsdGVyID0gcGFyYW1Ub1N0cmluZyh2bS5jcmVhdGVkX2F0Lmx0ZSgpKTtcbiAgICByZXR1cm4gZmlsdGVyICYmIGgubW9tZW50RnJvbVN0cmluZyhmaWx0ZXIpLmVuZE9mKCdkYXknKS5mb3JtYXQoJycpO1xufTtcblxudm0uY3JlYXRlZF9hdC5ndGUudG9GaWx0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZmlsdGVyID0gcGFyYW1Ub1N0cmluZyh2bS5jcmVhdGVkX2F0Lmd0ZSgpKTtcbiAgICByZXR1cm4gZmlsdGVyICYmIGgubW9tZW50RnJvbVN0cmluZyhmaWx0ZXIpLmZvcm1hdCgpO1xufTtcblxudm0uZnVsbF90ZXh0X2luZGV4LnRvRmlsdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZpbHRlciA9IHBhcmFtVG9TdHJpbmcodm0uZnVsbF90ZXh0X2luZGV4KCkpO1xuICAgIHJldHVybiBmaWx0ZXIgJiYgcmVwbGFjZURpYWNyaXRpY3MoZmlsdGVyKSB8fCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB2bTtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IGFkbWluUHJvamVjdCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MuaXRlbTtcbiAgICAgICAgcmV0dXJuIG0oJy53LXJvdy5hZG1pbi1wcm9qZWN0JywgW1xuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtMy51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICBtKCdpbWcudGh1bWItcHJvamVjdC51LXJhZGl1c1tzcmM9JyArIHByb2plY3QucHJvamVjdF9pbWcgKyAnXVt3aWR0aD01MF0nKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOS53LWNvbC1zbWFsbC05JywgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIubGluZWhlaWdodC10aWdodGVyLnUtbWFyZ2luYm90dG9tLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW3RhcmdldD1cIl9ibGFua1wiXVtocmVmPVwiLycgKyBwcm9qZWN0LnBlcm1hbGluayArICdcIl0nLCBwcm9qZWN0LnByb2plY3RfbmFtZSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QuZm9udHdlaWdodC1zZW1pYm9sZCcsIHByb2plY3QucHJvamVjdF9zdGF0ZSksXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCBoLm1vbWVudGlmeShwcm9qZWN0LnByb2plY3Rfb25saW5lX2RhdGUpICsgJyBhICcgKyBoLm1vbWVudGlmeShwcm9qZWN0LnByb2plY3RfZXhwaXJlc19hdCkpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pblByb2plY3Q7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pbkNvbnRyaWJ1dGlvbiA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgY29udHJpYnV0aW9uID0gYXJncy5pdGVtO1xuICAgICAgICByZXR1cm4gbSgnLnctcm93LmFkbWluLWNvbnRyaWJ1dGlvbicsIFtcbiAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmxpbmVoZWlnaHQtdGlnaHRlci51LW1hcmdpbmJvdHRvbS0xMC5mb250c2l6ZS1zbWFsbCcsICdSJCcgKyBjb250cmlidXRpb24udmFsdWUpLFxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCBoLm1vbWVudGlmeShjb250cmlidXRpb24uY3JlYXRlZF9hdCwgJ0REL01NL1lZWVkgSEg6bW1baF0nKSksXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QnLCBbXG4gICAgICAgICAgICAgICAgJ0lEIGRvIEdhdGV3YXk6ICcsXG4gICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1t0YXJnZXQ9XCJfYmxhbmtcIl1baHJlZj1cImh0dHBzOi8vZGFzaGJvYXJkLnBhZ2FyLm1lLyMvdHJhbnNhY3Rpb25zLycgKyBjb250cmlidXRpb24uZ2F0ZXdheV9pZCArICdcIl0nLCBjb250cmlidXRpb24uZ2F0ZXdheV9pZClcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluQ29udHJpYnV0aW9uO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5BZG1pbkNvbnRyaWJ1dGlvblVzZXIgY29tcG9uZW50XG4gKiBBbiBpdGVtYnVpbGRlciBjb21wb25lbnQgdGhhdCByZXR1cm5zIGFkZGl0aW9uYWwgZGF0YVxuICogdG8gYmUgaW5jbHVkZWQgaW4gQWRtaW5Vc2VyLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgICBpdGVtQnVpbGRlcjogW3tcbiAqICAgICAgICAgICAgIGNvbXBvbmVudDogJ0FkbWluQ29udHJpYnV0aW9uVXNlcicsXG4gKiAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICcudy1jb2wudy1jb2wtNCdcbiAqICAgICAgICAgfV1cbiAqICAgICB9XG4gKiB9XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGFkbWluVXNlciBmcm9tICcuL2FkbWluLXVzZXInO1xuXG5jb25zdCBhZG1pbkNvbnRyaWJ1dGlvblVzZXIgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhcmdzLml0ZW0sXG4gICAgICAgICAgICAgIHVzZXIgPSB7XG4gICAgICAgICAgICAgICAgICBwcm9maWxlX2ltZ190aHVtYm5haWw6IGl0ZW0udXNlcl9wcm9maWxlX2ltZyxcbiAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLnVzZXJfbmFtZSxcbiAgICAgICAgICAgICAgICAgIGVtYWlsOiBpdGVtLmVtYWlsLFxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGFkZGl0aW9uYWxEYXRhID0gbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnR2F0ZXdheTogJyArIGl0ZW0ucGF5ZXJfZW1haWwpO1xuICAgICAgICByZXR1cm4gbS5jb21wb25lbnQoYWRtaW5Vc2VyLCB7aXRlbTogdXNlciwgYWRkaXRpb25hbF9kYXRhOiBhZGRpdGlvbmFsRGF0YX0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluQ29udHJpYnV0aW9uVXNlcjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbi8vQWRkIHRyYW5zbGF0aW9ucyB0byBwYXltZW50IHN0YXRlLlxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMucGF5bWVudCcpO1xuXG5jb25zdCBwYXltZW50U3RhdHVzID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgcGF5bWVudCA9IGFyZ3MuaXRlbSxcbiAgICAgICAgICAgIGNhcmQgPSBudWxsLFxuICAgICAgICAgICAgZGlzcGxheVBheW1lbnRNZXRob2QsIHBheW1lbnRNZXRob2RDbGFzcywgc3RhdGVDbGFzcztcblxuICAgICAgICBjYXJkID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBheW1lbnQuZ2F0ZXdheV9kYXRhKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChwYXltZW50LmdhdGV3YXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtb2lwJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfZGlnaXRzOiBwYXltZW50LmdhdGV3YXlfZGF0YS5jYXJ0YW9fYmluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfZGlnaXRzOiBwYXltZW50LmdhdGV3YXlfZGF0YS5jYXJ0YW9fZmluYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhbmQ6IHBheW1lbnQuZ2F0ZXdheV9kYXRhLmNhcnRhb19iYW5kZWlyYVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncGFnYXJtZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2RpZ2l0czogcGF5bWVudC5nYXRld2F5X2RhdGEuY2FyZF9maXJzdF9kaWdpdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9kaWdpdHM6IHBheW1lbnQuZ2F0ZXdheV9kYXRhLmNhcmRfbGFzdF9kaWdpdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhbmQ6IHBheW1lbnQuZ2F0ZXdheV9kYXRhLmNhcmRfYnJhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGRpc3BsYXlQYXltZW50TWV0aG9kID0gKCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChwYXltZW50LnBheW1lbnRfbWV0aG9kLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdib2xldG9iYW5jYXJpbyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCdzcGFuI2JvbGV0by1kZXRhaWwnLCAnJyk7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2FydGFvZGVjcmVkaXRvJzpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmREYXRhID0gY2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcjY3JlZGl0Y2FyZC1kZXRhaWwuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmREYXRhLmZpcnN0X2RpZ2l0cyArICcqKioqKionICsgY2FyZERhdGEubGFzdF9kaWdpdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkRGF0YS5icmFuZCArICcgJyArIHBheW1lbnQuaW5zdGFsbG1lbnRzICsgJ3gnXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcGF5bWVudE1ldGhvZENsYXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChwYXltZW50LnBheW1lbnRfbWV0aG9kLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdib2xldG9iYW5jYXJpbyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnLmZhLWJhcmNvZGUnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NhcnRhb2RlY3JlZGl0byc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnLmZhLWNyZWRpdC1jYXJkJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJy5mYS1xdWVzdGlvbic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc3RhdGVDbGFzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAocGF5bWVudC5zdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3BhaWQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJy50ZXh0LXN1Y2Nlc3MnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JlZnVuZGVkJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcudGV4dC1yZWZ1bmRlZCc7XG4gICAgICAgICAgICAgICAgY2FzZSAncGVuZGluZyc6XG4gICAgICAgICAgICAgICAgY2FzZSAncGVuZGluZ19yZWZ1bmQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJy50ZXh0LXdhaXRpbmcnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnLnRleHQtZXJyb3InO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwbGF5UGF5bWVudE1ldGhvZDogZGlzcGxheVBheW1lbnRNZXRob2QsXG4gICAgICAgICAgICBwYXltZW50TWV0aG9kQ2xhc3M6IHBheW1lbnRNZXRob2RDbGFzcyxcbiAgICAgICAgICAgIHN0YXRlQ2xhc3M6IHN0YXRlQ2xhc3NcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwYXltZW50ID0gYXJncy5pdGVtO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1yb3cucGF5bWVudC1zdGF0dXMnLCBbXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC1sb29zZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsIFtcbiAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWNpcmNsZScgKyBjdHJsLnN0YXRlQ2xhc3MoKSksICfCoCcgKyBJMThuLnQocGF5bWVudC5zdGF0ZSwgSTE4blNjb3BlKCkpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250d2VpZ2h0LXNlbWlib2xkJywgW1xuICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEnICsgY3RybC5wYXltZW50TWV0aG9kQ2xhc3MoKSksICcgJywgbSgnYS5saW5rLWhpZGRlbltocmVmPVwiI1wiXScsIHBheW1lbnQucGF5bWVudF9tZXRob2QpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHQnLCBbXG4gICAgICAgICAgICAgICAgY3RybC5kaXNwbGF5UGF5bWVudE1ldGhvZCgpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXltZW50U3RhdHVzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBhZG1pblByb2plY3QgZnJvbSAnLi9hZG1pbi1wcm9qZWN0JztcbmltcG9ydCBhZG1pbkNvbnRyaWJ1dGlvbiBmcm9tICcuL2FkbWluLWNvbnRyaWJ1dGlvbic7XG5pbXBvcnQgYWRtaW5Db250cmlidXRpb25Vc2VyIGZyb20gJy4vYWRtaW4tY29udHJpYnV0aW9uLXVzZXInO1xuaW1wb3J0IHBheW1lbnRTdGF0dXMgZnJvbSAnLi9wYXltZW50LXN0YXR1cyc7XG5cbmNvbnN0IGFkbWluQ29udHJpYnV0aW9uSXRlbSA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXRlbUJ1aWxkZXI6IFt7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBhZG1pbkNvbnRyaWJ1dGlvblVzZXIsXG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnLnctY29sLnctY29sLTQnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBhZG1pblByb2plY3QsXG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnLnctY29sLnctY29sLTQnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBhZG1pbkNvbnRyaWJ1dGlvbixcbiAgICAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICcudy1jb2wudy1jb2wtMidcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IHBheW1lbnRTdGF0dXMsXG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnLnctY29sLnctY29sLTInXG4gICAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKFxuICAgICAgICAgICAgJy53LXJvdycsXG4gICAgICAgICAgICBfLm1hcChjdHJsLml0ZW1CdWlsZGVyLCBmdW5jdGlvbihwYW5lbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtKHBhbmVsLndyYXBwZXJDbGFzcywgW1xuICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwYW5lbC5jb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW06IGFyZ3MuaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogYXJncy5rZXlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Db250cmlidXRpb25JdGVtO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pblJhZGlvQWN0aW9uID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBidWlsZGVyID0gYXJncy5kYXRhLFxuICAgICAgICAgICAgY29tcGxldGUgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZGF0YSA9IHt9LFxuICAgICAgICAgICAgZXJyb3IgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZmFpbCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBpdGVtID0gYXJncy5pdGVtKCksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IG0ucHJvcChpdGVtLmRlc2NyaXB0aW9uIHx8ICcnKSxcbiAgICAgICAgICAgIGtleSA9IGJ1aWxkZXIuZ2V0S2V5LFxuICAgICAgICAgICAgbmV3SUQgPSBtLnByb3AoJycpLFxuICAgICAgICAgICAgZ2V0RmlsdGVyID0ge30sXG4gICAgICAgICAgICBzZXRGaWx0ZXIgPSB7fSxcbiAgICAgICAgICAgIHJhZGlvcyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBnZXRBdHRyID0gYnVpbGRlci5yYWRpb3MsXG4gICAgICAgICAgICBnZXRLZXkgPSBidWlsZGVyLmdldEtleSxcbiAgICAgICAgICAgIGdldEtleVZhbHVlID0gYXJncy5nZXRLZXlWYWx1ZSxcbiAgICAgICAgICAgIHVwZGF0ZUtleSA9IGJ1aWxkZXIudXBkYXRlS2V5LFxuICAgICAgICAgICAgdXBkYXRlS2V5VmFsdWUgPSBhcmdzLnVwZGF0ZUtleVZhbHVlLFxuICAgICAgICAgICAgdmFsaWRhdGUgPSBidWlsZGVyLnZhbGlkYXRlLFxuICAgICAgICAgICAgc2VsZWN0ZWRJdGVtID0gYnVpbGRlci5zZWxlY3RlZEl0ZW0gfHwgbS5wcm9wKCk7XG5cbiAgICAgICAgc2V0RmlsdGVyW3VwZGF0ZUtleV0gPSAnZXEnO1xuICAgICAgICBjb25zdCBzZXRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oc2V0RmlsdGVyKTtcbiAgICAgICAgc2V0Vk1bdXBkYXRlS2V5XSh1cGRhdGVLZXlWYWx1ZSk7XG5cbiAgICAgICAgZ2V0RmlsdGVyW2dldEtleV0gPSAnZXEnO1xuICAgICAgICBjb25zdCBnZXRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oZ2V0RmlsdGVyKTtcbiAgICAgICAgZ2V0Vk1bZ2V0S2V5XShnZXRLZXlWYWx1ZSk7XG5cbiAgICAgICAgY29uc3QgZ2V0TG9hZGVyID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihidWlsZGVyLmdldE1vZGVsLmdldFBhZ2VPcHRpb25zKGdldFZNLnBhcmFtZXRlcnMoKSkpO1xuXG4gICAgICAgIGNvbnN0IHNldExvYWRlciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4oYnVpbGRlci51cGRhdGVNb2RlbC5wYXRjaE9wdGlvbnMoc2V0Vk0ucGFyYW1ldGVycygpLCBkYXRhKSk7XG5cbiAgICAgICAgY29uc3QgdXBkYXRlSXRlbSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3SXRlbSA9IF8uZmluZFdoZXJlKHJhZGlvcygpLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBkYXRhWzBdW2J1aWxkZXIuc2VsZWN0S2V5XVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbShuZXdJdGVtKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTmVuaHVtIGl0ZW0gYXR1YWxpemFkbydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBvcHVsYXRlUmFkaW9zID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVtcHR5U3RhdGUgPSBidWlsZGVyLmFkZEVtcHR5O1xuXG4gICAgICAgICAgICByYWRpb3MoZGF0YSk7XG5cbiAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChlbXB0eVN0YXRlKSl7XG4gICAgICAgICAgICAgICAgcmFkaW9zKCkudW5zaGlmdChlbXB0eVN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBmZXRjaCA9ICgpID0+IHtcbiAgICAgICAgICAgIGdldExvYWRlci5sb2FkKCkudGhlbihwb3B1bGF0ZVJhZGlvcywgZXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHN1Ym1pdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChuZXdJRCgpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbGlkYXRpb24gPSB2YWxpZGF0ZShyYWRpb3MoKSwgbmV3SUQoKSk7XG4gICAgICAgICAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQodmFsaWRhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtidWlsZGVyLnNlbGVjdEtleV0gPSBuZXdJRCgpID09PSAtMSA/IG51bGwgOiBuZXdJRCgpO1xuICAgICAgICAgICAgICAgICAgICBzZXRMb2FkZXIubG9hZCgpLnRoZW4odXBkYXRlSXRlbSwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB2YWxpZGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB1bmxvYWQgPSAoZWwsIGlzaW5pdCwgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgY29udGV4dC5vbnVubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xuICAgICAgICAgICAgICAgIG5ld0lEKCcnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc2V0RGVzY3JpcHRpb24gPSAodGV4dCkgPT4ge1xuICAgICAgICAgICAgZGVzY3JpcHRpb24odGV4dCk7XG4gICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZldGNoKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHNldERlc2NyaXB0aW9uOiBzZXREZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIHNldExvYWRlcjogc2V0TG9hZGVyLFxuICAgICAgICAgICAgZ2V0TG9hZGVyOiBnZXRMb2FkZXIsXG4gICAgICAgICAgICBuZXdJRDogbmV3SUQsXG4gICAgICAgICAgICBzdWJtaXQ6IHN1Ym1pdCxcbiAgICAgICAgICAgIHRvZ2dsZXI6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICB1bmxvYWQ6IHVubG9hZCxcbiAgICAgICAgICAgIHJhZGlvczogcmFkaW9zXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3MuZGF0YSxcbiAgICAgICAgICAgIGl0ZW0gPSBhcmdzLml0ZW0oKSxcbiAgICAgICAgICAgIGJ0blZhbHVlID0gKGN0cmwuc2V0TG9hZGVyKCkgfHwgY3RybC5nZXRMb2FkZXIoKSkgPyAncG9yIGZhdm9yLCBhZ3VhcmRlLi4uJyA6IGRhdGEuY2FsbFRvQWN0aW9uO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtMicsIFtcbiAgICAgICAgICAgIG0oJ2J1dHRvbi5idG4uYnRuLXNtYWxsLmJ0bi10ZXJjaWFyeScsIHtcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnRvZ2dsZXIudG9nZ2xlXG4gICAgICAgICAgICB9LCBkYXRhLm91dGVyTGFiZWwpLCAoY3RybC50b2dnbGVyKCkpID9cbiAgICAgICAgICAgIG0oJy5kcm9wZG93bi1saXN0LmNhcmQudS1yYWRpdXMuZHJvcGRvd24tbGlzdC1tZWRpdW0uemluZGV4LTEwJywge1xuICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC51bmxvYWRcbiAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICBtKCdmb3JtLnctZm9ybScsIHtcbiAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGN0cmwuc3VibWl0XG4gICAgICAgICAgICAgICAgfSwgKCFjdHJsLmNvbXBsZXRlKCkpID8gW1xuICAgICAgICAgICAgICAgICAgICAoY3RybC5yYWRpb3MoKSkgP1xuICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLnJhZGlvcygpLCAocmFkaW8sIGluZGV4KSA9PiBtKCcudy1yYWRpbycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0I3ItJyArIGluZGV4ICsgJy53LXJhZGlvLWlucHV0W3R5cGU9cmFkaW9dW25hbWU9XCJhZG1pbi1yYWRpb1wiXVt2YWx1ZT1cIicgKyByYWRpby5pZCArICdcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogcmFkaW8uaWQgPT09IChpdGVtW2RhdGEuc2VsZWN0S2V5XSB8fCBpdGVtLmlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwubmV3SUQocmFkaW8uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNldERlc2NyaXB0aW9uKHJhZGlvLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLnctZm9ybS1sYWJlbFtmb3I9XCJyLScgKyBpbmRleCArICdcIl0nLCAnUiQnICsgcmFkaW8ubWluaW11bV92YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgXSkpIDogaC5sb2FkZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnc3Ryb25nJywgJ0Rlc2NyacOnw6NvJyksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AnLCBjdHJsLmRlc2NyaXB0aW9uKCkpLFxuICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWJ1dHRvbi5idG4uYnRuLXNtYWxsW3R5cGU9XCJzdWJtaXRcIl1bdmFsdWU9XCInICsgYnRuVmFsdWUgKyAnXCJdJylcbiAgICAgICAgICAgICAgICBdIDogKCFjdHJsLmVycm9yKCkpID8gW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtLWRvbmVbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AnLCAnUmVjb21wZW5zYSBhbHRlcmFkYSBjb20gc3VjZXNzbyEnKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZXJyb3Jbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AnLCBjdHJsLmVycm9yKCkubWVzc2FnZSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSkgOiAnJ1xuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pblJhZGlvQWN0aW9uO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5BZG1pbkV4dGVybmFsQWN0aW9uIGNvbXBvbmVudFxuICogTWFrZXMgYXJiaXRyYXJ5IGFqYXggcmVxdWVzdHMgYW5kIHVwZGF0ZSB1bmRlcmx5aW5nXG4gKiBkYXRhIGZyb20gc291cmNlIGVuZHBvaW50LlxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLkFkbWluRXh0ZXJuYWxBY3Rpb24sIHtcbiAqICAgICBkYXRhOiB7fSxcbiAqICAgICBpdGVtOiByb3dGcm9tRGF0YWJhc2VcbiAqIH0pXG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgYWRtaW5FeHRlcm5hbEFjdGlvbiA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgbGV0IGJ1aWxkZXIgPSBhcmdzLmRhdGEsXG4gICAgICAgICAgICBjb21wbGV0ZSA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBlcnJvciA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBmYWlsID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIGRhdGEgPSB7fSxcbiAgICAgICAgICAgIGl0ZW0gPSBhcmdzLml0ZW07XG5cbiAgICAgICAgYnVpbGRlci5yZXF1ZXN0T3B0aW9ucy5jb25maWcgPSAoeGhyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaC5hdXRoZW50aWNpdHlUb2tlbigpKSB7XG4gICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtQ1NSRi1Ub2tlbicsIGguYXV0aGVudGljaXR5VG9rZW4oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVsb2FkID0gXy5jb21wb3NlKGJ1aWxkZXIubW9kZWwuZ2V0Um93V2l0aFRva2VuLCBoLmlkVk0uaWQoaXRlbVtidWlsZGVyLnVwZGF0ZUtleV0pLnBhcmFtZXRlcnMpLFxuICAgICAgICAgICAgbCA9IG0ucHJvcChmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgcmVsb2FkSXRlbSA9ICgpID0+IHJlbG9hZCgpLnRoZW4odXBkYXRlSXRlbSk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEVycm9yID0gKGVycikgPT4ge1xuICAgICAgICAgICAgbChmYWxzZSk7XG4gICAgICAgICAgICBjb21wbGV0ZSh0cnVlKTtcbiAgICAgICAgICAgIGVycm9yKHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHVwZGF0ZUl0ZW0gPSAocmVzKSA9PiB7XG4gICAgICAgICAgICBfLmV4dGVuZChpdGVtLCByZXNbMF0pO1xuICAgICAgICAgICAgY29tcGxldGUodHJ1ZSk7XG4gICAgICAgICAgICBlcnJvcihmYWxzZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc3VibWl0ID0gKCkgPT4ge1xuICAgICAgICAgICAgbCh0cnVlKTtcbiAgICAgICAgICAgIG0ucmVxdWVzdChidWlsZGVyLnJlcXVlc3RPcHRpb25zKS50aGVuKHJlbG9hZEl0ZW0sIHJlcXVlc3RFcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdW5sb2FkID0gKGVsLCBpc2luaXQsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGNvbnRleHQub251bmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbDogbCxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIHN1Ym1pdDogc3VibWl0LFxuICAgICAgICAgICAgdG9nZ2xlcjogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKSxcbiAgICAgICAgICAgIHVubG9hZDogdW5sb2FkXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3MuZGF0YSxcbiAgICAgICAgICAgIGJ0blZhbHVlID0gKGN0cmwubCgpKSA/ICdwb3IgZmF2b3IsIGFndWFyZGUuLi4nIDogZGF0YS5jYWxsVG9BY3Rpb247XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC0yJywgW1xuICAgICAgICAgICAgbSgnYnV0dG9uLmJ0bi5idG4tc21hbGwuYnRuLXRlcmNpYXJ5Jywge1xuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlci50b2dnbGVcbiAgICAgICAgICAgIH0sIGRhdGEub3V0ZXJMYWJlbCksIChjdHJsLnRvZ2dsZXIoKSkgP1xuICAgICAgICAgICAgbSgnLmRyb3Bkb3duLWxpc3QuY2FyZC51LXJhZGl1cy5kcm9wZG93bi1saXN0LW1lZGl1bS56aW5kZXgtMTAnLCB7XG4gICAgICAgICAgICAgICAgY29uZmlnOiBjdHJsLnVubG9hZFxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIG0oJ2Zvcm0udy1mb3JtJywge1xuICAgICAgICAgICAgICAgICAgICBvbnN1Ym1pdDogY3RybC5zdWJtaXRcbiAgICAgICAgICAgICAgICB9LCAoIWN0cmwuY29tcGxldGUoKSkgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsJywgZGF0YS5pbm5lckxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1idXR0b24uYnRuLmJ0bi1zbWFsbFt0eXBlPVwic3VibWl0XCJdW3ZhbHVlPVwiJyArIGJ0blZhbHVlICsgJ1wiXScpXG4gICAgICAgICAgICAgICAgXSA6ICghY3RybC5lcnJvcigpKSA/IFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybS1kb25lW3N0eWxlPVwiZGlzcGxheTpibG9jaztcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdwJywgJ1JlcXVpc2nDp8OjbyBmZWl0YSBjb20gc3VjZXNzby4nKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZXJyb3Jbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AnLCAnSG91dmUgdW0gcHJvYmxlbWEgbmEgcmVxdWlzacOnw6NvLicpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pIDogJydcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5FeHRlcm5hbEFjdGlvbjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IGFkbWluVHJhbnNhY3Rpb24gPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvbiA9IGFyZ3MuY29udHJpYnV0aW9uO1xuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1zbWFsbGVyLmxpbmVoZWlnaHQtdGlnaHRlci51LW1hcmdpbmJvdHRvbS0yMCcsICdEZXRhbGhlcyBkbyBhcG9pbycpLFxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmxpbmVoZWlnaHQtbG9vc2VyJywgW1xuICAgICAgICAgICAgICAgICdWYWxvcjogUiQnICsgaC5mb3JtYXROdW1iZXIoY29udHJpYnV0aW9uLnZhbHVlLCAyLCAzKSxcbiAgICAgICAgICAgICAgICBtKCdicicpLFxuICAgICAgICAgICAgICAgICdUYXhhOiBSJCcgKyBoLmZvcm1hdE51bWJlcihjb250cmlidXRpb24uZ2F0ZXdheV9mZWUsIDIsIDMpLFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgJ0FndWFyZGFuZG8gQ29uZmlybWHDp8OjbzogJyArIChjb250cmlidXRpb24ud2FpdGluZ19wYXltZW50ID8gJ1NpbScgOiAnTsOjbycpLFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgJ0Fuw7RuaW1vOiAnICsgKGNvbnRyaWJ1dGlvbi5hbm9ueW1vdXMgPyAnU2ltJyA6ICdOw6NvJyksXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAnSWQgcGFnYW1lbnRvOiAnICsgY29udHJpYnV0aW9uLmdhdGV3YXlfaWQsXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAnQXBvaW86ICcgKyBjb250cmlidXRpb24uY29udHJpYnV0aW9uX2lkLFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgJ0NoYXZlOsKgXFxuJyxcbiAgICAgICAgICAgICAgICBtKCdicicpLFxuICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbi5rZXksXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAnTWVpbzogJyArIGNvbnRyaWJ1dGlvbi5nYXRld2F5LFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgJ09wZXJhZG9yYTogJyArIChjb250cmlidXRpb24uZ2F0ZXdheV9kYXRhICYmIGNvbnRyaWJ1dGlvbi5nYXRld2F5X2RhdGEuYWNxdWlyZXJfbmFtZSksXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICBjb250cmlidXRpb24uaXNfc2Vjb25kX3NsaXAgPyBbbSgnYS5saW5rLWhpZGRlbltocmVmPVwiI1wiXScsICdCb2xldG8gYmFuY8OhcmlvJyksICcgJywgbSgnc3Bhbi5iYWRnZScsICcyYSB2aWEnKV0gOiAnJ1xuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5UcmFuc2FjdGlvbjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgYWRtaW5UcmFuc2FjdGlvbkhpc3RvcnkgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvbiA9IGFyZ3MuY29udHJpYnV0aW9uLFxuICAgICAgICAgICAgbWFwRXZlbnRzID0gXy5yZWR1Y2UoW3tcbiAgICAgICAgICAgICAgICBkYXRlOiBjb250cmlidXRpb24ucGFpZF9hdCxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQXBvaW8gY29uZmlybWFkbydcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkYXRlOiBjb250cmlidXRpb24ucGVuZGluZ19yZWZ1bmRfYXQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ1JlZW1ib2xzbyBzb2xpY2l0YWRvJ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRhdGU6IGNvbnRyaWJ1dGlvbi5yZWZ1bmRlZF9hdCxcbiAgICAgICAgICAgICAgICBuYW1lOiAnRXN0b3JubyByZWFsaXphZG8nXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGF0ZTogY29udHJpYnV0aW9uLmNyZWF0ZWRfYXQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0Fwb2lvIGNyaWFkbydcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkYXRlOiBjb250cmlidXRpb24ucmVmdXNlZF9hdCxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQXBvaW8gY2FuY2VsYWRvJ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRhdGU6IGNvbnRyaWJ1dGlvbi5kZWxldGVkX2F0LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdBcG9pbyBleGNsdcOtZG8nXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGF0ZTogY29udHJpYnV0aW9uLmNoYXJnZWJhY2tfYXQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0NoYXJnZWJhY2snXG4gICAgICAgICAgICB9XSwgKG1lbW8sIGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5kYXRlICE9PSBudWxsICYmIGl0ZW0uZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0ub3JpZ2luYWxEYXRlID0gaXRlbS5kYXRlO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmRhdGUgPSBoLm1vbWVudGlmeShpdGVtLmRhdGUsICdERC9NTS9ZWVlZLCBISDptbScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtby5jb25jYXQoaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgICAgICB9LCBbXSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9yZGVyZWRFdmVudHM6IF8uc29ydEJ5KG1hcEV2ZW50cywgJ29yaWdpbmFsRGF0ZScpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwpIHtcbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtc21hbGxlci5saW5laGVpZ2h0LXRpZ2h0ZXIudS1tYXJnaW5ib3R0b20tMjAnLCAnSGlzdMOzcmljbyBkYSB0cmFuc2HDp8OjbycpLFxuICAgICAgICAgICAgY3RybC5vcmRlcmVkRXZlbnRzLm1hcCgoY0V2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0oJy53LXJvdy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3Nlci5kYXRlLWV2ZW50JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5JywgY0V2ZW50LmRhdGUpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIGNFdmVudC5uYW1lKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5UcmFuc2FjdGlvbkhpc3Rvcnk7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBhZG1pblJld2FyZCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcmV3YXJkID0gYXJncy5yZXdhcmQoKSxcbiAgICAgICAgICAgIGF2YWlsYWJsZSA9IHBhcnNlSW50KHJld2FyZC5wYWlkX2NvdW50KSArIHBhcnNlSW50KHJld2FyZC53YWl0aW5nX3BheW1lbnRfY291bnQpO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIubGluZWhlaWdodC10aWdodGVyLnUtbWFyZ2luYm90dG9tLTIwJywgJ1JlY29tcGVuc2EnKSxcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3NlcicsIHJld2FyZC5pZCA/IFtcbiAgICAgICAgICAgICAgICAnSUQ6ICcgKyByZXdhcmQuaWQsXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAnVmFsb3IgbcOtbmltbzogUiQnICsgaC5mb3JtYXROdW1iZXIocmV3YXJkLm1pbmltdW1fdmFsdWUsIDIsIDMpLFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgbS50cnVzdCgnRGlzcG9uw612ZWlzOiAnICsgYXZhaWxhYmxlICsgJyAvICcgKyAocmV3YXJkLm1heGltdW1fY29udHJpYnV0aW9ucyB8fCAnJmluZmluOycpKSxcbiAgICAgICAgICAgICAgICBtKCdicicpLFxuICAgICAgICAgICAgICAgICdBZ3VhcmRhbmRvIGNvbmZpcm1hw6fDo286ICcgKyByZXdhcmQud2FpdGluZ19wYXltZW50X2NvdW50LFxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgJ0Rlc2NyacOnw6NvOiAnICsgcmV3YXJkLmRlc2NyaXB0aW9uXG4gICAgICAgICAgICBdIDogJ0Fwb2lvIHNlbSByZWNvbXBlbnNhJylcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5SZXdhcmQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgYWRtaW5JbnB1dEFjdGlvbiBmcm9tICcuL2FkbWluLWlucHV0LWFjdGlvbic7XG5pbXBvcnQgYWRtaW5SYWRpb0FjdGlvbiBmcm9tICcuL2FkbWluLXJhZGlvLWFjdGlvbic7XG5pbXBvcnQgYWRtaW5FeHRlcm5hbEFjdGlvbiBmcm9tICcuL2FkbWluLWV4dGVybmFsLWFjdGlvbic7XG5pbXBvcnQgYWRtaW5UcmFuc2FjdGlvbiBmcm9tICcuL2FkbWluLXRyYW5zYWN0aW9uJztcbmltcG9ydCBhZG1pblRyYW5zYWN0aW9uSGlzdG9yeSBmcm9tICcuL2FkbWluLXRyYW5zYWN0aW9uLWhpc3RvcnknO1xuaW1wb3J0IGFkbWluUmV3YXJkIGZyb20gJy4vYWRtaW4tcmV3YXJkJztcblxuY29uc3QgYWRtaW5Db250cmlidXRpb25EZXRhaWwgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBsO1xuICAgICAgICBjb25zdCBsb2FkUmV3YXJkID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbW9kZWwgPSBtb2RlbHMucmV3YXJkRGV0YWlsLFxuICAgICAgICAgICAgICAgIHJld2FyZF9pZCA9IGFyZ3MuaXRlbS5yZXdhcmRfaWQsXG4gICAgICAgICAgICAgICAgb3B0cyA9IG1vZGVsLmdldFJvd09wdGlvbnMoaC5pZFZNLmlkKHJld2FyZF9pZCkucGFyYW1ldGVycygpKSxcbiAgICAgICAgICAgICAgICByZXdhcmQgPSBtLnByb3Aoe30pO1xuXG4gICAgICAgICAgICBsID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihvcHRzKTtcblxuICAgICAgICAgICAgaWYgKHJld2FyZF9pZCkge1xuICAgICAgICAgICAgICAgIGwubG9hZCgpLnRoZW4oXy5jb21wb3NlKHJld2FyZCwgXy5maXJzdCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmV3YXJkO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXdhcmQ6IGxvYWRSZXdhcmQoKSxcbiAgICAgICAgICAgIGFjdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eTogJ3VzZXJfaWQnLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXk6ICdpZCcsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxUb0FjdGlvbjogJ1RyYW5zZmVyaXInLFxuICAgICAgICAgICAgICAgICAgICBpbm5lckxhYmVsOiAnSWQgZG8gbm92byBhcG9pYWRvcjonLFxuICAgICAgICAgICAgICAgICAgICBvdXRlckxhYmVsOiAnVHJhbnNmZXJpciBBcG9pbycsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnZXg6IDEyOTkwOCcsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAnQXBvaW8gdHJhbnNmZXJpZG8gY29tIHN1Y2Vzc28hJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnTyBhcG9pbyBuw6NvIGZvaSB0cmFuc2ZlcmlkbyEnLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogbW9kZWxzLmNvbnRyaWJ1dGlvbkRldGFpbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmV3YXJkOiB7XG4gICAgICAgICAgICAgICAgICAgIGdldEtleTogJ3Byb2plY3RfaWQnLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXk6ICdjb250cmlidXRpb25faWQnLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RLZXk6ICdyZXdhcmRfaWQnLFxuICAgICAgICAgICAgICAgICAgICByYWRpb3M6ICdyZXdhcmRzJyxcbiAgICAgICAgICAgICAgICAgICAgY2FsbFRvQWN0aW9uOiAnQWx0ZXJhciBSZWNvbXBlbnNhJyxcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJMYWJlbDogJ1JlY29tcGVuc2EnLFxuICAgICAgICAgICAgICAgICAgICBnZXRNb2RlbDogbW9kZWxzLnJld2FyZERldGFpbCxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlTW9kZWw6IG1vZGVscy5jb250cmlidXRpb25EZXRhaWwsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogbG9hZFJld2FyZCgpLFxuICAgICAgICAgICAgICAgICAgICBhZGRFbXB0eToge2lkOiAtMSwgbWluaW11bV92YWx1ZTogMTAsIGRlc2NyaXB0aW9uOiAnU2VtIHJlY29tcGVuc2EnfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGUocmV3YXJkcywgbmV3UmV3YXJkSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXdhcmQgPSBfLmZpbmRXaGVyZShyZXdhcmRzLCB7aWQ6IG5ld1Jld2FyZElEfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGFyZ3MuaXRlbS52YWx1ZSA+PSByZXdhcmQubWluaW11bV92YWx1ZSkgPyB1bmRlZmluZWQgOiAnVmFsb3IgbcOtbmltbyBkYSByZWNvbXBlbnNhIMOpIG1haW9yIGRvIHF1ZSBvIHZhbG9yIGRhIGNvbnRyaWJ1acOnw6NvLic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlZnVuZDoge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXk6ICdpZCcsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxUb0FjdGlvbjogJ1JlZW1ib2xzbyBkaXJldG8nLFxuICAgICAgICAgICAgICAgICAgICBpbm5lckxhYmVsOiAnVGVtIGNlcnRlemEgcXVlIGRlc2VqYSByZWVtYm9sc2FyIGVzc2UgYXBvaW8/JyxcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJMYWJlbDogJ1JlZW1ib2xzYXIgQXBvaW8nLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogbW9kZWxzLmNvbnRyaWJ1dGlvbkRldGFpbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiAnc3RhdGUnLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXk6ICdpZCcsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxUb0FjdGlvbjogJ0FwYWdhcicsXG4gICAgICAgICAgICAgICAgICAgIGlubmVyTGFiZWw6ICdUZW0gY2VydGV6YSBxdWUgZGVzZWphIGFwYWdhciBlc3NlIGFwb2lvPycsXG4gICAgICAgICAgICAgICAgICAgIG91dGVyTGFiZWw6ICdBcGFnYXIgQXBvaW8nLFxuICAgICAgICAgICAgICAgICAgICBmb3JjZVZhbHVlOiAnZGVsZXRlZCcsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAnQXBvaW8gcmVtb3ZpZG8gY29tIHN1Y2Vzc28hJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnTyBhcG9pbyBuw6NvIGZvaSByZW1vdmlkbyEnLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogbW9kZWxzLmNvbnRyaWJ1dGlvbkRldGFpbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsOiBsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IGFjdGlvbnMgPSBjdHJsLmFjdGlvbnMsXG4gICAgICAgICAgICBpdGVtID0gYXJncy5pdGVtLFxuICAgICAgICAgICAgcmV3YXJkID0gY3RybC5yZXdhcmQ7XG5cbiAgICAgICAgY29uc3QgYWRkT3B0aW9ucyA9IChidWlsZGVyLCBpZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIF8uZXh0ZW5kKHt9LCBidWlsZGVyLCB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAoYC9hZG1pbi9jb250cmlidXRpb25zLyR7aWR9L2dhdGV3YXlfcmVmdW5kYCksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnI2FkbWluLWNvbnRyaWJ1dGlvbi1kZXRhaWwtYm94JywgW1xuICAgICAgICAgICAgbSgnLmRpdmlkZXIudS1tYXJnaW50b3AtMjAudS1tYXJnaW5ib3R0b20tMjAnKSxcbiAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0zMCcsIFtcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pbklucHV0QWN0aW9uLCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGFjdGlvbnMudHJhbnNmZXIsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoY3RybC5sKCkpID8gaC5sb2FkZXIgOlxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluUmFkaW9BY3Rpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYWN0aW9ucy5yZXdhcmQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IHJld2FyZCxcbiAgICAgICAgICAgICAgICAgICAgZ2V0S2V5VmFsdWU6IGl0ZW0ucHJvamVjdF9pZCxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlS2V5VmFsdWU6IGl0ZW0uY29udHJpYnV0aW9uX2lkXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5FeHRlcm5hbEFjdGlvbiwge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBhZGRPcHRpb25zKGFjdGlvbnMucmVmdW5kLCBpdGVtLmlkKSxcbiAgICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluSW5wdXRBY3Rpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYWN0aW9ucy5yZW1vdmUsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1yb3cuY2FyZC5jYXJkLXRlcmNpYXJ5LnUtcmFkaXVzJywgW1xuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluVHJhbnNhY3Rpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uOiBpdGVtXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5UcmFuc2FjdGlvbkhpc3RvcnksIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uOiBpdGVtXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKGN0cmwubCgpKSA/IGgubG9hZGVyIDpcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pblJld2FyZCwge1xuICAgICAgICAgICAgICAgICAgICByZXdhcmQ6IHJld2FyZCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBpdGVtLmtleVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZG1pbkNvbnRyaWJ1dGlvbkRldGFpbDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5jb25zdCBmaWx0ZXJOdW1iZXJSYW5nZSA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYnLCBbXG4gICAgICAgICAgICBtKCdsYWJlbC5mb250c2l6ZS1zbWFsbGVyW2Zvcj1cIicgKyBhcmdzLmluZGV4ICsgJ1wiXScsIGFyZ3MubGFiZWwpLFxuICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01LnctY29sLXNtYWxsLTUudy1jb2wtdGlueS01JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWlucHV0LnRleHQtZmllbGQucG9zaXRpdmVbaWQ9XCInICsgYXJncy5pbmRleCArICdcIl1bdHlwZT1cInRleHRcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBhcmdzLmZpcnN0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhcmdzLmZpcnN0KClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1zbWFsbC0yLnctY29sLXRpbnktMicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIudS10ZXh0LWNlbnRlci5saW5laGVpZ2h0LWxvb3NlcicsICdlJylcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNS53LWNvbC1zbWFsbC01LnctY29sLXRpbnktNScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkLnBvc2l0aXZlW3R5cGU9XCJ0ZXh0XCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgYXJncy5sYXN0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhcmdzLmxhc3QoKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmaWx0ZXJOdW1iZXJSYW5nZTtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5jb25zdCBmaWx0ZXJEYXRlUmFuZ2UgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC02JywgW1xuICAgICAgICAgICAgbSgnbGFiZWwuZm9udHNpemUtc21hbGxlcltmb3I9XCInICsgYXJncy5pbmRleCArICdcIl0nLCBhcmdzLmxhYmVsKSxcbiAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNS53LWNvbC1zbWFsbC01LnctY29sLXRpbnktNScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkLnBvc2l0aXZlW2lkPVwiJyArIGFyZ3MuaW5kZXggKyAnXCJdW3R5cGU9XCJ0ZXh0XCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgYXJncy5maXJzdCksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXJncy5maXJzdCgpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtc21hbGwtMi53LWNvbC10aW55LTInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLnUtdGV4dC1jZW50ZXIubGluZWhlaWdodC1sb29zZXInLCAnZScpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUudy1jb2wtc21hbGwtNS53LWNvbC10aW55LTUnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZC5wb3NpdGl2ZVt0eXBlPVwidGV4dFwiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGFyZ3MubGFzdCksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXJncy5sYXN0KClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZmlsdGVyRGF0ZVJhbmdlO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBjb250cmlidXRpb25MaXN0Vk0gZnJvbSAnLi4vdm1zL2NvbnRyaWJ1dGlvbi1saXN0LXZtJztcbmltcG9ydCBjb250cmlidXRpb25GaWx0ZXJWTSBmcm9tICcuLi92bXMvY29udHJpYnV0aW9uLWZpbHRlci12bSc7XG5pbXBvcnQgYWRtaW5MaXN0IGZyb20gJy4uL2MvYWRtaW4tbGlzdCc7XG5pbXBvcnQgYWRtaW5GaWx0ZXIgZnJvbSAnLi4vYy9hZG1pbi1maWx0ZXInO1xuaW1wb3J0IGFkbWluQ29udHJpYnV0aW9uSXRlbSBmcm9tICcuLi9jL2FkbWluLWNvbnRyaWJ1dGlvbi1pdGVtJztcbmltcG9ydCBhZG1pbkNvbnRyaWJ1dGlvbkRldGFpbCBmcm9tICcuLi9jL2FkbWluLWNvbnRyaWJ1dGlvbi1kZXRhaWwnO1xuaW1wb3J0IGZpbHRlck1haW4gZnJvbSAnLi4vYy9maWx0ZXItbWFpbic7XG5pbXBvcnQgZmlsdGVyRHJvcGRvd24gZnJvbSAnLi4vYy9maWx0ZXItZHJvcGRvd24nO1xuaW1wb3J0IGZpbHRlck51bWJlclJhbmdlIGZyb20gJy4uL2MvZmlsdGVyLW51bWJlci1yYW5nZSc7XG5pbXBvcnQgZmlsdGVyRGF0ZVJhbmdlIGZyb20gJy4uL2MvZmlsdGVyLWRhdGUtcmFuZ2UnO1xuXG5jb25zdCBhZG1pbkNvbnRyaWJ1dGlvbnMgPSB7XG4gICAgY29udHJvbGxlcigpIHtcbiAgICAgICAgdmFyIGxpc3RWTSA9IGNvbnRyaWJ1dGlvbkxpc3RWTSxcbiAgICAgICAgICAgIGZpbHRlclZNID0gY29udHJpYnV0aW9uRmlsdGVyVk0sXG4gICAgICAgICAgICBlcnJvciA9IG0ucHJvcCgnJyksXG4gICAgICAgICAgICBmaWx0ZXJCdWlsZGVyID0gW3sgLy9mdWxsX3RleHRfaW5kZXhcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlck1haW4sXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICB2bTogZmlsdGVyVk0uZnVsbF90ZXh0X2luZGV4LFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0J1c3F1ZSBwb3IgcHJvamV0bywgZW1haWwsIElkcyBkbyB1c3XDoXJpbyBlIGRvIGFwb2lvLi4uJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHsgLy9zdGF0ZVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogZmlsdGVyRHJvcGRvd24sXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbSBvIGVzdGFkbycsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzdGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIHZtOiBmaWx0ZXJWTS5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1F1YWxxdWVyIHVtJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3BhaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAncGFpZCdcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdyZWZ1c2VkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ3JlZnVzZWQnXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAncGVuZGluZycsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb246ICdwZW5kaW5nJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3BlbmRpbmdfcmVmdW5kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ3BlbmRpbmdfcmVmdW5kJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3JlZnVuZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ3JlZnVuZGVkJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2NoYXJnZWJhY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAnY2hhcmdlYmFjaydcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdkZWxldGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ2RlbGV0ZWQnXG4gICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgeyAvL2dhdGV3YXlcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlckRyb3Bkb3duLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdnYXRld2F5JyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dhdGV3YXknLFxuICAgICAgICAgICAgICAgICAgICB2bTogZmlsdGVyVk0uZ2F0ZXdheSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1F1YWxxdWVyIHVtJ1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ1BhZ2FybWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAnUGFnYXJtZSdcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdNb0lQJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ01vSVAnXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnUGF5UGFsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1BheVBhbCdcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdDcmVkaXRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ0Nyw6lkaXRvcydcbiAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7IC8vdmFsdWVcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlck51bWJlclJhbmdlLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdWYWxvcmVzIGVudHJlJyxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IGZpbHRlclZNLnZhbHVlLmd0ZSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdDogZmlsdGVyVk0udmFsdWUubHRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgeyAvL2NyZWF0ZWRfYXRcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlckRhdGVSYW5nZSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnUGVyw61vZG8gZG8gYXBvaW8nLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdDogZmlsdGVyVk0uY3JlYXRlZF9hdC5ndGUsXG4gICAgICAgICAgICAgICAgICAgIGxhc3Q6IGZpbHRlclZNLmNyZWF0ZWRfYXQubHRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBzdWJtaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UoZmlsdGVyVk0ucGFyYW1ldGVycygpKS50aGVuKG51bGwsIChzZXJ2ZXJFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcihzZXJ2ZXJFcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWx0ZXJWTTogZmlsdGVyVk0sXG4gICAgICAgICAgICBmaWx0ZXJCdWlsZGVyOiBmaWx0ZXJCdWlsZGVyLFxuICAgICAgICAgICAgbGlzdFZNOiB7XG4gICAgICAgICAgICAgICAgbGlzdDogbGlzdFZNLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0Fwb2lvcydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWJtaXQ6IHN1Ym1pdFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICB2aWV3KGN0cmwpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluRmlsdGVyLCB7XG4gICAgICAgICAgICAgICAgZm9ybTogY3RybC5maWx0ZXJWTS5mb3JtRGVzY3JpYmVyLFxuICAgICAgICAgICAgICAgIGZpbHRlckJ1aWxkZXI6IGN0cmwuZmlsdGVyQnVpbGRlcixcbiAgICAgICAgICAgICAgICBzdWJtaXQ6IGN0cmwuc3VibWl0XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluTGlzdCwge1xuICAgICAgICAgICAgICAgIHZtOiBjdHJsLmxpc3RWTSxcbiAgICAgICAgICAgICAgICBsaXN0SXRlbTogYWRtaW5Db250cmlidXRpb25JdGVtLFxuICAgICAgICAgICAgICAgIGxpc3REZXRhaWw6IGFkbWluQ29udHJpYnV0aW9uRGV0YWlsXG4gICAgICAgICAgICB9KVxuICAgICAgICBdO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkbWluQ29udHJpYnV0aW9ucztcbiIsIi8qKlxuICogd2luZG93LmMubGFuZGluZ1NpZ251cCBjb21wb25lbnRcbiAqIEEgdmlzdWFsIGNvbXBvbmVudCB0aGF0IGRpc3BsYXlzIHNpZ251cCBlbWFpbCB0eXBpY2FsbHkgdXNlZCBvbiBsYW5kaW5nIHBhZ2VzLlxuICogSXQgYWNjZXB0cyBhIGN1c3RvbSBmb3JtIGFjdGlvbiB0byBhdHRhY2ggdG8gdGhpcmQtcGFydHkgc2VydmljZXMgbGlrZSBNYWlsY2hpbXBcbiAqXG4gKiBFeGFtcGxlOlxuICogdmlldzogKCkgPT4ge1xuICogICAgICAuLi5cbiAqICAgICAgbS5jb21wb25lbnQoYy5sYW5kaW5nU2lnbnVwLCB7XG4gKiAgICAgICAgICBidWlsZGVyOiB7XG4gKiAgICAgICAgICAgICAgY3VzdG9tQWN0aW9uOiAnaHR0cDovL2Zvcm1lbmRwb2ludC5jb20nXG4gKiAgICAgICAgICB9XG4gKiAgICAgIH0pXG4gKiAgICAgIC4uLlxuICogIH1cbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgbGFuZGluZ1NpZ251cCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgYnVpbGRlciA9IGFyZ3MuYnVpbGRlcixcbiAgICAgICAgICAgIGVtYWlsID0gbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIGVycm9yID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIHN1Ym1pdCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaC52YWxpZGF0ZUVtYWlsKGVtYWlsKCkpKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgc3VibWl0OiBzdWJtaXQsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBsZXQgZXJyb3JDbGFzc2VzID0gKCFjdHJsLmVycm9yKSA/ICcucG9zaXRpdmUuZXJyb3InIDogJyc7XG4gICAgICAgIHJldHVybiBtKCdmb3JtLnctZm9ybVtpZD1cImVtYWlsLWZvcm1cIl1bbWV0aG9kPVwicG9zdFwiXVthY3Rpb249XCInICsgYXJncy5idWlsZGVyLmN1c3RvbUFjdGlvbiArICdcIl0nLHtcbiAgICAgICAgICAgIG9uc3VibWl0OiBjdHJsLnN1Ym1pdFxuICAgICAgICB9LFtcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01JywgW1xuICAgICAgICAgICAgICAgIG0oYGlucHV0JHtlcnJvckNsYXNzZXN9LnctaW5wdXQudGV4dC1maWVsZC5tZWRpdW1bbmFtZT1cIkVNQUlMXCJdW3BsYWNlaG9sZGVyPVwiRGlnaXRlIHNldSBlbWFpbFwiXVt0eXBlPVwidGV4dFwiXWAsIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBoLlJEVHJhY2tlcignbGFuZGluZy1mbGV4JyksXG4gICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuZW1haWwpLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5lbWFpbCgpXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKGN0cmwuZXJyb3IoKSA/IG0oJ3NwYW4uZm9udHNpemUtc21hbGxlci50ZXh0LWVycm9yJywgJ0UtbWFpbCBpbnbDoWxpZG8nKSA6ICcnKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMycsIFtcbiAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWJ1dHRvbi5idG4uYnRuLWxhcmdlW3R5cGU9XCJzdWJtaXRcIl1bdmFsdWU9XCJDYWRhc3RyYXJcIl0nKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbGFuZGluZ1NpZ251cDtcbiIsImltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IGVycm9yID0gbS5wcm9wKCcnKSxcbiAgICByZXdhcmRzID0gbS5wcm9wKFtdKSxcbiAgICBub1Jld2FyZCA9IHtcbiAgICAgICAgaWQ6IC0xLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ09icmlnYWRvLiBFdSBzw7MgcXVlcm8gYWp1ZGFyIG8gcHJvamV0by4nLFxuICAgICAgICBtaW5pbXVtX3ZhbHVlOiAxMFxuICAgIH0sXG4gICAgY29udHJpYnV0aW9uVmFsdWUgPSBtLnByb3AoYCR7bm9SZXdhcmQubWluaW11bV92YWx1ZX0sMDBgKSxcbiAgICBzZWxlY3RlZFJld2FyZCA9IG0ucHJvcChub1Jld2FyZCksXG4gICAgdm0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgcHJvamVjdF9pZDogJ2VxJ1xuICAgIH0pO1xuXG5jb25zdCByZXdhcmRzTG9hZGVyID0gKHByb2plY3RfaWQpID0+IHtcbiAgICB2bS5wcm9qZWN0X2lkKHByb2plY3RfaWQpO1xuXG4gICAgcmV0dXJuIHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obW9kZWxzLnJld2FyZERldGFpbC5nZXRQYWdlT3B0aW9ucyh2bS5wYXJhbWV0ZXJzKCkpKTtcbn07XG5cbmNvbnN0IGZldGNoUmV3YXJkcyA9IChwcm9qZWN0X2lkKSA9PiB7XG4gICAgcmV0dXJuIHJld2FyZHNMb2FkZXIocHJvamVjdF9pZCkubG9hZCgpLnRoZW4ocmV3YXJkcyk7XG59O1xuXG5jb25zdCBnZXRTZWxlY3RlZFJld2FyZCA9ICgpID0+IHtcbiAgICBjb25zdCByb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcGxpY2F0aW9uJyksXG4gICAgICAgICAgZGF0YSA9IHJvb3QgJiYgcm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udHJpYnV0aW9uJyk7XG5cbiAgICBpZiAoZGF0YSkge1xuICAgICAgICBjb25zdCBjb250cmlidXRpb24gPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICBjb25zdCByZXdhcmQgPSBzZWxlY3RlZFJld2FyZChjb250cmlidXRpb24ucmV3YXJkKTtcblxuICAgICAgICBtLnJlZHJhdyh0cnVlKTtcblxuICAgICAgICByZXR1cm4gc2VsZWN0ZWRSZXdhcmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cbmNvbnN0IHNlbGVjdFJld2FyZCA9IChyZXdhcmQpID0+ICgpID0+IHtcbiAgICBpZiAocmV3YXJkVk0uc2VsZWN0ZWRSZXdhcmQoKSAhPT0gcmV3YXJkKXtcbiAgICAgICAgcmV3YXJkVk0uc2VsZWN0ZWRSZXdhcmQocmV3YXJkKTtcblxuICAgICAgICBjb250cmlidXRpb25WYWx1ZShoLmFwcGx5TW9uZXRhcnlNYXNrKHJld2FyZC5taW5pbXVtX3ZhbHVlICsgJywwMCcpKTtcbiAgICB9XG59O1xuXG5jb25zdCBhcHBseU1hc2sgPSBfLmNvbXBvc2UoY29udHJpYnV0aW9uVmFsdWUsIGguYXBwbHlNb25ldGFyeU1hc2spO1xuXG5jb25zdCByZXdhcmRWTSA9IHtcbiAgICBlcnJvcjogZXJyb3IsXG4gICAgcmV3YXJkczogcmV3YXJkcyxcbiAgICBhcHBseU1hc2s6IGFwcGx5TWFzayxcbiAgICBub1Jld2FyZDogbm9SZXdhcmQsXG4gICAgZmV0Y2hSZXdhcmRzOiBmZXRjaFJld2FyZHMsXG4gICAgc2VsZWN0UmV3YXJkOiBzZWxlY3RSZXdhcmQsXG4gICAgZ2V0U2VsZWN0ZWRSZXdhcmQ6IGdldFNlbGVjdGVkUmV3YXJkLFxuICAgIHNlbGVjdGVkUmV3YXJkOiBzZWxlY3RlZFJld2FyZCxcbiAgICBjb250cmlidXRpb25WYWx1ZTogY29udHJpYnV0aW9uVmFsdWUsXG4gICAgcmV3YXJkc0xvYWRlcjogcmV3YXJkc0xvYWRlcixcbiAgICBnZXRWYWx1ZTogY29udHJpYnV0aW9uVmFsdWUsXG4gICAgc2V0VmFsdWU6IGNvbnRyaWJ1dGlvblZhbHVlXG59O1xuXG5leHBvcnQgZGVmYXVsdCByZXdhcmRWTTtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5cbmNvbnN0IHByb2plY3RGaWx0ZXJzVk0gPSAoKSA9PiB7XG4gICAgY29uc3QgZmlsdGVyc1ZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTSxcbiAgICAgICAgYWxsID0gZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgIHN0YXRlOiAnZXEnXG4gICAgICAgIH0pLnN0YXRlKCdvbmxpbmUnKSxcblxuICAgICAgICBuZWFyTWUgPSBmaWx0ZXJzVk0oe1xuICAgICAgICAgICAgbmVhcl9tZTogJ2VxJyxcbiAgICAgICAgICAgIG9wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6ICdlcSdcbiAgICAgICAgfSkub3Blbl9mb3JfY29udHJpYnV0aW9ucygndHJ1ZScpLm5lYXJfbWUodHJ1ZSksXG5cbiAgICAgICAgZXhwaXJpbmcgPSBmaWx0ZXJzVk0oe1xuICAgICAgICAgICAgZXhwaXJlc19hdDogJ2x0ZScsXG4gICAgICAgICAgICBvcGVuX2Zvcl9jb250cmlidXRpb25zOiAnZXEnXG4gICAgICAgIH0pLm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMoJ3RydWUnKS5leHBpcmVzX2F0KG1vbWVudCgpLmFkZCgxNCwgJ2RheXMnKS5mb3JtYXQoJ1lZWVktTU0tREQnKSksXG5cbiAgICAgICAgcmVjZW50ID0gZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgIG9ubGluZV9kYXRlOiAnZ3RlJyxcbiAgICAgICAgICAgIG9wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6ICdlcSdcbiAgICAgICAgfSkub3Blbl9mb3JfY29udHJpYnV0aW9ucygndHJ1ZScpLm9ubGluZV9kYXRlKG1vbWVudCgpLnN1YnRyYWN0KDUsICdkYXlzJykuZm9ybWF0KCdZWVlZLU1NLUREJykpLFxuXG4gICAgICAgIHNjb3JlID0gZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgIHNjb3JlOiAnZ3RlJyxcbiAgICAgICAgICAgIG9wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6ICdlcSdcbiAgICAgICAgfSkuc2NvcmUoJzEnKS5vcGVuX2Zvcl9jb250cmlidXRpb25zKCd0cnVlJyksXG5cbiAgICAgICAgb25saW5lID0gZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgIG9wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6ICdlcSdcbiAgICAgICAgfSkub3Blbl9mb3JfY29udHJpYnV0aW9ucygndHJ1ZScpLFxuXG4gICAgICAgIGNvbnRyaWJ1dGVkX2J5X2ZyaWVuZHMgPSBmaWx0ZXJzVk0oe1xuICAgICAgICAgICAgb3Blbl9mb3JfY29udHJpYnV0aW9uczogJ2VxJyxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGVkX2J5X2ZyaWVuZHM6ICdlcSdcbiAgICAgICAgfSkub3Blbl9mb3JfY29udHJpYnV0aW9ucygndHJ1ZScpLmNvbnRyaWJ1dGVkX2J5X2ZyaWVuZHModHJ1ZSksXG5cbiAgICAgICAgc3VjY2Vzc2Z1bCA9IGZpbHRlcnNWTSh7XG4gICAgICAgICAgICBzdGF0ZTogJ2VxJ1xuICAgICAgICB9KS5zdGF0ZSgnc3VjY2Vzc2Z1bCcpLFxuXG4gICAgICAgIGZpbmlzaGVkID0gZmlsdGVyc1ZNKHt9KSxcblxuICAgICAgICBmaWx0ZXJzID0ge1xuICAgICAgICAgICAgYWxsOiB7XG4gICAgICAgICAgICAgIHRpdGxlOiAnVG9kYXMgYXMgQ2F0ZWdvcmlhcycsXG4gICAgICAgICAgICAgIGZpbHRlcjogYWxsLFxuICAgICAgICAgICAgICBuaWNlbmFtZTogJ05vIGFyJyxcbiAgICAgICAgICAgICAgaXNDb250ZXh0dWFsOiBmYWxzZSxcbiAgICAgICAgICAgICAga2V5TmFtZTogJ2FsbCdcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NvcmU6IHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdUb2RhcyBhcyBDYXRlZ29yaWFzJyxcbiAgICAgICAgICAgICAgZmlsdGVyOiBzY29yZSxcbiAgICAgICAgICAgICAgbmljZW5hbWU6ICdQb3B1bGFyZXMnLFxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxuICAgICAgICAgICAgICBrZXlOYW1lOiAnc2NvcmUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGVkX2J5X2ZyaWVuZHM6IHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdBbWlnb3MnLFxuICAgICAgICAgICAgICBmaWx0ZXI6IGNvbnRyaWJ1dGVkX2J5X2ZyaWVuZHMsXG4gICAgICAgICAgICAgIG5pY2VuYW1lOiAnQW1pZ29zJyxcbiAgICAgICAgICAgICAgaXNDb250ZXh0dWFsOiBmYWxzZSxcbiAgICAgICAgICAgICAga2V5TmFtZTogJ2NvbnRyaWJ1dGVkX2J5X2ZyaWVuZHMnXG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIG9ubGluZToge1xuICAgICAgICAgICAgICB0aXRsZTogJ05vIGFyJyxcbiAgICAgICAgICAgICAgZmlsdGVyOiBvbmxpbmUsXG4gICAgICAgICAgICAgIGlzQ29udGV4dHVhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdvbmxpbmUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4cGlyaW5nOiB7XG4gICAgICAgICAgICAgIHRpdGxlOiAnUmV0YSBmaW5hbCcsXG4gICAgICAgICAgICAgIGZpbHRlcjogZXhwaXJpbmcsXG4gICAgICAgICAgICAgIGlzQ29udGV4dHVhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdleHBpcmluZydcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2Vzc2Z1bDoge1xuICAgICAgICAgICAgICB0aXRsZTogJ1RvZGFzIGFzIENhdGVnb3JpYXMnLFxuICAgICAgICAgICAgICBmaWx0ZXI6IHN1Y2Nlc3NmdWwsXG4gICAgICAgICAgICAgIG5pY2VuYW1lOiAnRmluYW5jaWFkb3MnLFxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxuICAgICAgICAgICAgICBrZXlOYW1lOiAnc3VjY2Vzc2Z1bCdcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgZmluaXNoZWQ6IHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdUb2RhcyBhcyBDYXRlZ29yaWFzJyxcbiAgICAgICAgICAgICAgZmlsdGVyOiBmaW5pc2hlZCxcbiAgICAgICAgICAgICAgbmljZW5hbWU6ICdGaW5hbGl6YWRvcycsXG4gICAgICAgICAgICAgIGlzQ29udGV4dHVhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdmaW5pc2hlZCdcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVjZW50OiB7XG4gICAgICAgICAgICAgIHRpdGxlOiAnUmVjZW50ZXMnLFxuICAgICAgICAgICAgICBmaWx0ZXI6IHJlY2VudCxcbiAgICAgICAgICAgICAgaXNDb250ZXh0dWFsOiBmYWxzZSxcbiAgICAgICAgICAgICAga2V5TmFtZTogJ3JlY2VudCdcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgbmVhcl9tZToge1xuICAgICAgICAgICAgICB0aXRsZTogJ1Byw7N4aW1vcyBhIG1pbScsXG4gICAgICAgICAgICAgIGZpbHRlcjogbmVhck1lLFxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxuICAgICAgICAgICAgICBrZXlOYW1lOiAnbmVhcl9tZSdcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICBjb25zdCBzZXRDb250ZXh0RmlsdGVycyA9IChjb250ZXh0RmlsdGVycykgPT4ge1xuICAgICAgICBfLm1hcChjb250ZXh0RmlsdGVycywgKGZpbHRlcktleSkgPT4gZmlsdGVyc1tmaWx0ZXJLZXldLmlzQ29udGV4dHVhbCA9IHRydWUpO1xuXG4gICAgICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIH0sXG4gICAgICAgICAgICBnZXRDb250ZXh0RmlsdGVycyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5maWx0ZXIoZmlsdGVycywgKGZpbHRlcikgPT4gZmlsdGVyLmlzQ29udGV4dHVhbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlQ29udGV4dEZpbHRlciA9IChmaWx0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJzW2ZpbHRlci5rZXlOYW1lXS5pc0NvbnRleHR1YWwgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJzO1xuICAgICAgICAgICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWx0ZXJzOiBmaWx0ZXJzLFxuICAgICAgICAgICAgc2V0Q29udGV4dEZpbHRlcnM6IHNldENvbnRleHRGaWx0ZXJzLFxuICAgICAgICAgICAgZ2V0Q29udGV4dEZpbHRlcnM6IGdldENvbnRleHRGaWx0ZXJzLFxuICAgICAgICAgICAgcmVtb3ZlQ29udGV4dEZpbHRlcjogcmVtb3ZlQ29udGV4dEZpbHRlclxuICAgICAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdEZpbHRlcnNWTTtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHByb2plY3RGaWx0ZXJzIGZyb20gJy4vcHJvamVjdC1maWx0ZXJzLXZtJztcblxuY29uc3QgaWRWTSA9IGguaWRWTSxcbiAgICAgIHVzZXJEZXRhaWxzID0gbS5wcm9wKFtdKSxcbiAgICAgIGN1cnJlbnRVc2VyID0gbS5wcm9wKCksXG4gICAgICBjcmVhdGVkVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtwcm9qZWN0X3VzZXJfaWQ6ICdlcSd9KTtcblxuY29uc3QgZ2V0VXNlckNyZWF0ZWRQcm9qZWN0cyA9ICh1c2VyX2lkLCBwYWdlU2l6ZSA9IDMpID0+IHtcbiAgICBjcmVhdGVkVk0ucHJvamVjdF91c2VyX2lkKHVzZXJfaWQpLm9yZGVyKHtwcm9qZWN0X2lkOiAnZGVzYyd9KTtcblxuICAgIG1vZGVscy5wcm9qZWN0LnBhZ2VTaXplKHBhZ2VTaXplKTtcblxuICAgIGNvbnN0IGxVc2VyQ3JlYXRlZCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obW9kZWxzLnByb2plY3QuZ2V0UGFnZU9wdGlvbnMoY3JlYXRlZFZNLnBhcmFtZXRlcnMoKSkpO1xuXG4gICAgcmV0dXJuIGxVc2VyQ3JlYXRlZC5sb2FkKCk7XG59O1xuXG5jb25zdCBnZXRQdWJsaWNVc2VyQ29udHJpYnV0ZWRQcm9qZWN0cyA9ICh1c2VyX2lkLCBwYWdlU2l6ZSA9IDMpID0+IHtcbiAgICBjb25zdCBjb250ZXh0Vk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgdXNlcl9pZDogJ2VxJ1xuICAgIH0pO1xuXG4gICAgY29udGV4dFZNLnVzZXJfaWQodXNlcl9pZCk7XG5cbiAgICBtb2RlbHMuY29udHJpYnV0b3IucGFnZVNpemUocGFnZVNpemUpO1xuXG4gICAgY29uc3QgbFVzZXJDb250cmlidXRlZCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4oXG4gICAgICAgIG1vZGVscy5jb250cmlidXRvci5nZXRQYWdlT3B0aW9ucyhjb250ZXh0Vk0ucGFyYW1ldGVycygpKSk7XG5cbiAgICByZXR1cm4gbFVzZXJDb250cmlidXRlZC5sb2FkKCk7XG59O1xuXG5jb25zdCBnZXRVc2VyQ29udHJpYnV0ZWRQcm9qZWN0cyA9ICh1c2VyX2lkLCBwYWdlU2l6ZSA9IDMpID0+IHtcbiAgICBjb25zdCBjb250ZXh0Vk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgdXNlcl9pZDogJ2VxJyxcbiAgICAgICAgc3RhdGU6ICdpbidcbiAgICB9KTtcblxuICAgIGNvbnRleHRWTS51c2VyX2lkKHVzZXJfaWQpLm9yZGVyKHtcbiAgICAgICAgY3JlYXRlZF9hdDogJ2Rlc2MnXG4gICAgfSkuc3RhdGUoWydyZWZ1bmRlZCcsICdwZW5kaW5nX3JlZnVuZCcsICdwYWlkJ10pO1xuXG4gICAgbW9kZWxzLnVzZXJDb250cmlidXRpb24ucGFnZVNpemUocGFnZVNpemUpO1xuXG4gICAgY29uc3QgbFVzZXJDb250cmlidXRlZCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4oXG4gICAgICAgIG1vZGVscy51c2VyQ29udHJpYnV0aW9uLmdldFBhZ2VPcHRpb25zKGNvbnRleHRWTS5wYXJhbWV0ZXJzKCkpKTtcblxuICAgIHJldHVybiBsVXNlckNvbnRyaWJ1dGVkLmxvYWQoKTtcbn07XG5cbmNvbnN0IGZldGNoVXNlciA9ICh1c2VyX2lkLCBoYW5kbGVQcm9taXNlID0gdHJ1ZSwgY3VzdG9tUHJvcCA9IGN1cnJlbnRVc2VyKSA9PiB7XG4gICAgaWRWTS5pZCh1c2VyX2lkKTtcblxuICAgIGNvbnN0IGxVc2VyID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihtb2RlbHMudXNlckRldGFpbC5nZXRSb3dPcHRpb25zKGlkVk0ucGFyYW1ldGVycygpKSk7XG5cbiAgICByZXR1cm4gIWhhbmRsZVByb21pc2UgPyBsVXNlci5sb2FkKCkgOiBsVXNlci5sb2FkKCkudGhlbihfLmNvbXBvc2UoY3VzdG9tUHJvcCwgXy5maXJzdCkpO1xufTtcblxuXG5jb25zdCBkaXNwbGF5SW1hZ2UgPSAodXNlcikgPT4ge1xuICByZXR1cm4gdXNlci5wcm9maWxlX2ltZ190aHVtYm5haWwgfHwgXCJodHRwczovL2NhdGFyc2UubWUvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL3VzZXIuanBnXCI7XG59O1xuXG5jb25zdCBkaXNwbGF5Q292ZXIgPSAodXNlcikgPT4gdXNlci5wcm9maWxlX2NvdmVyX2ltYWdlIHx8IGRpc3BsYXlJbWFnZSh1c2VyKTtcblxuY29uc3QgZ2V0VXNlclJlY29tbWVuZGVkUHJvamVjdHMgPSAoY29udHJpYnV0aW9uKSA9PiB7XG4gICAgY29uc3Qgc2FtcGxlMyA9IF8ucGFydGlhbChfLnNhbXBsZSwgXywgMyksXG4gICAgICAgIGxvYWRlcnMgPSBtLnByb3AoW10pLFxuICAgICAgICBjb2xsZWN0aW9uID0gbS5wcm9wKFtdKSxcbiAgICAgICAge3VzZXJfaWR9ID0gaC5nZXRVc2VyKCk7XG5cbiAgICBjb25zdCBsb2FkZXIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBfLnJlZHVjZShsb2FkZXJzKCksIChtZW1vLCBjdXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBfbWVtbyA9IF8uaXNGdW5jdGlvbihtZW1vKSA/IG1lbW8oKSA6IG1lbW8sXG4gICAgICAgICAgICAgICAgX2N1cnIgPSBfLmlzRnVuY3Rpb24oY3VycikgPyBjdXJyKCkgOiBjdXJyO1xuXG4gICAgICAgICAgICByZXR1cm4gX21lbW8gJiYgX2N1cnI7XG4gICAgICAgIH0sIHRydWUpO1xuICAgIH07XG5cbiAgICBjb25zdCBsb2FkUG9wdWxhciA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZmlsdGVycyA9IHByb2plY3RGaWx0ZXJzKCkuZmlsdGVycztcbiAgICAgICAgY29uc3QgcG9wdWxhciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4oXG4gICAgICAgICAgICBtb2RlbHMucHJvamVjdC5nZXRQYWdlT3B0aW9ucyhcbiAgICAgICAgICAgICAgICBfLmV4dGVuZCh7fSwge29yZGVyOiAnc2NvcmUuZGVzYyd9LCBmaWx0ZXJzWydzY29yZSddLmZpbHRlci5wYXJhbWV0ZXJzKCkpXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgbG9hZGVycygpLnB1c2gocG9wdWxhcik7XG5cbiAgICAgICAgcG9wdWxhci5sb2FkKCkudGhlbihfLmNvbXBvc2UoY29sbGVjdGlvbiwgc2FtcGxlMykpO1xuICAgIH07XG5cbiAgICBjb25zdCBwdXNoUHJvamVjdCA9ICh7cHJvamVjdF9pZH0pID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4oXG4gICAgICAgICAgICBtb2RlbHMucHJvamVjdC5nZXRQYWdlT3B0aW9ucyhcbiAgICAgICAgICAgICAgICBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtwcm9qZWN0X2lkOiAnZXEnfSlcbiAgICAgICAgICAgICAgICAgICAgLnByb2plY3RfaWQocHJvamVjdF9pZClcbiAgICAgICAgICAgICAgICAgICAgLnBhcmFtZXRlcnMoKVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIGxvYWRlcnMoKS5wdXNoKHByb2plY3QpXG4gICAgICAgIHByb2plY3QubG9hZCgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24oKS5wdXNoKF8uZmlyc3QoZGF0YSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgcHJvamVjdHMgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKFxuICAgICAgICBtb2RlbHMucmVjb21tZW5kZWRQcm9qZWN0cy5nZXRQYWdlT3B0aW9ucyhcbiAgICAgICAgICAgIHBvc3RncmVzdC5maWx0ZXJzVk0oe3VzZXJfaWQ6ICdlcSd9KVxuICAgICAgICAgICAgICAgIC51c2VyX2lkKHVzZXJfaWQpXG4gICAgICAgICAgICAgICAgLnBhcmFtZXRlcnMoKVxuICAgICAgICApXG4gICAgKTtcblxuXG5cbiAgICBwcm9qZWN0cy5sb2FkKCkudGhlbihyZWNvbW1lbmRlZCA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdSZWNvbW1lbmRlZCByZXNwb25zZSBpczogJywgcmVjb21tZW5kZWQpXG4gICAgICAgIGlmKHJlY29tbWVuZGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIF8ubWFwKHJlY29tbWVuZGVkLCBwdXNoUHJvamVjdClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvYWRQb3B1bGFyKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGxvYWRlcjogbG9hZGVyLFxuICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uXG4gICAgfTtcbn07XG5cbmNvbnN0IHVzZXJWTSA9IHtcbiAgICBnZXRVc2VyQ3JlYXRlZFByb2plY3RzOiBnZXRVc2VyQ3JlYXRlZFByb2plY3RzLFxuICAgIGdldFVzZXJSZWNvbW1lbmRlZFByb2plY3RzOiBnZXRVc2VyUmVjb21tZW5kZWRQcm9qZWN0cyxcbiAgICBnZXRVc2VyQ29udHJpYnV0ZWRQcm9qZWN0czogZ2V0VXNlckNvbnRyaWJ1dGVkUHJvamVjdHMsXG4gICAgZ2V0UHVibGljVXNlckNvbnRyaWJ1dGVkUHJvamVjdHM6IGdldFB1YmxpY1VzZXJDb250cmlidXRlZFByb2plY3RzLFxuICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlcixcbiAgICBkaXNwbGF5SW1hZ2U6IGRpc3BsYXlJbWFnZSxcbiAgICBkaXNwbGF5Q292ZXI6IGRpc3BsYXlDb3ZlcixcbiAgICBmZXRjaFVzZXI6IGZldGNoVXNlclxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlclZNO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgcmV3YXJkVk0gZnJvbSAnLi9yZXdhcmQtdm0nO1xuaW1wb3J0IHVzZXJWTSBmcm9tICcuL3VzZXItdm0nO1xuXG5jb25zdCBpZFZNID0gaC5pZFZNLFxuICAgICAgY3VycmVudFByb2plY3QgPSBtLnByb3AoKSxcbiAgICAgIHVzZXJEZXRhaWxzID0gbS5wcm9wKCksXG4gICAgICBwcm9qZWN0Q29udHJpYnV0aW9ucyA9IG0ucHJvcChbXSksXG4gICAgICB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3Byb2plY3RfaWQ6ICdlcSd9KTtcblxuY29uc3Qgc2V0UHJvamVjdCA9IChwcm9qZWN0X3VzZXJfaWQpID0+IChkYXRhKSA9PiB7XG4gICAgY3VycmVudFByb2plY3QoXy5maXJzdChkYXRhKSk7XG5cbiAgICBpZiAoIXByb2plY3RfdXNlcl9pZCkge1xuICAgICAgICB1c2VyVk0uZmV0Y2hVc2VyKGN1cnJlbnRQcm9qZWN0KCkudXNlcl9pZCwgdHJ1ZSwgdXNlckRldGFpbHMpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50UHJvamVjdDtcbn07XG5cbmNvbnN0IGluaXQgPSAocHJvamVjdF9pZCwgcHJvamVjdF91c2VyX2lkKSA9PiB7XG4gICAgdm0ucHJvamVjdF9pZChwcm9qZWN0X2lkKTtcblxuICAgIGNvbnN0IGxQcm9qZWN0ID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihtb2RlbHMucHJvamVjdERldGFpbC5nZXRSb3dPcHRpb25zKHZtLnBhcmFtZXRlcnMoKSkpO1xuXG4gICAgZmV0Y2hQYXJhbGxlbERhdGEocHJvamVjdF9pZCwgcHJvamVjdF91c2VyX2lkKTtcblxuICAgIHJldHVybiBsUHJvamVjdC5sb2FkKCkudGhlbihzZXRQcm9qZWN0KHByb2plY3RfdXNlcl9pZCkpO1xufTtcblxuY29uc3QgcmVzZXREYXRhID0gKCkgPT4ge1xuICAgIHVzZXJEZXRhaWxzKHt9KTtcbiAgICByZXdhcmRWTS5yZXdhcmRzKFtdKTtcbn07XG5cbmNvbnN0IGZldGNoUGFyYWxsZWxEYXRhID0gKHByb2plY3RfaWQsIHByb2plY3RfdXNlcl9pZCkgPT4ge1xuICAgIGlmIChwcm9qZWN0X3VzZXJfaWQpIHtcbiAgICAgICAgdXNlclZNLmZldGNoVXNlcihwcm9qZWN0X3VzZXJfaWQsIHRydWUsIHVzZXJEZXRhaWxzKTtcbiAgICB9XG5cbiAgICByZXdhcmRWTS5mZXRjaFJld2FyZHMocHJvamVjdF9pZCk7XG59O1xuXG5jb25zdCBnZXRDdXJyZW50UHJvamVjdCA9ICgpID0+IHtcbiAgICBjb25zdCByb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcGxpY2F0aW9uJyksXG4gICAgICAgICAgZGF0YSA9IHJvb3QgJiYgcm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyYW1ldGVycycpO1xuXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgICAgY29uc3Qge3Byb2plY3RfaWQsIHByb2plY3RfdXNlcl9pZH0gPSBjdXJyZW50UHJvamVjdChKU09OLnBhcnNlKGRhdGEpKTtcblxuICAgICAgICBtLnJlZHJhdyh0cnVlKTtcblxuICAgICAgICBpbml0KHByb2plY3RfaWQsIHByb2plY3RfdXNlcl9pZCk7XG5cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9qZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cbmNvbnN0IHJvdXRlVG9Qcm9qZWN0ID0gKHByb2plY3QsIHJlZikgPT4gKCkgPT4ge1xuICAgIGN1cnJlbnRQcm9qZWN0KHByb2plY3QpO1xuXG4gICAgcmVzZXREYXRhKCk7XG5cbiAgICBtLnJvdXRlKGguYnVpbGRMaW5rKHByb2plY3QucGVybWFsaW5rLCByZWYpLCB7cHJvamVjdF9pZDogcHJvamVjdC5wcm9qZWN0X2lkLCBwcm9qZWN0X3VzZXJfaWQ6IHByb2plY3QucHJvamVjdF91c2VyX2lkfSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5jb25zdCBzZXRQcm9qZWN0UGFnZVRpdGxlID0gKCkgPT4ge1xuICAgIGlmIChjdXJyZW50UHJvamVjdCgpKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gY3VycmVudFByb2plY3QoKS5wcm9qZWN0X25hbWUgfHwgY3VycmVudFByb2plY3QoKS5uYW1lO1xuXG4gICAgICAgIHJldHVybiBwcm9qZWN0TmFtZSA/IGguc2V0UGFnZVRpdGxlKHByb2plY3ROYW1lKSA6IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgICB9XG59O1xuXG5jb25zdCBwcm9qZWN0Vk0gPSB7XG4gICAgdXNlckRldGFpbHM6IHVzZXJEZXRhaWxzLFxuICAgIGdldEN1cnJlbnRQcm9qZWN0OiBnZXRDdXJyZW50UHJvamVjdCxcbiAgICBwcm9qZWN0Q29udHJpYnV0aW9uczogcHJvamVjdENvbnRyaWJ1dGlvbnMsXG4gICAgY3VycmVudFByb2plY3Q6IGN1cnJlbnRQcm9qZWN0LFxuICAgIHJld2FyZERldGFpbHM6IHJld2FyZFZNLnJld2FyZHMsXG4gICAgcm91dGVUb1Byb2plY3Q6IHJvdXRlVG9Qcm9qZWN0LFxuICAgIHNldFByb2plY3RQYWdlVGl0bGU6IHNldFByb2plY3RQYWdlVGl0bGUsXG4gICAgaW5pdDogaW5pdFxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFZNO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5cbmNvbnN0IHByb2plY3RGcmllbmRzID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0LFxuICAgICAgICAgICAgICBmcmllbmRzU2FtcGxlID0gbS5wcm9wKFtdKSxcbiAgICAgICAgICAgICAgbGlzdFZNID0gcG9zdGdyZXN0LnBhZ2luYXRpb25WTShtb2RlbHMuY29udHJpYnV0b3IsICd1c2VyX2lkLmRlc2MnLCB7XG4gICAgICAgICAgICAgICAgICAnUHJlZmVyJzogICdjb3VudD1leGFjdCdcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIGZpbHRlclZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiAnZXEnLFxuICAgICAgICAgICAgICAgICAgaXNfZm9sbG93OiAnZXEnXG4gICAgICAgICAgICAgIH0pLnByb2plY3RfaWQocHJvamVjdC5wcm9qZWN0X2lkKS5pc19mb2xsb3codHJ1ZSk7XG5cbiAgICAgICAgaWYgKCFsaXN0Vk0uY29sbGVjdGlvbigpLmxlbmd0aCkge1xuICAgICAgICAgICAgbGlzdFZNLmZpcnN0UGFnZShmaWx0ZXJWTS5wYXJhbWV0ZXJzKCkpLnRoZW4oKCk9PntcbiAgICAgICAgICAgICAgICBmcmllbmRzU2FtcGxlKF8uc2FtcGxlKGxpc3RWTS5jb2xsZWN0aW9uKCksIDIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgbGlzdFZNOiBsaXN0Vk0sXG4gICAgICAgICAgICBmcmllbmRzU2FtcGxlOiBmcmllbmRzU2FtcGxlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGN0cmwucHJvamVjdCxcbiAgICAgICAgICAgICAgZnJpZW5kc0NvdW50ID0gY3RybC5saXN0Vk0uY29sbGVjdGlvbigpLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIG0oJy5mcmllbmQtYmFja2VkLWNhcmQnLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgbSgnLmZyaWVuZC1mYWNlcGlsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLmZyaWVuZHNTYW1wbGUoKSwgKHVzZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9maWxlX2ltZyA9IF8uaXNFbXB0eSh1c2VyLmRhdGEucHJvZmlsZV9pbWdfdGh1bWJuYWlsKSA/ICcvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL3VzZXIuanBnJyA6IHVzZXIuZGF0YS5wcm9maWxlX2ltZ190aHVtYm5haWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oYGltZy51c2VyLWF2YXRhcltzcmM9JyR7cHJvZmlsZV9pbWd9J11gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLXNtYWxsZXN0LmZyaWVuZC1uYW1lcGlsZS5saW5laGVpZ2h0LXRpZ2h0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGN0cmwuZnJpZW5kc1NhbXBsZSgpLCAodXNlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXIuZGF0YS5uYW1lLnNwbGl0KCcgJylbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oZnJpZW5kc0NvdW50ID4gMiA/ICcsICcgOiAnIGUgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGZyaWVuZHNDb3VudCA+IDIgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICcgZSAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBtYWlzICR7ZnJpZW5kc0NvdW50IC0gY3RybC5mcmllbmRzU2FtcGxlKCkubGVuZ3RofWBcbiAgICAgICAgICAgICAgICAgICAgICAgICldIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGZyaWVuZHNDb3VudCA+IDEgP1xuICAgICAgICAgICAgICAgICAgICAgICAgJyBhcG9pYXJhbScgOiAnIGFwb2lvdScpXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0RnJpZW5kcztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHByb2plY3RWTSBmcm9tICcuLi92bXMvcHJvamVjdC12bSc7XG5pbXBvcnQgcHJvamVjdEZyaWVuZHMgZnJvbSAnLi9wcm9qZWN0LWZyaWVuZHMnO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5jYXJkJyk7XG5jb25zdCBwcm9qZWN0Q2FyZCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCxcbiAgICAgICAgICAgIHByb2dyZXNzID0gcHJvamVjdC5wcm9ncmVzcy50b0ZpeGVkKDIpLFxuICAgICAgICAgICAgcmVtYWluaW5nVGV4dE9iaiA9IGgudHJhbnNsYXRlZFRpbWUocHJvamVjdC5yZW1haW5pbmdfdGltZSksXG4gICAgICAgICAgICBlbGFwc2VkVGV4dE9iaiA9IGgudHJhbnNsYXRlZFRpbWUocHJvamVjdC5lbGFwc2VkX3RpbWUpLFxuICAgICAgICAgICAgdHlwZSA9IGFyZ3MudHlwZSB8fCAnc21hbGwnO1xuXG4gICAgICAgIGNvbnN0IGNzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNzc0NsYXNzZXMgPSB7XG4gICAgICAgICAgICAgICAgJ3NtYWxsJzoge1xuICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXI6ICcudy1jb2wudy1jb2wtNCcsXG4gICAgICAgICAgICAgICAgICAgICAgaW5uZXJXcmFwcGVyOiAnLmNhcmQtcHJvamVjdC5jYXJkLnUtcmFkaXVzJyxcbiAgICAgICAgICAgICAgICAgICAgICB0aHVtYjogJy5jYXJkLXByb2plY3QtdGh1bWInLFxuICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uV3JhcHBlcjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICcuY2FyZC1wcm9qZWN0LWRlc2NyaXB0aW9uLmFsdCcsXG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICcuZm9udHdlaWdodC1zZW1pYm9sZC51LXRleHQtY2VudGVyLXNtYWxsLW9ubHkubGluZWhlaWdodC10aWdodC51LW1hcmdpbmJvdHRvbS0xMC5mb250c2l6ZS1iYXNlJyxcbiAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6ICcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5LnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICBoZWFkbGluZTogJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmZvbnRjb2xvci1zZWNvbmRhcnkuZm9udHNpemUtc21hbGxlcicsXG4gICAgICAgICAgICAgICAgICAgICAgY2l0eTogJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmNhcmQtcHJvamVjdC1hdXRob3IuYWx0dCdcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ21lZGl1bSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyOiAnLnctY29sLnctY29sLTYnLFxuICAgICAgICAgICAgICAgICAgICAgIGlubmVyV3JhcHBlcjogJy5jYXJkLXByb2plY3QuY2FyZC51LXJhZGl1cycsXG4gICAgICAgICAgICAgICAgICAgICAgdGh1bWI6ICcuY2FyZC1wcm9qZWN0LXRodW1iLm1lZGl1bScsXG4gICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb25XcmFwcGVyOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJy5jYXJkLXByb2plY3QtZGVzY3JpcHRpb24uYWx0JyxcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwJyxcbiAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6ICcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5LnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICBoZWFkbGluZTogJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmZvbnRjb2xvci1zZWNvbmRhcnkuZm9udHNpemUtc21hbGxlcicsXG4gICAgICAgICAgICAgICAgICAgICAgY2l0eTogJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmNhcmQtcHJvamVjdC1hdXRob3IuYWx0dCdcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2JpZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyOiAnLmNhcmQudS1yYWRpdXMuY2FyZC1wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICBpbm5lcldyYXBwZXI6ICcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgIHRodW1iOiAnLnctY29sLnctY29sLTgudy1jb2wtbWVkaXVtLTYuY2FyZC1wcm9qZWN0LXRodW1iLmJpZycsXG4gICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb25XcmFwcGVyOiAnLnctY29sLnctY29sLTQudy1jb2wtbWVkaXVtLTYnLFxuICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnLmNhcmQtcHJvamVjdC1kZXNjcmlwdGlvbi5iaWcnLFxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMTAnLFxuICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjogJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5LnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICBoZWFkbGluZTogJy5mb250Y29sb3Itc2Vjb25kYXJ5LmZvbnRzaXplLXNtYWxsZXInLFxuICAgICAgICAgICAgICAgICAgICAgIGNpdHk6ICcudy1oaWRkZW4nXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gY3NzQ2xhc3Nlc1t0eXBlXTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBjYXJkTWV0ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmYWlsZWQgPSAoKSA9PiAoKHByb2plY3Quc3RhdGUgPT09ICdmYWlsZWQnKSB8fCAocHJvamVjdC5zdGF0ZSA9PT0gJ3dhaXRpbmdfZnVuZHMnKSkgPyAnY2FyZC1zZWNvbmRhcnknIDogJyc7XG5cbiAgICAgICAgICAgIHJldHVybiBgLmNhcmQtcHJvamVjdC1tZXRlci4ke3Byb2plY3QubW9kZX0uJHtwcm9qZWN0LnN0YXRlfS4ke3Byb2dyZXNzfS4ke2ZhaWxlZCgpfWA7XG5cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3NzOiBjc3MsXG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IHByb2dyZXNzLFxuICAgICAgICAgICAgcmVtYWluaW5nVGV4dE9iajogcmVtYWluaW5nVGV4dE9iaixcbiAgICAgICAgICAgIGVsYXBzZWRUZXh0T2JqOiBlbGFwc2VkVGV4dE9iaixcbiAgICAgICAgICAgIGNhcmRNZXRlcjogY2FyZE1ldGVyXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdDtcblxuICAgICAgICByZXR1cm4gbShjdHJsLmNzcygpLndyYXBwZXIsIFtcbiAgICAgICAgICAgIG0oY3RybC5jc3MoKS5pbm5lcldyYXBwZXIsIFtcbiAgICAgICAgICAgICAgICBtKGBhJHtjdHJsLmNzcygpLnRodW1ifVtocmVmPVwiLyR7cHJvamVjdC5wZXJtYWxpbmt9XCJdYCwge1xuICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBwcm9qZWN0Vk0ucm91dGVUb1Byb2plY3QocHJvamVjdCwgYXJncy5yZWYpLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBgdXJsKCR7cHJvamVjdC5wcm9qZWN0X2ltZ30pYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2Jsb2NrJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbShjdHJsLmNzcygpLmRlc2NyaXB0aW9uV3JhcHBlciwgW1xuICAgICAgICAgICAgICAgICAgICBtKGN0cmwuY3NzKCkuZGVzY3JpcHRpb24sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oY3RybC5jc3MoKS50aXRsZSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEubGluay1oaWRkZW5baHJlZj1cIi8ke3Byb2plY3QucGVybWFsaW5rfVwiXWAse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBwcm9qZWN0Vk0ucm91dGVUb1Byb2plY3QocHJvamVjdCwgYXJncy5yZWYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0LnByb2plY3RfbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbShjdHJsLmNzcygpLmF1dGhvciwgYCR7STE4bi50KCdieScsIEkxOG5TY29wZSgpKX0gJHtwcm9qZWN0Lm93bmVyX25hbWV9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKGN0cmwuY3NzKCkuaGVhZGxpbmUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmxpbmstaGlkZGVuW2hyZWY9XCIvJHtwcm9qZWN0LnBlcm1hbGlua31cIl1gLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogcHJvamVjdFZNLnJvdXRlVG9Qcm9qZWN0KHByb2plY3QsIGFyZ3MucmVmKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0scHJvamVjdC5oZWFkbGluZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKGN0cmwuY3NzKCkuY2l0eSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1tYXAtbWFya2VyLmZhLTEnLCAnICcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgJHtwcm9qZWN0LmNpdHlfbmFtZSA/IHByb2plY3QuY2l0eV9uYW1lIDogJyd9LCAke3Byb2plY3Quc3RhdGVfYWNyb255bSA/IHByb2plY3Quc3RhdGVfYWNyb255bSA6ICcnfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKGN0cmwuY2FyZE1ldGVyKCksIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIChfLmNvbnRhaW5zKFsnc3VjY2Vzc2Z1bCcsICdmYWlsZWQnLCAnd2FpdGluZ19mdW5kcyddLCBwcm9qZWN0LnN0YXRlKSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Quc3RhdGUgPT09ICdzdWNjZXNzZnVsJyAmJiBjdHJsLnByb2dyZXNzIDwgMTAwID8gSTE4bi50KGBkaXNwbGF5X3N0YXR1cy5mbGV4X3N1Y2Nlc3NmdWxgLCBJMThuU2NvcGUoKSkgOiBJMThuLnQoYGRpc3BsYXlfc3RhdHVzLiR7cHJvamVjdC5zdGF0ZX1gLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5tZXRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcubWV0ZXItZmlsbCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBgJHsoY3RybC5wcm9ncmVzcyA+IDEwMCA/IDEwMCA6IGN0cmwucHJvZ3Jlc3MpfSVgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy5jYXJkLXByb2plY3Qtc3RhdHMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBgJHtNYXRoLmNlaWwocHJvamVjdC5wcm9ncmVzcyl9JWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlci5mb250d2VpZ2h0LXNlbWlib2xkJywgYFIkICR7aC5mb3JtYXROdW1iZXIocHJvamVjdC5wbGVkZ2VkKX1gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmxpbmVoZWlnaHQtdGlnaHRlc3QnLCAnTGV2YW50YWRvcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQudS10ZXh0LXJpZ2h0JywgcHJvamVjdC5leHBpcmVzX2F0ID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlci5mb250d2VpZ2h0LXNlbWlib2xkJywgYCR7Y3RybC5yZW1haW5pbmdUZXh0T2JqLnRvdGFsfSAke2N0cmwucmVtYWluaW5nVGV4dE9iai51bml0fWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC10aWdodGVzdCcsIChjdHJsLnJlbWFpbmluZ1RleHRPYmoudG90YWwgPiAxKSA/ICdSZXN0YW50ZXMnIDogJ1Jlc3RhbnRlJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC10aWdodCcsIFsnSW5pY2lhZG8gaMOhJyxtKCdicicpLGAke2N0cmwuZWxhcHNlZFRleHRPYmoudG90YWx9ICR7Y3RybC5lbGFwc2VkVGV4dE9iai51bml0fWBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgKGFyZ3Muc2hvd0ZyaWVuZHMgJiYgY3RybC50eXBlID09PSAnYmlnJyA/XG4gICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLW1lZGl1bS02JywgW20uY29tcG9uZW50KHByb2plY3RGcmllbmRzLCB7cHJvamVjdDogcHJvamVjdH0pXSkgOiAnJylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgKGFyZ3Muc2hvd0ZyaWVuZHMgJiYgY3RybC50eXBlICE9PSAnYmlnJyA/XG4gICAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3RGcmllbmRzLCB7cHJvamVjdDogcHJvamVjdH0pIDogJycpXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RDYXJkO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RDYXJkIGZyb20gJy4vcHJvamVjdC1jYXJkJztcblxuY29uc3QgcHJvamVjdFJvdyA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IGFyZ3MuY29sbGVjdGlvbixcbiAgICAgICAgICAgIHRpdGxlID0gYXJncy50aXRsZSB8fCBjb2xsZWN0aW9uLnRpdGxlLFxuICAgICAgICAgICAgcmVmID0gYXJncy5yZWYsXG4gICAgICAgICAgICBzaG93RnJpZW5kcyA9IGFyZ3Muc2hvd0ZyaWVuZHMsXG4gICAgICAgICAgICB3cmFwcGVyID0gYXJncy53cmFwcGVyIHx8ICcudy1zZWN0aW9uLnNlY3Rpb24udS1tYXJnaW5ib3R0b20tNDAnO1xuXG4gICAgICAgIGlmIChjb2xsZWN0aW9uLmxvYWRlcigpIHx8IGNvbGxlY3Rpb24uY29sbGVjdGlvbigpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBtKHdyYXBwZXIsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICghXy5pc1VuZGVmaW5lZChjb2xsZWN0aW9uLnRpdGxlKSB8fCAhXy5pc1VuZGVmaW5lZChjb2xsZWN0aW9uLmhhc2gpKSA/IG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0zMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oKHNob3dGcmllbmRzID8gJy53LWNvbC53LWNvbC04LnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JyA6ICcudy1jb2wudy1jb2wtMTAudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnKSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS5saW5laGVpZ2h0LWxvb3NlcicsIHRpdGxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKChzaG93RnJpZW5kcyA/ICcudy1jb2wudy1jb2wtNC53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicgOiAnLnctY29sLnctY29sLTIudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnKSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNob3dGcmllbmRzID8gbSgnLnctY29sLnctY29sLTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmJ0bi5idG4tbm8tYm9yZGVyLmJ0bi1zbWFsbC5idG4tdGVyY2lhcnlbaHJlZj1cIi9jb25uZWN0LWZhY2Vib29rP3JlZj0ke3JlZn1cIl1gLCAnRW5jb250cmFyIGFtaWdvcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKChzaG93RnJpZW5kcyA/ICcudy1jb2wudy1jb2wtNicgOiAnLnctY29sLnctY29sLTEyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmJ0bi5idG4tc21hbGwuYnRuLXRlcmNpYXJ5W2hyZWY9XCIvZXhwbG9yZT9yZWY9JHtyZWZ9JmZpbHRlcj0ke2NvbGxlY3Rpb24uaGFzaH1cIl1gLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IG0ucm91dGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sJ1ZlciB0b2RvcycpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLmxvYWRlcigpID8gaC5sb2FkZXIoKSA6IG0oJy53LXJvdycsIF8ubWFwKGNvbGxlY3Rpb24uY29sbGVjdGlvbigpLCAocHJvamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KHByb2plY3RDYXJkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6IHJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93RnJpZW5kczogc2hvd0ZyaWVuZHNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbSgnZGl2Jyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Um93O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5sYW5kaW5nUUEgY29tcG9uZW50XG4gKiBBIHZpc3VhbCBjb21wb25lbnQgdGhhdCBkaXNwbGF5cyBhIHF1ZXN0aW9uL2Fuc3dlciBib3ggd2l0aCB0b2dnbGVcbiAqXG4gKiBFeGFtcGxlOlxuICogdmlldzogKCkgPT4ge1xuICogICAgICAuLi5cbiAqICAgICAgbS5jb21wb25lbnQoYy5sYW5kaW5nUUEsIHtcbiAqICAgICAgICAgIHF1ZXN0aW9uOiAnV2hhdHMgeW91ciBuYW1lPycsXG4gKiAgICAgICAgICBhbnN3ZXI6ICdEYXJ0aCBWYWRlci4nXG4gKiAgICAgIH0pXG4gKiAgICAgIC4uLlxuICogIH1cbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgbGFuZGluZ1FBID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2hvd0Fuc3dlcjogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcuY2FyZC5xYS1jYXJkLnUtbWFyZ2luYm90dG9tLTIwLnUtcmFkaXVzLmJ0bi10ZXJjaWFyeScsW1xuICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnNob3dBbnN3ZXIudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3Mub25jbGljayAmJiBhcmdzLm9uY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBhcmdzLnF1ZXN0aW9uKSxcbiAgICAgICAgICAgIGN0cmwuc2hvd0Fuc3dlcigpID8gbSgncC51LW1hcmdpbnRvcC0yMC5mb250c2l6ZS1zbWFsbCcsIG0udHJ1c3QoYXJncy5hbnN3ZXIpKSA6ICcnXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxhbmRpbmdRQTtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBsYW5kaW5nU2lnbnVwIGZyb20gJy4uL2MvbGFuZGluZy1zaWdudXAnO1xuaW1wb3J0IHByb2plY3RSb3cgZnJvbSAnLi4vYy9wcm9qZWN0LXJvdyc7XG5pbXBvcnQgbGFuZGluZ1FBIGZyb20gJy4uL2MvbGFuZGluZy1xYSc7XG5cbmNvbnN0IEZsZXggPSB7XG4gICAgY29udHJvbGxlcigpIHtcbiAgICAgICAgY29uc3Qgc3RhdHMgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgcHJvamVjdHMgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgbCA9IG0ucHJvcCgpLFxuICAgICAgICAgICAgc2FtcGxlMyA9IF8ucGFydGlhbChfLnNhbXBsZSwgXywgMyksXG4gICAgICAgICAgICBidWlsZGVyID0ge1xuICAgICAgICAgICAgICAgIGN1c3RvbUFjdGlvbjogJ2h0dHA6Ly9mYXp1bS5jYXRhcnNlLm1lL29icmlnYWRvLWxhbmRpbmctY2F0YXJzZS1mbGV4J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZERpc3F1cyA9IChlbCwgaXNJbml0aWFsaXplZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICBoLmRpc2N1c3MoJ2h0dHBzOi8vY2F0YXJzZS5tZS9mbGV4JywgJ2ZsZXhfcGFnZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmbGV4Vk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgICAgICBtb2RlOiAnZXEnLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnZXEnLFxuICAgICAgICAgICAgICAgIHJlY29tbWVuZGVkOiAnZXEnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0YXRzTG9hZGVyID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihtb2RlbHMuc3RhdGlzdGljLmdldFJvd09wdGlvbnMoKSk7XG5cbiAgICAgICAgZmxleFZNLm1vZGUoJ2ZsZXgnKS5zdGF0ZSgnb25saW5lJykucmVjb21tZW5kZWQodHJ1ZSk7XG5cbiAgICAgICAgY29uc3QgcHJvamVjdHNMb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyKG1vZGVscy5wcm9qZWN0LmdldFBhZ2VPcHRpb25zKGZsZXhWTS5wYXJhbWV0ZXJzKCkpKTtcblxuICAgICAgICBzdGF0c0xvYWRlci5sb2FkKCkudGhlbihzdGF0cyk7XG5cbiAgICAgICAgcHJvamVjdHNMb2FkZXIubG9hZCgpLnRoZW4oXy5jb21wb3NlKHByb2plY3RzLCBzYW1wbGUzKSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZERpc3F1czogYWRkRGlzcXVzLFxuICAgICAgICAgICAgYnVpbGRlcjogYnVpbGRlcixcbiAgICAgICAgICAgIHN0YXRzTG9hZGVyOiBzdGF0c0xvYWRlcixcbiAgICAgICAgICAgIHN0YXRzOiBzdGF0cyxcbiAgICAgICAgICAgIHByb2plY3RzTG9hZGVyOiBwcm9qZWN0c0xvYWRlcixcbiAgICAgICAgICAgIHByb2plY3RzOiB7XG4gICAgICAgICAgICAgICAgbG9hZGVyOiBwcm9qZWN0c0xvYWRlcixcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBwcm9qZWN0c1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGxldCBzdGF0cyA9IF8uZmlyc3QoY3RybC5zdGF0cygpKTtcblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5oZXJvLWZ1bGwuaGVyby16ZWxvJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lci51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdpbWcubG9nby1mbGV4LWhvbWVbc3JjPVxcJy9hc3NldHMvbG9nby1mbGV4LnBuZ1xcJ11bd2lkdGg9XFwnMzU5XFwnXScpLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tNjAudy1jb2wtcHVzaC0yLnctY29sLTgnLCAnVmFtb3MgY29uc3RydWlyIHVtYSBub3ZhIG1vZGFsaWRhZGUgZGUgY3Jvd2RmdW5kaW5nISBDYWRhc3RyZSBzZXUgZW1haWwgZSBzYWliYSBjb21vIGluc2NyZXZlciBvIHNldSBwcm9qZXRvIG5vIGZsZXghJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChsYW5kaW5nU2lnbnVwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogY3RybC5idWlsZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJylcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksIFtcbiAgICAgICAgICAgICAgICBtKCcuc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlc3QudS1tYXJnaW50b3AtNDAudS10ZXh0LWNlbnRlcicsICdQcmEgcXVlbSBzZXLDoT8nKSwgbSgnLmZvbnRzaXplLWJhc2UudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS02MCcsICdJbmljaWFyZW1vcyBhIGZhc2UgZGUgdGVzdGVzIGNvbSBjYXRlZ29yaWFzIGRlIHByb2pldG9zIGVzcGVjw61maWNhcycpLCBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTYwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1tzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NjBlMzkzYTAxYjY2ZTI1MGFjYTY3Y2JfaWNvbi16ZWxvLWNvbS5wbmdcXCddW3dpZHRoPVxcJzIxMFxcJ10nKSwgbSgnLmZvbnRzaXplLWxhcmdlc3QubGluZWhlaWdodC1sb29zZScsICdDYXVzYXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIG0oJ3AuZm9udHNpemUtYmFzZScsICdGbGV4aWJpbGlkYWRlIHBhcmEgY2F1c2FzIGRlIGltcGFjdG8hIEVzdGFyZW1vcyBhYmVydG9zIGEgY2FtcGFuaGFzIGRlIG9yZ2FuaXphw6fDtWVzIG91IHBlc3NvYXMgZsOtc2ljYXMgcGFyYSBhcnJlY2FkYcOnw6NvIGRlIHJlY3Vyc29zIHBhcmEgY2F1c2FzIHBlc3NvYWlzLCBwcm9qZXRvcyBhc3Npc3RlbmNpYWlzLCBzYcO6ZGUsIGFqdWRhcyBodW1hbml0w6FyaWFzLCBwcm90ZcOnw6NvIGFvcyBhbmltYWlzLCBlbXByZWVuZGVkb3Jpc21vIHNvY2lvYW1iaWVudGFsLCBhdGl2aXNtbyBvdSBxdWFscXVlciBjb2lzYSBxdWUgdW5hIGFzIHBlc3NvYXMgcGFyYSBmYXplciBvIGJlbS4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgnLnctY29sLnctY29sLTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTYwZTM5MjlhMGRhZWEyMzBhNWYxMmNkX2ljb24temVsby1wZXNzb2FsLnBuZ1xcJ11bd2lkdGg9XFwnMjEwXFwnXScpLCBtKCcuZm9udHNpemUtbGFyZ2VzdC5saW5laGVpZ2h0LWxvb3NlJywgJ1ZhcXVpbmhhcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgncC5mb250c2l6ZS1iYXNlJywgJ0NhbXBhbmhhcyBzaW1wbGVzIHF1ZSBwcmVjaXNhbSBkZSBmbGV4aWJpbGlkYWRlIHBhcmEgYXJyZWNhZGFyIGRpbmhlaXJvIGNvbSBwZXNzb2FzIHByw7N4aW1hcy4gRXN0YXJlbW9zIGFiZXJ0b3MgYSB1bWEgdmFyaWVkYWRlIGRlIGNhbXBhbmhhcyBwZXNzb2FpcyBxdWUgcG9kZW0gaXIgZGVzZGUgY29icmlyIGN1c3RvcyBkZSBlc3R1ZG9zIGEgYWp1ZGFyIHF1ZW0gcHJlY2lzYSBkZSB0cmF0YW1lbnRvIG3DqWRpY28uIERlIGp1bnRhciBhIGdyYW5hIHBhcmEgZmF6ZXIgYXF1ZWxhIGZlc3RhIGEgY29tcHJhciBwcmVzZW50ZXMgcGFyYSBhbGd1w6ltIGNvbSBhIGFqdWRhIGRhIGdhbGVyYS4gJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSwgbSgnLnctc2VjdGlvbi5zZWN0aW9uLmJnLWdyZWVubGltZS5mb250Y29sb3ItbmVnYXRpdmUnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXN0LnUtbWFyZ2ludG9wLTQwLnUtbWFyZ2luYm90dG9tLTYwLnUtdGV4dC1jZW50ZXInLCAnQ29tbyBmdW5jaW9uYXLDoT8nKSwgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1tzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NjBlMzljNTc4YjI4NDQ5M2UyYTQyOGFfemVsby1tb25leS5wbmdcXCddW3dpZHRoPVxcJzE4MFxcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTEwLnUtdGV4dC1jZW50ZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsICdGaXF1ZSBjb20gcXVhbnRvIGFycmVjYWRhcicpLCBtKCdwLnUtdGV4dC1jZW50ZXIuZm9udHNpemUtYmFzZScsICdPIGZsZXggw6kgcGFyYSBpbXB1bHNpb25hciBjYW1wYW5oYXMgb25kZSB0b2RvIGRpbmhlaXJvIMOpIGJlbSB2aW5kbyEgVm9jw6ogZmljYSBjb20gdHVkbyBxdWUgY29uc2VndWlyIGFycmVjYWRhci4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTYwZTM5ZDM3YzAxM2Q0YTNlZTY4N2QyX2ljb24tcmV3YXJkLnBuZ1xcJ11bd2lkdGg9XFwnMTgwXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMTAudS10ZXh0LWNlbnRlci5mb250d2VpZ2h0LXNlbWlib2xkJywgJ07Do28gcHJlY2lzYSBkZSByZWNvbXBlbnNhcycpLCBtKCdwLnUtdGV4dC1jZW50ZXIuZm9udHNpemUtYmFzZScsICdObyBmbGV4IG9mZXJlY2VyIHJlY29tcGVuc2FzIMOpIG9wY2lvbmFsLiBWb2PDqiBlc2NvbGhlIHNlIG9mZXJlY8OqLWxhcyBmYXogc2VudGlkbyBwYXJhIG8gc2V1IHByb2pldG8gZSBjYW1wYW5oYS4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1tzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NjBlMzlmYjAxYjY2ZTI1MGFjYTY3ZTNfaWNvbi1jdXJhZC5wbmdcXCddW3dpZHRoPVxcJzE4MFxcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTEwLnUtdGV4dC1jZW50ZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsICdWb2PDqiBtZXNtbyBwdWJsaWNhIHNldSBwcm9qZXRvJyksIG0oJ3AudS10ZXh0LWNlbnRlci5mb250c2l6ZS1iYXNlJywgJ1RvZG9zIG9zIHByb2pldG9zIGluc2NyaXRvcyBubyBmbGV4IGVudHJhbSBubyBhci4gQWdpbGlkYWRlIGUgZmFjaWxpZGFkZSBwYXJhIHZvY8OqIGNhcHRhciByZWN1cnNvcyBhdHJhdsOpcyBkYSBpbnRlcm5ldC4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTYwZTM5ZTc3YzAxM2Q0YTNlZTY4N2Q0X2ljb24tdGltZS5wbmdcXCddW3dpZHRoPVxcJzE4MFxcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTEwLnUtdGV4dC1jZW50ZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsICdFbmNlcnJlIGEgY2FtcGFuaGEgcXVhbmRvIHF1aXNlcicpLCBtKCdwLnUtdGV4dC1jZW50ZXIuZm9udHNpemUtYmFzZScsICdOw6NvIGjDoSBsaW1pdGUgZGUgdGVtcG8gZGUgY2FwdGHDp8Ojby4gVm9jw6ogZXNjb2xoZSAgcXVhbmRvIGVuY2VycmFyIHN1YSBjYW1wYW5oYSBlIHJlY2ViZXIgb3MgdmFsb3JlcyBhcnJlY2FkYWRvcy4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctZWRpdGFibGUuZm9udHNpemUtbGFyZ2VyLnUtbWFyZ2ludG9wLTQwLnUtbWFyZ2luLWJvdHRvbS00MC51LXRleHQtY2VudGVyJywgJ0Nvbmhlw6dhIGFsZ3VucyBkb3MgcHJpbWVpcm9zIHByb2pldG9zIGZsZXgnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucHJvamVjdHNMb2FkZXIoKSA/IGgubG9hZGVyKCkgOiBtLmNvbXBvbmVudChwcm9qZWN0Um93LCB7Y29sbGVjdGlvbjogY3RybC5wcm9qZWN0cywgcmVmOiAnY3Ryc2VfZmxleCcsIHdyYXBwZXI6ICcudy1yb3cudS1tYXJnaW50b3AtNDAnfSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLmRpdmlkZXInKSxcbiAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24nLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS02MC51LW1hcmdpbnRvcC00MCcsICdEw7p2aWRhcycpLCBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGxhbmRpbmdRQSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246ICdRdWFpcyBzw6NvIGFzIHRheGFzIGRhIG1vZGFsaWRhZGUgZmxleMOtdmVsPyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiAnQ29tbyBubyBDYXRhcnNlLCBlbnZpYXIgdW0gcHJvamV0byBuw6NvIGN1c3RhIG5hZGEhIEEgdGF4YSBjb2JyYWRhIG5vIHNlcnZpw6dvIENhdGFyc2UgZmxleCDDqSBkZSAxMyUgc29icmUgbyB2YWxvciBhcnJlY2FkYWRvLidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGxhbmRpbmdRQSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246ICdEZSBvbmRlIHZlbSBvIGRpbmhlaXJvIGRvIG1ldSBwcm9qZXRvPycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6ICdGYW3DrWxpYSwgYW1pZ29zLCBmw6NzIGUgbWVtYnJvcyBkZSBjb211bmlkYWRlcyBxdWUgdm9jw6ogZmF6IHBhcnRlIHPDo28gc2V1cyBtYWlvcmVzIGNvbGFib3JhZG9yZXMuIFPDo28gZWxlcyBxdWUgaXLDo28gZGl2dWxnYXIgc3VhIGNhbXBhbmhhIHBhcmEgYXMgcGVzc29hcyBxdWUgZWxlcyBjb25oZWNlbSwgZSBhc3NpbSBvIGPDrXJjdWxvIGRlIGFwb2lhZG9yZXMgdmFpIGF1bWVudGFuZG8gZSBhIHN1YSBjYW1wYW5oYSBnYW5oYSBmb3LDp2EuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQobGFuZGluZ1FBLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ1F1YWwgYSBkaWZlcmVuw6dhIGVudHJlIG8gZmxleMOtdmVsIGUgbyBcInR1ZG8gb3UgbmFkYVwiPycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6ICdBdHVhbG1lbnRlIG8gQ2F0YXJzZSB1dGlsaXphIGFwZW5hcyBvIG1vZGVsbyBcInR1ZG8gb3UgbmFkYVwiLCBvbmRlIHZvY8OqIHPDsyBmaWNhIGNvbSBvIGRpbmhlaXJvIHNlIGJhdGVyIGEgbWV0YSBkZSBhcnJlY2FkYcOnw6NvIGRlbnRybyBkbyBwcmF6byBkYSBjYW1wYW5oYS4gTyBtb2RlbG8gZmxleMOtdmVsIMOpIGRpZmVyZW50ZSBwb2lzIHBlcm1pdGUgcXVlIG8gcmVhbGl6YWRvciBmaXF1ZSBjb20gbyBxdWUgYXJyZWNhZGFyLCBpbmRlcGVuZGVudGUgZGUgYXRpbmdpciBvdSBuw6NvIGEgbWV0YSBkbyBwcm9qZXRvIG5vIHByYXpvIGRhIGNhbXBhbmhhLiBOw6NvIGhhdmVyw6EgbGltaXRlIGRlIHRlbXBvIHBhcmEgYXMgY2FtcGFuaGFzLiBOb3NzbyBzaXN0ZW1hIGZsZXjDrXZlbCBzZXLDoSBhbGdvIG5vdm8gZW0gcmVsYcOnw6NvIGFvcyBtb2RlbG9zIHF1ZSBleGlzdGVtIGF0dWFsbWVudGUgbm8gbWVyY2Fkby4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQobGFuZGluZ1FBLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ1Bvc3NvIGluc2NyZXZlciBwcm9qZXRvcyBwYXJhIGEgbW9kYWxpZGFkZSBmbGV4w612ZWwgasOhPycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6ICdTaW0uIENhZGFzdHJlIHNldSBlbWFpbCBlIHNhaWJhIGNvbW8gaW5zY3JldmVyIG8gc2V1IHByb2pldG8gbm8gZmxleCEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChsYW5kaW5nUUEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAnUG9yIHF1w6ogdm9jw6pzIHF1ZXJlbSBmYXplciBvIENhdGFyc2UgZmxleD8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiAnQWNyZWRpdGFtb3MgcXVlIG8gYW1iaWVudGUgZG8gY3Jvd2RmdW5kaW5nIGJyYXNpbGVpcm8gYWluZGEgdGVtIGVzcGHDp28gcGFyYSBtdWl0YXMgYcOnw7VlcywgdGVzdGVzIGUgZXhwZXJpbWVudGHDp8O1ZXMgcGFyYSBlbnRlbmRlciBkZSBmYXRvIG8gcXVlIGFzIHBlc3NvYXMgcHJlY2lzYW0uIFNvbmhhbW9zIGNvbSB0b3JuYXIgbyBmaW5hbmNpYW1lbnRvIGNvbGV0aXZvIHVtIGjDoWJpdG8gbm8gQnJhc2lsLiBPIENhdGFyc2UgZmxleCDDqSBtYWlzIHVtIHBhc3NvIG5lc3NhIGRpcmXDp8Ojby4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChsYW5kaW5nUUEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAnUXVhbmRvIHZvY8OqcyBpcsOjbyBsYW7Dp2FyIG8gQ2F0YXJzZSBmbGV4PycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6ICdBaW5kYSBuw6NvIHNhYmVtb3MgcXVhbmRvIGFicmlyZW1vcyBvIGZsZXggcGFyYSBvIHDDumJsaWNvIGVtIGdlcmFsLCBtYXMgdm9jw6ogcG9kZSBjYWRhc3RyYXIgc2V1IGVtYWlsIG5lc3NhIHDDoWdpbmEgZSByZWNlYmVyIHVtIG1hdGVyaWFsIGVzcGVjaWFsIGRlIGNvbW8gaW5zY3JldmVyIHNldSBwcm9qZXRvLidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24tbGFyZ2UudS10ZXh0LWNlbnRlci5iZy1wdXJwbGUnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lci5mb250Y29sb3ItbmVnYXRpdmUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdCcsICdJbnNjcmV2YSBzZXUgcHJvamV0byEnKSwgbSgnLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tNjAnLCAnQ2FkYXN0cmUgc2V1IGVtYWlsIGUgc2FpYmEgY29tbyBpbnNjcmV2ZXIgbyBzZXUgcHJvamV0byBubyBmbGV4IScpLCBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChsYW5kaW5nU2lnbnVwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGN0cmwuYnVpbGRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSksIG0oJy53LXNlY3Rpb24uc2VjdGlvbi1vbmUtY29sdW1uLmJnLWNhdGFyc2UtemVsby5zZWN0aW9uLWxhcmdlW3N0eWxlPVwibWluLWhlaWdodDogNTB2aDtcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lci51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctZWRpdGFibGUudS1tYXJnaW5ib3R0b20tNDAuZm9udHNpemUtbGFyZ2VyLmxpbmVoZWlnaHQtdGlnaHQuZm9udGNvbG9yLW5lZ2F0aXZlJywgJ08gZmxleCDDqSB1bSBleHBlcmltZW50byBlIGluaWNpYXRpdmEgZG8gQ2F0YXJzZSwgbWFpb3IgcGxhdGFmb3JtYSBkZSBjcm93ZGZ1bmRpbmcgZG8gQnJhc2lsLicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtdGV4dC1jZW50ZXInLCAoY3RybC5zdGF0c0xvYWRlcigpKSA/IGgubG9hZGVyKCkgOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1qdW1iby50ZXh0LXN1Y2Nlc3MubGluZWhlaWdodC1sb29zZScsIGguZm9ybWF0TnVtYmVyKHN0YXRzLnRvdGFsX2NvbnRyaWJ1dG9ycywgMCwgMykpLCBtKCdwLnN0YXJ0LXN0YXRzLmZvbnRzaXplLWJhc2UuZm9udGNvbG9yLW5lZ2F0aXZlJywgJ1Blc3NvYXMgamEgYXBvaWFyYW0gcGVsbyBtZW5vcyAwMSBwcm9qZXRvIG5vIENhdGFyc2UnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtanVtYm8udGV4dC1zdWNjZXNzLmxpbmVoZWlnaHQtbG9vc2UnLCBoLmZvcm1hdE51bWJlcihzdGF0cy50b3RhbF9wcm9qZWN0c19zdWNjZXNzLCAwLCAzKSksIG0oJ3Auc3RhcnQtc3RhdHMuZm9udHNpemUtYmFzZS5mb250Y29sb3ItbmVnYXRpdmUnLCAnUHJvamV0b3MgamEgZm9yYW0gZmluYW5jaWFkb3Mgbm/CoENhdGFyc2UnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtanVtYm8udGV4dC1zdWNjZXNzLmxpbmVoZWlnaHQtbG9vc2UnLCBzdGF0cy50b3RhbF9jb250cmlidXRlZC50b1N0cmluZygpLnNsaWNlKDAsIDIpICsgJyBtaWxow7VlcycpLCBtKCdwLnN0YXJ0LXN0YXRzLmZvbnRzaXplLWJhc2UuZm9udGNvbG9yLW5lZ2F0aXZlJywgJ0ZvcmFtIGludmVzdGlkb3MgZW0gaWRlaWFzIHB1YmxpY2FkYXMgbm8gQ2F0YXJzZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLmJnLWJsdWUtb25lLmZvbnRjb2xvci1uZWdhdGl2ZScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tMjAnLCAnUmVjb21lbmRlIG8gQ2F0YXJzZSBmbGV4IHBhcmEgYW1pZ29zISAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNi53LXN1Yi1jb2wtbWlkZGxlJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLmljb24tc2hhcmUtbW9iaWxlW3NyYz1cXCdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzUzYTNmNjZlMDVlYjYxNDQxNzFkOGVkYl9mYWNlYm9vay14eGwucG5nXFwnXScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tbGFyZ2UuYnRuLWZiW2hyZWY9XCJodHRwOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PWh0dHBzOi8vd3d3LmNhdGFyc2UubWUvZmxleD9yZWY9ZmFjZWJvb2smdGl0bGU9JyArIGVuY29kZVVSSUNvbXBvbmVudCgnQ29uaGXDp2EgbyBub3ZvIENhdGFyc2UgRmxleCEnKSArICdcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJywgJ0NvbXBhcnRpbGhhcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcuaWNvbi1zaGFyZS1tb2JpbGVbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTNhM2Y2NTEwNWViNjE0NDE3MWQ4ZWRhX3R3aXR0ZXItMjU2LnBuZ1xcJ10nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWJ1dHRvbi5idG4uYnRuLWxhcmdlLmJ0bi10d2VldFtocmVmPVwiaHR0cDovL3R3aXR0ZXIuY29tLz9zdGF0dXM9JyArIGVuY29kZVVSSUNvbXBvbmVudCgnVmFtb3MgY29uc3RydWlyIHVtYSBub3ZhIG1vZGFsaWRhZGUgZGUgY3Jvd2RmdW5kaW5nIHBhcmEgbyBDYXRhcnNlISBKdW50ZS1zZSBhIG7Ds3MsIGluc2NyZXZhIHNldSBlbWFpbCEnKSArICdodHRwczovL3d3dy5jYXRhcnNlLm1lL2ZsZXg/cmVmPXR3aXR0ZXJcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJywgJ1R1aXRhcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSwgbSgnLnctc2VjdGlvbi5zZWN0aW9uLWxhcmdlLmJnLWdyZWVubGltZScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnI3BhcnRpY2lwZS1kby1kZWJhdGUudS10ZXh0LWNlbnRlcicsIHtjb25maWc6IGgudG9BbmNob3IoKX0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdoMS5mb250c2l6ZS1sYXJnZXN0LmZvbnRjb2xvci1uZWdhdGl2ZScsJ0NvbnN0cnVhIG8gZmxleCBjb25vc2NvJyksIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTYwLmZvbnRjb2xvci1uZWdhdGl2ZScsICdJbmljaWUgdW1hIGNvbnZlcnNhLCBwZXJndW50ZSwgY29tZW50ZSwgY3JpdGlxdWUgZSBmYcOnYSBzdWdlc3TDtWVzIScpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJyNkaXNxdXNfdGhyZWFkLmNhcmQudS1yYWRpdXNbc3R5bGU9XCJtaW4taGVpZ2h0OiA1MHZoO1wiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGN0cmwuYWRkRGlzcXVzXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRmxleDtcbiIsIi8qKlxuICogd2luZG93LmMuVG9vbHRpcCBjb21wb25lbnRcbiAqIEEgY29tcG9uZW50IHRoYXQgYWxsb3dzIHlvdSB0byBzaG93IGEgdG9vbHRpcCBvblxuICogYSBzcGVjaWZpZWQgZWxlbWVudCBob3Zlci4gSXQgcmVjZWl2ZXMgdGhlIGVsZW1lbnQgeW91IHdhbnRcbiAqIHRvIHRyaWdnZXIgdGhlIHRvb2x0aXAgYW5kIGFsc28gdGhlIHRleHQgdG8gZGlzcGxheSBhcyB0b29sdGlwLlxuICpcbiAqIEV4YW1wbGUgb2YgdXNlOlxuICogdmlldzogKCkgPT4ge1xuICogICAgIGxldCB0b29sdGlwID0gKGVsKSA9PiB7XG4gKiAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQoYy5Ub29sdGlwLCB7XG4gKiAgICAgICAgICAgICAgZWw6IGVsLFxuICogICAgICAgICAgICAgIHRleHQ6ICd0ZXh0IHRvIHRvb2x0aXAnLFxuICogICAgICAgICAgICAgIHdpZHRoOiAzMDBcbiAqICAgICAgICAgIH0pXG4gKiAgICAgfVxuICpcbiAqICAgICByZXR1cm4gdG9vbHRpcCgnYSNsaW5rLXd0aC10b29sdGlwW2hyZWY9XCIjXCJdJyk7XG4gKlxuICogfVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCB0b29sdGlwID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgcGFyZW50SGVpZ2h0ID0gbS5wcm9wKDApLFxuICAgICAgICAgICAgd2lkdGggPSBtLnByb3AoYXJncy53aWR0aCB8fCAyODApLFxuICAgICAgICAgICAgdG9wID0gbS5wcm9wKDApLFxuICAgICAgICAgICAgbGVmdCA9IG0ucHJvcCgwKSxcbiAgICAgICAgICAgIG9wYWNpdHkgPSBtLnByb3AoMCksXG4gICAgICAgICAgICBwYXJlbnRPZmZzZXQgPSBtLnByb3Aoe3RvcDogMCwgbGVmdDogMH0pLFxuICAgICAgICAgICAgdG9vbHRpcCA9IGgudG9nZ2xlUHJvcCgwLCAxKSxcbiAgICAgICAgICAgIHRvZ2dsZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0b29sdGlwLnRvZ2dsZSgpO1xuICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHNldFBhcmVudFBvc2l0aW9uID0gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpe1xuICAgICAgICAgICAgICAgIHBhcmVudE9mZnNldChoLmN1bXVsYXRpdmVPZmZzZXQoZWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFBvc2l0aW9uID0gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsVG9wID0gZWwub2Zmc2V0SGVpZ2h0ICsgZWwub2Zmc2V0UGFyZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IChlbC5vZmZzZXRXaWR0aCArIDIgKiBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdMZWZ0KSArIDMwKSl7IC8vMzAgaGVyZSBpcyBhIHNhZmUgbWFyZ2luXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gMzA7IC8vQWRkaW5nIHRoZSBzYWZlIG1hcmdpblxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCgtcGFyZW50T2Zmc2V0KCkubGVmdCArIDE1KTsgLy9wb3NpdGlvbmluZyBjZW50ZXIgb2Ygd2luZG93LCBjb25zaWRlcmluZyBtYXJnaW5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgocGFyZW50T2Zmc2V0KCkubGVmdCArIChlbC5vZmZzZXRXaWR0aCAvIDIpKSA8PSB3aW5kb3cuaW5uZXJXaWR0aCAmJiAocGFyZW50T2Zmc2V0KCkubGVmdCAtIChlbC5vZmZzZXRXaWR0aCAvIDIpKSA+PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQoLWVsLm9mZnNldFdpZHRoIC8gMik7IC8vUG9zaXRpb25pbmcgdG8gdGhlIGNlbnRlclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChwYXJlbnRPZmZzZXQoKS5sZWZ0ICsgKGVsLm9mZnNldFdpZHRoIC8gMikpID4gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQoLWVsLm9mZnNldFdpZHRoICsgZWwub2Zmc2V0UGFyZW50Lm9mZnNldFdpZHRoKTsgLy9Qb3NpdGlvbmluZyB0byB0aGUgbGVmdFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChwYXJlbnRPZmZzZXQoKS5sZWZ0IC0gKGVsLm9mZnNldFdpZHRoIC8gMikpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCgtZWwub2Zmc2V0UGFyZW50Lm9mZnNldFdpZHRoKTsgLy9Qb3NpdGlvbmluZyB0byB0aGUgcmlnaHRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0b3AoLWVsVG9wKTsgLy9TZXR0aW5nIHRvcCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHksXG4gICAgICAgICAgICB0b29sdGlwOiB0b29sdGlwLFxuICAgICAgICAgICAgdG9nZ2xlOiB0b2dnbGUsXG4gICAgICAgICAgICBzZXRQb3NpdGlvbjogc2V0UG9zaXRpb24sXG4gICAgICAgICAgICBzZXRQYXJlbnRQb3NpdGlvbjogc2V0UGFyZW50UG9zaXRpb25cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBsZXQgd2lkdGggPSBjdHJsLndpZHRoKCk7XG4gICAgICAgIHJldHVybiBtKGFyZ3MuZWwsIHtcbiAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlLFxuICAgICAgICAgICAgY29uZmlnOiBjdHJsLnNldFBhcmVudFBvc2l0aW9uLFxuICAgICAgICAgICAgc3R5bGU6IHtjdXJzb3I6ICdwb2ludGVyJ31cbiAgICAgICAgfSwgY3RybC50b29sdGlwKCkgPyBbXG4gICAgICAgICAgICBtKGAudG9vbHRpcC5kYXJrW3N0eWxlPVwid2lkdGg6ICR7d2lkdGh9cHg7IHRvcDogJHtjdHJsLnRvcCgpfXB4OyBsZWZ0OiAke2N0cmwubGVmdCgpfXB4O1wiXWAsIHtcbiAgICAgICAgICAgICAgICBjb25maWc6IGN0cmwuc2V0UG9zaXRpb25cbiAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QnLCBhcmdzLnRleHQpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdIDogJycpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvb2x0aXA7XG4iLCIvKipcbiAqIHdpbmRvdy5jLlByb2plY3REYXNoYm9hcmRNZW51IGNvbXBvbmVudFxuICogYnVpbGQgZGFzaGJvYXJkIHByb2plY3QgbWVudSBmb3IgcHJvamVjdCBvd25lcnNcbiAqIGFuZCBhZG1pbi5cbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5Qcm9qZWN0RGFzaGJvYXJkTWVudSwge1xuICogICAgIHByb2plY3Q6IHByb2plY3REZXRhaWwgT2JqZWN0LFxuICogfSlcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLmRhc2hib2FyZF9uYXYnKTtcbmNvbnN0IGxpbmtzU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5kYXNoYm9hcmRfbmF2X2xpbmtzJyk7XG5cbmNvbnN0IHByb2plY3REYXNoYm9hcmRNZW51ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0sXG4gICAgICAgICAgICBlZGl0TGlua3NUb2dnbGUgPSBoLnRvZ2dsZVByb3AodHJ1ZSwgZmFsc2UpLFxuICAgICAgICAgICAgc2hvd1B1Ymxpc2ggPSBoLnRvZ2dsZVByb3AodHJ1ZSwgZmFsc2UpLFxuICAgICAgICAgICAgYm9keVRvZ2dsZUZvck5hdiA9IGgudG9nZ2xlUHJvcCgnYm9keS1wcm9qZWN0IG9wZW4nLCAnYm9keS1wcm9qZWN0IGNsb3NlZCcpO1xuXG4gICAgICAgIGNvbnN0IHByb2plY3RUaHVtYiA9IChwcm9qZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoXy5pc0VtcHR5KHByb2plY3QubGFyZ2VfaW1hZ2UpKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShwcm9qZWN0LnRodW1iX2ltYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJy9hc3NldHMvdGh1bWItcHJvamVjdC5wbmcnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9qZWN0LnRodW1iX2ltYWdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2plY3QubGFyZ2VfaW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGFyZ3MucHJvamVjdCgpLmlzX3B1Ymxpc2hlZCkge1xuICAgICAgICAgICAgZWRpdExpbmtzVG9nZ2xlLnRvZ2dsZShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJncy5oaWRlUHVibGlzaCkge1xuICAgICAgICAgICAgc2hvd1B1Ymxpc2gudG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgZWRpdExpbmtzVG9nZ2xlOiBlZGl0TGlua3NUb2dnbGUsXG4gICAgICAgICAgICBzaG93UHVibGlzaDogc2hvd1B1Ymxpc2gsXG4gICAgICAgICAgICBib2R5VG9nZ2xlRm9yTmF2OiBib2R5VG9nZ2xlRm9yTmF2LFxuICAgICAgICAgICAgcHJvamVjdFRodW1iOiBwcm9qZWN0VGh1bWJcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0KCksXG4gICAgICAgICAgICAgIHByb2plY3RSb3V0ZSA9ICcvcHJvamVjdHMvJyArIHByb2plY3QucHJvamVjdF9pZCxcbiAgICAgICAgICAgICAgZWRpdFJvdXRlID0gcHJvamVjdFJvdXRlICsgJy9lZGl0JyxcbiAgICAgICAgICAgICAgZWRpdExpbmtDbGFzcyA9ICdkYXNoYm9hcmQtbmF2LWxpbmstbGVmdCAnICsgKHByb2plY3QuaXNfcHVibGlzaGVkID8gJ2luZGVudCcgOiAnJyk7XG4gICAgICAgIGxldCBvcHRpb25hbE9wdCA9IG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICcgKG9wY2lvbmFsKScpO1xuXG4gICAgICAgIGN0cmwuYm9keS5jbGFzc05hbWUgPSBjdHJsLmJvZHlUb2dnbGVGb3JOYXYoKTtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3QtbmF2JywgW1xuICAgICAgICAgICAgbSgnLnByb2plY3QtbmF2LXdyYXBwZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnbmF2Lnctc2VjdGlvbi5kYXNoYm9hcmQtbmF2LnNpZGUnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2EjZGFzaGJvYXJkX3ByZXZpZXdfbGluay53LWlubGluZS1ibG9jay5kYXNoYm9hcmQtcHJvamVjdC1uYW1lW2hyZWY9XCInICsgKHByb2plY3QuaXNfcHVibGlzaGVkID8gJy8nICsgcHJvamVjdC5wZXJtYWxpbmsgOiBlZGl0Um91dGUgKyAnI3ByZXZpZXcnKSArICdcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKGBpbWcudGh1bWItcHJvamVjdC1kYXNoYm9hcmRbc3JjPVwiJHtwcm9qZWN0ID8gY3RybC5wcm9qZWN0VGh1bWIocHJvamVjdCkgOiAnL2Fzc2V0cy90aHVtYi1wcm9qZWN0LnBuZyd9XCJdW3dpZHRoPVwiMTE0XCJdYCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLW5lZ2F0aXZlLmxpbmVoZWlnaHQtdGlnaHQuZm9udHNpemUtc21hbGwnLCBwcm9qZWN0Lm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbShgaW1nLnUtbWFyZ2ludG9wLTEwW3NyYz1cIi9hc3NldHMvY2F0YXJzZV9ib290c3RyYXAvYmFkZ2UtJHtwcm9qZWN0Lm1vZGV9LWgucG5nXCJdW3dpZHRoPTgwXWApXG5cbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJyNpbmZvLWxpbmtzJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNkYXNoYm9hcmRfaG9tZV9saW5rW2NsYXNzPVwiZGFzaGJvYXJkLW5hdi1saW5rLWxlZnQgJyArIChoLmxvY2F0aW9uQWN0aW9uTWF0Y2goJ2luc2lnaHRzJykgPyAnc2VsZWN0ZWQnIDogJycpICsgJ1wiXVtocmVmPVwiJyArIHByb2plY3RSb3V0ZSArICcvaW5zaWdodHNcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1iYXItY2hhcnQuZmEtbGcuZmEtZncnKSwgSTE4bi50KCdzdGFydF90YWInLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLCAocHJvamVjdC5pc19wdWJsaXNoZWQgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYSNkYXNoYm9hcmRfcmVwb3J0c19saW5rLmRhc2hib2FyZC1uYXYtbGluay1sZWZ0W2hyZWY9XCIke3Byb2plY3RSb3V0ZX0vY29udHJpYnV0aW9uc19yZXBvcnRcIl1gLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEuZmEtdGFibGUuZmEtbGcuZmEtZncnKSwgSTE4bi50KCdyZXBvcnRzX3RhYicsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjZGFzaGJvYXJkX3JlcG9ydHNfbGluay5kYXNoYm9hcmQtbmF2LWxpbmstbGVmdC51LW1hcmdpbmJvdHRvbS0zMFtocmVmPVwiJyArIGVkaXRSb3V0ZSArICcjcG9zdHMnICsgJ1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1idWxsaG9ybi5mYS1mdy5mYS1sZycpLCBJMThuLnQoJ3Bvc3RzX3RhYicsIEkxOG5TY29wZSgpKSwgbSgnc3Bhbi5iYWRnZScsIHByb2plY3QucG9zdHNfY291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy5lZGl0LXByb2plY3QtZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgKCFwcm9qZWN0LmlzX3B1Ymxpc2hlZCA/ICcnIDogbSgnYnV0dG9uI3RvZ2dsZS1lZGl0LW1lbnUuZGFzaGJvYXJkLW5hdi1saW5rLWxlZnQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC5lZGl0TGlua3NUb2dnbGUudG9nZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1wZW5jaWwuZmEtZncuZmEtbGcnKSwgSTE4bi50KCdlZGl0X3Byb2plY3QnLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pKSwgKGN0cmwuZWRpdExpbmtzVG9nZ2xlKCkgPyBtKCcjZWRpdC1tZW51LWl0ZW1zJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJyNkYXNoYm9hcmQtbGlua3MnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoIXByb2plY3QuaXNfcHVibGlzaGVkIHx8IHByb2plY3QuaXNfYWRtaW5fcm9sZSkgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Jhc2ljc19saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyNiYXNpY3MnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmJhc2ljc190YWJgLCBsaW5rc1Njb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjZ29hbF9saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyNnb2FsJyArICdcIl0nLCBJMThuLnQoYCR7cHJvamVjdC5tb2RlfS5nb2FsX3RhYmAsIGxpbmtzU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Rlc2NyaXB0aW9uX2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI2Rlc2NyaXB0aW9uJyArICdcIl0nLCBJMThuLnQoYCR7cHJvamVjdC5tb2RlfS5kZXNjcmlwdGlvbl90YWJgLCBsaW5rc1Njb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSN2aWRlb19saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyN2aWRlbycgKyAnXCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1bDrWRlbycsIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICcgKG9wY2lvbmFsKScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2J1ZGdldF9saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyNidWRnZXQnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmJ1ZGdldF90YWJgLCBsaW5rc1Njb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNjYXJkX2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI2NhcmQnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmNhcmRfdGFiYCwgbGlua3NTY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjZGFzaGJvYXJkX3Jld2FyZF9saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyNyZXdhcmQnICsgJ1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSZWNvbXBlbnNhcycsIG9wdGlvbmFsT3B0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Rhc2hib2FyZF91c2VyX2Fib3V0X2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI3VzZXJfYWJvdXQnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmFib3V0X3lvdV90YWJgLCBsaW5rc1Njb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChwcm9qZWN0LmlzX3B1Ymxpc2hlZCB8fCBwcm9qZWN0LnN0YXRlID09PSAnZHJhZnQnKSB8fCBwcm9qZWN0LmlzX2FkbWluX3JvbGUgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Rhc2hib2FyZF91c2VyX3NldHRpbmdzX2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI3VzZXJfc2V0dGluZ3MnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmFjY291bnRfdGFiYCwgbGlua3NTY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJyksICghcHJvamVjdC5pc19wdWJsaXNoZWQgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Rhc2hib2FyZF9wcmV2aWV3X2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI3ByZXZpZXcnICsgJ1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWZ3LmZhLWV5ZS5mYS1sZycpLCBJMThuLnQoYCR7cHJvamVjdC5tb2RlfS5wcmV2aWV3X3RhYmAsIGxpbmtzU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKCghcHJvamVjdC5pc19wdWJsaXNoZWQgJiYgY3RybC5zaG93UHVibGlzaCgpKSA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuYnRuLXNlbmQtZHJhZnQtZml4ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByb2plY3QubW9kZSA9PT0gJ2FvbicgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByb2plY3Quc3RhdGUgPT09ICdkcmFmdCcgPyBtKCdhLmJ0bi5idG4tbWVkaXVtW2hyZWY9XCIvcHJvamVjdHMvJyArIHByb2plY3QucHJvamVjdF9pZCArICcvdmFsaWRhdGVfcHVibGlzaFwiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCdwdWJsaXNoJywgSTE4blNjb3BlKCkpLCBtLnRydXN0KCcmbmJzcDsmbmJzcDsnKSwgbSgnc3Bhbi5mYS5mYS1jaGV2cm9uLXJpZ2h0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocHJvamVjdC5zdGF0ZSA9PT0gJ2RyYWZ0JyA/IG0oJ2EuYnRuLmJ0bi1tZWRpdW1baHJlZj1cIi9mbGV4aWJsZV9wcm9qZWN0cy8nICsgcHJvamVjdC5wcm9qZWN0X2lkICsgJy92YWxpZGF0ZV9wdWJsaXNoXCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ3B1Ymxpc2gnLCBJMThuU2NvcGUoKSksIG0udHJ1c3QoJyZuYnNwOyZuYnNwOycpLCBtKCdzcGFuLmZhLmZhLWNoZXZyb24tcmlnaHQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBdIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgocHJvamVjdC5tb2RlID09PSAnZmxleCcgJiYgcHJvamVjdC5pc19wdWJsaXNoZWQpID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuYnRuLXNlbmQtZHJhZnQtZml4ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfLmlzTnVsbChwcm9qZWN0LmV4cGlyZXNfYXQpID8gbSgnYS53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bS5idG4tc2Vjb25kYXJ5LWRhcmtbaHJlZj1cIi9wcm9qZWN0cy8nICsgcHJvamVjdC5wcm9qZWN0X2lkICsgJy9lZGl0I2Fubm91bmNlX2V4cGlyYXRpb25cIl0nLCBJMThuLnQoJ2Fubm91bmNlX2V4cGlyYXRpb24nLCBJMThuU2NvcGUoKSkpIDogJycpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCdhLmJ0bi1kYXNoYm9hcmQgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIicsIHtcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLmJvZHlUb2dnbGVGb3JOYXYudG9nZ2xlXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1iYXJzLmZhLWxnJylcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3REYXNoYm9hcmRNZW51O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Nb2RhbEJveCBjb21wb25lbnRcbiAqIEJ1aWxzIHRoZSB0ZW1wbGF0ZSBmb3IgdXNpbmcgbW9kYWxcbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5Nb2RhbEJveCwge1xuICogICAgIGRpc3BsYXlNb2RhbDogdG9vZ2xlUHJvcE9iamVjdCxcbiAqICAgICBjb250ZW50OiBbJ0NvbXBvbmVudE5hbWUnLCB7YXJneDogJ3gnLCBhcmd5OiAneSd9XVxuICogfSlcbiAqIENvbXBvbmVudE5hbWUgc3RydWN0dXJlID0+ICBtKCdkaXYnLCBbXG4gKiAgICAgICAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctaGVhZGVyJywgW10pLFxuICogICAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQnLCBbXSksXG4gKiAgICAgICAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctbmF2LWJvdHRvbScsIFtdKSxcbiAqICAgICAgICAgICAgICBdKVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuY29uc3QgbW9kYWxCb3ggPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcubW9kYWwtYmFja2Ryb3AnLCBbXG4gICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLW91dGVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctaW5uZXIubW9kYWwtZGlhbG9nLXNtYWxsJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdhLnctaW5saW5lLWJsb2NrLm1vZGFsLWNsb3NlLmZhLmZhLWNsb3NlLmZhLWxnW2hyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogYXJncy5kaXNwbGF5TW9kYWwudG9nZ2xlXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhcmdzLmNvbnRlbnRbMF0sIGFyZ3MuY29udGVudFsxXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1vZGFsQm94O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5BZG1pblByb2plY3REZXRhaWxzQ2FyZCBjb21wb25lbnRcbiAqIHJlbmRlciBhbiBib3ggd2l0aCBzb21lIHByb2plY3Qgc3RhdGlzdGljcyBpbmZvXG4gKlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuQWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQsIHtcbiAqICAgICByZXNvdXJjZTogcHJvamVjdERldGFpbCBPYmplY3QsXG4gKiB9KVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5jb25zdCBhZG1pblByb2plY3REZXRhaWxzQ2FyZCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgbGV0IHByb2plY3QgPSBhcmdzLnJlc291cmNlLFxuICAgICAgICAgICAgaXNGaW5hbExhcCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBAVE9ETzogdXNlIDggZGF5cyBiZWNhdXNlIHRpbWV6b25lIG9uIGpzXG4gICAgICAgICAgICAgICAgcmV0dXJuICFfLmlzTnVsbChwcm9qZWN0LmV4cGlyZXNfYXQpICYmIG1vbWVudCgpLmFkZCg4LCAnZGF5cycpID49IG1vbWVudChwcm9qZWN0LnpvbmVfZXhwaXJlc19hdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCxcbiAgICAgICAgICAgIHJlbWFpbmluZ1RleHRPYmo6IGgudHJhbnNsYXRlZFRpbWUocHJvamVjdC5yZW1haW5pbmdfdGltZSksXG4gICAgICAgICAgICBlbGFwc2VkVGV4dE9iajogaC50cmFuc2xhdGVkVGltZShwcm9qZWN0LmVsYXBzZWRfdGltZSksXG4gICAgICAgICAgICBpc0ZpbmFsTGFwOiBpc0ZpbmFsTGFwXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwpIHtcbiAgICAgICAgbGV0IHByb2plY3QgPSBjdHJsLnByb2plY3QsXG4gICAgICAgICAgICBwcm9ncmVzcyA9IHByb2plY3QucHJvZ3Jlc3MudG9GaXhlZCgyKSxcbiAgICAgICAgICAgIHN0YXR1c1RleHRPYmogPSBoLnByb2plY3RTdGF0ZVRleHRDbGFzcyhwcm9qZWN0LnN0YXRlKSxcbiAgICAgICAgICAgIHJlbWFpbmluZ1RleHRPYmogPSBjdHJsLnJlbWFpbmluZ1RleHRPYmosXG4gICAgICAgICAgICBlbGFwc2VkVGV4dE9iaiA9IGN0cmwuZWxhcHNlZFRleHRPYmo7XG5cbiAgICAgICAgcmV0dXJuIG0oJy5wcm9qZWN0LWRldGFpbHMtY2FyZC5jYXJkLnUtcmFkaXVzLmNhcmQtdGVyY2lhcnkudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeScsICdTdGF0dXM6JyksICfCoCcsXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogc3RhdHVzVGV4dE9iai5jc3NDbGFzc1xuICAgICAgICAgICAgICAgICAgICB9LCAoY3RybC5pc0ZpbmFsTGFwKCkgJiYgcHJvamVjdC5vcGVuX2Zvcl9jb250cmlidXRpb25zID8gJ1JFVEEgRklOQUwnIDogc3RhdHVzVGV4dE9iai50ZXh0KSksICfCoCdcbiAgICAgICAgICAgICAgICBdKSwgcHJvamVjdC5pc19wdWJsaXNoZWQgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5tZXRlci51LW1hcmdpbnRvcC0yMC51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5tZXRlci1maWxsJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAocHJvZ3Jlc3MgPiAxMDAgPyAxMDAgOiBwcm9ncmVzcykgKyAnJSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtMy53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkubGluZWhlaWdodC10aWdodGVyLmZvbnRzaXplLXNtYWxsJywgJ2ZpbmFuY2lhZG8nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZS5saW5laGVpZ2h0LXRpZ2h0JywgcHJvZ3Jlc3MgKyAnJScpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHRlci5mb250c2l6ZS1zbWFsbCcsICdsZXZhbnRhZG9zJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1IkICcgKyBoLmZvcm1hdE51bWJlcihwcm9qZWN0LnBsZWRnZWQsIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC0zLnctY29sLXRpbnktNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0ZXIuZm9udHNpemUtc21hbGwnLCAnYXBvaW9zJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIHByb2plY3QudG90YWxfY29udHJpYnV0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtMy53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF8uaXNOdWxsKHByb2plY3QuZXhwaXJlc19hdCkgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHRlci5mb250c2l6ZS1zbWFsbCcsICdpbmljaWFkbyBow6EnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIGVsYXBzZWRUZXh0T2JqLnRvdGFsICsgJyAnICsgZWxhcHNlZFRleHRPYmoudW5pdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkubGluZWhlaWdodC10aWdodGVyLmZvbnRzaXplLXNtYWxsJywgJ3Jlc3RhbScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIHJlbWFpbmluZ1RleHRPYmoudG90YWwgKyAnICcgKyByZW1haW5pbmdUZXh0T2JqLnVuaXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0gOiAnJ1xuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQ7XG4iLCIvKipcbiAqIHdpbmRvdy5jLk9ubGluZVN1Y2Nlc3NNb2RhbENvbnRlbnQgY29tcG9uZW50XG4gKiBSZW5kZXIgb25saW5lIHN1Y2Nlc3MgbWVzc2FnZVxuICpcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmNvbnN0IG9ubGluZVN1Y2Nlc3NNb2RhbENvbnRlbnQgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgIG0oJy5mYS5mYS1jaGVjay1jaXJjbGUuZmEtNXgudGV4dC1zdWNjZXNzLnUtbWFyZ2luYm90dG9tLTQwJyksXG4gICAgICAgICAgICBtKCdwLmZvbnRzaXplLWxhcmdlci5saW5laGVpZ2h0LXRpZ2h0JywgJ1N1YSBjYW1wYW5oYSBlc3TDoSBubyBhciEhISBQYXJhYsOpbnMgcG9yIGVzc2UgcHJpbWVpcm8gZ3JhbmRlIHBhc3NvLiBCb2Egc29ydGUgbmVzc2Egam9ybmFkYSA7KScpXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG9ubGluZVN1Y2Nlc3NNb2RhbENvbnRlbnQ7XG4iLCIvKipcbiAqIHdpbmRvdy5jLlByb2plY3REYXRhU3RhdHMgY29tcG9uZW50XG4gKiByZW5kZXIgYSByb3cgd2l0aCBwcm9qZWN0IHN0YXRzIGluZm8gbGlrZTpcbiAqIHN0YXRlIC8gdG90YWxfY29udHJpYnV0aW9ucyAvIHRvdGFsX3BsZWRnZWQgLyBlbGFwc2VkIHwgcmVtYW5pbmcgdGltZVxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlByb2plY3REYXRhU3RhdHMsIHtwcm9qZWN0OiBwcm9qZWN0fSlcbiAqKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgcHJvamVjdERhdGFTdGF0cyA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCgpLFxuICAgICAgICAgICAgICBwcm9ncmVzcyA9IHByb2plY3QucHJvZ3Jlc3MudG9GaXhlZCgyKSxcbiAgICAgICAgICAgICAgc3RhdHVzVGV4dE9iaiA9IGgucHJvamVjdFN0YXRlVGV4dENsYXNzKHByb2plY3Quc3RhdGUpLFxuICAgICAgICAgICAgICByZW1haW5pbmdUZXh0T2JqID0gaC50cmFuc2xhdGVkVGltZShwcm9qZWN0LnJlbWFpbmluZ190aW1lKSxcbiAgICAgICAgICAgICAgZWxhcHNlZFRleHRPYmogPSBoLnRyYW5zbGF0ZWRUaW1lKHByb2plY3QuZWxhcHNlZF90aW1lKTtcblxuICAgICAgICByZXR1cm4gbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCAnU3RhdHVzOiAnKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnc3BhbicsIHtjbGFzczogc3RhdHVzVGV4dE9iai5jc3NDbGFzc30gLHN0YXR1c1RleHRPYmoudGV4dClcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOScsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZS5saW5laGVpZ2h0LXRpZ2h0JywgYCR7cHJvZ3Jlc3N9JWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkubGluZWhlaWdodC10aWdodGVyLmZvbnRzaXplLXNtYWxsLnUtbWFyZ2luYm90dG9tLTEwJywgJ2ZpbmFuY2lhZG8nKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZS5saW5laGVpZ2h0LXRpZ2h0JywgYFIkICR7aC5mb3JtYXROdW1iZXIocHJvamVjdC5wbGVkZ2VkLCAyKX1gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHRlci5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0xMCcsICdsZXZhbnRhZG9zJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIHByb2plY3QudG90YWxfY29udHJpYnV0aW9ucyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0ZXIuZm9udHNpemUtc21hbGwnLCAnYXBvaW9zJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgKF8uaXNOdWxsKHByb2plY3QuZXhwaXJlc19hdCkgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIGAke2VsYXBzZWRUZXh0T2JqLnRvdGFsfSAke2VsYXBzZWRUZXh0T2JqLnVuaXR9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkubGluZWhlaWdodC10aWdodGVyLmZvbnRzaXplLXNtYWxsJywgJ2luaWNpYWRvIGjDoScpXG4gICAgICAgICAgICAgICAgICAgICAgICBdIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCBgJHtyZW1haW5pbmdUZXh0T2JqLnRvdGFsfWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHRlci5mb250c2l6ZS1zbWFsbCcsIGAke3JlbWFpbmluZ1RleHRPYmoudW5pdH0gJHsocmVtYWluaW5nVGV4dE9iai50b3RhbCA+IDAgPyAncmVzdGFudGVzJyA6ICdyZXN0YW50ZScpfWApXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0RGF0YVN0YXRzO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5kZWxldGVQcm9qZWN0TW9kYWxDb250ZW50IGNvbXBvbmVudFxuICogUmVuZGVyIGRlbGV0ZSBwcm9qZWN0IG1vZGFsXG4gKlxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5cbmNvbnN0IGRlbGV0ZVByb2plY3RNb2RhbENvbnRlbnQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBsID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIGRlbGV0ZVN1Y2Nlc3MgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgY29uZmlybWVkID0gbS5wcm9wKHRydWUpLFxuICAgICAgICAgICAgY2hlY2sgPSBtLnByb3AoJycpO1xuXG4gICAgICAgIGNvbnN0IGRlbGV0ZVByb2plY3QgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2hlY2soKSA9PT0gJ2RlbGV0YXItcmFzY3VuaG8nKXtcbiAgICAgICAgICAgICAgICBsZXQgbG9hZGVyT3B0cyA9IG1vZGVscy5kZWxldGVQcm9qZWN0LnBvc3RPcHRpb25zKHtcbiAgICAgICAgICAgICAgICAgICAgX3Byb2plY3RfaWQ6IGFyZ3MucHJvamVjdC5wcm9qZWN0X2lkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obG9hZGVyT3B0cyk7XG4gICAgICAgICAgICAgICAgbC5sb2FkKCkudGhlbihkZWxldGVTdWNjZXNzKHRydWUpKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25maXJtZWQoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWxldGVQcm9qZWN0OiBkZWxldGVQcm9qZWN0LFxuICAgICAgICAgICAgY29uZmlybWVkOiBjb25maXJtZWQsXG4gICAgICAgICAgICBkZWxldGVTdWNjZXNzOiBkZWxldGVTdWNjZXNzLFxuICAgICAgICAgICAgY2hlY2s6IGNoZWNrXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdDtcbiAgICAgICAgcmV0dXJuIG0oJ2RpdicsXG4gICAgICAgICAgICAgICAgIChjdHJsLmRlbGV0ZVN1Y2Nlc3MoKSA/ICAnJyA6IG0oJy5tb2RhbC1kaWFsb2ctaGVhZGVyJyxcbiAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LXRleHQtY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICdDb25maXJtYXIgJyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLXRyYXNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgbSgnZm9ybS5tb2RhbC1kaWFsb2ctY29udGVudCcse29uc3VibWl0OiBjdHJsLmRlbGV0ZVByb2plY3R9LFxuICAgICAgICAgICAgICAgICAgKGN0cmwuZGVsZXRlU3VjY2VzcygpID8gW20oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2ludG9wLTMwJywgJ1Byb2pldG8gZGVsZXRhZG8gY29tIHN1Y2Vzc28uIENsaXF1ZSBubyBsaW5rIGFiYWl4byBwYXJhIHZvbHRhciBhIHDDoWdpbmEgaW5pY2lhbC4nKSxcbiAgICAgICAgICAgICAgICAgICAgICBtKGBhLmJ0bi5idG4taW5hY3RpdmUuYnRuLWxhcmdlLnUtbWFyZ2ludG9wLTMwW2hyZWY9Jy9wdC91c2Vycy8ke2guZ2V0VXNlcigpLnVzZXJfaWR9L2VkaXQjcHJvamVjdHMnXWAsICdWb2x0YXInKVxuICAgICAgICAgICAgICAgICAgXSA6XG4gICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTYwJyxcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnTyBwcm9qZXRvIHNlcsOhIGRlbGV0YWRvIHBlcm1hbmVudGVtZW50ZSBlIHRvZG9zIG9zIGRhZG9zIHF1ZSB2b2PDqiBwcmVlbmNoZXUgbmEgZWRpw6fDo28gZG8gcmFzY3VuaG8gbsOjbyBwb2RlcsOjbyBzZXIgcmVjdXBlcmFkb3MuJ1xuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tMTAnLFxuICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb25maXJtZSBlc2NyZXZlbmRvICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbm8gY2FtcG8gYWJhaXhvICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQudGV4dC1lcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdkZWxldGFyLXJhc2N1bmhvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybScsXG4gICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQucG9zaXRpdmUudGV4dC1maWVsZC51LW1hcmdpbmJvdHRvbS00MC53LWlucHV0W21heGxlbmd0aD1cXCcyNTZcXCddW3R5cGU9XFwndGV4dFxcJ10nLCB7Y2xhc3M6IGN0cmwuY29uZmlybWVkKCkgPyBmYWxzZSA6ICdlcnJvcicsIHBsYWNlaG9sZGVyOiAnZGVsZXRhci1yYXNjdW5obycsIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuY2hlY2spfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXIudy1jb2wudy1jb2wtNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQuYnRuLmJ0bi1pbmFjdGl2ZS5idG4tbGFyZ2UudS1tYXJnaW5ib3R0b20tMjBbdHlwZT1cXCdzdWJtaXRcXCddW3ZhbHVlPVxcJ0RlbGV0YXIgcGFyYSBzZW1wcmVcXCddJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmZvbnRzaXplLXNtYWxsLmxpbmstaGlkZGVuLWxpZ2h0W2hyZWY9XFwnI1xcJ10nLCB7b25jbGljazogYXJncy5kaXNwbGF5RGVsZXRlTW9kYWwudG9nZ2xlfSwgJ0NhbmNlbGFyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICApKSA7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZGVsZXRlUHJvamVjdE1vZGFsQ29udGVudDtcbiIsIi8qKlxuICogd2luZG93LmMucHJvamVjdERlbGV0ZUJ1dHRvbiBjb21wb25lbnRcbiAqIEEgYnV0dG9uIHNob3dpbmcgbW9kYWwgdG8gZGVsZXRlIGRyYWZ0IHByb2plY3RcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RhbEJveCBmcm9tICcuLi9jL21vZGFsLWJveCc7XG5pbXBvcnQgZGVsZXRlUHJvamVjdE1vZGFsQ29udGVudCBmcm9tICcuLi9jL2RlbGV0ZS1wcm9qZWN0LW1vZGFsLWNvbnRlbnQnO1xuXG5jb25zdCBwcm9qZWN0RGVsZXRlQnV0dG9uID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBkaXNwbGF5RGVsZXRlTW9kYWwgPSBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcGxheURlbGV0ZU1vZGFsOiBkaXNwbGF5RGVsZXRlTW9kYWxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnZGl2JywgW1xuICAgICAgICAgICAgKGN0cmwuZGlzcGxheURlbGV0ZU1vZGFsKCkgPyBtLmNvbXBvbmVudChtb2RhbEJveCwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlNb2RhbDogY3RybC5kaXNwbGF5RGVsZXRlTW9kYWwsXG4gICAgICAgICAgICAgICAgY29udGVudDogW2RlbGV0ZVByb2plY3RNb2RhbENvbnRlbnQsIHtkaXNwbGF5RGVsZXRlTW9kYWw6IGN0cmwuZGlzcGxheURlbGV0ZU1vZGFsLCBwcm9qZWN0OiBhcmdzLnByb2plY3R9XVxuICAgICAgICAgICAgfSkgOiAnJyksXG4gICAgICAgIG0oJy5iZWZvcmUtZm9vdGVyJyxcbiAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICBtKCdhLmJ0bi5idG4taW5saW5lLmJ0bi1uby1ib3JkZXIuYnRuLXNtYWxsLmJ0bi10ZXJjaWFyeS51LW1hcmdpbmJvdHRvbS0yMC51LXJpZ2h0LnctYnV0dG9uW2hyZWY9XFwnamF2YXNjcmlwdDp2b2lkKDApO1xcJ10nLCB7b25jbGljazogY3RybC5kaXNwbGF5RGVsZXRlTW9kYWwudG9nZ2xlLCBzdHlsZTogeyd0cmFuc2l0aW9uJzogJ2FsbCAwLjVzIGVhc2UgMHMnfX0sXG4gICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAnRGVsZXRhciBwcm9qZXRvICcsXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtdHJhc2gnLCAnJ1xuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdERlbGV0ZUJ1dHRvbjtcbiIsIi8qKlxuICogd2luZG93LmMuY2FuY2VsUHJvamVjdE1vZGFsQ29udGVudCBjb21wb25lbnRcbiAqIFJlbmRlciBjYW5jZWwgcHJvamVjdCBtb2RhbFxuICpcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcblxuY29uc3QgY2FuY2VsUHJvamVjdE1vZGFsQ29udGVudCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgbGV0IGwgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgY2hlY2tFcnJvciA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBjaGVjayA9IG0ucHJvcCgnJyk7XG5cbiAgICAgICAgY29uc3Qgc2hvd05leHRNb2RhbCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjaGVjaygpID09PSAnY2FuY2VsYXItcHJvamV0bycpe1xuICAgICAgICAgICAgICAgIGFyZ3MuZGlzcGxheU1vZGFsLnRvZ2dsZSgpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZW5kLW1lc3NhZ2UnKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hlY2tFcnJvcih0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2hvd05leHRNb2RhbDogc2hvd05leHRNb2RhbCxcbiAgICAgICAgICAgIGNoZWNrRXJyb3I6IGNoZWNrRXJyb3IsXG4gICAgICAgICAgICBjaGVjazogY2hlY2tcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCdmb3JtLmNhbmNlbC1wcm9qZWN0LW1vZGFsLm1vZGFsLWRpYWxvZy1jb250ZW50Jywge29uc3VibWl0OiBjdHJsLnNob3dOZXh0TW9kYWx9LFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQXDDs3MgbyBjYW5jZWxhbWVudG8sIHN1YSBjYW1wYW5oYSBjb25zdGFyw6EgbmEgcGxhdGFmb3JtYSBjb21vIFwibsOjbyBmaW5hbmNpYWRhXCIgZSBvcyBzZXVzIGFwb2lhZG9yZXMgc2Vyw6NvIGltZWRpYXRhbWVudGUgcmVlbWJvbHNhZG9zLiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdFc3NhIGHDp8OjbyBuw6NvIHBvZGVyw6Egc2VyIGRlc2ZlaXRhISdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLnUtbWFyZ2luYm90dG9tLTEwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU2Ugdm9jw6ogdGVtIGNlcnRlemEgcXVlIGRlc2VqYSBjYW5jZWxhciBzZXUgcHJvamV0bywgY29uZmlybWUgZXNjcmV2ZW5kbyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZC50ZXh0LWVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhbmNlbGFyLXByb2pldG8gJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25vIGNhbXBvIGFiYWl4by4gRW0gc2VndWlkYSB0ZSBwZWRpcmVtb3MgcGFyYSBlc2NyZXZlciB1bWEgbWVuc2FnZW0gYW9zIHNldXMgYXBvaWFkb3JlcyBlIHNldSBwcm9qZXRvIHNlcsOhIGVudMOjbyBjYW5jZWxhZG8uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQudGV4dC1lcnJvcicpXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnBvc2l0aXZlLnRleHQtZmllbGQudS1tYXJnaW5ib3R0b20tNDAudy1pbnB1dFttYXhsZW5ndGg9XFwnMjU2XFwnXVt0eXBlPVxcJ3RleHRcXCddJywge2NsYXNzOiAhY3RybC5jaGVja0Vycm9yKCkgPyBmYWxzZSA6ICdlcnJvcicsIHBsYWNlaG9sZGVyOiAnY2FuY2VsYXItcHJvamV0bycsIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuY2hlY2spfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci53LWNvbC53LWNvbC02JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC5idG4uYnRuLWluYWN0aXZlLmJ0bi1sYXJnZS51LW1hcmdpbmJvdHRvbS0yMFt0eXBlPVxcJ3N1Ym1pdFxcJ11bdmFsdWU9XFwnUHLDs3hpbW8gcGFzc28gPlxcJ10nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmZvbnRzaXplLXNtYWxsLmxpbmstaGlkZGVuLWxpZ2h0W2hyZWY9XFwnI1xcJ10nLCB7b25jbGljazogYXJncy5kaXNwbGF5TW9kYWwudG9nZ2xlfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NhbmNlbGFyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNhbmNlbFByb2plY3RNb2RhbENvbnRlbnQ7XG4iLCIvKipcbiAqIHdpbmRvdy5jLnByb2plY3RDYW5jZWxCdXR0b24gY29tcG9uZW50XG4gKiBBIGJ1dHRvbiBzaG93aW5nIG1vZGFsIHRvIGNhbmNlbCBvbmxpbmUgcHJvamVjdFxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGFsQm94IGZyb20gJy4uL2MvbW9kYWwtYm94JztcbmltcG9ydCBjYW5jZWxQcm9qZWN0TW9kYWxDb250ZW50IGZyb20gJy4uL2MvY2FuY2VsLXByb2plY3QtbW9kYWwtY29udGVudCc7XG5cbmNvbnN0IHByb2plY3RDYW5jZWxCdXR0b24gPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlDYW5jZWxNb2RhbCA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwbGF5Q2FuY2VsTW9kYWw6IGRpc3BsYXlDYW5jZWxNb2RhbFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCdkaXYnLCBbXG4gICAgICAgICAgICAoY3RybC5kaXNwbGF5Q2FuY2VsTW9kYWwoKSA/IG0uY29tcG9uZW50KG1vZGFsQm94LCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheU1vZGFsOiBjdHJsLmRpc3BsYXlDYW5jZWxNb2RhbCxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBbY2FuY2VsUHJvamVjdE1vZGFsQ29udGVudCwge2Rpc3BsYXlNb2RhbDogY3RybC5kaXNwbGF5Q2FuY2VsTW9kYWx9XVxuICAgICAgICAgICAgfSkgOiAnJyksXG4gICAgICAgICAgICBtKCcudy1yb3cuYmVmb3JlLWZvb3RlcicsXG4gICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMicsXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICAgICAgbSgnYnV0dG9uLmJ0bi5idG4tY2FuY2VsLmJ0bi1pbmxpbmUuYnRuLW5vLWJvcmRlci5idG4tc21hbGwuYnRuLXRlcmNpYXJ5LnUtbWFyZ2luYm90dG9tLTIwLnUtcmlnaHQudy1idXR0b24nLCB7b25jbGljazogY3RybC5kaXNwbGF5Q2FuY2VsTW9kYWwudG9nZ2xlLCBzdHlsZTogeyd0cmFuc2l0aW9uJzogJ2FsbCAwLjVzIGVhc2UgMHMnfX0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS10aW1lcy1jaXJjbGUnLCAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NhbmNlbGFyIHByb2pldG8nXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q2FuY2VsQnV0dG9uO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Qcm9qZWN0RGF0YUNoYXJ0IGNvbXBvbmVudFxuICogQSBncmFwaCBidWlsZGVyIGludGVyZmFjZSB0byBiZSB1c2VkIG9uIHByb2plY3QgcmVsYXRlZCBkYXNoYm9hcmRzLlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuUHJvamVjdERhdGFDaGFydCwge1xuICogICAgIGNvbGxlY3Rpb246IGN0cmwuY29udHJpYnV0aW9uc1BlckRheSxcbiAqICAgICBsYWJlbDogJ1IkIGFycmVjYWRhZG9zIHBvciBkaWEnLFxuICogICAgIGRhdGFLZXk6ICd0b3RhbF9hbW91bnQnXG4gKiB9KVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IENoYXJ0IGZyb20gJ2NoYXJ0anMnO1xuXG5jb25zdCBwcm9qZWN0RGF0YUNoYXJ0ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCByZXNvdXJjZSA9IF8uZmlyc3QoYXJncy5jb2xsZWN0aW9uKCkpLFxuICAgICAgICAgICAgICBzb3VyY2UgPSAoIV8uaXNVbmRlZmluZWQocmVzb3VyY2UpID8gcmVzb3VyY2Uuc291cmNlIDogW10pLFxuXG4gICAgICAgICAgICBtb3VudERhdGFzZXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJ3JnYmEoMTI2LDE5NCw2OSwwLjIpJyxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICdyZ2JhKDEyNiwxOTQsNjksMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludENvbG9yOiAncmdiYSgxMjYsMTk0LDY5LDEpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRTdHJva2VDb2xvcjogJyNmZmYnLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEhpZ2hsaWdodEZpbGw6ICcjZmZmJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRIaWdobGlnaHRTdHJva2U6ICdyZ2JhKDIyMCwyMjAsMjIwLDEpJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogXy5tYXAoc291cmNlLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1bYXJncy5kYXRhS2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW5kZXJDaGFydCA9IChlbGVtZW50LCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IGVsZW1lbnQuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgICAgICAgICAgICAgICBuZXcgQ2hhcnQoY3R4KS5MaW5lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsczogXy5tYXAoc291cmNlLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdzLnhBeGlzKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0czogbW91bnREYXRhc2V0KClcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZW5kZXJDaGFydDogcmVuZGVyQ2hhcnQsXG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcuY2FyZC51LXJhZGl1cy5tZWRpdW0udS1tYXJnaW5ib3R0b20tMzAnLCBbXG4gICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMC5mb250c2l6ZS1sYXJnZS51LXRleHQtY2VudGVyJywgYXJncy5sYWJlbCksXG4gICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEyLm92ZXJmbG93LWF1dG8nLCBbXG4gICAgICAgICAgICAgICAgICAgICFfLmlzRW1wdHkoY3RybC5zb3VyY2UpID8gbSgnY2FudmFzW2lkPVwiY2hhcnRcIl1bd2lkdGg9XCI4NjBcIl1baGVpZ2h0PVwiMzAwXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjdHJsLnJlbmRlckNoYXJ0XG4gICAgICAgICAgICAgICAgICAgIH0pIDogbSgnLnctY29sLnctY29sLTgudy1jb2wtcHVzaC0yJywgbSgncC5mb250c2l6ZS1iYXNlJywgYXJncy5lbXB0eVN0YXRlKSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3REYXRhQ2hhcnQ7XG4iLCIvKipcbiAqIHdpbmRvdy5jLlByb2plY3REYXRhVGFibGUgY29tcG9uZW50XG4gKiBBIHRhYmxlIGludGVyZmFjZSBjb25zdHJ1Y3RvciB0aGF0IHNob3VsZCBiZSB1c2VkIG9uIHByb2plY3QgcmVsYXRlZCBkYXNoYm9hcmRzLlxuICogSXQgdGFrZXMgYW4gYXJyYXkgYW5kIGEgbGFibGUgYXMgaXQncyBzb3VyY2VzLlxuICogVGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGFycmF5IGlzIHRoZSBoZWFkZXIgZGVzY3JpcHRvciBhbmQgdGhlIHJlc3Qgb2YgdGhlbSBhcmUgcm93IGRhdGEuXG4gKiBSb3dzIG1heSByZXR1cm4gYSBzdHJpbmcgb3IgYW4gYXJyYXkgYW5kIHRoaXMgdmFsdWUgd2lsbCBiZSB1c2VkIGFzIGEgcm93IG91dHB1dC5cbiAqIEFsbCB0YWJsZSByb3dzIGFyZSBzb3J0YWJsZSBieSBkZWZhdWx0LiBJZiB5b3Ugd2FudCB0byB1c2UgYSBjdXN0b20gdmFsdWUgYXMgc29ydCBwYXJhbWV0ZXJcbiAqIHlvdSBtYXkgc2V0IGEgMkQgYXJyYXkgYXMgcm93LiBJbiB0aGlzIGNhc2UsIHRoZSBmaXJzdCBhcnJheSB2YWx1ZSB3aWxsIGJlIHRoZSBjdXN0b20gdmFsdWVcbiAqIHdoaWxlIHRoZSBvdGhlciB3aWxsIGJlIHRoZSBhY3R1YWwgb3V0cHV0LlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuUHJvamVjdERhdGFUYWJsZSwge1xuICogICAgICBsYWJlbDogJ1RhYmxlIGxhYmVsJyxcbiAqICAgICAgdGFibGU6IFtcbiAqICAgICAgICAgIFsnY29sIGhlYWRlciAxJywgJ2NvbCBoZWFkZXIgMiddLFxuICogICAgICAgICAgWyd2YWx1ZSAxeDEnLCBbMywgJ3ZhbHVlIDF4MiddXSxcbiAqICAgICAgICAgIFsndmFsdWUgMngxJywgWzEsICd2YWx1ZSAyeDInXV0gLy9XZSBhcmUgdXNpbmcgYSBjdXN0b20gY29tcGFyYXRvciB0d28gY29sIDIgdmFsdWVzXG4gKiAgICAgIF0sXG4gKiAgICAgIC8vQWxsb3dzIHlvdSB0byBzZXQgYSBzcGVjaWZpYyBjb2x1bW4gdG8gYmUgb3JkZXJlZCBieSBkZWZhdWx0LlxuICogICAgICAvL0lmIG5vIHZhbHVlIGlzIHNldCwgdGhlIGZpcnN0IHJvdyB3aWxsIGJlIHRoZSBkZWZhdWx0IG9uZSB0byBiZSBvcmRlcmVkLlxuICogICAgICAvL05lZ2F0aXZlIHZhbHVlcyBtZWFuIHRoYXQgdGhlIG9yZGVyIHNob3VsZCBiZSByZXZlcnRlZFxuICogICAgICBkZWZhdWx0U29ydEluZGV4OiAtM1xuICogIH0pXG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgcHJvamVjdERhdGFUYWJsZSA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBtLnByb3AoYXJncy50YWJsZSksXG4gICAgICAgICAgICBzb3J0SW5kZXggPSBtLnByb3AoLTEpO1xuXG4gICAgICAgIGNvbnN0IGNvbXBhcmF0b3IgPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgbGV0IGlkeCA9IHNvcnRJbmRleCgpLFxuICAgICAgICAgICAgICAgIC8vQ2hlY2sgaWYgYSBjdXN0b20gY29tcGFyYXRvciBpcyB1c2VkID0+IFJlYWQgY29tcG9uZW50IGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgeCA9IChfLmlzQXJyYXkoYVtpZHhdKSAmJiBhW2lkeF0ubGVuZ3RoID4gMSkgPyBhW2lkeF1bMF0gOiBhW2lkeF0sXG4gICAgICAgICAgICAgICAgeSA9IChfLmlzQXJyYXkoYltpZHhdKSAmJiBiW2lkeF0ubGVuZ3RoID4gMSkgPyBiW2lkeF1bMF0gOiBiW2lkeF07XG5cbiAgICAgICAgICAgIGlmICh4IDwgeSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHkgPCB4KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHNvcnRUYWJsZSA9IChpZHgpID0+IHtcbiAgICAgICAgICAgIGxldCBoZWFkZXIgPSBfLmZpcnN0KHRhYmxlKCkpLFxuICAgICAgICAgICAgICAgIGJvZHk7XG4gICAgICAgICAgICBpZiAoc29ydEluZGV4KCkgPT09IGlkeCl7XG4gICAgICAgICAgICAgICAgYm9keSA9IF8ucmVzdCh0YWJsZSgpKS5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvcnRJbmRleChpZHgpO1xuICAgICAgICAgICAgICAgIGJvZHkgPSBfLnJlc3QodGFibGUoKSkuc29ydChjb21wYXJhdG9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGFibGUoXy51bmlvbihbaGVhZGVyXSxib2R5KSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc29ydFRhYmxlKE1hdGguYWJzKGFyZ3MuZGVmYXVsdFNvcnRJbmRleCkgfHwgMCk7XG5cbiAgICAgICAgaWYgKGFyZ3MuZGVmYXVsdFNvcnRJbmRleCA8IDApe1xuICAgICAgICAgICAgc29ydFRhYmxlKE1hdGguYWJzKGFyZ3MuZGVmYXVsdFNvcnRJbmRleCkgfHwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGFibGU6IHRhYmxlLFxuICAgICAgICAgICAgc29ydFRhYmxlOiBzb3J0VGFibGVcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBfLmZpcnN0KGN0cmwudGFibGUoKSksXG4gICAgICAgICAgICBib2R5ID0gXy5yZXN0KGN0cmwudGFibGUoKSk7XG4gICAgICAgIHJldHVybiBtKCcudGFibGUtb3V0ZXIudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICBtKCcudy1yb3cudGFibGUtcm93LmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtc21hbGxlci5oZWFkZXInLFxuICAgICAgICAgICAgICAgIF8ubWFwKGhlYWRlciwgKGhlYWRpbmcsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc29ydCA9ICgpID0+IGN0cmwuc29ydFRhYmxlKGlkeCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1zbWFsbC00LnctY29sLXRpbnktNC50YWJsZS1jb2wnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuW2hyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IHNvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtoZWFkaW5nfSBgLCBtKCdzcGFuLmZhLmZhLXNvcnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICksIG0oJy50YWJsZS1pbm5lci5mb250c2l6ZS1zbWFsbCcsXG4gICAgICAgICAgICAgICAgXy5tYXAoYm9keSwgKHJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oJy53LXJvdy50YWJsZS1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAocm93RGF0YSwgKHJvdykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQ2hlY2sgaWYgYSBjdXN0b20gY29tcGFyYXRvciBpcyB1c2VkID0+IFJlYWQgY29tcG9uZW50IGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gKF8uaXNBcnJheShyb3cpICYmIHJvdy5sZW5ndGggPiAxKSA/IHJvd1sxXSA6IHJvdztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQudGFibGUtY29sJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCByb3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3REYXRhVGFibGU7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuY29uc3QgcHJvamVjdFJlbWluZGVyQ291bnQgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnJlc291cmNlO1xuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3QtcmVtaW5kZXItY291bnQuY2FyZC51LXJhZGl1cy51LXRleHQtY2VudGVyLm1lZGl1bS51LW1hcmdpbmJvdHRvbS04MCcsIFtcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1RvdGFsIGRlIHBlc3NvYXMgcXVlIGNsaWNhcmFtIG5vIGJvdMOjbyBMZW1icmFyLW1lJyksXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlci51LW1hcmdpbmJvdHRvbS0zMCcsICdVbSBsZW1icmV0ZSBwb3IgZW1haWwgw6kgZW52aWFkbyA0OCBob3JhcyBhbnRlcyBkbyB0w6lybWlubyBkYSBzdWEgY2FtcGFuaGEnKSxcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1qdW1ibycsIHByb2plY3QucmVtaW5kZXJfY291bnQpXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RSZW1pbmRlckNvdW50O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5EYXNoYm9hcmRJbmZvIGNvbXBvbmVudFxuICogcmVuZGVyIGEgcm93IG9mIGluZm9ybWF0aW9uIHdpdGggYW4gaWNvbiBhbmQgYW4gb3B0aW9uYWwgY2FsbCB0byBhY3Rpb25cbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5EYXNoYm9hcmRJbmZvLCB7XG4gKiAgICAgIGNvbnRlbnQ6IHtcbiAqICAgICAgICAgIGljb246ICd1cmw6Ly90by5pY29uJyxcbiAqICAgICAgICAgIHRpdGxlOiAndGl0bGUnLFxuICogICAgICAgICAgaHJlZjogJyN3aGVyZS10bycsXG4gKiAgICAgICAgICBjdGE6ICduZXh0IHN0ZXAnXG4gKiAgICAgIH1cbiAqIH0pXG4gKiovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5jb25zdCBkYXNoYm9hcmRJbmZvID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCB0b1JlZHJhdyA9IGFyZ3MuZGF0YVRvUmVkcmF3IHx8IHt9LFxuICAgICAgICAgICAgICBsaXN0ZW5Ub1JlcGxhY2UgPSAoZWxlbWVudCwgaXNJbml0aWFsaXplZCwgY29udGV4dCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICBpZiAoaXNJbml0aWFsaXplZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICBfLm1hcChlbGVtZW50LmNoaWxkcmVuLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbGV0IHRvUiA9IHRvUmVkcmF3W2l0ZW0uZ2V0QXR0cmlidXRlKCdpZCcpXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmICh0b1IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVt0b1IuYWN0aW9uXSA9IHRvUi5hY3Rpb25Tb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpc3RlblRvUmVwbGFjZTogbGlzdGVuVG9SZXBsYWNlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGFyZ3MuY29udGVudDtcblxuICAgICAgICByZXR1cm4gbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02LnctY29sLXB1c2gtMycsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudS1tYXJnaW5ib3R0b20tMjAnLCB7c3JjOiBjb250ZW50Lmljb24sIHdpZHRoOiA5NH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMjAnLCBjb250ZW50LnRpdGxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTMwJywge2NvbmZpZzogY3RybC5saXN0ZW5Ub1JlcGxhY2V9LCBtLnRydXN0KGNvbnRlbnQudGV4dCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC5jdGEgPyBtKCdhLmJ0bi5idG4tbGFyZ2UuYnRuLWlubGluZScsIHtocmVmOiBjb250ZW50LmhyZWYsIG9uY2xpY2s6IGFyZ3MubmV4dFN0YWdlfSwgY29udGVudC5jdGEpIDogJydcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZGFzaGJvYXJkSW5mbztcbiIsIi8qKlxuICogd2luZG93LmMuUHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnRFcnJvciBjb21wb25lbnRcbiAqIHJlbmRlciBlcnJvciBmb3JtIHRvIGNvbGxlY3QgdXNlciBhbnN3ZXJcbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5Qcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudEVycm9yLCB7XG4gKiAgICBwcm9qZWN0QWNjb3VudDogcHJvamVjdEFjY291bnQsXG4gKiAgICBjaGFuZ2VUb0FjdGlvbjogY3RybC5jaGFuZ2VUb0FjdGlvbiAvL3Byb3ZpZGVkIGJ5IFByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50IGNvbnRyb2xsZXJcbiAqIH0pXG4gKiovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuc3VjY2Vzc2Z1bF9vbmJvYXJkLmNvbmZpcm1fYWNjb3VudC5yZWZ1c2UnKTtcblxuY29uc3QgcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnRFcnJvciA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZXJyb3JSZWFzb25NID0gbS5wcm9wKCcnKSxcbiAgICAgICAgZXJyb3IgPSBtLnByb3AoZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGFkZEVycm9yUmVhc29uID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yUmVhc29uTSgpLnRyaW0oKSA9PT0gJycpXHR7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yKHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJncy5hZGRFcnJvclJlYXNvbihlcnJvclJlYXNvbk0pLmNhbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWRkRXJyb3JSZWFzb246IGFkZEVycm9yUmVhc29uLFxuICAgICAgICAgICAgZXJyb3JSZWFzb25NOiBlcnJvclJlYXNvbk0sXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnLnctcm93LmJhbmstdHJhbnNmZXItYW5zd2VyJywgW1xuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtcHVzaC0zJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWZvcm0uYmFuay10cmFuc2Zlci1wcm9ibGVtLmNhcmQudS1yYWRpdXMnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2Zvcm0jc3VjY2Vzc2Z1bC1vbmJvYXJkLWVycm9yJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWlubGluZS1ibG9jay51LXJpZ2h0LmJ0bi5idG4tdGVyY2lhcnkuYnRuLW5vLWJvcmRlci5idG4taW5saW5lLmZhLmZhLWNsb3NlJywge2hyZWY6ICcjY29uZmlybV9hY2NvdW50Jywgb25jbGljazogYXJncy5jaGFuZ2VUb0FjdGlvbignc3RhcnQnKX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwuZmllbGQtbGFiZWwuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0yMCcsIEkxOG4udCgndGl0bGUnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgndGV4dGFyZWEudy1pbnB1dC50ZXh0LWZpZWxkJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBJMThuLnQoJ3BsYWNlaG9sZGVyJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmVycm9yKCkgPyAnZXJyb3InIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogKCkgPT4gY3RybC5lcnJvcihmYWxzZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5lcnJvclJlYXNvbk0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXJyb3IoKSA/IG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNvbC1wdXNoLTMudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC50ZXh0LWVycm9yJywgJ0NhbXBvIE9icmlnYXTDs3JpbycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jb2wtcHVzaC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tbWVkaXVtJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogJyNjb25maXJtX2FjY291bnRfcmVmdXNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwuYWRkRXJyb3JSZWFzb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgSTE4bi50KCdjdGEnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50RXJyb3I7XG4iLCIvKipcbiAqIHdpbmRvdy5jLlByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50QWNjZXB0IGNvbXBvbmVudFxuICogcmVuZGVyIGNvbmZpcm1hdGlvbiBtZXNzYWdlIHRvIGFjY2VwdCBiYW5rIGRhdGFcbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5Qcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudEFjY2VwdCwge1xuICogICAgcHJvamVjdEFjY291bnQ6IHByb2plY3RBY2NvdW50LFxuICogICAgY2hhbmdlVG9BY3Rpb246IGN0cmwuY2hhbmdlVG9BY3Rpb24gLy9wcm92aWRlZCBieSBQcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudCBjb250cm9sbGVyXG4gKiB9KVxuICoqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLnN1Y2Nlc3NmdWxfb25ib2FyZC5jb25maXJtX2FjY291bnQnKTtcblxuY29uc3QgcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnRBY2NlcHQgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcudy1yb3cuYmFuay10cmFuc2Zlci1hbnN3ZXInLCBbXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNvbC1wdXNoLTMnLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctZm9ybS5iYW5rLXRyYW5zZmVyLWNvbmZpcm0uY2FyZC51LXJhZGl1cycsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnZm9ybSNzdWNjZXNzZnVsLW9uYm9hcmQtZm9ybScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1pbmxpbmUtYmxvY2sudS1yaWdodC5idG4uYnRuLXRlcmNpYXJ5LmJ0bi1uby1ib3JkZXIuYnRuLWlubGluZS5mYS5mYS1jbG9zZScsIHtocmVmOiAnI2NvbmZpcm1fYWNjb3VudCcsIG9uY2xpY2s6IGFyZ3MuY2hhbmdlVG9BY3Rpb24oJ3N0YXJ0Jyl9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMjAnLCBJMThuLnQoJ2FjY2VwdC50aXRsZScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlci51LW1hcmdpbmJvdHRvbS0zMCcsIEkxOG4udCgnYWNjZXB0LmluZm8nLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXB1c2gtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFhcmdzLmFjY2VwdEFjY291bnRMb2FkZXIoKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tbWVkaXVtJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICcjYWNjZXB0X2FjY291bnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGFyZ3MuYWNjZXB0QWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgSTE4bi50KCdhY2NlcHQuY3RhJywgSTE4blNjb3BlKCkpKSA6IGgubG9hZGVyKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50QWNjZXB0O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Qcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudCBjb21wb25lbnRcbiAqIHJlbmRlciBwcm9qZWN0IGFjY291bnQgZGF0YSB0byBjb25maXJtIG9yIGFkZCBlcnJvclxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50LCB7cHJvamVjdEFjY291bnQ6IHByb2plY3RBY2NvdW50fSlcbiAqKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50RXJyb3IgZnJvbSAnLi9wcm9qZWN0LXN1Y2Nlc3NmdWwtb25ib2FyZC1jb25maXJtLWFjY291bnQtZXJyb3InO1xuaW1wb3J0IHByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50QWNjZXB0IGZyb20gJy4vcHJvamVjdC1zdWNjZXNzZnVsLW9uYm9hcmQtY29uZmlybS1hY2NvdW50LWFjY2VwdCc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLnN1Y2Nlc3NmdWxfb25ib2FyZC5jb25maXJtX2FjY291bnQnKTtcblxuY29uc3QgcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvblN0YWdlcyA9IHtcbiAgICAgICAgICAgICAgICAgICdlcnJvcic6IHByb2plY3RTdWNjZXNzZnVsT25ib2FyZENvbmZpcm1BY2NvdW50RXJyb3IsXG4gICAgICAgICAgICAgICAgICAnYWNjZXB0JzogcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnRBY2NlcHRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY3VycmVudFN0YWdlID0gbS5wcm9wKCdzdGFydCcpLFxuICAgICAgICAgICAgICBhY3Rpb25TdGFnZSA9ICgpID0+IGFjdGlvblN0YWdlc1tjdXJyZW50U3RhZ2UoKV0sXG4gICAgICAgICAgICAgIGNoYW5nZVRvQWN0aW9uID0gKHN0YWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGFnZShzdGFnZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGFuZ2VUb0FjdGlvbjogY2hhbmdlVG9BY3Rpb24sXG4gICAgICAgICAgICBhY3Rpb25TdGFnZTogYWN0aW9uU3RhZ2UsXG4gICAgICAgICAgICBjdXJyZW50U3RhZ2U6IGN1cnJlbnRTdGFnZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3RBY2NvdW50ID0gYXJncy5wcm9qZWN0QWNjb3VudCxcbiAgICAgICAgICAgICAgYWN0aW9uU3RhZ2UgPSBjdHJsLmFjdGlvblN0YWdlLFxuICAgICAgICAgICAgICBjdXJyZW50U3RhZ2UgPSBjdHJsLmN1cnJlbnRTdGFnZSxcbiAgICAgICAgICAgICAgcGVyc29uS2luZCA9IChwcm9qZWN0QWNjb3VudC5vd25lcl9kb2N1bWVudC5sZW5ndGggPiAxNCA/ICdqdXJpZGljYWwnIDogJ25hdHVyYWwnKSxcbiAgICAgICAgICAgICAganVyaWRpY2FsUGVyc29uID0gcHJvamVjdEFjY291bnQub3duZXJfZG9jdW1lbnQubGVuZ3RoID4gMTQ7XG5cbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbnRhaW5lci51LW1hcmdpbmJvdHRvbS00MCcsIFtcbiAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCd0aXRsZScsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0zMC5jYXJkLmNhcmQtdGVyY2lhcnknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdwZXJzb24ubGFiZWwnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udChgcGVyc29uLiR7cGVyc29uS2luZH0ubGFiZWxgLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udChgcGVyc29uLiR7cGVyc29uS2luZH0ubmFtZWAsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdEFjY291bnQub3duZXJfbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoKHByb2plY3RBY2NvdW50LnN0YXRlX2luc2NyaXB0aW9uICYmIGp1cmlkaWNhbFBlcnNvbikgPyBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KGBwZXJzb24uc3RhdGVfaW5zY3JpcHRpb25gLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RBY2NvdW50LnN0YXRlX2luc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoYHBlcnNvbi4ke3BlcnNvbktpbmR9LmRvY3VtZW50YCwgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0QWNjb3VudC5vd25lcl9kb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdwZXJzb24uYmFuay5uYW1lJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0QWNjb3VudC5iYW5rX25hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udCgncGVyc29uLmJhbmsuYWdlbmN5JywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtwcm9qZWN0QWNjb3VudC5hZ2VuY3l9JHsoXy5pc0VtcHR5KHByb2plY3RBY2NvdW50LmFnZW5jeV9kaWdpdCkgPyAnJyA6IGAtJHtwcm9qZWN0QWNjb3VudC5hZ2VuY3lfZGlnaXR9YCl9YFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdwZXJzb24uYmFuay5hY2NvdW50JywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtwcm9qZWN0QWNjb3VudC5hY2NvdW50fS0ke3Byb2plY3RBY2NvdW50LmFjY291bnRfZGlnaXR9YFxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tMzAuY2FyZC5jYXJkLXRlcmNpYXJ5JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udCgncGVyc29uLmFkZHJlc3MnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3Byb2plY3RBY2NvdW50LmFkZHJlc3Nfc3RyZWV0fSwgJHtwcm9qZWN0QWNjb3VudC5hZGRyZXNzX251bWJlcn0gJHsoIV8uaXNOdWxsKHByb2plY3RBY2NvdW50LmFkZHJlc3NfY29tcGxlbWVudCkgPyBgLCAke3Byb2plY3RBY2NvdW50LmFkZHJlc3NfY29tcGxlbWVudH1gIDogJycpfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udCgncGVyc29uLm5laWdoYm91cmhvb2QnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RBY2NvdW50LmFkZHJlc3NfbmVpZ2hib3VyaG9vZFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdwZXJzb24uY2l0eScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdEFjY291bnQuYWRkcmVzc19jaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ3BlcnNvbi5zdGF0ZScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdEFjY291bnQuYWRkcmVzc19zdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdwZXJzb24uemlwX2NvZGUnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RBY2NvdW50LmFkZHJlc3NfemlwX2NvZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIChjdXJyZW50U3RhZ2UoKSA9PT0gJ3N0YXJ0JykgPyBtKCcjY29uZmlybWF0aW9uLWRpYWxvZy53LXJvdy5iYW5rLXRyYW5zZmVyLWFuc3dlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JyksXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2EjY29uZmlybS1hY2NvdW50LmJ0bi5idG4tbGFyZ2UnLCB7aHJlZjogJyNjb25maXJtX2FjY291bnQnLCBvbmNsaWNrOiBjdHJsLmNoYW5nZVRvQWN0aW9uKCdhY2NlcHQnKX0sICdTaW0nKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdhI3JlZnVzZS1hY2NvdW50LmJ0bi5idG4tbGFyZ2UuYnRuLXRlcmNpYXJ5Jywge2hyZWY6ICcjZXJyb3JfYWNjb3VudCcsIG9uY2xpY2s6IGN0cmwuY2hhbmdlVG9BY3Rpb24oJ2Vycm9yJyl9LCAnTsOjbycpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScpXG4gICAgICAgICAgICBdKSA6IG0uY29tcG9uZW50KGFjdGlvblN0YWdlKCksIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0QWNjb3VudDogcHJvamVjdEFjY291bnQsXG4gICAgICAgICAgICAgICAgY2hhbmdlVG9BY3Rpb246IGN0cmwuY2hhbmdlVG9BY3Rpb24sXG4gICAgICAgICAgICAgICAgYWRkRXJyb3JSZWFzb246IGFyZ3MuYWRkRXJyb3JSZWFzb24sXG4gICAgICAgICAgICAgICAgYWNjZXB0QWNjb3VudDogYXJncy5hY2NlcHRBY2NvdW50LFxuICAgICAgICAgICAgICAgIGFjY2VwdEFjY291bnRMb2FkZXI6IGFyZ3MuYWNjZXB0QWNjb3VudExvYWRlclxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkQ29uZmlybUFjY291bnQ7XG4iLCIvKipcbiAqIHdpbmRvdy5jLlN1Y2Nlc3NmdWxQcm9qZWN0VGF4TW9kYWwgY29tcG9uZW50XG4gKiBNb2RhbCBjb250ZW50IGZvciBzaG93IHByb2plY3QgdHJhbnNmZXIgY29tcGxldGUgdmFsdWVzIGRhdGFcbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3Qgc3VjY2Vzc2Z1bFByb2plY3RUYXhNb2RhbCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IHB0ID0gYXJncy5wcm9qZWN0VHJhbnNmZXI7XG5cbiAgICAgICAgcmV0dXJuIG0oJ2RpdicsW1xuICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1oZWFkZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXInLFxuICAgICAgICAgICAgICAgICAgJ0V4dHJhdG8gZG8gcHJvamV0bycpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctY29udGVudCcsIFtcbiAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLXNtYWxsLnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgICAgICAnQ29uZmlyYSBvIGV4dHJhdG8gZG8gc2V1IHByb2pldG8sIGrDoSBpbmNsdWluZG8gYXMgdGF4YXMgZSByZXRlbsOnw7Vlcy4gU2Ugdm9jw6ogdGl2ZXIgZMO6dmlkYXMgc29icmUgY29tbyBlc3NlIGPDoWxjdWxvIMOpIGZlaXRvLCAnLFxuICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XCJodHRwOi8vc3Vwb3J0ZS5jYXRhcnNlLm1lL2hjL3B0LWJyL2FydGljbGVzLzIwMjAzNzQ5My1GSU5BTkNJQURPLUNvbW8tc2VyJUMzJUExLWZlaXRvLW8tcmVwYXNzZS1kby1kaW5oZWlyby1cIl1bdGFyZ2V0PVwiX19ibGFua1wiXScsICdhY2Vzc2UgYXF1aScpLFxuICAgICAgICAgICAgICAgICAgICAnLidcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy50ZXh0LXN1Y2Nlc3MnLCBgK8KgUiQgJHtoLmZvcm1hdE51bWJlcihwdC5wbGVkZ2VkLCAyKX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBgQXJyZWNhZGHDp8OjbyB0b3RhbCAoJHtwdC50b3RhbF9jb250cmlidXRpb25zfSBhcG9pb3MpYClcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAocHQuaXJyZl90YXggPiAwID9cbiAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnRleHQtc3VjY2VzcycsIGArIFIkICR7aC5mb3JtYXROdW1iZXIocHQuaXJyZl90YXgsIDIpfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsICdSZXRlbsOnw6NvIElSRiAoSW1wb3N0byBkZSBSZW5kYSBuYSBGb250ZSknKVxuICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LmZvbnRzaXplLXNtYWxsLnUtbWFyZ2luYm90dG9tLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnRleHQtZXJyb3InLCBgLSBSJCAke2guZm9ybWF0TnVtYmVyKHB0LmNhdGFyc2VfZmVlLCAyKX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBgVGF4YSBkbyBDYXRhcnNlIGUgbWVpbyBkZSBwYWdhbWVudG8gKCR7aC5mb3JtYXROdW1iZXIoKHB0LnNlcnZpY2VfZmVlICogMTAwKSwgMil9JSnCoGApXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmRpdmlkZXIudS1tYXJnaW5ib3R0b20tMTAnKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIGBSJCAke2guZm9ybWF0TnVtYmVyKHB0LnRvdGFsX2Ftb3VudCwgMil9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgJ1RvdGFsIGEgc2VyIHRyYW5zZmVyaWRvJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHN1Y2Nlc3NmdWxQcm9qZWN0VGF4TW9kYWw7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLnN1Y2Nlc3NmdWxfb25ib2FyZCcpO1xuXG5jb25zdCBwYXJzZUFjY291bnREYXRhID0gKGFjY291bnQsIHRyYW5zZmVyKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHJhbnNmZXJfbGltaXRfZGF0ZTogaC5tb21lbnRpZnkoYWNjb3VudC50cmFuc2Zlcl9saW1pdF9kYXRlKSxcbiAgICAgICAgdG90YWxfYW1vdW50OiBoLmZvcm1hdE51bWJlcih0cmFuc2Zlci50b3RhbF9hbW91bnQsIDIpLFxuICAgICAgICBiYW5rX25hbWU6IGFjY291bnQuYmFua19uYW1lLFxuICAgICAgICBhZ2VuY3k6IGAke2FjY291bnQuYWdlbmN5fSR7YWNjb3VudC5hZ2VuY3lfZGlnaXQgPyAnLScgKyBhY2NvdW50LmFnZW5jeV9kaWdpdCA6ICcnfWAsXG4gICAgICAgIGFjY291bnQ6IGAke2FjY291bnQuYWNjb3VudH0ke2FjY291bnQuYWNjb3VudF9kaWdpdCA/ICctJyArIGFjY291bnQuYWNjb3VudF9kaWdpdCA6ICcnfWAsXG4gICAgICAgIHVzZXJfZW1haWw6IGFjY291bnQudXNlcl9lbWFpbFxuICAgIH07XG59O1xuXG5jb25zdCBpbnNpZ2h0Vk0gPSB7XG4gICAgY29udGVudChzdGF0ZSwgZGF0YSkge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbnMgPSBJMThuLnRyYW5zbGF0aW9uc1tcbiAgICAgICAgICAgIEkxOG4uY3VycmVudExvY2FsZSgpXG4gICAgICAgIF0ucHJvamVjdHMuc3VjY2Vzc2Z1bF9vbmJvYXJkW3N0YXRlXSxcbiAgICAgICAgICAgICAgdHJhbnNsYXRpb25Db250ZXh0ID0gKHN0YXRlID09PSAnZmluaXNoZWQnID8ge30gOiBwYXJzZUFjY291bnREYXRhKFxuICAgICAgICAgICAgICAgICAgXy5maXJzdChkYXRhLmFjY291bnQoKSksXG4gICAgICAgICAgICAgICAgICBfLmZpcnN0KGRhdGEudHJhbnNmZXIoKSlcbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgIGxldCBjb250ZW50T2JqID0ge307XG5cbiAgICAgICAgXy5tYXAodHJhbnNsYXRpb25zLCAodHJhbnNsYXRpb24sIHRyYW5zbGF0aW9uS2V5KSA9PiB7XG4gICAgICAgICAgICBjb250ZW50T2JqID0gXy5leHRlbmQoe30sIGNvbnRlbnRPYmosIHtcbiAgICAgICAgICAgICAgICBbdHJhbnNsYXRpb25LZXldOiBJMThuLnQoYCR7c3RhdGV9LiR7dHJhbnNsYXRpb25LZXl9YCwgSTE4blNjb3BlKHRyYW5zbGF0aW9uQ29udGV4dCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb250ZW50T2JqO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGluc2lnaHRWTTtcbiIsIi8qKlxuICogd2luZG93LmMuUHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkIGNvbXBvbmVudFxuICogcmVuZGVyIGZpcnN0IGludGVyYWN0aW9uIG9mIHN1Y2Nlc3NmdWwgcHJvamVjdCBvbmJvYXJkaW5nXG4gKiB1c2VkIHdoZW4gcHJvamVjdCBpcyBzdWNjZXNzZnVsIGFuZCB3YW50cyB0byBjb25maXJtIGJhbmsgZGF0YSBhbmQgcmVxdWVzdCB0cmFuc2ZlclxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlByb2plY3RTdWNjZXNzZnVsT25ib2FyZCwge3Byb2plY3Q6IHByb2plY3R9KVxuICoqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgZGFzaGJvYXJkSW5mbyBmcm9tICcuL2Rhc2hib2FyZC1pbmZvJztcbmltcG9ydCBwcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudCBmcm9tICcuL3Byb2plY3Qtc3VjY2Vzc2Z1bC1vbmJvYXJkLWNvbmZpcm0tYWNjb3VudCc7XG5pbXBvcnQgbW9kYWxCb3ggZnJvbSAnLi9tb2RhbC1ib3gnO1xuaW1wb3J0IHN1Y2Nlc3NmdWxQcm9qZWN0VGF4TW9kYWwgZnJvbSAnLi9zdWNjZXNzZnVsLXByb2plY3QtdGF4LW1vZGFsJztcbmltcG9ydCBpbnNpZ2h0Vk0gZnJvbSAnLi4vdm1zL2luc2lnaHQtdm0nO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5zdWNjZXNzZnVsX29uYm9hcmQnKTtcblxuY29uc3QgcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0SWRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3Byb2plY3RfaWQ6ICdlcSd9KSxcbiAgICAgICAgICAgICAgcHJvamVjdEFjY291bnRzID0gbS5wcm9wKFtdKSxcbiAgICAgICAgICAgICAgcHJvamVjdFRyYW5zZmVycyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICAgIHNob3dUYXhNb2RhbCA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICAgIG9uYm9hcmRDb21wb25lbnRzID0ge1xuICAgICAgICAgICAgICAgICAgJ3N0YXJ0JzogZGFzaGJvYXJkSW5mbyxcbiAgICAgICAgICAgICAgICAgICdjb25maXJtX2FjY291bnQnOiBwcm9qZWN0U3VjY2Vzc2Z1bE9uYm9hcmRDb25maXJtQWNjb3VudCxcbiAgICAgICAgICAgICAgICAgICdlcnJvcl9hY2NvdW50JzogZGFzaGJvYXJkSW5mbyxcbiAgICAgICAgICAgICAgICAgICdwZW5kaW5nX3RyYW5zZmVyJzogZGFzaGJvYXJkSW5mbyxcbiAgICAgICAgICAgICAgICAgICdmaW5pc2hlZCc6IGRhc2hib2FyZEluZm9cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gbS5wcm9wKCdzdGFydCcpLFxuICAgICAgICAgICAgICBjdXJyZW50Q29tcG9uZW50ID0gKCkgPT4gb25ib2FyZENvbXBvbmVudHNbY3VycmVudFN0YXRlKCldLFxuICAgICAgICAgICAgICBjb250ZW50ID0gKCkgPT4gaW5zaWdodFZNLmNvbnRlbnQoY3VycmVudFN0YXRlKCksIHtcbiAgICAgICAgICAgICAgICAgIGFjY291bnQ6IHByb2plY3RBY2NvdW50cyxcbiAgICAgICAgICAgICAgICAgIHRyYW5zZmVyOiBwcm9qZWN0VHJhbnNmZXJzLFxuICAgICAgICAgICAgICAgICAgc2hvd1RheE1vZGFsOiBzaG93VGF4TW9kYWxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIGxvYWRlciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4sXG4gICAgICAgICAgICAgIGRlY2xpbmVBY2NvdW50TG9hZGVyID0gKGVycm9yTXNnKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBwYSA9IF8uZmlyc3QocHJvamVjdEFjY291bnRzKCkpO1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbHMucHJvamVjdEFjY291bnRFcnJvci5wb3N0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6IGFyZ3MucHJvamVjdCgpLnByb2plY3RfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFjY2VwdEFjY291bnRMb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKFxuICAgICAgICAgICAgICAgICAgbW9kZWxzLnByb2plY3RBY2NvdW50LnBvc3RPcHRpb25zKHtcbiAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiBhcmdzLnByb2plY3QoKS5wcm9qZWN0X2lkXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgIHByb2plY3RJZFZNLnByb2plY3RfaWQoYXJncy5wcm9qZWN0KCkucHJvamVjdF9pZCk7XG5cbiAgICAgICAgY29uc3QgbFByb2plY3RBY2NvdW50ID0gbG9hZGVyKG1vZGVscy5wcm9qZWN0QWNjb3VudC5nZXRSb3dPcHRpb25zKHByb2plY3RJZFZNLnBhcmFtZXRlcnMoKSkpO1xuICAgICAgICBsUHJvamVjdEFjY291bnQubG9hZCgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHByb2plY3RBY2NvdW50cyhkYXRhKTtcblxuICAgICAgICAgICAgbG9hZEN1cnJlbnRTdGFnZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBsUHJvamVjdFRyYW5zZmVyID0gbG9hZGVyKG1vZGVscy5wcm9qZWN0VHJhbnNmZXIuZ2V0Um93T3B0aW9ucyhwcm9qZWN0SWRWTS5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgbFByb2plY3RUcmFuc2Zlci5sb2FkKCkudGhlbihwcm9qZWN0VHJhbnNmZXJzKTtcblxuICAgICAgICBjb25zdCBzZXRTdGFnZSA9IChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgY3VycmVudFN0YXRlKHN0YXRlKTtcblxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDb21wb25lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgICAgICAgIG5leHRTdGFnZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBfLmtleXMob25ib2FyZENvbXBvbmVudHMpLFxuICAgICAgICAgICAgICAgICAgICBuZXh0S2V5ID0ga2V5c1tfLmluZGV4T2Yoa2V5cywgY3VycmVudFN0YXRlKCkpICsgMV07XG5cbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZShuZXh0S2V5KTtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDb21wb25lbnQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGxvYWRDdXJyZW50U3RhZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWxQcm9qZWN0QWNjb3VudCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGEgPSBfLmZpcnN0KHByb2plY3RBY2NvdW50cygpKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmlzTnVsbChwYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFN0YWdlKCdmaW5pc2hlZCcpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNOdWxsKHBhLmVycm9yX3JlYXNvbikgJiYgXy5pc051bGwocGEudHJhbnNmZXJfc3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRTdGFnZSgnc3RhcnQnKSgpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIV8uaXNOdWxsKHBhLmVycm9yX3JlYXNvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFN0YWdlKCdlcnJvcl9hY2NvdW50JykoKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFfLmlzTnVsbChwYS50cmFuc2Zlcl9zdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhLnRyYW5zZmVyX3N0YXRlID09ICd0cmFuc2ZlcnJlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRTdGFnZSgnZmluaXNoZWQnKSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFN0YWdlKCdwZW5kaW5nX3RyYW5zZmVyJykoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgIC8vIFRPRE86IG5lZWQgdG8gYWRkIGFuIGVycm9yIHZhbGlkYXRpb24gdG8gbm90IG51bGxcbiAgICAgICAgICAgICAgYWRkRXJyb3JSZWFzb24gPSAoZXJyb3JQcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZuID0gZGVjbGluZUFjY291bnRMb2FkZXIoZXJyb3JQcm9wKCkpO1xuICAgICAgICAgICAgICAgICAgICAgIGZuLmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U3RhZ2UoJ2Vycm9yX2FjY291bnQnKSgpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICBhY2NlcHRBY2NvdW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgYWNjZXB0QWNjb3VudExvYWRlci5sb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgc2V0U3RhZ2UoJ3BlbmRpbmdfdHJhbnNmZXInKSgpO1xuICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvamVjdEFjY291bnRzOiBwcm9qZWN0QWNjb3VudHMsXG4gICAgICAgICAgICBwcm9qZWN0VHJhbnNmZXJzOiBwcm9qZWN0VHJhbnNmZXJzLFxuICAgICAgICAgICAgbFByb2plY3RBY2NvdW50OiBsUHJvamVjdEFjY291bnQsXG4gICAgICAgICAgICBsUHJvamVjdFRyYW5zZmVyOiBsUHJvamVjdFRyYW5zZmVyLFxuICAgICAgICAgICAgc2V0U3RhZ2U6IHNldFN0YWdlLFxuICAgICAgICAgICAgbmV4dFN0YWdlOiBuZXh0U3RhZ2UsXG4gICAgICAgICAgICBjdXJyZW50Q29tcG9uZW50OiBjdXJyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgYWRkRXJyb3JSZWFzb246IGFkZEVycm9yUmVhc29uLFxuICAgICAgICAgICAgYWNjZXB0QWNjb3VudDogYWNjZXB0QWNjb3VudCxcbiAgICAgICAgICAgIGFjY2VwdEFjY291bnRMb2FkZXI6IGFjY2VwdEFjY291bnRMb2FkZXIsXG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgZGVjbGluZUFjY291bnRMb2FkZXI6IGRlY2xpbmVBY2NvdW50TG9hZGVyLFxuICAgICAgICAgICAgbG9hZEN1cnJlbnRTdGFnZTogbG9hZEN1cnJlbnRTdGFnZSxcbiAgICAgICAgICAgIHNob3dUYXhNb2RhbDogc2hvd1RheE1vZGFsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdEFjY291bnQgPSBfLmZpcnN0KGN0cmwucHJvamVjdEFjY291bnRzKCkpLFxuICAgICAgICAgICAgICBwcm9qZWN0VHJhbnNmZXIgPSBfLmZpcnN0KGN0cmwucHJvamVjdFRyYW5zZmVycygpKSxcbiAgICAgICAgICAgICAgbHBhID0gY3RybC5sUHJvamVjdEFjY291bnQsXG4gICAgICAgICAgICAgIGxwdCA9IGN0cmwubFByb2plY3RUcmFuc2ZlcjtcblxuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5zZWN0aW9uJywgW1xuICAgICAgICAgICAgKGN0cmwuc2hvd1RheE1vZGFsKCkgPyBtLmNvbXBvbmVudChtb2RhbEJveCwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlNb2RhbDogY3RybC5zaG93VGF4TW9kYWwsXG4gICAgICAgICAgICAgICAgY29udGVudDogW3N1Y2Nlc3NmdWxQcm9qZWN0VGF4TW9kYWwsIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdFRyYW5zZmVyOiBwcm9qZWN0VHJhbnNmZXJcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSkgOiAnJyksXG4gICAgICAgICAgICAoIWxwYSgpICYmICFscHQoKSA/XG4gICAgICAgICAgICAgbS5jb21wb25lbnQoY3RybC5jdXJyZW50Q29tcG9uZW50KCksIHtcbiAgICAgICAgICAgICAgICAgcHJvamVjdFRyYW5zZmVyOiBwcm9qZWN0VHJhbnNmZXIsXG4gICAgICAgICAgICAgICAgIHByb2plY3RBY2NvdW50OiBwcm9qZWN0QWNjb3VudCxcbiAgICAgICAgICAgICAgICAgc2V0U3RhZ2U6IGN0cmwuc2V0U3RhZ2UsXG4gICAgICAgICAgICAgICAgIGFkZEVycm9yUmVhc29uOiBjdHJsLmFkZEVycm9yUmVhc29uLFxuICAgICAgICAgICAgICAgICBhY2NlcHRBY2NvdW50OiBjdHJsLmFjY2VwdEFjY291bnQsXG4gICAgICAgICAgICAgICAgIGFjY2VwdEFjY291bnRMb2FkZXI6IGN0cmwuYWNjZXB0QWNjb3VudExvYWRlcixcbiAgICAgICAgICAgICAgICAgbmV4dFN0YWdlOiBjdHJsLm5leHRTdGFnZSxcbiAgICAgICAgICAgICAgICAgY29udGVudDogY3RybC5jb250ZW50KCksXG4gICAgICAgICAgICAgICAgIGRhdGFUb1JlZHJhdzoge1xuICAgICAgICAgICAgICAgICAgICAgJ3RheF9saW5rJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ29uY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvblNvdXJjZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNob3dUYXhNb2RhbC50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9KSA6IGgubG9hZGVyKCkpXG5cbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmNvbnN0IGZhY2Vib29rQnV0dG9uID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBzaGFyZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChGQil7XG4gICAgICAgICAgICAgICAgRkIudWkoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFyZ3MubWVzc2VuZ2VyID8gJ3NlbmQnIDogJ3NoYXJlJyxcbiAgICAgICAgICAgICAgICAgICAgbGluazogYXJncy51cmwsXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6IGFyZ3MudXJsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaGFyZTogc2hhcmVcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBidXR0b25Dc3MgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXJncy5tb2JpbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3ctaGlkZGVuLW1haW4gdy1oaWRkZW4tbWVkaXVtIHUtbWFyZ2luYm90dG9tLTIwIGJ0biBidG4tbWVkaXVtIGJ0bi1mYic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3MuYmlnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdidG4gYnRuLWZiIGJ0bi1sYXJnZSB1LW1hcmdpbmJvdHRvbS0yMCB3LWJ1dHRvbic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3MubWVkaXVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBidG4gJHthcmdzLm1lc3NlbmdlciA/ICdidG4tbWVzc2VuZ2VyJyA6ICdidG4tZmInfSBidG4tbWVkaXVtIHUtbWFyZ2luYm90dG9tLTIwIHctYnV0dG9uYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdidG4gYnRuLWlubGluZSBidG4tbWVkaXVtIGJ0bi10ZXJjaWFyeSB1LW1hcmdpbnJpZ2h0LTIwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnYnV0dG9uJyx7XG4gICAgICAgICAgICBjbGFzczogYnV0dG9uQ3NzKCksXG4gICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnNoYXJlXG4gICAgICAgIH0sW1xuICAgICAgICAgICAgbSgnc3Bhbi5mYScsIHtcbiAgICAgICAgICAgICAgICBjbGFzczogYXJncy5tZXNzZW5nZXIgPyAnZmEtY29tbWVudCcgOiAnZmEtZmFjZWJvb2snXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGFyZ3MubWVzc2VuZ2VyID8gJyBNZXNzZW5nZXInIDogJyBGYWNlYm9vaydcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZmFjZWJvb2tCdXR0b247XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBwb3BOb3RpZmljYXRpb24gPSB7XG4gICAgY29udHJvbGxlcigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3BsYXlOb3RpZmljYXRpb246IGgudG9nZ2xlUHJvcCh0cnVlLCBmYWxzZSlcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gKGN0cmwuZGlzcGxheU5vdGlmaWNhdGlvbigpID8gbSgnLmZsYXNoLnctY2xlYXJmaXguY2FyZC5jYXJkLW5vdGlmaWNhdGlvbi51LXJhZGl1cy56aW5kZXgtMjAnLCBbXG4gICAgICAgICAgICBtKCdpbWcuaWNvbi1jbG9zZVtzcmM9XCIvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL3gucG5nXCJdW3dpZHRoPVwiMTJcIl1bYWx0PVwiZmVjaGFyXCJdJywge1xuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwuZGlzcGxheU5vdGlmaWNhdGlvbi50b2dnbGVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsJywgYXJncy5tZXNzYWdlKVxuICAgICAgICBdKSA6IG0oJ3NwYW4nKSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcG9wTm90aWZpY2F0aW9uO1xuIiwiLyoqXG4gKiBjb3B5VGV4dElucHV0IGNvbXBvbmVudFxuICogRGlzcGxheXMgYSB0ZXh0IGlucHV0IHRoYXQgY29waWVzIGl0J3MgY29udGVudCBvbiBjbGlja1xuICpcbiAqIEV4YW1wbGUgb2YgdXNlOlxuICogdmlldzogKCkgPT4ge1xuICogICAuLi5cbiAqICAgbS5jb21wb25lbnQoY29weVRleHRJbnB1dCwge3ZhbHVlOiAnc29tZSB2YWx1ZSd9KVxuICogICAuLi5cbiAqIH1cbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcG9wTm90aWZpY2F0aW9uIGZyb20gJy4vcG9wLW5vdGlmaWNhdGlvbic7XG5cbmNvbnN0IGNvcHlUZXh0SW5wdXQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IHNob3dTdWNjZXNzID0gbS5wcm9wKGZhbHNlKTtcblxuICAgICAgICBjb25zdCBzZWxlY3QgPSAoZWwpID0+IHtcbiAgICAgICAgICAgIGxldCByYW5nZSwgc2VsZWN0aW9uO1xuXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuYm9keS5jcmVhdGVUZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IGRvY3VtZW50LmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvRWxlbWVudFRleHQoZWwpO1xuICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMoZWwpO1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHNldENsaWNrSGFuZGxlciA9IChlbCwgaXNJbml0aWFsaXplZCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNvcHk7XG4gICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dGFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29weS10ZXh0YXJlYScpO1xuICAgICAgICAgICAgICAgIGVsLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdCh0ZXh0YXJlYSk7XG4gICAgICAgICAgICAgICAgICAgIGNvcHkgPSBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29weSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1N1Y2Nlc3ModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEuYmx1cigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRDbGlja0hhbmRsZXI6IHNldENsaWNrSGFuZGxlcixcbiAgICAgICAgICAgIHNob3dTdWNjZXNzOiBzaG93U3VjY2Vzc1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcjY2xpcGJvYXJkLnctcm93JywgW1xuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnctY29sLXNtYWxsLTEwLnctY29sLXRpbnktMTAnLCBtKGB0ZXh0YXJlYSNjb3B5LXRleHRhcmVhLnBvc2l0aXZlLnRleHQtZmllbGQudy1pbnB1dGAsIHtcbiAgICAgICAgICAgICAgICBzdHlsZTogJ21hcmdpbi1ib3R0b206MDsnXG4gICAgICAgICAgICB9LCBhcmdzLnZhbHVlKSksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1zbWFsbC0yLnctY29sLXRpbnktMicsIG0oJy5idG4uYnRuLW1lZGl1bS5idG4tbm8tYm9yZGVyLmJ0bi10ZXJjaWFyeS5mYS5mYS1jbGlwYm9hcmQudy1idXR0b24nLCB7XG4gICAgICAgICAgICAgICAgY29uZmlnOiBjdHJsLnNldENsaWNrSGFuZGxlclxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgY3RybC5zaG93U3VjY2VzcygpID8gbS5jb21wb25lbnQocG9wTm90aWZpY2F0aW9uLCB7bWVzc2FnZTogJ0xpbmsgY29waWFkbyd9KSA6ICcnXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlUZXh0SW5wdXQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuXG5jb25zdCBpbnZpdGVFbWFpbHNGcm9tSW1wb3J0ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBjaGVja2VkTGlzdCA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICAgIGxvYWRpbmcgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgICBmaWx0ZXJUZXJtID0gbS5wcm9wKCcnKSxcbiAgICAgICAgICAgICAgZmlsdGVyZWREYXRhID0gbS5wcm9wKGFyZ3MuZGF0YUVtYWlscygpKSxcbiAgICAgICAgICAgICAgZmlsdGVyaW5nID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgICAgb25DaGVja0dlbmVyYXRvciA9IChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoRW1haWwgPSAocmVzb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLmVtYWlsID09PSBpdGVtLmVtYWlsO1xuICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKF8uZmluZChjaGVja2VkTGlzdCgpLCBtYXRjaEVtYWlsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkTGlzdChfLnJlamVjdChjaGVja2VkTGlzdCgpLCBtYXRjaEVtYWlsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZExpc3QoKS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN1Ym1pdEludml0ZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBsb2FkaW5nKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShjaGVja2VkTGlzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbHMuaW52aXRlUHJvamVjdEVtYWlsLnBvc3RPcHRpb25zKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiBhcmdzLnByb2plY3QucHJvamVjdF9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbHM6IF8ubWFwKGNoZWNrZWRMaXN0KCksICh4KSA9PiB7IHJldHVybiB4LmVtYWlsOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkubG9hZCgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MubW9kYWxUb2dnbGUudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3Muc2hvd1N1Y2Nlc3ModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzZWFyY2ggPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWZpbHRlcmluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZmlsdGVyaW5nKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWFyY2hGaWx0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hTZWFyY2ggPSAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gYFxcYiR7Xy5lc2NhcGUoZmlsdGVyVGVybSgpKX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybiwnZ2ltJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFfLmlzTnVsbChpdGVtLmVtYWlsLm1hdGNoKHJlZ2V4KSkgfHwgIV8uaXNOdWxsKGl0ZW0ubmFtZS5tYXRjaChyZWdleCkpO1xuICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShmaWx0ZXJUZXJtKCkpIHx8ICFfLmlzVW5kZWZpbmVkKGZpbHRlclRlcm0oKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoRmlsdGVyID0gXy5maWx0ZXIoYXJncy5kYXRhRW1haWxzKCksIG1hdGNoU2VhcmNoKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWFyY2hGaWx0ZXIgfHwgYXJncy5kYXRhRW1haWxzO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvbkNoZWNrR2VuZXJhdG9yOiBvbkNoZWNrR2VuZXJhdG9yLFxuICAgICAgICAgICAgc3VibWl0SW52aXRlczogc3VibWl0SW52aXRlcyxcbiAgICAgICAgICAgIGNoZWNrZWRMaXN0OiBjaGVja2VkTGlzdCxcbiAgICAgICAgICAgIGZpbHRlclRlcm06IGZpbHRlclRlcm0sXG4gICAgICAgICAgICBsb2FkaW5nOiBsb2FkaW5nLFxuICAgICAgICAgICAgc2VhcmNoOiBzZWFyY2gsXG4gICAgICAgICAgICBmaWx0ZXJlZERhdGE6IGZpbHRlcmVkRGF0YSxcbiAgICAgICAgICAgIGZpbHRlcmluZzogZmlsdGVyaW5nXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdDtcblxuICAgICAgICByZXR1cm4gbSgnZGl2JywgW1xuICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1oZWFkZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXInLFxuICAgICAgICAgICAgICAgICAgJ0NvbnZpZGUgc2V1cyBhbWlnb3MnKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQnLCAoIWFyZ3MubG9hZGluZ0NvbnRhY3RzKCkgJiYgIWN0cmwubG9hZGluZygpID8gW1xuICAgICAgICAgICAgICAgIG0oJy5maWx0ZXItYXJlYScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2ludG9wLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctc3ViLWNvbC53LWNvbC53LWNvbC0xMicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdmb3JtW2FjdGlvbj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZFt0eXBlPVwidGV4dFwiXVtwbGFjZWhvbGRlcj1cIkJ1c3F1ZSBwZWxvIG5vbWUgb3UgZW1haWwuXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25rZXl1cDogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLmZpbHRlclRlcm0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IChlKSA9PiB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy5lbWFpbHMtYXJlYS51LW1hcmdpbnRvcC00MCcsIHtzdHlsZToge2hlaWdodDogJzI1MHB4JywgJ292ZXJmbG93LXgnOiAnYXV0byd9fSxcbiAgICAgICAgICAgICAgICAgIChjdHJsLmZpbHRlcmluZygpID8gaC5sb2FkZXIoKSA6IF8ubWFwKGN0cmwuc2VhcmNoKCksIChpdGVtLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctc3ViLWNvbC53LWNvbC53LWNvbC0xJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgaW5wdXRbdHlwZT0nY2hlY2tib3gnXVtuYW1lPSdjaGVja18ke2l9J11gLCB7b25jaGFuZ2U6IGN0cmwub25DaGVja0dlbmVyYXRvcihpdGVtKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1zdWItY29sLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsYWJlbC5mb250c2l6ZS1zbWFsbFtmb3I9J2NoZWNrXyR7aX0nXWAsIGl0ZW0ubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXN1Yi1jb2wudy1jb2wudy1jb2wtNycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGxhYmVsLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPSdjaGVja18ke2l9J11gLCBpdGVtLmVtYWlsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSA6IGgubG9hZGVyKCkpKSxcbiAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctbmF2LWJvdHRvbS51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICghYXJncy5sb2FkaW5nQ29udGFjdHMoKSAmJiAhY3RybC5sb2FkaW5nKCkgJiYgIWN0cmwuZmlsdGVyaW5nKCkgP1xuICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci51LW1hcmdpbnRvcC0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgIG0oJ2EuYnRuLmJ0bi1pbmxpbmUuYnRuLW1lZGl1bS53LWJ1dHRvbltocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwuc3VibWl0SW52aXRlc1xuICAgICAgICAgICAgICAgICAgICAgfSwgYEVudmlhciAke2N0cmwuY2hlY2tlZExpc3QoKS5sZW5ndGh9IGNvbnZpdGVzYClcbiAgICAgICAgICAgICAgICAgXSkgOiAoIWN0cmwubG9hZGluZygpID8gJ2NhcnJlZ2FuZG8gY29udGF0b3MuLi4nIDogJ2VudmlhbmRvIGNvbnZpdGVzLi4uJykpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbnZpdGVFbWFpbHNGcm9tSW1wb3J0O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgcG9wTm90aWZpY2F0aW9uIGZyb20gJy4vcG9wLW5vdGlmaWNhdGlvbic7XG5pbXBvcnQgbW9kYWxCb3ggZnJvbSAnLi9tb2RhbC1ib3gnO1xuaW1wb3J0IGludml0ZUVtYWlsc0Zyb21JbXBvcnQgZnJvbSAnLi9pbnZpdGUtZW1haWxzLWZyb20taW1wb3J0JztcblxuY29uc3QgcHJvamVjdEdvb2dsZUNvbnRhY3RJbXBvcnQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudElkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dvb2dsZV9vYXV0aF9jbGllbnQnKSxcbiAgICAgICAgICAgICAgbW9kYWxUb2dnbGUgPSBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpLFxuICAgICAgICAgICAgICBmZWVkUGFnZVVybCA9ICdodHRwczovL3d3dy5nb29nbGUuY29tL204L2ZlZWRzL2NvbnRhY3RzL2RlZmF1bHQvZnVsbD9hbHQ9anNvbiZtYXgtcmVzdWx0cz0xMDAwJyxcbiAgICAgICAgICAgICAgZGF0YUVtYWlscyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICAgIGxvYWRpbmdDb250YWN0cyA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICAgIGZldGNoID0gKHRva2VuLCBwYWdlVXJsKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIW1vZGFsVG9nZ2xlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBtb2RhbFRvZ2dsZS50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nQ29udGFjdHModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgbS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IHBhZ2VVcmwgfHwgZmVlZFBhZ2VVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29ucCcsXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YTogdG9rZW5cbiAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0TGluayA9IF8uZmluZChkYXRhLmZlZWQubGluaywgKGwpID0+IHsgcmV0dXJuIGwucmVsID09PSAnbmV4dCc7fSksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWR1Y2VkTGlzdCA9IF8ucmVkdWNlKGRhdGEuZmVlZC5lbnRyeSwgKG1lbW8sIGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJ2dkJGVtYWlsJyBpbiBlbnRyeSkgJiYgZW50cnkuZ2QkZW1haWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2VtYWlscyA9IGVudHJ5LmdkJGVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGVudHJ5LnRpdGxlLiR0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmVhY2goZ2VtYWlscywgKGVtYWlsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVtby5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgW10pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YUVtYWlscyhkYXRhRW1haWxzKCkuY29uY2F0KHJlZHVjZWRMaXN0KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChuZXh0TGluaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZ0NvbnRhY3RzKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmZXRjaCh0b2tlbiwgbmV4dExpbmsuaHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGF1dGggPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2lkOiBjbGllbnRJZC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9rZW4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAnc2NvcGUnOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jb250YWN0cy5yZWFkb25seSdcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBnYXBpLmF1dGguYXV0aG9yaXplKGNvbmZpZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZmV0Y2goZ2FwaS5hdXRoLmdldFRva2VuKCkpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF1dGg6IGF1dGgsXG4gICAgICAgICAgICBtb2RhbFRvZ2dsZTogbW9kYWxUb2dnbGUsXG4gICAgICAgICAgICBsb2FkaW5nQ29udGFjdHM6IGxvYWRpbmdDb250YWN0cyxcbiAgICAgICAgICAgIGRhdGFFbWFpbHM6IGRhdGFFbWFpbHNcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0O1xuXG4gICAgICAgIHJldHVybiBtKCcjZ29vZ2xlX2NvbnRhY3Rfd3JhcHBlcicsIFtcbiAgICAgICAgICAgIChjdHJsLm1vZGFsVG9nZ2xlKCkgPyBtLmNvbXBvbmVudChtb2RhbEJveCwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlNb2RhbDogY3RybC5tb2RhbFRvZ2dsZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBbaW52aXRlRW1haWxzRnJvbUltcG9ydCx7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IGFyZ3MucHJvamVjdCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YUVtYWlsczogY3RybC5kYXRhRW1haWxzLFxuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nQ29udGFjdHM6IGN0cmwubG9hZGluZ0NvbnRhY3RzLFxuICAgICAgICAgICAgICAgICAgICBtb2RhbFRvZ2dsZTogY3RybC5tb2RhbFRvZ2dsZSxcbiAgICAgICAgICAgICAgICAgICAgc2hvd1N1Y2Nlc3M6IGFyZ3Muc2hvd1N1Y2Nlc3NcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSkgOiAnJyksXG4gICAgICAgICAgICBtKCdhLmJ0bi5idG4taW5saW5lLmJ0bi1uby1ib3JkZXIuYnRuLXRlcmNpYXJ5LnctaW5saW5lLWJsb2NrW2hyZWY9XFwnamF2YXNjcmlwdDp2b2lkKDApO1xcJ10nLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogY3RybC5hdXRoXG4gICAgICAgICAgICB9LFtcbiAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVxcJ2h0dHA6Ly91cGxvYWRzLndlYmZsb3cuY29tLzU3YmE1OGI0ODQ2Y2MxOWU2MGFjZGQ1Yi81N2JjMzM5Zjc3ZjMxNGUyM2I5NGQ0NGRfZ21haWwtaWNvbi5wbmdcXCddW3dpZHRoPVxcJzI1XFwnXScpLFxuICAgICAgICAgICAgICAgIG0oJy5fdy1pbmxpbmUtYmxvY2suZm9udHNpemUtc21hbGxlc3QnLCAnQ29udGF0b3MgZG8gZ21haWwnKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdEdvb2dsZUNvbnRhY3RJbXBvcnQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBwb3BOb3RpZmljYXRpb24gZnJvbSAnLi9wb3Atbm90aWZpY2F0aW9uJztcbmltcG9ydCBwcm9qZWN0R29vZ2xlQ29udGFjdEltcG9ydCBmcm9tICcuL3Byb2plY3QtZ29vZ2xlLWNvbnRhY3QtaW1wb3J0JztcblxuY29uc3QgcHJvamVjdEVtYWlsSW52aXRlID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBlbWFpbFRleHQgPSBtLnByb3AoJycpLFxuICAgICAgICAgICAgICBsb2FkaW5nID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgICAgcHJvamVjdCA9IGFyZ3MucHJvamVjdCxcbiAgICAgICAgICAgICAgc2hvd1N1Y2Nlc3MgPSBtLnByb3AoZmFsc2UpLFxuXG4gICAgICAgICAgICAgIHN1Ym1pdEludml0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChfLmlzRW1wdHkoZW1haWxUZXh0KCkpIHx8IGxvYWRpbmcoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVtYWlsTGlzdCA9IF8ucmVkdWNlKGVtYWlsVGV4dCgpLnNwbGl0KCdcXG4nKSwgKG1lbW8sIHRleHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGgudmFsaWRhdGVFbWFpbCh0ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVtby5wdXNoKHRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgICAgICAgICAgICAgICAgIH0sIFtdKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KGVtYWlsTGlzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1N1Y2Nlc3MoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxzLmludml0ZVByb2plY3RFbWFpbC5wb3N0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiBwcm9qZWN0LnByb2plY3RfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsczogZW1haWxMaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmxvYWQoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWxUZXh0KCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93U3VjY2Vzcyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1haWxUZXh0OiBlbWFpbFRleHQsXG4gICAgICAgICAgICBzdWJtaXRJbnZpdGU6IHN1Ym1pdEludml0ZSxcbiAgICAgICAgICAgIGxvYWRpbmc6IGxvYWRpbmcsXG4gICAgICAgICAgICBzaG93U3VjY2Vzczogc2hvd1N1Y2Nlc3NcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0O1xuXG4gICAgICAgIHJldHVybiBtKCcuZW1haWwtaW52aXRlLWJveCcsIFtcbiAgICAgICAgICAgIChjdHJsLnNob3dTdWNjZXNzKCkgPyBtLmNvbXBvbmVudChwb3BOb3RpZmljYXRpb24sIHttZXNzYWdlOiAnQ29udml0ZXMgZW52aWFkb3MuJ30pIDogJycpLFxuICAgICAgICAgICAgKGN0cmwubG9hZGluZygpID8gaC5sb2FkZXIoKVxuICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICBtKCcudy1mb3JtJywgW1xuICAgICAgICAgICAgICAgICAgICAgbSgnZm9ybScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tMTAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3RHb29nbGVDb250YWN0SW1wb3J0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1N1Y2Nlc3M6IGN0cmwuc2hvd1N1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBtKFwiYS5idG4uYnRuLWlubGluZS5idG4tbm8tYm9yZGVyLmJ0bi10ZXJjaWFyeS53LWlubGluZS1ibG9ja1tocmVmPScjJ11cIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBtKFwiLl93LWlubGluZS1ibG9jay5mb250c2l6ZS1zbWFsbGVzdFwiLCBcIlVwbG9hZCBDU1ZcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3RleHRhcmVhLnBvc2l0aXZlLnRleHQtZmllbGQudy1pbnB1dFttYXhsZW5ndGg9XCI1MDAwXCJdW3BsYWNlaG9sZGVyPVwiQWRpY2lvbmUgdW0gb3UgbWFpcyBlbWFpbHMsIHNlcGFyYWRvcyBwb3IgbGluaGEuXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLmVtYWlsVGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLmVtYWlsVGV4dCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgIG0oJ2EuYnRuLmJ0bi1pbmxpbmUuYnRuLW1lZGl1bS53LWJ1dHRvbltocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwuc3VibWl0SW52aXRlXG4gICAgICAgICAgICAgICAgICAgICB9LCAnRW52aWFyIGNvbnZpdGVzJylcbiAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0RW1haWxJbnZpdGU7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgZmFjZWJvb2tCdXR0b24gZnJvbSAnLi4vYy9mYWNlYm9vay1idXR0b24nO1xuaW1wb3J0IGNvcHlUZXh0SW5wdXQgZnJvbSAnLi4vYy9jb3B5LXRleHQtaW5wdXQnO1xuaW1wb3J0IHByb2plY3RFbWFpbEludml0ZSBmcm9tICcuLi9jL3Byb2plY3QtZW1haWwtaW52aXRlJztcblxuY29uc3QgcHJvamVjdEludml0ZUNhcmQgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3Q7XG5cbiAgICAgICAgcmV0dXJuIG0oJy5jYXJkLmNhcmQtc2Vjb25kYXJ5LnUtbWFyZ2luYm90dG9tLTIwLnUtcmFkaXVzLnctY2xlYXJmaXgnLCBbXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTMwLnUtdGV4dC1jZW50ZXInLCAnQ29udmlkZSBzZXVzIGFtaWdvcyBwYXJhIGFwb2lhciBzdWEgY2FtcGFuaGEnKSxcbiAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICBtKCcuaW52aXRlLWZyaWVuZHMtYmFjay1jb2wtMScsIFtcbiAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoZmFjZWJvb2tCdXR0b24sIHt1cmw6IGgucHJvamVjdEZ1bGxQZXJtYWxpbmsocHJvamVjdCkgKyAnP3JlZj1mYWNlYm9vayZ1dG1fc291cmNlPWZhY2Vib29rLmNvbSZ1dG1fbWVkaXVtPXNvY2lhbCZ1dG1fY2FtcGFpZ249cHJvamVjdF9zaGFyZV9pbnNpZ2h0cycsIG1lZGl1bTogdHJ1ZX0pLFxuICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChmYWNlYm9va0J1dHRvbiwge21lc3NlbmdlcjogdHJ1ZSwgdXJsOiBoLnByb2plY3RGdWxsUGVybWFsaW5rKHByb2plY3QpICsgJz9yZWY9ZmFjZWJvb2smdXRtX3NvdXJjZT1mYWNlYm9vay5jb20mdXRtX21lZGl1bT1tZXNzZW5nZXImdXRtX2NhbXBhaWduPXByb2plY3Rfc2hhcmVfaW5zaWdodHMnLCBtZWRpdW06IHRydWV9KSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Zvcm1bZGF0YS1uYW1lPVxcJ0VtYWlsIEZvcm0gMlxcJ11baWQ9XFwnZW1haWwtZm9ybS0yXFwnXVtuYW1lPVxcJ2VtYWlsLWZvcm0tMlxcJ10nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkuZm9udHNpemUtc21hbGxlc3QnLCAnTGluayBkaXJldG8nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChjb3B5VGV4dElucHV0LCB7dmFsdWU6IGgucHJvamVjdEZ1bGxQZXJtYWxpbmsocHJvamVjdCkgKyAnP3JlZj1wcm9qZWN0X2xpbmsnfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLmludml0ZS1mcmllbmRzLWJhY2stY29sLTInLCBtLmNvbXBvbmVudChwcm9qZWN0RW1haWxJbnZpdGUsIHtwcm9qZWN0OiBwcm9qZWN0fSkpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0SW52aXRlQ2FyZDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgdG9vbHRpcCBmcm9tICcuLi9jL3Rvb2x0aXAnO1xuaW1wb3J0IHByb2plY3REYXNoYm9hcmRNZW51IGZyb20gJy4uL2MvcHJvamVjdC1kYXNoYm9hcmQtbWVudSc7XG5pbXBvcnQgbW9kYWxCb3ggZnJvbSAnLi4vYy9tb2RhbC1ib3gnO1xuaW1wb3J0IGFkbWluUHJvamVjdERldGFpbHNDYXJkIGZyb20gJy4uL2MvYWRtaW4tcHJvamVjdC1kZXRhaWxzLWNhcmQnO1xuaW1wb3J0IG9ubGluZVN1Y2Nlc3NNb2RhbENvbnRlbnQgZnJvbSAnLi4vYy9vbmxpbmUtc3VjY2Vzcy1tb2RhbC1jb250ZW50JztcbmltcG9ydCBwcm9qZWN0RGF0YVN0YXRzIGZyb20gJy4uL2MvcHJvamVjdC1kYXRhLXN0YXRzJztcbmltcG9ydCBwcm9qZWN0RGVsZXRlQnV0dG9uIGZyb20gJy4uL2MvcHJvamVjdC1kZWxldGUtYnV0dG9uJztcbmltcG9ydCBwcm9qZWN0Q2FuY2VsQnV0dG9uIGZyb20gJy4uL2MvcHJvamVjdC1jYW5jZWwtYnV0dG9uJztcbmltcG9ydCBwcm9qZWN0RGF0YUNoYXJ0IGZyb20gJy4uL2MvcHJvamVjdC1kYXRhLWNoYXJ0JztcbmltcG9ydCBwcm9qZWN0RGF0YVRhYmxlIGZyb20gJy4uL2MvcHJvamVjdC1kYXRhLXRhYmxlJztcbmltcG9ydCBwcm9qZWN0UmVtaW5kZXJDb3VudCBmcm9tICcuLi9jL3Byb2plY3QtcmVtaW5kZXItY291bnQnO1xuaW1wb3J0IHByb2plY3RTdWNjZXNzZnVsT25ib2FyZCBmcm9tICcuLi9jL3Byb2plY3Qtc3VjY2Vzc2Z1bC1vbmJvYXJkJztcbmltcG9ydCBmYWNlYm9va0J1dHRvbiBmcm9tICcuLi9jL2ZhY2Vib29rLWJ1dHRvbic7XG5pbXBvcnQgY29weVRleHRJbnB1dCBmcm9tICcuLi9jL2NvcHktdGV4dC1pbnB1dCc7XG5pbXBvcnQgcHJvamVjdEludml0ZUNhcmQgZnJvbSAnLi4vYy9wcm9qZWN0LWludml0ZS1jYXJkJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuaW5zaWdodHMnKTtcblxuY29uc3QgaW5zaWdodHMgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBmaWx0ZXJzVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiAnZXEnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGRpc3BsYXlNb2RhbCA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICBwcm9qZWN0RGV0YWlscyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBjb250cmlidXRpb25zUGVyRGF5ID0gbS5wcm9wKFtdKSxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbiA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBsb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuLFxuICAgICAgICAgICAgc2V0UHJvamVjdElkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3RfaWQgPSBtLnJvdXRlLnBhcmFtKCdwcm9qZWN0X2lkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyc1ZNLnByb2plY3RfaWQocHJvamVjdF9pZCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzVk0ucHJvamVjdF9pZChhcmdzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgaWYgKGgucGFyYW1CeU5hbWUoJ29ubGluZV9zdWNjZXNzJykgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgZGlzcGxheU1vZGFsLnRvZ2dsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0UHJvamVjdElkKCk7XG5cbiAgICAgICAgY29uc3QgbCA9IGxvYWRlcihtb2RlbHMucHJvamVjdERldGFpbC5nZXRSb3dPcHRpb25zKGZpbHRlcnNWTS5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgbC5sb2FkKCkudGhlbihwcm9qZWN0RGV0YWlscyk7XG5cbiAgICAgICAgY29uc3QgbENvbnRyaWJ1dGlvbnNQZXJEYXkgPSBsb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyRGF5LmdldFJvd09wdGlvbnMoZmlsdGVyc1ZNLnBhcmFtZXRlcnMoKSkpO1xuICAgICAgICBsQ29udHJpYnV0aW9uc1BlckRheS5sb2FkKCkudGhlbihjb250cmlidXRpb25zUGVyRGF5KTtcblxuICAgICAgICBsZXQgY29udHJpYnV0aW9uc1BlckxvY2F0aW9uVGFibGUgPSBbWydFc3RhZG8nLCAnQXBvaW9zJywgJ1IkIGFwb2lhZG9zICglIGRvIHRvdGFsKSddXTtcbiAgICAgICAgY29uc3QgYnVpbGRQZXJMb2NhdGlvblRhYmxlID0gKGNvbnRyaWJ1dGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoIV8uaXNFbXB0eShjb250cmlidXRpb25zKSkgPyBfLm1hcChfLmZpcnN0KGNvbnRyaWJ1dGlvbnMpLnNvdXJjZSwgKGNvbnRyaWJ1dGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjb2x1bW4gPSBbXTtcblxuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKGNvbnRyaWJ1dGlvbi5zdGF0ZV9hY3JvbnltIHx8ICdPdXRyby9vdGhlcicpO1xuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKGNvbnRyaWJ1dGlvbi50b3RhbF9jb250cmlidXRpb25zKTtcbiAgICAgICAgICAgICAgICBjb2x1bW4ucHVzaChbY29udHJpYnV0aW9uLnRvdGFsX2NvbnRyaWJ1dGVkLFsvL0FkZGluZyByb3cgd2l0aCBjdXN0b20gY29tcGFyYXRvciA9PiByZWFkIHByb2plY3QtZGF0YS10YWJsZSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICBtKGBpbnB1dFt0eXBlPVwiaGlkZGVuXCJdW3ZhbHVlPVwiJHtjb250cmlidXRpb24udG90YWxfY29udHJpYnV0ZWR9XCJgKSxcbiAgICAgICAgICAgICAgICAgICAgJ1IkICcsXG4gICAgICAgICAgICAgICAgICAgIGguZm9ybWF0TnVtYmVyKGNvbnRyaWJ1dGlvbi50b3RhbF9jb250cmlidXRlZCwgMiwgMyksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4udy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsICcgKCcgKyBjb250cmlidXRpb24udG90YWxfb25fcGVyY2VudGFnZS50b0ZpeGVkKDIpICsgJyUpJylcbiAgICAgICAgICAgICAgICBdXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlLnB1c2goY29sdW1uKTtcbiAgICAgICAgICAgIH0pIDogW107XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbiA9IGxvYWRlcihtb2RlbHMucHJvamVjdENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbi5nZXRSb3dPcHRpb25zKGZpbHRlcnNWTS5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgbENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbi5sb2FkKCkudGhlbihidWlsZFBlckxvY2F0aW9uVGFibGUpO1xuXG4gICAgICAgIGxldCBjb250cmlidXRpb25zUGVyUmVmVGFibGUgPSBbW1xuICAgICAgICAgICAgSTE4bi50KCdyZWZfdGFibGUuaGVhZGVyLm9yaWdpbicsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgIEkxOG4udCgncmVmX3RhYmxlLmhlYWRlci5jb250cmlidXRpb25zJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgSTE4bi50KCdyZWZfdGFibGUuaGVhZGVyLmFtb3VudCcsIEkxOG5TY29wZSgpKVxuICAgICAgICBdXTtcbiAgICAgICAgY29uc3QgYnVpbGRQZXJSZWZUYWJsZSA9IChjb250cmlidXRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKCFfLmlzRW1wdHkoY29udHJpYnV0aW9ucykpID8gXy5tYXAoXy5maXJzdChjb250cmlidXRpb25zKS5zb3VyY2UsIChjb250cmlidXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAvL1Rlc3QgaWYgdGhlIHN0cmluZyBtYXRjaGVzIGEgd29yZCBzdGFydGluZyB3aXRoIGN0cnNlXyBhbmQgZm9sbG93ZWQgYnkgYW55IG5vbi1kaWdpdCBncm91cCBvZiBjaGFyYWN0ZXJzXG4gICAgICAgICAgICAgICAgLy9UaGlzIGFsbG93cyB0byByZW1vdmUgYW55IHZlcnNpb25lZCByZWZlcnJhbCAoaS5lLjogY3Ryc2VfbmV3c2xldHRlcl8xMjMpIHdoaWxlIHN0aWxsIGdldHRpbmcgY3Ryc2VfdGVzdF9yZWZcbiAgICAgICAgICAgICAgICBjb25zdCByZSA9IC8oY3Ryc2VfW1xcRF0qKS8sXG4gICAgICAgICAgICAgICAgICAgIHRlc3QgPSByZS5leGVjKGNvbnRyaWJ1dGlvbi5yZWZlcnJhbF9saW5rKTtcblxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW4gPSBbXTtcblxuICAgICAgICAgICAgICAgIGlmICh0ZXN0KXtcbiAgICAgICAgICAgICAgICAgICAgLy9SZW1vdmVzIGxhc3QgdW5kZXJzY29yZSBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uLnJlZmVycmFsX2xpbmsgPSB0ZXN0WzBdLnN1YnN0cigtMSkgPT09ICdfJyA/IHRlc3RbMF0uc3Vic3RyKDAsIHRlc3RbMF0ubGVuZ3RoIC0gMSkgOiB0ZXN0WzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKGNvbnRyaWJ1dGlvbi5yZWZlcnJhbF9saW5rID8gSTE4bi50KCdyZWZlcnJhbC4nICsgY29udHJpYnV0aW9uLnJlZmVycmFsX2xpbmssIEkxOG5TY29wZSh7ZGVmYXVsdFZhbHVlOiBjb250cmlidXRpb24ucmVmZXJyYWxfbGlua30pKSA6IEkxOG4udCgncmVmZXJyYWwub3RoZXJzJywgSTE4blNjb3BlKCkpKTtcbiAgICAgICAgICAgICAgICBjb2x1bW4ucHVzaChjb250cmlidXRpb24udG90YWwpO1xuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKFtjb250cmlidXRpb24udG90YWxfYW1vdW50LFtcbiAgICAgICAgICAgICAgICAgICAgbShgaW5wdXRbdHlwZT1cImhpZGRlblwiXVt2YWx1ZT1cIiR7Y29udHJpYnV0aW9uLnRvdGFsX2NvbnRyaWJ1dGVkfVwiYCksXG4gICAgICAgICAgICAgICAgICAgICdSJCAnLFxuICAgICAgICAgICAgICAgICAgICBoLmZvcm1hdE51bWJlcihjb250cmlidXRpb24udG90YWxfYW1vdW50LCAyLCAzKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgJyAoJyArIGNvbnRyaWJ1dGlvbi50b3RhbF9vbl9wZXJjZW50YWdlLnRvRml4ZWQoMikgKyAnJSknKVxuICAgICAgICAgICAgICAgIF1dKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udHJpYnV0aW9uc1BlclJlZlRhYmxlLnB1c2goY29sdW1uKTtcbiAgICAgICAgICAgIH0pIDogW107XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbENvbnRyaWJ1dGlvbnNQZXJSZWYgPSBsb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyUmVmLmdldFJvd09wdGlvbnMoZmlsdGVyc1ZNLnBhcmFtZXRlcnMoKSkpO1xuICAgICAgICBsQ29udHJpYnV0aW9uc1BlclJlZi5sb2FkKCkudGhlbihidWlsZFBlclJlZlRhYmxlKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbDogbCxcbiAgICAgICAgICAgIGxDb250cmlidXRpb25zUGVyUmVmOiBsQ29udHJpYnV0aW9uc1BlclJlZixcbiAgICAgICAgICAgIGxDb250cmlidXRpb25zUGVyTG9jYXRpb246IGxDb250cmlidXRpb25zUGVyTG9jYXRpb24sXG4gICAgICAgICAgICBsQ29udHJpYnV0aW9uc1BlckRheTogbENvbnRyaWJ1dGlvbnNQZXJEYXksXG4gICAgICAgICAgICBkaXNwbGF5TW9kYWw6IGRpc3BsYXlNb2RhbCxcbiAgICAgICAgICAgIGZpbHRlcnNWTTogZmlsdGVyc1ZNLFxuICAgICAgICAgICAgcHJvamVjdERldGFpbHM6IHByb2plY3REZXRhaWxzLFxuICAgICAgICAgICAgY29udHJpYnV0aW9uc1BlckRheTogY29udHJpYnV0aW9uc1BlckRheSxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlOiBjb250cmlidXRpb25zUGVyTG9jYXRpb25UYWJsZSxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJSZWZUYWJsZTogY29udHJpYnV0aW9uc1BlclJlZlRhYmxlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IF8uZmlyc3QoY3RybC5wcm9qZWN0RGV0YWlscygpKSB8fCB7XG4gICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ1JlYWxpemFkb3InXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgYnVpbGRUb29sdGlwID0gKGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQodG9vbHRpcCwge1xuICAgICAgICAgICAgICAgICAgICAgIGVsOiBlbCxcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdJbmZvcm1hIGRlIG9uZGUgdmllcmFtIG9zIGFwb2lvcyBkZSBzZXUgcHJvamV0by4gU2FpYmEgY29tbyB1c2FyIGVzc2EgdGFiZWxhIGUgcGxhbmVqYXIgbWVsaG9yIHN1YXMgYcOnw7VlcyBkZSBjb211bmljYcOnw6NvICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGFbaHJlZj1cIiR7STE4bi50KCdyZWZfdGFibGUuaGVscF91cmwnLCBJMThuU2NvcGUoKSl9XCJdW3RhcmdldD0nX2JsYW5rJ11gLCAnYXF1aS4nKVxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDM4MFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFjdHJsLmwoKSkge1xuICAgICAgICAgICAgcHJvamVjdC51c2VyLm5hbWUgPSBwcm9qZWN0LnVzZXIubmFtZSB8fCAnUmVhbGl6YWRvcic7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbSgnLnByb2plY3QtaW5zaWdodHMnLCAhY3RybC5sKCkgPyBbXG4gICAgICAgICAgICAocHJvamVjdC5pc19vd25lcl9vcl9hZG1pbiA/IG0uY29tcG9uZW50KHByb2plY3REYXNoYm9hcmRNZW51LCB7XG4gICAgICAgICAgICAgICAgcHJvamVjdDogbS5wcm9wKHByb2plY3QpXG4gICAgICAgICAgICB9KSA6ICcnKSxcbiAgICAgICAgICAgIChjdHJsLmRpc3BsYXlNb2RhbCgpID8gbS5jb21wb25lbnQobW9kYWxCb3gsIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5TW9kYWw6IGN0cmwuZGlzcGxheU1vZGFsLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFtvbmxpbmVTdWNjZXNzTW9kYWxDb250ZW50XVxuICAgICAgICAgICAgfSkgOiAnJyksXG5cbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIChwcm9qZWN0LnN0YXRlID09PSAnc3VjY2Vzc2Z1bCcpID8gbS5jb21wb25lbnQocHJvamVjdFN1Y2Nlc3NmdWxPbmJvYXJkLCB7cHJvamVjdDogbS5wcm9wKHByb2plY3QpfSkgOiBbXG4gICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC53LWNvbC1wdXNoLTInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZXIubGluZWhlaWdodC1sb29zZXIudS1tYXJnaW5ib3R0b20tMTAudS10ZXh0LWNlbnRlci5kYXNoYm9hcmQtaGVhZGVyJywgSTE4bi50KCdjYW1wYWlnbl90aXRsZScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvamVjdC5zdGF0ZSA9PT0gJ29ubGluZScgPyBtLmNvbXBvbmVudChwcm9qZWN0SW52aXRlQ2FyZCwge3Byb2plY3Q6IHByb2plY3R9KSA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9qZWN0LnN0YXRlID09PSAnZHJhZnQnID8gbS5jb21wb25lbnQoYWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZTogcHJvamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdwLicgKyBwcm9qZWN0LnN0YXRlICsgJy1wcm9qZWN0LXRleHQuZm9udHNpemUtc21hbGwubGluZWhlaWdodC1sb29zZScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0Lm1vZGUgPT09ICdmbGV4JyAmJiBfLmlzTnVsbChwcm9qZWN0LmV4cGlyZXNfYXQpICYmIHByb2plY3Quc3RhdGUgIT09ICdkcmFmdCcgPyBtKCdzcGFuJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ2ZpbmlzaF9leHBsYW5hdGlvbicsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVwiaHR0cDovL3N1cG9ydGUuY2F0YXJzZS5tZS9oYy9wdC1ici9hcnRpY2xlcy8yMDgxNDEwMzMtQ29tby1kZWZpbmlyLW8tcHJhem8tbm8tQ2F0YXJzZS1mbGV4LVwiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLEkxOG4udCgna25vd19tb3JlJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkgOiBtLnRydXN0KEkxOG4udChgY2FtcGFpZ24uJHtwcm9qZWN0Lm1vZGV9LiR7cHJvamVjdC5zdGF0ZX1gLCBJMThuU2NvcGUoe3VzZXJuYW1lOiBwcm9qZWN0LnVzZXIubmFtZSwgZXhwaXJlc19hdDogaC5tb21lbnRpZnkocHJvamVjdC56b25lX2V4cGlyZXNfYXQpLCBzZW50X3RvX2FuYWx5c2lzX2F0OiBoLm1vbWVudGlmeShwcm9qZWN0LnNlbnRfdG9fYW5hbHlzaXNfYXQpfSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgKHByb2plY3Quc3RhdGUgPT09ICdkcmFmdCcgP1xuICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdERlbGV0ZUJ1dHRvbiwge3Byb2plY3Q6IHByb2plY3R9KVxuICAgICAgICAgICAgOiAnJyksXG4gICAgICAgICAgICAocHJvamVjdC5pc19wdWJsaXNoZWQpID8gW1xuICAgICAgICAgICAgICAgIG0oJy5kaXZpZGVyJyksXG4gICAgICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLW9uZS1jb2x1bW4uc2VjdGlvbi5iZy1ncmF5LmJlZm9yZS1mb290ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3REYXRhU3RhdHMsIHtwcm9qZWN0OiBtLnByb3AocHJvamVjdCl9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTIudS10ZXh0LWNlbnRlcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogJzMwMHB4J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhY3RybC5sQ29udHJpYnV0aW9uc1BlckRheSgpID8gbS5jb21wb25lbnQocHJvamVjdERhdGFDaGFydCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogY3RybC5jb250cmlidXRpb25zUGVyRGF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IEkxOG4udCgnYW1vdW50X3Blcl9kYXlfbGFiZWwnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhS2V5OiAndG90YWxfYW1vdW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhBeGlzOiAoaXRlbSkgPT4gaC5tb21lbnRpZnkoaXRlbS5wYWlkX2F0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5U3RhdGU6IEkxOG4udCgnYW1vdW50X3Blcl9kYXlfZW1wdHknLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBoLmxvYWRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTIudS10ZXh0LWNlbnRlcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogJzMwMHB4J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhY3RybC5sQ29udHJpYnV0aW9uc1BlckRheSgpID8gbS5jb21wb25lbnQocHJvamVjdERhdGFDaGFydCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogY3RybC5jb250cmlidXRpb25zUGVyRGF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IEkxOG4udCgnY29udHJpYnV0aW9uc19wZXJfZGF5X2xhYmVsJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUtleTogJ3RvdGFsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhBeGlzOiAoaXRlbSkgPT4gaC5tb21lbnRpZnkoaXRlbS5wYWlkX2F0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5U3RhdGU6IEkxOG4udCgnY29udHJpYnV0aW9uc19wZXJfZGF5X2VtcHR5JywgSTE4blNjb3BlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogaC5sb2FkZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEyLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5wcm9qZWN0LWNvbnRyaWJ1dGlvbnMtcGVyLXJlZicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCdyZWZfb3JpZ2luX3RpdGxlJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgubmV3RmVhdHVyZUJhZGdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRUb29sdGlwKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LnRvb2x0aXAtd3JhcHBlci5mYS5mYS1xdWVzdGlvbi1jaXJjbGUuZm9udGNvbG9yLXNlY29uZGFyeScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjdHJsLmxDb250cmlidXRpb25zUGVyUmVmKCkgPyAhXy5pc0VtcHR5KF8ucmVzdChjdHJsLmNvbnRyaWJ1dGlvbnNQZXJSZWZUYWJsZSkpID8gbS5jb21wb25lbnQocHJvamVjdERhdGFUYWJsZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiBjdHJsLmNvbnRyaWJ1dGlvbnNQZXJSZWZUYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U29ydEluZGV4OiAtMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBtKCcuY2FyZC51LXJhZGl1cy5tZWRpdW0udS1tYXJnaW5ib3R0b20tNjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS10ZXh0LWNlbnRlci51LW1hcmdpbnRvcC00MC51LW1hcmdpbmJvdHRvbS00MCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC53LWNvbC1wdXNoLTInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtYmFzZScsIEkxOG4udCgnY29udHJpYnV0aW9uc19wZXJfcmVmX2VtcHR5JywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IGgubG9hZGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcucHJvamVjdC1jb250cmlidXRpb25zLXBlci1yZWYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMC5mb250c2l6ZS1sYXJnZS51LXRleHQtY2VudGVyJywgSTE4bi50KCdsb2NhdGlvbl9vcmlnaW5fdGl0bGUnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWN0cmwubENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbigpID8gIV8uaXNFbXB0eShfLnJlc3QoY3RybC5jb250cmlidXRpb25zUGVyTG9jYXRpb25UYWJsZSkpID8gbS5jb21wb25lbnQocHJvamVjdERhdGFUYWJsZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiBjdHJsLmNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTb3J0SW5kZXg6IC0yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6IG0oJy5jYXJkLnUtcmFkaXVzLm1lZGl1bS51LW1hcmdpbmJvdHRvbS02MCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LXRleHQtY2VudGVyLnUtbWFyZ2ludG9wLTQwLnUtbWFyZ2luYm90dG9tLTQwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXB1c2gtMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdjb250cmlidXRpb25zX3Blcl9sb2NhdGlvbl9lbXB0eScsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiBoLmxvYWRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTIudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdFJlbWluZGVyQ291bnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlOiBwcm9qZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIChwcm9qZWN0LnN0YXRlID09PSAnb25saW5lJyA/XG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdENhbmNlbEJ1dHRvbiwge3Byb2plY3Q6IHByb2plY3R9KVxuICAgICAgICAgICAgOiAnJylcblxuICAgICAgICAgICAgXSA6ICcnXG4gICAgICAgIF0gOiBoLmxvYWRlcigpKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbnNpZ2h0cztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncGFnZXMuam9icycpO1xuXG5jb25zdCBqb2JzID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5oZXJvLWpvYnMuaGVyby1tZWRpdW0nLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmUudS10ZXh0LWNlbnRlcicsW1xuICAgICAgICAgICAgICAgICAgICBtKCdpbWcuaWNvbi1oZXJvW3NyYz1cIi9hc3NldHMvbG9nby13aGl0ZS5wbmdcIl0nKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tMjAuZm9udHNpemUtbGFyZ2VzdCcsIEkxOG4udCgndGl0bGUnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lci51LW1hcmdpbnRvcC00MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgudy1jb2wtcHVzaC0yLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCdpbmZvJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhW2hyZWY9XCIvcHJvamVjdHMvbmV3XCJdLnctYnV0dG9uLmJ0bi5idG4tbGFyZ2UuYnRuLWlubGluZScsIEkxOG4udCgnY3RhJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBqb2JzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBsaXZlU3RhdGlzdGljcyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MgPSB7fSkge1xuICAgICAgICBjb25zdCBwYWdlU3RhdGlzdGljcyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBub3RpZmljYXRpb25EYXRhID0gbS5wcm9wKHt9KTtcblxuICAgICAgICBtb2RlbHMuc3RhdGlzdGljLmdldFJvdygpLnRoZW4ocGFnZVN0YXRpc3RpY3MpO1xuICAgICAgICAvLyBhcmdzLnNvY2tldCBpcyBhIHNvY2tldCBwcm92aWRlZCBieSBzb2NrZXQuaW9cbiAgICAgICAgLy8gY2FuIHNlZSB0aGVyZSBodHRwczovL2dpdGh1Yi5jb20vY2F0YXJzZS9jYXRhcnNlLWxpdmUvYmxvYi9tYXN0ZXIvcHVibGljL2luZGV4LmpzI0w4XG4gICAgICAgIGlmIChhcmdzLnNvY2tldCAmJiBfLmlzRnVuY3Rpb24oYXJncy5zb2NrZXQub24pKSB7XG4gICAgICAgICAgICBhcmdzLnNvY2tldC5vbignbmV3X3BhaWRfY29udHJpYnV0aW9ucycsIChtc2cpID0+IHtcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25EYXRhKEpTT04ucGFyc2UobXNnLnBheWxvYWQpKTtcbiAgICAgICAgICAgICAgICBtb2RlbHMuc3RhdGlzdGljLmdldFJvdygpLnRoZW4ocGFnZVN0YXRpc3RpY3MpO1xuICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYWdlU3RhdGlzdGljczogcGFnZVN0YXRpc3RpY3MsXG4gICAgICAgICAgICBub3RpZmljYXRpb25EYXRhOiBub3RpZmljYXRpb25EYXRhXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGN0cmwubm90aWZpY2F0aW9uRGF0YSgpO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1zZWN0aW9uLmJnLXN0YXRzLnNlY3Rpb24ubWluLWhlaWdodC0xMDAnLCBbXG4gICAgICAgICAgICBtKCcudy1jb250YWluZXIudS10ZXh0LWNlbnRlcicsIF8ubWFwKGN0cmwucGFnZVN0YXRpc3RpY3MoKSwgKHN0YXQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW20oJ2ltZy51LW1hcmdpbmJvdHRvbS02MFtzcmM9XCJodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU1YWRhNWRkMTFiMzZhNTI2MTZkOTdkZl9zeW1ib2wtY2F0YXJzZS5wbmdcIl0nKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1uZWdhdGl2ZS51LW1hcmdpbmJvdHRvbS00MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1tZWdhanVtYm8uZm9udHdlaWdodC1zZW1pYm9sZCcsICdSJCAnICsgaC5mb3JtYXROdW1iZXIoc3RhdC50b3RhbF9jb250cmlidXRlZCwgMiwgMykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlJywgJ0RvYWRvcyBwYXJhIHByb2pldG9zIHB1YmxpY2Fkb3MgcG9yIGFxdWknKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1uZWdhdGl2ZS51LW1hcmdpbmJvdHRvbS02MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1tZWdhanVtYm8uZm9udHdlaWdodC1zZW1pYm9sZCcsIHN0YXQudG90YWxfY29udHJpYnV0b3JzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZScsICdQZXNzb2FzIGrDoSBhcG9pYXJhbSBwZWxvIG1lbm9zIDEgcHJvamV0byBubyBDYXRhcnNlJylcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSkpLCAoIV8uaXNFbXB0eShkYXRhKSA/IG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5jYXJkLnUtcmFkaXVzLnUtbWFyZ2luYm90dG9tLTYwLm1lZGl1bScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudGh1bWIudS1yb3VuZFtzcmM9XCInICsgaC51c2VBdmF0YXJPckRlZmF1bHQoZGF0YS51c2VyX2ltYWdlKSArICdcIl0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC53LWNvbC1zbWFsbC04JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS5saW5laGVpZ2h0LXRpZ2h0JywgZGF0YS51c2VyX25hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnUtdGV4dC1jZW50ZXIuZm9udHNpemUtYmFzZS51LW1hcmdpbnRvcC0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgJ2FjYWJvdSBkZSBhcG9pYXIgbycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXNtYWxsLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLXByb2plY3QudS1yYWRpdXNbc3JjPVwiJyArIGRhdGEucHJvamVjdF9pbWFnZSArICdcIl1bd2lkdGg9XCI3NVwiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXNtYWxsLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCBkYXRhLnByb2plY3RfbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pIDogJycpLFxuICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXIuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMTAuZm9udGNvbG9yLW5lZ2F0aXZlJywgW1xuICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW4uZm9udGNvbG9yLW5lZ2F0aXZlW2hyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vY2F0YXJzZVwiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtZ2l0aHViJywgJy4nKSwgJyBPcGVuIFNvdXJjZSBjb20gb3JndWxobyEgJ1xuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbGl2ZVN0YXRpc3RpY3M7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IEZpbHRlck1haW4gZnJvbSAnLi4vYy9maWx0ZXItbWFpbic7XG5cbmNvbnN0IHByb2plY3RDb250cmlidXRpb25SZXBvcnRIZWFkZXIgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlckJ1aWxkZXIgPSBhcmdzLmZpbHRlckJ1aWxkZXIsXG4gICAgICAgICAgICAgIHBheW1lbnRTdGF0ZUZpbHRlciA9ICBfLmZpbmRXaGVyZShmaWx0ZXJCdWlsZGVyLCB7bGFiZWw6ICdwYXltZW50X3N0YXRlJ30pLFxuICAgICAgICAgICAgICByZXdhcmRGaWx0ZXIgPSBfLmZpbmRXaGVyZShmaWx0ZXJCdWlsZGVyLCB7bGFiZWw6ICdyZXdhcmRfZmlsdGVyJ30pLFxuICAgICAgICAgICAgICBtYWluRmlsdGVyID0gXy5maW5kV2hlcmUoZmlsdGVyQnVpbGRlciwge2NvbXBvbmVudDogRmlsdGVyTWFpbn0pLFxuICAgICAgICAgICAgICBwcm9qZWN0X2lkID0gYXJncy5maWx0ZXJWTS5wcm9qZWN0X2lkKCk7XG5cbiAgICAgICAgcmV3YXJkRmlsdGVyLmRhdGEub3B0aW9ucyA9IGFyZ3MubWFwUmV3YXJkc1RvT3B0aW9ucygpO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1zZWN0aW9uLmRhc2hib2FyZC1oZWFkZXInLCBbXG4gICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMycpLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIudS10ZXh0LWNlbnRlci5mb250d2VpZ2h0LXNlbWlib2xkLmxpbmVoZWlnaHQtbG9vc2VyLnUtbWFyZ2luYm90dG9tLTMwJywgJ1JlbGF0w7NyaW8gZGUgYXBvaW9zJyldKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2Zvcm0nLCB7b25zdWJtaXQ6IGFyZ3Muc3VibWl0fSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwYXltZW50U3RhdGVGaWx0ZXIuY29tcG9uZW50LCBwYXltZW50U3RhdGVGaWx0ZXIuZGF0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQocmV3YXJkRmlsdGVyLmNvbXBvbmVudCwgcmV3YXJkRmlsdGVyLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTcudS1tYXJnaW50b3AtMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04Ll93LXN1Yi1jb2wnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQobWFpbkZpbHRlci5jb21wb25lbnQsIG1haW5GaWx0ZXIuZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jbGVhcmZpeC53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYWx0LWxpbmsudS1yaWdodC5mb250c2l6ZS1zbWFsbC5saW5laGVpZ2h0LWxvb3NlcltocmVmPVwiL3Byb2plY3RzLyR7cHJvamVjdF9pZH0vZG93bmxvYWRfcmVwb3J0c1wiXWAsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1kb3dubG9hZCcsICcuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgQmFpeGFyIHJlbGF0w7NyaW9zJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0SGVhZGVyO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0Q29udGVudENhcmQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QoKSxcbiAgICAgICAgICAgICAgc3RhdGVDbGFzcyA9IChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY2xhc3NlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICBvbmxpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhaWQnOiAndGV4dC1zdWNjZXNzLmZhLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdyZWZ1bmRlZCc6ICd0ZXh0LWVycm9yLmZhLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwZW5kaW5nX3JlZnVuZCc6ICd0ZXh0LWVycm9yLmZhLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwZW5kaW5nJzogJ3RleHQtd2FpdGluZy5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncmVmdXNlZCc6ICd0ZXh0LWVycm9yLmZhLWNpcmNsZSdcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGZhaWxlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAncGFpZCc6ICd0ZXh0LWVycm9yLmZhLWNpcmNsZS1vJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlZnVuZGVkJzogJ3RleHQtcmVmdW5kZWQuZmEtY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BlbmRpbmdfcmVmdW5kJzogJ3RleHQtcmVmdW5kZWQuZmEtY2lyY2xlLW8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncGVuZGluZyc6ICd0ZXh0LXJlZnVuZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlZnVzZWQnOiAndGV4dC1yZWZ1bmRlZCdcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHdhaXRpbmdfZnVuZHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhaWQnOiAndGV4dC1zdWNjZXNzLmZhLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdyZWZ1bmRlZCc6ICd0ZXh0LWVycm9yLmZhLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwZW5kaW5nX3JlZnVuZCc6ICd0ZXh0LWVycm9yLmZhLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwZW5kaW5nJzogJ3RleHQtd2FpdGluZy5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncmVmdXNlZCc6ICd0ZXh0LWVycm9yLmZhLWNpcmNsZSdcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhaWQnOiAndGV4dC1zdWNjZXNzLmZhLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdyZWZ1bmRlZCc6ICd0ZXh0LWVycm9yLmZhLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwZW5kaW5nX3JlZnVuZCc6ICd0ZXh0LWVycm9yLmZhLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwZW5kaW5nJzogJ3RleHQtd2FpdGluZy5mYS1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncmVmdXNlZCc6ICd0ZXh0LWVycm9yLmZhLWNpcmNsZSdcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2xhc3Nlc1twcm9qZWN0LnN0YXRlXVtzdGF0ZV07XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXRlQ2xhc3M6IHN0YXRlQ2xhc3NcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBsZXQgY29udHJpYnV0aW9uID0gYXJncy5jb250cmlidXRpb24oKSxcbiAgICAgICAgICAgIHByb2ZpbGVfaW1nID0gKF8uaXNFbXB0eShjb250cmlidXRpb24ucHJvZmlsZV9pbWdfdGh1bWJuYWlsKSA/ICcvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL3VzZXIuanBnJyA6IGNvbnRyaWJ1dGlvbi5wcm9maWxlX2ltZ190aHVtYm5haWwpLFxuICAgICAgICAgICAgcmV3YXJkID0gY29udHJpYnV0aW9uLnJld2FyZCB8fCB7bWluaW11bV92YWx1ZTogMCwgZGVzY3JpcHRpb246ICdOZW5odW1hIHJlY29tcGVuc2Egc2VsZWNpb25hZGEnfTtcbiAgICAgICAgcmV0dXJuIG0oJy53LWNsZWFyZml4LmNhcmQnLCBbXG4gICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEudy1jb2wtdGlueS0xJywgW1xuICAgICAgICAgICAgICAgICAgICBtKGBpbWcudXNlci1hdmF0YXIudS1tYXJnaW5ib3R0b20tMTBbc3JjPScke3Byb2ZpbGVfaW1nfSddYClcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEudy1jb2wtdGlueS0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkuZm9udHNpemUtbWluaS5mb250d2VpZ2h0LXNlbWlib2xkJywgaC5tb21lbnRpZnkoY29udHJpYnV0aW9uLmNyZWF0ZWRfYXQsICdERC9NTS9ZWVlZLCBISDptbScpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1zbWFsbGVyLmxpbmVoZWlnaHQtdGlnaHRlcicsIGNvbnRyaWJ1dGlvbi51c2VyX25hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3NlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnRyaWJ1dGlvbi5oYXNfYW5vdGhlciA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW4tbGlnaHQuYmFkZ2UuYmFkZ2UtbGlnaHQnLCAnKzEgYXBvaW8gJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb250cmlidXRpb24uYW5vbnltb3VzID8gbSgnc3Bhbi5mYS5mYS1leWUtc2xhc2guZm9udGNvbG9yLXNlY29uZGFyeScsIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeVtzdHlsZT1cImZvbnQtc2l6ZToxMXB4O1wiXScsICcgQXBvaW8gbsOjby1ww7pibGljbycpKSA6ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3NlcicsIChjb250cmlidXRpb24uZW1haWwpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcubGluZWhlaWdodC10aWdodGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBzcGFuLmZhLmZvbnRzaXplLXNtYWxsZXN0LiR7Y3RybC5zdGF0ZUNsYXNzKGNvbnRyaWJ1dGlvbi5zdGF0ZSl9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgwqDCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtbGFyZ2UnLCBgUiQgJHtoLmZvcm1hdE51bWJlcihjb250cmlidXRpb24udmFsdWUsIDIsIDMpfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250d2VpZ2h0LXNlbWlib2xkJywgYFJlY29tcGVuc2E6wqBSJCAke2guZm9ybWF0TnVtYmVyKHJld2FyZC5taW5pbXVtX3ZhbHVlLCAyLCAzKX1gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0JywgcmV3YXJkLmRlc2NyaXB0aW9uLnN1YnN0cmluZygwLCA4MCkgKyAnLi4uJylcbiAgICAgICAgICAgICAgICAgICAgICAgICBdKS8qLFxuICAgICAgICAgICAgICAgICAgICAgICAgbShcIi53LWNvbC53LWNvbC0yLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkudS10ZXh0LWNlbnRlclwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5XCIsIFwiRW52aWVpIVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiLmZvbnRzaXplLXNtYWxsZXN0LnUtbWFyZ2luYm90dG9tLTIwLmxpbmVoZWlnaHQtbG9vc2VcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiYS5jaGVja2JveC1iaWdbaHJlZj0nIyddXCIsIFwiLlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIudy1jb2wudy1jb2wtMlwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIi5mb250c2l6ZS1zbWFsbGVzdFwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJhLmxpbmstaGlkZGVuW2hyZWY9JyMnXVwiLCBcIlF1ZXN0aW9uw6FyaW9cIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLFwiIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICxtKFwic3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkLnRleHQtd2FpdGluZ1wiLCBcImVudmlhZG9cIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci10ZXJjaWFyeVwiLCBcImVtIDI5LzEwLzIwMTVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pKi9cbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAvL20oXCJhLnctaW5saW5lLWJsb2NrLmFycm93LWFkbWluLmZhLmZhLWNoZXZyb24tZG93bi5mb250Y29sb3Itc2Vjb25kYXJ5W2RhdGEtaXg9J3Nob3ctZGV0YWlsLWJveCddW2hyZWY9JyMnXVwiKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0Q29udGVudENhcmQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydENvbnRlbnRDYXJkIGZyb20gJy4vcHJvamVjdC1jb250cmlidXRpb24tcmVwb3J0LWNvbnRlbnQtY2FyZCc7XG5cbmNvbnN0IHByb2plY3RDb250cmlidXRpb25SZXBvcnRDb250ZW50ID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBsaXN0ID0gYXJncy5saXN0O1xuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5iZy1ncmF5LmJlZm9yZS1mb290ZXIuc2VjdGlvbicsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC05LnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgKGxpc3QuaXNMb2FkaW5nKCkgPyAnJyA6IGxpc3QudG90YWwoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgYXBvaW9zJ1xuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAvL20oXCIuZm9udHNpemUtbGFyZ2UuZm9udHdlaWdodC1zZW1pYm9sZFwiLCBcIlIkIDEyLjAwMCwwMFwiKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgIFRPRE86IG9yZGVyaW5nIGZpbHRlciB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICBtKFwiLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTZcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbShcIi53LWZvcm1cIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJmb3JtW2RhdGEtbmFtZT0nRW1haWwgRm9ybSA1J11baWQ9J2VtYWlsLWZvcm0tNSddW25hbWU9J2VtYWlsLWZvcm0tNSddXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5XCIsIFwiT3JkZW5hciBwb3I6XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwic2VsZWN0Lnctc2VsZWN0LnRleHQtZmllbGQucG9zaXRpdmUuZm9udHNpemUtc21hbGxlc3RbaWQ9J2ZpZWxkLTknXVtuYW1lPSdmaWVsZC05J11cIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIm9wdGlvblt2YWx1ZT0nJ11cIiwgXCJEYXRhIChyZWNlbnRlcyBwYXJhIGFudGlnb3MpXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIm9wdGlvblt2YWx1ZT0nJ11cIiwgXCJEYXRhIChhbnRpZ29zIHBhcmEgcmVjZW50ZXMpXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIm9wdGlvblt2YWx1ZT0nJ11cIiwgXCJWYWxvciAobWFpb3IgcGFyYSBtZW5vcilcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwib3B0aW9uW3ZhbHVlPSdGaXJzdCddXCIsIFwiVmFsb3IgKG1lbm9yIHBhcmEgbWFpb3IpXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pKi9cbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfLm1hcChsaXN0LmNvbGxlY3Rpb24oKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udHJpYnV0aW9uID0gbS5wcm9wKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQocHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydENvbnRlbnRDYXJkLCB7cHJvamVjdDogYXJncy5wcm9qZWN0LCBjb250cmlidXRpb246IGNvbnRyaWJ1dGlvbn0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi5iZy1ncmF5JywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTYwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtcHVzaC01JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICghbGlzdC5pc0xvYWRpbmcoKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsaXN0LmlzTGFzdFBhZ2UoKSA/ICcnIDogbSgnYnV0dG9uI2xvYWQtbW9yZS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBsaXN0Lm5leHRQYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdDYXJyZWdhciBtYWlzJykpIDogaC5sb2FkZXIoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG5cbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcblxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0Q29udGVudDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHJlcGxhY2VEaWFjcml0aWNzIGZyb20gJ3JlcGxhY2VEaWFjcml0aWNzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgIGZ1bGxfdGV4dF9pbmRleDogJ0BAJyxcbiAgICBzdGF0ZTogJ2luJyxcbiAgICByZXdhcmRfaWQ6ICdlcScsXG4gICAgcHJvamVjdF9pZDogJ2VxJ1xufSksXG4gICAgICBwYXJhbVRvU3RyaW5nID0gKHApID0+IHtcbiAgICAgICAgICByZXR1cm4gKHAgfHwgJycpLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgfTtcblxudm0uc3RhdGUoJycpO1xudm0ub3JkZXIoe1xuICAgIGlkOiAnZGVzYydcbn0pO1xuXG52bS5mdWxsX3RleHRfaW5kZXgudG9GaWx0ZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgZmlsdGVyID0gcGFyYW1Ub1N0cmluZyh2bS5mdWxsX3RleHRfaW5kZXgoKSk7XG4gICAgcmV0dXJuIGZpbHRlciAmJiByZXBsYWNlRGlhY3JpdGljcyhmaWx0ZXIpIHx8IHVuZGVmaW5lZDtcbn07XG5cbnZtLndpdGhOdWxsUGFyYW1ldGVycyA9ICgpID0+IHtcbiAgICBjb25zdCB3aXRoTnVsbFZtID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgIGZ1bGxfdGV4dF9pbmRleDogJ0BAJyxcbiAgICAgICAgc3RhdGU6ICdpbicsXG4gICAgICAgIHJld2FyZF9pZDogJ2lzJyxcbiAgICAgICAgcHJvamVjdF9pZDogJ2VxJ1xuICAgIH0pO1xuXG4gICAgd2l0aE51bGxWbS5mdWxsX3RleHRfaW5kZXgodm0uZnVsbF90ZXh0X2luZGV4KCkpO1xuICAgIHdpdGhOdWxsVm0ub3JkZXIodm0ub3JkZXIoKSk7XG4gICAgd2l0aE51bGxWbS5zdGF0ZSh2bS5zdGF0ZSgpKTtcbiAgICB3aXRoTnVsbFZtLnJld2FyZF9pZCh2bS5yZXdhcmRfaWQoKSk7XG4gICAgd2l0aE51bGxWbS5wcm9qZWN0X2lkKHZtLnByb2plY3RfaWQoKSk7XG5cbiAgICByZXR1cm4gd2l0aE51bGxWbS5wYXJhbWV0ZXJzKCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB2bTtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5jb250cmlidXRpb25zX3JlcG9ydC5sZWdlbmRfbGFiZWxzJyk7XG5cbmNvbnN0IFByb2plY3RDb250cmlidXRpb25TdGF0ZUxlZ2VuZE1vZGFsID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGUgPSAocGF0aCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIEkxOG4udChwYXRoLCBJMThuU2NvcGUoKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YWdlczoge1xuICAgICAgICAgICAgICAgIG9ubGluZTogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdHJhbnNsYXRlKCdvbmxpbmUucGFpZC5sYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdHJhbnNsYXRlKCdvbmxpbmUucGFpZC50ZXh0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBpX2NsYXNzOiAnLmZhLmZhLWNpcmNsZS50ZXh0LXN1Y2Nlc3MnXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0cmFuc2xhdGUoJ29ubGluZS5wZW5kaW5nLmxhYmVsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0cmFuc2xhdGUoJ29ubGluZS5wZW5kaW5nLnRleHQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlfY2xhc3M6ICcuZmEuZmEtY2lyY2xlLnRleHQtd2FpdGluZydcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRyYW5zbGF0ZSgnb25saW5lLnJlZnVuZGVkLmxhYmVsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0cmFuc2xhdGUoJ29ubGluZS5yZWZ1bmRlZC50ZXh0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBpX2NsYXNzOiAnLmZhLmZhLWNpcmNsZS50ZXh0LWVycm9yJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBmYWlsZWQ6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRyYW5zbGF0ZSgnZmFpbGVkLnBlbmRpbmdfcmVmdW5kLmxhYmVsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0cmFuc2xhdGUoJ2ZhaWxlZC5wZW5kaW5nX3JlZnVuZC50ZXh0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBpX2NsYXNzOiAnLmZhLmZhLWNpcmNsZS1vLnRleHQtcmVmdW5kZWQnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0cmFuc2xhdGUoJ2ZhaWxlZC5yZWZ1bmRlZC5sYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdHJhbnNsYXRlKCdmYWlsZWQucmVmdW5kZWQudGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaV9jbGFzczogJy5mYS5mYS1jaXJjbGUudGV4dC1yZWZ1bmRlZCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRyYW5zbGF0ZSgnZmFpbGVkLnBhaWQubGFiZWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRyYW5zbGF0ZSgnZmFpbGVkLnBhaWQudGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaV9jbGFzczogJy5mYS5mYS1jaXJjbGUtby50ZXh0LWVycm9yJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzZnVsOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0cmFuc2xhdGUoJ3N1Y2Nlc3NmdWwucGFpZC5sYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdHJhbnNsYXRlKCdzdWNjZXNzZnVsLnBhaWQudGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaV9jbGFzczogJy5mYS5mYS1jaXJjbGUudGV4dC1zdWNjZXNzJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdHJhbnNsYXRlKCdzdWNjZXNzZnVsLnJlZnVuZGVkLmxhYmVsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0cmFuc2xhdGUoJ3N1Y2Nlc3NmdWwucmVmdW5kZWQudGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaV9jbGFzczogJy5mYS5mYS1jaXJjbGUudGV4dC1lcnJvcidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IF8uZmlyc3QoYXJncy5wcm9qZWN0KCkpLFxuICAgICAgICAgICAgICBwcm9qZWN0X3N0YWdlID0gKHByb2plY3Quc3RhdGUgPT0gJ3dhaXRpbmdfZnVuZHMnID8gJ29ubGluZScgOiBwcm9qZWN0LnN0YXRlKTtcblxuICAgICAgICByZXR1cm4gbSgnZGl2JywgW1xuICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1oZWFkZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXInLFxuICAgICAgICAgICAgICAgICAgJ1N0YXR1cyBkbyBhcG9pbycpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctY29udGVudCcsIF8ubWFwKGN0cmwuc3RhZ2VzW3Byb2plY3Rfc3RhZ2VdLCAoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBtKCcudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC5mb250d2VpZ2h0LXNlbWlib2xkJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbShgc3BhbiR7aXRlbS5pX2NsYXNzfWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgYCDCoCR7aXRlbS5sYWJlbH1gXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlcicsIG0udHJ1c3QoaXRlbS50ZXh0KSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH0pKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9qZWN0Q29udHJpYnV0aW9uU3RhdGVMZWdlbmRNb2RhbDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgUHJvamVjdENvbnRyaWJ1dGlvblN0YXRlTGVnZW5kTW9kYWwgZnJvbSAnLi4vYy9wcm9qZWN0LWNvbnRyaWJ1dGlvbi1zdGF0ZS1sZWdlbmQtbW9kYWwnO1xuaW1wb3J0IG1vZGFsQm94IGZyb20gJy4vbW9kYWwtYm94JztcblxuY29uc3QgSW5mb1Byb2plY3RDb250cmlidXRpb25TdGF0ZUxlZ2VuZCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZGFsVG9nZ2xlOiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJ3NwYW4nLCBbXG4gICAgICAgICAgICBhcmdzLnRleHQsXG4gICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgIG0oJ2EuZmEuZmEtcXVlc3Rpb24tY2lyY2xlLmZvbnRjb2xvci1zZWNvbmRhcnlbaHJlZj1cIiNcIl0nLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogY3RybC5tb2RhbFRvZ2dsZS50b2dnbGVcbiAgICAgICAgICAgIH0sJycpLFxuICAgICAgICAgICAgKGN0cmwubW9kYWxUb2dnbGUoKSA/IG0uY29tcG9uZW50KG1vZGFsQm94LCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheU1vZGFsOiBjdHJsLm1vZGFsVG9nZ2xlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFtQcm9qZWN0Q29udHJpYnV0aW9uU3RhdGVMZWdlbmRNb2RhbCwge1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBhcmdzLnByb2plY3RcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSkgOiAnJylcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgSW5mb1Byb2plY3RDb250cmlidXRpb25TdGF0ZUxlZ2VuZDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3REYXNoYm9hcmRNZW51IGZyb20gJy4uL2MvcHJvamVjdC1kYXNoYm9hcmQtbWVudSc7XG5pbXBvcnQgcHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydEhlYWRlciBmcm9tICcuLi9jL3Byb2plY3QtY29udHJpYnV0aW9uLXJlcG9ydC1oZWFkZXInO1xuaW1wb3J0IHByb2plY3RDb250cmlidXRpb25SZXBvcnRDb250ZW50IGZyb20gJy4uL2MvcHJvamVjdC1jb250cmlidXRpb24tcmVwb3J0LWNvbnRlbnQnO1xuaW1wb3J0IHByb2plY3RzQ29udHJpYnV0aW9uUmVwb3J0Vk0gZnJvbSAnLi4vdm1zL3Byb2plY3RzLWNvbnRyaWJ1dGlvbi1yZXBvcnQtdm0nO1xuaW1wb3J0IEZpbHRlck1haW4gZnJvbSAnLi4vYy9maWx0ZXItbWFpbic7XG5pbXBvcnQgRmlsdGVyRHJvcGRvd24gZnJvbSAnLi4vYy9maWx0ZXItZHJvcGRvd24nO1xuaW1wb3J0IEluZm9Qcm9qZWN0Q29udHJpYnV0aW9uU3RhdGVMZWdlbmQgZnJvbSAnLi4vYy9pbmZvLXByb2plY3QtY29udHJpYnV0aW9uLXN0YXRlLWxlZ2VuZCc7XG5cbmNvbnN0IHByb2plY3RDb250cmlidXRpb25SZXBvcnQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGxpc3RWTSA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnByb2plY3RDb250cmlidXRpb24sICdpZC5kZXNjJywgeydQcmVmZXInOiAnY291bnQ9ZXhhY3QnfSksXG4gICAgICAgICAgICAgIGZpbHRlclZNID0gcHJvamVjdHNDb250cmlidXRpb25SZXBvcnRWTSxcbiAgICAgICAgICAgICAgcHJvamVjdCA9IG0ucHJvcChbe31dKSxcbiAgICAgICAgICAgICAgcmV3YXJkcyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICAgIGNvbnRyaWJ1dGlvblN0YXRlT3B0aW9ucyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICAgIHJlbG9hZFNlbGVjdE9wdGlvbnMgPSAocHJvamVjdF9zdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgbGV0IG9wdHMgPSBbe3ZhbHVlOiAnJywgb3B0aW9uOiAnVG9kb3MnfV07XG5cbiAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnNfbWFwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICdvbmxpbmUnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3BhaWQnLCBvcHRpb246ICdDb25maXJtYWRvJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3BlbmRpbmcnLCBvcHRpb246ICdJbmljaWFkbyd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdyZWZ1bmRlZCxjaGFyZ2ViYWNrLGRlbGV0ZWQscGVuZGluZ19yZWZ1bmQnLCBvcHRpb246ICdDb250ZXN0YWRvJ30sXG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAnd2FpdGluZ19mdW5kcyc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAncGFpZCcsIG9wdGlvbjogJ0NvbmZpcm1hZG8nfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAncGVuZGluZycsIG9wdGlvbjogJ0luaWNpYWRvJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3JlZnVuZGVkLGNoYXJnZWJhY2ssZGVsZXRlZCxwZW5kaW5nX3JlZnVuZCcsIG9wdGlvbjogJ0NvbnRlc3RhZG8nfSxcbiAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICdmYWlsZWQnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3BlbmRpbmdfcmVmdW5kJywgb3B0aW9uOiAnUmVlbWJvbHNvIGVtIGFuZGFtZW50byd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdyZWZ1bmRlZCcsIG9wdGlvbjogJ1JlZW1ib2xzYWRvJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3BhaWQnLCBvcHRpb246ICdSZWVtYm9sc28gbsOjbyBpbmljaWFkbyd9LFxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3NmdWwnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3BhaWQnLCBvcHRpb246ICdDb25maXJtYWRvJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3JlZnVuZGVkLGNoYXJnZWJhY2ssZGVsZXRlZCxwZW5kaW5nX3JlZnVuZCcsIG9wdGlvbjogJ0NvbnRlc3RhZG8nfSxcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICBvcHRzID0gb3B0cy5jb25jYXQob3B0aW9uc19tYXBbcHJvamVjdF9zdGF0ZV0gfHwgW10pO1xuXG4gICAgICAgICAgICAgICAgICBjb250cmlidXRpb25TdGF0ZU9wdGlvbnMob3B0cyk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZpbHRlckJ1aWxkZXIgPSBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiBGaWx0ZXJNYWluLFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRXcmFwcGVyQ2xhc3M6ICcudy1pbnB1dC50ZXh0LWZpZWxkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQ2xhc3M6ICcuYnRuLmJ0bi1tZWRpdW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2bTogZmlsdGVyVk0uZnVsbF90ZXh0X2luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0J1c3F1ZSBwb3Igbm9tZSBvdSBlbWFpbCBkbyBhcG9pYWRvcidcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdyZXdhcmRfZmlsdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ6IEZpbHRlckRyb3Bkb3duLFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdSZWNvbXBlbnNhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Jld2FyZF9pZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZtOiBmaWx0ZXJWTS5yZXdhcmRfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXJfY2xhc3M6ICcudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNi53LXN1Yi1jb2wtbWlkZGxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW11cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdwYXltZW50X3N0YXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ6IEZpbHRlckRyb3Bkb3duLFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tX2xhYmVsOiBbSW5mb1Byb2plY3RDb250cmlidXRpb25TdGF0ZUxlZ2VuZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1N0YXR1cyBkbyBhcG9pbycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc3RhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2bTogZmlsdGVyVk0uc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXJfY2xhc3M6ICcudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNi53LXN1Yi1jb2wtbWlkZGxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogY29udHJpYnV0aW9uU3RhdGVPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdWJtaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyVk0ucmV3YXJkX2lkKCkgPT09ICdudWxsJykge1xuICAgICAgICAgICAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UoZmlsdGVyVk0ud2l0aE51bGxQYXJhbWV0ZXJzKCkpLnRoZW4obnVsbCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UoZmlsdGVyVk0ucGFyYW1ldGVycygpKS50aGVuKG51bGwpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgZmlsdGVyVk0ucHJvamVjdF9pZChhcmdzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykpO1xuXG4gICAgICAgIGNvbnN0IGxSZXdhcmQgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKG1vZGVscy5yZXdhcmREZXRhaWwuZ2V0UGFnZU9wdGlvbnMoe3Byb2plY3RfaWQ6IGBlcS4ke2ZpbHRlclZNLnByb2plY3RfaWQoKX1gfSkpO1xuICAgICAgICBjb25zdCBsUHJvamVjdCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obW9kZWxzLnByb2plY3REZXRhaWwuZ2V0UGFnZU9wdGlvbnMoe3Byb2plY3RfaWQ6IGBlcS4ke2ZpbHRlclZNLnByb2plY3RfaWQoKX1gfSkpO1xuXG4gICAgICAgIGxSZXdhcmQubG9hZCgpLnRoZW4ocmV3YXJkcyk7XG4gICAgICAgIGxQcm9qZWN0LmxvYWQoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBwcm9qZWN0KGRhdGEpO1xuICAgICAgICAgICAgcmVsb2FkU2VsZWN0T3B0aW9ucyhfLmZpcnN0KGRhdGEpLnN0YXRlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbWFwUmV3YXJkc1RvT3B0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gW107XG4gICAgICAgICAgICBpZiAoIWxSZXdhcmQoKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBfLm1hcChyZXdhcmRzKCksIChyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogci5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogYFIkICR7aC5mb3JtYXROdW1iZXIoci5taW5pbXVtX3ZhbHVlLCAyLCAzKX0gLSAke3IuZGVzY3JpcHRpb24uc3Vic3RyaW5nKDAsIDIwKX1gXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICAgICAgb3B0aW9uOiAnU2VtIHJlY29tcGVuc2EnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb3B0aW9ucy51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAgICAgICAgb3B0aW9uOiAnVG9kYXMnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFsaXN0Vk0uY29sbGVjdGlvbigpLmxlbmd0aCkge1xuICAgICAgICAgICAgbGlzdFZNLmZpcnN0UGFnZShmaWx0ZXJWTS5wYXJhbWV0ZXJzKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpc3RWTTogbGlzdFZNLFxuICAgICAgICAgICAgZmlsdGVyVk06IGZpbHRlclZNLFxuICAgICAgICAgICAgZmlsdGVyQnVpbGRlcjogZmlsdGVyQnVpbGRlcixcbiAgICAgICAgICAgIHN1Ym1pdDogc3VibWl0LFxuICAgICAgICAgICAgbFJld2FyZDogbFJld2FyZCxcbiAgICAgICAgICAgIGxQcm9qZWN0OiBsUHJvamVjdCxcbiAgICAgICAgICAgIHJld2FyZHM6IHJld2FyZHMsXG4gICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgbWFwUmV3YXJkc1RvT3B0aW9uczogbWFwUmV3YXJkc1RvT3B0aW9uc1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBjdHJsLmxpc3RWTTtcblxuICAgICAgICBpZiAoIWN0cmwubFByb2plY3QoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0RGFzaGJvYXJkTWVudSwge3Byb2plY3Q6IG0ucHJvcChfLmZpcnN0KGN0cmwucHJvamVjdCgpKSl9KSxcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0SGVhZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHN1Ym1pdDogY3RybC5zdWJtaXQsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlckJ1aWxkZXI6IGN0cmwuZmlsdGVyQnVpbGRlcixcbiAgICAgICAgICAgICAgICAgICAgZm9ybTogY3RybC5maWx0ZXJWTS5mb3JtRGVzY3JpYmVyLFxuICAgICAgICAgICAgICAgICAgICBtYXBSZXdhcmRzVG9PcHRpb25zOiBjdHJsLm1hcFJld2FyZHNUb09wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclZNOiBjdHJsLmZpbHRlclZNXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbSgnLmRpdmlkZXIudS1tYXJnaW50b3AtMzAnKSxcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0Q29udGVudCwge1xuICAgICAgICAgICAgICAgICAgICBsaXN0OiBsaXN0LFxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBtLnByb3AoXy5maXJzdChjdHJsLnByb2plY3QoKSkpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaC5sb2FkZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RDb250cmlidXRpb25SZXBvcnQ7XG4iLCIvKipcbiAqIHdpbmRvdy5jLnJvb3QuUHJvamVjdHNEYXNoYm9hcmQgY29tcG9uZW50XG4gKiBBIHJvb3QgY29tcG9uZW50IHRvIG1hbmFnZSBwcm9qZWN0c1xuICpcbiAqIEV4YW1wbGU6XG4gKiBUbyBtb3VudCB0aGlzIGNvbXBvbmVudCBqdXN0IGNyZWF0ZSBhIERPTSBlbGVtZW50IGxpa2U6XG4gKiA8ZGl2IGRhdGEtbWl0aHJpbD1cIlByb2plY3RzRGFzaGJvYXJkXCI+XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBwcm9qZWN0Vk0gZnJvbSAnLi4vdm1zL3Byb2plY3Qtdm0nO1xuaW1wb3J0IHByb2plY3REYXNoYm9hcmRNZW51IGZyb20gJy4uL2MvcHJvamVjdC1kYXNoYm9hcmQtbWVudSc7XG5cbmNvbnN0IHByb2plY3RzRGFzaGJvYXJkID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBwcm9qZWN0Vk0uaW5pdChhcmdzLnByb2plY3RfaWQsIGFyZ3MucHJvamVjdF91c2VyX2lkKTtcblxuICAgICAgICByZXR1cm4gcHJvamVjdFZNO1xuICAgIH0sXG4gICAgdmlldyhjdHJsKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBjdHJsLmN1cnJlbnRQcm9qZWN0O1xuXG4gICAgICAgIHJldHVybiBwcm9qZWN0KCkuaXNfb3duZXJfb3JfYWRtaW4gP1xuICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdERhc2hib2FyZE1lbnUsIHtwcm9qZWN0OiBwcm9qZWN0fSkgOiAnJztcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0c0Rhc2hib2FyZDtcbiIsIi8qKlxuICogd2luZG93LmMuU2VhcmNoIGNvbXBvbmVudFxuICogUmV0dXJucyBhIHNlYXJjaCBpbnB1dFxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlNlYXJjaCwge2FjdGlvbjogJy9zZWFyY2gnLCBtZXRob2Q6ICdHRVQnfSlcbiAqL1xuXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuY29uc3Qgc2VhcmNoID0ge1xuICAgIHZpZXcoY3RybCwgYXJncyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGFyZ3MuYWN0aW9uIHx8ICcvcHQvZXhwbG9yZT9yZWY9Y3Ryc2VfZXhwbG9yZV9wZ3NlYXJjaCcsXG4gICAgICAgICAgICBtZXRob2QgPSBhcmdzLm1ldGhvZCB8fCAnR0VUJztcblxuICAgICAgICByZXR1cm4gbSgnI3NlYXJjaC53LWNvbnRhaW5lci53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bScsIFtcbiAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTAudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdmb3JtI2VtYWlsLWZvcm0nLCB7YWN0aW9uOiBhY3Rpb24sIG1ldGhvZDogbWV0aG9kfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnctY29sLXNtYWxsLTEwLnctY29sLXRpbnktMTAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dFt0eXBlPVwidGV4dFwiXVtuYW1lPVwicGdfc2VhcmNoXCJdW3BsYWNlaG9sZGVyPVwiQnVzcXVlIHByb2pldG9zXCJdI3BnX3NlYXJjaF9pbnNpZGUudy1pbnB1dC50ZXh0LWZpZWxkLm5lZ2F0aXZlLnByZWZpeCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1zbWFsbC0yLnctY29sLXRpbnktMicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2J1dHRvbi53LWlubGluZS1ibG9jay5idG4uYnRuLWRhcmsuYnRuLWF0dGFjaGVkLnBvc3RmaXgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLmhlYWRlci1sdXBhW3NyYz1cImh0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTRlNDQxNzhiMjEzNWZjZTJiNmNkMjM1X2x1cGEucG5nXCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlYXJjaDtcbiIsIi8qKlxuICogd2luZG93LmMuQ2F0ZWdvcnlCdXR0b24gY29tcG9uZW50XG4gKiBSZXR1cm4gYSBsaW5rIHdpdGggYSBidG4tY2F0ZWdvcnkgY2xhc3MuXG4gKiBJdCB1c2VzIGEgY2F0ZWdvcnkgcGFyYW1ldGVyLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLkNhdGVnb3J5QnV0dG9uLCB7XG4gKiAgICAgY2F0ZWdvcnk6IHtcbiAqICAgICAgICAgaWQ6IDEsXG4gKiAgICAgICAgIG5hbWU6ICdWaWRlbycsXG4gKiAgICAgICAgIG9ubGluZV9wcm9qZWN0czogMVxuICogICAgIH1cbiAqIH0pXG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5jb25zdCBjYXRlZ29yeUJ1dHRvbiA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSBhcmdzLmNhdGVnb3J5O1xuXG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcbiAgICAgICAgICAgIG0oYGEudy1pbmxpbmUtYmxvY2suYnRuLWNhdGVnb3J5W2hyZWY9JyNieV9jYXRlZ29yeV9pZC8ke2NhdGVnb3J5LmlkfSddYCwgW1xuICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5iYWRnZS5leHBsb3JlJywgY2F0ZWdvcnkub25saW5lX3Byb2plY3RzKVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2F0ZWdvcnlCdXR0b247XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IFNpZ25lZEZyaWVuZEZhY2Vib29rQ29ubmVjdCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgbWFwV2l0aEF2YXRhciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBfLnNhbXBsZShfLmZpbHRlcihhcmdzLmZyaWVuZExpc3RWTS5jb2xsZWN0aW9uKCksIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFfLmlzTnVsbChpdGVtLmF2YXRhcik7XG4gICAgICAgICAgICB9KSwgOCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hcFdpdGhBdmF0YXI6IG1hcFdpdGhBdmF0YXJcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBpZiAoYXJncy5mcmllbmRMaXN0Vk0uaXNMb2FkaW5nKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBoLmxvYWRlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRvdGFsID0gYXJncy5mcmllbmRMaXN0Vk0udG90YWwoKTtcbiAgICAgICAgICAgIHJldHVybiBtKCcudy1zZWN0aW9uLnNlY3Rpb24uYmctYmFja3MtY2Fycm9zZWwuc2VjdGlvbi1sYXJnZScsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5jYXJkLmNhcmQtYmlnJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdC51LW1hcmdpbmJvdHRvbS0yMCcsICdFbmNvbnRyZSBwcm9qZXRvcyBpbmNyw612ZWlzIGp1bnRvIGNvbSBzZXVzIGFtaWdvcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwnLCAnTyB1bml2ZXJzbyBkbyBDYXRhcnNlIGp1bnRvIGNvbSBhIHN1YSByZWRlIGRvIEZhY2Vib29rIHRlIGZhcsOjbyBkZXNjb2JyaXIgcHJvamV0b3MgaW5jcsOtdmVpcyEnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC51LW1hcmdpbmJvdHRvbS0xMCcsIGAke3RvdGFsfSBkb3Mgc2V1cyBhbWlnb3MgZXN0w6NvIG5vIENhdGFyc2UhYCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGN0cmwubWFwV2l0aEF2YXRhcigpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKGBpbWcudGh1bWIuc21hbGwudS1yb3VuZC51LW1hcmdpbmJvdHRvbS0xMFtzcmM9XCIke2l0ZW0uYXZhdGFyfVwiXWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodG90YWwgPiAwID8gbSgnYS53LWJ1dHRvbi5idG4uYnRuLWxhcmdlW2hyZWY9XCIvZm9sbG93LWZiLWZyaWVuZHNcIl0nLCAnUHJvY3VyZSBzZXVzIGFtaWdvcycpIDogbSgnYS53LWJ1dHRvbi5idG4uYnRuLWZiLmJ0bi1sYXJnZS51LW1hcmdpbnRvcC0zMC51LW1hcmdpbmJvdHRvbS0xMFtocmVmPVwiL2Nvbm5lY3QtZmFjZWJvb2tcIl0nLCAnQ29uZWN0ZSBzZXUgZmFjZWJvb2snKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTaWduZWRGcmllbmRGYWNlYm9va0Nvbm5lY3Q7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IFVuc2lnbmVkRnJpZW5kRmFjZWJvb2tDb25uZWN0ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFyZ2VCZzogKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChhcmdzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfLmlzVW5kZWZpbmVkKGFyZ3MubGFyZ2VCZykgPyBmYWxzZSA6IGFyZ3MubGFyZ2VCZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKGAudy1zZWN0aW9uLnNlY3Rpb24keyhjdHJsLmxhcmdlQmcgPyAnLmJnLWJhY2tzLWNhcnJvc2VsLnNlY3Rpb24tbGFyZ2UnIDogJycpfWAsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICBtKCcuY2FyZC5jYXJkLWJpZycsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlc3QudS1tYXJnaW5ib3R0b20tMjAnLCAnRW5jb250cmUgcHJvamV0b3MgaW5jcsOtdmVpcyBqdW50byBjb20gc2V1cyBhbWlnb3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwnLCAnTyB1bml2ZXJzbyBkbyBDYXRhcnNlIGp1bnRvIGNvbSBhIHN1YSByZWRlIGRvIEZhY2Vib29rIHRlIGZhcsOjbyBkZXNjb2JyaXIgcHJvamV0b3MgaW5jcsOtdmVpcyEnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tZmIuYnRuLWxhcmdlLnUtbWFyZ2ludG9wLTMwLnUtbWFyZ2luYm90dG9tLTEwW2hyZWY9XCIvY29ubmVjdC1mYWNlYm9va1wiXScsICdDb25lY3RlIHNldSBmYWNlYm9vaycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5LnUtdGV4dC1jZW50ZXInLCAnTsOzcyBudW5jYSBwb3N0YXJlbW9zIG5hZGEgbm8gZmFjZWJvb2sgc2VtIHN1YSBwZXJtaXNzw6NvJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFVuc2lnbmVkRnJpZW5kRmFjZWJvb2tDb25uZWN0O1xuIiwiLyoqXG4gKiB3aW5kb3cucm9vdC5Qcm9qZWN0c0V4cGxvcmUgY29tcG9uZW50XG4gKiBBIHJvb3QgY29tcG9uZW50IHRvIHNob3cgcHJvamVjdHMgYWNjb3JkaW5nIHRvIHVzZXIgZGVmaW5lZCBmaWx0ZXJzXG4gKlxuICogRXhhbXBsZTpcbiAqIFRvIG1vdW50IHRoaXMgY29tcG9uZW50IGp1c3QgY3JlYXRlIGEgRE9NIGVsZW1lbnQgbGlrZTpcbiAqIDxkaXYgZGF0YS1taXRocmlsPVwiUHJvamVjdHNFeHBsb3JlXCI+XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgcHJvamVjdEZpbHRlcnMgZnJvbSAnLi4vdm1zL3Byb2plY3QtZmlsdGVycy12bSc7XG5pbXBvcnQgc2VhcmNoIGZyb20gJy4uL2Mvc2VhcmNoJztcbmltcG9ydCBjYXRlZ29yeUJ1dHRvbiBmcm9tICcuLi9jL2NhdGVnb3J5LWJ1dHRvbic7XG5pbXBvcnQgcHJvamVjdENhcmQgZnJvbSAnLi4vYy9wcm9qZWN0LWNhcmQnO1xuaW1wb3J0IHRvb2x0aXAgZnJvbSAnLi4vYy90b29sdGlwJztcbmltcG9ydCBTaWduZWRGcmllbmRGYWNlYm9va0Nvbm5lY3QgZnJvbSAnLi4vYy9zaWduZWQtZnJpZW5kLWZhY2Vib29rLWNvbm5lY3QnO1xuaW1wb3J0IFVuc2lnbmVkRnJpZW5kRmFjZWJvb2tDb25uZWN0IGZyb20gJy4uL2MvdW5zaWduZWQtZnJpZW5kLWZhY2Vib29rLWNvbm5lY3QnO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwYWdlcy5leHBsb3JlJyk7XG5cbi8vIFRPRE8gU2xpbSBkb3duIGNvbnRyb2xsZXIgYnkgYWJzdHJhY3RpbmcgbG9naWMgdG8gdmlldy1tb2RlbHMgd2hlcmUgaXQgZml0c1xuY29uc3QgcHJvamVjdHNFeHBsb3JlID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBmaWx0ZXJzID0gcG9zdGdyZXN0LmZpbHRlcnNWTSxcbiAgICAgICAgICAgICAgcHJvamVjdEZpbHRlcnNWTSA9IHByb2plY3RGaWx0ZXJzKCksXG4gICAgICAgICAgICAgIGZpbHRlcnNNYXAgPSBwcm9qZWN0RmlsdGVyc1ZNLmZpbHRlcnMsXG4gICAgICAgICAgICAgIGRlZmF1bHRGaWx0ZXIgPSBoLnBhcmFtQnlOYW1lKCdmaWx0ZXInKSB8fCAnYWxsJyxcbiAgICAgICAgICAgICAgZmFsbGJhY2tGaWx0ZXIgPSAnYWxsJyxcbiAgICAgICAgICAgICAgY3VycmVudEZpbHRlciA9IG0ucHJvcChmaWx0ZXJzTWFwW2RlZmF1bHRGaWx0ZXJdKSxcbiAgICAgICAgICAgICAgY2hhbmdlRmlsdGVyID0gKG5ld0ZpbHRlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgY3VycmVudEZpbHRlcihmaWx0ZXJzTWFwW25ld0ZpbHRlcl0pO1xuICAgICAgICAgICAgICAgICAgbG9hZFJvdXRlKCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJlc2V0Q29udGV4dEZpbHRlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaWx0ZXIoZmlsdGVyc01hcFtkZWZhdWx0RmlsdGVyXSk7XG4gICAgICAgICAgICAgICAgICBwcm9qZWN0RmlsdGVyc1ZNLnNldENvbnRleHRGaWx0ZXJzKFsnZmluaXNoZWQnLCAnYWxsJywgJ2NvbnRyaWJ1dGVkX2J5X2ZyaWVuZHMnXSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGN1cnJlbnRVc2VyID0gaC5nZXRVc2VyKCksXG4gICAgICAgICAgICAgIGN1cnJlbnRVc2VySWQgPSBjdXJyZW50VXNlci5pZCxcbiAgICAgICAgICAgICAgaGFzRkJBdXRoID0gY3VycmVudFVzZXIuaGFzX2ZiX2F1dGgsXG4gICAgICAgICAgICAgIGJ1aWxkVG9vbHRpcCA9ICh0b29sdGlwVGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KHRvb2x0aXAsIHtcbiAgICAgICAgICAgICAgICAgICAgICBlbDogJy50b29sdGlwLXdyYXBwZXIuZmEuZmEtcXVlc3Rpb24tY2lyY2xlLmZvbnRjb2xvci1zZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRvb2x0aXBUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzODBcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBoaW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gVE9ETyBBZGQgY29waWVzIHRvIGkxOG4uXG4gICAgICAgICAgICAgICAgICBsZXQgaGludFRleHQgPSAnJyxcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFRleHQgPSAnJyxcbiAgICAgICAgICAgICAgICAgICAgaGFzSGludCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGaWx0ZXIoKS5rZXlOYW1lID09PSAnYWxsJykge1xuICAgICAgICAgICAgICAgICAgICAgIGhhc0hpbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIGhpbnRUZXh0ID0gJ09yZGVuYWRvcyBwb3IgcG9wdWxhcmlkYWRlICc7XG4gICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFRleHQgPSAnTyBub3NzbyBmYXRvciBwb3B1bGFyaWRhZGUgw6kgdW1hIG1pc3R1cmEgZGEgc2VsZcOnw6NvIGRvIHRpbWUgZG8gQ2F0YXJzZSBjb20gdW0gdmFsb3IgcXVlIMOpIGNhbGN1bGFkbyBwZWxhIHZlbG9jaWRhZGUgZGUgYXJyZWNhZGHDp8OjbyBkbyBwcm9qZXRvJztcbiAgICAgICAgICAgICAgICAgIH1lbHNlIGlmIChjdXJyZW50RmlsdGVyKCkua2V5TmFtZSA9PT0gJ2ZpbmlzaGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgIGhhc0hpbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIGhpbnRUZXh0ID0gJ09yZGVuYWRvcyBwb3IgUiQgYWxjYW7Dp2FkbyAnO1xuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBUZXh0ID0gJ09zIHByb2pldG9zIGNvbSBtYWlvciBtZXRhIGRlIGFycmVjYWRhw6fDo28gYWxjYW7Dp2FkYSBmaWNhbSBubyB0b3BvJztcbiAgICAgICAgICAgICAgICAgIH1lbHNlIGlmIChjdXJyZW50RmlsdGVyKCkua2V5TmFtZSA9PT0gJ2NvbnRyaWJ1dGVkX2J5X2ZyaWVuZHMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaGFzSGludCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgaGludFRleHQgPSAnUHJvamV0b3MgYXBvaWFkb3MgcG9yIGFtaWdvcyAnO1xuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBUZXh0ID0gJ1Byb2pldG9zIGFwb2lhZG9zIHBvciBhbWlnb3MnO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gaGFzSGludCA/IG0oJy5mb250c2l6ZS1zbWFsbGVyLmZvbnRjb2xvci1zZWNvbmRhcnknLCBbaGludFRleHQsIGJ1aWxkVG9vbHRpcCh0b29sdGlwVGV4dCldKSA6ICcnO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBpc1NlYXJjaCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICAgIGNhdGVnb3J5Q29sbGVjdGlvbiA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICAgIGNhdGVnb3J5SWQgPSBtLnByb3AoKSxcbiAgICAgICAgICAgICAgZmluZENhdGVnb3J5ID0gKGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXy5maW5kKGNhdGVnb3J5Q29sbGVjdGlvbigpLCBmdW5jdGlvbihjKXsgcmV0dXJuIGMuaWQgPT09IHBhcnNlSW50KGlkKTsgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNhdGVnb3J5ID0gXy5jb21wb3NlKGZpbmRDYXRlZ29yeSwgY2F0ZWdvcnlJZCksXG4gICAgICAgICAgICAgIGxvYWRDYXRlZ29yaWVzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVscy5jYXRlZ29yeS5nZXRQYWdlV2l0aFRva2VuKGZpbHRlcnMoe30pLm9yZGVyKHtuYW1lOiAnYXNjJ30pLnBhcmFtZXRlcnMoKSkudGhlbihjYXRlZ29yeUNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAvLyBqdXN0IHNtYWxsIGZpeCB3aGVuIGhhdmUgdHdvIHNjb3JlZCBwcm9qZWN0cyBvbmx5XG4gICAgICAgICAgICAgIGNoZWNrRm9yTWluU2NvcmVkUHJvamVjdHMgPSAoY29sbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF8uc2l6ZShfLmZpbHRlcihjb2xsZWN0aW9uLCAoeCkgPT4geyByZXR1cm4geC5zY29yZSA+PSAxOyB9KSkgPj0gMztcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgLy8gRmFrZSBwcm9qZWN0cyBvYmplY3QgdG8gYmUgYWJsZSB0byByZW5kZXIgcGFnZSB3aGlsZSBsb2FkZGluZyAoaW4gY2FzZSBvZiBzZWFyY2gpXG4gICAgICAgICAgICAgIHByb2plY3RzID0gbS5wcm9wKHtjb2xsZWN0aW9uOiBtLnByb3AoW10pLCBpc0xvYWRpbmc6ICgpID0+IHsgcmV0dXJuIHRydWU7IH0sIGlzTGFzdFBhZ2U6ICgpID0+IHsgcmV0dXJuIHRydWU7IH19KSxcbiAgICAgICAgICAgICAgbG9hZFJvdXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3Qgcm91dGUgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5tYXRjaCgvXFwjKFteXFwvXSopXFwvPyhcXGQrKT8vKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdCA9IHJvdXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVbMl0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5kQ2F0ZWdvcnkocm91dGVbMl0pLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJGcm9tUm91dGUgPSAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ5Q2F0ZWdvcnkgPSBmaWx0ZXJzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlfaWQ6ICdlcSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3V0ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZVsxXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzTWFwW3JvdXRlWzFdXSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RpdGxlOiBjYXQubmFtZSwgZmlsdGVyOiBieUNhdGVnb3J5LmNhdGVnb3J5X2lkKGNhdC5pZCl9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gZmlsdGVyRnJvbVJvdXRlKCkgfHwgY3VycmVudEZpbHRlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoID0gaC5wYXJhbUJ5TmFtZSgncGdfc2VhcmNoJyksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFByb2plY3RzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKG1vZGVscy5wcm9qZWN0U2VhcmNoLnBvc3RPcHRpb25zKHtxdWVyeTogc2VhcmNofSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UgPSB7IC8vIFdlIGJ1aWxkIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGludGVyZmFjZSBhcyBwYWdpbmF0aW9uVk1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogbS5wcm9wKFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNMb2FkaW5nOiBsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0xhc3RQYWdlOiAoKSA9PiB7IHJldHVybiB0cnVlOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0UGFnZTogKCkgPT4geyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwubG9hZCgpLnRoZW4ocGFnZS5jb2xsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRQcm9qZWN0cyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWdlcyA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnByb2plY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBfLmV4dGVuZCh7fSwgY3VycmVudEZpbHRlcigpLmZpbHRlci5wYXJhbWV0ZXJzKCksIGZpbHRlci5maWx0ZXIub3JkZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuX2Zvcl9jb250cmlidXRpb25zOiAnZGVzYycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlX29yZGVyOiAnYXNjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICdkZXNjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU6ICdkZXNjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxlZGdlZDogJ2Rlc2MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkucGFyYW1ldGVycygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlcy5maXJzdFBhZ2UocGFyYW1ldGVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2VzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEZpbmlzaGVkUHJvamVjdHMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFnZXMgPSBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy5maW5pc2hlZFByb2plY3QpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgPSBfLmV4dGVuZCh7fSwgY3VycmVudEZpbHRlcigpLmZpbHRlci5wYXJhbWV0ZXJzKCksIGZpbHRlci5maWx0ZXIub3JkZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZV9vcmRlcjogJ2FzYycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAnZGVzYycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsZWRnZWQ6ICdkZXNjJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnBhcmFtZXRlcnMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZXMuZmlyc3RQYWdlKHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2VzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgaWYgKF8uaXNTdHJpbmcoc2VhcmNoKSAmJiBzZWFyY2gubGVuZ3RoID4gMCAmJiByb3V0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlzU2VhcmNoKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlKCdCdXNjYSAnICsgc2VhcmNoKTtcbiAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cyhzZWFyY2hQcm9qZWN0cygpKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudEZpbHRlcigpLmtleU5hbWUgPT09ICdmaW5pc2hlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpc1NlYXJjaChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMobG9hZEZpbmlzaGVkUHJvamVjdHMoKSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGlzU2VhcmNoKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZShmaWx0ZXIudGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc051bGwocm91dGUpICYmIHJvdXRlWzFdID09ICdmaW5pc2hlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMobG9hZEZpbmlzaGVkUHJvamVjdHMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMobG9hZFByb2plY3RzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNhdGVnb3J5SWQoY2F0ICYmIGNhdC5pZCk7XG4gICAgICAgICAgICAgICAgICByb3V0ZSB8fCAoXy5pc1N0cmluZyhzZWFyY2gpICYmIHNlYXJjaC5sZW5ndGggPiAwKSA/IHRvZ2dsZUNhdGVnb3JpZXMoZmFsc2UpIDogdG9nZ2xlQ2F0ZWdvcmllcyh0cnVlKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdGl0bGUgPSBtLnByb3AoKSxcbiAgICAgICAgICAgICAgdG9nZ2xlQ2F0ZWdvcmllcyA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICByZXNldENvbnRleHRGaWx0ZXIoKTtcbiAgICAgICAgICAgIGxvYWRSb3V0ZSgpO1xuICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIC8vIEluaXRpYWwgbG9hZHNcbiAgICAgICAgcmVzZXRDb250ZXh0RmlsdGVyKCk7XG4gICAgICAgIG1vZGVscy5wcm9qZWN0LnBhZ2VTaXplKDkpO1xuICAgICAgICBsb2FkQ2F0ZWdvcmllcygpLnRoZW4obG9hZFJvdXRlKTtcblxuICAgICAgICBpZiAoYXJncy5maWx0ZXIpIHtcbiAgICAgICAgICAgIGN1cnJlbnRGaWx0ZXIoZmlsdGVyc01hcFthcmdzLmZpbHRlcl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjdXJyZW50RmlsdGVyKCkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRGaWx0ZXIoZmlsdGVyc01hcFtkZWZhdWx0RmlsdGVyXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcnlDb2xsZWN0aW9uLFxuICAgICAgICAgICAgY2hhbmdlRmlsdGVyOiBjaGFuZ2VGaWx0ZXIsXG4gICAgICAgICAgICBmYWxsYmFja0ZpbHRlcjogZmFsbGJhY2tGaWx0ZXIsXG4gICAgICAgICAgICBwcm9qZWN0czogcHJvamVjdHMsXG4gICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICBoaW50OiBoaW50LFxuICAgICAgICAgICAgZmlsdGVyc01hcDogZmlsdGVyc01hcCxcbiAgICAgICAgICAgIGN1cnJlbnRGaWx0ZXI6IGN1cnJlbnRGaWx0ZXIsXG4gICAgICAgICAgICBwcm9qZWN0RmlsdGVyc1ZNOiBwcm9qZWN0RmlsdGVyc1ZNLFxuICAgICAgICAgICAgdG9nZ2xlQ2F0ZWdvcmllczogdG9nZ2xlQ2F0ZWdvcmllcyxcbiAgICAgICAgICAgIGlzU2VhcmNoOiBpc1NlYXJjaCxcbiAgICAgICAgICAgIGhhc0ZCQXV0aDogaGFzRkJBdXRoLFxuICAgICAgICAgICAgY2hlY2tGb3JNaW5TY29yZWRQcm9qZWN0czogY2hlY2tGb3JNaW5TY29yZWRQcm9qZWN0c1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGxldCBwcm9qZWN0c19jb2xsZWN0aW9uID0gY3RybC5wcm9qZWN0cygpLmNvbGxlY3Rpb24oKSxcbiAgICAgICAgICAgIHByb2plY3RzQ291bnQgPSBwcm9qZWN0c19jb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIHdpZG93UHJvamVjdHMgPSBbXSxcbiAgICAgICAgICAgIGZpbHRlcktleU5hbWUgPSBjdHJsLmN1cnJlbnRGaWx0ZXIoKS5rZXlOYW1lLFxuICAgICAgICAgICAgaXNDb250cmlidXRlZEJ5RnJpZW5kc0ZpbHRlciA9IChmaWx0ZXJLZXlOYW1lID09PSAnY29udHJpYnV0ZWRfYnlfZnJpZW5kcycpO1xuXG4gICAgICAgIGlmICghY3RybC5wcm9qZWN0cygpLmlzTG9hZGluZygpICYmIF8uaXNFbXB0eShwcm9qZWN0c19jb2xsZWN0aW9uKSAmJiAhY3RybC5pc1NlYXJjaCgpKXtcbiAgICAgICAgICAgIGlmIChpc0NvbnRyaWJ1dGVkQnlGcmllbmRzRmlsdGVyICYmICFjdHJsLmhhc0ZCQXV0aCkge1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdHJsLnByb2plY3RGaWx0ZXJzVk0ucmVtb3ZlQ29udGV4dEZpbHRlcihjdHJsLmN1cnJlbnRGaWx0ZXIoKSk7XG4gICAgICAgICAgICAgICAgY3RybC5jaGFuZ2VGaWx0ZXIoY3RybC5mYWxsYmFja0ZpbHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbSgnI2V4cGxvcmUnLHtjb25maWc6IGguc2V0UGFnZVRpdGxlKEkxOG4udCgnaGVhZGVyX2h0bWwnLCBJMThuU2NvcGUoKSkpfSxbXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLmhlcm8tc2VhcmNoJywgW1xuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHNlYXJjaCksXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtbWFyZ2luYm90dG9tLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS00MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjZXhwbG9yZS1vcGVuLmxpbmstaGlkZGVuLXdoaXRlLmZvbnR3ZWlnaHQtbGlnaHQuZm9udHNpemUtbGFyZ2VyW2hyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCJdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b25jbGljazogKCkgPT4gY3RybC50b2dnbGVDYXRlZ29yaWVzLnRvZ2dsZSgpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ0V4cGxvcmUgcHJvamV0b3MgaW5jcsOtdmVpcyAnLCBtKGBzcGFuI2V4cGxvcmUtYnRuLmZhLmZhLWFuZ2xlLWRvd24ke2N0cmwudG9nZ2xlQ2F0ZWdvcmllcygpID8gJy5vcGVuZWQnIDogJyd9YCwgJycpXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oYCNjYXRlZ29yaWVzLmNhdGVnb3J5LXNsaWRlciR7Y3RybC50b2dnbGVDYXRlZ29yaWVzKCkgPyAnLm9wZW5lZCcgOiAnJ31gLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tMzAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAoY3RybC5jYXRlZ29yaWVzKCksIChjYXRlZ29yeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQoY2F0ZWdvcnlCdXR0b24sIHtjYXRlZ29yeTogY2F0ZWdvcnl9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTkudy1jb2wtc21hbGwtOC53LWNvbC10aW55LTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlcicsIGN0cmwudGl0bGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5oaW50KClcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjdHJsLmlzU2VhcmNoKCkgPyBtKCdzZWxlY3Qudy1zZWxlY3QudGV4dC1maWVsZC5wb3NpdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLmNoYW5nZUZpbHRlcil9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLnByb2plY3RGaWx0ZXJzVk0uZ2V0Q29udGV4dEZpbHRlcnMoKSwgKHBhZ2VGaWx0ZXIsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdHMgPSBjdHJsLnByb2plY3RzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZCA9IGN0cmwuY3VycmVudEZpbHRlcigpID09IHBhZ2VGaWx0ZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKGBvcHRpb25bdmFsdWU9XCIke3BhZ2VGaWx0ZXIua2V5TmFtZX1cIl1gLHtzZWxlY3RlZDogaXNTZWxlY3RlZH0scGFnZUZpbHRlci5uaWNlbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuXG4gICAgICAgICAgICAoKGlzQ29udHJpYnV0ZWRCeUZyaWVuZHNGaWx0ZXIgJiYgXy5pc0VtcHR5KHByb2plY3RzX2NvbGxlY3Rpb24pKSA/XG4gICAgICAgICAgICAgKCFjdHJsLmhhc0ZCQXV0aCA/IG0uY29tcG9uZW50KFVuc2lnbmVkRnJpZW5kRmFjZWJvb2tDb25uZWN0KSA6ICcnKVxuICAgICAgICAgICAgIDogJycpLFxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgXy5tYXAocHJvamVjdHNfY29sbGVjdGlvbiwgKHByb2plY3QsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYXJkVHlwZSA9ICdzbWFsbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9ICdjdHJzZV9leHBsb3JlJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdHJsLmlzU2VhcmNoKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gJ2N0cnNlX2V4cGxvcmVfcGdzZWFyY2gnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDb250cmlidXRlZEJ5RnJpZW5kc0ZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSAnY3Ryc2VfZXhwbG9yZV9mcmllbmRzJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbHRlcktleU5hbWUgPT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9qZWN0LnNjb3JlID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkVHlwZSA9ICdiaWcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9ICdjdHJzZV9leHBsb3JlX2ZlYXR1cmVkX2JpZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkb3dQcm9qZWN0cyA9IFtwcm9qZWN0c0NvdW50IC0gMSwgcHJvamVjdHNDb3VudCAtIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpZHggPT09IDEgfHwgaWR4ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwuY2hlY2tGb3JNaW5TY29yZWRQcm9qZWN0cyhwcm9qZWN0c19jb2xsZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkVHlwZSA9ICdtZWRpdW0nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSAnY3Ryc2VfZXhwbG9yZV9mZWF0dXJlZF9tZWRpdW0nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWRvd1Byb2plY3RzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZFR5cGUgPSAnYmlnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gJ2N0cnNlX2V4cGxvcmVfZmVhdHVyZWRfYmlnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkb3dQcm9qZWN0cyA9IFtwcm9qZWN0c0NvdW50IC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSAnY3Ryc2VfZXhwbG9yZV9mZWF0dXJlZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF8uaW5kZXhPZih3aWRvd1Byb2plY3RzLCBpZHgpID4gLTEgJiYgIWN0cmwucHJvamVjdHMoKS5pc0xhc3RQYWdlKCkpID8gJycgOiBtLmNvbXBvbmVudChwcm9qZWN0Q2FyZCwge3Byb2plY3Q6IHByb2plY3QsIHJlZjogcmVmLCB0eXBlOiBjYXJkVHlwZSwgc2hvd0ZyaWVuZHM6IGlzQ29udHJpYnV0ZWRCeUZyaWVuZHNGaWx0ZXJ9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucHJvamVjdHMoKS5pc0xvYWRpbmcoKSA/IGgubG9hZGVyKCkgOiAoXy5pc0VtcHR5KHByb2plY3RzX2NvbGxlY3Rpb24pICYmIGN0cmwuaGFzRkJBdXRoID8gbSgnLmZvbnRzaXplLWJhc2Uudy1jb2wudy1jb2wtMTInLCAnTmVuaHVtIHByb2pldG8gcGFyYSBtb3N0cmFyLicpIDogJycpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnUtbWFyZ2luYm90dG9tLTgwJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtcHVzaC01JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAoY3RybC5wcm9qZWN0cygpLmlzTGFzdFBhZ2UoKSB8fCBjdHJsLnByb2plY3RzKCkuaXNMb2FkaW5nKCkgfHwgXy5pc0VtcHR5KHByb2plY3RzX2NvbGxlY3Rpb24pKSA/ICcnIDogbSgnYS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnlbaHJlZj1cXCcjbG9hZE1vcmVcXCddJywge29uY2xpY2s6ICgpID0+IHsgY3RybC5wcm9qZWN0cygpLm5leHRQYWdlKCk7IHJldHVybiBmYWxzZTsgfX0sICdDYXJyZWdhciBtYWlzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcblxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLWxhcmdlLmJlZm9yZS1mb290ZXIudS1tYXJnaW50b3AtODAuYmctZ3JheS5kaXZpZGVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lci51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdpbWcudS1tYXJnaW5ib3R0b20tMjAuaWNvbi1oZXJvJywge3NyYzogJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTZmNDQxNGQzYTBmY2MwMTI0ZWM5YTI0X2ljb24tbGF1bmNoLWV4cGxvcmUucG5nJ30pLFxuICAgICAgICAgICAgICAgICAgICBtKCdoMi5mb250c2l6ZS1sYXJnZXIudS1tYXJnaW5ib3R0b20tNjAnLCAnTGFuY2Ugc3VhIGNhbXBhbmhhIG5vIENhdGFyc2UhJyksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXB1c2gtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tbGFyZ2UnLCB7aHJlZjogJy9zdGFydD9yZWY9Y3Ryc2VfZXhwbG9yZSd9LCAnQXByZW5kYSBjb21vJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RzRXhwbG9yZTtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5jb25zdCBtZW51U2VhcmNoID0ge1xuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnc3BhbiNtZW51LXNlYXJjaCcsIFtcbiAgICAgICAgICAgIG0oJy53LWZvcm0udy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5oZWFkZXItc2VhcmNoW2lkPVxcJ2Rpc2NvdmVyLWZvcm0td3JhcHBlclxcJ10nLFxuICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJ2Zvcm0uZGlzY292ZXItZm9ybVthY2NlcHQtY2hhcnNldD1cXCdVVEYtOFxcJ11bYWN0aW9uPVxcJy9wdC9leHBsb3JlP3JlZj1jdHJzZV9oZWFkZXJcXCddW2lkPVxcJ3NlYXJjaC1mb3JtXFwnXVttZXRob2Q9XFwnZ2V0XFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIHtzdHlsZTogeydkaXNwbGF5JzogJ25vbmUnfX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXRbbmFtZT1cXCd1dGY4XFwnXVt0eXBlPVxcJ2hpZGRlblxcJ11bdmFsdWU9XFwn4pyTXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkLm5lZ2F0aXZlLnByZWZpeC5zZWFyY2gtaW5wdXRbYXV0b2NvbXBsZXRlPVxcJ29mZlxcJ11baWQ9XFwncGdfc2VhcmNoXFwnXVtuYW1lPVxcJ3BnX3NlYXJjaFxcJ11bcGxhY2Vob2xkZXI9XFwnQnVzcXVlIHByb2pldG9zXFwnXVt0eXBlPVxcJ3RleHRcXCddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgbSgnLnNlYXJjaC1wcmUtcmVzdWx0LnctaGlkZGVuW2RhdGEtc2VhcmNocGF0aD1cXCcvcHQvYXV0b19jb21wbGV0ZV9wcm9qZWN0c1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcucmVzdWx0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1thbHQ9XFwnTG9hZGVyXFwnXVtzcmM9XFwnL2Fzc2V0cy9jYXRhcnNlX2Jvb3RzdHJhcC9sb2FkZXIuZ2lmXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EuYnRuLmJ0bi1zbWFsbC5idG4tdGVyY2lhcnkuc2VlLW1vcmUtcHJvamVjdHNbaHJlZj1cXCdqYXZhc2NyaXB0OnZvaWQoMCk7XFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB2ZXIgdG9kb3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIG0oJ2Eudy1pbmxpbmUtYmxvY2sudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5idG4uYnRuLWRhcmsuYnRuLWF0dGFjaGVkLnBvc3RmaXhbaHJlZj1cXCcjXFwnXVtpZD1cXCdwZ19zZWFyY2hfc3VibWl0XFwnXScsXG4gICAgICAgICAgICAgICAgICBtKCdpbWcuaGVhZGVyLWx1cGFbYWx0PVxcJ0x1cGFcXCddW2RhdGEtcGluLW5vcGluPVxcJ3RydWVcXCddW3NyYz1cXCcvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL2x1cGEucG5nXFwnXScpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWVudVNlYXJjaDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHByb2plY3RWTSBmcm9tICcuLi92bXMvcHJvamVjdC12bSc7XG5cbmNvbnN0IHF1aWNrUHJvamVjdExpc3QgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcucXVpY2tQcm9qZWN0TGlzdCcsIF8ubWFwKGFyZ3MucHJvamVjdHMoKSwgKHByb2plY3QsIGlkeCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG0oYGxpLnUtbWFyZ2luYm90dG9tLTEwYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpZHhcbiAgICAgICAgICAgICAgICAgICAgfSwgbShgLnctcm93YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGAudy1jb2wudy1jb2wtM2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGltZy50aHVtYi5zbWFsbC51LXJhZGl1c1thbHQ9J1Byb2plY3QgdGh1bWIgMDEnXVtzcmM9JyR7cHJvamVjdC50aHVtYl9pbWFnZSB8fCBwcm9qZWN0LnZpZGVvX2NvdmVyX2ltYWdlfSddYClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYC53LWNvbC53LWNvbC05YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGluay5mb250c2l6ZS1zbWFsbGVyW2hyZWY9Jy8ke3Byb2plY3QucGVybWFsaW5rfT9yZWY9Y3Ryc2Vfc2VhcmNoX3F1aWNrJ11gLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IHByb2plY3RWTS5yb3V0ZVRvUHJvamVjdChwcm9qZWN0LCBhcmdzLnJlZilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3Byb2plY3QubmFtZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9KSwgbShgbGkudS1tYXJnaW50b3AtMjBgLFxuICAgICAgICAgICAgICAgICAgbShgLnctcm93YCxcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oYC53LWNvbC53LWNvbC02YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYnRuLmJ0bi10ZXJjaWFyeVtocmVmPSR7YXJncy5sb2FkTW9yZUhyZWZ9P3JlZj1jdHJzZV9zZWFyY2hfcXVpY2tdYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVmVyIHRvZG9zYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtKGAudy1jb2wudy1jb2wtNmApXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcXVpY2tQcm9qZWN0TGlzdDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCB1c2VyVk0gZnJvbSAnLi4vdm1zL3VzZXItdm0nO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcXVpY2tQcm9qZWN0TGlzdCBmcm9tICcuLi9jL3F1aWNrLXByb2plY3QtbGlzdCc7XG5cbmNvbnN0IG1lbnVQcm9maWxlID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBjb250cmlidXRlZFByb2plY3RzID0gbS5wcm9wKCksXG4gICAgICAgICAgICBsYXRlc3RQcm9qZWN0cyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICB1c2VyRGV0YWlscyA9IG0ucHJvcCh7fSksXG4gICAgICAgICAgICB1c2VyX2lkID0gYXJncy51c2VyLnVzZXJfaWQ7XG5cbiAgICAgICAgdXNlclZNLmZldGNoVXNlcih1c2VyX2lkLCB0cnVlLCB1c2VyRGV0YWlscyk7XG4gICAgICAgIC8vdXNlclZNLmdldFVzZXJDcmVhdGVkUHJvamVjdHModXNlcl9pZCkudGhlbihsYXRlc3RQcm9qZWN0cyk7XG4gICAgICAgIC8vdXNlclZNLmdldFVzZXJDb250cmlidXRlZFByb2plY3RzKHVzZXJfaWQpLnRoZW4oY29udHJpYnV0ZWRQcm9qZWN0cyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRyaWJ1dGVkUHJvamVjdHM6IGNvbnRyaWJ1dGVkUHJvamVjdHMsXG4gICAgICAgICAgICBsYXRlc3RQcm9qZWN0czogbGF0ZXN0UHJvamVjdHMsXG4gICAgICAgICAgICB1c2VyRGV0YWlsczogdXNlckRldGFpbHMsXG4gICAgICAgICAgICB0b2dnbGVNZW51OiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgdXNlciA9IGN0cmwudXNlckRldGFpbHMoKTtcblxuICAgICAgICByZXR1cm4gbShgLnctZHJvcGRvd24udXNlci1wcm9maWxlYCxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBtKGBhLnctZHJvcGRvd24tdG9nZ2xlLmRyb3Bkb3duLXRvZ2dsZVtocmVmPSdqYXZhc2NyaXB0OnZvaWQoKSddW2lkPSd1c2VyLW1lbnUnXWAsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlTWVudS50b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbShgaW1nLnVzZXItYXZhdGFyW2FsdD0nVGh1bWJuYWlsIC0gJHt1c2VyLm5hbWV9J11baGVpZ2h0PSc0MCddW3NyYz0nJHtoLnVzZUF2YXRhck9yRGVmYXVsdCh1c2VyLnByb2ZpbGVfaW1nX3RodW1ibmFpbCl9J11bd2lkdGg9JzQwJ11gKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgY3RybC50b2dnbGVNZW51KCkgPyBtKGBuYXYudy1kcm9wZG93bi1saXN0LmRyb3Bkb3duLWxpc3QudXNlci1tZW51LnctLW9wZW5baWQ9J3VzZXItbWVudS1kcm9wZG93biddYCwge3N0eWxlOiAnZGlzcGxheTpibG9jazsnfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbShgLnctcm93YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYC53LWNvbC53LWNvbC0xMmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtc21hbGxlci51LW1hcmdpbmJvdHRvbS0xMGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBNZXUgaGlzdMOzcmljb2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYHVsLnctbGlzdC11bnN0eWxlZC51LW1hcmdpbmJvdHRvbS0yMGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGxpLmxpbmVoZWlnaHQtbG9vc2VyYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLmZvbnRzaXplLXNtYWxsZXJbaHJlZj0nL3B0L3VzZXJzLyR7dXNlci5pZH0vZWRpdCNjb250cmlidXRpb25zJ11gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgSGlzdMOzcmljbyBkZSBhcG9pb2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgbGkubGluZWhlaWdodC1sb29zZXJgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLmZvbnRzaXplLXNtYWxsZXJbaHJlZj0nL3B0L3VzZXJzLyR7dXNlci5pZH0vZWRpdCNwcm9qZWN0cyddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgUHJvamV0b3MgY3JpYWRvc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgbGkudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0ubGluZWhlaWdodC1sb29zZXJgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYWx0LWxpbmsuZm9udHNpemUtc21hbGxlcltocmVmPScvcHQvdXNlcnMvJHt1c2VyLmlkfS9lZGl0I3Byb2plY3RzJ11gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgUHJvamV0b3MgY3JpYWRvc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYC5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIudS1tYXJnaW5ib3R0b20tMTBgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgQ29uZmlndXJhw6fDtWVzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgdWwudy1saXN0LXVuc3R5bGVkLnUtbWFyZ2luYm90dG9tLTIwYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgbGkubGluZWhlaWdodC1sb29zZXJgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYWx0LWxpbmsuZm9udHNpemUtc21hbGxlcltocmVmPScvcHQvdXNlcnMvJHt1c2VyLmlkfS9lZGl0I2Fib3V0X21lJ11gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgU29icmUgdm9jw6pgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGxpLmxpbmVoZWlnaHQtbG9vc2VyYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLmZvbnRzaXplLXNtYWxsZXJbaHJlZj0nL3B0L3VzZXJzLyR7dXNlci5pZH0vZWRpdCNub3RpZmljYXRpb25zJ11gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgTm90aWZpY2HDp8O1ZXNgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGxpLmxpbmVoZWlnaHQtbG9vc2VyYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLmZvbnRzaXplLXNtYWxsZXJbaHJlZj0nL3B0L3VzZXJzLyR7dXNlci5pZH0vZWRpdCNzZXR0aW5ncyddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYERhZG9zIGUgZW5kZXJlw6dvYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGluay5mb250c2l6ZS1zbWFsbGVyW2hyZWY9Jy9wdC91c2Vycy8ke3VzZXIuaWR9L2VkaXQjYmlsbGluZyddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYEJhbmNvIGUgY2FydMO1ZXNgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbmJvdHRvbS0yMCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MudXNlci5pc19hZG1pbl9yb2xlID8gbShgLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtc21hbGxlci51LW1hcmdpbmJvdHRvbS0xMGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBBZG1pbmBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy51c2VyLmlzX2FkbWluX3JvbGUgPyBtKGB1bC53LWxpc3QtdW5zdHlsZWQudS1tYXJnaW5ib3R0b20tMjBgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGluay5mb250c2l6ZS1zbWFsbGVyW2hyZWY9Jy9wdC9uZXctYWRtaW4jL3VzZXJzJ11gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVXN1w6FyaW9zYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGluay5mb250c2l6ZS1zbWFsbGVyW2hyZWY9Jy9wdC9uZXctYWRtaW4nXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBBcG9pb3NgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGxpLmxpbmVoZWlnaHQtbG9vc2VyYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmFsdC1saW5rLmZvbnRzaXplLXNtYWxsZXJbaHJlZj0nL3B0L2FkbWluL2ZpbmFuY2lhbHMnXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBSZWwuIEZpbmFuY2Vpcm9zYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGluay5mb250c2l6ZS1zbWFsbGVyW2hyZWY9Jy9wdC9hZG1pbi9wcm9qZWN0cyddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYEFkbWluIHByb2pldG9zYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsaS5saW5laGVpZ2h0LWxvb3NlcmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGluay5mb250c2l6ZS1zbWFsbGVyW2hyZWY9Jy9wdC9kYmhlcm8nXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBEYXRhY2xpcHNgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1taW5pJywgJ1NldSBlLW1haWwgZGUgY2FkYXN0cm8gw6k6ICcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyxgJHt1c2VyLmVtYWlsfSBgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGlua1tocmVmPScvcHQvdXNlcnMvJHt1c2VyLmlkfS9lZGl0I3NldHRpbmdzJ11gLCAnYWx0ZXJhciBlLW1haWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5kaXZpZGVyLnUtbWFyZ2luYm90dG9tLTIwJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5hbHQtbGlua1tocmVmPScvcHQvbG9nb3V0J11gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgU2FpcmBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbShgLnctY29sLnctY29sLTQudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIG0oYC5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIudS1tYXJnaW5ib3R0b20tMTBgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIGBQcm9qZXRvcyBhcG9pYWRvc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBtKGB1bC53LWxpc3QtdW5zdHlsZWQudS1tYXJnaW5ib3R0b20tMjBgLCBjdHJsLmNvbnRyaWJ1dGVkUHJvamVjdHMoKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgXy5pc0VtcHR5KGN0cmwuY29udHJpYnV0ZWRQcm9qZWN0cykgPyAnTmVuaHVtIHByb2pldG8uJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgbS5jb21wb25lbnQocXVpY2tQcm9qZWN0TGlzdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICBwcm9qZWN0czogbS5wcm9wKF8ubWFwKGN0cmwuY29udHJpYnV0ZWRQcm9qZWN0cygpLCAoY29udHJpYnV0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6IGNvbnRyaWJ1dGlvbi5wcm9qZWN0X2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RfdXNlcl9pZDogY29udHJpYnV0aW9uLnByb2plY3RfdXNlcl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYl9pbWFnZTogY29udHJpYnV0aW9uLnByb2plY3RfaW1nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvX2NvdmVyX2ltYWdlOiBjb250cmlidXRpb24ucHJvamVjdF9pbWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgcGVybWFsaW5rOiBjb250cmlidXRpb24ucGVybWFsaW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGNvbnRyaWJ1dGlvbi5wcm9qZWN0X25hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgbG9hZE1vcmVIcmVmOiAnL3B0L3VzZXJzLyR7dXNlci5pZH0vZWRpdCNjb250cmlidXRpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgcmVmOiAndXNlcl9tZW51X215X2NvbnRyaWJ1dGlvbnMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgfSkgOiAnY2FycmVnYW5kby4uLidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbShgLnctY29sLnctY29sLTQudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIG0oYC5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIudS1tYXJnaW5ib3R0b20tMTBgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIGBQcm9qZXRvcyBjcmlhZG9zYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIG0oYHVsLnctbGlzdC11bnN0eWxlZC51LW1hcmdpbmJvdHRvbS0yMGAsIGN0cmwubGF0ZXN0UHJvamVjdHMoKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgXy5pc0VtcHR5KGN0cmwubGF0ZXN0UHJvamVjdHMpID8gJ05lbmh1bSBwcm9qZXRvLicgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIG0uY29tcG9uZW50KHF1aWNrUHJvamVjdExpc3QsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgcHJvamVjdHM6IGN0cmwubGF0ZXN0UHJvamVjdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIGxvYWRNb3JlSHJlZjogJy9wdC91c2Vycy8ke3VzZXIuaWR9L2VkaXQjY29udHJpYnV0aW9ucycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIHJlZjogJ3VzZXJfbWVudV9teV9wcm9qZWN0cydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICB9KSA6ICdjYXJyZWdhbmRvLi4uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICkgOiAnJ1xuICAgICAgICAgICAgXVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lbnVQcm9maWxlO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1lbnVTZWFyY2ggZnJvbSAnLi4vYy9tZW51LXNlYXJjaCc7XG5pbXBvcnQgbWVudVByb2ZpbGUgZnJvbSAnLi4vYy9tZW51LXByb2ZpbGUnO1xuXG5jb25zdCBtZW51ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCB1c2VyID0gaC5nZXRVc2VyKCksXG4gICAgICAgICAgICBtZW51Q3NzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkeW5hbWljQ2xhc3NlcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBgJHthcmdzLm1lbnVUcmFuc3BhcmVuY3kgPyAnb3ZlcmxheWVyJyA6ICcnfSAke2FyZ3Mud2l0aEFsZXJ0ID8gJ3dpdGgtZ2xvYmFsLWFsZXJ0JyA6ICcnfWA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaG9tZUF0dHJzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhcmdzLmFic29sdXRlSG9tZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogaC5yb290VXJsKClcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBtLnJvdXRlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlcjogdXNlcixcbiAgICAgICAgICAgIG1lbnVDc3M6IG1lbnVDc3MsXG4gICAgICAgICAgICBob21lQXR0cnM6IGhvbWVBdHRyc1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCdoZWFkZXIubWFpbi1oZWFkZXIudy1zZWN0aW9uJyx7XG4gICAgICAgICAgICBjbGFzczogY3RybC5tZW51Q3NzKClcbiAgICAgICAgfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jbGVhcmZpeCcsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EuaGVhZGVyLWxvZ28udy1uYXYtYnJhbmRbaHJlZj1cXCcvP3JlZj1jdHJzZV9oZWFkZXJcXCddW3RpdGxlPVxcJ0NhdGFyc2VcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmhvbWVBdHRycygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1thbHQ9XFwnTG9nbyBiaWdcXCddW3NyYz1cXCcvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL2xvZ29fYmlnLnBuZ1xcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5oZWFkZXItbGluay53LW5hdi1saW5rW2hyZWY9XFwnL3N0YXJ0P3JlZj1jdHJzZV9oZWFkZXJcXCddJyx7Y29uZmlnOiBtLnJvdXRlfSwgJ0NvbWVjZSBzZXUgcHJvamV0bycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmhlYWRlci1saW5rLnctbmF2LWxpbmtbaHJlZj1cXCcvZXhwbG9yZT9yZWY9Y3Ryc2VfaGVhZGVyXFwnXScse2NvbmZpZzogbS5yb3V0ZX0sJ0V4cGxvcmUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KG1lbnVTZWFyY2gpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC51c2VyID8gbS5jb21wb25lbnQobWVudVByb2ZpbGUsIHt1c2VyOiBjdHJsLnVzZXJ9KSA6IG0oJ2Eudy1uYXYtbGluay5oZWFkZXItbGluay53LW5hdi1saW5rLmJ0bi1lZGl0LnUtcmlnaHRbaHJlZj1cXCcvcHQvbG9naW4/cmVmPWN0cnNlX2hlYWRlclxcJ10nLCAnTG9naW4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1uYXYtbGluay53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmhlYWRlci1saW5rLnctbmF2LWxpbmsudS1yaWdodFtocmVmPVxcJ2h0dHA6Ly9ibG9nLmNhdGFyc2UubWU/cmVmPWN0cnNlX2hlYWRlclxcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdHlsZTogJ2Zsb2F0OiByaWdodDsnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQmxvZydcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbSgnLnctaGlkZGVuLW1haW4udy1oaWRkZW4tbWVkaXVtLmhlYWRlci1jb250cm9scy1tb2JpbGUnLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmhlYWRlci1saW5rLnctbmF2LWxpbmtbaHJlZj1cXCcvcHQvc3RhcnQ/cmVmPWN0cnNlX2hlYWRlclxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvbmNsaWNrOiAoKSA9PiBtLnJvdXRlKCcvc3RhcnQnKX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbWVjZSBzZXUgcHJvamV0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmhlYWRlci1saW5rLnctbmF2LWxpbmtbaHJlZj1cXCcvcHQvZXhwbG9yZT9yZWY9Y3Ryc2VfaGVhZGVyXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge29uY2xpY2s6ICgpID0+IG0ucm91dGUoJy9leHBsb3JlJyl9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdFeHBsb3JlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lbnU7XG4iLCJpbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcblxuY29uc3QgaG9tZVZNID0gKCkgPT4ge1xuICAgIGNvbnN0IGkxOG5TdGFydCA9IEkxOG4udHJhbnNsYXRpb25zW0kxOG4uY3VycmVudExvY2FsZSgpXS5wcm9qZWN0cy5ob21lLFxuICAgICAgICBiYW5uZXJzID0gaTE4blN0YXJ0LmJhbm5lcnM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBiYW5uZXJzOiBiYW5uZXJzXG4gICAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhvbWVWTTtcbiIsIi8qKlxuICogd2luZG93LmMuU2xpZGVyIGNvbXBvbmVudFxuICogQnVpbGQgYSBzbGlkZXIgZnJvbSBhbnkgYXJyYXkgb2YgbWl0aHJpbCBlbGVtZW50c1xuICpcbiAqIEV4YW1wbGUgb2YgdXNlOlxuICogdmlldzogKCkgPT4ge1xuICogICAgIC4uLlxuICogICAgIG0uY29tcG9uZW50KGMuU2xpZGVyLCB7XG4gKiAgICAgICAgIHNsaWRlczogW20oJ3NsaWRlMScpLCBtKCdzbGlkZTInKSwgbSgnc2xpZGUzJyldLFxuICogICAgICAgICB0aXRsZTogJ08gcXVlIGVzdMOjbyBkaXplbmRvIHBvciBhw60uLi4nXG4gKiAgICAgfSlcbiAqICAgICAuLi5cbiAqIH1cbiAqL1xuXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5jb25zdCBzbGlkZXIgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBpbnRlcnZhbDtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRTbGlkZUlkeCA9IG0ucHJvcCgwKSxcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uU2l6ZSA9IG0ucHJvcCgxNjAwKSxcbiAgICAgICAgICAgIHNsaWRlclRpbWUgPSBhcmdzLnNsaWRlclRpbWUgfHwgNjUwMCxcbiAgICAgICAgICAgIGRlY3JlbWVudFNsaWRlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZFNsaWRlSWR4KCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU2xpZGVJZHgoc2VsZWN0ZWRTbGlkZUlkeCgpIC0gMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRTbGlkZUlkeChhcmdzLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jcmVtZW50U2xpZGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkU2xpZGVJZHgoKSA8IChhcmdzLnNsaWRlcy5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFNsaWRlSWR4KHNlbGVjdGVkU2xpZGVJZHgoKSArIDEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU2xpZGVJZHgoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXJ0U2xpZGVyVGltZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGluY3JlbWVudFNsaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgfSwgc2xpZGVyVGltZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzZXRTbGlkZXJUaW1lciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgICAgICBzdGFydFNsaWRlclRpbWVyKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29uZmlnID0gKGVsLCBpc0luaXRpYWxpemVkLCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKXtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25TaXplKE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCkpO1xuICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb250ZXh0Lm9udW5sb2FkID0gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHN0YXJ0U2xpZGVyVGltZXIoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgICBzZWxlY3RlZFNsaWRlSWR4OiBzZWxlY3RlZFNsaWRlSWR4LFxuICAgICAgICAgICAgdHJhbnNsYXRpb25TaXplOiB0cmFuc2xhdGlvblNpemUsXG4gICAgICAgICAgICBkZWNyZW1lbnRTbGlkZTogZGVjcmVtZW50U2xpZGUsXG4gICAgICAgICAgICBpbmNyZW1lbnRTbGlkZTogaW5jcmVtZW50U2xpZGUsXG4gICAgICAgICAgICByZXNldFNsaWRlclRpbWVyOiByZXNldFNsaWRlclRpbWVyXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVDbGFzcyA9IGFyZ3Muc2xpZGVDbGFzcyB8fCAnJyxcbiAgICAgICAgICAgIHdyYXBwZXJDbGFzcyA9IGFyZ3Mud3JhcHBlckNsYXNzIHx8ICcnLFxuICAgICAgICAgICAgZWZmZWN0ID0gYXJncy5lZmZlY3QgfHwgJ3NsaWRlJyxcbiAgICAgICAgICAgIHNsaWRlckNsaWNrID0gKGZuLCBwYXJhbSkgPT4ge1xuICAgICAgICAgICAgICAgIGZuKHBhcmFtKTtcbiAgICAgICAgICAgICAgICBjdHJsLnJlc2V0U2xpZGVyVGltZXIoKTtcbiAgICAgICAgICAgICAgICBhcmdzLm9uY2hhbmdlICYmIGFyZ3Mub25jaGFuZ2UoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlZmZlY3RTdHlsZSA9IChpZHgsIHRyYW5zbGF0ZVN0cikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlRnggPSBgdHJhbnNmb3JtOiAke3RyYW5zbGF0ZVN0cn07IC13ZWJraXQtdHJhbnNmb3JtOiAke3RyYW5zbGF0ZVN0cn07IC1tcy10cmFuc2Zvcm06JHt0cmFuc2xhdGVTdHJ9YCxcbiAgICAgICAgICAgICAgICAgICAgZmFkZUZ4ID0gaWR4ID09PSBjdHJsLnNlbGVjdGVkU2xpZGVJZHgoKSA/ICdvcGFjaXR5OiAxOyB2aXNpYmlsaXR5OiB2aXNpYmxlOycgOiAnb3BhY2l0eTogMDsgdmlzaWJpbGl0eTogaGlkZGVuOyc7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZWZmZWN0ID09PSAnZmFkZScgPyBmYWRlRnggOiBzbGlkZUZ4O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbShgLnctc2xpZGVyLiR7d3JhcHBlckNsYXNzfWAsIHtcbiAgICAgICAgICAgIGNvbmZpZzogY3RybC5jb25maWdcbiAgICAgICAgfSwgW1xuICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlcicsIGFyZ3MudGl0bGUpLFxuICAgICAgICAgICAgbSgnLnctc2xpZGVyLW1hc2snLCBbXG4gICAgICAgICAgICAgICAgXy5tYXAoYXJncy5zbGlkZXMsIChzbGlkZSwgaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc2xhdGVWYWx1ZSA9IChpZHggLSBjdHJsLnNlbGVjdGVkU2xpZGVJZHgoKSkgKiBjdHJsLnRyYW5zbGF0aW9uU2l6ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlU3RyID0gYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlVmFsdWV9cHgsIDAsIDApYDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbShgLnNsaWRlLnctc2xpZGUuJHtzbGlkZUNsYXNzfWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBgJHtlZmZlY3RTdHlsZShpZHgsIHRyYW5zbGF0ZVN0cil9ICR7c2xpZGUuY3VzdG9tU3R5bGV9YFxuICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC53LWNvbC1wdXNoLTInLCBzbGlkZS5jb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBtKCcjc2xpZGUtcHJldi53LXNsaWRlci1hcnJvdy1sZWZ0LnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ICgpID0+IHNsaWRlckNsaWNrKGN0cmwuZGVjcmVtZW50U2xpZGUpXG4gICAgICAgICAgICAgICAgfSxbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWljb24tc2xpZGVyLWxlZnQuZmEuZmEtbGcuZmEtYW5nbGUtbGVmdC5mb250Y29sb3ItdGVyY2lhcnknKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJyNzbGlkZS1uZXh0Lnctc2xpZGVyLWFycm93LXJpZ2h0LnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ICgpID0+IHNsaWRlckNsaWNrKGN0cmwuaW5jcmVtZW50U2xpZGUpXG4gICAgICAgICAgICAgICAgfSxbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWljb24tc2xpZGVyLXJpZ2h0LmZhLmZhLWxnLmZhLWFuZ2xlLXJpZ2h0LmZvbnRjb2xvci10ZXJjaWFyeScpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctc2xpZGVyLW5hdi53LXNsaWRlci1uYXYtaW52ZXJ0Lnctcm91bmQuc2xpZGUtbmF2JywgXyhhcmdzLnNsaWRlcy5sZW5ndGgpLnRpbWVzKChpZHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oYC5zbGlkZS1idWxsZXQudy1zbGlkZXItZG90JHtjdHJsLnNlbGVjdGVkU2xpZGVJZHgoKSA9PT0gaWR4ID8gJy53LWFjdGl2ZScgOiAnJ31gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiBzbGlkZXJDbGljayhjdHJsLnNlbGVjdGVkU2xpZGVJZHgsIGlkeClcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzbGlkZXI7XG4iLCIvKipcbiAqIHdpbmRvdy5jLkNvbnRyaWJ1dGlvbkFjdGl2aXRpZXMgY29tcG9uZW50XG4gKiBSZW5kZXIgYSBjb21wb25lbnQgdGhhdCBwYXNzIG9uIGNvbmZpcm1lZCBjb250cmlidXRpb25zIGluIDI0aG91cnMgaW50ZXJ2YWxcbiAqXG4gKlxuICogRXhhbXBsZSBvZiB1c2U6XG4gKiB2aWV3OiAoKSA9PiB7XG4gKiAgICAgLi4uXG4gKiAgICAgbS5jb21wb25lbnQoYy5Db250cmlidXRpb25BY3Rpdml0aWVzKVxuICogICAgIC4uLlxuICogfVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcblxuY29uc3QgY29udHJpYnV0aW9uQWN0aXZpdGllcyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgbGV0IGludGVydmFsO1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gbS5wcm9wKFtdKSxcbiAgICAgICAgICAgICAgcmVzb3VyY2UgPSBtLnByb3AoKSxcbiAgICAgICAgICAgICAgY29sbGVjdGlvbkluZGV4ID0gbS5wcm9wKDApLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uU2l6ZSA9IG0ucHJvcCgpLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uTCA9IHBvc3RncmVzdC5sb2FkZXIoXG4gICAgICAgICAgICAgICAgICBtb2RlbHMuY29udHJpYnV0aW9uQWN0aXZpdHkuZ2V0UGFnZU9wdGlvbnMoKSksXG4gICAgICAgICAgICAgIG5leHRSZXNvdXJjZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmICgoY29sbGVjdGlvbkluZGV4KCkgKyAxKSA+IGNvbGxlY3Rpb25TaXplKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSW5kZXgoMCk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JbmRleChjb2xsZWN0aW9uSW5kZXgoKSArIDEpO1xuICAgICAgICAgICAgICAgICAgcmVzb3VyY2UoY29sbGVjdGlvbigpW2NvbGxlY3Rpb25JbmRleCgpXSk7XG4gICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdGFydENvbmZpZyA9IChlbCwgaXNpbml0aWFsaXplZCwgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29udGV4dC5vbnVubG9hZCA9ICgpID0+IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdGFydFRpbWVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChuZXh0UmVzb3VyY2UsIDE1MDAwKTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICBjb2xsZWN0aW9uTC5sb2FkKCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgY29sbGVjdGlvbihkYXRhKTtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25TaXplKGRhdGEubGVuZ3RoKTtcbiAgICAgICAgICAgIHJlc291cmNlKF8uZmlyc3QoZGF0YSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFydFRpbWVyKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24sXG4gICAgICAgICAgICBjb2xsZWN0aW9uTDogY29sbGVjdGlvbkwsXG4gICAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UsXG4gICAgICAgICAgICBjb2xsZWN0aW9uU2l6ZTogY29sbGVjdGlvblNpemVcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBpZiAoIWN0cmwuY29sbGVjdGlvbkwoKSAmJiAhXy5pc1VuZGVmaW5lZChjdHJsLnJlc291cmNlKCkpICYmIChjdHJsLmNvbGxlY3Rpb25TaXplKCkgfHwgMCkgPiAwKSB7XG4gICAgICAgICAgICBsZXQgcmVzb3VyY2UgPSBjdHJsLnJlc291cmNlKCksXG4gICAgICAgICAgICAgICAgZWxhcHNlZCA9IGgudHJhbnNsYXRlZFRpbWUocmVzb3VyY2UuZWxhcHNlZF90aW1lKSxcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2xpbmsgPSBgaHR0cHM6Ly9jYXRhcnNlLm1lLyR7cmVzb3VyY2UucGVybWFsaW5rfT9yZWY9Y3Ryc2VfaG9tZV9hY3Rpdml0aWVzYDtcblxuICAgICAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uc2VjdGlvbi5iZy1iYWNrcy1jYXJyb3NlbCcsIHtjb25maWc6IGN0cmwuc3RhcnRDb25maWd9LCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtdGV4dC1jZW50ZXIuZm9udGNvbG9yLW5lZ2F0aXZlJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMzAnLCBgaMOhICR7cGFyc2VJbnQoZWxhcHNlZC50b3RhbCl9ICR7ZWxhcHNlZC51bml0fS4uLmApLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jbGVhcmZpeC53LWlubGluZS1ibG9jay51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EnLCB7aHJlZjogcHJvamVjdF9saW5rfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy50aHVtYi1hdXRob3IudS1yb3VuZCcsIHtzcmM6IHJlc291cmNlLnRodW1ibmFpbCwgd2lkdGg6IDgwfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy50aHVtYi1hdXRob3IudS1yb3VuZCcsIHtzcmM6ICdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2ZDY0NmY3NzEwYTcxMjYzMzhiNDZmZl9sb2dvLWNhdGFyc2UtYmFjay1jYXJyb3NlbC5wbmcnfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdhJywge2hyZWY6IHByb2plY3RfbGlua30sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudGh1bWItYXV0aG9yLnUtcm91bmQnLCB7c3JjOiByZXNvdXJjZS5wcm9qZWN0X3RodW1ibmFpbCwgd2lkdGg6IDgwLCBzdHlsZTogJ21hcmdpbi1yaWdodDogMDsnfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlJywgYCR7cmVzb3VyY2UubmFtZX0gYXBvaW91YCksXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuLXdoaXRlJywge2hyZWY6IHByb2plY3RfbGlua30sIHJlc291cmNlLnByb2plY3RfbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbSgnZGl2Jyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb250cmlidXRpb25BY3Rpdml0aWVzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuXG5jb25zdCBibG9nQmFubmVyID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBwb3N0cyA9IGguZ2V0QmxvZ1Bvc3RzKCk7XG5cbiAgICAgICAgcmV0dXJuIHtwb3N0czogcG9zdHN9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG5cbiAgICAgICAgcmV0dXJuIG0oJ3NlY3Rpb24uc2VjdGlvbi1sYXJnZS5iZy1ncmF5LmJlZm9yZS1mb290ZXJbaWQ9XFwnYmxvZ1xcJ10nLFxuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhW2hyZWY9XFwnaHR0cDovL2Jsb2cuY2F0YXJzZS5tZVxcJ11bdGFyZ2V0PVxcJ2JsYW5rXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy51LW1hcmdpbmJvdHRvbS0xMFthbHQ9XFwnSWNvbiBibG9nXFwnXVtzcmM9XFwnL2Fzc2V0cy9pY29uLWJsb2cucG5nXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tNjAudGV4dC1zdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWhpZGRlbi1zdWNjZXNzW2hyZWY9XFwnaHR0cDovL2Jsb2cuY2F0YXJzZS5tZVxcJ11bdGFyZ2V0PVxcJ19fYmxhbmtcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdCbG9nIGRvIENhdGFyc2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIF8ubWFwKGN0cmwucG9zdHMsIChwb3N0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTQuY29sLWJsb2ctcG9zdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmxpbmstaGlkZGVuLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0xMFtocmVmPVwiJHtwb3N0WzFdWzFdfVwiXVt0YXJnZXQ9XFwnX19ibGFua1xcJ11gLCBwb3N0WzBdWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIuZm9udGNvbG9yLXNlY29uZGFyeS51LW1hcmdpbnRvcC0xMCcsIG0udHJ1c3QoYCR7aC5zdHJpcChwb3N0WzZdWzFdLnN1YnN0cigwLCAxMzApKX0uLi5gKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYmxvZ0Jhbm5lcjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IGZvb3RlciA9IHtcbiAgICB2aWV3KCkge1xuICAgICAgICByZXR1cm4gbSgnZm9vdGVyLm1haW4tZm9vdGVyLm1haW4tZm9vdGVyLW5lZycsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgbSgnc2VjdGlvbi53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXNtYWxsLTQudy1jb2wtdGlueS00LnctaGlkZGVuLXRpbnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9vdGVyLWZ1bGwtc2lnbmF0dXJlLXRleHQuZm9udHNpemUtc21hbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdCZW0tdmluZG8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHA6Ly9jcm93ZGZ1bmRpbmcuY2F0YXJzZS5tZS9wYXJhdG9kb3M/cmVmPWN0cnNlX2Zvb3RlclxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbW8gZnVuY2lvbmEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5iYWRnZS5iYWRnZS1zdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdOb3ZpZGFkZeKAjSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS9wdC9mbGV4P3JlZj1jdHJzZV9mb290ZXJcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIENhdGFyc2UgZmxleCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS9wdC90ZWFtP3JlZj1jdHJzZV9mb290ZXJcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgTm9zc28gdGltZSAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbHQ7JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICczJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cDovL2ZhY2Vib29rLmNvbS9jYXRhcnNlLm1lXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBGYWNlYm9vaydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cDovL3R3aXR0ZXIuY29tL2NhdGFyc2VcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIFR3aXR0ZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHA6Ly9pbnN0YWdyYW0uY29tL2NhdGFyc2VcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEluc3RhZ3JhbSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cDovL2dpdGh1Yi5jb20vY2F0YXJzZS9jYXRhcnNlXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBHaXRodWInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHA6Ly9ibG9nLmNhdGFyc2UubWVcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEJsb2cnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHBzOi8vd3d3LmNhdGFyc2UubWUvcHQvam9ic1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgVHJhYmFsaGUgY29ub3NjbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQuZm9vdGVyLWZ1bGwtZmlyc3Rjb2x1bW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9vdGVyLWZ1bGwtc2lnbmF0dXJlLXRleHQuZm9udHNpemUtc21hbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBanVkYSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnplbmRlc2tfd2lkZ2V0LmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cHM6Ly9lcXVpcGVjYXRhcnNlLnplbmRlc2suY29tL2FjY291bnQvZHJvcGJveGVzLzIwMjk4NTM3XFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBDb250YXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1mb290ZXJbaHJlZj1cXCdodHRwOi8vY3Jvd2RmdW5kaW5nLmNhdGFyc2UubWUvbm9zc2EtdGF4YT9yZWY9Y3Ryc2VfZm9vdGVyXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTm9zc2EgVGF4YScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmJhZGdlLmJhZGdlLXN1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vdmlkYWRl4oCNJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1mb290ZXJbaHJlZj1cXCdodHRwczovL3d3dy5jYXRhcnNlLm1lL3B0L3ByZXNzP3JlZj1jdHJzZV9mb290ZXJcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEltcHJlbnNhJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1mb290ZXJbaHJlZj1cXCdodHRwOi8vc3Vwb3J0ZS5jYXRhcnNlLm1lP3JlZj1jdHJzZV9mb290ZXIvXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBDZW50cmFsIGRlIFN1cG9ydGUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHBzOi8vd3d3LmNhdGFyc2UubWUvcHQvZ3VpZGVzP3JlZj1jdHJzZV9mb290ZXJcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEd1aWEgZG9zIFJlYWxpemFkb3JlcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyW2hyZWY9XFwnaHR0cDovL3Blc3F1aXNhLmNhdGFyc2UubWUvXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBSZXRyYXRvIEZDIEJyYXNpbCAyMDEzLzIwMTQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJy9wdC90ZXJtcy1vZi11c2VcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIFRlcm1vcyBkZSB1c28nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWZvb3RlcltocmVmPVxcJy9wdC9wcml2YWN5LXBvbGljeVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgUG9sw610aWNhIGRlIHByaXZhY2lkYWRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1zbWFsbC00LnctY29sLXRpbnktNC5mb290ZXItZnVsbC1sYXN0Y29sdW1uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvb3Rlci1mdWxsLXNpZ25hdHVyZS10ZXh0LmZvbnRzaXplLXNtYWxsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTmF2ZWd1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkubGluay1mb290ZXJbaHJlZj1cXCcvcHQvc3RhcnQ/cmVmPWN0cnNlX2Zvb3RlclxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgQ29tZWNlIHNldSBwcm9qZXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1mb290ZXJbaHJlZj1cXCcvcHQvZXhwbG9yZT9yZWY9Y3Ryc2VfZm9vdGVyXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBFeHBsb3JlIHByb2pldG9zJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0udy1oaWRkZW4tc21hbGwubGluay1mb290ZXJbaHJlZj1cXCdodHRwOi8vYmxvZy5jYXRhcnNlLm1lP3JlZj1jdHJzZV9mb290ZXJcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEJsb2cnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bS53LWhpZGRlbi1zbWFsbC5saW5rLWZvb3RlcltocmVmPVxcJ2h0dHBzOi8vZXF1aXBlY2F0YXJzZS56ZW5kZXNrLmNvbS9hY2NvdW50L2Ryb3Bib3hlcy8yMDI5ODUzN1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgQ29udGF0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctaGlkZGVuLXRpbnkubGluay1mb290ZXJbaHJlZj1cXCcvcHQvZXhwbG9yZT9maWx0ZXI9c2NvcmUmcmVmPWN0cnNlX2Zvb3RlclxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgUG9wdWxhcmVzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1oaWRkZW4tdGlueS5saW5rLWZvb3RlcltocmVmPVxcJy9wdC9leHBsb3JlP2ZpbHRlcj1vbmxpbmUmcmVmPWN0cnNlX2Zvb3RlclxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgTm8gYXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS53LWhpZGRlbi10aW55LmxpbmstZm9vdGVyW2hyZWY9XFwnL3B0L2V4cGxvcmU/ZmlsdGVyPWZpbmlzaGVkJnJlZj1jdHJzZV9mb290ZXJcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEZpbmFsaXphZG9zJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy5jb2x1bW4tc29jaWFsLW1lZGlhLWZvb3RlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb290ZXItZnVsbC1zaWduYXR1cmUtdGV4dC5mb250c2l6ZS1zbWFsbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Fzc2luZSBub3NzYSBuZXdzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGZvcm1bYWNjZXB0LWNoYXJzZXQ9J1VURi04J11bYWN0aW9uPScke2guZ2V0TWFpbGNoaW1wVXJsKCl9J11baWQ9J21haWxlZS1mb3JtJ11bbWV0aG9kPSdwb3N0J11gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtLmZvb3Rlci1uZXdzbGV0dGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWlucHV0LnRleHQtZmllbGQucHJlZml4W2lkPVxcJ0VNQUlMXFwnXVtsYWJlbD1cXCdlbWFpbFxcJ11bbmFtZT1cXCdFTUFJTFxcJ11bcGxhY2Vob2xkZXI9XFwnRGlnaXRlIHNldSBlbWFpbFxcJ11bdHlwZT1cXCdlbWFpbFxcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2J1dHRvbi53LWlubGluZS1ibG9jay5idG4uYnRuLWVkaXQucG9zdGZpeC5idG4tYXR0YWNoZWRbc3R5bGU9XCJwYWRkaW5nOjA7XCJdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcuZm9vdGVyLW5ld3MtaWNvblthbHQ9XFwnSWNvbiBuZXdzbGV0dGVyXFwnXVtzcmM9XFwnL2Fzc2V0cy9jYXRhcnNlX2Jvb3RzdHJhcC9pY29uLW5ld3NsZXR0ZXIucG5nXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvb3Rlci1mdWxsLXNpZ25hdHVyZS10ZXh0LmZvbnRzaXplLXNtYWxsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUmVkZXMgc29jaWFpcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy13aWRnZXQudy13aWRnZXQtZmFjZWJvb2sudS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mYWNlYm9vaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mYi1saWtlW2RhdGEtY29sb3JzY2hlbWU9XFwnZGFya1xcJ11bZGF0YS1ocmVmPVxcJ2h0dHA6Ly9mYWNlYm9vay5jb20vY2F0YXJzZS5tZVxcJ11bZGF0YS1sYXlvdXQ9XFwnYnV0dG9uX2NvdW50XFwnXVtkYXRhLXNlbmQ9XFwnZmFsc2VcXCddW2RhdGEtc2hvdy1mYWNlcz1cXCdmYWxzZVxcJ11bZGF0YS10aXRsZT1cXCdcXCddW2RhdGEtd2lkdGg9XFwnMjYwXFwnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXdpZGdldC53LXdpZGdldC10d2l0dGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEudHdpdHRlci1mb2xsb3ctYnV0dG9uW2hyZWY9XCJodHThuZU6Ly90d2l0dGVyLmNvbS9jYXRhcnNlXCJdW2RhdGEtYnV0dG9uPVwiYmx1ZVwiXVtkYXRhLXRleHQtY29sb3I9XCIjRkZGRkZGXVtkYXRhLWxpbmstY29sb3I9XCIjRkZGRkZGXCJdW2RhdGEtd2lkdGg9XCIyMjRweFwiXWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbnRvcC0zMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9vdGVyLWZ1bGwtc2lnbmF0dXJlLXRleHQuZm9udHNpemUtc21hbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NoYW5nZSBsYW5ndWFnZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnW2lkPVxcJ2dvb2dsZV90cmFuc2xhdGVfZWxlbWVudFxcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvb3Rlci1mdWxsLWNvcHlsZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudS1tYXJnaW5ib3R0b20tMjBbYWx0PVxcJ0xvZ28gZm9vdGVyXFwnXVtzcmM9XFwnL2Fzc2V0cy9sb2dvLWZvb3Rlci5wbmdcXCddJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmxpbmVoZWlnaHQtbG9vc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstZm9vdGVyLWlubGluZVtocmVmPVxcJ2h0dHA6Ly9naXRodWIuY29tL2NhdGFyc2UvY2F0YXJzZVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZlaXRvIGNvbSBhbW9yIHwgMjAxNiB8IE9wZW4gc291cmNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvb3RlcjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbWVudSBmcm9tICcuL21lbnUnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHByb2plY3RGaWx0ZXJzIGZyb20gJy4uL3Ztcy9wcm9qZWN0LWZpbHRlcnMtdm0nO1xuaW1wb3J0IGhvbWVWTSBmcm9tICcuLi92bXMvaG9tZS12bSc7XG5pbXBvcnQgc2xpZGVyIGZyb20gJy4uL2Mvc2xpZGVyJztcbmltcG9ydCBwcm9qZWN0Um93IGZyb20gJy4uL2MvcHJvamVjdC1yb3cnO1xuaW1wb3J0IGNvbnRyaWJ1dGlvbkFjdGl2aXRpZXMgZnJvbSAnLi4vYy9jb250cmlidXRpb24tYWN0aXZpdGllcyc7XG5pbXBvcnQgYmxvZ0Jhbm5lciBmcm9tICcuL2Jsb2ctYmFubmVyJztcbmltcG9ydCBmb290ZXIgZnJvbSAnLi9mb290ZXInO1xuaW1wb3J0IFNpZ25lZEZyaWVuZEZhY2Vib29rQ29ubmVjdCBmcm9tICcuLi9jL3NpZ25lZC1mcmllbmQtZmFjZWJvb2stY29ubmVjdCc7XG5pbXBvcnQgVW5zaWduZWRGcmllbmRGYWNlYm9va0Nvbm5lY3QgZnJvbSAnLi4vYy91bnNpZ25lZC1mcmllbmQtZmFjZWJvb2stY29ubmVjdCc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLmhvbWUnKTtcblxuY29uc3QgcHJvamVjdHNIb21lID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgc2FtcGxlNiA9IF8ucGFydGlhbChfLnNhbXBsZSwgXywgNiksXG4gICAgICAgICAgICBsb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuLFxuICAgICAgICAgICAgcHJvamVjdCA9IG1vZGVscy5wcm9qZWN0LFxuICAgICAgICAgICAgZmlsdGVycyA9IHByb2plY3RGaWx0ZXJzKCkuZmlsdGVycyxcbiAgICAgICAgICAgIHVzZXJGcmllbmRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3VzZXJfaWQ6ICdlcSd9KSxcbiAgICAgICAgICAgIGZyaWVuZExpc3RWTSA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnVzZXJGcmllbmQsICd1c2VyX2lkLmRlc2MnLCB7XG4gICAgICAgICAgICAgICAgJ1ByZWZlcic6ICAnY291bnQ9ZXhhY3QnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGN1cnJlbnRVc2VyID0gaC5nZXRVc2VyKCksXG4gICAgICAgICAgICBoYXNGQkF1dGggPSBjdXJyZW50VXNlci5oYXNfZmJfYXV0aCxcbiAgICAgICAgICAgIHZtID0gaG9tZVZNKCk7XG5cbiAgICAgICAgcHJvamVjdC5wYWdlU2l6ZSgyMCk7XG5cbiAgICAgICAgdXNlckZyaWVuZFZNLnVzZXJfaWQoY3VycmVudFVzZXIudXNlcl9pZCk7XG5cbiAgICAgICAgaWYgKGhhc0ZCQXV0aCAmJiAhZnJpZW5kTGlzdFZNLmNvbGxlY3Rpb24oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZyaWVuZExpc3RWTS5maXJzdFBhZ2UodXNlckZyaWVuZFZNLnBhcmFtZXRlcnMoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IF8ubWFwKFsnc2NvcmUnLCdjb250cmlidXRlZF9ieV9mcmllbmRzJ10sIChuYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmID0gZmlsdGVyc1tuYW1lXSxcbiAgICAgICAgICAgICAgICAgIGNMb2FkZXIgPSBsb2FkZXIocHJvamVjdC5nZXRQYWdlT3B0aW9ucyhfLmV4dGVuZCh7fSwge29yZGVyOiAnc2NvcmUuZGVzYyd9LCBmLmZpbHRlci5wYXJhbWV0ZXJzKCkpKSksXG4gICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uID0gbS5wcm9wKFtdKTtcblxuICAgICAgICAgICAgY0xvYWRlci5sb2FkKCkudGhlbihfLmNvbXBvc2UoY29sbGVjdGlvbiwgc2FtcGxlNikpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBmLm5pY2VuYW1lLFxuICAgICAgICAgICAgICAgIGhhc2g6IChuYW1lID09PSAnc2NvcmUnID8gJ2FsbCcgOiBuYW1lKSxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uLFxuICAgICAgICAgICAgICAgIGxvYWRlcjogY0xvYWRlcixcbiAgICAgICAgICAgICAgICBzaG93RnJpZW5kczogKG5hbWUgPT09ICdjb250cmlidXRlZF9ieV9mcmllbmRzJylcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uczogY29sbGVjdGlvbnMsXG4gICAgICAgICAgICBzbGlkZXNDb250ZW50OiB2bS5iYW5uZXJzLFxuICAgICAgICAgICAgaGFzRkJBdXRoOiBoYXNGQkF1dGhcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCkge1xuICAgICAgICBjb25zdCBzbGlkZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gXy5tYXAoY3RybC5zbGlkZXNDb250ZW50LCAoc2xpZGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXN0b21TdHlsZSA9IGBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtzbGlkZS5pbWFnZX0pO2A7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IG0oJy53LWNvbnRhaW5lci51LXRleHQtY2VudGVyJyxbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS00MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2gxLmZvbnRjb2xvci1uZWdhdGl2ZS5mb250c2l6ZS1tZWdhanVtYm8udS1tYXJnaW5ib3R0b20tMjAnLCBzbGlkZS50aXRsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdoMi5mb250Y29sb3ItbmVnYXRpdmUuZm9udHNpemUtbGFyZ2UnLCBtLnRydXN0KHNsaWRlLnN1YnRpdGxlKSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2EuYnRuLmJ0bi1sYXJnZS51LW1hcmdpbmJvdHRvbS0xMC5idG4taW5saW5lJyx7aHJlZjogc2xpZGUubGlua30sIHNsaWRlLmN0YSlcbiAgICAgICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbVN0eWxlOiBjdXN0b21TdHlsZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3RzLWhvbWUtY29tcG9uZW50Jyx7Y29uZmlnOiBoLnNldFBhZ2VUaXRsZShJMThuLnQoJ2hlYWRlcl9odG1sJywgSTE4blNjb3BlKCkpKX0sW1xuICAgICAgICAgICAgLy8gbS5jb21wb25lbnQobWVudSwge3RyYW5zcGFyZW50OiB0cnVlfSksXG4gICAgICAgICAgICBtLmNvbXBvbmVudChzbGlkZXIsIHtcbiAgICAgICAgICAgICAgICBzbGlkZXM6IHNsaWRlcygpLFxuICAgICAgICAgICAgICAgIGVmZmVjdDogJ2ZhZGUnLFxuICAgICAgICAgICAgICAgIHNsaWRlQ2xhc3M6ICdoZXJvLXNsaWRlIHN0YXJ0JyxcbiAgICAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICdoZXJvLWZ1bGwgaGVyby1mdWxsLXNsaWRlJyxcbiAgICAgICAgICAgICAgICBzbGlkZXJUaW1lOiAxMDAwMFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfLm1hcChjdHJsLmNvbGxlY3Rpb25zLCAoY29sbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChwcm9qZWN0Um93LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBjb2xsZWN0aW9uLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICByZWY6IGBob21lXyR7KGNvbGxlY3Rpb24uaGFzaCA9PT0gJ2FsbCcgPyAnc2NvcmUnIDogY29sbGVjdGlvbi5oYXNoKX1gLFxuICAgICAgICAgICAgICAgICAgICBzaG93RnJpZW5kczogY29sbGVjdGlvbi5zaG93RnJpZW5kc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAvLyBtLmNvbXBvbmVudChjb250cmlidXRpb25BY3Rpdml0aWVzKSxcbiAgICAgICAgICAgICghY3RybC5oYXNGQkF1dGggPyBtLmNvbXBvbmVudChVbnNpZ25lZEZyaWVuZEZhY2Vib29rQ29ubmVjdCwge2xhcmdlQmc6IHRydWV9KSA6ICcnKSxcbiAgICAgICAgICAgIG0uY29tcG9uZW50KGJsb2dCYW5uZXIpXG4gICAgICAgICAgICAvLyBtLmNvbXBvbmVudChmb290ZXIsIHtleHBhbmRlZDogdHJ1ZX0pLFxuICAgICAgICAgICAgLy8gbS5jb21wb25lbnQoY29udHJpYnV0aW9uQWN0aXZpdGllcylcbiAgICAgICAgXSk7XG5cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0c0hvbWU7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IGZhY2Vib29rQnV0dG9uIGZyb20gJy4vZmFjZWJvb2stYnV0dG9uJztcblxuY29uc3QgcHJvamVjdFNoYXJlQm94ID0ge1xuICAgIGNvbnRyb2xsZXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwbGF5RW1iZWQ6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSlcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnLnBvcC1zaGFyZScsIHtcbiAgICAgICAgICAgIHN0eWxlOiAnZGlzcGxheTogYmxvY2s7J1xuICAgICAgICB9LCBbXG4gICAgICAgICAgICBtKCcudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0udy1jbGVhcmZpeCcsIFtcbiAgICAgICAgICAgICAgICBtKCdhLmJ0bi5idG4tc21hbGwuYnRuLXRlcmNpYXJ5LmJ0bi1pbmxpbmUudS1yaWdodCcsIHtcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogYXJncy5kaXNwbGF5U2hhcmVCb3gudG9nZ2xlXG4gICAgICAgICAgICAgICAgfSwgJ0ZlY2hhcicpLFxuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTMwJywgJ0NvbXBhcnRpbGhlIGVzdGUgcHJvamV0bycpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy53LXdpZGdldC53LXdpZGdldC10d2l0dGVyLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuc2hhcmUtYmxvY2snLCBbXG4gICAgICAgICAgICAgICAgbSgnaWZyYW1lW2FsbG93dHJhbnNwYXJlbmN5PVwidHJ1ZVwiXVt3aWR0aD1cIjEyMHB4XCJdW2hlaWdodD1cIjIycHhcIl1bZnJhbWVib3JkZXI9XCIwXCJdW3Njcm9sbGluZz1cIm5vXCJdW3NyYz1cIi8vcGxhdGZvcm0udHdpdHRlci5jb20vd2lkZ2V0cy90d2VldF9idXR0b24uOGQwMDdkZGZjMTg0ZTY3NzZiZTc2ZmU5ZTVlNTJkNjkuZW4uaHRtbCNfPTE0NDI0MjU5ODQ5MzYmY291bnQ9aG9yaXpvbnRhbCZkbnQ9ZmFsc2UmaWQ9dHdpdHRlci13aWRnZXQtMSZsYW5nPWVuJm9yaWdpbmFsX3JlZmVyZXI9aHR0cHMlM0ElMkYlMkZ3d3cuY2F0YXJzZS5tZSUyRnB0JTJGJyArIGFyZ3MucHJvamVjdCgpLnBlcm1hbGluayArICcmc2l6ZT1tJnRleHQ9Q29uZmlyYSUyMG8lMjBwcm9qZXRvJTIwJyArIGFyZ3MucHJvamVjdCgpLm5hbWUgKyAnJTIwbm8lMjAlNDBjYXRhcnNlJnR5cGU9c2hhcmUmdXJsPWh0dHBzJTNBJTJGJTJGd3d3LmNhdGFyc2UubWUlMkZwdCUyRicgKyBhcmdzLnByb2plY3QoKS5wZXJtYWxpbmsgKyAnJTNGcmVmJTNEdHdpdHRlciUyNnV0bV9zb3VyY2UlM0R0d2l0dGVyLmNvbSUyNnV0bV9tZWRpdW0lM0Rzb2NpYWwlMjZ1dG1fY2FtcGFpZ24lM0Rwcm9qZWN0X3NoYXJlJnZpYT1jYXRhcnNlXCJdJylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnYS53LWhpZGRlbi1zbWFsbC53aWRnZXQtZW1iZWQudy1oaWRkZW4tdGlueS5mb250c2l6ZS1zbWFsbC5saW5rLWhpZGRlbi5mb250Y29sb3Itc2Vjb25kYXJ5W2hyZWY9XCJqczp2b2lkKDApO1wiXScsIHtcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLmRpc3BsYXlFbWJlZC50b2dnbGVcbiAgICAgICAgICAgIH0sICc8IGVtYmVkID4nKSwgKGN0cmwuZGlzcGxheUVtYmVkKCkgPyBtKCcuZW1iZWQtZXhwYW5kZWQudS1tYXJnaW50b3AtMzAnLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMjAnLCAnSW5zaXJhIHVtIHdpZGdldCBlbSBzZXUgc2l0ZScpLFxuICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXRbdHlwZT1cInRleHRcIl1bdmFsdWU9XCI8aWZyYW1lIGZyYW1lYm9yZGVyPVwiMFwiIGhlaWdodD1cIjMxNHB4XCIgc3JjPVwiaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS9wdC9wcm9qZWN0cy8nICsgYXJncy5wcm9qZWN0KCkucHJvamVjdF9pZCArICcvZW1iZWRcIiB3aWR0aD1cIjMwMHB4XCIgc2Nyb2xsaW5nPVwibm9cIj48L2lmcmFtZT5cIl0nKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy5jYXJkLWVtYmVkJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdpZnJhbWVbZnJhbWVib3JkZXI9XCIwXCJdW2hlaWdodD1cIjM1MHB4XCJdW3NyYz1cIi9wcm9qZWN0cy8nICsgYXJncy5wcm9qZWN0KCkucHJvamVjdF9pZCArICcvZW1iZWRcIl1bd2lkdGg9XCIzMDBweFwiXVtzY3JvbGxpbmc9XCJub1wiXScpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pIDogJycpLFxuICAgICAgICAgICAgYXJncy5wcm9qZWN0KCkucGVybWFsaW5rID8gbS5jb21wb25lbnQoZmFjZWJvb2tCdXR0b24sIHtcbiAgICAgICAgICAgICAgICBtb2JpbGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS8ke2FyZ3MucHJvamVjdCgpLnBlcm1hbGlua30/cmVmPWZhY2Vib29rJnV0bV9zb3VyY2U9ZmFjZWJvb2suY29tJnV0bV9tZWRpdW09c29jaWFsJnV0bV9jYW1wYWlnbj1wcm9qZWN0X3NoYXJlYFxuICAgICAgICAgICAgfSkgOiAnJyxcbiAgICAgICAgICAgIG0oJ2Eudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0uYnRuLmJ0bi1tZWRpdW0uYnRuLXR3ZWV0LnUtbWFyZ2luYm90dG9tLTIwW2hyZWY9XCJodHRwOi8vdHdpdHRlci5jb20vP3N0YXR1cz1BY2FiZWklMjBkZSUyMGFwb2lhciUyMG8lMjBwcm9qZXRvJTIwJyArIGFyZ3MucHJvamVjdCgpLm5hbWUgKyAnJTIwaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS8nICsgYXJncy5wcm9qZWN0KCkucGVybWFsaW5rICsgJyUzRnJlZiUzRHR3aXR0ZXIlMjZ1dG1fc291cmNlJTNEdHdpdHRlci5jb20lMjZ1dG1fbWVkaXVtJTNEc29jaWFsJTI2dXRtX2NhbXBhaWduJTNEcHJvamVjdF9zaGFyZVwiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLCBbXG4gICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS10d2l0dGVyJyksICcgVHdlZXQnXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJ2Eudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0uYnRuLmJ0bi1tZWRpdW1bZGF0YS1hY3Rpb249XCJzaGFyZS93aGF0c2FwcC9zaGFyZVwiXScsIHtcbiAgICAgICAgICAgICAgICBocmVmOiBgd2hhdHNhcHA6Ly9zZW5kP3RleHQ9JHtlbmNvZGVVUklDb21wb25lbnQoJ2h0dHBzOi8vd3d3LmNhdGFyc2UubWUvJyArIGFyZ3MucHJvamVjdCgpLnBlcm1hbGluayArICcvP3JlZj13aGF0c2FwcCZ1dG1fc291cmNlPXdoYXRzYXBwJnV0bV9tZWRpdW09c29jaWFsJnV0bV9jYW1wYWlnbj1wcm9qZWN0X3NoYXJlJyl9YFxuICAgICAgICAgICAgfSxbbSgnc3Bhbi5mYS5mYS13aGF0c2FwcCcpLCAnIFdoYXRzYXBwJ10pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RTaGFyZUJveDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IGFkZHJlc3NUYWcgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QsXG4gICAgICAgICAgYWRkcmVzcyA9IHByb2plY3QoKS5hZGRyZXNzIHx8IHtcbiAgICAgICAgICAgICAgc3RhdGVfYWNyb255bTogJycsXG4gICAgICAgICAgICAgIGNpdHk6ICcnXG4gICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gIV8uaXNOdWxsKGFkZHJlc3MpID8gbShgYS5idG4uYnRuLWlubGluZS5idG4tc21hbGwuYnRuLXRyYW5zcGFyZW50LmxpbmstaGlkZGVuLWxpZ2h0LnUtbWFyZ2luYm90dG9tLTEwW2hyZWY9XCIvcHQvZXhwbG9yZT9wZ19zZWFyY2g9JHthZGRyZXNzLnN0YXRlX2Fjcm9ueW19XCJdYCwge1xuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgY2F0OiAncHJvamVjdF92aWV3JyxcbiAgICAgICAgICAgICAgICAgICAgYWN0OiAncHJvamVjdF9sb2NhdGlvbl9saW5rJyxcbiAgICAgICAgICAgICAgICAgICAgbGJsOiBhZGRyZXNzLmNpdHkgKyAnICcgKyBhZGRyZXNzLnN0YXRlX2Fjcm9ueW0sXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QoKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICBtKCdzcGFuLmZhLmZhLW1hcC1tYXJrZXInKSwgYCAke2FkZHJlc3MuY2l0eX0sICR7YWRkcmVzcy5zdGF0ZV9hY3JvbnltfWBcbiAgICAgICAgXSkgOiAnJztcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZGRyZXNzVGFnO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgY2F0ZWdvcnlUYWcgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3Q7XG5cbiAgICAgICAgcmV0dXJuIHByb2plY3QgPyBtKGBhLmJ0bi5idG4taW5saW5lLmJ0bi1zbWFsbC5idG4tdHJhbnNwYXJlbnQubGluay1oaWRkZW4tbGlnaHRbaHJlZj1cIi9wdC9leHBsb3JlI2J5X2NhdGVnb3J5X2lkLyR7cHJvamVjdCgpLmNhdGVnb3J5X2lkfVwiXWAsIHtcbiAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7XG4gICAgICAgICAgICAgIGNhdDogJ3Byb2plY3RfdmlldycsXG4gICAgICAgICAgICAgIGFjdDogJ3Byb2plY3RfY2F0ZWdvcnlfbGluaycsXG4gICAgICAgICAgICAgIGxibDogcHJvamVjdCgpLmNhdGVnb3J5X25hbWUsXG4gICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QoKVxuICAgICAgICAgIH0pXG4gICAgICB9LCBbXG4gICAgICAgICAgbSgnc3Bhbi5mYS5mYS10YWcnKSwgJyAnLFxuICAgICAgICAgIHByb2plY3QoKS5jYXRlZ29yeV9uYW1lXG4gICAgICBdKSA6ICcnO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNhdGVnb3J5VGFnO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RTaGFyZUJveCBmcm9tICcuL3Byb2plY3Qtc2hhcmUtYm94JztcbmltcG9ydCBmYWNlYm9va0J1dHRvbiBmcm9tICcuL2ZhY2Vib29rLWJ1dHRvbic7XG5pbXBvcnQgYWRkcmVzc1RhZyBmcm9tICcuL2FkZHJlc3MtdGFnJztcbmltcG9ydCBjYXRlZ29yeVRhZyBmcm9tICcuL2NhdGVnb3J5LXRhZyc7XG5cbmNvbnN0IHByb2plY3RIaWdobGlnaHQgPSB7XG4gICAgY29udHJvbGxlcigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3BsYXlTaGFyZUJveDogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3Q7XG5cbiAgICAgICAgcmV0dXJuIG0oJyNwcm9qZWN0LWhpZ2hsaWdodCcsIFtcbiAgICAgICAgICAgIChwcm9qZWN0KCkudmlkZW9fZW1iZWRfdXJsID8gbSgnLnctZW1iZWQudy12aWRlby5wcm9qZWN0LXZpZGVvJywge1xuICAgICAgICAgICAgICAgIHN0eWxlOiAnbWluLWhlaWdodDogMjQwcHg7J1xuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIG0oJ2lmcmFtZS5lbWJlZGx5LWVtYmVkW2l0ZW1wcm9wPVwidmlkZW9cIl1bc3JjPVwiJyArIHByb2plY3QoKS52aWRlb19lbWJlZF91cmwgKyAnXCJdW2ZyYW1lYm9yZGVyPVwiMFwiXVthbGxvd0Z1bGxTY3JlZW5dJylcbiAgICAgICAgICAgIF0pIDogbSgnLnByb2plY3QtaW1hZ2UnLCB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IGBiYWNrZ3JvdW5kLWltYWdlOnVybCgnJHtwcm9qZWN0KCkub3JpZ2luYWxfaW1hZ2UgfHwgcHJvamVjdCgpLnByb2plY3RfaW1nfScpO2BcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIG0oJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgW1xuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkZHJlc3NUYWcsIHtwcm9qZWN0OiBwcm9qZWN0fSksXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoY2F0ZWdvcnlUYWcsIHtwcm9qZWN0OiBwcm9qZWN0fSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnByb2plY3QtYmx1cmInLCBwcm9qZWN0KCkuaGVhZGxpbmUpLFxuICAgICAgICAgICAgbSgnLnByb2plY3Qtc2hhcmUudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsXG4gICAgICAgICAgICAgICAgbSgnLnUtbWFyZ2luYm90dG9tLTMwLnUtdGV4dC1jZW50ZXItc21hbGwtb25seScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctaW5saW5lLWJsb2NrLmZvbnRjb2xvci1zZWNvbmRhcnkuZm9udHNpemUtc21hbGxlci51LW1hcmdpbnJpZ2h0LTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb21wYXJ0aWxoYXI6J1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0KCkucGVybWFsaW5rID8gbS5jb21wb25lbnQoZmFjZWJvb2tCdXR0b24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYGh0dHBzOi8vd3d3LmNhdGFyc2UubWUvJHtwcm9qZWN0KCkucGVybWFsaW5rfT9yZWY9ZmFjZWJvb2smdXRtX3NvdXJjZT1mYWNlYm9vay5jb20mdXRtX21lZGl1bT1zb2NpYWwmdXRtX2NhbXBhaWduPXByb2plY3Rfc2hhcmVgXG4gICAgICAgICAgICAgICAgICAgIH0pIDogJycsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3QoKS5wZXJtYWxpbmsgPyBtLmNvbXBvbmVudChmYWNlYm9va0J1dHRvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2VuZ2VyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS8ke3Byb2plY3QoKS5wZXJtYWxpbmt9P3JlZj1mYWNlYm9vayZ1dG1fc291cmNlPWZhY2Vib29rLmNvbSZ1dG1fbWVkaXVtPW1lc3NlbmdlciZ1dG1fY2FtcGFpZ249cHJvamVjdF9zaGFyZWBcbiAgICAgICAgICAgICAgICAgICAgfSkgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgbSgnYnV0dG9uI21vcmUtc2hhcmUuYnRuLmJ0bi1pbmxpbmUuYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0cmFuc2l0aW9uJzogJ2FsbCAwLjVzIGVhc2UgMHMnXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC5kaXNwbGF5U2hhcmVCb3gudG9nZ2xlXG4gICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICfCt8K3wrcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJyBNYWlzJ1xuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgKGN0cmwuZGlzcGxheVNoYXJlQm94KCkgPyBtKHByb2plY3RTaGFyZUJveCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlTaGFyZUJveDogY3RybC5kaXNwbGF5U2hhcmVCb3hcbiAgICAgICAgICAgICAgICAgICAgfSkgOiAnJylcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0SGlnaGxpZ2h0O1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Qcm9qZWN0TW9kZSBjb21wb25lbnRcbiAqIEEgc2ltcGxlIGNvbXBvbmVudCB0aGF0IGRpc3BsYXlzIGEgYmFkZ2Ugd2l0aCB0aGUgY3VycmVudCBwcm9qZWN0IG1vZGVcbiAqIHRvZ2V0aGVyIHdpdGggYSBkZXNjcmlwdGlvbiBvZiB0aGUgbW9kZSwgc2hvd24gaW5zaWRlIGEgdG9vbHRpcC5cbiAqIEl0IHJlY2VpdmVzIGEgcHJvamVjdCBhcyByZXNvdXJjZVxuICpcbiAqIEV4YW1wbGU6XG4gKiAgdmlldzoge1xuICogICAgICByZXR1cm4gbS5jb21wb25lbnQoYy5Qcm9qZWN0TW9kZSwge3Byb2plY3Q6IHByb2plY3R9KVxuICogIH1cbiAqL1xuXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgdG9vbHRpcCBmcm9tICcuL3Rvb2x0aXAnO1xuXG5jb25zdCBwcm9qZWN0TW9kZSA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCgpLFxuICAgICAgICAgICAgbW9kZSA9IHByb2plY3QubW9kZSxcbiAgICAgICAgICAgIG1vZGVJbWdTcmMgPSAobW9kZSA9PT0gJ2FvbicpID8gJy9hc3NldHMvYW9uLWJhZGdlLnBuZycgOiAnL2Fzc2V0cy9mbGV4LWJhZGdlLnBuZycsXG4gICAgICAgICAgICBtb2RlVGl0bGUgPSAobW9kZSA9PT0gJ2FvbicpID8gJ0NhbXBhbmhhIFR1ZG8tb3UtbmFkYSAnIDogJ0NhbXBhbmhhIEZsZXjDrXZlbCAnLFxuICAgICAgICAgICAgZ29hbCA9IChfLmlzTnVsbChwcm9qZWN0LmdvYWwpID8gJ27Do28gZGVmaW5pZGEnIDogaC5mb3JtYXROdW1iZXIocHJvamVjdC5nb2FsKSksXG4gICAgICAgICAgICBidWlsZFRvb2x0aXAgPSAoZWwpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQodG9vbHRpcCwge1xuICAgICAgICAgICAgICAgICAgICBlbDogZWwsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IChtb2RlID09PSAnYW9uJykgPyBgU29tZW50ZSByZWNlYmVyw6Egb3MgcmVjdXJzb3Mgc2UgYXRpbmdpciBvdSB1bHRyYXBhc3NhciBhIG1ldGEgYXTDqSBvIGRpYSAke2gubW9tZW50aWZ5KHByb2plY3Quem9uZV9leHBpcmVzX2F0LCAnREQvTU0vWVlZWScpfS5gIDogJ08gcmVhbGl6YWRvciByZWNlYmVyw6EgdG9kb3Mgb3MgcmVjdXJzb3MgcXVhbmRvIGVuY2VycmFyIGEgY2FtcGFuaGEsIG1lc21vIHF1ZSBuw6NvIHRlbmhhIGF0aW5naWRvIGVzdGEgbWV0YS4nLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjgwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBtKGAjJHttb2RlfS53LXJvd2AsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXNtYWxsLTIudy1jb2wtdGlueS0yJywgW1xuICAgICAgICAgICAgICAgICFfLmlzRW1wdHkocHJvamVjdCkgPyBtKGBpbWdbc3JjPVwiJHttb2RlSW1nU3JjfVwiXVt3aWR0aD0nMzAnXWApIDogJydcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnctY29sLXNtYWxsLTEwLnctY29sLXRpbnktMTAnLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZCcsICdNZXRhIFIkICcgKyBoLnNlbGZPckVtcHR5KGdvYWwsICctLScpKSxcbiAgICAgICAgICAgICAgICBtKCcudy1pbmxpbmUtYmxvY2suZm9udHNpemUtc21hbGxlc3QuX3ctaW5saW5lLWJsb2NrJywgW1xuICAgICAgICAgICAgICAgICAgICAhXy5pc0VtcHR5KHByb2plY3QpID8gbW9kZVRpdGxlIDogJycsXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkVG9vbHRpcCgnc3Bhbi53LWlubGluZS1ibG9jay50b29sdGlwLXdyYXBwZXIuZmEuZmEtcXVlc3Rpb24tY2lyY2xlLmZvbnRjb2xvci1zZWNvbmRhcnknKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0TW9kZTtcbiIsIi8qKlxuICogd2luZG93LmMuUHJvamVjdFJlbWluZGVyIGNvbXBvbmVudFxuICogQSBjb21wb25lbnQgdGhhdCBkaXNwbGF5cyBhIGNsaWNrYWJsZSBwcm9qZWN0IHJlbWluZGVyIGVsZW1lbnQuXG4gKiBUaGUgY29tcG9uZW50IGNhbiBiZSBvZiB0d28gdHlwZXM6IGEgJ2xpbmsnIG9yIGEgJ2J1dHRvbidcbiAqXG4gKiBFeGFtcGxlOlxuICogIHZpZXc6IHtcbiAqICAgICAgcmV0dXJuIG0uY29tcG9uZW50KGMuUHJvamVjdFJlbWluZGVyLCB7cHJvamVjdDogcHJvamVjdCwgdHlwZTogJ2J1dHRvbid9KVxuICogIH1cbiAqL1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHBvcE5vdGlmaWNhdGlvbiBmcm9tICcuL3BvcC1ub3RpZmljYXRpb24nO1xuXG5jb25zdCBwcm9qZWN0UmVtaW5kZXIgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBsID0gbS5wcm9wKGZhbHNlKTtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCxcbiAgICAgICAgICAgICAgZmlsdGVyVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6ICdlcSdcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHN0b3JlUmVtaW5kZXJOYW1lID0gJ3JlbWluZGVyJyxcbiAgICAgICAgICAgICAgcG9wTm90aWZpY2F0aW9uID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgICAgc3VibWl0UmVtaW5kZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWguZ2V0VXNlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaC5zdG9yZUFjdGlvbihzdG9yZVJlbWluZGVyTmFtZSwgcHJvamVjdCgpLnByb2plY3RfaWQpO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoLm5hdmlnYXRlVG9EZXZpc2UoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGxldCBsb2FkZXJPcHRzID0gcHJvamVjdCgpLmluX3JlbWluZGVyID8gbW9kZWxzLnByb2plY3RSZW1pbmRlci5kZWxldGVPcHRpb25zKGZpbHRlclZNLnBhcmFtZXRlcnMoKSkgOiBtb2RlbHMucHJvamVjdFJlbWluZGVyLnBvc3RPcHRpb25zKHtcbiAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiBwcm9qZWN0KCkucHJvamVjdF9pZFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBsID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihsb2FkZXJPcHRzKTtcblxuICAgICAgICAgICAgICAgICAgbC5sb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgcHJvamVjdCgpLmluX3JlbWluZGVyID0gIXByb2plY3QoKS5pbl9yZW1pbmRlcjtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9qZWN0KCkuaW5fcmVtaW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wTm90aWZpY2F0aW9uKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcE5vdGlmaWNhdGlvbihmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3BOb3RpZmljYXRpb24oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIGlmIChoLmNhbGxTdG9yZWRBY3Rpb24oc3RvcmVSZW1pbmRlck5hbWUpID09IHByb2plY3QoKS5wcm9qZWN0X2lkKSB7XG4gICAgICAgICAgICBzdWJtaXRSZW1pbmRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgZmlsdGVyVk0ucHJvamVjdF9pZChwcm9qZWN0KCkucHJvamVjdF9pZCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGw6IGwsXG4gICAgICAgICAgICBzdWJtaXRSZW1pbmRlcjogc3VibWl0UmVtaW5kZXIsXG4gICAgICAgICAgICBwb3BOb3RpZmljYXRpb246IHBvcE5vdGlmaWNhdGlvblxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IG1haW5DbGFzcyA9IChhcmdzLnR5cGUgPT09ICdidXR0b24nKSA/ICcnIDogJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTMwJyxcbiAgICAgICAgICAgICAgYnV0dG9uQ2xhc3MgPSAoYXJncy50eXBlID09PSAnYnV0dG9uJykgPyAndy1idXR0b24gYnRuIGJ0bi10ZXJjaWFyeSBidG4tbm8tYm9yZGVyJyA6ICdidG4tbGluayBsaW5rLWhpZGRlbiBmb250c2l6ZS1zbWFsbCcsXG4gICAgICAgICAgICAgIGhpZGVUZXh0T25Nb2JpbGUgPSBhcmdzLmhpZGVUZXh0T25Nb2JpbGUgfHwgZmFsc2UsXG4gICAgICAgICAgICAgIHByb2plY3QgPSBhcmdzLnByb2plY3QsXG4gICAgICAgICAgICAgIG9uY2xpY2tGdW5jID0gaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9mbG9hdGluZ3JlbWluZGVyX2NsaWNrJywgcHJvamVjdDogcHJvamVjdCgpfSwgY3RybC5zdWJtaXRSZW1pbmRlcik7XG5cbiAgICAgICAgcmV0dXJuIG0oYCNwcm9qZWN0LXJlbWluZGVyJHttYWluQ2xhc3N9YCwgW1xuICAgICAgICAgICAgbSgnYS5idG4uYnRuLXNtYWxsLmJ0bi10ZXJjaWFyeS53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bVtkYXRhLWl4PVxcJ3BvcHNoYXJlXFwnXVtocmVmPVxcJyNcXCddJywge1xuICAgICAgICAgICAgICAgIG9uY2xpY2s6IG9uY2xpY2tGdW5jXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgIChwcm9qZWN0KCkuaW5fcmVtaW5kZXIgPyBbXG4gICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWhlYXJ0JyksXG4gICAgICAgICAgICAgICAgICAnIExlbWJyZXRlIGF0aXZvJ1xuICAgICAgICAgICAgICBdIDogW1xuICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1oZWFydC1vJyksXG4gICAgICAgICAgICAgICAgICAnIExlbWJyYXItbWUnXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApLFxuXG4gICAgICAgICAgICBtKGBidXR0b25bY2xhc3M9XCJ3LWhpZGRlbi1zbWFsbCB3LWhpZGRlbi10aW55ICR7YnV0dG9uQ2xhc3N9ICR7KHByb2plY3QoKS5pbl9yZW1pbmRlciA/ICdsaW5rLWhpZGRlbi1zdWNjZXNzJyA6ICdmb250Y29sb3Itc2Vjb25kYXJ5Jyl9IGZvbnR3ZWlnaHQtc2VtaWJvbGRcIl1gLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogb25jbGlja0Z1bmNcbiAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAoY3RybC5sKCkgPyBoLmxvYWRlcigpIDogKHByb2plY3QoKS5pbl9yZW1pbmRlciA/IG0oJ3NwYW4uZmEuZmEtaGVhcnQnKSA6IG0oJ3NwYW4uZmEuZmEtaGVhcnQtbycpKSlcbiAgICAgICAgICAgIF0pLCAoY3RybC5wb3BOb3RpZmljYXRpb24oKSA/IG0uY29tcG9uZW50KHBvcE5vdGlmaWNhdGlvbiwge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdPayEgVmFtb3MgdGUgbWFuZGFyIHVtIGxlbWJyZXRlIHBvciBlLW1haWwgNDggaG9yYXMgYW50ZXMgZG8gZmltIGRhIGNhbXBhbmhhJ1xuICAgICAgICAgICAgfSkgOiAnJylcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFJlbWluZGVyO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Pd25lck1lc3NhZ2VDb250ZW50IGNvbXBvbmVudFxuICogUmVuZGVyIHByb2plY3Qgb3duZXIgY29udGFjdCBmb3JtXG4gKlxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5cbmNvbnN0IG93bmVyTWVzc2FnZUNvbnRlbnQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBsID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIHNlbmRTdWNjZXNzID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIHN1Ym1pdERpc2FibGVkID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIC8vc2V0cyBkZWZhdWx0IHZhbHVlcyB3aGVuIHVzZXIgaXMgbm90IGxvZ2dlZCBpblxuICAgICAgICAgICAgdXNlciA9IGguZ2V0VXNlcigpIHx8IHtuYW1lOiAnJywgZW1haWw6ICcnfSxcbiAgICAgICAgICAgIGZyb21fbmFtZSA9IG0ucHJvcCh1c2VyLm5hbWUpLFxuICAgICAgICAgICAgZnJvbV9lbWFpbCA9IG0ucHJvcCh1c2VyLmVtYWlsKSxcbiAgICAgICAgICAgIGNvbnRlbnQgPSBtLnByb3AoJycpO1xuXG4gICAgICAgIGNvbnN0IHNlbmRNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGwoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1Ym1pdERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgY29udGVudChjb250ZW50KCkuc3BsaXQoJ1xcbicpLmpvaW4oJzxiciAvPicpKTtcblxuICAgICAgICAgICAgbGV0IGxvYWRlck9wdHMgPSBtb2RlbHMuZGlyZWN0TWVzc2FnZS5wb3N0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgZnJvbV9uYW1lOiBmcm9tX25hbWUoKSxcbiAgICAgICAgICAgICAgICBmcm9tX2VtYWlsOiBmcm9tX2VtYWlsKCksXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogaC5nZXRVc2VyKCkudXNlcl9pZCxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50KCksXG4gICAgICAgICAgICAgICAgcHJvamVjdF9pZDogaC5nZXRDdXJyZW50UHJvamVjdCgpLnByb2plY3RfaWQsXG4gICAgICAgICAgICAgICAgdG9fdXNlcl9pZDogaC5nZXRDdXJyZW50UHJvamVjdCgpLnByb2plY3RfdXNlcl9pZFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGwgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKGxvYWRlck9wdHMpO1xuXG4gICAgICAgICAgICBsLmxvYWQoKS50aGVuKHNlbmRTdWNjZXNzKHRydWUpKTtcblxuICAgICAgICAgICAgc3VibWl0RGlzYWJsZWQoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZW5kTWVzc2FnZTogc2VuZE1lc3NhZ2UsXG4gICAgICAgICAgICBzdWJtaXREaXNhYmxlZDogc3VibWl0RGlzYWJsZWQsXG4gICAgICAgICAgICBzZW5kU3VjY2Vzczogc2VuZFN1Y2Nlc3MsXG4gICAgICAgICAgICB1c2VyRGV0YWlsczogYXJncyxcbiAgICAgICAgICAgIGZyb21fbmFtZTogZnJvbV9uYW1lLFxuICAgICAgICAgICAgZnJvbV9lbWFpbDogZnJvbV9lbWFpbCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgICAgICBsOiBsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3Qgc3VjY2Vzc01lc3NhZ2UgPSBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcuZmEuZmEtY2hlY2stY2lyY2xlLmZhLTV4LnRleHQtc3VjY2Vzcy51LW1hcmdpbmJvdHRvbS00MCcpLFxuICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtbGFyZ2UnLCBgU3VhIG1lbnNhZ2VtIGZvaSBlbnZpYWRhIGNvbSBzdWNlc3NvIHBhcmEgJHtjdHJsLnVzZXJEZXRhaWxzKCkubmFtZX0uIFZvY8OqIHZhaSByZWNlYmVyIHVtYSBjw7NwaWEgbm8gc2V1IGVtYWlsIGUgcG9kZSBzZWd1aXIgYSBjb252ZXJzYSBwb3IgbMOhIWApXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGNvbnRhY3RGb3JtID0gW1xuICAgICAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctY29udGVudCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Zvcm0nLCB7b25zdWJtaXQ6IGgudmFsaWRhdGUoKS5zdWJtaXQoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogY3RybC5mcm9tX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGU6ICd0ZXh0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wOiBjdHJsLmZyb21fZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGU6ICdlbWFpbCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogY3RybC5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlOiAndGV4dCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdLCBjdHJsLnNlbmRNZXNzYWdlKX0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02Lnctc3ViLWNvbCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZvbnRzaXplLXNtYWxsZXInLCAnU2V1IG5vbWUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGlucHV0LnctaW5wdXQudGV4dC1maWVsZFt2YWx1ZT0nJHtjdHJsLmZyb21fbmFtZSgpfSddW3R5cGU9J3RleHQnXVtyZXF1aXJlZD0ncmVxdWlyZWQnXWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLmZyb21fbmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGgudmFsaWRhdGUoKS5oYXNFcnJvcihjdHJsLmZyb21fbmFtZSkgPyAnZXJyb3InIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZvbnRzaXplLXNtYWxsZXInLCAnU2V1IGVtYWlsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBpbnB1dC53LWlucHV0LnRleHQtZmllbGRbdmFsdWU9JyR7Y3RybC5mcm9tX2VtYWlsKCl9J11bdHlwZT0ndGV4dCddW3JlcXVpcmVkPSdyZXF1aXJlZCddYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuZnJvbV9lbWFpbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGgudmFsaWRhdGUoKS5oYXNFcnJvcihjdHJsLmZyb21fZW1haWwpID8gJ2Vycm9yJyA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsJywgJ01lbnNhZ2VtJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgndGV4dGFyZWEudy1pbnB1dC50ZXh0LWZpZWxkLmhlaWdodC1zbWFsbFtyZXF1aXJlZD1cXCdyZXF1aXJlZFxcJ10nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuY29udGVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBoLnZhbGlkYXRlKCkuaGFzRXJyb3IoY3RybC5jb250ZW50KSA/ICdlcnJvcicgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0xMC5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3ItdGVyY2lhcnknLCAnVm9jw6ogcmVjZWJlcsOhIHVtYSBjw7NwaWEgZGVzdGEgbWVuc2FnZW0gZW0gc2V1IGVtYWlsLicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIGgudmFsaWRhdGlvbkVycm9ycygpLmxlbmd0aCA/IF8ubWFwKGgudmFsaWRhdGlvbkVycm9ycygpLCBlcnJvcnMgPT4gbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC50ZXh0LWVycm9yJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1leGNsYW1hdGlvbi10cmlhbmdsZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCAke2Vycm9ycy5tZXNzYWdlfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdicicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLW5hdi1ib3R0b20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtcHVzaC0zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhY3RybC5sKCkgPyBtKCdpbnB1dC53LWJ1dHRvbi5idG4uYnRuLWxhcmdlW3R5cGU9XCJzdWJtaXRcIl1bdmFsdWU9XCJFbnZpYXIgbWVuc2FnZW1cIl0nLCB7ZGlzYWJsZWQ6IGN0cmwuc3VibWl0RGlzYWJsZWQoKX0pIDogaC5sb2FkZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgIHJldHVybiBtKCdkaXYnLCBbXG4gICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWhlYWRlcicsXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXInLCAnRW52aWFyIG1lbnNhZ2VtJylcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBjdHJsLnNlbmRTdWNjZXNzKCkgPyBzdWNjZXNzTWVzc2FnZSA6IGNvbnRhY3RGb3JtXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG93bmVyTWVzc2FnZUNvbnRlbnQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgb3duZXJNZXNzYWdlQ29udGVudCBmcm9tICcuL293bmVyLW1lc3NhZ2UtY29udGVudCc7XG5pbXBvcnQgbW9kYWxCb3ggZnJvbSAnLi9tb2RhbC1ib3gnO1xuXG5jb25zdCBwcm9qZWN0VXNlckNhcmQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIHJldHVybiB7ZGlzcGxheU1vZGFsOiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0O1xuICAgICAgICBjb25zdCBjb250YWN0TW9kYWxDID0gW293bmVyTWVzc2FnZUNvbnRlbnQsIGFyZ3MudXNlckRldGFpbHNdO1xuICAgICAgICBjb25zdCB1c2VyRGV0YWlsID0gYXJncy51c2VyRGV0YWlscygpO1xuXG4gICAgICAgIHJldHVybiBtKCcjdXNlci1jYXJkJywgIXVzZXJEZXRhaWwgPyAnY2FycmVnYW5kby4uLicgOiBtKCcudS1tYXJnaW5ib3R0b20tMzAudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgW1xuICAgICAgICAgICAgICAgIChjdHJsLmRpc3BsYXlNb2RhbCgpID8gbS5jb21wb25lbnQobW9kYWxCb3gsIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheU1vZGFsOiBjdHJsLmRpc3BsYXlNb2RhbCxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGFjdE1vZGFsQ1xuICAgICAgICAgICAgICAgIH0pIDogJycpLFxuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudGh1bWIudS1tYXJnaW5ib3R0b20tMzAudS1yb3VuZFt3aWR0aD1cIjEwMFwiXVtpdGVtcHJvcD1cImltYWdlXCJdW3NyYz1cIicgKyB1c2VyRGV0YWlsLnByb2ZpbGVfaW1nX3RodW1ibmFpbCArICdcIl0nKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwubGluay1oaWRkZW4uZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMC5saW5laGVpZ2h0LXRpZ2h0W2l0ZW1wcm9wPVwibmFtZVwiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuW2hyZWY9XCIvdXNlcnMvJyArIHVzZXJEZXRhaWwuaWQgKyAnXCJdJyx7b25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jcmVhdG9yX2xpbmsnLGxibDogdXNlckRldGFpbC5pZCxwcm9qZWN0OiBwcm9qZWN0KCl9KX0sIHVzZXJEZXRhaWwubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgucGx1cmFsaXplKHVzZXJEZXRhaWwudG90YWxfcHVibGlzaGVkX3Byb2plY3RzLCAnIGNyaWFkbycsICcgY3JpYWRvcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOyZuYnNwO3wmbmJzcDsmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLnBsdXJhbGl6ZSh1c2VyRGV0YWlsLnRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzLCAnIGFwb2lhZG8nLCAnIGFwb2lhZG9zJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgndWwudy1oaWRkZW4tdGlueS53LWhpZGRlbi1zbWFsbC53LWxpc3QtdW5zdHlsZWQuZm9udHNpemUtc21hbGxlci5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2ludG9wLTIwLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICghXy5pc0VtcHR5KHVzZXJEZXRhaWwuZmFjZWJvb2tfbGluaykgPyBtKCdsaScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWhpZGRlbltpdGVtcHJvcD1cInVybFwiXVtocmVmPVwiJyArIHVzZXJEZXRhaWwuZmFjZWJvb2tfbGluayArICdcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJyx7b25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jcmVhdG9yX2ZiJyxsYmw6IHVzZXJEZXRhaWwuZmFjZWJvb2tfbGluayxwcm9qZWN0OiBwcm9qZWN0KCl9KX0sICdQZXJmaWwgbm8gRmFjZWJvb2snKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpLCAoIV8uaXNFbXB0eSh1c2VyRGV0YWlsLnR3aXR0ZXJfdXNlcm5hbWUpID8gbSgnbGknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW5baXRlbXByb3A9XCJ1cmxcIl1baHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vJyArIHVzZXJEZXRhaWwudHdpdHRlcl91c2VybmFtZSArICdcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJyx7b25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jcmVhdG9yX3R3aXR0ZXInLGxibDogdXNlckRldGFpbC50d2l0dGVyX3VzZXJuYW1lLHByb2plY3Q6IHByb2plY3QoKX0pfSwgJ1BlcmZpbCBubyBUd2l0dGVyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcCh1c2VyRGV0YWlsLmxpbmtzLCAobGluaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyc2VkTGluayA9IGgucGFyc2VVcmwobGluayk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICghXy5pc0VtcHR5KHBhcnNlZExpbmsuaG9zdG5hbWUpID8gbSgnbGknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuW2l0ZW1wcm9wPVwidXJsXCJdW2hyZWY9XCInICsgbGluayArICdcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJyx7b25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jcmVhdG9yX290aGVybGlua3MnLGxibDogbGluayxwcm9qZWN0OiBwcm9qZWN0KCl9KX0sIHBhcnNlZExpbmsuaG9zdG5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICghXy5pc0VtcHR5KHVzZXJEZXRhaWwpID8gW20oJ2Eudy1idXR0b24uYnRuLmJ0bi10ZXJjaWFyeS5idG4tc21hbGwuYnRuLWlubGluZVtocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddJyx7b25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jcmVhdG9yX3NlbmRtc2cnLGxibDogdXNlckRldGFpbC5pZCxwcm9qZWN0OiBwcm9qZWN0KCl9LCBjdHJsLmRpc3BsYXlNb2RhbC50b2dnbGUpfSwgJ0VudmlhciBtZW5zYWdlbScpXSA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHJvamVjdCgpLmlzX2FkbWluX3JvbGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsIHVzZXJEZXRhaWwuZW1haWwpIDogJydcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RVc2VyQ2FyZDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RNb2RlIGZyb20gJy4vcHJvamVjdC1tb2RlJztcbmltcG9ydCBwcm9qZWN0UmVtaW5kZXIgZnJvbSAnLi9wcm9qZWN0LXJlbWluZGVyJztcbmltcG9ydCBwcm9qZWN0VXNlckNhcmQgZnJvbSAnLi9wcm9qZWN0LXVzZXItY2FyZCc7XG5pbXBvcnQgcHJvamVjdFNoYXJlQm94IGZyb20gJy4vcHJvamVjdC1zaGFyZS1ib3gnO1xuaW1wb3J0IHByb2plY3RGcmllbmRzIGZyb20gJy4vcHJvamVjdC1mcmllbmRzJztcbmltcG9ydCBhZGRyZXNzVGFnIGZyb20gJy4vYWRkcmVzcy10YWcnO1xuaW1wb3J0IGNhdGVnb3J5VGFnIGZyb20gJy4vY2F0ZWdvcnktdGFnJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMucHJvamVjdF9zaWRlYmFyJyk7XG5cbmNvbnN0IHByb2plY3RTaWRlYmFyID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0LFxuICAgICAgICAgICAgYW5pbWF0ZVByb2dyZXNzID0gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhbmltYXRpb24sIHByb2dyZXNzID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsZWRnZWQgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsZWRnZWRJbmNyZW1lbnQgPSBwcm9qZWN0KCkucGxlZGdlZCAvIHByb2plY3QoKS5wcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9yc0luY3JlbWVudCA9IHByb2plY3QoKS50b3RhbF9jb250cmlidXRvcnMgLyBwcm9qZWN0KCkucHJvZ3Jlc3M7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NCYXInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsZWRnZWRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGVkZ2VkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cmlidXRvcnNFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250cmlidXRvcnMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gc2V0SW50ZXJ2YWwoaW5jcmVtZW50UHJvZ3Jlc3MsIDI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnRQcm9ncmVzcyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MgPD0gcGFyc2VJbnQocHJvamVjdCgpLnByb2dyZXNzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IGAke3Byb2dyZXNzfSVgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGVkZ2VkRWwuaW5uZXJUZXh0ID0gYFIkICR7aC5mb3JtYXROdW1iZXIocGxlZGdlZCl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzRWwuaW5uZXJUZXh0ID0gYCR7cGFyc2VJbnQoY29udHJpYnV0b3JzKX0gcGVzc29hc2A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlubmVyVGV4dCA9IGAke3Byb2dyZXNzfSVgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGVkZ2VkID0gcGxlZGdlZCArIHBsZWRnZWRJbmNyZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9ycyA9IGNvbnRyaWJ1dG9ycyArIGNvbnRyaWJ1dG9yc0luY3JlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MgPSBwcm9ncmVzcyArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChhbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDE4MDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFuaW1hdGVQcm9ncmVzczogYW5pbWF0ZVByb2dyZXNzLFxuICAgICAgICAgICAgZGlzcGxheVNoYXJlQm94OiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCxcbiAgICAgICAgICAgIGVsYXBzZWQgPSBwcm9qZWN0KCkuZWxhcHNlZF90aW1lLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gcHJvamVjdCgpLnJlbWFpbmluZ190aW1lLFxuICAgICAgICAgICAgZGlzcGxheUNhcmRDbGFzcyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICd3YWl0aW5nX2Z1bmRzJzogJ2NhcmQtd2FpdGluZycsXG4gICAgICAgICAgICAgICAgICAgICdzdWNjZXNzZnVsJzogJ2NhcmQtc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICdmYWlsZWQnOiAnY2FyZC1lcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICdkcmFmdCc6ICdjYXJkLWRhcmsnLFxuICAgICAgICAgICAgICAgICAgICAnaW5fYW5hbHlzaXMnOiAnY2FyZC1kYXJrJyxcbiAgICAgICAgICAgICAgICAgICAgJ2FwcHJvdmVkJzogJ2NhcmQtZGFyaydcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChzdGF0ZXNbcHJvamVjdCgpLnN0YXRlXSA/ICdjYXJkIHUtcmFkaXVzIHppbmRleC0xMCAnICsgc3RhdGVzW3Byb2plY3QoKS5zdGF0ZV0gOiAnJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzcGxheVN0YXR1c1RleHQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVzID0ge1xuICAgICAgICAgICAgICAgICAgICAnYXBwcm92ZWQnOiBJMThuLnQoJ2Rpc3BsYXlfc3RhdHVzLmFwcHJvdmVkJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgICAgICAgICAnb25saW5lJzogaC5leGlzdHkocHJvamVjdCgpLnpvbmVfZXhwaXJlc19hdCkgJiYgcHJvamVjdCgpLm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMgPyBJMThuLnQoJ2Rpc3BsYXlfc3RhdHVzLm9ubGluZScsIEkxOG5TY29wZSh7ZGF0ZTogaC5tb21lbnRpZnkocHJvamVjdCgpLnpvbmVfZXhwaXJlc19hdCl9KSkgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZhaWxlZCc6IEkxOG4udCgnZGlzcGxheV9zdGF0dXMuZmFpbGVkJywgSTE4blNjb3BlKHtkYXRlOiBoLm1vbWVudGlmeShwcm9qZWN0KCkuem9uZV9leHBpcmVzX2F0KSwgZ29hbDogcHJvamVjdCgpLmdvYWx9KSksXG4gICAgICAgICAgICAgICAgICAgICdyZWplY3RlZCc6IEkxOG4udCgnZGlzcGxheV9zdGF0dXMucmVqZWN0ZWQnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICdpbl9hbmFseXNpcyc6IEkxOG4udCgnZGlzcGxheV9zdGF0dXMuaW5fYW5hbHlzaXMnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICdzdWNjZXNzZnVsJzogSTE4bi50KCdkaXNwbGF5X3N0YXR1cy5zdWNjZXNzZnVsJywgSTE4blNjb3BlKHtkYXRlOiBoLm1vbWVudGlmeShwcm9qZWN0KCkuem9uZV9leHBpcmVzX2F0KX0pKSxcbiAgICAgICAgICAgICAgICAgICAgJ3dhaXRpbmdfZnVuZHMnOiBJMThuLnQoJ2Rpc3BsYXlfc3RhdHVzLndhaXRpbmdfZnVuZHMnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICdkcmFmdCc6IEkxOG4udCgnZGlzcGxheV9zdGF0dXMuZHJhZnQnLCBJMThuU2NvcGUoKSlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlc1twcm9qZWN0KCkuc3RhdGVdO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3Qtc2lkZWJhci5hc2lkZScsIFtcbiAgICAgICAgICAgIG0oJy5wcm9qZWN0LXN0YXRzJywgW1xuICAgICAgICAgICAgICAgIG0oJy5wcm9qZWN0LXN0YXRzLWlubmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcucHJvamVjdC1zdGF0cy1pbmZvJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJyNwbGVkZ2VkLmZvbnRzaXplLWxhcmdlc3QuZm9udHdlaWdodC1zZW1pYm9sZC51LXRleHQtY2VudGVyLXNtYWxsLW9ubHknLCBgUiQgJHtwcm9qZWN0KCkucGxlZGdlZCA/IGguZm9ybWF0TnVtYmVyKHByb2plY3QoKS5wbGVkZ2VkKSA6ICcwJ31gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ2NvbnRyaWJ1dG9yc19jYWxsJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuI2NvbnRyaWJ1dG9ycy5mb250d2VpZ2h0LXNlbWlib2xkJywgSTE4bi50KCdjb250cmlidXRvcnNfY291bnQnLCBJMThuU2NvcGUoe2NvdW50OiBwcm9qZWN0KCkudG90YWxfY29udHJpYnV0b3JzfSkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFwcm9qZWN0KCkuZXhwaXJlc19hdCAmJiBlbGFwc2VkKSA/ICcgZW0gJyArIEkxOG4udCgnZGF0ZXRpbWUuZGlzdGFuY2VfaW5fd29yZHMueF8nICsgZWxhcHNlZC51bml0LCB7Y291bnQ6IGVsYXBzZWQudG90YWx9LCBJMThuU2NvcGUoKSkgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5tZXRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcjcHJvZ3Jlc3NCYXIubWV0ZXItZmlsbCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBgJHtwcm9qZWN0KCkucHJvZ3Jlc3N9JWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbnRvcC0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNS53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQubGluZWhlaWdodC10aWdodGVyJywgYCR7cHJvamVjdCgpLnByb2dyZXNzID8gcGFyc2VJbnQocHJvamVjdCgpLnByb2dyZXNzKSA6ICcwJ30lYClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNy53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNi53LWNsZWFyZml4JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1yaWdodC5mb250c2l6ZS1zbWFsbC5saW5laGVpZ2h0LXRpZ2h0ZXInLCByZW1haW5pbmcgJiYgcmVtYWluaW5nLnRvdGFsID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgcmVtYWluaW5nLnRvdGFsKSwgSTE4bi50KCdyZW1haW5pbmdfdGltZS4nICsgcmVtYWluaW5nLnVuaXQsIEkxOG5TY29wZSh7Y291bnQ6IHJlbWFpbmluZy50b3RhbH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0TW9kZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgKHByb2plY3QoKS5vcGVuX2Zvcl9jb250cmlidXRpb25zID8gbSgnLmJhY2stcHJvamVjdC1idG4tZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuYmFjay1wcm9qZWN0LS1idG4tcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNjb250cmlidXRlX3Byb2plY3RfZm9ybS5idG4uYnRuLWxhcmdlLnUtbWFyZ2luYm90dG9tLTIwW2hyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCJdJyx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXQ6ICdjb250cmlidXRpb25fY3JlYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0OiAnY29udHJpYnV0aW9uX2J1dHRvbl9jbGljaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICgpID0+IGgubmF2aWdhdGVUbyhgL3Byb2plY3RzLyR7cHJvamVjdCgpLnByb2plY3RfaWR9L2NvbnRyaWJ1dGlvbnMvbmV3YCkpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIEkxOG4udCgnc3VibWl0JywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmJhY2stcHJvamVjdC1idG4tcm93LXJpZ2h0JywgbS5jb21wb25lbnQocHJvamVjdFJlbWluZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpbmsnXG4gICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIF0pIDogJycpLFxuICAgICAgICAgICAgICAgIG0oJy5mcmllbmQtYmFja2VkLWNhcmQucHJvamVjdC1wYWdlJywgW1xuICAgICAgICAgICAgICAgICAgICAoIV8uaXNVbmRlZmluZWQocHJvamVjdCgpKSAmJiBwcm9qZWN0KCkuY29udHJpYnV0ZWRfYnlfZnJpZW5kcyA/IG0uY29tcG9uZW50KHByb2plY3RGcmllbmRzLCB7cHJvamVjdDogcHJvamVjdCgpfSkgOiAnJylcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCdkaXZbY2xhc3M9XCJmb250c2l6ZS1zbWFsbGVyIHUtbWFyZ2luYm90dG9tLTMwICcgKyBkaXNwbGF5Q2FyZENsYXNzKCkgKyAnXCJdJywgZGlzcGxheVN0YXR1c1RleHQoKSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnByb2plY3Qtc2hhcmUudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0nLCBbXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRkcmVzc1RhZywge3Byb2plY3Q6IHByb2plY3R9KSxcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChjYXRlZ29yeVRhZywge3Byb2plY3Q6IHByb2plY3R9KSxcbiAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tMzAudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgbSgnYnV0dG9uLmJ0bi5idG4taW5saW5lLmJ0bi1tZWRpdW0uYnRuLXRlcmNpYXJ5Jywge1xuICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLmRpc3BsYXlTaGFyZUJveC50b2dnbGVcbiAgICAgICAgICAgICAgICB9LCAnQ29tcGFydGlsaGFyIGVzdGUgcHJvamV0bycpKSxcbiAgICAgICAgICAgICAgICBjdHJsLmRpc3BsYXlTaGFyZUJveCgpID8gbShwcm9qZWN0U2hhcmVCb3gsIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheVNoYXJlQm94OiBjdHJsLmRpc3BsYXlTaGFyZUJveFxuICAgICAgICAgICAgICAgIH0pIDogJydcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnLnVzZXItYycsIG0uY29tcG9uZW50KHByb2plY3RVc2VyQ2FyZCwge1xuICAgICAgICAgICAgICAgIHVzZXJEZXRhaWxzOiBhcmdzLnVzZXJEZXRhaWxzLFxuICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3RcbiAgICAgICAgICAgIH0pKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0U2lkZWJhcjtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBwYXltZW50U3RhdHVzIGZyb20gJy4vcGF5bWVudC1zdGF0dXMnO1xuXG5jb25zdCB1c2VyQ29udHJpYnV0aW9uRGV0YWlsID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBjb250cmlidXRpb24gPSBhcmdzLmNvbnRyaWJ1dGlvbixcbiAgICAgICAgICAgICAgcmV3YXJkRGV0YWlscyA9IGFyZ3MucmV3YXJkRGV0YWlscyxcbiAgICAgICAgICAgICAgY2hvc2VuUmV3YXJkID0gXy5maW5kV2hlcmUocmV3YXJkRGV0YWlscygpLCB7aWQ6IGNvbnRyaWJ1dGlvbi5yZXdhcmRfaWR9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udHJpYnV0aW9uOiBjb250cmlidXRpb24sXG4gICAgICAgICAgICBjaG9zZW5SZXdhcmQ6IGNob3NlblJld2FyZFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvbiA9IGFyZ3MuY29udHJpYnV0aW9uO1xuXG4gICAgICAgIHJldHVybiBtKCcudXNlci1jb250cmlidXRpb24tZGV0YWlsJywgW1xuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC10aWdodC5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwJyxcbiAgICAgICAgICAgICAgICAgICAgJ1ZhbG9yIGRvIGFwb2lvOidcbiAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlJyxcbiAgICAgICAgICAgICAgICAgICAgYFIkJHtjb250cmlidXRpb24udmFsdWV9YFxuICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsXG4gICAgICAgICAgICAgIG0uY29tcG9uZW50KHBheW1lbnRTdGF0dXMsIHtpdGVtOiBjb250cmlidXRpb259KVxuICAgICAgICAgICAgICksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMTAnLFxuICAgICAgICAgICAgICAgICAgICAnUmVjb21wZW5zYTonXG4gICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LXRpZ2h0LnUtbWFyZ2luYm90dG9tLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgKCFfLmlzVW5kZWZpbmVkKGN0cmwuY2hvc2VuUmV3YXJkKSA/IGN0cmwuY2hvc2VuUmV3YXJkLmRlc2NyaXB0aW9uIDogJ05lbmh1bWEgcmVjb21wZW5zYSBzZWxlY2lvbmFkYS4nKVxuICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC1sb29zZXInLFxuICAgICAgICAgICAgICAgICAgICAoIV8uaXNVbmRlZmluZWQoY3RybC5jaG9zZW5SZXdhcmQpID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ0VzdGltYXRpdmEgZGUgZW50cmVnYTogJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBoLm1vbWVudGlmeShjdHJsLmNob3NlblJld2FyZC5kZWxpdmVyX2F0LCAnTU1NL1lZWVknKVxuICAgICAgICAgICAgICAgICAgICBdIDogJycpXG4gICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VyQ29udHJpYnV0aW9uRGV0YWlsO1xuIiwiaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5cbmNvbnN0IGN1cnJlbnRDb250cmlidXRpb24gPSBtLnByb3Aoe30pO1xuXG5jb25zdCBnZXRVc2VyUHJvamVjdENvbnRyaWJ1dGlvbnMgPSAodXNlcl9pZCwgcHJvamVjdF9pZCwgc3RhdGVzKSA9PiB7XG4gICAgY29uc3Qgdm0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgdXNlcl9pZDogJ2VxJyxcbiAgICAgICAgcHJvamVjdF9pZDogJ2VxJyxcbiAgICAgICAgc3RhdGU6ICdpbidcbiAgICB9KTtcblxuICAgIHZtLnVzZXJfaWQodXNlcl9pZCk7XG4gICAgdm0ucHJvamVjdF9pZChwcm9qZWN0X2lkKTtcbiAgICB2bS5zdGF0ZShzdGF0ZXMpO1xuXG4gICAgY29uc3QgbFByb2plY3RDb250cmlidXRpb25zID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihtb2RlbHMudXNlckNvbnRyaWJ1dGlvbi5nZXRQYWdlT3B0aW9ucyh2bS5wYXJhbWV0ZXJzKCkpKTtcblxuICAgIHJldHVybiBsUHJvamVjdENvbnRyaWJ1dGlvbnMubG9hZCgpO1xufTtcblxuY29uc3QgZ2V0Q3VycmVudENvbnRyaWJ1dGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCByb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcGxpY2F0aW9uJyksXG4gICAgICAgICAgZGF0YSA9IHJvb3QgJiYgcm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udHJpYnV0aW9uJyk7XG5cbiAgICBpZiAoZGF0YSkge1xuICAgICAgICBjdXJyZW50Q29udHJpYnV0aW9uKEpTT04ucGFyc2UoZGF0YSkpO1xuXG4gICAgICAgIG0ucmVkcmF3KHRydWUpO1xuXG4gICAgICAgIHJldHVybiBjdXJyZW50Q29udHJpYnV0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG5jb25zdCBjb250cmlidXRpb25WTSA9ICB7XG4gICAgZ2V0Q3VycmVudENvbnRyaWJ1dGlvbjogZ2V0Q3VycmVudENvbnRyaWJ1dGlvbixcbiAgICBnZXRVc2VyUHJvamVjdENvbnRyaWJ1dGlvbnM6IGdldFVzZXJQcm9qZWN0Q29udHJpYnV0aW9uc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29udHJpYnV0aW9uVk07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcHJvamVjdEhpZ2hsaWdodCBmcm9tICcuL3Byb2plY3QtaGlnaGxpZ2h0JztcbmltcG9ydCBwcm9qZWN0U2lkZWJhciBmcm9tICcuL3Byb2plY3Qtc2lkZWJhcic7XG5pbXBvcnQgdXNlckNvbnRyaWJ1dGlvbkRldGFpbCBmcm9tICcuL3VzZXItY29udHJpYnV0aW9uLWRldGFpbCc7XG5pbXBvcnQgY29udHJpYnV0aW9uVk0gZnJvbSAnLi4vdm1zL2NvbnRyaWJ1dGlvbi12bSc7XG5cbmNvbnN0IHByb2plY3RIZWFkZXIgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QsXG4gICAgICAgICAgICBjdXJyZW50VXNlciA9IGguZ2V0VXNlcigpO1xuXG4gICAgICAgIGlmIChoLmlzUHJvamVjdFBhZ2UoKSAmJiBjdXJyZW50VXNlciAmJiAhXy5pc1VuZGVmaW5lZChwcm9qZWN0KCkpKXtcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvblZNXG4gICAgICAgICAgICAgICAgLmdldFVzZXJQcm9qZWN0Q29udHJpYnV0aW9ucyhjdXJyZW50VXNlci51c2VyX2lkLCBwcm9qZWN0KCkucHJvamVjdF9pZCwgWydwYWlkJywgJ3JlZnVuZGVkJywgJ3BlbmRpbmdfcmVmdW5kJ10pXG4gICAgICAgICAgICAgICAgLnRoZW4oYXJncy5wcm9qZWN0Q29udHJpYnV0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvamVjdENvbnRyaWJ1dGlvbnM6IGFyZ3MucHJvamVjdENvbnRyaWJ1dGlvbnMsXG4gICAgICAgICAgICBzaG93Q29udHJpYnV0aW9uczogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGxldCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0LFxuICAgICAgICAgICAgcmV3YXJkRGV0YWlscyA9IGFyZ3MucmV3YXJkRGV0YWlscztcblxuICAgICAgICByZXR1cm4gKCFfLmlzVW5kZWZpbmVkKHByb2plY3QoKSkgPyBtKCcjcHJvamVjdC1oZWFkZXInLCBbXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24tcHJvZHVjdC4nICsgcHJvamVjdCgpLm1vZGUpLFxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5wYWdlLWhlYWRlci51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnaDEuZm9udHNpemUtbGFyZ2VyLmZvbnR3ZWlnaHQtc2VtaWJvbGQucHJvamVjdC1uYW1lW2l0ZW1wcm9wPVwibmFtZVwiXScsIGguc2VsZk9yRW1wdHkocHJvamVjdCgpLm5hbWUgfHwgcHJvamVjdCgpLnByb2plY3RfbmFtZSkpLFxuICAgICAgICAgICAgICAgICAgICBtKCdoMi5mb250c2l6ZS1iYXNlLmxpbmVoZWlnaHQtbG9vc2VyW2l0ZW1wcm9wPVwiYXV0aG9yXCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3BvciAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdCgpLnVzZXIgPyBwcm9qZWN0KCkudXNlci5uYW1lIDogcHJvamVjdCgpLm93bmVyX25hbWUgPyBwcm9qZWN0KCkub3duZXJfbmFtZSA6ICcnXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAhXy5pc0VtcHR5KGN0cmwucHJvamVjdENvbnRyaWJ1dGlvbnMoKSkgPyBtKCcuY2FyZC5jYXJkLXRlcmNpYXJ5LnUtcmFkaXVzLnUtbWFyZ2ludG9wLTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwudS10ZXh0LWNlbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtdGh1bWJzLXVwJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIFZvY8OqIMOpIGFwb2lhZG9yIGRlc3RlIHByb2pldG8hICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XFwnamF2YXNjcmlwdDp2b2lkKDApO1xcJ10nLCB7b25jbGljazogY3RybC5zaG93Q29udHJpYnV0aW9ucy50b2dnbGV9LCAnRGV0YWxoZXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNob3dDb250cmlidXRpb25zKCkgPyBtKCcuY2FyZC51LW1hcmdpbnRvcC0yMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLnByb2plY3RDb250cmlidXRpb25zKCksIGNvbnRyaWJ1dGlvbiA9PiBtLmNvbXBvbmVudCh1c2VyQ29udHJpYnV0aW9uRGV0YWlsLCB7Y29udHJpYnV0aW9uOiBjb250cmlidXRpb24sIHJld2FyZERldGFpbHM6IHJld2FyZERldGFpbHN9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApIDogJydcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnByb2plY3QtbWFpbicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy5wcm9qZWN0LW1haW4nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC5wcm9qZWN0LWhpZ2hsaWdodCcsIG0uY29tcG9uZW50KHByb2plY3RIaWdobGlnaHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIG0uY29tcG9uZW50KHByb2plY3RTaWRlYmFyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGV0YWlsczogYXJncy51c2VyRGV0YWlsc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSA6IG0oJycpKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0SGVhZGVyO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBwcm9qZWN0UmVtaW5kZXIgZnJvbSAnLi9wcm9qZWN0LXJlbWluZGVyJztcblxuY29uc3QgcHJvamVjdFRhYnMgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGlzRml4ZWQgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgb3JpZ2luYWxQb3NpdGlvbiA9IG0ucHJvcCgtMSk7XG5cbiAgICAgICAgY29uc3QgZml4T25TY3JvbGwgPSAoZWwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHZpZXdwb3J0T2Zmc2V0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAod2luZG93LnNjcm9sbFkgPD0gb3JpZ2luYWxQb3NpdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsUG9zaXRpb24oLTEpO1xuICAgICAgICAgICAgICAgICAgICBpc0ZpeGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmlld3BvcnRPZmZzZXQudG9wIDwgMCB8fCAod2luZG93LnNjcm9sbFkgPiBvcmlnaW5hbFBvc2l0aW9uKCkgJiYgb3JpZ2luYWxQb3NpdGlvbigpID4gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0ZpeGVkKCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxQb3NpdGlvbih3aW5kb3cuc2Nyb2xsWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0ZpeGVkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbmF2RGlzcGxheSA9IChlbCwgaXNJbml0aWFsaXplZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZml4TmF2QmFyID0gZml4T25TY3JvbGwoZWwpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmaXhOYXZCYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYXZEaXNwbGF5OiBuYXZEaXNwbGF5LFxuICAgICAgICAgICAgaXNGaXhlZDogaXNGaXhlZFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QsXG4gICAgICAgICAgICByZXdhcmRzID0gYXJncy5yZXdhcmREZXRhaWxzO1xuXG4gICAgICAgIGxldCBtYWluQ2xhc3MgPSAoIWN0cmwuaXNGaXhlZCgpIHx8IHByb2plY3QoKS5pc19vd25lcl9vcl9hZG1pbikgPyAnLnctc2VjdGlvbi5wcm9qZWN0LW5hdicgOiAnLnctc2VjdGlvbi5wcm9qZWN0LW5hdi5wcm9qZWN0LW5hdi1maXhlZCc7XG5cbiAgICAgICAgcmV0dXJuIG0oJ25hdi13cmFwcGVyJywgcHJvamVjdCgpID8gW1xuICAgICAgICAgICAgbShtYWluQ2xhc3MsIHtcbiAgICAgICAgICAgICAgICBjb25maWc6IGN0cmwubmF2RGlzcGxheVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbIV8uaXNFbXB0eShyZXdhcmRzKCkpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhW2lkPVwicmV3YXJkcy1saW5rXCJdW2NsYXNzPVwidy1oaWRkZW4tbWFpbiB3LWhpZGRlbi1tZWRpdW0gZGFzaGJvYXJkLW5hdi1saW5rIG1mICAkeyhoLmhhc2hNYXRjaCgnI3Jld2FyZHMnKSA/ICdzZWxlY3RlZCcgOiAnJyl9XCJdW2hyZWY9XCIvJHtwcm9qZWN0KCkucGVybWFsaW5rfSNyZXdhcmRzXCJdYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2Zsb2F0OiBsZWZ0OycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9yZXdhcmRzX3ZpZXcnLHByb2plY3Q6IHByb2plY3QoKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ1JlY29tcGVuc2FzJykgOiBtKGBhW2lkPVwicmV3YXJkcy1saW5rXCJdW2NsYXNzPVwidy1oaWRkZW4tbWFpbiB3LWhpZGRlbi1tZWRpdW0gZGFzaGJvYXJkLW5hdi1saW5rIG1mICR7KGguaGFzaE1hdGNoKCcjY29udHJpYnV0aW9uX3N1Z2dlc3Rpb25zJykgPyAnc2VsZWN0ZWQnIDogJycpfVwiXVtocmVmPVwiLyR7cHJvamVjdCgpLnBlcm1hbGlua30jY29udHJpYnV0aW9uX3N1Z2dlc3Rpb25zXCJdYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2Zsb2F0OiBsZWZ0OycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jb250cmlic3VnZ2VzdGlvbnNfdmlldycscHJvamVjdDogcHJvamVjdCgpfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnVmFsb3JlcyBTdWdlcmlkb3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhW2lkPVwiYWJvdXQtbGlua1wiXVtjbGFzcz1cImRhc2hib2FyZC1uYXYtbGluayBtZiAkeyhoLmhhc2hNYXRjaCgnI2Fib3V0JykgfHwgaC5oYXNoTWF0Y2goJycpID8gJ3NlbGVjdGVkJyA6ICcnKX1cIl1baHJlZj1cIiNhYm91dFwiXWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdmbG9hdDogbGVmdDsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXQ6ICdwcm9qZWN0X3ZpZXcnLGFjdDogJ3Byb2plY3RfYWJvdXRfdmlldycscHJvamVjdDogcHJvamVjdCgpfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnU29icmUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhW2lkPVwicG9zdHMtbGlua1wiXVtjbGFzcz1cImRhc2hib2FyZC1uYXYtbGluayBtZiAkeyhoLmhhc2hNYXRjaCgnI3Bvc3RzJykgPyAnc2VsZWN0ZWQnIDogJycpfVwiXVtocmVmPVwiI3Bvc3RzXCJdYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2Zsb2F0OiBsZWZ0OycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9wb3N0c192aWV3Jyxwcm9qZWN0OiBwcm9qZWN0KCl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vdmlkYWRlcyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmJhZGdlJywgcHJvamVjdCgpID8gcHJvamVjdCgpLnBvc3RzX2NvdW50IDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYVtpZD1cImNvbnRyaWJ1dGlvbnMtbGlua1wiXVtjbGFzcz1cInctaGlkZGVuLXNtYWxsIHctaGlkZGVuLXRpbnkgZGFzaGJvYXJkLW5hdi1saW5rIG1mICR7KGguaGFzaE1hdGNoKCcjY29udHJpYnV0aW9ucycpID8gJ3NlbGVjdGVkJyA6ICcnKX1cIl1baHJlZj1cIiNjb250cmlidXRpb25zXCJdYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2Zsb2F0OiBsZWZ0OycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jb250cmlidXRpb25zX3ZpZXcnLHByb2plY3Q6IHByb2plY3QoKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQXBvaWFkb3JlcyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmJhZGdlLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCBwcm9qZWN0KCkgPyBwcm9qZWN0KCkudG90YWxfY29udHJpYnV0b3JzIDogJy0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGFbaWQ9XCJjb21tZW50cy1saW5rXCJdW2NsYXNzPVwiZGFzaGJvYXJkLW5hdi1saW5rIG1mICR7KGguaGFzaE1hdGNoKCcjY29tbWVudHMnKSA/ICdzZWxlY3RlZCcgOiAnJyl9XCJdW2hyZWY9XCIjY29tbWVudHNcIl1gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnZmxvYXQ6IGxlZnQ7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2NvbW1lbnRzX3ZpZXcnLHByb2plY3Q6IHByb2plY3QoKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29tZW50w6FyaW9zICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QoKSA/IG0oJ2ZiOmNvbW1lbnRzLWNvdW50W2hyZWY9XCJodHRwOi8vd3d3LmNhdGFyc2UubWUvJyArIHByb2plY3QoKS5wZXJtYWxpbmsgKyAnXCJdW2NsYXNzPVwiYmFkZ2UgcHJvamVjdC1mYi1jb21tZW50IHctaGlkZGVuLXNtYWxsIHctaGlkZGVuLXRpbnlcIl1bc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmVcIl0nLCBtLnRydXN0KCcmbmJzcDsnKSkgOiAnLSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdCgpID8gbSgnLnctY29sLnctY29sLTQudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsIHByb2plY3QoKS5vcGVuX2Zvcl9jb250cmlidXRpb25zID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy5wcm9qZWN0LW5hdi1iYWNrLWJ1dHRvbicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtbWVkaXVtLTgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bltocmVmPVwiL3Byb2plY3RzLycgKyBwcm9qZWN0KCkucHJvamVjdF9pZCArICcvY29udHJpYnV0aW9ucy9uZXdcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ2NvbnRyaWJ1dGlvbl9jcmVhdGUnLGFjdDogJ2NvbnRyaWJ1dGlvbl9mbG9hdGluZ2J0bl9jbGljaycsIHByb2plY3Q6IHByb2plY3QoKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnQXBvaWFywqDigI1lc3RlwqBwcm9qZXRvJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02LnctY29sLW1lZGl1bS00Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9mbG9hdGluZ3JlbWluZGVyX2NsaWNrJywgcHJvamVjdDogcHJvamVjdCgpfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdFJlbWluZGVyLCB7cHJvamVjdDogcHJvamVjdCwgdHlwZTogJ2J1dHRvbicsIGhpZGVUZXh0T25Nb2JpbGU6IHRydWV9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdIDogJycpIDogJydcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAoY3RybC5pc0ZpeGVkKCkgJiYgIXByb2plY3QoKS5pc19vd25lcl9vcl9hZG1pbikgPyBtKCcudy1zZWN0aW9uLnByb2plY3QtbmF2JykgOiAnJ1xuICAgICAgICBdIDogJycpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RUYWJzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHJld2FyZFZNIGZyb20gJy4uL3Ztcy9yZXdhcmQtdm0nO1xuaW1wb3J0IHByb2plY3RWTSBmcm9tICcuLi92bXMvcHJvamVjdC12bSc7XG5cbmNvbnN0IHByb2plY3RSZXdhcmRMaXN0ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBzdG9yZUtleSA9ICdzZWxlY3RlZFJld2FyZCcsXG4gICAgICAgICAgICB2bSA9IHJld2FyZFZNO1xuXG4gICAgICAgIGNvbnN0IHNldElucHV0ID0gKGVsLCBpc0luaXRpYWxpemVkKSA9PiAhaXNJbml0aWFsaXplZCA/IGVsLmZvY3VzKCkgOiBmYWxzZTtcblxuICAgICAgICBjb25zdCBzdWJtaXRDb250cmlidXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUZsb2F0ID0gaC5tb25ldGFyeVRvRmxvYXQodm0uY29udHJpYnV0aW9uVmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAodmFsdWVGbG9hdCA8IHZtLnNlbGVjdGVkUmV3YXJkKCkubWluaW11bV92YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZtLmVycm9yKGBPIHZhbG9yIGRlIGFwb2lvIHBhcmEgZXNzYSByZWNvbXBlbnNhIGRldmUgc2VyIGRlIG5vIG3DrW5pbW8gUiQke3ZtLnNlbGVjdGVkUmV3YXJkKCkubWluaW11bV92YWx1ZX1gKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdm0uZXJyb3IoJycpO1xuXG4gICAgICAgICAgICAgICAgLy8gVEhJUyBDSEVDSyBJUyBPTkxZIE5FQ0VTU0FSWSBJRiBXSEVOIFdFIFNUQVJUIFJPVVRJTkcgRElSRUNUTFkgVE8gVEhFIC9jb250cmlidXRpb25zL2VkaXQgcGFnZVxuICAgICAgICAgICAgICAgIC8vIGlmICghaC5nZXRVc2VyKCkpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgaC5zdG9yZU9iamVjdChzdG9yZUtleSwge3ZhbHVlOiB2YWx1ZUZsb2F0LCByZXdhcmQ6IHZtLnNlbGVjdGVkUmV3YXJkKCl9KTtcblxuICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gaC5uYXZpZ2F0ZVRvRGV2aXNlKCcvJyArIHByb2plY3RWTS5jdXJyZW50UHJvamVjdCgpLnBlcm1hbGluayk7XG4gICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB2bS5jb250cmlidXRpb25WYWx1ZSh2YWx1ZUZsb2F0KTtcbiAgICAgICAgICAgICAgICAvL2gubmF2aWdhdGVUbyhgL3Byb2plY3RzLyR7cHJvamVjdFZNLmN1cnJlbnRwcm9qZWN0KCkucHJvamVjdF9pZH0vY29udHJpYnV0aW9ucy9uZXc/cmV3YXJkX2lkPSR7dm0uc2VsZWN0ZWRSZXdhcmQoKS5pZH1gKTtcbiAgICAgICAgICAgICAgICBoLm5hdmlnYXRlVG8oYC9wcm9qZWN0cy8ke3Byb2plY3RWTS5jdXJyZW50UHJvamVjdCgpLnByb2plY3RfaWR9L2NvbnRyaWJ1dGlvbnMvZmFsbGJhY2tfY3JlYXRlP2NvbnRyaWJ1dGlvbiU1QnJld2FyZF9pZCU1RD0ke3ZtLnNlbGVjdGVkUmV3YXJkKCkuaWR9JmNvbnRyaWJ1dGlvbiU1QnZhbHVlJTVEPSR7dmFsdWVGbG9hdH1gKTtcbiAgICAgICAgICAgICAgICAvLyBtLnJvdXRlKGAvcHJvamVjdHMvJHtwcm9qZWN0Vk0uY3VycmVudHByb2plY3QoKS5wcm9qZWN0X2lkfS9wYXltZW50YCwge1xuICAgICAgICAgICAgICAgIC8vICAgIHByb2plY3RfdXNlcl9pZDogcHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkudXNlcl9pZFxuICAgICAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChoLmdldFN0b3JlZE9iamVjdChzdG9yZUtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICByZXdhcmRcbiAgICAgICAgICAgIH0gPSBoLmdldFN0b3JlZE9iamVjdChzdG9yZUtleSk7XG5cbiAgICAgICAgICAgIGgucmVtb3ZlU3RvcmVkT2JqZWN0KHN0b3JlS2V5KTtcbiAgICAgICAgICAgIHZtLnNlbGVjdGVkUmV3YXJkKHJld2FyZCk7XG4gICAgICAgICAgICB2bS5jb250cmlidXRpb25WYWx1ZShoLmFwcGx5TW9uZXRhcnlNYXNrKGAke3ZhbHVlfSwwMGApKTtcbiAgICAgICAgICAgIHN1Ym1pdENvbnRyaWJ1dGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFwcGx5TWFzazogdm0uYXBwbHlNYXNrLFxuICAgICAgICAgICAgZXJyb3I6IHZtLmVycm9yLFxuICAgICAgICAgICAgc3VibWl0Q29udHJpYnV0aW9uOiBzdWJtaXRDb250cmlidXRpb24sXG4gICAgICAgICAgICBvcGVuZWRSZXdhcmQ6IHZtLnNlbGVjdGVkUmV3YXJkLFxuICAgICAgICAgICAgc2VsZWN0UmV3YXJkOiB2bS5zZWxlY3RSZXdhcmQsXG4gICAgICAgICAgICBjb250cmlidXRpb25WYWx1ZTogdm0uY29udHJpYnV0aW9uVmFsdWUsXG4gICAgICAgICAgICBzZXRJbnB1dDogc2V0SW5wdXRcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICAvL0ZJWE1FOiBNSVNTSU5HIEFESlVTVFNcbiAgICAgICAgLy8gLSBhZGQgZHJhZnQgYWRtaW4gbW9kaWZpY2F0aW9uc1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0KCkgfHwge1xuICAgICAgICAgICAgb3Blbl9mb3JfY29udHJpYnV0aW9uczogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG0oJyNyZXdhcmRzLnUtbWFyZ2luYm90dG9tLTMwJywgXy5tYXAoYXJncy5yZXdhcmREZXRhaWxzKCksIChyZXdhcmQpID0+IHtcblxuICAgICAgICAgICAgcmV0dXJuIG0oJ2RpdltjbGFzcz1cIicgKyAoaC5yZXdhcmRTb3VsZE91dChyZXdhcmQpID8gJ2NhcmQtZ29uZScgOiAnY2FyZC1yZXdhcmQgJyArIChwcm9qZWN0Lm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMgPyAnY2xpY2thYmxlJyA6ICcnKSkgKyAnIGNhcmQgY2FyZC1zZWNvbmRhcnkgdS1tYXJnaW5ib3R0b20tMTBcIl0nLCB7XG4gICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBjYXQ6ICdjb250cmlidXRpb25fY3JlYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgYWN0OiAnY29udHJpYnV0aW9uX3Jld2FyZF9jbGljaycsXG4gICAgICAgICAgICAgICAgICAgIGxibDogcmV3YXJkLm1pbmltdW1fdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhRGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV3YXJkX2lkOiByZXdhcmQuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXdhcmRfdmFsdWU6IHJld2FyZC5taW5pbXVtX3ZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBjdHJsLnNlbGVjdFJld2FyZChyZXdhcmQpKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIHJld2FyZC5taW5pbXVtX3ZhbHVlID49IDEwMCA/IG0oJy50YWctY2lyY2xlLWluc3RhbGxtZW50JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QuZm9udHdlaWdodC1zZW1pYm9sZC5saW5laGVpZ2h0LXRpZ2h0ZXN0JywgJzN4JyksXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1taW5pLmxpbmVoZWlnaHQtdGlnaHRlc3QnLCAncy8ganVyb3MnKVxuICAgICAgICAgICAgICAgIF0pIDogJycsXG4gICAgICAgICAgICAgICAgbSgnLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1BhcmEgUiQgJyArIGguZm9ybWF0TnVtYmVyKHJld2FyZC5taW5pbXVtX3ZhbHVlKSArICcgb3UgbWFpcycpLFxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlci5mb250d2VpZ2h0LXNlbWlib2xkJywgaC5wbHVyYWxpemUocmV3YXJkLnBhaWRfY291bnQsICcgYXBvaW8nLCAnIGFwb2lvcycpKSwgKHJld2FyZC5tYXhpbXVtX2NvbnRyaWJ1dGlvbnMgPiAwID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgKHJld2FyZC53YWl0aW5nX3BheW1lbnRfY291bnQgPiAwID8gbSgnLm1heGltdW1fY29udHJpYnV0aW9ucy5pbl90aW1lX3RvX2NvbmZpcm0uY2xlYXJmaXgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnBlbmRpbmcuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsIGgucGx1cmFsaXplKHJld2FyZC53YWl0aW5nX3BheW1lbnRfY291bnQsICcgYXBvaW8gZW0gcHJhem8gZGUgY29uZmlybWHDp8OjbycsICcgYXBvaW9zIGVtIHByYXpvIGRlIGNvbmZpcm1hw6fDo28uJykpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSwgKGgucmV3YXJkU291bGRPdXQocmV3YXJkKSA/IG0oJy51LW1hcmdpbnRvcC0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmJhZGdlLmJhZGdlLWdvbmUuZm9udHNpemUtc21hbGxlcicsICdFc2dvdGFkYScpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSA6IG0oJy51LW1hcmdpbnRvcC0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmJhZGdlLmJhZGdlLWF0dGVudGlvbi5mb250c2l6ZS1zbWFsbGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtYm9sZCcsICdMaW1pdGFkYScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICgnICsgaC5yZXdhcmRSZW1hbmluZyhyZXdhcmQpICsgJyBkZSAnICsgcmV3YXJkLm1heGltdW1fY29udHJpYnV0aW9ucyArICcgZGlzcG9uw612ZWlzKSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSkpXG4gICAgICAgICAgICAgICAgICAgIF0gOiAnJyksXG4gICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlci51LW1hcmdpbnRvcC0yMCcsIG0udHJ1c3QoaC5zaW1wbGVGb3JtYXQoaC5zdHJpcChyZXdhcmQuZGVzY3JpcHRpb24pKSkpLFxuICAgICAgICAgICAgICAgICghXy5pc0VtcHR5KHJld2FyZC5kZWxpdmVyX2F0KSA/XG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYicsICdFc3RpbWF0aXZhIGRlIEVudHJlZ2E6ICcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaC5tb21lbnRpZnkocmV3YXJkLmRlbGl2ZXJfYXQsICdNTU0vWVlZWScpXG4gICAgICAgICAgICAgICAgICAgIF0pIDpcbiAgICAgICAgICAgICAgICAgICAgJycpLFxuICAgICAgICAgICAgICAgIChwcm9qZWN0Lm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMgJiYgIWgucmV3YXJkU291bGRPdXQocmV3YXJkKSA/IFtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5vcGVuZWRSZXdhcmQoKS5pZCA9PT0gcmV3YXJkLmlkID8gbSgnLnctZm9ybScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Zvcm0udS1tYXJnaW50b3AtMzAnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGN0cmwuc3VibWl0Q29udHJpYnV0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmRpdmlkZXIudS1tYXJnaW5ib3R0b20tMjAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdWYWxvciBkbyBhcG9pbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtMy53LWNvbC10aW55LTMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmJhY2stcmV3YXJkLWlucHV0LXJld2FyZC5wbGFjZWhvbGRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1IkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOS53LWNvbC1zbWFsbC05LnctY29sLXRpbnktOScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWlucHV0LmJhY2stcmV3YXJkLWlucHV0LXJld2FyZFt0eXBlPVwidGVsXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC5zZXRJbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmtleXVwOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuYXBwbHlNYXNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5jb250cmlidXRpb25WYWx1ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1idXR0b24uYnRuLmJ0bi1tZWRpdW1bdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIkNvbnRpbnVhciA+XCJdJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5lcnJvcigpLmxlbmd0aCA+IDAgPyBtKCcudGV4dC1lcnJvcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1leGNsYW1hdGlvbi10cmlhbmdsZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgICR7Y3RybC5lcnJvcigpfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAvLyBtKCcucHJvamVjdC1yZXdhcmQtYm94LWhvdmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgbSgnLnByb2plY3QtcmV3YXJkLWJveC1zZWxlY3QtdGV4dC51LXRleHQtY2VudGVyJywgJ1NlbGVjaW9uZSBlc3NhIHJlY29tcGVuc2EnKVxuICAgICAgICAgICAgICAgICAgICAvLyBdKVxuICAgICAgICAgICAgICAgIF0gOiAnJylcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9KSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFJld2FyZExpc3Q7XG4iLCIvKipcbiAqIHdpbmRvdy5jLlByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zIGNvbXBvbmVudFxuICogQSBQcm9qZWN0LXNob3cgcGFnZSBoZWxwZXIgdG8gc2hvdyBzdWdnZXN0ZWQgYW1vdW50cyBvZiBjb250cmlidXRpb25zXG4gKlxuICogRXhhbXBsZSBvZiB1c2U6XG4gKiB2aWV3OiAoKSA9PiB7XG4gKiAgIC4uLlxuICogICBtLmNvbXBvbmVudChjLlByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zLCB7cHJvamVjdDogcHJvamVjdH0pXG4gKiAgIC4uLlxuICogfVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5jb25zdCBwcm9qZWN0U3VnZ2VzdGVkQ29udHJpYnV0aW9ucyA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCgpO1xuXG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25VcmwgPSAoYW1vdW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYC9wcm9qZWN0cy8ke3Byb2plY3QucHJvamVjdF9pZH0vY29udHJpYnV0aW9ucy9uZXc/YW1vdW50PSR7YW1vdW50fWA7XG4gICAgICAgIH0sIHN1Z2dlc3RlZFZhbHVlcyA9IFsxMCwgMjUsIDUwLCAxMDBdO1xuXG4gICAgICAgIHJldHVybiBtKCcjc3VnZ2VzdGlvbnMnLCBfLm1hcChzdWdnZXN0ZWRWYWx1ZXMsIChhbW91bnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwcm9qZWN0ID8gbShgYVtocmVmPVwiJHtzdWdnZXN0aW9uVXJsKGFtb3VudCl9XCJdLmNhcmQtcmV3YXJkLmNhcmQtYmlnLmNhcmQtc2Vjb25kYXJ5LnUtbWFyZ2luYm90dG9tLTIwYCwgW1xuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXInLCBgUiTCoCR7YW1vdW50fWApXG4gICAgICAgICAgICBdKSA6ICcnO1xuICAgICAgICB9KSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFN1Z2dlc3RlZENvbnRyaWJ1dGlvbnM7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBwcm9qZWN0RGF0YVRhYmxlIGZyb20gJy4vcHJvamVjdC1kYXRhLXRhYmxlJztcbmltcG9ydCBwcm9qZWN0RGF0YUNoYXJ0IGZyb20gJy4vcHJvamVjdC1kYXRhLWNoYXJ0JztcblxuY29uc3QgcHJvamVjdENvbnRyaWJ1dGlvbnMgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbiA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJEYXkgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgICBsaXN0Vk0gPSBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy5jb250cmlidXRvciksXG4gICAgICAgICAgICAgIGZpbHRlclN0YXRzID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiAnZXEnXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBmaWx0ZXJWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICAgICAgICAgICAgcHJvamVjdF9pZDogJ2VxJ1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgZ3JvdXBlZENvbGxlY3Rpb24gPSAoY29sbGVjdGlvbiA9IFtdKSA9PiB7XG4gICAgICAgICAgICAgICAgICBsZXQgZ3JvdXBlZCA9IFtcbiAgICAgICAgICAgICAgICAgICAgICBbXVxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICBncm91cCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgIF8ubWFwKGNvbGxlY3Rpb24sIChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChncm91cGVkW2dyb3VwXS5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cCA9IGdyb3VwICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBlZFtncm91cF0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBncm91cGVkW2dyb3VwXS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiBncm91cGVkO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjb250cmlidXRpb25zU3RhdHMgPSBtLnByb3Aoe30pO1xuXG4gICAgICAgIGZpbHRlclZNLnByb2plY3RfaWQoYXJncy5wcm9qZWN0KCkucHJvamVjdF9pZCk7XG4gICAgICAgIGZpbHRlclN0YXRzLnByb2plY3RfaWQoYXJncy5wcm9qZWN0KCkucHJvamVjdF9pZCk7XG5cbiAgICAgICAgaWYgKCFsaXN0Vk0uY29sbGVjdGlvbigpLmxlbmd0aCkge1xuICAgICAgICAgICAgbGlzdFZNLmZpcnN0UGFnZShmaWx0ZXJWTS5wYXJhbWV0ZXJzKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vVE9ETzogQWJzdHJhY3QgdGFibGUgZmV0Y2ggYW5kIGNvbnRydWN0aW9uIGxvZ2ljIHRvIGNvbnRyaWJ1dGlvbnMtdm0gdG8gYXZvaWQgaW5zaWdodHMuanMgZHVwbGljYXRlZCBjb2RlLlxuICAgICAgICBjb25zdCBsQ29udHJpYnV0aW9uc1BlckRheSA9IHBvc3RncmVzdC5sb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyRGF5LmdldFJvd09wdGlvbnMoZmlsdGVyU3RhdHMucGFyYW1ldGVycygpKSk7XG4gICAgICAgIGxDb250cmlidXRpb25zUGVyRGF5LmxvYWQoKS50aGVuKGNvbnRyaWJ1dGlvbnNQZXJEYXkpO1xuXG4gICAgICAgIGxldCBjb250cmlidXRpb25zUGVyTG9jYXRpb25UYWJsZSA9IFtcbiAgICAgICAgICAgIFsnRXN0YWRvJywgJ0Fwb2lvcycsICdSJCBhcG9pYWRvcyAoJSBkbyB0b3RhbCknXVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBidWlsZFBlckxvY2F0aW9uVGFibGUgPSAoY29udHJpYnV0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICghXy5pc0VtcHR5KGNvbnRyaWJ1dGlvbnMpKSA/IF8ubWFwKF8uZmlyc3QoY29udHJpYnV0aW9ucykuc291cmNlLCAoY29udHJpYnV0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbiA9IFtdO1xuXG4gICAgICAgICAgICAgICAgY29sdW1uLnB1c2goY29udHJpYnV0aW9uLnN0YXRlX2Fjcm9ueW0gfHwgJ091dHJvL290aGVyJyk7XG4gICAgICAgICAgICAgICAgY29sdW1uLnB1c2goY29udHJpYnV0aW9uLnRvdGFsX2NvbnRyaWJ1dGlvbnMpO1xuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKFtjb250cmlidXRpb24udG90YWxfY29udHJpYnV0ZWQsIFsvL0FkZGluZyByb3cgd2l0aCBjdXN0b20gY29tcGFyYXRvciA9PiByZWFkIHByb2plY3QtZGF0YS10YWJsZSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICBtKGBpbnB1dFt0eXBlPVwiaGlkZGVuXCJdW3ZhbHVlPVwiJHtjb250cmlidXRpb24udG90YWxfY29udHJpYnV0ZWR9XCJgKSxcbiAgICAgICAgICAgICAgICAgICAgJ1IkICcsXG4gICAgICAgICAgICAgICAgICAgIGguZm9ybWF0TnVtYmVyKGNvbnRyaWJ1dGlvbi50b3RhbF9jb250cmlidXRlZCwgMiwgMyksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4udy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsICcgKCcgKyBjb250cmlidXRpb24udG90YWxfb25fcGVyY2VudGFnZS50b0ZpeGVkKDIpICsgJyUpJylcbiAgICAgICAgICAgICAgICBdXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlLnB1c2goY29sdW1uKTtcbiAgICAgICAgICAgIH0pIDogW107XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbiA9IHBvc3RncmVzdC5sb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyTG9jYXRpb24uZ2V0Um93T3B0aW9ucyhmaWx0ZXJTdGF0cy5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgbENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbi5sb2FkKCkudGhlbihidWlsZFBlckxvY2F0aW9uVGFibGUpO1xuXG4gICAgICAgIGNvbnN0IGxDb250cmlidXRpb25zU3RhdHMgPSBwb3N0Z3Jlc3QubG9hZGVyKG1vZGVscy5wcm9qZWN0Q29udHJpYnV0aW9yc1N0YXQuZ2V0Um93T3B0aW9ucyhmaWx0ZXJTdGF0cy5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgbENvbnRyaWJ1dGlvbnNTdGF0cy5sb2FkKCkudGhlbihkYXRhID0+IGNvbnRyaWJ1dGlvbnNTdGF0cyhfLmZpcnN0KGRhdGEpKSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpc3RWTTogbGlzdFZNLFxuICAgICAgICAgICAgZmlsdGVyVk06IGZpbHRlclZNLFxuICAgICAgICAgICAgZ3JvdXBlZENvbGxlY3Rpb246IGdyb3VwZWRDb2xsZWN0aW9uLFxuICAgICAgICAgICAgbENvbnRyaWJ1dGlvbnNTdGF0czogbENvbnRyaWJ1dGlvbnNTdGF0cyxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlOiBjb250cmlidXRpb25zUGVyTG9jYXRpb25UYWJsZSxcbiAgICAgICAgICAgIGxDb250cmlidXRpb25zUGVyTG9jYXRpb246IGxDb250cmlidXRpb25zUGVyTG9jYXRpb24sXG4gICAgICAgICAgICBjb250cmlidXRpb25zUGVyRGF5OiBjb250cmlidXRpb25zUGVyRGF5LFxuICAgICAgICAgICAgbENvbnRyaWJ1dGlvbnNQZXJEYXk6IGxDb250cmlidXRpb25zUGVyRGF5LFxuICAgICAgICAgICAgY29udHJpYnV0aW9uc1N0YXRzOiBjb250cmlidXRpb25zU3RhdHNcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBsaXN0ID0gY3RybC5saXN0Vk0sXG4gICAgICAgICAgICAgIHN0YXRzID0gY3RybC5jb250cmlidXRpb25zU3RhdHMoKSxcbiAgICAgICAgICAgICAgZ3JvdXBlZENvbGxlY3Rpb24gPSBjdHJsLmdyb3VwZWRDb2xsZWN0aW9uKGxpc3QuY29sbGVjdGlvbigpKTtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3RfY29udHJpYnV0aW9ucycsIG0oJyNjb250cmlidXRpb25zX3RvcCcsIFtcbiAgICAgICAgICAgIG0oJy5zZWN0aW9uLnctc2VjdGlvbicsXG4gICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgbSgnLnctcm93JywgY3RybC5sQ29udHJpYnV0aW9uc1N0YXRzKCkgPyBoLmxvYWRlcigpIDogIV8uaXNFbXB0eShzdGF0cykgPyBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0yMC51LXRleHQtY2VudGVyLXNtYWxsLW9ubHkudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1tZWdhanVtYm8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy50b3RhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAncGVzc29hcyBhcG9pYW0gZXN0ZSBwcm9qZXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCcuY2FyZC5jYXJkLXRlcmNpYXJ5LnUtcmFkaXVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tMjAudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Fwb2lhZG9yZXMgbm92b3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7TWF0aC5mbG9vcihzdGF0cy5uZXdfcGVyY2VudCl9JWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Fwb2lhZG9yZXMgcXVlIG51bmNhIHRpbmhhbSBhcG9pYWRvIHVtIHByb2pldG8gbm8gQ2F0YXJzZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbmJvdHRvbS0yMC53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bS53LWhpZGRlbi1zbWFsbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Fwb2lhZG9yZXMgcmVjb3JyZW50ZXMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7TWF0aC5jZWlsKHN0YXRzLnJldHVybmluZ19wZXJjZW50KX0lYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBvaWFkb3JlcyBxdWUgasOhIHRpbmhhbSBhcG9pYWRvIHVtIHByb2pldG8gbm8gQ2F0YXJzZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF0gOiAnJylcbiAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICApLFxuICAgICAgICAgICAgbSgnLmRpdmlkZXIudy1zZWN0aW9uJyksXG4gICAgICAgICAgICBtKCcuc2VjdGlvbi53LXNlY3Rpb24nLCBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tNDAudS10ZXh0LWNlbnRlcicsICdBcG9pYWRvcmVzJyksXG4gICAgICAgICAgICAgICAgbSgnLnByb2plY3QtY29udHJpYnV0aW9ucy53LWNsZWFyZml4JywgXy5tYXAoZ3JvdXBlZENvbGxlY3Rpb24sIChncm91cCwgaWR4KSA9PiBtKCcudy1yb3cnLCBfLm1hcChncm91cCwgKGNvbnRyaWJ1dGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnByb2plY3QtY29udHJpYnV0aW9uLWl0ZW0udy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhlcmUgbmV3IGNhcmRcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5jYXJkLmNhcmQtYmFja2VyLnUtbWFyZ2luYm90dG9tLTIwLnUtcmFkaXVzLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYVtocmVmPVwiL3VzZXJzLycgKyBjb250cmlidXRpb24udXNlcl9pZCArICdcIl1bc3R5bGU9XCJkaXNwbGF5OiBibG9jaztcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdDogJ3Byb2plY3RfdmlldycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Q6ICdwcm9qZWN0X2JhY2tlcl9saW5rJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxibDogY29udHJpYnV0aW9uLnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBhcmdzLnByb2plY3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLnUtbWFyZ2luYm90dG9tLTEwLnUtcm91bmRbc3JjPVwiJyArICghXy5pc0VtcHR5KGNvbnRyaWJ1dGlvbi5kYXRhLnByb2ZpbGVfaW1nX3RodW1ibmFpbCkgPyBjb250cmlidXRpb24uZGF0YS5wcm9maWxlX2ltZ190aHVtYm5haWwgOiAnL2Fzc2V0cy9jYXRhcnNlX2Jvb3RzdHJhcC91c2VyLmpwZycpICsgJ1wiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQubGluZWhlaWdoLXRpZ2h0LmxpbmstaGlkZGVuLWRhcmtbaHJlZj1cIi91c2Vycy8nICsgY29udHJpYnV0aW9uLnVzZXJfaWQgKyAnXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXQ6ICdwcm9qZWN0X3ZpZXcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0OiAncHJvamVjdF9iYWNrZXJfbGluaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYmw6IGNvbnRyaWJ1dGlvbi51c2VyX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogYXJncy5wcm9qZWN0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjb250cmlidXRpb24uZGF0YS5uYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5mb250c2l6ZS1zbWFsbGVzdC51LW1hcmdpbmJvdHRvbS0xMCcsIGAke2NvbnRyaWJ1dGlvbi5kYXRhLmNpdHl9LCR7Y29udHJpYnV0aW9uLmRhdGEuc3RhdGV9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIGNvbnRyaWJ1dGlvbi5kYXRhLnRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzKSwnIGFwb2lhZG9zIMKgfCDCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIGNvbnRyaWJ1dGlvbi5kYXRhLnRvdGFsX3B1Ymxpc2hlZF9wcm9qZWN0cyksJyBjcmlhZG8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tKCcuYnRuLWJvdHRvbS1jYXJkLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTQudy1jb2wtdGlueS0zJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIG0oXCJhLmJ0bi5idG4tbWVkaXVtLnctYnV0dG9uW2hyZWY9JyMnXVwiLCBcIlNlZ3VpbmRvXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgbShcIi53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTQudy1jb2wtdGlueS0zXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9dKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5ldyBjYXJkXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH0pKSkpLFxuICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS00MC51LW1hcmdpbnRvcC0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtcHVzaC01JywgWyFsaXN0LmlzTG9hZGluZygpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuaXNMYXN0UGFnZSgpID8gJycgOiBtKCdidXR0b24jbG9hZC1tb3JlLmJ0bi5idG4tbWVkaXVtLmJ0bi10ZXJjaWFyeScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBsaXN0Lm5leHRQYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnQ2FycmVnYXIgbWFpcycpIDogaC5sb2FkZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSkpXG4gICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICBtKCcuYmVmb3JlLWZvb3Rlci5iZy1ncmF5LnNlY3Rpb24udy1zZWN0aW9uJywgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTYwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiAnMzAwcHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9LCBbIWN0cmwubENvbnRyaWJ1dGlvbnNQZXJEYXkoKSA/IG0uY29tcG9uZW50KHByb2plY3REYXRhQ2hhcnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogY3RybC5jb250cmlidXRpb25zUGVyRGF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1IkIGFycmVjYWRhZG9zIHBvciBkaWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhS2V5OiAndG90YWxfYW1vdW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXM6IChpdGVtKSA9PiBoLm1vbWVudGlmeShpdGVtLnBhaWRfYXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbXB0eVN0YXRlOiAnQXBvaW9zIG7Do28gY29udGFiaWxpemFkb3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBoLmxvYWRlcigpXSksXG4gICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMTAuZm9udHNpemUtbGFyZ2UudS10ZXh0LWNlbnRlcicsICdEZSBvbmRlIHZlbSBvcyBhcG9pb3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICghY3RybC5sQ29udHJpYnV0aW9uc1BlckxvY2F0aW9uKCkgPyAhXy5pc0VtcHR5KF8ucmVzdChjdHJsLmNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlKSkgPyBtLmNvbXBvbmVudChwcm9qZWN0RGF0YVRhYmxlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGU6IGN0cmwuY29udHJpYnV0aW9uc1BlckxvY2F0aW9uVGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNvcnRJbmRleDogLTJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogJycgOiBoLmxvYWRlcigpKVxuICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgXSkpKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q29udHJpYnV0aW9ucztcbiIsIi8qKlxuICogd2luZG93LmMucHJvamVjdFJlcG9ydCBjb21wb25lbnRcbiAqIFJlbmRlciBwcm9qZWN0IHJlcG9ydCBmb3JtXG4gKlxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5cbmNvbnN0IHByb2plY3RSZXBvcnQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGxldCBkaXNwbGF5Rm9ybSA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICBzZW5kU3VjY2VzcyA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBzdWJtaXREaXNhYmxlZCA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICB1c2VyID0gaC5nZXRVc2VyKCksXG4gICAgICAgICAgICBlbWFpbCA9IG0ucHJvcCh1c2VyLmVtYWlsKSxcbiAgICAgICAgICAgIGRldGFpbHMgPSBtLnByb3AoJycpLFxuICAgICAgICAgICAgcmVhc29uID0gbS5wcm9wKCcnKSxcbiAgICAgICAgICAgIGwgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgY2hlY2tMb2dpbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5Rm9ybS50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvbG9naW4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZW5kUmVwb3J0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN1Ym1pdERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgICAgIGxldCBsb2FkZXJPcHRzID0gbW9kZWxzLnByb2plY3RSZXBvcnQucG9zdE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwoKSxcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogZGV0YWlscygpLFxuICAgICAgICAgICAgICAgICAgICByZWFzb246IHJlYXNvbigpICxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdF9pZDogaC5nZXRDdXJyZW50UHJvamVjdCgpLnByb2plY3RfaWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihsb2FkZXJPcHRzKTtcblxuICAgICAgICAgICAgICAgIGwubG9hZCgpLnRoZW4oc2VuZFN1Y2Nlc3ModHJ1ZSkpO1xuICAgICAgICAgICAgICAgIHN1Ym1pdERpc2FibGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGVja0xvZ2luOiBjaGVja0xvZ2luLFxuICAgICAgICAgICAgZGlzcGxheUZvcm06IGRpc3BsYXlGb3JtLFxuICAgICAgICAgICAgc2VuZFN1Y2Nlc3M6IHNlbmRTdWNjZXNzLFxuICAgICAgICAgICAgc3VibWl0RGlzYWJsZWQ6IHN1Ym1pdERpc2FibGVkLFxuICAgICAgICAgICAgc2VuZFJlcG9ydDogc2VuZFJlcG9ydCxcbiAgICAgICAgICAgIHVzZXI6IHVzZXIsXG4gICAgICAgICAgICBlbWFpbDogZW1haWwsXG4gICAgICAgICAgICBkZXRhaWxzOiBkZXRhaWxzLFxuICAgICAgICAgICAgcmVhc29uOiByZWFzb25cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBjdHJsLnVzZXI7XG4gICAgICAgIHJldHVybiBtKCcuY2FyZC5jYXJkLXRlcmNpYXJ5LnUtcmFkaXVzJyxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0yMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdFc3RlIHByb2pldG8gZGVzcmVzcGVpdGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVxcJ2h0dHA6Ly9zdXBvcnRlLmNhdGFyc2UubWUvaGMvcHQtYnIvYXJ0aWNsZXMvMjAyMzg3NjM4XFwnXVt0YXJnZXQ9XFwnX2JsYW5rXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25vc3NhcyByZWdyYXM/ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgY3RybC5zZW5kU3VjY2VzcygpID9cbiAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybScsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ09icmlnYWRvISBBIHN1YSBkZW7Dum5jaWEgZm9pIHJlY2ViaWRhLidcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICApIDpcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuYS53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnkuYnRuLWlubGluZVtocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddJyx7b25jbGljazogY3RybC5jaGVja0xvZ2lufSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdEZW51bmNpYXIgZXN0ZSBwcm9qZXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgY3RybC5kaXNwbGF5Rm9ybSgpID8gbSgnI3JlcG9ydC1mb3JtLnUtbWFyZ2ludG9wLTMwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdmb3JtJywge29uc3VibWl0OiBjdHJsLnNlbmRSZXBvcnR9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1BvciBxdWUgdm9jw6ogZXN0w6EgZGVudW5jaWFuZG8gZXN0ZSBwcm9qZXRvPydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzZWxlY3Qudy1zZWxlY3QudGV4dC1maWVsZC5wb3NpdGl2ZVtyZXF1aXJlZD1cXCdyZXF1aXJlZFxcJ10nLCB7b25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5yZWFzb24pfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTZWxlY2lvbmUgdW0gbW90aXZvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ1Zpb2xhw6fDo28gZGUgcHJvcHJpZWRhZGUgaW50ZWxlY3R1YWxcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdWaW9sYcOnw6NvIGRlIHByb3ByaWVkYWRlIGludGVsZWN0dWFsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ0NhbMO6bmlhLCBpbmrDunJpYSwgZGlmYW1hw6fDo28gb3UgZGlzY3JpbWluYcOnw6NvXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ2Fsw7puaWEsIGluasO6cmlhLCBkaWZhbWHDp8OjbyBvdSBkaXNjcmltaW5hw6fDo28nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnRXNjb3BvIGRlIHByb2pldG8gcHJvaWJpZG9cXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdFc2NvcG8gZGUgcHJvamV0byBwcm9pYmlkbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdSZWNvbXBlbnNhcyBwcm9pYmlkYXNcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSZWNvbXBlbnNhcyBwcm9pYmlkYXMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnQ2VuYXMgZGUgc2V4byBleHBsw61jaXRhcyBlIGdyYXR1aXRhc1xcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NlbmFzIGRlIHNleG8gZXhwbMOtY2l0YXMgZSBncmF0dWl0YXMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnQWJ1c28gZGUgU1BBTVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FidXNvIGRlIFNQQU0nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnT3V0cm9zXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnT3V0cm9zJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3RleHRhcmVhLnctaW5wdXQudGV4dC1maWVsZC5wb3NpdGl2ZS51LW1hcmdpbmJvdHRvbS0zMCcsIHtwbGFjZWhvbGRlcjogJ1BvciBmYXZvciwgZMOqIG1haXMgZGV0YWxoZXMgcXVlIG5vcyBhanVkZW0gYSBpZGVudGlmaWNhciBvIHByb2JsZW1hJywgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5kZXRhaWxzKX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1idXR0b24uYnRuLmJ0bi1tZWRpdW0uYnRuLWlubGluZS5idG4tZGFya1t0eXBlPVxcJ3N1Ym1pdFxcJ11bdmFsdWU9XFwnRW52aWFyIGRlbsO6bmNpYVxcJ10nLCB7ZGlzYWJsZWQ6IGN0cmwuc3VibWl0RGlzYWJsZWQoKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKSA6ICcnXVxuXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFJlcG9ydDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcHJvamVjdFJld2FyZExpc3QgZnJvbSAnLi9wcm9qZWN0LXJld2FyZC1saXN0JztcbmltcG9ydCBwcm9qZWN0UmVwb3J0IGZyb20gJy4vcHJvamVjdC1yZXBvcnQnO1xuaW1wb3J0IHByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zIGZyb20gJy4vcHJvamVjdC1zdWdnZXN0ZWQtY29udHJpYnV0aW9ucyc7XG5cbmNvbnN0IHByb2plY3RBYm91dCA9IHtcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCgpIHx8IHt9LFxuICAgICAgICAgICAgb25saW5lRGF5cyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZGlmZiA9IG1vbWVudChwcm9qZWN0LnpvbmVfb25saW5lX2RhdGUpLmRpZmYobW9tZW50KHByb2plY3Quem9uZV9leHBpcmVzX2F0KSksXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gbW9tZW50LmR1cmF0aW9uKGRpZmYpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIC1NYXRoLmNlaWwoZHVyYXRpb24uYXNEYXlzKCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgbGV0IGZ1bmRpbmdQZXJpb2QgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHByb2plY3QuaXNfcHVibGlzaGVkICYmIGguZXhpc3R5KHByb2plY3Quem9uZV9leHBpcmVzX2F0KSkgPyBtKCcuZnVuZGluZy1wZXJpb2QnLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgJ1BlcsOtb2RvIGRlIGNhbXBhbmhhJyksXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLnUtdGV4dC1jZW50ZXItc21hbGwtb25seScsIGAke2gubW9tZW50aWZ5KHByb2plY3Quem9uZV9vbmxpbmVfZGF0ZSl9IC0gJHtoLm1vbWVudGlmeShwcm9qZWN0LnpvbmVfZXhwaXJlc19hdCl9ICgke29ubGluZURheXMoKX0gZGlhcylgKVxuICAgICAgICAgICAgXSkgOiAnJztcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3QtYWJvdXQnLCBbXG4gICAgICAgICAgICBtKCcucHJvamVjdC1hYm91dC53LWNvbC53LWNvbC04Jywge1xuICAgICAgICAgICAgICAgIGNvbmZpZzogaC5VSUhlbHBlcigpXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1iYXNlJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdzdHJvbmcnLCAnTyBwcm9qZXRvJyksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2VbaXRlbXByb3A9XCJhYm91dFwiXScsIG0udHJ1c3QoaC5zZWxmT3JFbXB0eShwcm9qZWN0LmFib3V0X2h0bWwsICcuLi4nKSkpLFxuICAgICAgICAgICAgICAgIHByb2plY3QuYnVkZ2V0ID8gW1xuICAgICAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZCcsICdPcsOnYW1lbnRvJyksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtYmFzZScsIG0udHJ1c3QocHJvamVjdC5idWRnZXQpKVxuICAgICAgICAgICAgICAgIF0gOiAnJyxcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0UmVwb3J0KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgIV8uaXNFbXB0eShhcmdzLnJld2FyZERldGFpbHMoKSkgPyBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0zMCcsICdSZWNvbXBlbnNhcycpLFxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3RSZXdhcmRMaXN0LCB7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IGFyZ3MucHJvamVjdCxcbiAgICAgICAgICAgICAgICAgICAgcmV3YXJkRGV0YWlsczogYXJncy5yZXdhcmREZXRhaWxzXG4gICAgICAgICAgICAgICAgfSksIGZ1bmRpbmdQZXJpb2QoKVxuICAgICAgICAgICAgXSA6IFtcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTMwJywgJ1N1Z2VzdMO1ZXPCoGRlwqBhcG9pbycpLFxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zLCB7cHJvamVjdDogYXJncy5wcm9qZWN0fSksXG4gICAgICAgICAgICAgICAgZnVuZGluZ1BlcmlvZCgpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0QWJvdXQ7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RSZXBvcnQgZnJvbSAnLi9wcm9qZWN0LXJlcG9ydCc7XG5cbmNvbnN0IHByb2plY3RDb21tZW50cyA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICBjb25zdCBsb2FkQ29tbWVudHMgPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXNJbml0aWFsaXplZCkge3JldHVybjt9XG4gICAgICAgICAgICAgICAgaC5mYlBhcnNlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7bG9hZENvbW1lbnRzOiBsb2FkQ29tbWVudHN9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QoKTtcbiAgICAgICAgcmV0dXJuIG0oJy53LXJvdycsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC03JyxcbiAgICAgICAgICAgICAgICBtKCcuZmItY29tbWVudHNbZGF0YS1ocmVmPVwiaHR0cDovL3d3dy5jYXRhcnNlLm1lLycgKyBwcm9qZWN0LnBlcm1hbGluayArICdcIl1bZGF0YS1udW0tcG9zdHM9NTBdW2RhdGEtd2lkdGg9XCI2MTBcIl0nLCB7Y29uZmlnOiBjdHJsLmxvYWRDb21tZW50cygpfSlcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnLCBtLmNvbXBvbmVudChwcm9qZWN0UmVwb3J0KSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RDb21tZW50cztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLnBvc3RzJyk7XG5cbmNvbnN0IHByb2plY3RQb3N0cyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgbGlzdFZNID0gcG9zdGdyZXN0LnBhZ2luYXRpb25WTShtb2RlbHMucHJvamVjdFBvc3REZXRhaWwpLFxuICAgICAgICAgICAgZmlsdGVyVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiAnZXEnLFxuICAgICAgICAgICAgICAgIGlkOiAnZXEnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBmaWx0ZXJWTS5wcm9qZWN0X2lkKGFyZ3MucHJvamVjdCgpLnByb2plY3RfaWQpO1xuXG4gICAgICAgIGlmIChfLmlzTnVtYmVyKGFyZ3MucG9zdF9pZCkpIHtcbiAgICAgICAgICAgIGZpbHRlclZNLmlkKGFyZ3MucG9zdF9pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxpc3RWTS5jb2xsZWN0aW9uKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICBsaXN0Vk0uZmlyc3RQYWdlKGZpbHRlclZNLnBhcmFtZXRlcnMoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGlzdFZNOiBsaXN0Vk0sXG4gICAgICAgICAgICBmaWx0ZXJWTTogZmlsdGVyVk1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBsaXN0ID0gY3RybC5saXN0Vk0sXG4gICAgICAgICAgICBwcm9qZWN0ID0gYXJncy5wcm9qZWN0KCkgfHwge307XG5cbiAgICAgICAgcmV0dXJuIG0oJy5wcm9qZWN0LXBvc3RzLnctc2VjdGlvbicsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lci51LW1hcmdpbnRvcC0yMCcsIFtcbiAgICAgICAgICAgICAgICAocHJvamVjdC5pc19vd25lcl9vcl9hZG1pbiA/IFtcbiAgICAgICAgICAgICAgICAgICAgKCFsaXN0LmlzTG9hZGluZygpKSA/XG4gICAgICAgICAgICAgICAgICAgIChfLmlzRW1wdHkobGlzdC5jb2xsZWN0aW9uKCkpID8gbSgnLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0zMC51LW1hcmdpbnRvcC0yMCcsICdUb2RhIG5vdmlkYWRlIHB1YmxpY2FkYSBubyBDYXRhcnNlIMOpIGVudmlhZGEgZGlyZXRhbWVudGUgcGFyYSBvIGVtYWlsIGRlIHF1ZW0gasOhIGFwb2lvdSBzZXUgcHJvamV0byBlIHRhbWLDqW0gZmljYSBkaXNwb27DrXZlbCBwYXJhIHZpc3VhbGl6YcOnw6NvIG5vIHNpdGUuIFZvY8OqIHBvZGUgb3B0YXIgcG9yIGRlaXjDoS1sYSBww7pibGljYSwgb3Ugdmlzw612ZWwgc29tZW50ZSBwYXJhIHNldXMgYXBvaWFkb3JlcyBhcXVpIG5lc3RhIGFiYS4nKVxuICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5idG4uYnRuLWVkaXQuYnRuLXNtYWxsW2hyZWY9Jy9wdC9wcm9qZWN0cy8ke3Byb2plY3QucHJvamVjdF9pZH0vZWRpdCNwb3N0cyddYCwgJ0VzY3JldmVyIG5vdmlkYWRlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnKSxcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdIDogJycpLCAoXy5tYXAobGlzdC5jb2xsZWN0aW9uKCksIChwb3N0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5wb3N0JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tNjAgLnctY2xlYXJmaXgnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udGNvbG9yLXNlY29uZGFyeS51LXRleHQtY2VudGVyJywgaC5tb21lbnRpZnkocG9zdC5jcmVhdGVkX2F0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdwLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2VyLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tMzAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5saW5rLWhpZGRlbltocmVmPVwiL3Byb2plY3RzLyR7cG9zdC5wcm9qZWN0X2lkfS9wb3N0cy8ke3Bvc3QuaWR9I3Bvc3RzXCJdYCwgcG9zdC50aXRsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFfLmlzRW1wdHkocG9zdC5jb21tZW50X2h0bWwpID8gbSgnLmZvbnRzaXplLWJhc2UnLCBtLnRydXN0KHBvc3QuY29tbWVudF9odG1sKSkgOiBtKCcuZm9udHNpemUtYmFzZScsICdQb3N0IGV4Y2x1c2l2byBwYXJhIGFwb2lhZG9yZXMuJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbmJvdHRvbS02MCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEnKVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAoIV8uaXNVbmRlZmluZWQoYXJncy5wb3N0X2lkKSA/ICcnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICghbGlzdC5pc0xvYWRpbmcoKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxpc3QuY29sbGVjdGlvbigpLmxlbmd0aCA9PT0gMCAmJiBhcmdzLnByb2plY3RDb250cmlidXRpb25zKCkubGVuZ3RoID09PSAwKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFwcm9qZWN0LmlzX293bmVyX29yX2FkbWluID8gbSgnLnctY29sLnctY29sLTEwLnctY29sLXB1c2gtMScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLWJhc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnZW1wdHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4blNjb3BlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0X3VzZXJfbmFtZTogYXJncy51c2VyRGV0YWlscygpLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdF9pZDogcHJvamVjdC5wcm9qZWN0X2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG0oJy53LWNvbC53LWNvbC0yLnctY29sLXB1c2gtNScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsaXN0LmlzTGFzdFBhZ2UoKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmNvbGxlY3Rpb24oKS5sZW5ndGggPT09IDAgPyAnTmVuaHVtYSBub3ZpZGFkZS4nIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbSgnYnV0dG9uI2xvYWQtbW9yZS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBsaXN0Lm5leHRQYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdDYXJyZWdhciBtYWlzJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtcHVzaC01JywgaC5sb2FkZXIoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkpXG5cbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RQb3N0cztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBwcm9qZWN0UmV3YXJkTGlzdCBmcm9tICcuL3Byb2plY3QtcmV3YXJkLWxpc3QnO1xuaW1wb3J0IHByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zIGZyb20gJy4vcHJvamVjdC1zdWdnZXN0ZWQtY29udHJpYnV0aW9ucyc7XG5pbXBvcnQgcHJvamVjdENvbnRyaWJ1dGlvbnMgZnJvbSAnLi9wcm9qZWN0LWNvbnRyaWJ1dGlvbnMnO1xuaW1wb3J0IHByb2plY3RBYm91dCBmcm9tICcuL3Byb2plY3QtYWJvdXQnO1xuaW1wb3J0IHByb2plY3RDb21tZW50cyBmcm9tICcuL3Byb2plY3QtY29tbWVudHMnO1xuaW1wb3J0IHByb2plY3RQb3N0cyBmcm9tICcuL3Byb2plY3QtcG9zdHMnO1xuXG5jb25zdCBwcm9qZWN0TWFpbiA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IG0ucHJvcCh3aW5kb3cubG9jYXRpb24uaGFzaCksXG4gICAgICAgICAgICAgIGRpc3BsYXlUYWJDb250ZW50ID0gKHByb2plY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGNfb3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICAgIHBvc3RfaWQ6IGFyZ3MucG9zdF9pZFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNyZXdhcmRzJzogbSgnLnctY29sLnctY29sLTEyJywgbS5jb21wb25lbnQocHJvamVjdFJld2FyZExpc3QsIF8uZXh0ZW5kKHt9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZERldGFpbHM6IGFyZ3MucmV3YXJkRGV0YWlsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNfb3B0cykpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2NvbnRyaWJ1dGlvbl9zdWdnZXN0aW9ucyc6IG0uY29tcG9uZW50KHByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zLCBjX29wdHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjY29udHJpYnV0aW9ucyc6IG0uY29tcG9uZW50KHByb2plY3RDb250cmlidXRpb25zLCBjX29wdHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjYWJvdXQnOiBtLmNvbXBvbmVudChwcm9qZWN0QWJvdXQsIF8uZXh0ZW5kKHt9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZERldGFpbHM6IGFyZ3MucmV3YXJkRGV0YWlsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNfb3B0cykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjY29tbWVudHMnOiBtLmNvbXBvbmVudChwcm9qZWN0Q29tbWVudHMsIGNfb3B0cyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNwb3N0cyc6IG0uY29tcG9uZW50KHByb2plY3RQb3N0cywgXy5leHRlbmQoe30se1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0Q29udHJpYnV0aW9uczogYXJncy5wcm9qZWN0Q29udHJpYnV0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRldGFpbHM6IGFyZ3MudXNlckRldGFpbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxjX29wdHMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgaWYgKF8uaXNOdW1iZXIoYXJncy5wb3N0X2lkKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJ3Bvc3RzJztcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaGFzaCh3aW5kb3cubG9jYXRpb24uaGFzaCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChfLmlzRW1wdHkoaGFzaCgpKSB8fCBoYXNoKCkgPT09ICcjXz1fJyB8fCBoYXNoKCkgPT09ICcjcHJldmlldycpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFic1snI2Fib3V0J107XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJzW2hhc2goKV07XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgaC5yZWRyYXdIYXNoQ2hhbmdlKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3BsYXlUYWJDb250ZW50OiBkaXNwbGF5VGFiQ29udGVudCxcbiAgICAgICAgICAgIGhhc2g6IGhhc2hcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnc2VjdGlvbi5zZWN0aW9uW2l0ZW10eXBlPVwiaHR0cDovL3NjaGVtYS5vcmcvQ3JlYXRpdmVXb3JrXCJdJywgW1xuICAgICAgICAgICAgbShgJHtjdHJsLmhhc2goKSAhPT0gJyNjb250cmlidXRpb25zJyA/ICcudy1jb250YWluZXInIDogJy5hYm91dC10YWItY29udGVudCd9YCwgW1xuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIGFyZ3MucHJvamVjdCgpID8gY3RybC5kaXNwbGF5VGFiQ29udGVudChhcmdzLnByb2plY3QpIDogaC5sb2FkZXIoKSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RNYWluO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RWTSBmcm9tICcuLi92bXMvcHJvamVjdC12bSc7XG5pbXBvcnQgcmV3YXJkVk0gZnJvbSAnLi4vdm1zL3Jld2FyZC12bSc7XG5pbXBvcnQgcHJvamVjdEhlYWRlciBmcm9tICcuLi9jL3Byb2plY3QtaGVhZGVyJztcbmltcG9ydCBwcm9qZWN0VGFicyBmcm9tICcuLi9jL3Byb2plY3QtdGFicyc7XG5pbXBvcnQgcHJvamVjdE1haW4gZnJvbSAnLi4vYy9wcm9qZWN0LW1haW4nO1xuaW1wb3J0IHByb2plY3REYXNoYm9hcmRNZW51IGZyb20gJy4uL2MvcHJvamVjdC1kYXNoYm9hcmQtbWVudSc7XG5cbmNvbnN0IHByb2plY3RzU2hvdyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3Qge3Byb2plY3RfaWQsIHByb2plY3RfdXNlcl9pZH0gPSBhcmdzO1xuXG4gICAgICAgIGguYW5hbHl0aWNzLndpbmRvd1Njcm9sbCh7Y2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X3BhZ2Vfc2Nyb2xsJ30pO1xuXG4gICAgICAgIGlmIChwcm9qZWN0X2lkICYmICFfLmlzTmFOKE51bWJlcihwcm9qZWN0X2lkKSkpIHtcbiAgICAgICAgICAgIHByb2plY3RWTS5pbml0KHByb2plY3RfaWQsIHByb2plY3RfdXNlcl9pZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9qZWN0Vk0uZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcm9qZWN0Vk07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGN0cmwuY3VycmVudFByb2plY3Q7XG5cbiAgICAgICAgcmV0dXJuIG0oJy5wcm9qZWN0LXNob3cnLHtcbiAgICAgICAgICAgICAgICBjb25maWc6IGN0cmwuc2V0UHJvamVjdFBhZ2VUaXRsZSgpXG4gICAgICAgICAgICB9LFtcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0SGVhZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXG4gICAgICAgICAgICAgICAgICAgIHJld2FyZERldGFpbHM6IGN0cmwucmV3YXJkRGV0YWlscyxcbiAgICAgICAgICAgICAgICAgICAgdXNlckRldGFpbHM6IGN0cmwudXNlckRldGFpbHMsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RDb250cmlidXRpb25zOiBjdHJsLnByb2plY3RDb250cmlidXRpb25zXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdFRhYnMsIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCxcbiAgICAgICAgICAgICAgICAgICAgcmV3YXJkRGV0YWlsczogY3RybC5yZXdhcmREZXRhaWxzXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdE1haW4sIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCxcbiAgICAgICAgICAgICAgICAgICAgcG9zdF9pZDogYXJncy5wb3N0X2lkLFxuICAgICAgICAgICAgICAgICAgICByZXdhcmREZXRhaWxzOiBjdHJsLnJld2FyZERldGFpbHMsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJEZXRhaWxzOiBjdHJsLnVzZXJEZXRhaWxzLFxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0Q29udHJpYnV0aW9uczogY3RybC5wcm9qZWN0Q29udHJpYnV0aW9uc1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChwcm9qZWN0KCkgJiYgcHJvamVjdCgpLmlzX293bmVyX29yX2FkbWluID8gbS5jb21wb25lbnQocHJvamVjdERhc2hib2FyZE1lbnUsIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdFxuICAgICAgICAgICAgICAgIH0pIDogJycpXG4gICAgICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0c1Nob3c7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHVzZXJWTSBmcm9tICcuLi92bXMvdXNlci12bSc7XG5cbmNvbnN0IHVzZXJIZWFkZXIgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBhcmdzLnVzZXIsXG4gICAgICAgICAgICAgIHByb2ZpbGVJbWFnZSA9IHVzZXJWTS5kaXNwbGF5SW1hZ2UodXNlciksXG4gICAgICAgICAgICAgIGNvdmVySW1hZ2UgPSB1c2VyVk0uZGlzcGxheUNvdmVyKHVzZXIpO1xuICAgICAgICByZXR1cm4gbSgnLmhlcm8taGFsZicsIFtcbiAgICAgICAgICBtKCcudy1jb250YWluZXIuY29udGVudC1oZXJvLXByb2ZpbGUnLFxuICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LXRleHQtY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgudy1jb2wtcHVzaC0yJyxcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0yMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5hdmF0YXJfd3JhcHBlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBpbWcudGh1bWIuYmlnLnUtcm91bmRbYWx0PSdVc2VyJ11bc3JjPScke3Byb2ZpbGVJbWFnZX0nXWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0yMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS51LW1hcmdpbmJvdHRvbS00MC5mb250c2l6ZS1iYXNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgQ2hlZ291IGp1bnRvIGVtICR7aC5tb21lbnRpZnkodXNlci5jcmVhdGVkX2F0LCAnTU1NTSBbZGVdIFlZWVknKX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHVzZXIudG90YWxfY29udHJpYnV0ZWRfcHJvamVjdHMgPT0gMCA/ICdBaW5kYSBuw6NvIGFwb2lvdSBwcm9qZXRvcycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBBcG9pb3UgJHtoLnBsdXJhbGl6ZSh1c2VyLnRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzLCAnIHByb2pldG8nLCAnIHByb2pldG9zJyl9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHVzZXIudG90YWxfcHVibGlzaGVkX3Byb2plY3RzID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCBlIGrDoSBjcmlvdSAke2gucGx1cmFsaXplKHVzZXIudG90YWxfcHVibGlzaGVkX3Byb2plY3RzLCAnIHByb2pldG8nLCAnIHByb2pldG9zJyl9YCA6ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBtKCcuaGVyby1wcm9maWxlJywge3N0eWxlOiBgYmFja2dyb3VuZC1pbWFnZTp1cmwoJyR7Y292ZXJJbWFnZX0nKTtgfSlcbiAgICAgIF1cbiAgKTtcblxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJIZWFkZXI7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuY29uc3QgaW5saW5lRXJyb3IgPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcuZm9udHNpemUtc21hbGxlci50ZXh0LWVycm9yLnUtbWFyZ2luYm90dG9tLTIwLmZhLmZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlJywgbSgnc3BhbicsIGAgJHthcmdzLm1lc3NhZ2V9YCkpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlubGluZUVycm9yO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgdXNlclZNIGZyb20gJy4uL3Ztcy91c2VyLXZtJztcbmltcG9ydCBpbmxpbmVFcnJvciBmcm9tICcuL2lubGluZS1lcnJvcic7XG5pbXBvcnQgcHJvamVjdENhcmQgZnJvbSAnLi9wcm9qZWN0LWNhcmQnO1xuXG5jb25zdCB1c2VyQ3JlYXRlZCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgY3JlYXRlZFByb2plY3RzID0gbS5wcm9wKCksXG4gICAgICAgICAgICAgIHVzZXJfaWQgPSBhcmdzLnVzZXJJZCxcbiAgICAgICAgICAgICAgZXJyb3IgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgICBwYWdlcyA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnByb2plY3QpLFxuICAgICAgICAgICAgICBsb2FkZXIgPSBtLnByb3AodHJ1ZSksXG4gICAgICAgICAgICAgIGNvbnRleHRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xuICAgICAgICAgICAgICAgICAgcHJvamVjdF91c2VyX2lkOiAnZXEnLFxuICAgICAgICAgICAgICAgICAgc3RhdGU6ICdpbidcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgY29udGV4dFZNLnN0YXRlKFsnb25saW5lJywgJ3dhaXRpbmdfZnVuZHMnLCAnc3VjY2Vzc2Z1bCcsICdmYWlsZWQnXSkuXG4gICAgICAgICAgcHJvamVjdF91c2VyX2lkKHVzZXJfaWQpLm9yZGVyKHtcbiAgICAgICAgICAgIG9ubGluZV9kYXRlOiAnZGVzYydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbW9kZWxzLnByb2plY3QucGFnZVNpemUoOSk7XG4gICAgICAgIHBhZ2VzLmZpcnN0UGFnZShjb250ZXh0Vk0ucGFyYW1ldGVycygpKS50aGVuKCgpPT57XG4gICAgICAgICAgICBsb2FkZXIoZmFsc2UpO1xuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIGVycm9yKHRydWUpO1xuICAgICAgICAgIGxvYWRlcihmYWxzZSk7XG4gICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb2plY3RzOiBwYWdlcyxcbiAgICAgICAgICAgIGxvYWRlcjogbG9hZGVyLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgbGV0IHByb2plY3RzX2NvbGxlY3Rpb24gPSBjdHJsLnByb2plY3RzLmNvbGxlY3Rpb24oKTtcblxuICAgICAgICByZXR1cm4gbSgnLmNvbnRlbnRbaWQ9XFwnY3JlYXRlZC10YWJcXCddJyxcbiAgICAgICAgICAgICAgICAgIChjdHJsLmVycm9yKCkgPyBtLmNvbXBvbmVudChpbmxpbmVFcnJvciwge21lc3NhZ2U6ICdFcnJvIGFvIGNhcnJlZ2FyIG9zIHByb2pldG9zLid9KSA6ICFjdHJsLmxvYWRlcigpID9cbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICghXy5pc0VtcHR5KHByb2plY3RzX2NvbGxlY3Rpb24pID8gXy5tYXAocHJvamVjdHNfY29sbGVjdGlvbiwgKHByb2plY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQocHJvamVjdENhcmQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ3VzZXJfY29udHJpYnV0ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dGcmllbmRzOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9KSA6XG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW50b3AtMzAudS10ZXh0LWNlbnRlci53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdPIHF1ZSB2b2PDqiBlc3TDoSBlc3BlcmFuZG8gcGFyYSB0aXJhciBzZXUgcHJvamV0byBkbyBwYXBlbCBhcXVpIG5vIENhdGFyc2U/JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmJ0bi5idG4tbGFyZ2VbaHJlZj1cXCcvc3RhcnRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbWVjZSBhZ29yYSEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKSxcblxuICAgICAgICAgICAgICAgICAgKCFfLmlzRW1wdHkocHJvamVjdHNfY29sbGVjdGlvbikgP1xuICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwLnUtbWFyZ2ludG9wLTMwJywgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXB1c2gtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5wcm9qZWN0cy5pc0xhc3RQYWdlKCkgPyAnJyA6IG0oJ2J1dHRvbiNsb2FkLW1vcmUuYnRuLmJ0bi1tZWRpdW0uYnRuLXRlcmNpYXJ5Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC5wcm9qZWN0cy5uZXh0UGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnQ2FycmVnYXIgbWFpcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgIF0pIDogJycpXG4gICAgICAgICAgICAgICAgXSA6IGgubG9hZGVyKCkpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJDcmVhdGVkO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgdXNlclZNIGZyb20gJy4uL3Ztcy91c2VyLXZtJztcbmltcG9ydCBwcm9qZWN0Q2FyZCBmcm9tICcuL3Byb2plY3QtY2FyZCc7XG5pbXBvcnQgaW5saW5lRXJyb3IgZnJvbSAnLi9pbmxpbmUtZXJyb3InO1xuXG5jb25zdCB1c2VyQ29udHJpYnV0ZWQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGVkUHJvamVjdHMgPSBtLnByb3AoKSxcbiAgICAgICAgICAgICAgdXNlcl9pZCA9IGFyZ3MudXNlcklkLFxuICAgICAgICAgICAgICBwYWdlcyA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnByb2plY3QpLFxuICAgICAgICAgICAgICBlcnJvciA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICAgIGxvYWRlciA9IG0ucHJvcCh0cnVlKSxcbiAgICAgICAgICAgICAgY29udGV4dFZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiAnaW4nXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHVzZXJWTS5nZXRQdWJsaWNVc2VyQ29udHJpYnV0ZWRQcm9qZWN0cyh1c2VyX2lkLCBudWxsKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjb250cmlidXRlZFByb2plY3RzKGRhdGEpO1xuICAgICAgICAgICAgaWYoIV8uaXNFbXB0eShjb250cmlidXRlZFByb2plY3RzKCkpKXtcbiAgICAgICAgICAgICAgICBjb250ZXh0Vk0ucHJvamVjdF9pZChfLnBsdWNrKGNvbnRyaWJ1dGVkUHJvamVjdHMoKSwgJ3Byb2plY3RfaWQnKSkub3JkZXIoe1xuICAgICAgICAgICAgICAgICAgb25saW5lX2RhdGU6ICdkZXNjJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbW9kZWxzLnByb2plY3QucGFnZVNpemUoOSk7XG4gICAgICAgICAgICAgICAgcGFnZXMuZmlyc3RQYWdlKGNvbnRleHRWTS5wYXJhbWV0ZXJzKCkpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsb2FkZXIoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBsb2FkZXIoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgIGVycm9yKHRydWUpO1xuICAgICAgICAgICAgICAgIGxvYWRlcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcm9qZWN0czogcGFnZXMsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICBsb2FkZXI6IGxvYWRlclxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGxldCBwcm9qZWN0c19jb2xsZWN0aW9uID0gY3RybC5wcm9qZWN0cy5jb2xsZWN0aW9uKCk7XG4gICAgICAgIHJldHVybiAoY3RybC5lcnJvcigpID8gbS5jb21wb25lbnQoaW5saW5lRXJyb3IsIHttZXNzYWdlOiAnRXJybyBhbyBjYXJyZWdhciBvcyBwcm9qZXRvcy4nfSkgOiBjdHJsLmxvYWRlcigpID8gaC5sb2FkZXIoKSA6IG0oJy5jb250ZW50W2lkPVxcJ2NvbnRyaWJ1dGVkLXRhYlxcJ10nLFxuICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgKCFfLmlzRW1wdHkocHJvamVjdHNfY29sbGVjdGlvbikgPyBfLm1hcChwcm9qZWN0c19jb2xsZWN0aW9uLCAocHJvamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChwcm9qZWN0Q2FyZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAndXNlcl9jb250cmlidXRlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0ZyaWVuZHM6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pIDpcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbnRvcC0zMC51LXRleHQtY2VudGVyLnctcm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ09yYSwgb3JhLi4uIHZvY8OqIGFpbmRhIG7Do28gYXBvaW91IG5lbmh1bSBwcm9qZXRvIG5vIENhdGFyc2UhJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmJ0bi5idG4tbGFyZ2VbaHJlZj1cXCcvZXhwbG9yZVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUXVlIHRhbCBhcG9pYXIgYWdvcmE/J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICksXG5cbiAgICAgICAgICAgICAgICAgICghXy5pc0VtcHR5KHByb2plY3RzX2NvbGxlY3Rpb24pID9cbiAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS00MC51LW1hcmdpbnRvcC0zMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1wdXNoLTUnLCBbIWN0cmwucHJvamVjdHMuaXNMb2FkaW5nKCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnByb2plY3RzLmlzTGFzdFBhZ2UoKSA/ICcnIDogbSgnYnV0dG9uI2xvYWQtbW9yZS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnByb2plY3RzLm5leHRQYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdDYXJyZWdhciBtYWlzJykgOiBoLmxvYWRlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICBdKSA6ICcnKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJDb250cmlidXRlZDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCB1c2VyVk0gZnJvbSAnLi4vdm1zL3VzZXItdm0nO1xuXG5jb25zdCB1c2VyQ2FyZCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgdXNlckRldGFpbHMgPSBtLnByb3Aoe30pLFxuICAgICAgICAgICAgdXNlcl9pZCA9IGFyZ3MudXNlcklkO1xuXG4gICAgICAgIHVzZXJWTS5mZXRjaFVzZXIodXNlcl9pZCwgdHJ1ZSwgdXNlckRldGFpbHMpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1c2VyRGV0YWlsczogdXNlckRldGFpbHNcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCkge1xuICAgICAgICBjb25zdCB1c2VyID0gY3RybC51c2VyRGV0YWlscygpLFxuICAgICAgICAgICAgICBwcm9maWxlSW1hZ2UgPSB1c2VyVk0uZGlzcGxheUltYWdlKHVzZXIpO1xuICAgICAgICByZXR1cm4gbSgnI3VzZXItY2FyZCcsIG0oJy5jYXJkLmNhcmQtdXNlci51LXJhZGl1cy51LW1hcmdpbmJvdHRvbS0zMFtpdGVtcHJvcD1cXCdhdXRob3JcXCddJyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LmNvbC1zbWFsbC00LnctY29sLXRpbnktNC53LWNsZWFyZml4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBpbWcudGh1bWIudS1yb3VuZFtpdGVtcHJvcD1cXCdpbWFnZVxcJ11bc3JjPVxcJyR7cHJvZmlsZUltYWdlfVxcJ11bd2lkdGg9XFwnMTAwXFwnXWApXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgudy1jb2wtc21hbGwtOC53LWNvbC10aW55LTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQubGluZWhlaWdodC10aWdodGVyW2l0ZW1wcm9wPVxcJ25hbWVcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW5baHJlZj1cIi91c2Vycy8nICsgdXNlci5pZCArICdcIl0nLCB1c2VyLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3NlcltpdGVtcHJvcD1cXCdhZGRyZXNzXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmFkZHJlc3NfY2l0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7aC5wbHVyYWxpemUodXNlci50b3RhbF9wdWJsaXNoZWRfcHJvamVjdHMsICcgcHJvamV0bycsICcgcHJvamV0b3MnKX0gY3JpYWRvc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBhcG9pb3UgJHtoLnBsdXJhbGl6ZSh1c2VyLnRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzLCAnIHByb2pldG8nLCAnIHByb2pldG9zJyl9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBtKCcucHJvamVjdC1hdXRob3ItY29udGFjdHMnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ3VsLnctbGlzdC11bnN0eWxlZC5mb250c2l6ZS1zbWFsbGVyLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAoIV8uaXNFbXB0eSh1c2VyLmZhY2Vib29rX2xpbmspID8gbSgnbGknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWhpZGRlbltpdGVtcHJvcD1cInVybFwiXVtocmVmPVwiJyArIHVzZXIuZmFjZWJvb2tfbGluayArICdcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJywgJ1BlcmZpbCBubyBGYWNlYm9vaycpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSwgKCFfLmlzRW1wdHkodXNlci50d2l0dGVyX3VzZXJuYW1lKSA/IG0oJ2xpJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW5baXRlbXByb3A9XCJ1cmxcIl1baHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vJyArIHVzZXIudHdpdHRlcl91c2VybmFtZSArICdcIl1bdGFyZ2V0PVwiX2JsYW5rXCJdJywgJ1BlcmZpbCBubyBUd2l0dGVyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAodXNlci5saW5rcywgKGxpbmspID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnbGknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW5baXRlbXByb3A9XCJ1cmxcIl1baHJlZj1cIicgKyBsaW5rICsgJ1wiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLCBsaW5rKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksICghXy5pc0VtcHR5KHVzZXIuZW1haWwpID8gbSgnYS5idG4uYnRuLW1lZGl1bS5idG4tbWVzc2FnZVtocmVmPVwibWFpbHRvOicgKyB1c2VyLmVtYWlsICsgJ1wiXVtpdGVtcHJvcD1cImVtYWlsXCJdW3RhcmdldD1cIl9ibGFua1wiXScsICdFbnZpYXIgbWVuc2FnZW0nKSA6ICcnKVxuICAgICAgICAgICAgXVxuICAgICAgICApKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VyQ2FyZDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgdXNlckNhcmQgZnJvbSAnLi4vYy91c2VyLWNhcmQnO1xuaW1wb3J0IHVzZXJWTSBmcm9tICcuLi92bXMvdXNlci12bSc7XG5pbXBvcnQgaW5saW5lRXJyb3IgZnJvbSAnLi9pbmxpbmUtZXJyb3InO1xuXG5jb25zdCB1c2VyQWJvdXQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IHVzZXJEZXRhaWxzID0gbS5wcm9wKHt9KSxcbiAgICAgICAgICAgICAgbG9hZGVyID0gbS5wcm9wKHRydWUpLFxuICAgICAgICAgICAgICBlcnJvciA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICAgIHVzZXJfaWQgPSBhcmdzLnVzZXJJZDtcblxuICAgICAgICB1c2VyVk0uZmV0Y2hVc2VyKHVzZXJfaWQsIHRydWUsIHVzZXJEZXRhaWxzKS50aGVuKCgpPT57XG4gICAgICAgICAgbG9hZGVyKGZhbHNlKTtcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBlcnJvcih0cnVlKTtcbiAgICAgICAgICAgICAgICBsb2FkZXIoZmFsc2UpO1xuICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlckRldGFpbHM6IHVzZXJEZXRhaWxzLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgbG9hZGVyOiBsb2FkZXJcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCB1c2VyID0gY3RybC51c2VyRGV0YWlscygpO1xuICAgICAgICByZXR1cm4gKCBjdHJsLmVycm9yKCkgPyBtLmNvbXBvbmVudChpbmxpbmVFcnJvciwge21lc3NhZ2U6ICdFcnJvIGFvIGNhcnJlZ2FyIGRhZG9zLid9KSA6IGN0cmwubG9hZGVyKCkgPyBoLmxvYWRlcigpIDogIG0oJy5jb250ZW50W2lkPVxcJ2Fib3V0LXRhYlxcJ10nLFxuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyW2lkPVxcJ2Fib3V0LWNvbnRlbnRcXCddJyxcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLCB1c2VyLmFib3V0X2h0bWwgPyBtLnRydXN0KHVzZXIuYWJvdXRfaHRtbCkgOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHVzZXIuaWQgPyBtLmNvbXBvbmVudCh1c2VyQ2FyZCwge3VzZXJJZDogdXNlci5pZH0pIDogaC5sb2FkZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICkpO1xuXG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlckFib3V0O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHVzZXJWTSBmcm9tICcuLi92bXMvdXNlci12bSc7XG5pbXBvcnQgdXNlckhlYWRlciBmcm9tICcuLi9jL3VzZXItaGVhZGVyJztcbmltcG9ydCB1c2VyQ3JlYXRlZCBmcm9tICcuLi9jL3VzZXItY3JlYXRlZCc7XG5pbXBvcnQgdXNlckNvbnRyaWJ1dGVkIGZyb20gJy4uL2MvdXNlci1jb250cmlidXRlZCc7XG5pbXBvcnQgdXNlckFib3V0IGZyb20gJy4uL2MvdXNlci1hYm91dCc7XG5cbmNvbnN0IHVzZXJzU2hvdyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgdXNlckRldGFpbHMgPSBtLnByb3Aoe30pLFxuICAgICAgICAgICAgdXNlcl9pZCA9IGFyZ3MudXNlcl9pZC5zcGxpdCgnLScpWzBdLFxuICAgICAgICAgICAgaGFzaCA9IG0ucHJvcCh3aW5kb3cubG9jYXRpb24uaGFzaCksXG4gICAgICAgICAgICBkaXNwbGF5VGFiQ29udGVudCA9ICh1c2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCB0YWJzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICcjY3JlYXRlZCc6IG0uY29tcG9uZW50KHVzZXJDcmVhdGVkLCB7dXNlcklkOiB1c2VyLmlkfSksXG4gICAgICAgICAgICAgICAgICAgICAgJyNjb250cmlidXRlZCc6IG0uY29tcG9uZW50KHVzZXJDb250cmlidXRlZCwge3VzZXJJZDogdXNlci5pZH0pLFxuICAgICAgICAgICAgICAgICAgICAgICcjYWJvdXQnOiBtLmNvbXBvbmVudCh1c2VyQWJvdXQsIHt1c2VySWQ6IHVzZXIuaWR9KVxuICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgaGFzaCh3aW5kb3cubG9jYXRpb24uaGFzaCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChfLmlzRW1wdHkoaGFzaCgpKSB8fCBoYXNoKCkgPT09ICcjXz1fJykge1xuICAgICAgICAgICAgICAgICAgICBpZih1c2VyLnRvdGFsX3B1Ymxpc2hlZF9wcm9qZWN0cyA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgIGhhc2goJyNjcmVhdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYnNbJyNjcmVhdGVkJ107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZih1c2VyLnRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgaGFzaCgnI2NvbnRyaWJ1dGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYnNbJyNjb250cmlidXRlZCddO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgaGFzaCgnI2Fib3V0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYnNbJyNhYm91dCddO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJzW2hhc2goKV07XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgaC5yZWRyYXdIYXNoQ2hhbmdlKCk7XG5cbiAgICAgICAgdXNlclZNLmZldGNoVXNlcih1c2VyX2lkLCB0cnVlLCB1c2VyRGV0YWlscyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3BsYXlUYWJDb250ZW50OiBkaXNwbGF5VGFiQ29udGVudCxcbiAgICAgICAgICAgIGhhc2g6IGhhc2gsXG4gICAgICAgICAgICB1c2VyRGV0YWlsczogdXNlckRldGFpbHNcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCB1c2VyID0gY3RybC51c2VyRGV0YWlscygpO1xuXG4gICAgICAgIHJldHVybiBtKCdkaXYnLCBbXG4gICAgICAgICAgbS5jb21wb25lbnQodXNlckhlYWRlciwge3VzZXI6IHVzZXJ9KSxcblxuICAgICAgICAgIG0oJ25hdi5wcm9qZWN0LW5hdi51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTMwLnByb2ZpbGUnLCB7c3R5bGU6IHsnei1pbmRleCc6ICcxMCcsICdwb3NpdGlvbic6ICdyZWxhdGl2ZSd9fSxcbiAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyW2RhdGEtYW5jaG9yPVxcJ2NyZWF0ZWRcXCddJyxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgKCFfLmlzRW1wdHkodXNlcikgPyBcbiAgICAgICAgICAgICAgICAgICAgICh1c2VyLmlzX293bmVyX29yX2FkbWluID9cbiAgICAgICAgICAgICAgICAgICAgICBtKGBhLmRhc2hib2FyZC1uYXYtbGluay5kYXNoYm9hcmRbaHJlZj1cXCcvcHQvdXNlcnMvJHt1c2VyLmlkfS9lZGl0XFwnXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtY29nJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgRWRpdGFyIHBlcmZpbCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICkgOicnKSA6IGgubG9hZGVyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgIG0oYGFbZGF0YS10YXJnZXQ9XFwnI2NvbnRyaWJ1dGVkLXRhYlxcJ11baHJlZj1cXCcjY29udHJpYnV0ZWRcXCddW2lkPVxcJ2NvbnRyaWJ1dGVkX2xpbmtcXCddW2NsYXNzPVxcJ2Rhc2hib2FyZC1uYXYtbGluayAkeyhjdHJsLmhhc2goKSA9PT0gJyNjb250cmlidXRlZCcgPyAnc2VsZWN0ZWQnIDogJycpfVxcJ11gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQXBvaWFkb3MgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5iYWRnZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlci50b3RhbF9jb250cmlidXRlZF9wcm9qZWN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBtKGBhW2RhdGEtdGFyZ2V0PVxcJyNjcmVhdGVkLXRhYlxcJ11baHJlZj1cXCcjY3JlYXRlZFxcJ11baWQ9XFwnY3JlYXRlZF9saW5rXFwnXVtjbGFzcz1cXCdkYXNoYm9hcmQtbmF2LWxpbmsgJHsoY3RybC5oYXNoKCkgPT09ICcjY3JlYXRlZCcgPyAnc2VsZWN0ZWQnIDogJycpfVxcJ11gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ3JpYWRvcyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmJhZGdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLnRvdGFsX3B1Ymxpc2hlZF9wcm9qZWN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBtKGBhW2RhdGEtdGFyZ2V0PVxcJyNhYm91dC10YWJcXCddW2hyZWY9XFwnI2Fib3V0XFwnXVtpZD1cXCdhYm91dF9saW5rXFwnXVtjbGFzcz1cXCdkYXNoYm9hcmQtbmF2LWxpbmsgJHsoY3RybC5oYXNoKCkgPT09ICcjYWJvdXQnID8gJ3NlbGVjdGVkJyA6ICcnKX1cXCddYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NvYnJlJ1xuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICksXG5cbiAgICAgICAgICBtKCdzZWN0aW9uLnNlY3Rpb24nLFxuICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLFxuICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgdXNlci5pZCA/IGN0cmwuZGlzcGxheVRhYkNvbnRlbnQodXNlcikgOiBoLmxvYWRlcigpKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgXSk7XG5cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2Vyc1Nob3c7XG4iLCJpbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgdXNlcnNWTSBmcm9tICcuL3VzZXItdm0nO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuY29udHJpYnV0aW9ucy5lZGl0LmVycm9ycycpO1xuXG5jb25zdCBwYXltZW50Vk0gPSAobW9kZSA9ICdhb24nKSA9PiB7XG4gICAgY29uc3QgcGFnYXJtZSA9IG0ucHJvcCh7fSksXG4gICAgICAgIHN1Ym1pc3Npb25FcnJvciA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgIGlzTG9hZGluZyA9IG0ucHJvcChmYWxzZSk7XG5cbiAgICBjb25zdCBzZXRDc3JmVG9rZW4gPSAoeGhyKSA9PiB7XG4gICAgICAgIGlmIChoLmF1dGhlbnRpY2l0eVRva2VuKCkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLUNTUkYtVG9rZW4nLCBoLmF1dGhlbnRpY2l0eVRva2VuKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9O1xuXG4gICAgY29uc3QgZmllbGRzID0ge1xuICAgICAgICBjb21wbGV0ZU5hbWU6IG0ucHJvcCgnJyksXG4gICAgICAgIGVtYWlsOiBtLnByb3AoJycpLFxuICAgICAgICBhbm9ueW1vdXM6IG0ucHJvcCgpLFxuICAgICAgICBjb3VudHJpZXM6IG0ucHJvcCgpLFxuICAgICAgICB1c2VyQ291bnRyeUlkOiBtLnByb3AoKSxcbiAgICAgICAgemlwQ29kZTogbS5wcm9wKCcnKSxcbiAgICAgICAgc3RyZWV0OiBtLnByb3AoJycpLFxuICAgICAgICBudW1iZXI6IG0ucHJvcCgnJyksXG4gICAgICAgIGFkZHJlc3NDb21wbGVtZW50OiBtLnByb3AoJycpLFxuICAgICAgICBuZWlnaGJvdXJob29kOiBtLnByb3AoJycpLFxuICAgICAgICBjaXR5OiBtLnByb3AoJycpLFxuICAgICAgICBzdGF0ZXM6IG0ucHJvcChbXSksXG4gICAgICAgIHVzZXJTdGF0ZTogbS5wcm9wKCksXG4gICAgICAgIG93bmVyRG9jdW1lbnQ6IG0ucHJvcCgnJyksXG4gICAgICAgIHBob25lOiBtLnByb3AoJycpLFxuICAgICAgICBlcnJvcnM6IG0ucHJvcChbXSlcbiAgICB9O1xuXG4gICAgY29uc3QgY3JlZGl0Q2FyZEZpZWxkcyA9IHtcbiAgICAgICAgbmFtZTogbS5wcm9wKCcnKSxcbiAgICAgICAgbnVtYmVyOiBtLnByb3AoJycpLFxuICAgICAgICBleHBNb250aDogbS5wcm9wKCcnKSxcbiAgICAgICAgZXhwWWVhcjogbS5wcm9wKCcnKSxcbiAgICAgICAgc2F2ZTogbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgY3Z2OiBtLnByb3AoJycpLFxuICAgICAgICBlcnJvcnM6IG0ucHJvcChbXSlcbiAgICB9O1xuXG4gICAgY29uc3QgZmFxID0gSTE4bi50cmFuc2xhdGlvbnNbSTE4bi5jdXJyZW50TG9jYWxlKCldLnByb2plY3RzLmZhcVttb2RlXSxcbiAgICAgICAgY3VycmVudFVzZXIgPSBoLmdldFVzZXIoKSxcbiAgICAgICAgY291bnRyaWVzTG9hZGVyID0gcG9zdGdyZXN0LmxvYWRlcihtb2RlbHMuY291bnRyeS5nZXRQYWdlT3B0aW9ucygpKSxcbiAgICAgICAgc3RhdGVzTG9hZGVyID0gcG9zdGdyZXN0LmxvYWRlcihtb2RlbHMuc3RhdGUuZ2V0UGFnZU9wdGlvbnMoKSk7XG5cbiAgICBjb25zdCBwb3B1bGF0ZUZvcm0gPSAoZmV0Y2hlZERhdGEpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IF8uZmlyc3QoZmV0Y2hlZERhdGEpLFxuICAgICAgICAgICAgY291bnRyeUlkID0gZGF0YS5hZGRyZXNzLmNvdW50cnlfaWQgfHwgXy5maW5kV2hlcmUoZmllbGRzLmNvdW50cmllcygpLCB7bmFtZTogJ0JyYXNpbCd9KS5pZDtcblxuICAgICAgICBmaWVsZHMuY29tcGxldGVOYW1lKGRhdGEubmFtZSk7XG4gICAgICAgIGZpZWxkcy5lbWFpbChkYXRhLmVtYWlsKTtcbiAgICAgICAgZmllbGRzLmNpdHkoZGF0YS5hZGRyZXNzLmNpdHkpO1xuICAgICAgICBmaWVsZHMuemlwQ29kZShkYXRhLmFkZHJlc3MuemlwY29kZSk7XG4gICAgICAgIGZpZWxkcy5zdHJlZXQoZGF0YS5hZGRyZXNzLnN0cmVldCk7XG4gICAgICAgIGZpZWxkcy5udW1iZXIoZGF0YS5hZGRyZXNzLm51bWJlcik7XG4gICAgICAgIGZpZWxkcy5hZGRyZXNzQ29tcGxlbWVudChkYXRhLmFkZHJlc3MuY29tcGxlbWVudCk7XG4gICAgICAgIGZpZWxkcy51c2VyU3RhdGUoZGF0YS5hZGRyZXNzLnN0YXRlKTtcbiAgICAgICAgZmllbGRzLnVzZXJDb3VudHJ5SWQoY291bnRyeUlkKTtcbiAgICAgICAgZmllbGRzLm93bmVyRG9jdW1lbnQoZGF0YS5vd25lcl9kb2N1bWVudCk7XG4gICAgICAgIGZpZWxkcy5waG9uZShkYXRhLmFkZHJlc3MucGhvbmVudW1iZXIpO1xuICAgICAgICBmaWVsZHMubmVpZ2hib3VyaG9vZChkYXRhLmFkZHJlc3MubmVpZ2hib3VyaG9vZCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGV4cE1vbnRoT3B0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFtudWxsLCAnTcOqcyddLFxuICAgICAgICAgICAgWzEsICcwMSAtIEphbmVpcm8nXSxcbiAgICAgICAgICAgIFsyLCAnMDIgLSBGZXZlcmVpcm8nXSxcbiAgICAgICAgICAgIFszLCAnMDMgLSBNYXLDp28nXSxcbiAgICAgICAgICAgIFs0LCAnMDQgLSBBYnJpbCddLFxuICAgICAgICAgICAgWzUsICcwNSAtIE1haW8nXSxcbiAgICAgICAgICAgIFs2LCAnMDYgLSBKdW5obyddLFxuICAgICAgICAgICAgWzcsICcwNyAtIEp1bGhvJ10sXG4gICAgICAgICAgICBbOCwgJzA4IC0gQWdvc3RvJ10sXG4gICAgICAgICAgICBbOSwgJzA5IC0gU2V0ZW1icm8nXSxcbiAgICAgICAgICAgIFsxMCwgJzEwIC0gT3V0dWJybyddLFxuICAgICAgICAgICAgWzExLCAnMTEgLSBOb3ZlbWJybyddLFxuICAgICAgICAgICAgWzEyLCAnMTIgLSBEZXplbWJybyddXG4gICAgICAgIF07XG4gICAgfTtcblxuICAgIGNvbnN0IGV4cFllYXJPcHRpb25zID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50WWVhciA9IG1vbWVudCgpLnllYXIoKTtcbiAgICAgICAgbGV0IHllYXJzT3B0aW9ucyA9IFsnQW5vJ107XG4gICAgICAgIGZvciAobGV0IGkgPSBjdXJyZW50WWVhcjsgaSA8PSBjdXJyZW50WWVhciArIDI1OyBpKyspIHtcbiAgICAgICAgICAgIHllYXJzT3B0aW9ucy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5ZWFyc09wdGlvbnM7XG4gICAgfTtcblxuICAgIGNvbnN0IGlzSW50ZXJuYXRpb25hbCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICFfLmlzRW1wdHkoZmllbGRzLmNvdW50cmllcygpKSA/IGZpZWxkcy51c2VyQ291bnRyeUlkKCkgIT0gXy5maW5kV2hlcmUoZmllbGRzLmNvdW50cmllcygpLCB7bmFtZTogJ0JyYXNpbCd9KS5pZCA6IGZhbHNlO1xuICAgIH07XG5cbiAgICBjb25zdCBjaGVja0VtcHR5RmllbGRzID0gKGNoZWNrZWRGaWVsZHMpID0+IHtcbiAgICAgICAgcmV0dXJuIF8ubWFwKGNoZWNrZWRGaWVsZHMsIChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsID0gZmllbGRzW2ZpZWxkXSgpO1xuXG4gICAgICAgICAgICBpZiAoIWguZXhpc3R5KHZhbCkgfHwgXy5pc0VtcHR5KFN0cmluZyh2YWwpLnRyaW0oKSkpIHtcbiAgICAgICAgICAgICAgICBmaWVsZHMuZXJyb3JzKCkucHVzaCh7ZmllbGQ6IGZpZWxkLCBtZXNzYWdlOiAnTyBjYW1wbyBuw6NvIHBvZGUgc2VyIHZhemlvLid9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNoZWNrRW1haWwgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzVmFsaWQgPSBoLnZhbGlkYXRlRW1haWwoZmllbGRzLmVtYWlsKCkpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZCl7XG4gICAgICAgICAgICBmaWVsZHMuZXJyb3JzKCkucHVzaCh7ZmllbGQ6ICdlbWFpbCcsIG1lc3NhZ2U6ICdFLW1haWwgaW52w6FsaWRvLid9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBjaGVja0RvY3VtZW50ID0gKCkgPT4ge1xuICAgICAgICAvL1RPRE86IGFsc28gdmFsaWRhdGUgQ25walxuICAgICAgICBjb25zdCBpc1ZhbGlkID0gaC52YWxpZGF0ZUNwZihmaWVsZHMub3duZXJEb2N1bWVudCgpLnJlcGxhY2UoL1tcXC58XFwtXSovZywnJykpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgZmllbGRzLmVycm9ycygpLnB1c2goe2ZpZWxkOiAnb3duZXJEb2N1bWVudCcsIG1lc3NhZ2U6ICdDUEYgaW52w6FsaWRvLid9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBjaGVja1VzZXJTdGF0ZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKF8uaXNFbXB0eShmaWVsZHMudXNlclN0YXRlKCkpIHx8IGZpZWxkcy51c2VyU3RhdGUoKSA9PT0gJ251bGwnKSB7XG4gICAgICAgICAgICBmaWVsZHMuZXJyb3JzKCkucHVzaCh7ZmllbGQ6ICd1c2VyU3RhdGUnLCBtZXNzYWdlOiAnRXN0YWRvIMOpIG9icmlnYXTDs3Jpby4nfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB2YWxpZGF0ZSA9ICgpID0+IHtcbiAgICAgICAgZmllbGRzLmVycm9ycyhbXSk7XG5cbiAgICAgICAgY2hlY2tFbXB0eUZpZWxkcyhbJ2NvbXBsZXRlTmFtZScsICdzdHJlZXQnLCAnbnVtYmVyJywgJ2NpdHknLCAndXNlckNvdW50cnlJZCddKTtcblxuICAgICAgICBjaGVja0VtYWlsKCk7XG5cbiAgICAgICAgaWYgKCFpc0ludGVybmF0aW9uYWwoKSl7XG4gICAgICAgICAgICBjaGVja0VtcHR5RmllbGRzKFsncGhvbmUnLCAnbmVpZ2hib3VyaG9vZCcsICd6aXBDb2RlJywgJ293bmVyRG9jdW1lbnQnLCAndXNlclN0YXRlJ10pO1xuICAgICAgICAgICAgY2hlY2tVc2VyU3RhdGUoKTtcbiAgICAgICAgICAgIGNoZWNrRG9jdW1lbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfLmlzRW1wdHkoZmllbGRzLmVycm9ycygpKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0U2xpcFBheW1lbnREYXRlID0gKGNvbnRyaWJ1dGlvbl9pZCkgPT4ge1xuICAgICAgICBjb25zdCBwYXltZW50RGF0ZSA9IG0ucHJvcCgpO1xuXG4gICAgICAgIG0ucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgY29uZmlnOiBzZXRDc3JmVG9rZW4sXG4gICAgICAgICAgICB1cmw6IGAvcGF5bWVudC9wYWdhcm1lLyR7Y29udHJpYnV0aW9uX2lkfS9zbGlwX2RhdGFgXG4gICAgICAgIH0pLnRoZW4ocGF5bWVudERhdGUpO1xuXG4gICAgICAgIHJldHVybiBwYXltZW50RGF0ZTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc2VuZFNsaXBQYXltZW50ID0gKGNvbnRyaWJ1dGlvbl9pZCwgcHJvamVjdF9pZCwgZXJyb3IsIGxvYWRpbmcsIGNvbXBsZXRlZCkgPT4ge1xuICAgICAgICBtLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICB1cmw6IGAvcGF5bWVudC9wYWdhcm1lLyR7Y29udHJpYnV0aW9uX2lkfS9wYXlfc2xpcC5qc29uYCxcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbidcbiAgICAgICAgfSkudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgIGlmIChkYXRhLnBheW1lbnRfc3RhdHVzID09ICdmYWlsZWQnKXtcbiAgICAgICAgICAgICAgICBlcnJvcihJMThuLnQoJ3N1Ym1pc3Npb24uc2xpcF9zdWJtaXNzaW9uJywgSTE4blNjb3BlKCkpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5ib2xldG9fdXJsKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkKHRydWUpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9wcm9qZWN0cy8ke3Byb2plY3RfaWR9L2NvbnRyaWJ1dGlvbnMvJHtjb250cmlidXRpb25faWR9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIGVycm9yKEkxOG4udCgnc3VibWlzc2lvbi5zbGlwX3N1Ym1pc3Npb24nLCBJMThuU2NvcGUoKSkpO1xuICAgICAgICAgICAgbG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHBheVNsaXAgPSAoY29udHJpYnV0aW9uX2lkLCBwcm9qZWN0X2lkLCBlcnJvciwgbG9hZGluZywgY29tcGxldGVkKSA9PiB7XG4gICAgICAgIGVycm9yKGZhbHNlKTtcbiAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgaWYgKHZhbGlkYXRlKCkpIHtcbiAgICAgICAgICAgIHVwZGF0ZUNvbnRyaWJ1dGlvbkRhdGEoY29udHJpYnV0aW9uX2lkLCBwcm9qZWN0X2lkKVxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFNsaXBQYXltZW50KGNvbnRyaWJ1dGlvbl9pZCwgcHJvamVjdF9pZCwgZXJyb3IsIGxvYWRpbmcsIGNvbXBsZXRlZCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoSTE4bi50KCdzdWJtaXNzaW9uLnNsaXBfdmFsaWRhdGlvbicsIEkxOG5TY29wZSgpKSk7XG4gICAgICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICBlcnJvcihJMThuLnQoJ3N1Ym1pc3Npb24uc2xpcF92YWxpZGF0aW9uJywgSTE4blNjb3BlKCkpKTtcbiAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgc2F2ZWRDcmVkaXRDYXJkcyA9IG0ucHJvcChbXSk7XG5cbiAgICBjb25zdCBnZXRTYXZlZENyZWRpdENhcmRzID0gKHVzZXJfaWQpID0+IHtcbiAgICAgICAgY29uc3Qgb3RoZXJTYW1wbGUgPSB7XG4gICAgICAgICAgICBpZDogLTFcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbS5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBjb25maWc6IHNldENzcmZUb2tlbixcbiAgICAgICAgICAgIHVybDogYC91c2Vycy8ke3VzZXJfaWR9L2NyZWRpdF9jYXJkc2BcbiAgICAgICAgfSkudGhlbigoY3JlZGl0Q2FyZHMpID0+IHtcbiAgICAgICAgICAgIGlmIChfLmlzQXJyYXkoY3JlZGl0Q2FyZHMpKXtcbiAgICAgICAgICAgICAgICBjcmVkaXRDYXJkcy5wdXNoKG90aGVyU2FtcGxlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3JlZGl0Q2FyZHMgPSBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNhdmVkQ3JlZGl0Q2FyZHMoY3JlZGl0Q2FyZHMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVxdWVzdFBheW1lbnQgPSAoZGF0YSwgY29udHJpYnV0aW9uX2lkKSA9PiB7XG4gICAgICAgIHJldHVybiBtLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6IGAvcGF5bWVudC9wYWdhcm1lLyR7Y29udHJpYnV0aW9uX2lkfS9wYXlfY3JlZGl0X2NhcmRgLFxuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIGNvbmZpZzogc2V0Q3NyZlRva2VuXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBwYXlXaXRoU2F2ZWRDYXJkID0gKGNyZWRpdENhcmQsIGluc3RhbGxtZW50LCBjb250cmlidXRpb25faWQpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIGNhcmRfaWQ6IGNyZWRpdENhcmQuY2FyZF9rZXksXG4gICAgICAgICAgICBwYXltZW50X2NhcmRfaW5zdGFsbG1lbnRzOiBpbnN0YWxsbWVudFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVxdWVzdFBheW1lbnQoZGF0YSwgY29udHJpYnV0aW9uX2lkKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc2V0TmV3Q3JlZGl0Q2FyZCA9ICgpID0+IHtcbiAgICAgICAgbGV0IGNyZWRpdENhcmQgPSBuZXcgd2luZG93LlBhZ2FyTWUuY3JlZGl0Q2FyZCgpO1xuICAgICAgICBjcmVkaXRDYXJkLmNhcmRIb2xkZXJOYW1lID0gY3JlZGl0Q2FyZEZpZWxkcy5uYW1lKCk7XG4gICAgICAgIGNyZWRpdENhcmQuY2FyZEV4cGlyYXRpb25Nb250aCA9IGNyZWRpdENhcmRGaWVsZHMuZXhwTW9udGgoKTtcbiAgICAgICAgY3JlZGl0Q2FyZC5jYXJkRXhwaXJhdGlvblllYXIgPSBjcmVkaXRDYXJkRmllbGRzLmV4cFllYXIoKTtcbiAgICAgICAgY3JlZGl0Q2FyZC5jYXJkTnVtYmVyID0gY3JlZGl0Q2FyZEZpZWxkcy5udW1iZXIoKTtcbiAgICAgICAgY3JlZGl0Q2FyZC5jYXJkQ1ZWID0gY3JlZGl0Q2FyZEZpZWxkcy5jdnYoKTtcbiAgICAgICAgcmV0dXJuIGNyZWRpdENhcmQ7XG4gICAgfTtcblxuICAgIGNvbnN0IHBheVdpdGhOZXdDYXJkID0gKGNvbnRyaWJ1dGlvbl9pZCwgaW5zdGFsbG1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgZGVmZXJyZWQgPSBtLmRlZmVycmVkKCk7XG4gICAgICAgIG0ucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiBgL3BheW1lbnQvcGFnYXJtZS8ke2NvbnRyaWJ1dGlvbl9pZH0vZ2V0X2VuY3J5cHRpb25fa2V5YCxcbiAgICAgICAgICAgIGNvbmZpZzogc2V0Q3NyZlRva2VuXG4gICAgICAgIH0pLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5QYWdhck1lLmVuY3J5cHRpb25fa2V5ID0gZGF0YS5rZXk7XG4gICAgICAgICAgICBjb25zdCBjYXJkID0gc2V0TmV3Q3JlZGl0Q2FyZCgpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3JzID0gY2FyZC5maWVsZEVycm9ycygpO1xuICAgICAgICAgICAgaWYgKF8ua2V5cyhlcnJvcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoe21lc3NhZ2U6IEkxOG4udCgnc3VibWlzc2lvbi5jYXJkX2ludmFsaWQnLCBJMThuU2NvcGUoKSl9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FyZC5nZW5lcmF0ZUhhc2goKGNhcmRIYXNoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkX2hhc2g6IGNhcmRIYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZV9jYXJkOiBjcmVkaXRDYXJkRmllbGRzLnNhdmUoKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bWVudF9jYXJkX2luc3RhbGxtZW50czogaW5zdGFsbG1lbnRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFBheW1lbnQoZGF0YSwgY29udHJpYnV0aW9uX2lkKS50aGVuKGRlZmVycmVkLnJlc29sdmUpLmNhdGNoKGRlZmVycmVkLnJlamVjdCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZighXy5pc0VtcHR5KGVycm9yLm1lc3NhZ2UpKXtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoe21lc3NhZ2U6IEkxOG4udCgnc3VibWlzc2lvbi5lbmNyeXB0aW9uX2Vycm9yJywgSTE4blNjb3BlKCkpfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH07XG5cbiAgICBjb25zdCB1cGRhdGVDb250cmlidXRpb25EYXRhID0gKGNvbnRyaWJ1dGlvbl9pZCwgcHJvamVjdF9pZCkgPT4ge1xuICAgICAgICBjb25zdCBjb250cmlidXRpb25EYXRhID0ge1xuICAgICAgICAgICAgYW5vbnltb3VzOiBmaWVsZHMuYW5vbnltb3VzKCksXG4gICAgICAgICAgICBjb3VudHJ5X2lkOiBmaWVsZHMudXNlckNvdW50cnlJZCgpLFxuICAgICAgICAgICAgcGF5ZXJfbmFtZTogZmllbGRzLmNvbXBsZXRlTmFtZSgpLFxuICAgICAgICAgICAgcGF5ZXJfZW1haWw6IGZpZWxkcy5lbWFpbCgpLFxuICAgICAgICAgICAgcGF5ZXJfZG9jdW1lbnQ6IGZpZWxkcy5vd25lckRvY3VtZW50KCksXG4gICAgICAgICAgICBhZGRyZXNzX3N0cmVldDogZmllbGRzLnN0cmVldCgpLFxuICAgICAgICAgICAgYWRkcmVzc19udW1iZXI6IGZpZWxkcy5udW1iZXIoKSxcbiAgICAgICAgICAgIGFkZHJlc3NfY29tcGxlbWVudDogZmllbGRzLmFkZHJlc3NDb21wbGVtZW50KCksXG4gICAgICAgICAgICBhZGRyZXNzX25laWdoYm91cmhvb2Q6IGZpZWxkcy5uZWlnaGJvdXJob29kKCksXG4gICAgICAgICAgICBhZGRyZXNzX3ppcF9jb2RlOiBmaWVsZHMuemlwQ29kZSgpLFxuICAgICAgICAgICAgYWRkcmVzc19jaXR5OiBmaWVsZHMuY2l0eSgpLFxuICAgICAgICAgICAgYWRkcmVzc19zdGF0ZTogZmllbGRzLnVzZXJTdGF0ZSgpLFxuICAgICAgICAgICAgYWRkcmVzc19waG9uZV9udW1iZXI6IGZpZWxkcy5waG9uZSgpXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG0ucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAgdXJsOiBgL3Byb2plY3RzLyR7cHJvamVjdF9pZH0vY29udHJpYnV0aW9ucy8ke2NvbnRyaWJ1dGlvbl9pZH0uanNvbmAsXG4gICAgICAgICAgICBkYXRhOiB7Y29udHJpYnV0aW9uOiBjb250cmlidXRpb25EYXRhfSxcbiAgICAgICAgICAgIGNvbmZpZzogc2V0Q3NyZlRva2VuXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBjcmVkaXRDYXJkUGF5bWVudFN1Y2Nlc3MgPSAoZGVmZXJyZWQsIHByb2plY3RfaWQsIGNvbnRyaWJ1dGlvbl9pZCkgPT4gKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKGRhdGEucGF5bWVudF9zdGF0dXMgPT09ICdmYWlsZWQnKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1zZyA9IGRhdGEubWVzc2FnZSB8fCBJMThuLnQoJ3N1Ym1pc3Npb24ucGF5bWVudF9mYWlsZWQnLCBJMThuU2NvcGUoKSk7XG5cbiAgICAgICAgICAgIGlzTG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICBzdWJtaXNzaW9uRXJyb3IoSTE4bi50KCdzdWJtaXNzaW9uLmVycm9yJywgSTE4blNjb3BlKHttZXNzYWdlOiBlcnJvck1zZ30pKSk7XG4gICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvcHJvamVjdHMvJHtwcm9qZWN0X2lkfS9jb250cmlidXRpb25zLyR7Y29udHJpYnV0aW9uX2lkfWA7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgY3JlZGl0Q2FyZFBheW1lbnRGYWlsID0gKGRlZmVycmVkKSA9PiAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvck1zZyA9IGRhdGEubWVzc2FnZSB8fCBJMThuLnQoJ3N1Ym1pc3Npb24ucGF5bWVudF9mYWlsZWQnLCBJMThuU2NvcGUoKSk7XG5cbiAgICAgICAgaXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgc3VibWlzc2lvbkVycm9yKEkxOG4udCgnc3VibWlzc2lvbi5lcnJvcicsIEkxOG5TY29wZSh7bWVzc2FnZTogZXJyb3JNc2d9KSkpO1xuICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgY2hlY2tBbmRQYXlDcmVkaXRDYXJkID0gKGRlZmVycmVkLCBzZWxlY3RlZENyZWRpdENhcmQsIGNvbnRyaWJ1dGlvbl9pZCwgcHJvamVjdF9pZCwgc2VsZWN0ZWRJbnN0YWxsbWVudCkgPT4gKCkgPT4ge1xuICAgICAgICBpZiAoc2VsZWN0ZWRDcmVkaXRDYXJkKCkuaWQgJiYgc2VsZWN0ZWRDcmVkaXRDYXJkKCkuaWQgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gcGF5V2l0aFNhdmVkQ2FyZChzZWxlY3RlZENyZWRpdENhcmQoKSwgc2VsZWN0ZWRJbnN0YWxsbWVudCgpLCBjb250cmlidXRpb25faWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oY3JlZGl0Q2FyZFBheW1lbnRTdWNjZXNzKGRlZmVycmVkLCBwcm9qZWN0X2lkLCBjb250cmlidXRpb25faWQpKVxuICAgICAgICAgICAgICAgIC5jYXRjaChjcmVkaXRDYXJkUGF5bWVudEZhaWwoZGVmZXJyZWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXlXaXRoTmV3Q2FyZChjb250cmlidXRpb25faWQsIHNlbGVjdGVkSW5zdGFsbG1lbnQpXG4gICAgICAgICAgICAgICAgLnRoZW4oY3JlZGl0Q2FyZFBheW1lbnRTdWNjZXNzKGRlZmVycmVkLCBwcm9qZWN0X2lkLCBjb250cmlidXRpb25faWQpKVxuICAgICAgICAgICAgICAgIC5jYXRjaChjcmVkaXRDYXJkUGF5bWVudEZhaWwoZGVmZXJyZWQpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBzZW5kUGF5bWVudCA9IChzZWxlY3RlZENyZWRpdENhcmQsIHNlbGVjdGVkSW5zdGFsbG1lbnQsIGNvbnRyaWJ1dGlvbl9pZCwgcHJvamVjdF9pZCkgPT4ge1xuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG0uZGVmZXJyZWQoKTtcbiAgICAgICAgaWYgKHZhbGlkYXRlKCkpIHtcbiAgICAgICAgICAgIGlzTG9hZGluZyh0cnVlKTtcbiAgICAgICAgICAgIHN1Ym1pc3Npb25FcnJvcihmYWxzZSk7XG4gICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgdXBkYXRlQ29udHJpYnV0aW9uRGF0YShjb250cmlidXRpb25faWQsIHByb2plY3RfaWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oY2hlY2tBbmRQYXlDcmVkaXRDYXJkKGRlZmVycmVkLCBzZWxlY3RlZENyZWRpdENhcmQsIGNvbnRyaWJ1dGlvbl9pZCwgcHJvamVjdF9pZCwgc2VsZWN0ZWRJbnN0YWxsbWVudCkpXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzTG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzZXRGaWVsZEVycm9yID0gKGZpZWxkTmFtZSkgPT4gKCkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBmaWVsZHMuZXJyb3JzKCksXG4gICAgICAgICAgICBlcnJvckZpZWxkID0gXy5maW5kV2hlcmUoZmllbGRzLmVycm9ycygpLCB7ZmllbGQ6IGZpZWxkTmFtZX0pLFxuICAgICAgICAgICAgbmV3RXJyb3JzID0gXy5jb21wb3NlKGZpZWxkcy5lcnJvcnMsIF8ud2l0aG91dCk7XG5cbiAgICAgICAgcmV0dXJuIG5ld0Vycm9ycyhmaWVsZHMuZXJyb3JzKCksIGVycm9yRmllbGQpO1xuICAgIH07XG5cbiAgICBjb25zdCByZXNldENyZWRpdENhcmRGaWVsZEVycm9yID0gKGZpZWxkTmFtZSkgPT4gKCkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBmaWVsZHMuZXJyb3JzKCksXG4gICAgICAgICAgICBlcnJvckZpZWxkID0gXy5maW5kV2hlcmUoY3JlZGl0Q2FyZEZpZWxkcy5lcnJvcnMoKSwge2ZpZWxkOiBmaWVsZE5hbWV9KSxcbiAgICAgICAgICAgIG5ld0Vycm9ycyA9IF8uY29tcG9zZShjcmVkaXRDYXJkRmllbGRzLmVycm9ycywgXy53aXRob3V0KTtcblxuICAgICAgICByZXR1cm4gbmV3RXJyb3JzKGNyZWRpdENhcmRGaWVsZHMuZXJyb3JzKCksIGVycm9yRmllbGQpO1xuICAgIH07XG5cbiAgICBjb25zdCBpbnN0YWxsbWVudHMgPSBtLnByb3AoW3t2YWx1ZTogMTAsIG51bWJlcjogMX1dKTtcblxuICAgIGNvbnN0IGdldEluc3RhbGxtZW50cyA9IChjb250cmlidXRpb25faWQpID0+IHtcbiAgICAgICAgcmV0dXJuIG0ucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiBgL3BheW1lbnQvcGFnYXJtZS8ke2NvbnRyaWJ1dGlvbl9pZH0vZ2V0X2luc3RhbGxtZW50YCxcbiAgICAgICAgICAgIGNvbmZpZzogaC5zZXRDc3JmVG9rZW5cbiAgICAgICAgfSkudGhlbihpbnN0YWxsbWVudHMpO1xuICAgIH07XG5cbiAgICBjb25zdCBjcmVkaXRDYXJkTWFzayA9IF8ucGFydGlhbChoLm1hc2ssICc5OTk5IDk5OTkgOTk5OSA5OTk5Jyk7XG5cbiAgICBjb25zdCBhcHBseUNyZWRpdENhcmRNYXNrID0gXy5jb21wb3NlKGNyZWRpdENhcmRGaWVsZHMubnVtYmVyLCBjcmVkaXRDYXJkTWFzayk7XG5cbiAgICBjb3VudHJpZXNMb2FkZXIubG9hZCgpLnRoZW4oZmllbGRzLmNvdW50cmllcyk7XG4gICAgc3RhdGVzTG9hZGVyLmxvYWQoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGZpZWxkcy5zdGF0ZXMoKS5wdXNoKHthY3JvbnltOiBudWxsLCBuYW1lOiAnRXN0YWRvJ30pO1xuICAgICAgICBfLm1hcChkYXRhLCBzdGF0ZSA9PiBmaWVsZHMuc3RhdGVzKCkucHVzaChzdGF0ZSkpO1xuICAgIH0pO1xuICAgIHVzZXJzVk0uZmV0Y2hVc2VyKGN1cnJlbnRVc2VyLnVzZXJfaWQsIGZhbHNlKS50aGVuKHBvcHVsYXRlRm9ybSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgICAgdmFsaWRhdGU6IHZhbGlkYXRlLFxuICAgICAgICBpc0ludGVybmF0aW9uYWw6IGlzSW50ZXJuYXRpb25hbCxcbiAgICAgICAgcmVzZXRGaWVsZEVycm9yOiByZXNldEZpZWxkRXJyb3IsXG4gICAgICAgIGdldFNsaXBQYXltZW50RGF0ZTogZ2V0U2xpcFBheW1lbnREYXRlLFxuICAgICAgICBwYXlTbGlwOiBwYXlTbGlwLFxuICAgICAgICBpbnN0YWxsbWVudHM6IGluc3RhbGxtZW50cyxcbiAgICAgICAgZ2V0SW5zdGFsbG1lbnRzOiBnZXRJbnN0YWxsbWVudHMsXG4gICAgICAgIHNhdmVkQ3JlZGl0Q2FyZHM6IHNhdmVkQ3JlZGl0Q2FyZHMsXG4gICAgICAgIGdldFNhdmVkQ3JlZGl0Q2FyZHM6IGdldFNhdmVkQ3JlZGl0Q2FyZHMsXG4gICAgICAgIGFwcGx5Q3JlZGl0Q2FyZE1hc2s6IGFwcGx5Q3JlZGl0Q2FyZE1hc2ssXG4gICAgICAgIGNyZWRpdENhcmRGaWVsZHM6IGNyZWRpdENhcmRGaWVsZHMsXG4gICAgICAgIHJlc2V0Q3JlZGl0Q2FyZEZpZWxkRXJyb3I6IHJlc2V0Q3JlZGl0Q2FyZEZpZWxkRXJyb3IsXG4gICAgICAgIGV4cE1vbnRoT3B0aW9uczogZXhwTW9udGhPcHRpb25zLFxuICAgICAgICBleHBZZWFyT3B0aW9uczogZXhwWWVhck9wdGlvbnMsXG4gICAgICAgIHNlbmRQYXltZW50OiBzZW5kUGF5bWVudCxcbiAgICAgICAgc3VibWlzc2lvbkVycm9yOiBzdWJtaXNzaW9uRXJyb3IsXG4gICAgICAgIGlzTG9hZGluZzogaXNMb2FkaW5nLFxuICAgICAgICBwYWdhcm1lOiBwYWdhcm1lLFxuICAgICAgICBmYXE6IGZhcVxuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXltZW50Vk07XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IHVzZXJWTSBmcm9tICcuLi92bXMvdXNlci12bSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuZmFxJyk7XG5cbmNvbnN0IGZhcUJveCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IGFyZ3MubW9kZSxcbiAgICAgICAgICAgIHF1ZXN0aW9ucyA9IGFyZ3MuZmFxLnF1ZXN0aW9ucyxcbiAgICAgICAgICAgIHNlbGVjdGVkUXVlc3Rpb24gPSBtLnByb3AoLTEpLFxuICAgICAgICAgICAgc2NvcGVkUXVlc3Rpb25zID0gbS5wcm9wKHF1ZXN0aW9ucyk7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0UXVlc3Rpb24gPSAoaWR4KSA9PiAoKSA9PiBzZWxlY3RlZFF1ZXN0aW9uKGlkeCk7XG5cbiAgICAgICAgY29uc3QgdXBkYXRlUXVlc3Rpb25zRGF0YSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICAvL1RoaXMgZnVuY3Rpb24gcmV3cml0ZXMgcXVlc3Rpb25zIGZyb20gdHJhbnNsYXRlIHdpdGggcHJvcGVyIHNjb3BlIGZvciBsaW5rc1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IGRhdGFbMF07XG4gICAgICAgICAgICBsZXQgdXBkYXRlZFF1ZXN0aW9ucyA9IHt9O1xuICAgICAgICAgICAgXy5lYWNoKHF1ZXN0aW9ucywgKHF1ZXN0LCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICBfLmV4dGVuZCh1cGRhdGVkUXVlc3Rpb25zLCB7XG4gICAgICAgICAgICAgICAgICAgIFtpZHggKyAxXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246IHF1ZXN0LnF1ZXN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiBJMThuLnQoYCR7bW9kZX0ucXVlc3Rpb25zLiR7aWR4fS5hbnN3ZXJgLCBJMThuU2NvcGUoe3VzZXJMaW5rOiBgL3VzZXJzLyR7dXNlci5pZH1gLCB1c2VyTmFtZTogdXNlci5uYW1lfSkpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzY29wZWRRdWVzdGlvbnModXBkYXRlZFF1ZXN0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdXNlclZNLmZldGNoVXNlcihhcmdzLnByb2plY3RVc2VySWQsIGZhbHNlKS50aGVuKHVwZGF0ZVF1ZXN0aW9uc0RhdGEpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY29wZWRRdWVzdGlvbnM6IHNjb3BlZFF1ZXN0aW9ucyxcbiAgICAgICAgICAgIHNlbGVjdFF1ZXN0aW9uOiBzZWxlY3RRdWVzdGlvbixcbiAgICAgICAgICAgIHNlbGVjdGVkUXVlc3Rpb246IHNlbGVjdGVkUXVlc3Rpb25cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnLmZhcS1ib3gudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5jYXJkLnUtcmFkaXVzJyxcbiAgICAgICAgICBbXG4gICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0zMCcsXG4gICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXNtYWxsLTIudy1jb2wtdGlueS0yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWdbd2lkdGg9XFwnMzBcXCddJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IGFyZ3MubW9kZSA9PT0gJ2FvbicgPyAnL2Fzc2V0cy9hb24tYmFkZ2UucG5nJyA6ICcvYXNzZXRzL2ZsZXgtYmFkZ2UucG5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnctY29sLXNtYWxsLTEwLnctY29sLXRpbnktMTAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWlubGluZS1ibG9jay5mb250c2l6ZS1zbWFsbGVzdC53LWlubGluZS1ibG9jay5mb250Y29sb3Itc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5mYXEuZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICApLFxuICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0yMC5mb250c2l6ZS1zbWFsbC5mb250d2VpZ2h0LXNlbWlib2xkJyxcbiAgICAgICAgICAgICAgICAnRMO6dmlkYXMgZnJlcXVlbnRlcydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBtKCd1bC53LWxpc3QtdW5zdHlsZWQnLFxuICAgICAgICAgICAgICAgIF8ubWFwKGN0cmwuc2NvcGVkUXVlc3Rpb25zKCksIChxdWVzdGlvbiwgaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKGBsaSNmYXFfcXVlc3Rpb25fJHtpZHh9LmZvbnRzaXplLXNtYWxsZXIuYWx0LWxpbmsubGlzdC1xdWVzdGlvbmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnNlbGVjdFF1ZXN0aW9uKGlkeClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG0oJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmFxLWJveC1hcnJvdycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCAke3F1ZXN0aW9uLnF1ZXN0aW9ufWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdsaS5saXN0LWFuc3dlcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5zZWxlY3RlZFF1ZXN0aW9uKCkgPT09IGlkeCA/ICdsaXN0LWFuc3dlci1vcGVuZWQnIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG0oYHAjZmFxX2Fuc3dlcl8ke2lkeH0uZm9udHNpemUtc21hbGxlcmAsIG0udHJ1c3QocXVlc3Rpb24uYW5zd2VyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIF1cbiAgICAgICAgKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmYXFCb3g7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgaW5saW5lRXJyb3IgZnJvbSAnLi9pbmxpbmUtZXJyb3InO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5jb250cmlidXRpb25zLmVkaXQuZXJyb3JzJyk7XG5cbmNvbnN0IHBheW1lbnRTbGlwID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCB2bSA9IGFyZ3Mudm0sXG4gICAgICAgICAgICBzbGlwUGF5bWVudERhdGUgPSB2bS5nZXRTbGlwUGF5bWVudERhdGUoYXJncy5jb250cmlidXRpb25faWQpLFxuICAgICAgICAgICAgbG9hZGluZyA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBlcnJvciA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBjb21wbGV0ZWQgPSBtLnByb3AoZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGJ1aWxkU2xpcCA9ICgpID0+IHtcbiAgICAgICAgICAgIGxvYWRpbmcodHJ1ZSk7XG4gICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgdm0ucGF5U2xpcChhcmdzLmNvbnRyaWJ1dGlvbl9pZCwgYXJncy5wcm9qZWN0X2lkLCBlcnJvciwgbG9hZGluZywgY29tcGxldGVkKTtcblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBidWlsZFNsaXA6IGJ1aWxkU2xpcCxcbiAgICAgICAgICAgIHNsaXBQYXltZW50RGF0ZTogc2xpcFBheW1lbnREYXRlLFxuICAgICAgICAgICAgbG9hZGluZzogbG9hZGluZyxcbiAgICAgICAgICAgIGNvbXBsZXRlZDogY29tcGxldGVkLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW50b3AtMzAudS1tYXJnaW5ib3R0b20tNjAudS1yYWRpdXMuY2FyZC1iaWcuY2FyZCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwudS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNsaXBQYXltZW50RGF0ZSgpID8gYEVzc2UgYm9sZXRvIGJhbmPDoXJpbyB2ZW5jZSBubyBkaWEgJHtoLm1vbWVudGlmeShjdHJsLnNsaXBQYXltZW50RGF0ZSgpLnNsaXBfZXhwaXJhdGlvbl9kYXRlKX0uYCA6ICdjYXJyZWdhbmRvLi4uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLnUtbWFyZ2luYm90dG9tLTQwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FvIGdlcmFyIG8gYm9sZXRvLCBvIHJlYWxpemFkb3IgasOhIGVzdMOhIGNvbnRhbmRvIGNvbSBvIHNldSBhcG9pby4gUGFndWUgYXTDqSBhIGRhdGEgZGUgdmVuY2ltZW50byBwZWxhIGludGVybmV0LCBjYXNhcyBsb3TDqXJpY2FzLCBjYWl4YXMgZWxldHLDtG5pY29zIG91IGFnw6puY2lhIGJhbmPDoXJpYS4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC53LWNvbC1wdXNoLTInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5sb2FkaW5nKCkgPyBoLmxvYWRlcigpIDogY3RybC5jb21wbGV0ZWQoKSA/ICcnIDogbSgnaW5wdXQuYnRuLmJ0bi1sYXJnZS51LW1hcmdpbmJvdHRvbS0yMCcse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLmJ1aWxkU2xpcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdJbXByaW1pciBCb2xldG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VibWl0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXJyb3IoKSA/IG0uY29tcG9uZW50KGlubGluZUVycm9yLCB7bWVzc2FnZTogY3RybC5lcnJvcigpfSkgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0zMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FvIGFwb2lhciwgdm9jw6ogY29uY29yZGEgY29tIG9zICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EuYWx0LWxpbmtbaHJlZj1cXCcvcHQvdGVybXMtb2YtdXNlXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVGVybW9zIGRlIFVzbyAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EuYWx0LWxpbmtbaHJlZj1cXCcvcHQvcHJpdmFjeS1wb2xpY3lcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQb2zDrXRpY2EgZGUgUHJpdmFjaWRhZGUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF5bWVudFNsaXA7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuY29uc3QgZGVmYXVsdEZvcm1hdCA9IC8oXFxkezEsNH0pL2c7XG5cbmNvbnN0IHNsaWNlID0gW10uc2xpY2UsXG5pbmRleE9mID0gW10uaW5kZXhPZiB8fCBmdW5jdGlvbihpdGVtKSB7IGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTsgfSByZXR1cm4gLTE7IH07XG5cbmNvbnN0IGNhcmRzID0gW1xuICAgIHtcbiAgICAgICAgdHlwZTogJ2VsbycsXG4gICAgICAgIHBhdHRlcm5zOiBbNDAxMTc4LCA0MDExNzksIDQzMTI3NCwgNDM4OTM1LCA0NTE0MTYsIDQ1NzM5MywgNDU3NjMxLCA0NTc2MzIsIDUwNDE3NSwgNTA2Njk5LCA1MDY3LCA1MDksIDYyNzc4MCwgNjM2Mjk3LCA2MzYzNjgsIDY1MCwgNjUxNiwgNjU1MF0sXG4gICAgICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICAgICAgbGVuZ3RoOiBbMTZdLFxuICAgICAgICBjdnZMZW5ndGg6IFszXSxcbiAgICAgICAgbHVobjogdHJ1ZVxuICAgIH0sIHtcbiAgICAgICAgdHlwZTogJ21hZXN0cm8nLFxuICAgICAgICBwYXR0ZXJuczogWzUwMTgsIDUwMiwgNTAzLCA1MDYsIDU2LCA1OCwgNjM5LCA2MjIwLCA2N10sXG4gICAgICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICAgICAgbGVuZ3RoOiBbMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5XSxcbiAgICAgICAgY3Z2TGVuZ3RoOiBbM10sXG4gICAgICAgIGx1aG46IHRydWVcbiAgICB9LCB7XG4gICAgICAgIHR5cGU6ICdmb3JicnVnc2ZvcmVuaW5nZW4nLFxuICAgICAgICBwYXR0ZXJuczogWzYwMF0sXG4gICAgICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICAgICAgbGVuZ3RoOiBbMTZdLFxuICAgICAgICBjdnZMZW5ndGg6IFszXSxcbiAgICAgICAgbHVobjogdHJ1ZVxuICAgIH0sIHtcbiAgICAgICAgdHlwZTogJ2RhbmtvcnQnLFxuICAgICAgICBwYXR0ZXJuczogWzUwMTldLFxuICAgICAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXQsXG4gICAgICAgIGxlbmd0aDogWzE2XSxcbiAgICAgICAgY3Z2TGVuZ3RoOiBbM10sXG4gICAgICAgIGx1aG46IHRydWVcbiAgICB9LCB7XG4gICAgICAgIHR5cGU6ICd2aXNhJyxcbiAgICAgICAgcGF0dGVybnM6IFs0XSxcbiAgICAgICAgZm9ybWF0OiBkZWZhdWx0Rm9ybWF0LFxuICAgICAgICBsZW5ndGg6IFsxMywgMTZdLFxuICAgICAgICBjdnZMZW5ndGg6IFszXSxcbiAgICAgICAgbHVobjogdHJ1ZVxuICAgIH0sIHtcbiAgICAgICAgdHlwZTogJ21hc3RlcmNhcmQnLFxuICAgICAgICBwYXR0ZXJuczogWzUxLCA1MiwgNTMsIDU0LCA1NSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyN10sXG4gICAgICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICAgICAgbGVuZ3RoOiBbMTZdLFxuICAgICAgICBjdnZMZW5ndGg6IFszXSxcbiAgICAgICAgbHVobjogdHJ1ZVxuICAgIH0sIHtcbiAgICAgICAgdHlwZTogJ2FtZXgnLFxuICAgICAgICBwYXR0ZXJuczogWzM0LCAzN10sXG4gICAgICAgIGZvcm1hdDogLyhcXGR7MSw0fSkoXFxkezEsNn0pPyhcXGR7MSw1fSk/LyxcbiAgICAgICAgbGVuZ3RoOiBbMTVdLFxuICAgICAgICBjdnZMZW5ndGg6IFszLCA0XSxcbiAgICAgICAgbHVobjogdHJ1ZVxuICAgIH0sIHtcbiAgICAgICAgdHlwZTogJ2RpbmVyc2NsdWInLFxuICAgICAgICBwYXR0ZXJuczogWzMwLCAzNiwgMzgsIDM5XSxcbiAgICAgICAgZm9ybWF0OiAvKFxcZHsxLDR9KShcXGR7MSw2fSk/KFxcZHsxLDR9KT8vLFxuICAgICAgICBsZW5ndGg6IFsxNF0sXG4gICAgICAgIGN2dkxlbmd0aDogWzNdLFxuICAgICAgICBsdWhuOiB0cnVlXG4gICAgfSwge1xuICAgICAgICB0eXBlOiAnZGlzY292ZXInLFxuICAgICAgICBwYXR0ZXJuczogWzYwLCA2NCwgNjUsIDYyMl0sXG4gICAgICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICAgICAgbGVuZ3RoOiBbMTZdLFxuICAgICAgICBjdnZMZW5ndGg6IFszXSxcbiAgICAgICAgbHVobjogdHJ1ZVxuICAgIH0sIHtcbiAgICAgICAgdHlwZTogJ3VuaW9ucGF5JyxcbiAgICAgICAgcGF0dGVybnM6IFs2MiwgODhdLFxuICAgICAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXQsXG4gICAgICAgIGxlbmd0aDogWzE2LCAxNywgMTgsIDE5XSxcbiAgICAgICAgY3Z2TGVuZ3RoOiBbM10sXG4gICAgICAgIGx1aG46IGZhbHNlXG4gICAgfSwge1xuICAgICAgICB0eXBlOiAnamNiJyxcbiAgICAgICAgcGF0dGVybnM6IFszNV0sXG4gICAgICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICAgICAgbGVuZ3RoOiBbMTZdLFxuICAgICAgICBjdnZMZW5ndGg6IFszXSxcbiAgICAgICAgbHVobjogdHJ1ZVxuICAgIH1cbl07XG5cbmNvbnN0IGlucHV0Q2FyZFR5cGUgPSAobnVtKSA9PiB7XG4gICAgdmFyIHJlZjtcbiAgICBpZiAoIW51bSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuICgocmVmID0gY2FyZEZyb21OdW1iZXIobnVtKSkgIT0gbnVsbCA/IHJlZi50eXBlIDogdm9pZCAwKSB8fCBudWxsO1xufTtcblxuY29uc3QgY2FyZEZyb21UeXBlID0gKHR5cGUpID0+IHtcbiAgICBsZXQgY2FyZCwgaSwgbGVuO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGNhcmRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNhcmQgPSBjYXJkc1tpXTtcbiAgICAgICAgaWYgKGNhcmQudHlwZSA9PT0gdHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhcmQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5jb25zdCBzZXRDYXJkVHlwZSA9IChlLCB0eXBlKSA9PiB7XG4gICAgbGV0ICR0YXJnZXQsIGFsbFR5cGVzLCBjYXJkLCBjYXJkVHlwZSwgdmFsO1xuICAgICR0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgdmFsID0gJHRhcmdldC52YWx1ZTtcbiAgICBjYXJkVHlwZSA9IGlucHV0Q2FyZFR5cGUodmFsKSB8fCAndW5rbm93bic7XG4gICAgcmV0dXJuIHR5cGUoY2FyZFR5cGUpO1xufTtcblxuY29uc3QgZm9ybWF0QmFja0NhcmROdW1iZXIgPSAoZSwgcHJvcCkgPT4ge1xuICAgIHZhciAkdGFyZ2V0LCB2YWx1ZTtcbiAgICAkdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0O1xuICAgIHZhbHVlID0gJHRhcmdldC52YWx1ZTtcbiAgICBpZiAoZS53aGljaCAhPT0gOCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICgoJHRhcmdldC5zZWxlY3Rpb25TdGFydCAhPSBudWxsKSAmJiAkdGFyZ2V0LnNlbGVjdGlvblN0YXJ0ICE9PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoL1xcZFxccyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHRhcmdldC52YWx1ZSA9IHByb3AodmFsdWUucmVwbGFjZSgvXFxkXFxzJC8sICcnKSk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoL1xcc1xcZD8kLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICR0YXJnZXQudmFsdWUgPSBwcm9wKHZhbHVlLnJlcGxhY2UoL1xcZCQvLCAnJykpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5jb25zdCByZXBsYWNlRnVsbFdpZHRoQ2hhcnMgPSAoc3RyKSA9PiB7XG4gICAgdmFyIGNoYXJzLCBjaHIsIGZ1bGxXaWR0aCwgaGFsZldpZHRoLCBpLCBpZHgsIGxlbiwgdmFsdWU7XG4gICAgaWYgKHN0ciA9PSBudWxsKSB7XG4gICAgICAgIHN0ciA9ICcnO1xuICAgIH1cbiAgICBmdWxsV2lkdGggPSAnXFx1ZmYxMFxcdWZmMTFcXHVmZjEyXFx1ZmYxM1xcdWZmMTRcXHVmZjE1XFx1ZmYxNlxcdWZmMTdcXHVmZjE4XFx1ZmYxOSc7XG4gICAgaGFsZldpZHRoID0gJzAxMjM0NTY3ODknO1xuICAgIHZhbHVlID0gJyc7XG4gICAgY2hhcnMgPSBzdHIuc3BsaXQoJycpO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGNoYXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNociA9IGNoYXJzW2ldO1xuICAgICAgICBpZHggPSBmdWxsV2lkdGguaW5kZXhPZihjaHIpO1xuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICAgIGNociA9IGhhbGZXaWR0aFtpZHhdO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlICs9IGNocjtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuY29uc3Qgc2FmZVZhbCA9ICh2YWx1ZSwgJHRhcmdldCwgcHJvcCkgPT4ge1xuICAgIHZhciBjdXJyUGFpciwgY3Vyc29yLCBkaWdpdCwgZXJyb3IsIGVycm9yMSwgbGFzdCwgcHJldlBhaXI7XG4gICAgdHJ5IHtcbiAgICAgICAgY3Vyc29yID0gJHRhcmdldC5zZWxlY3Rpb25TdGFydDtcbiAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgZXJyb3IgPSBlcnJvcjE7XG4gICAgICAgIGN1cnNvciA9IG51bGw7XG4gICAgfVxuICAgIGxhc3QgPSAkdGFyZ2V0LnZhbHVlO1xuICAgICR0YXJnZXQudmFsdWUgPSBwcm9wKHZhbHVlKTtcbiAgICBpZiAoY3Vyc29yICE9PSBudWxsICYmICgkdGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICBpZiAoY3Vyc29yID09PSBsYXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgY3Vyc29yID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0ICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgcHJldlBhaXIgPSBsYXN0LnNsaWNlKGN1cnNvciAtIDEsICtjdXJzb3IgKyAxIHx8IDllOSk7XG4gICAgICAgICAgICBjdXJyUGFpciA9IHZhbHVlLnNsaWNlKGN1cnNvciAtIDEsICtjdXJzb3IgKyAxIHx8IDllOSk7XG4gICAgICAgICAgICBkaWdpdCA9IHZhbHVlW2N1cnNvcl07XG4gICAgICAgICAgICBpZiAoL1xcZC8udGVzdChkaWdpdCkgJiYgcHJldlBhaXIgPT09IChkaWdpdCArICcgJykgJiYgY3VyclBhaXIgPT09ICgnICcgKyBkaWdpdCkpIHtcbiAgICAgICAgICAgICAgICBjdXJzb3IgPSBjdXJzb3IgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICR0YXJnZXQuc2VsZWN0aW9uU3RhcnQgPSBjdXJzb3I7XG4gICAgICAgIHJldHVybiAkdGFyZ2V0LnNlbGVjdGlvbkVuZCA9IGN1cnNvcjtcbiAgICB9XG59O1xuXG5jb25zdCByZUZvcm1hdENhcmROdW1iZXIgPSAoZSwgcHJvcCkgPT4ge1xuICAgIGNvbnN0ICR0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgIHZhbHVlID0gJHRhcmdldC52YWx1ZTtcbiAgICAgICAgdmFsdWUgPSByZXBsYWNlRnVsbFdpZHRoQ2hhcnModmFsdWUpO1xuICAgICAgICB2YWx1ZSA9IGZvcm1hdENhcmROdW1iZXIodmFsdWUpO1xuICAgICAgICByZXR1cm4gc2FmZVZhbCh2YWx1ZSwgJHRhcmdldCwgcHJvcCk7XG4gICAgfSk7XG59O1xuXG5jb25zdCBmb3JtYXRDYXJkTnVtYmVyID0gZnVuY3Rpb24obnVtKSB7XG4gICAgbGV0IGNhcmQsIGdyb3VwcywgcmVmLCB1cHBlckxlbmd0aDtcbiAgICBudW0gPSBudW0ucmVwbGFjZSgvXFxEL2csICcnKTtcbiAgICBjYXJkID0gY2FyZEZyb21OdW1iZXIobnVtKTtcbiAgICBpZiAoIWNhcmQpIHtcbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gICAgdXBwZXJMZW5ndGggPSBjYXJkLmxlbmd0aFtjYXJkLmxlbmd0aC5sZW5ndGggLSAxXTtcbiAgICBudW0gPSBudW0uc2xpY2UoMCwgdXBwZXJMZW5ndGgpO1xuICAgIGlmIChjYXJkLmZvcm1hdC5nbG9iYWwpIHtcbiAgICAgICAgcmV0dXJuIChyZWYgPSBudW0ubWF0Y2goY2FyZC5mb3JtYXQpKSAhPSBudWxsID8gcmVmLmpvaW4oJyAnKSA6IHZvaWQgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBncm91cHMgPSBjYXJkLmZvcm1hdC5leGVjKG51bSk7XG4gICAgICAgIGlmIChncm91cHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGdyb3Vwcy5zaGlmdCgpO1xuICAgICAgICBncm91cHMgPSBfLmZpbHRlcihncm91cHMsIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdyb3Vwcy5qb2luKCcgJyk7XG4gICAgfVxufTtcblxuY29uc3QgZm9ybWF0Q2FyZElucHV0TnVtYmVyID0gKGUsIHByb3ApID0+IHtcbiAgICBsZXQgJHRhcmdldCwgY2FyZCwgZGlnaXQsIGxlbmd0aCwgcmUsIHVwcGVyTGVuZ3RoLCB2YWx1ZTtcbiAgICBkaWdpdCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZS53aGljaCk7XG4gICAgaWYgKCEvXlxcZCskLy50ZXN0KGRpZ2l0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgICR0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgdmFsdWUgPSAkdGFyZ2V0LnZhbHVlO1xuICAgIGNhcmQgPSBjYXJkRnJvbU51bWJlcih2YWx1ZSArIGRpZ2l0KTtcbiAgICBsZW5ndGggPSAodmFsdWUucmVwbGFjZSgvXFxEL2csICcnKSArIGRpZ2l0KS5sZW5ndGg7XG4gICAgdXBwZXJMZW5ndGggPSAxNjtcbiAgICBpZiAoY2FyZCkge1xuICAgICAgICB1cHBlckxlbmd0aCA9IGNhcmQubGVuZ3RoW2NhcmQubGVuZ3RoLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoID49IHVwcGVyTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCgkdGFyZ2V0LnNlbGVjdGlvblN0YXJ0ICE9IG51bGwpICYmICR0YXJnZXQuc2VsZWN0aW9uU3RhcnQgIT09IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXJkICYmIGNhcmQudHlwZSA9PT0gJ2FtZXgnKSB7XG4gICAgICAgIHJlID0gL14oXFxkezR9fFxcZHs0fVxcc1xcZHs2fSkkLztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZSA9IC8oPzpefFxccykoXFxkezR9KSQvO1xuICAgIH1cbiAgICBpZiAocmUudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkdGFyZ2V0LnZhbHVlID0gcHJvcCh2YWx1ZSArICcgJyArIGRpZ2l0KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChyZS50ZXN0KHZhbHVlICsgZGlnaXQpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHRhcmdldC52YWx1ZSA9IHByb3AodmFsdWUgKyBkaWdpdCArICcgJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmNvbnN0IGNhcmRGcm9tTnVtYmVyID0gKG51bSkgPT4ge1xuICAgIGxldCBjYXJkLCBpLCBqLCBsZW4sIGxlbjEsIHAsIHBhdHRlcm4sIHJlZjtcbiAgICBudW0gPSAobnVtICsgJycpLnJlcGxhY2UoL1xcRC9nLCAnJyk7XG4gICAgZm9yIChpID0gMCwgbGVuID0gY2FyZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY2FyZCA9IGNhcmRzW2ldO1xuICAgICAgICByZWYgPSBjYXJkLnBhdHRlcm5zO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gcmVmLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgICAgcGF0dGVybiA9IHJlZltqXTtcbiAgICAgICAgICAgIHAgPSBwYXR0ZXJuICsgJyc7XG4gICAgICAgICAgICBpZiAobnVtLnN1YnN0cigwLCBwLmxlbmd0aCkgPT09IHApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmNvbnN0IGhhc1RleHRTZWxlY3RlZCA9ICgkdGFyZ2V0KSA9PiB7XG4gICAgbGV0IHJlZjtcbiAgICBpZiAoKCR0YXJnZXQuc2VsZWN0aW9uU3RhcnQgIT0gbnVsbCkgJiYgJHRhcmdldC5zZWxlY3Rpb25TdGFydCAhPT0gJHRhcmdldC5zZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICgodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudCAhPT0gbnVsbCA/IChyZWYgPSBkb2N1bWVudC5zZWxlY3Rpb24pICE9IG51bGwgPyByZWYuY3JlYXRlUmFuZ2UgOiB2b2lkIDAgOiB2b2lkIDApICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLnRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IHJlc3RyaWN0TnVtZXJpYyA9IChlKSA9PiB7XG4gICAgbGV0IGlucHV0O1xuICAgIGlmIChlLm1ldGFLZXkgfHwgZS5jdHJsS2V5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoZS53aGljaCA9PT0gMzIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZS53aGljaCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGUud2hpY2ggPCAzMykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaW5wdXQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUud2hpY2gpO1xuICAgIHJldHVybiAhIS9bXFxkXFxzXS8udGVzdChpbnB1dCk7XG59O1xuXG5jb25zdCByZXN0cmljdENhcmROdW1iZXIgPSAoZSkgPT4ge1xuICAgIGxldCAkdGFyZ2V0LCBjYXJkLCBkaWdpdCwgdmFsdWU7XG4gICAgJHRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICBkaWdpdCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZS53aGljaCk7XG4gICAgaWYgKCEvXlxcZCskLy50ZXN0KGRpZ2l0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChoYXNUZXh0U2VsZWN0ZWQoJHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YWx1ZSA9ICgkdGFyZ2V0LnZhbHVlICsgZGlnaXQpLnJlcGxhY2UoL1xcRC9nLCAnJyk7XG4gICAgY2FyZCA9IGNhcmRGcm9tTnVtYmVyKHZhbHVlKTtcbiAgICBpZiAoY2FyZCkge1xuICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoIDw9IGNhcmQubGVuZ3RoW2NhcmQubGVuZ3RoLmxlbmd0aCAtIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPD0gMTY7XG4gICAgfVxufTtcbmNvbnN0IHNldEV2ZW50cyA9IChlbCwgY2FyZFR5cGUsIHByb3ApID0+IHtcbiAgICBlbC5vbmtleXByZXNzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHJlc3RyaWN0TnVtZXJpYyhldmVudCk7XG4gICAgICAgIHJlc3RyaWN0Q2FyZE51bWJlcihldmVudCk7XG4gICAgICAgIGZvcm1hdENhcmRJbnB1dE51bWJlcihldmVudCwgcHJvcCk7XG4gICAgfTtcbiAgICBlbC5vbmlucHV0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHJlRm9ybWF0Q2FyZE51bWJlcihldmVudCwgcHJvcCk7XG4gICAgICAgIHNldENhcmRUeXBlKGV2ZW50LCBjYXJkVHlwZSk7XG4gICAgfTtcbiAgICBlbC5vbmtleWRvd24gPSAoZXZlbnQpID0+IGZvcm1hdEJhY2tDYXJkTnVtYmVyKGV2ZW50LCBwcm9wKTtcbiAgICBlbC5vbmtleXVwID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldENhcmRUeXBlKGV2ZW50LCBjYXJkVHlwZSk7XG4gICAgfTtcbiAgICBlbC5vbnBhc3RlID0gKGV2ZW50KSA9PiByZUZvcm1hdENhcmROdW1iZXIoZXZlbnQsIHByb3ApO1xuICAgIGVsLm9uY2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIENhdGFyc2VBbmFseXRpY3Mub25lVGltZUV2ZW50KHtjYXQ6J2NvbnRyaWJ1dGlvbl9maW5pc2gnLGFjdDonY29udHJpYnV0aW9uX2NjX2VkaXQnfSk7XG4gICAgICAgIHJlRm9ybWF0Q2FyZE51bWJlcihldmVudCwgcHJvcCk7ICAgICAgICBcbiAgICB9O1xufTtcblxuY29uc3QgbHVobkNoZWNrID0gKG51bSkgPT4ge1xuICAgIHZhciBkaWdpdCwgZGlnaXRzLCBpLCBsZW4sIG9kZCwgc3VtO1xuICAgIG9kZCA9IHRydWU7XG4gICAgc3VtID0gMDtcbiAgICBkaWdpdHMgPSAobnVtICsgJycpLnNwbGl0KCcnKS5yZXZlcnNlKCk7XG4gICAgZm9yIChpID0gMCwgbGVuID0gZGlnaXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGRpZ2l0ID0gZGlnaXRzW2ldO1xuICAgICAgICBkaWdpdCA9IHBhcnNlSW50KGRpZ2l0LCAxMCk7XG4gICAgICAgIGlmICgob2RkID0gIW9kZCkpIHtcbiAgICAgICAgICAgIGRpZ2l0ICo9IDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpZ2l0ID4gOSkge1xuICAgICAgICAgICAgZGlnaXQgLT0gOTtcbiAgICAgICAgfVxuICAgICAgICBzdW0gKz0gZGlnaXQ7XG4gICAgfVxuICAgIHJldHVybiBzdW0gJSAxMCA9PT0gMDtcbn07XG5cbmNvbnN0IHZhbGlkYXRlQ2FyZE51bWJlciA9IGZ1bmN0aW9uKG51bSkge1xuICAgIGxldCBjYXJkLCByZWY7XG4gICAgbnVtID0gKG51bSArICcnKS5yZXBsYWNlKC9cXHMrfC0vZywgJycpO1xuICAgIGlmICghL15cXGQrJC8udGVzdChudW0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY2FyZCA9IGNhcmRGcm9tTnVtYmVyKG51bSk7XG4gICAgaWYgKCFjYXJkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChyZWYgPSBudW0ubGVuZ3RoLCBpbmRleE9mLmNhbGwoY2FyZC5sZW5ndGgsIHJlZikgPj0gMCkgJiYgKGNhcmQubHVobiA9PT0gZmFsc2UgfHwgbHVobkNoZWNrKG51bSkpO1xufTtcblxuY29uc3QgdmFsaWRhdGVDYXJkRXhwaXJ5ID0gZnVuY3Rpb24obW9udGgsIHllYXIpIHtcbiAgICB2YXIgY3VycmVudFRpbWUsIGV4cGlyeSwgcmVmO1xuICAgIGlmICh0eXBlb2YgbW9udGggPT09ICdvYmplY3QnICYmICdtb250aCcgaW4gbW9udGgpIHtcbiAgICAgICAgcmVmID0gbW9udGgsIG1vbnRoID0gcmVmLm1vbnRoLCB5ZWFyID0gcmVmLnllYXI7XG4gICAgfVxuICAgIGlmICghKG1vbnRoICYmIHllYXIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbW9udGggPSBTdHJpbmcobW9udGgpLnRyaW0oKTtcbiAgICB5ZWFyID0gU3RyaW5nKHllYXIpLnRyaW0oKTtcbiAgICBpZiAoIS9eXFxkKyQvLnRlc3QobW9udGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCEvXlxcZCskLy50ZXN0KHllYXIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCEoKDEgPD0gbW9udGggJiYgbW9udGggPD0gMTIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh5ZWFyLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBpZiAoeWVhciA8IDcwKSB7XG4gICAgICAgICAgICB5ZWFyID0gJzIwJyArIHllYXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB5ZWFyID0gJzE5JyArIHllYXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHllYXIubGVuZ3RoICE9PSA0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZXhwaXJ5ID0gbmV3IERhdGUoeWVhciwgbW9udGgpO1xuICAgIGN1cnJlbnRUaW1lID0gbmV3IERhdGU7XG4gICAgZXhwaXJ5LnNldE1vbnRoKGV4cGlyeS5nZXRNb250aCgpIC0gMSk7XG4gICAgZXhwaXJ5LnNldE1vbnRoKGV4cGlyeS5nZXRNb250aCgpICsgMSwgMSk7XG4gICAgcmV0dXJuIGV4cGlyeSA+IGN1cnJlbnRUaW1lO1xufTtcblxuY29uc3QgdmFsaWRhdGVDYXJkY3Z2ID0gZnVuY3Rpb24oY3Z2LCB0eXBlKSB7XG4gICAgbGV0IGNhcmQsIHJlZjtcbiAgICBjdnYgPSBTdHJpbmcoY3Z2KS50cmltKCk7XG4gICAgaWYgKCEvXlxcZCskLy50ZXN0KGN2dikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjYXJkID0gY2FyZEZyb21UeXBlKHR5cGUpO1xuICAgIGlmIChjYXJkICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlZiA9IGN2di5sZW5ndGgsIGluZGV4T2YuY2FsbChjYXJkLmN2dkxlbmd0aCwgcmVmKSA+PSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjdnYubGVuZ3RoID49IDMgJiYgY3Z2Lmxlbmd0aCA8PSA0O1xuICAgIH1cbn07XG5cbmNvbnN0IGNyZWRpdENhcmRWTSA9IHtcbiAgICBzZXRFdmVudHM6IHNldEV2ZW50cyxcbiAgICB2YWxpZGF0ZUNhcmROdW1iZXI6IHZhbGlkYXRlQ2FyZE51bWJlcixcbiAgICB2YWxpZGF0ZUNhcmRjdnY6IHZhbGlkYXRlQ2FyZGN2dixcbiAgICB2YWxpZGF0ZUNhcmRFeHBpcnk6IHZhbGlkYXRlQ2FyZEV4cGlyeVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlZGl0Q2FyZFZNO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgY3JlZGl0Q2FyZFZNIGZyb20gJy4uL3Ztcy9jcmVkaXQtY2FyZC12bSc7XG5cbmNvbnN0IGNyZWRpdENhcmRJbnB1dCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgIGNvbnN0IGNhcmRUeXBlID0gYXJncy50eXBlIHx8IG0ucHJvcCgndW5rbm93bicpO1xuICAgICAgLy8gVE9ETzogbW92ZSBhbGwgaW5wdXQgbG9naWMgdG8gdmRvbSBwYXJhZGlnbVxuICAgICAgLy8gQ3JlZGl0Q2FyZCBJbnB1dCBzdGlsbCBoYW5kbGUgZXZlbnRzIG9uIGEgZG9tLWJhc2VkIG1vZGVsLlxuICAgICAgY29uc3Qgc2V0Q3JlZGl0Q2FyZEhhbmRsZXJzID0gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XG4gICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgIGNyZWRpdENhcmRWTS5zZXRFdmVudHMoZWwsIGNhcmRUeXBlLCBhcmdzLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAgIHNldENyZWRpdENhcmRIYW5kbGVyczogc2V0Q3JlZGl0Q2FyZEhhbmRsZXJzLFxuICAgICAgICAgIGNhcmRUeXBlOiBjYXJkVHlwZVxuICAgICAgfTtcbiAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBtKGBpbnB1dC53LWlucHV0LnRleHQtZmllbGRbbmFtZT1cIiR7YXJncy5uYW1lfVwiXVtyZXF1aXJlZD1cInJlcXVpcmVkXCJdW3R5cGU9XCJ0ZWxcIl1gLCB7XG4gICAgICAgICAgb25mb2N1czogYXJncy5vbmZvY3VzLFxuICAgICAgICAgIGNsYXNzOiBhcmdzLmNsYXNzLFxuICAgICAgICAgIGNvbmZpZzogY3RybC5zZXRDcmVkaXRDYXJkSGFuZGxlcnMsXG4gICAgICAgICAgb25ibHVyOiBhcmdzLm9uYmx1clxuICAgICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWRpdENhcmRJbnB1dDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCB0b29sdGlwIGZyb20gJy4vdG9vbHRpcCc7XG5pbXBvcnQgY3JlZGl0Q2FyZFZNIGZyb20gJy4uL3Ztcy9jcmVkaXQtY2FyZC12bSc7XG5pbXBvcnQgY3JlZGl0Q2FyZElucHV0IGZyb20gJy4vY3JlZGl0LWNhcmQtaW5wdXQnO1xuaW1wb3J0IGlubGluZUVycm9yIGZyb20gJy4vaW5saW5lLWVycm9yJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuY29udHJpYnV0aW9ucy5lZGl0LmVycm9ycycpO1xuXG5jb25zdCBwYXltZW50Q3JlZGl0Q2FyZCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3Qgdm0gPSBhcmdzLnZtLFxuICAgICAgICAgICAgbG9hZGluZ0luc3RhbGxtZW50cyA9IG0ucHJvcCh0cnVlKSxcbiAgICAgICAgICAgIGxvYWRpbmdTYXZlZENyZWRpdENhcmRzID0gbS5wcm9wKHRydWUpLFxuICAgICAgICAgICAgc2VsZWN0ZWRDcmVkaXRDYXJkID0gbS5wcm9wKHtpZDogLTF9KSxcbiAgICAgICAgICAgIHNlbGVjdGVkSW5zdGFsbG1lbnQgPSBtLnByb3AoJzEnKSxcbiAgICAgICAgICAgIHNob3dGb3JtID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgIGNyZWRpdENhcmRUeXBlID0gbS5wcm9wKCd1bmtub3duJyksXG4gICAgICAgICAgICBlcnJvcnMgPSBtLnByb3AoW10pO1xuXG4gICAgICAgIGNvbnN0IG9uU3VibWl0ID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ3JlZGl0Q2FyZCgpLmlkID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGNoZWNrY3Z2KCk7XG4gICAgICAgICAgICAgICAgY2hlY2tFeHBpcnkoKTtcbiAgICAgICAgICAgICAgICBjaGVja0NyZWRpdENhcmQoKTtcbiAgICAgICAgICAgICAgICBjaGVja0NyZWRpdENhcmROYW1lKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZtLmNyZWRpdENhcmRGaWVsZHMuZXJyb3JzKFtdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZtLmNyZWRpdENhcmRGaWVsZHMuZXJyb3JzKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdm0uc2VuZFBheW1lbnQoc2VsZWN0ZWRDcmVkaXRDYXJkLCBzZWxlY3RlZEluc3RhbGxtZW50LCBhcmdzLmNvbnRyaWJ1dGlvbl9pZCwgYXJncy5wcm9qZWN0X2lkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVZhbGlkaXR5ID0gKGlzVmFsaWQsIGVycm9yT2JqKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICB2bS5jcmVkaXRDYXJkRmllbGRzLmVycm9ycygpLnB1c2goZXJyb3JPYmopO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvcnNXaXRob3V0ID0gXy5yZWplY3Qodm0uY3JlZGl0Q2FyZEZpZWxkcy5lcnJvcnMoKSwgKGVycikgPT4gXy5pc0VxdWFsKGVyciwgZXJyb3JPYmopKTtcbiAgICAgICAgICAgICAgICB2bS5jcmVkaXRDYXJkRmllbGRzLmVycm9ycyhlcnJvcnNXaXRob3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBjaGVja2N2diA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSBjcmVkaXRDYXJkVk0udmFsaWRhdGVDYXJkY3Z2KHZtLmNyZWRpdENhcmRGaWVsZHMuY3Z2KCksIGNyZWRpdENhcmRUeXBlKCkpLFxuICAgICAgICAgICAgICAgIGVycm9yT2JqID0ge2ZpZWxkOiAnY3Z2JywgbWVzc2FnZTogSTE4bi50KCdpbmxpbmUuY3JlZGl0Y2FyZF9jdnYnLCBJMThuU2NvcGUoKSl9O1xuXG4gICAgICAgICAgICBoYW5kbGVWYWxpZGl0eShpc1ZhbGlkLCBlcnJvck9iaik7XG5cbiAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGNoZWNrRXhwaXJ5ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IGNyZWRpdENhcmRWTS52YWxpZGF0ZUNhcmRFeHBpcnkodm0uY3JlZGl0Q2FyZEZpZWxkcy5leHBNb250aCgpLCB2bS5jcmVkaXRDYXJkRmllbGRzLmV4cFllYXIoKSksXG4gICAgICAgICAgICAgICAgZXJyb3JPYmogPSB7ZmllbGQ6ICdleHBpcnknLCBtZXNzYWdlOiBJMThuLnQoJ2lubGluZS5jcmVkaXRjYXJkX2V4cGlyeScsIEkxOG5TY29wZSgpKX07XG5cbiAgICAgICAgICAgIGhhbmRsZVZhbGlkaXR5KGlzVmFsaWQsIGVycm9yT2JqKTtcblxuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgY2hlY2tDcmVkaXRDYXJkID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IGNyZWRpdENhcmRWTS52YWxpZGF0ZUNhcmROdW1iZXIodm0uY3JlZGl0Q2FyZEZpZWxkcy5udW1iZXIoKSksXG4gICAgICAgICAgICAgICAgZXJyb3JPYmogPSB7ZmllbGQ6ICdudW1iZXInLCBtZXNzYWdlOiBJMThuLnQoJ2lubGluZS5jcmVkaXRjYXJkX251bWJlcicsIEkxOG5TY29wZSgpKX07XG5cbiAgICAgICAgICAgIGhhbmRsZVZhbGlkaXR5KGlzVmFsaWQsIGVycm9yT2JqKTtcblxuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgY2hlY2tDcmVkaXRDYXJkTmFtZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRTdHJpbmcgPSB2bS5jcmVkaXRDYXJkRmllbGRzLm5hbWUoKS5yZXBsYWNlKC8gL2csJycpO1xuICAgICAgICAgICAgY29uc3QgY2hhcnNPbmx5ID0gL15bYS16QS1aXSokLztcbiAgICAgICAgICAgIGNvbnN0IGVycm9yT2JqID0ge2ZpZWxkOiAnbmFtZScsIG1lc3NhZ2U6IEkxOG4udCgnaW5saW5lLmNyZWRpdGNhcmRfbmFtZScsIEkxOG5TY29wZSgpKX07XG4gICAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gIShfLmlzRW1wdHkodHJpbW1lZFN0cmluZykgfHwgIWNoYXJzT25seS50ZXN0KHRyaW1tZWRTdHJpbmcpKTtcblxuICAgICAgICAgICAgaGFuZGxlVmFsaWRpdHkoaXNWYWxpZCwgZXJyb3JPYmopO1xuXG4gICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBhcHBseUNyZWRpdENhcmROYW1lTWFzayA9IF8uY29tcG9zZSh2bS5jcmVkaXRDYXJkRmllbGRzLm5hbWUsIGgubm9OdW1iZXJzTWFzayk7XG5cbiAgICAgICAgY29uc3QgYXBwbHlDdnZNYXNrID0gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZXRWYWx1ZSA9IGgubnVtYmVyc09ubHlNYXNrKHZhbHVlLnN1YnN0cigwLCA0KSk7XG5cbiAgICAgICAgICAgIHJldHVybiB2bS5jcmVkaXRDYXJkRmllbGRzLmN2dihzZXRWYWx1ZSlcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBmaWVsZEhhc0Vycm9yID0gKGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGRXaXRoRXJyb3IgPSBfLmZpbmRXaGVyZSh2bS5jcmVkaXRDYXJkRmllbGRzLmVycm9ycygpLCB7ZmllbGQ6IGZpZWxkTmFtZX0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZmllbGRXaXRoRXJyb3IgPyBtLmNvbXBvbmVudChpbmxpbmVFcnJvciwge21lc3NhZ2U6IGZpZWxkV2l0aEVycm9yLm1lc3NhZ2V9KSA6ICcnO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGJ1aWxkVG9vbHRpcCA9ICh0b29sdGlwVGV4dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KHRvb2x0aXAsIHtcbiAgICAgICAgICAgICAgICBlbDogJy50b29sdGlwLXdyYXBwZXIuZmEuZmEtcXVlc3Rpb24tY2lyY2xlLmZvbnRjb2xvci1zZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRvb2x0aXBUZXh0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiAzODBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGlzQ3JlZGl0Q2FyZFNlbGVjdGVkID0gKGNhcmQsIGlkeCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkQ3JlZGl0Q2FyZCgpID09PSBjYXJkO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGxvYWRQYWdhcm1lID0gKGVsLCBpc0luaXQpID0+IHtcbiAgICAgICAgICAgIGlmICghaXNJbml0KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICAgICAgc2NyaXB0LnNyYyA9ICcvL2Fzc2V0cy5wYWdhci5tZS9qcy9wYWdhcm1lLm1pbi5qcyc7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZtLnBhZ2FybWUod2luZG93LlBhZ2FyTWUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0Q3JlZGl0Q2FyZCA9IChjYXJkKSA9PiB7XG4gICAgICAgICAgICBzZWxlY3RlZENyZWRpdENhcmQoY2FyZCk7XG5cbiAgICAgICAgICAgIGlmIChjYXJkLmlkID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHNob3dGb3JtKHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaG93Rm9ybShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdm0uZ2V0SW5zdGFsbG1lbnRzKGFyZ3MuY29udHJpYnV0aW9uX2lkKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvYWRpbmdJbnN0YWxsbWVudHMoZmFsc2UpO1xuICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB2bS5nZXRTYXZlZENyZWRpdENhcmRzKGFyZ3MudXNlcl9pZClcbiAgICAgICAgICAgIC50aGVuKChzYXZlZENhcmRzKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9hZGluZ1NhdmVkQ3JlZGl0Q2FyZHMoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHNlbGVjdENyZWRpdENhcmQoc2F2ZWRDYXJkc1swXSk7XG4gICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2bTogdm0sXG4gICAgICAgICAgICBvblN1Ym1pdDogb25TdWJtaXQsXG4gICAgICAgICAgICBmaWVsZEhhc0Vycm9yOiBmaWVsZEhhc0Vycm9yLFxuICAgICAgICAgICAgYnVpbGRUb29sdGlwOiBidWlsZFRvb2x0aXAsXG4gICAgICAgICAgICBsb2FkaW5nSW5zdGFsbG1lbnRzOiBsb2FkaW5nSW5zdGFsbG1lbnRzLFxuICAgICAgICAgICAgbG9hZGluZ1NhdmVkQ3JlZGl0Q2FyZHM6IGxvYWRpbmdTYXZlZENyZWRpdENhcmRzLFxuICAgICAgICAgICAgaW5zdGFsbG1lbnRzOiB2bS5pbnN0YWxsbWVudHMsXG4gICAgICAgICAgICBzZWxlY3RlZEluc3RhbGxtZW50OiBzZWxlY3RlZEluc3RhbGxtZW50LFxuICAgICAgICAgICAgc2F2ZWRDcmVkaXRDYXJkczogdm0uc2F2ZWRDcmVkaXRDYXJkcyxcbiAgICAgICAgICAgIGNyZWRpdENhcmQ6IHZtLmNyZWRpdENhcmRGaWVsZHMsXG4gICAgICAgICAgICBjcmVkaXRDYXJkVHlwZTogY3JlZGl0Q2FyZFR5cGUsXG4gICAgICAgICAgICBjaGVja0NyZWRpdENhcmQ6IGNoZWNrQ3JlZGl0Q2FyZCxcbiAgICAgICAgICAgIGNoZWNrQ3JlZGl0Q2FyZE5hbWU6IGNoZWNrQ3JlZGl0Q2FyZE5hbWUsXG4gICAgICAgICAgICBhcHBseUNyZWRpdENhcmROYW1lTWFzazogYXBwbHlDcmVkaXRDYXJkTmFtZU1hc2ssXG4gICAgICAgICAgICBhcHBseUNyZWRpdENhcmRNYXNrOiB2bS5hcHBseUNyZWRpdENhcmRNYXNrLFxuICAgICAgICAgICAgYXBwbHlDdnZNYXNrOiBhcHBseUN2dk1hc2ssXG4gICAgICAgICAgICBjaGVja2N2djogY2hlY2tjdnYsXG4gICAgICAgICAgICBzZWxlY3RDcmVkaXRDYXJkOiBzZWxlY3RDcmVkaXRDYXJkLFxuICAgICAgICAgICAgaXNDcmVkaXRDYXJkU2VsZWN0ZWQ6IGlzQ3JlZGl0Q2FyZFNlbGVjdGVkLFxuICAgICAgICAgICAgZXhwTW9udGhzOiB2bS5leHBNb250aE9wdGlvbnMoKSxcbiAgICAgICAgICAgIGV4cFllYXJzOiB2bS5leHBZZWFyT3B0aW9ucygpLFxuICAgICAgICAgICAgbG9hZFBhZ2FybWU6IGxvYWRQYWdhcm1lLFxuICAgICAgICAgICAgc2hvd0Zvcm06IHNob3dGb3JtXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJy53LWZvcm0udS1tYXJnaW5ib3R0b20tNDAnLCB7XG4gICAgICAgICAgICBjb25maWc6IGN0cmwubG9hZFBhZ2FybWVcbiAgICAgICAgfSxbXG4gICAgICAgICAgICBtKCdmb3JtW25hbWU9XCJlbWFpbC1mb3JtXCJdJywge1xuICAgICAgICAgICAgICAgIG9uc3VibWl0OiBjdHJsLm9uU3VibWl0XG4gICAgICAgICAgICB9LFtcbiAgICAgICAgICAgICAgICAoIWN0cmwubG9hZGluZ1NhdmVkQ3JlZGl0Q2FyZHMoKSAmJiAoY3RybC5zYXZlZENyZWRpdENhcmRzKCkubGVuZ3RoID4gMSkpID8gbSgnLm15LWNyZWRpdC1jYXJkcy53LWZvcm0uYmFjay1wYXltZW50LWZvcm0tY3JlZGl0Y2FyZC5yZWNvcmRzLWNob2ljZS51LW1hcmdpbmJvdHRvbS00MCcsXG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKGN0cmwuc2F2ZWRDcmVkaXRDYXJkcygpLCAoY2FyZCwgaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbShgZGl2I2NyZWRpdC1jYXJkLXJlY29yZC0ke2lkeH0udy1yb3cuY3JlZGl0Y2FyZC1yZWNvcmRzYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2N1cnNvcjpwb2ludGVyOycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ICgpID0+IGN0cmwuc2VsZWN0Q3JlZGl0Q2FyZChjYXJkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMS53LXN1Yi1jb2wnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcmFkaW8udy1jbGVhcmZpeC5iYWNrLXBheW1lbnQtY3JlZGl0LWNhcmQtcmFkaW8tZmllbGQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjdHJsLmlzQ3JlZGl0Q2FyZFNlbGVjdGVkKGNhcmQsIGlkeCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwYXltZW50X3N1YnNjcmlwdGlvbl9jYXJkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3JhZGlvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNhcmQuY2FyZF9rZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkLmlkID09PSAtMSA/IG0oJy53LWNvbC53LWNvbC0xMScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udGNvbG9yLXNlY29uZGFyeScsICdVc2FyIG91dHJvIGNhcnTDo28gZGUgY3LDqWRpdG8uJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1zdWItY29sLnctc3ViLWNvbC1taWRkbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udHdlaWdodC1zZW1pYm9sZC50ZXh0LXN1Y2Nlc3MnLCBjYXJkLmNhcmRfYnJhbmQudG9VcHBlckNhc2UoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01Lnctc3ViLWNvbC53LXN1Yi1jb2wtbWlkZGxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMjAnLCBgWFhYWC5YWFhYLlhYWFguJHtjYXJkLmxhc3RfZGlnaXRzfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjdHJsLmxvYWRpbmdJbnN0YWxsbWVudHMoKSB8fCAoY3RybC5pbnN0YWxsbWVudHMoKS5sZW5ndGggPD0gMSkpID8gJycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc2VsZWN0Lnctc2VsZWN0LnRleHQtZmllbGQudGV4dC1maWVsZC1jcmVkaXRjYXJkJyx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5zZWxlY3RlZEluc3RhbGxtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5zZWxlY3RlZEluc3RhbGxtZW50KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLF8ubWFwKGN0cmwuaW5zdGFsbG1lbnRzKCksIChpbnN0YWxsbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKGBvcHRpb25bdmFsdWU9XCIke2luc3RhbGxtZW50Lm51bWJlcn1cIl1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtpbnN0YWxsbWVudC5udW1iZXJ9IFggUiQgJHtpbnN0YWxsbWVudC5hbW91bnR9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICkgOiBjdHJsLmxvYWRpbmdTYXZlZENyZWRpdENhcmRzKCkgPyBtKCcuZm9udHNpemUtc21hbGwudS1tYXJnaW5ib3R0b20tNDAnLCAnQ2FycmVnYW5kbyBpbmZvcm1hw6fDtWVzIGRlIGNhcnTDo28uLi4nKSA6ICcnLFxuICAgICAgICAgICAgICAgICFjdHJsLnNob3dGb3JtKCkgPyAnJyA6IG0oJyNjcmVkaXQtY2FyZC1wYXltZW50LWZvcm0udS1tYXJnaW5ib3R0b20tNDAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdiNjcmVkaXQtY2FyZC1uYW1lJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwuZmllbGQtbGFiZWwuZm9udHdlaWdodC1zZW1pYm9sZFtmb3I9XCJjcmVkaXQtY2FyZC1uYW1lXCJdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTm9tZSBubyBjYXJ0w6NvIGRlIGNyw6lkaXRvIConXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci10ZXJjaWFyeS51LW1hcmdpbmJvdHRvbS0xMC5maWVsZC1sYWJlbC10aXAudS1tYXJnaW5ib3R0b20tMTAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdOb21lIGltcHJlc3NvIG5hIGZyZW50ZSBkbyBzZXUgY2FydMOjbyBkZSBjcsOpZGl0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWlucHV0LnRleHQtZmllbGRbbmFtZT1cImNyZWRpdC1jYXJkLW5hbWVcIl1bcmVxdWlyZWQ9XCJyZXF1aXJlZFwiXVt0eXBlPVwidGV4dFwiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmZvY3VzOiBjdHJsLnZtLnJlc2V0Q3JlZGl0Q2FyZEZpZWxkRXJyb3IoJ25hbWUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5maWVsZEhhc0Vycm9yKCduYW1lJykgPyAnZXJyb3InIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25ibHVyOiBjdHJsLmNoZWNrQ3JlZGl0Q2FyZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25rZXl1cDogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLmFwcGx5Q3JlZGl0Q2FyZE5hbWVNYXNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5jcmVkaXRDYXJkLm5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmZpZWxkSGFzRXJyb3IoJ25hbWUnKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2I2NyZWRpdC1jYXJkLW51bWJlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPVwiY3JlZGl0LWNhcmQtbnVtYmVyXCJdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTsO6bWVybyBkbyBjYXJ0w6NvIGRlIGNyw6lkaXRvIConXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci10ZXJjaWFyeS51LW1hcmdpbmJvdHRvbS0xMC5maWVsZC1sYWJlbC10aXAudS1tYXJnaW5ib3R0b20tMTAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdPIG7Dum1lcm8gbm9ybWFsbWVudGUgY29tIDE2IGTDrWdpdG9zIG5hIGZyZW50ZSBkbyBzZXUgY2FydMOjbyBkZSBjcsOpZGl0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChjcmVkaXRDYXJkSW5wdXQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmZvY3VzOiBjdHJsLnZtLnJlc2V0Q3JlZGl0Q2FyZEZpZWxkRXJyb3IoJ251bWJlcicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uYmx1cjogY3RybC5jaGVja0NyZWRpdENhcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGN0cmwuZmllbGRIYXNFcnJvcignbnVtYmVyJykgPyAnZXJyb3InIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwuY3JlZGl0Q2FyZC5udW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2NyZWRpdC1jYXJkLW51bWJlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY3RybC5jcmVkaXRDYXJkVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmZpZWxkSGFzRXJyb3IoJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYjY3JlZGl0LWNhcmQtZGF0ZScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPVwiZXhwaXJhdGlvbi1kYXRlXCJdJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdFeHBpcmHDp8OjbyAobW0vYWFhYSkqICdcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci10ZXJjaWFyeS51LW1hcmdpbmJvdHRvbS0xMC5maWVsZC1sYWJlbC10aXAudS1tYXJnaW5ib3R0b20tMTAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBIGRhdGEgZGUgdmFsaWRhZGUsIGdlcmFsbWVudGUgbmEgZnJlbnRlIGRvIGNhcnTDo28nXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02LnctY29sLXRpbnktNi53LXN1Yi1jb2wtbWlkZGxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc2VsZWN0Lnctc2VsZWN0LnRleHQtZmllbGRbbmFtZT1cImV4cGlyYXRpb24tZGF0ZV9tb250aFwiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZm9jdXM6IGN0cmwudm0ucmVzZXRDcmVkaXRDYXJkRmllbGRFcnJvcignZXhwaXJ5JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5maWVsZEhhc0Vycm9yKCdleHBpcnknKSA/ICdlcnJvcicgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuY3JlZGl0Q2FyZC5leHBNb250aCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5jcmVkaXRDYXJkLmV4cE1vbnRoKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgXy5tYXAoY3RybC5leHBNb250aHMsIG1vbnRoID0+IG0oJ29wdGlvbicsIHt2YWx1ZTogbW9udGhbMF19LCBtb250aFsxXSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtdGlueS02JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc2VsZWN0Lnctc2VsZWN0LnRleHQtZmllbGRbbmFtZT1cImV4cGlyYXRpb24tZGF0ZV95ZWFyXCJdJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldENyZWRpdENhcmRGaWVsZEVycm9yKCdleHBpcnknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmZpZWxkSGFzRXJyb3IoJ2V4cGlyeScpID8gJ2Vycm9yJyA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5jcmVkaXRDYXJkLmV4cFllYXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwuY3JlZGl0Q2FyZC5leHBZZWFyKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgXy5tYXAoY3RybC5leHBZZWFycywgeWVhciA9PiBtKCdvcHRpb24nLCB7dmFsdWU6IHllYXJ9LCB5ZWFyKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTInLCBjdHJsLmZpZWxkSGFzRXJyb3IoJ2V4cGlyeScpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdiNjcmVkaXQtY2FyZC1jdnYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj1cImNyZWRpdC1jYXJkLWN2dlwiXScsW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDw7NkaWdvIGRlIFNlZ3VyYW7Dp2EgKENWViAvIENWVjIpKiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuYnVpbGRUb29sdGlwKCdPcyAzIG91IDQgZMOtZ2l0b3MgcXVlIGVzdMOjbyBuYXMgY29zdGFzIGRvcyBjYXJ0w7VlcyBWSVNBLCBNQVNURVIsIERJTkVSUywgRUxPIGUgbmEgZnJlbnRlIGRvIGNhcnTDo28gQU1FWC4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXRlcmNpYXJ5LnUtbWFyZ2luYm90dG9tLTEwLmZpZWxkLWxhYmVsLXRpcC51LW1hcmdpbmJvdHRvbS0xMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ09zIDMgZMOtZ2l0b3MgKHF1YW5kbyBuYSBmcmVudGUpIG91IDQgZMOtZ2l0b3MgKHF1YW5kbyBhdHLDoXMpIGRvIHNldSBjYXJ0w6NvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC53LWNvbC10aW55LTYudy1zdWItY29sLW1pZGRsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZFtuYW1lPVwiY3JlZGl0LWNhcmQtY3Z2XCJdW3JlcXVpcmVkPVwicmVxdWlyZWRcIl1bdHlwZT1cInRlbFwiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZm9jdXM6IGN0cmwudm0ucmVzZXRDcmVkaXRDYXJkRmllbGRFcnJvcignY3Z2JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5maWVsZEhhc0Vycm9yKCdjdnYnKSA/ICdlcnJvcicgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ua2V5dXA6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5hcHBseUN2dk1hc2spLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25ibHVyOiBjdHJsLmNoZWNrY3Z2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwuY3JlZGl0Q2FyZC5jdnYoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5maWVsZEhhc0Vycm9yKCdjdnYnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jb2wtdGlueS02LnUtdGV4dC1jZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVwiaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NzI5OGMxYzdlOTk5MjZlNzcxMjdiZGRfY3Z2LWNhcmQuanBnXCJdW3dpZHRoPVwiMTc2XCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgKGN0cmwubG9hZGluZ0luc3RhbGxtZW50cygpIHx8IChjdHJsLmluc3RhbGxtZW50cygpLmxlbmd0aCA8PSAxKSkgPyAnJyA6IG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPVwic3BsaXRcIl0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGFyY2VsYXMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzZWxlY3Qudy1zZWxlY3QudGV4dC1maWVsZFtuYW1lPVwic3BsaXRcIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuc2VsZWN0ZWRJbnN0YWxsbWVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnNlbGVjdGVkSW5zdGFsbG1lbnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIF8ubWFwKGN0cmwuaW5zdGFsbG1lbnRzKCksIChpbnN0YWxsbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oYG9wdGlvblt2YWx1ZT1cIiR7aW5zdGFsbG1lbnQubnVtYmVyfVwiXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7aW5zdGFsbG1lbnQubnVtYmVyfSBYIFIkICR7aW5zdGFsbG1lbnQuYW1vdW50fWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JylcbiAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgbSgnLnctY2hlY2tib3gudy1jbGVhcmZpeCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0I3BheW1lbnRfc2F2ZV9jYXJkLnctY2hlY2tib3gtaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdW25hbWU9XCJwYXltZW50X3NhdmVfY2FyZFwiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cignY2hlY2tlZCcsIGN0cmwuY3JlZGl0Q2FyZC5zYXZlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjdHJsLmNyZWRpdENhcmQuc2F2ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLnctZm9ybS1sYWJlbFtmb3I9XCJwYXltZW50X3NhdmVfY2FyZFwiXScsICdRdWVybyBzYWx2YXIgbWV1IGNhcnTDo28gZGUgY3LDqWRpdG8gcGFyYSBmYWNpbGl0YXIgYXBvaW9zIGZ1dHVyb3MuJylcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXB1c2gtMicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICFfLmlzRW1wdHkoY3RybC52bS5zdWJtaXNzaW9uRXJyb3IoKSkgPyBtKCcuY2FyZC5jYXJkLWVycm9yLnUtcmFkaXVzLnppbmRleC0xMC51LW1hcmdpbmJvdHRvbS0zMC5mb250c2l6ZS1zbWFsbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tMTAuZm9udHdlaWdodC1ib2xkJywgbS50cnVzdChjdHJsLnZtLnN1Ym1pc3Npb25FcnJvcigpKSkpIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnZtLmlzTG9hZGluZygpID8gaC5sb2FkZXIoKSA6IG0oJ2lucHV0LmJ0bi5idG4tbGFyZ2UudS1tYXJnaW5ib3R0b20tMjBbdHlwZT1cInN1Ym1pdFwiXScse3ZhbHVlOiAnRmluYWxpemFyIHBhZ2FtZW50byd9LCAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0zMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQW8gYXBvaWFyLCB2b2PDqiBjb25jb3JkYSBjb20gb3MgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XFwnL3B0L3Rlcm1zLW9mLXVzZVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVGVybW9zIGRlIFVzbyAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZSAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EuYWx0LWxpbmtbaHJlZj1cXCcvcHQvcHJpdmFjeS1wb2xpY3lcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1BvbMOtdGljYSBkZSBQcml2YWNpZGFkZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXltZW50Q3JlZGl0Q2FyZDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcGF5bWVudFNsaXAgZnJvbSAnLi9wYXltZW50LXNsaXAnO1xuaW1wb3J0IHBheW1lbnRDcmVkaXRDYXJkIGZyb20gJy4vcGF5bWVudC1jcmVkaXQtY2FyZCc7XG5cbmNvbnN0IHBheW1lbnRGb3JtID0ge1xuICAgIGNvbnRyb2xsZXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2dnbGVCb2xldG86IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSlcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnI2NhdGFyc2VfcGFnYXJtZV9mb3JtJywgW1xuICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXItc21hbGwtb25seS51LW1hcmdpbmJvdHRvbS0zMCcsIFtcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UuZm9udHdlaWdodC1zZW1pYm9sZCcsXG4gICAgICAgICAgICAgICAgICAgICdFc2NvbGhhIG8gbWVpbyBkZSBwYWdhbWVudG8nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeS5mb250d2VpZ2h0LXNlbWlib2xkJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWxvY2snKSxcbiAgICAgICAgICAgICAgICAgICAgJyBQQUdBTUVOVE8gU0VHVVJPJ1xuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy5mbGV4LXJvdy51LW1hcmdpbmJvdHRvbS00MCcsIFtcbiAgICAgICAgICAgICAgICBtKCdhLnctaW5saW5lLWJsb2NrLmJ0bi1zZWxlY3QuZmxleC1jb2x1bW4udS1tYXJnaW5ib3R0b20tMjAudS10ZXh0LWNlbnRlcltocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddJywge1xuICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnRvZ2dsZUJvbGV0by50b2dnbGUsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAhY3RybC50b2dnbGVCb2xldG8oKSA/ICdzZWxlY3RlZCcgOiAnJ1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ2FydMOjbyBkZSBjcsOpZGl0bydcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkuZm9udHNpemUtc21hbGxlc3QudS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJyhuw6NvIGFjZWl0YW1vcyBjYXJ0w6NvIGRlIGTDqWJpdG8pJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTcyOTliZDhmMzI2YTI0ZDQ4MjhhMGZkX2NyZWRpdC1jYXJkcy5wbmdcXCddJylcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAhYXJncy52bS5pc0ludGVybmF0aW9uYWwoKSA/IG0oJ2Eudy1pbmxpbmUtYmxvY2suYnRuLXNlbGVjdC5mbGV4LWNvbHVtbi51LW1hcmdpbmJvdHRvbS0yMC51LXRleHQtY2VudGVyW2hyZWY9XFwnamF2YXNjcmlwdDp2b2lkKDApO1xcJ10nLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlQm9sZXRvLnRvZ2dsZSxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGN0cmwudG9nZ2xlQm9sZXRvKCkgPyAnc2VsZWN0ZWQnIDogJydcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0JvbGV0byBiYW5jw6FyaW8nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1tzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NzI5OWM2ZWY5NmE2ZTQ0NDg5YTdhMDdfYm9sZXRvLnBuZ1xcJ11bd2lkdGg9XFwnNDhcXCddJylcbiAgICAgICAgICAgICAgICBdKSA6IG0oJy5mbGV4LWNvbHVtbicpXG4gICAgICAgICAgICBdKSwgIWN0cmwudG9nZ2xlQm9sZXRvKCkgPyBtKCcjY3JlZGl0LWNhcmQtc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwYXltZW50Q3JlZGl0Q2FyZCwge3ZtOiBhcmdzLnZtLCBjb250cmlidXRpb25faWQ6IGFyZ3MuY29udHJpYnV0aW9uX2lkLCBwcm9qZWN0X2lkOiBhcmdzLnByb2plY3RfaWQsIHVzZXJfaWQ6IGFyZ3MudXNlcl9pZH0pXG4gICAgICAgICAgICBdKSA6ICFhcmdzLnZtLmlzSW50ZXJuYXRpb25hbCgpID8gbSgnI2JvbGV0by1zZWN0aW9uJywgW1xuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHBheW1lbnRTbGlwLCB7dm06IGFyZ3Mudm0sIGNvbnRyaWJ1dGlvbl9pZDogYXJncy5jb250cmlidXRpb25faWQsIHByb2plY3RfaWQ6IGFyZ3MucHJvamVjdF9pZH0pXG4gICAgICAgICAgICBdKSA6ICcnXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBheW1lbnRGb3JtO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IGNvbnRyaWJ1dGlvblZNIGZyb20gJy4uL3Ztcy9jb250cmlidXRpb24tdm0nO1xuaW1wb3J0IHJld2FyZFZNIGZyb20gJy4uL3Ztcy9yZXdhcmQtdm0nO1xuaW1wb3J0IHBheW1lbnRWTSBmcm9tICcuLi92bXMvcGF5bWVudC12bSc7XG5pbXBvcnQgcHJvamVjdFZNIGZyb20gJy4uL3Ztcy9wcm9qZWN0LXZtJztcbmltcG9ydCBmYXFCb3ggZnJvbSAnLi4vYy9mYXEtYm94JztcbmltcG9ydCBwYXltZW50Rm9ybSBmcm9tICcuLi9jL3BheW1lbnQtZm9ybSc7XG5pbXBvcnQgaW5saW5lRXJyb3IgZnJvbSAnLi4vYy9pbmxpbmUtZXJyb3InO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5jb250cmlidXRpb25zJyk7XG5cbmNvbnN0IHByb2plY3RzUGF5bWVudCA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RWTS5nZXRDdXJyZW50UHJvamVjdCgpLFxuICAgICAgICAgICAgbW9kZSA9IHByb2plY3QubW9kZSxcbiAgICAgICAgICAgIHByb2plY3RVc2VySWQgPSBwcm9qZWN0LnVzZXIuaWQsXG4gICAgICAgICAgICB2bSA9IHBheW1lbnRWTShtb2RlKSxcbiAgICAgICAgICAgIHNob3dQYXltZW50Rm9ybSA9IG0ucHJvcChmYWxzZSksXG4gICAgICAgICAgICBjb250cmlidXRpb24gPSBjb250cmlidXRpb25WTS5nZXRDdXJyZW50Q29udHJpYnV0aW9uKCksXG4gICAgICAgICAgICByZXdhcmQgPSBtLnByb3AoY29udHJpYnV0aW9uKCkucmV3YXJkKSxcbiAgICAgICAgICAgIHZhbHVlID0gY29udHJpYnV0aW9uKCkudmFsdWUsXG4gICAgICAgICAgICBwaG9uZU1hc2sgPSBfLnBhcnRpYWwoaC5tYXNrLCAnKDk5KSA5OTk5LTk5OTk5JyksXG4gICAgICAgICAgICBkb2N1bWVudE1hc2sgPSBfLnBhcnRpYWwoaC5tYXNrLCAnOTk5Ljk5OS45OTktOTknKSxcbiAgICAgICAgICAgIHppcGNvZGVNYXNrID0gXy5wYXJ0aWFsKGgubWFzaywgJzk5OTk5LTk5OScpO1xuXG4gICAgICAgIC8vVGVzdGUgcGFyYSB2ZXJpZmljYXJtb3Mgc2UgbyBjaGF0IG5lc3NhIHDDoWdpbmEgaXLDoSB0cmF6ZXIgbWFpb3IgbnVtLiBjb250cmlidWnDp8O1ZXMuXG4gICAgICAgIGlmKF8uY29udGFpbnMoWzQxNjc5LDQwMTkxLDQwMjcxLDM4NzY4LDQyODE1LDQzMDAyLDQyMTI5LDQxODY3LDM5NjU1XSwgcHJvamVjdC5wcm9qZWN0X2lkKSkge1xuICAgICAgICAgICAgKHdpbmRvdy4kem9waW0gJiYgd2luZG93LiR6b3BpbS5saXZlY2hhdCl8fChmdW5jdGlvbihkLHMpe3ZhciB6PXdpbmRvdy4kem9waW09ZnVuY3Rpb24oYyl7ei5fLnB1c2goYyl9LCQ9ei5zPWQuY3JlYXRlRWxlbWVudChzKSxlPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF07ei5zZXQ9ZnVuY3Rpb24obyl7ei5zZXQuXy5wdXNoKG8pfTt6Ll89W107ei5zZXQuXz1bXTskLmFzeW5jPSEwOyQuc2V0QXR0cmlidXRlKCdjaGFyc2V0JywndXRmLTgnKTskLnNyYz0nLy92Mi56b3BpbS5jb20vPzJxUHRJZlpYMEV4aDVTeng1SlVvVXhXS3FyVFFJNVRtJzt6LnQ9K25ldyBEYXRlOyQudHlwZT0ndGV4dC9qYXZhc2NyaXB0JztlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCQsZSl9KShkb2N1bWVudCwnc2NyaXB0Jyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uIHQoKXtcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gd2luZG93LiR6b3BpbSAmJiB3aW5kb3cuJHpvcGltLmxpdmVjaGF0O1xuICAgICAgICAgICAgICAgIGlmKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdSA9IGguZ2V0VXNlcigpO1xuICAgICAgICAgICAgICAgICAgICBpZih1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLnNldEVtYWlsKHUuZW1haWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5zZXROYW1lKHUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHQsIDMwKjEwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDMwKjEwMDApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsaWRhdGVGb3JtID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHZtLnZhbGlkYXRlKCkpIHtcbiAgICAgICAgICAgICAgICBzaG93UGF5bWVudEZvcm0odHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZmllbGRIYXNFcnJvciA9IChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkV2l0aEVycm9yID0gXy5maW5kV2hlcmUodm0uZmllbGRzLmVycm9ycygpLCB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkTmFtZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmaWVsZFdpdGhFcnJvciA/IG0uY29tcG9uZW50KGlubGluZUVycm9yLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZmllbGRXaXRoRXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgfSkgOiAnJztcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzZXRTdGF0ZU90aGVyID0gKGVsLCBpc0luaXQpID0+IHtcbiAgICAgICAgICAgIGlmICghaXNJbml0KSB7XG4gICAgICAgICAgICAgICAgdm0uZmllbGRzLnVzZXJTdGF0ZSgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYXBwbHlEb2N1bWVudE1hc2sgPSBfLmNvbXBvc2Uodm0uZmllbGRzLm93bmVyRG9jdW1lbnQsIGRvY3VtZW50TWFzayk7XG5cbiAgICAgICAgY29uc3QgYXBwbHlaaXBjb2RlTWFzayA9IF8uY29tcG9zZSh2bS5maWVsZHMuemlwQ29kZSwgemlwY29kZU1hc2spO1xuXG4gICAgICAgIGNvbnN0IGFwcGx5UGhvbmVNYXNrID0gXy5jb21wb3NlKHZtLmZpZWxkcy5waG9uZSwgcGhvbmVNYXNrKTtcblxuICAgICAgICBjb25zdCBhZGRyZXNzQ2hhbmdlID0gKGZuKSA9PiAoZSkgPT4ge1xuICAgICAgICAgICAgQ2F0YXJzZUFuYWx5dGljcy5vbmVUaW1lRXZlbnQoe1xuICAgICAgICAgICAgICAgIGNhdDogJ2NvbnRyaWJ1dGlvbl9maW5pc2gnLFxuICAgICAgICAgICAgICAgIGFjdDogdm0uaXNJbnRlcm5hdGlvbmFsID8gJ2NvbnRyaWJ1dGlvbl9hZGRyZXNzX2JyJyA6ICdjb250cmlidXRpb25fYWRkcmVzc19pbnQnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYoXy5pc0Z1bmN0aW9uKGZuKSl7XG4gICAgICAgICAgICAgICAgZm4oZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFoLmdldFVzZXIoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGgubmF2aWdhdGVUb0RldmlzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZHJlc3NDaGFuZ2U6IGFkZHJlc3NDaGFuZ2UsXG4gICAgICAgICAgICBhcHBseURvY3VtZW50TWFzazogYXBwbHlEb2N1bWVudE1hc2ssXG4gICAgICAgICAgICBhcHBseVppcGNvZGVNYXNrOiBhcHBseVppcGNvZGVNYXNrLFxuICAgICAgICAgICAgYXBwbHlQaG9uZU1hc2s6IGFwcGx5UGhvbmVNYXNrLFxuICAgICAgICAgICAgZmllbGRIYXNFcnJvcjogZmllbGRIYXNFcnJvcixcbiAgICAgICAgICAgIHNldFN0YXRlT3RoZXI6IHNldFN0YXRlT3RoZXIsXG4gICAgICAgICAgICB2YWxpZGF0ZUZvcm06IHZhbGlkYXRlRm9ybSxcbiAgICAgICAgICAgIHByb2plY3RVc2VySWQ6IHByb2plY3RVc2VySWQsXG4gICAgICAgICAgICBzaG93UGF5bWVudEZvcm06IHNob3dQYXltZW50Rm9ybSxcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbjogY29udHJpYnV0aW9uLFxuICAgICAgICAgICAgcmV3YXJkOiByZXdhcmQsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBtb2RlOiBtb2RlLFxuICAgICAgICAgICAgdm06IHZtXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG0oJyNwcm9qZWN0LXBheW1lbnQudy1zZWN0aW9uLnctY2xlYXJmaXguc2VjdGlvbicsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbCcsXG4gICAgICAgICAgICAgICAgbSgnLnctY2xlYXJmaXgudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0uY2FyZC51LXJhZGl1cy51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVmFsb3IgZG8gYXBvaW8nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1pbmxpbmUtYmxvY2suYXJyb3ctYWRtaW4uZmEuZmEtY2hldnJvbi1kb3duLmZvbnRjb2xvci1zZWNvbmRhcnlbaHJlZj1cXCcjXFwnXScpLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jbGVhcmZpeC51LW1hcmdpbmJvdHRvbS0yMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyLnRleHQtc3VjY2Vzcy51LWxlZnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBSJCAke051bWJlcihjdHJsLnZhbHVlKS50b0ZpeGVkKCl9YFxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jbGVhcmZpeC5iYWNrLXBheW1lbnQtaW5mby1yZXdhcmQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMTAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSZWNvbXBlbnNhIHNlbGVjaW9uYWRhJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdCcsIGAke2N0cmwucmV3YXJkKCkuZGVzY3JpcHRpb259YCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmZvbnRzaXplLXNtYWxsLmxpbmstaGlkZGVuLnUtcmlnaHQuZm9udHdlaWdodC1zZW1pYm9sZFtocmVmPVwiL3Byb2plY3RzLyR7cHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkucHJvamVjdF9pZH0vY29udHJpYnV0aW9ucy9uZXdcIl1gLCAnRWRpdGFyJylcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFshXy5pc0VtcHR5KGN0cmwudm0uZmllbGRzLmVycm9ycygpKSA/IG0oJy5jYXJkLmNhcmQtZXJyb3IudS1yYWRpdXMuemluZGV4LTEwLnUtbWFyZ2luYm90dG9tLTMwLmZvbnRzaXplLXNtYWxsZXJbZGF0YS1peD1cXCdkaXNwbGF5LW5vbmUtb24tbG9hZFxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0xMC5mb250d2VpZ2h0LWJvbGQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQb3IgZmF2b3IsIHJldmVqYSBvcyBjYW1wb3MgYWJhaXhvIGFudGVzIGRlIHByb3NzZWd1aXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZXJyb3JzJywgXy5tYXAoY3RybC52bS5maWVsZHMuZXJyb3JzKCksIChlcnJvcikgPT4gbSgncCcsIGVycm9yLm1lc3NhZ2UpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdmb3JtLnUtbWFyZ2luYm90dG9tLTQwW2RhdGEtbmFtZT1cXCdFbWFpbCBGb3JtXFwnXVtpZD1cXCdlbWFpbC1mb3JtXFwnXVtuYW1lPVxcJ2VtYWlsLWZvcm1cXCddJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tNDAudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQubGluZWhlaWdodC10aWdodC5mb250c2l6ZS1sYXJnZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0RhZG9zIGRlIGNvbnRhdG8gZSBlbmRlcmXDp28nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcqIFByZWVuY2hpbWVudG8gb2JyaWdhdMOzcmlvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTcudy1zdWItY29sJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPVxcJ2NvbXBsZXRlLW5hbWVcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vbWUgY29tcGxldG8gKidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZFtpZD1cXCdjb21wbGV0ZS1uYW1lXFwnXVtuYW1lPVxcJ2NvbXBsZXRlLW5hbWVcXCddJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmZvY3VzOiBjdHJsLnZtLnJlc2V0RmllbGRFcnJvcignY29tcGxldGVOYW1lJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmZpZWxkSGFzRXJyb3IoJ2NvbXBsZXRlTmFtZScpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwudm0uZmllbGRzLmNvbXBsZXRlTmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy5jb21wbGV0ZU5hbWUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnTm9tZSBDb21wbGV0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmZpZWxkSGFzRXJyb3IoJ2NvbXBsZXRlTmFtZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPVxcJ2VtYWlsXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdFbWFpbCAqJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW2lkPVxcJ2VtYWlsXFwnXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ2VtYWlsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmZpZWxkSGFzRXJyb3IoJ2VtYWlsJykgPyAnZXJyb3InIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwudm0uZmllbGRzLmVtYWlsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwudm0uZmllbGRzLmVtYWlsKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2VtYWlsQGNhdGFyc2UubWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5maWVsZEhhc0Vycm9yKCdlbWFpbCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY2hlY2tib3gudy1jbGVhcmZpeCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctY2hlY2tib3gtaW5wdXRbaWQ9XFwnYW5vbnltb3VzXFwnXVtuYW1lPVxcJ2Fub255bW91c1xcJ11bdHlwZT1cXCdjaGVja2JveFxcJ10nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogKCkgPT4gQ2F0YXJzZUFuYWx5dGljcy5ldmVudCh7Y2F0Oidjb250cmlidXRpb25fZmluaXNoJyxhY3Q6J2NvbnRyaWJ1dGlvbl9hbm9ueW1vdXNfY2hhbmdlJ30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwudm0uZmllbGRzLmFub255bW91cyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY3RybC52bS5maWVsZHMuYW5vbnltb3VzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLnctZm9ybS1sYWJlbC5mb250c2l6ZS1zbWFsbGVzdFtmb3I9XFwnYW5vbnltb3VzXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1F1ZXJvIHF1ZSBtZXUgYXBvaW8gbsOjbyBmaXF1ZSBww7pibGljbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwudm0uZmllbGRzLmFub255bW91cygpID8gbSgnLmNhcmQuY2FyZC1tZXNzYWdlLnUtcmFkaXVzLnppbmRleC0xMC5mb250c2l6ZS1zbWFsbGVzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LWJvbGQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnZWRpdC5hbm9ueW1vdXNfY29uZmlybWF0aW9uX3RpdGxlJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdicicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ2VkaXQuYW5vbnltb3VzX2NvbmZpcm1hdGlvbicsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtbWFyZ2luYm90dG9tLTQwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LXN1Yi1jb2wnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwuZmllbGQtbGFiZWwuZm9udHdlaWdodC1zZW1pYm9sZFtmb3I9XFwnY291bnRyeVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGHDrXMgKidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NlbGVjdC53LXNlbGVjdC50ZXh0LWZpZWxkW2lkPVxcJ2NvdW50cnlcXCddJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ3VzZXJDb3VudHJ5SWQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmZpZWxkSGFzRXJyb3IoJ3VzZXJDb3VudHJ5SWQnKSA/ICdlcnJvcicgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwudm0uZmllbGRzLnVzZXJDb3VudHJ5SWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwudm0uZmllbGRzLnVzZXJDb3VudHJ5SWQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLnZtLmZpZWxkcy5jb3VudHJpZXMoKSwgKGNvdW50cnksIGlkeCkgPT4gbSgnb3B0aW9uJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNvdW50cnkuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGlkeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBjb3VudHJ5LmlkID09PSBjdHJsLnZtLmZpZWxkcy51c2VyQ291bnRyeUlkKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgY291bnRyeS5uYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZmllbGRIYXNFcnJvcigndXNlckNvdW50cnlJZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZpZWxkLWxhYmVsLmZvbnR3ZWlnaHQtc2VtaWJvbGRbZm9yPVxcJ3ppcC1jb2RlXFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjdHJsLnZtLmlzSW50ZXJuYXRpb25hbCgpID8gJ0NFUCAqJyA6ICdaSVAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWlucHV0LnRleHQtZmllbGRbaWQ9XFwnemlwLWNvZGVcXCddJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ3ppcENvZGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGN0cmwuZmllbGRIYXNFcnJvcignemlwQ29kZScpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogY3RybC5hZGRyZXNzQ2hhbmdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ua2V5dXA6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgKHZhbHVlKSA9PiAhY3RybC52bS5pc0ludGVybmF0aW9uYWwoKSA/IGN0cmwuYXBwbHlaaXBjb2RlTWFzayh2YWx1ZSkgOiBjdHJsLnZtLmZpZWxkcy56aXBDb2RlKHZhbHVlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy56aXBDb2RlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnNDIxMDAwMDAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5maWVsZEhhc0Vycm9yKCd6aXBDb2RlJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LXN1Yi1jb2wnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwuZmllbGQtbGFiZWwuZm9udHdlaWdodC1zZW1pYm9sZFtmb3I9XFwnc3RyZWV0XFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSdWEgKidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZFtpZD1cXCdzdHJlZXRcXCddJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmZvY3VzOiBjdHJsLnZtLnJlc2V0RmllbGRFcnJvcignc3RyZWV0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmZpZWxkSGFzRXJyb3IoJ3N0cmVldCcpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBjdHJsLmFkZHJlc3NDaGFuZ2UobS53aXRoQXR0cigndmFsdWUnLCBjdHJsLnZtLmZpZWxkcy5zdHJlZXQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwudm0uZmllbGRzLnN0cmVldCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdSdWEgRGEgTWluaGEgQ2FzYSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmZpZWxkSGFzRXJyb3IoJ3N0cmVldCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02LnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02Lnctc3ViLWNvbC1taWRkbGUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj1cXCdudW1iZXJcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTsO6bWVybyAqJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZFtpZD1cXCdudW1iZXJcXCddJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZm9jdXM6IGN0cmwudm0ucmVzZXRGaWVsZEVycm9yKCdudW1iZXInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5maWVsZEhhc0Vycm9yKCdudW1iZXInKSA/ICdlcnJvcicgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IGN0cmwuYWRkcmVzc0NoYW5nZShtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwudm0uZmllbGRzLm51bWJlcikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy5udW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJzQyMSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5maWVsZEhhc0Vycm9yKCdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj1cXCdhZGRyZXNzLWNvbXBsZW1lbnRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29tcGxlbWVudG8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW2lkPVxcJ2FkZHJlc3MtY29tcGxlbWVudFxcJ10nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ2FkZHJlc3NDb21wbGVtZW50JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGN0cmwuZmllbGRIYXNFcnJvcignYWRkcmVzc0NvbXBsZW1lbnQnKSA/ICdlcnJvcicgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IGN0cmwuYWRkcmVzc0NoYW5nZShtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwudm0uZmllbGRzLmFkZHJlc3NDb21wbGVtZW50KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwudm0uZmllbGRzLmFkZHJlc3NDb21wbGVtZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdSZXNpZGVuY2lhbCAxMjMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZmllbGRIYXNFcnJvcignYWRkcmVzc0NvbXBsZW1lbnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LXN1Yi1jb2wnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwuZmllbGQtbGFiZWwuZm9udHdlaWdodC1zZW1pYm9sZFtmb3I9XFwnbmVpZ2hib3VyaG9vZFxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgQmFpcnJvICR7Y3RybC52bS5pc0ludGVybmF0aW9uYWwoKSA/ICcnIDogJyonfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZFtpZD1cXCduZWlnaGJvdXJob29kXFwnXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ25laWdoYm91cmhvb2QnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGN0cmwuZmllbGRIYXNFcnJvcignbmVpZ2hib3VyaG9vZCcpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBjdHJsLmFkZHJlc3NDaGFuZ2UobS53aXRoQXR0cigndmFsdWUnLCBjdHJsLnZtLmZpZWxkcy5uZWlnaGJvdXJob29kKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy5uZWlnaGJvdXJob29kKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAhY3RybC52bS5pc0ludGVybmF0aW9uYWwoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTw6NvIEpvc8OpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZmllbGRIYXNFcnJvcignbmVpZ2hib3VyaG9vZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00Lnctc3ViLWNvbCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj1cXCdjaXR5XFwnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDaWRhZGUgKidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZFtpZD1cXCdjaXR5XFwnXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ2NpdHknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGN0cmwuZmllbGRIYXNFcnJvcignY2l0eScpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBjdHJsLmFkZHJlc3NDaGFuZ2UobS53aXRoQXR0cigndmFsdWUnLCBjdHJsLnZtLmZpZWxkcy5jaXR5KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy5jaXR5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0NpZGFkZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmZpZWxkSGFzRXJyb3IoJ2NpdHknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj1cXCdzdGF0ZVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRXN0YWRvIConXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnZtLmlzSW50ZXJuYXRpb25hbCgpID8gbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW2lkPVxcJ2FkZHJlc3Mtc3RhdGVcXCddJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogY3RybC5hZGRyZXNzQ2hhbmdlKG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC52bS5maWVsZHMudXNlclN0YXRlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy51c2VyU3RhdGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogbSgnc2VsZWN0Lnctc2VsZWN0LnRleHQtZmllbGRbaWQ9XFwnYWRkcmVzcy1zdGF0ZVxcJ10nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmZvY3VzOiBjdHJsLnZtLnJlc2V0RmllbGRFcnJvcigndXNlclN0YXRlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5maWVsZEhhc0Vycm9yKCd1c2VyU3RhdGUnKSA/ICdlcnJvcicgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBjdHJsLmFkZHJlc3NDaGFuZ2UobS53aXRoQXR0cigndmFsdWUnLCBjdHJsLnZtLmZpZWxkcy51c2VyU3RhdGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLnZtLmZpZWxkcy51c2VyU3RhdGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBfLm1hcChjdHJsLnZtLmZpZWxkcy5zdGF0ZXMoKSwgKHN0YXRlLCBpZHgpID0+IG0oJ29wdGlvbicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc3RhdGUuYWNyb255bSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogc3RhdGUuYWNyb255bSA9PT0gY3RybC52bS5maWVsZHMudXNlclN0YXRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgc3RhdGUubmFtZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmZpZWxkSGFzRXJyb3IoJ3VzZXJTdGF0ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgIWN0cmwudm0uaXNJbnRlcm5hdGlvbmFsKCkgPyBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LXN1Yi1jb2wnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwuZmllbGQtbGFiZWwuZm9udHdlaWdodC1zZW1pYm9sZFtmb3I9XFwnZG9jdW1lbnRcXCddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NQRiAqJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkW2lkPVxcJ2RvY3VtZW50XFwnXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25mb2N1czogY3RybC52bS5yZXNldEZpZWxkRXJyb3IoJ293bmVyRG9jdW1lbnQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGN0cmwuZmllbGRIYXNFcnJvcignb3duZXJEb2N1bWVudCcpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25rZXl1cDogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLmFwcGx5RG9jdW1lbnRNYXNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwudm0uZmllbGRzLm93bmVyRG9jdW1lbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICdyZXF1aXJlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmZpZWxkSGFzRXJyb3IoJ293bmVyRG9jdW1lbnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdsYWJlbC5maWVsZC1sYWJlbC5mb250d2VpZ2h0LXNlbWlib2xkW2Zvcj1cXCdwaG9uZVxcJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVGVsZWZvbmUgKidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZFtpZD1cXCdwaG9uZVxcJ10nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZm9jdXM6IGN0cmwudm0ucmVzZXRGaWVsZEVycm9yKCdwaG9uZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY3RybC5maWVsZEhhc0Vycm9yKCdwaG9uZScpID8gJ2Vycm9yJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25rZXl1cDogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLmFwcGx5UGhvbmVNYXNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwudm0uZmllbGRzLnBob25lKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAncmVxdWlyZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5maWVsZEhhc0Vycm9yKCdwaG9uZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC1wdXNoLTMudy1jb2wtNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2J1dHRvbi5idG4uYnRuLWxhcmdlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ICgpID0+IENhdGFyc2VBbmFseXRpY3MuZXZlbnQoe2NhdDonY29udHJpYnV0aW9uX2ZpbmlzaCcsYWN0Oidjb250cmlidXRpb25fbmV4dF9jbGljayd9LCBjdHJsLnZhbGlkYXRlRm9ybSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUHLDs3hpbW8gcGFzc28nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zaG93UGF5bWVudEZvcm0oKSA/IG0uY29tcG9uZW50KHBheW1lbnRGb3JtLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm06IGN0cmwudm0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uX2lkOiBjdHJsLmNvbnRyaWJ1dGlvbigpLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6IHByb2plY3RWTS5jdXJyZW50UHJvamVjdCgpLnByb2plY3RfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogaC5nZXRVc2VyKCkudXNlcl9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiAnJ1xuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5jYXJkLnUtcmFkaXVzLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVmFsb3IgZG8gYXBvaW8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jbGVhcmZpeC51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlci50ZXh0LXN1Y2Nlc3MudS1sZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBSJCAke051bWJlcihjdHJsLnZhbHVlKS50b0ZpeGVkKCl9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmZvbnRzaXplLXNtYWxsLmxpbmstaGlkZGVuLnUtcmlnaHQuZm9udHdlaWdodC1zZW1pYm9sZFtocmVmPVwiL3Byb2plY3RzLyR7cHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkucHJvamVjdF9pZH0vY29udHJpYnV0aW9ucy9uZXcke2N0cmwucmV3YXJkKCkuaWQgPyAnP3Jld2FyZF9pZD0nICsgY3RybC5yZXdhcmQoKS5pZCA6ICcnIH1cIl1gLCAnRWRpdGFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuYmFjay1wYXltZW50LWluZm8tcmV3YXJkJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlci5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSZWNvbXBlbnNhIHNlbGVjaW9uYWRhJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QnLCBjdHJsLnJld2FyZCgpLmRlc2NyaXB0aW9uID8gY3RybC5yZXdhcmQoKS5kZXNjcmlwdGlvbiA6IGBWb2PDqiBpcsOhIGFwb2lhciBjb20gUiQgJHtOdW1iZXIoY3RybC52YWx1ZSkudG9GaXhlZCgpfSBlIG7Do28gcXVlciBuZW5odW1hIHJlY29tcGVuc2EgcG9yIHNldSBhcG9pby5gKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoZmFxQm94LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogY3RybC5tb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhcTogY3RybC52bS5mYXEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdFVzZXJJZDogY3RybC5wcm9qZWN0VXNlcklkXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RzUGF5bWVudDtcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHByb2plY3RWTSBmcm9tICcuLi92bXMvcHJvamVjdC12bSc7XG5pbXBvcnQgcmV3YXJkVk0gZnJvbSAnLi4vdm1zL3Jld2FyZC12bSc7XG5pbXBvcnQgZmFxQm94IGZyb20gJy4uL2MvZmFxLWJveCc7XG5cbmNvbnN0IHByb2plY3RzUmV3YXJkID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCB2bSA9IHJld2FyZFZNLFxuICAgICAgICAgICAgc2VsZWN0ZWRSZXdhcmQgPSB2bS5zZWxlY3RlZFJld2FyZCxcbiAgICAgICAgICAgIHNlbGVjdFJld2FyZCA9IHZtLnNlbGVjdFJld2FyZCxcbiAgICAgICAgICAgIHJld2FyZHMgPSB2bS5yZXdhcmRzKCksXG4gICAgICAgICAgICBtb2RlID0gcHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkubW9kZSxcbiAgICAgICAgICAgIGZhcSA9IEkxOG4udHJhbnNsYXRpb25zW0kxOG4uY3VycmVudExvY2FsZSgpXS5wcm9qZWN0cy5mYXFbbW9kZV07XG5cbiAgICAgICAgLy9UT0RPIHVuaWZ5IHByb2plY3RzUmV3YXJkIGFuZCBwcm9qZWN0LXJld2FyZC1saXN0IHJld2FyZCBzdWJtaXNzaW9uLiBmaXggcm91dGluZyBpc3N1ZS5cbiAgICAgICAgY29uc3Qgc3VibWl0Q29udHJpYnV0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVGbG9hdCA9IGgubW9uZXRhcnlUb0Zsb2F0KHZtLmNvbnRyaWJ1dGlvblZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlRmxvYXQgPCB2bS5zZWxlY3RlZFJld2FyZCgpLm1pbmltdW1fdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2bS5lcnJvcihgTyB2YWxvciBkZSBhcG9pbyBwYXJhIGVzc2EgcmVjb21wZW5zYSBkZXZlIHNlciBkZSBubyBtw61uaW1vIFIkJHt2bS5zZWxlY3RlZFJld2FyZCgpLm1pbmltdW1fdmFsdWV9YCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghaC5nZXRVc2VyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaC5zdG9yZU9iamVjdChzdG9yZUtleSwge3ZhbHVlOiB2YWx1ZUZsb2F0LCByZXdhcmQ6IHZtLnNlbGVjdGVkUmV3YXJkKCl9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaC5uYXZpZ2F0ZVRvRGV2aXNlKCcvJyArIHByb2plY3RWTS5jdXJyZW50UHJvamVjdCgpLnBlcm1hbGluayk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdm0uZXJyb3IoJycpO1xuICAgICAgICAgICAgICAgICAgICB2bS5jb250cmlidXRpb25WYWx1ZSh2YWx1ZUZsb2F0KTtcbiAgICAgICAgICAgICAgICAgICAgbS5yb3V0ZShgL3Byb2plY3RzLyR7cHJvamVjdFZNLmN1cnJlbnRwcm9qZWN0KCkucHJvamVjdF9pZH0vcGF5bWVudGAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RfdXNlcl9pZDogcHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0KCkudXNlcl9pZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBpc1NlbGVjdGVkID0gcmV3YXJkID0+IHJld2FyZC5pZCA9PT0gc2VsZWN0ZWRSZXdhcmQoKS5pZDtcblxuICAgICAgICBpZiAoXy5maXJzdChyZXdhcmRzKS5pZCAhPT0gdm0ubm9SZXdhcmQuaWQpe1xuICAgICAgICAgICAgcmV3YXJkcy51bnNoaWZ0KHZtLm5vUmV3YXJkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXdhcmRzOiByZXdhcmRzLFxuICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdFZNLmN1cnJlbnRQcm9qZWN0LFxuICAgICAgICAgICAgY29udHJpYnV0aW9uVmFsdWU6IHZtLmNvbnRyaWJ1dGlvblZhbHVlLFxuICAgICAgICAgICAgc3VibWl0Q29udHJpYnV0aW9uOiBzdWJtaXRDb250cmlidXRpb24sXG4gICAgICAgICAgICBhcHBseU1hc2s6IHZtLmFwcGx5TWFzayxcbiAgICAgICAgICAgIGVycm9yOiB2bS5lcnJvcixcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAgICBzZWxlY3RlZFJld2FyZDogc2VsZWN0ZWRSZXdhcmQsXG4gICAgICAgICAgICBzZWxlY3RSZXdhcmQ6IHNlbGVjdFJld2FyZCxcbiAgICAgICAgICAgIGZhcTogZmFxXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGN0cmwucHJvamVjdDtcblxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3QtcmV3YXJkcycsIFtcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24ucGFnZS1oZWFkZXIudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2gxLmZvbnRzaXplLWxhcmdlci5mb250d2VpZ2h0LXNlbWlib2xkLnByb2plY3QtbmFtZVtpdGVtcHJvcD1cIm5hbWVcIl0nLCBoLnNlbGZPckVtcHR5KHByb2plY3QoKS5uYW1lIHx8IHByb2plY3QoKS5wcm9qZWN0X25hbWUpKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnaDIuZm9udHNpemUtYmFzZS5saW5laGVpZ2h0LWxvb3NlcltpdGVtcHJvcD1cImF1dGhvclwiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb3IgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QoKS51c2VyID8gcHJvamVjdCgpLnVzZXIubmFtZSA6IHByb2plY3QoKS5vd25lcl9uYW1lID8gcHJvamVjdCgpLm93bmVyX25hbWUgOiAnJ1xuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLmhlYWRlci1jb250LW5ldycsXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5saW5laGVpZ2h0LXRpZ2h0LnRleHQtc3VjY2Vzcy5mb250c2l6ZS1sYXJnZS51LXRleHQtY2VudGVyLXNtYWxsLW9ubHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdFc2NvbGhhIGEgcmVjb21wZW5zYSBlIGVtIHNlZ3VpZGEgbyB2YWxvciBkbyBhcG9pbydcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbSgnLnNlY3Rpb25baWQ9XFwnbmV3LWNvbnRyaWJ1dGlvblxcJ10nLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0uYmFjay1yZXdhcmQtZm9ybScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZm9ybS5zaW1wbGVfZm9ybS5uZXdfY29udHJpYnV0aW9uJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGN0cmwuc3VibWl0Q29udHJpYnV0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIF8ubWFwKGN0cmwucmV3YXJkcywgKHJld2FyZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBjdHJsLmlzU2VsZWN0ZWQocmV3YXJkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb25ldGFyeU1pbmltdW0gPSBoLmFwcGx5TW9uZXRhcnlNYXNrKHJld2FyZC5taW5pbXVtX3ZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oJ3NwYW4ucmFkaW8udy1yYWRpby53LWNsZWFyZml4LmJhY2stcmV3YXJkLXJhZGlvLXJld2FyZCcse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogaXNTZWxlY3RlZCA/ICdzZWxlY3RlZCcgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC5zZWxlY3RSZXdhcmQocmV3YXJkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG0oYGxhYmVsW2Zvcj0nY29udHJpYnV0aW9uX3Jld2FyZF9pZF8ke3Jld2FyZC5pZH0nXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgaW5wdXQucmFkaW9fYnV0dG9ucy5vcHRpb25hbC53LWlucHV0LnRleHQtZmllbGQudy1yYWRpby1pbnB1dC5iYWNrLXJld2FyZC1yYWRpby1idXR0b25baWQ9J2NvbnRyaWJ1dGlvbl9yZXdhcmRfaWRfJHtyZXdhcmQuaWR9J11bbmFtZT0nY29udHJpYnV0aW9uW3Jld2FyZF9pZF0nXVt0eXBlPSdyYWRpbyddW3ZhbHVlPScke3Jld2FyZC5pZH0nXWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogaXNTZWxlY3RlZCA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBsYWJlbC53LWZvcm0tbGFiZWwuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwW2Zvcj0nY29udHJpYnV0aW9uX3Jld2FyZF8ke3Jld2FyZC5pZH0nXWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZC5pZCA9PT0gLTEgPyAnTsOjbyBxdWVybyByZWNvbXBlbnNhJyA6IGBSJCAke3Jld2FyZC5taW5pbXVtX3ZhbHVlfSBvdSBtYWlzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZCA/IG0oJy53LXJvdy5iYWNrLXJld2FyZC1tb25leScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXNtYWxsLTgudy1jb2wtdGlueS04Lnctc3ViLWNvbC1taWRkbGUudy1jbGVhcmZpeCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudy1jb2wtdGlueS0zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmJhY2stcmV3YXJkLWlucHV0LXJld2FyZC5wbGFjZWhvbGRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUiQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC05LnctY29sLXNtYWxsLTkudy1jb2wtdGlueS05JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudXNlci1yZXdhcmQtdmFsdWUuYmFjay1yZXdhcmQtaW5wdXQtcmV3YXJkW2F1dG9jb21wbGV0ZT1cXCdvZmZcXCddW3R5cGU9XFwndGVsXFwnXScse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBjdHJsLmVycm9yKCkgPyAnZXJyb3InIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluOiBtb25ldGFyeU1pbmltdW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1vbmV0YXJ5TWluaW11bSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmtleXVwOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuYXBwbHlNYXNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3RybC5jb250cmlidXRpb25WYWx1ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXJyb3IoKS5sZW5ndGggPiAwID8gbSgnLnRleHQtZXJyb3InLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdicicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1leGNsYW1hdGlvbi10cmlhbmdsZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCAke2N0cmwuZXJyb3IoKX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnN1Ym1pdC1mb3JtLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2J1dHRvbi5idG4uYnRuLWxhcmdlJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGludWFyICAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWNoZXZyb24tcmlnaHQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmJhY2stcmV3YXJkLXJld2FyZC1kZXNjcmlwdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLnUtbWFyZ2luYm90dG9tLTEwJywgcmV3YXJkLmRlc2NyaXB0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZC5kZWxpdmVyX2F0ID8gbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnRXN0aW1hdGl2YSBkZSBlbnRyZWdhOiAnICsgaC5tb21lbnRpZnkocmV3YXJkLmRlbGl2ZXJfYXQsICdNTU0vWVlZWScpKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOyAvL0VuZCBtYXAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgbS5jb21wb25lbnQoZmFxQm94LCB7bW9kZTogY3RybC5wcm9qZWN0KCkubW9kZSwgZmFxOiBjdHJsLmZhcX0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RzUmV3YXJkO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgcHJvamVjdERhc2hib2FyZE1lbnUgZnJvbSAnLi4vYy9wcm9qZWN0LWRhc2hib2FyZC1tZW51JztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMucHVibGlzaCcpO1xuXG5jb25zdCBwdWJsaXNoID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgZmlsdGVyc1ZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XG4gICAgICAgICAgICAgICAgcHJvamVjdF9pZDogJ2VxJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwcm9qZWN0QWNjb3VudCA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBwcm9qZWN0RGV0YWlscyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBhY2NlcHRUZXJtID0gbS5wcm9wKFt0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZV0pLFxuICAgICAgICAgICAgZmxleEFjY2VwdFRlcm0gPSBtLnByb3AoW3RydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlXSksXG4gICAgICAgICAgICBzaG93TmV4dFRlcm0gPSAoaW5kZXgsIGFjY2VwdFRlcm1zKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHRlcm1zID0gYWNjZXB0VGVybXMoKTtcbiAgICAgICAgICAgICAgICBpZiAodGVybXNbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlcm1zW2luZGV4XSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBhY2NlcHRUZXJtcyh0ZXJtcyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0VGVybSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3ctaGlkZGVuIHB1Ymxpc2gtcnVsZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRUZXJtWzBdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUZXJtWzBdLmNsYXNzTGlzdC5yZW1vdmUoJ3ctaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9zaG93IHB1Ymxpc2ggYnV0dG9uIGFmdGVyIGFjY2VwdGluZyBhbGwgcnVsZXNcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IHRlcm1zLmxlbmd0aCAtIDEpe1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwdWJsaXNoLWJ0bi1zZWN0aW9uJylbMF0uY2xhc3NMaXN0LnJlbW92ZSgndy1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9hZGVyID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbjtcblxuICAgICAgICBmaWx0ZXJzVk0ucHJvamVjdF9pZChhcmdzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykpO1xuXG4gICAgICAgIGNvbnN0IGwgPSBsb2FkZXIobW9kZWxzLnByb2plY3REZXRhaWwuZ2V0Um93T3B0aW9ucyhmaWx0ZXJzVk0ucGFyYW1ldGVycygpKSksXG4gICAgICAgICAgICBhY2NvdW50TCA9IGxvYWRlcihtb2RlbHMucHJvamVjdEFjY291bnQuZ2V0Um93T3B0aW9ucyhmaWx0ZXJzVk0ucGFyYW1ldGVycygpKSk7XG4gICAgICAgIGwubG9hZCgpLnRoZW4ocHJvamVjdERldGFpbHMpO1xuICAgICAgICBhY2NvdW50TC5sb2FkKCkudGhlbihwcm9qZWN0QWNjb3VudCk7XG5cbiAgICAgICAgbGV0IGV4cGlyZXNBdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3QgPSBfLmZpcnN0KHByb2plY3REZXRhaWxzKCkpO1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudCgpLmFkZChwcm9qZWN0Lm9ubGluZV9kYXlzLCAnZGF5cycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsOiBsLFxuICAgICAgICAgICAgYWNjb3VudEw6IGFjY291bnRMLFxuICAgICAgICAgICAgZXhwaXJlc0F0OiBleHBpcmVzQXQsXG4gICAgICAgICAgICBmaWx0ZXJzVk06IGZpbHRlcnNWTSxcbiAgICAgICAgICAgIGFjY2VwdFRlcm06IGFjY2VwdFRlcm0sXG4gICAgICAgICAgICBmbGV4QWNjZXB0VGVybTogZmxleEFjY2VwdFRlcm0sXG4gICAgICAgICAgICBzaG93TmV4dFRlcm06IHNob3dOZXh0VGVybSxcbiAgICAgICAgICAgIHByb2plY3RBY2NvdW50OiBwcm9qZWN0QWNjb3VudCxcbiAgICAgICAgICAgIHByb2plY3REZXRhaWxzOiBwcm9qZWN0RGV0YWlsc1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBfLmZpcnN0KGN0cmwucHJvamVjdERldGFpbHMoKSksXG4gICAgICAgICAgYWNjb3VudCA9IF8uZmlyc3QoY3RybC5wcm9qZWN0QWNjb3VudCgpKSxcbiAgICAgICAgICBmbGV4VGVybXMgPSAocHJvamVjdCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnMS85JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxuICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdSZWdyYXMgZGEgbW9kYWxpZGFkZSBGTEVYJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsICdWb2PDqiBlc2NvbGhldSBhIGNhbXBhbmhhIGZsZXjDrXZlbC4gRGVzc2EgbWFuZWlyYSwgdm9jw6ogaXLDoSByZWNlYmVyIHRvZG9zIG9zIHJlY3Vyc29zIGFycmVjYWRhZG9zIGp1bnRvIGFvcyBhcG9pYWRvcmVzIGFvIGZpbmFsIGRvIHByYXpvIGRhIGNhbXBhbmhhIChkZXNjb250YW5kbyBhIHRheGEgZG8gQ2F0YXJzZSkgZSBkZXZlcsOhIGN1bXByaXIgY29tIGEgZXhlY3XDp8OjbyBkbyBwcm9qZXRvIGUgY29tIGEgZW50cmVnYSBkYXMgcmVjb21wZW5zYXMgb2ZlcmVjaWRhcyBpbmRlcGVuZGVudGUgZG8gcXVhbnRvIGFycmVjYWRhci4nKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICcyLzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ01ldGEgZGUgYXJyZWNhZGHDp8OjbycpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCAnQSBtZXRhIG7Do28gcG9kZXLDoSBzZXIgYWx0ZXJhZGEgYXDDs3MgbyBwdWJsaWNhw6fDo28gZG8gcHJvamV0by4nKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICczLzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1RheGFzJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAnQW8gZmluYWwgZGEgY2FtcGFuaGEsIGNvYnJhcmVtb3MgMTMlIHNvYnJlIG8gJyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAndmFsb3IgdG90YWwgYXJyZWNhZGFkby4nKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc0LzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1ByYXpvIGRhIGNhbXBhbmhhJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsICdVbWEgdmV6IGRlZmluaWRvLCBvIHByYXpvIGRlIGVuY2VycmFtZW50byBuw6NvIHBvZGVyw6Egc2VyIGFsdGVyYWRvLiBDYXNvIHZvY8OqIHRlbmhhIGluaWNpYWRvIGEgY2FtcGFuaGEgY29tIG8gcHJhem8gZW0gYWJlcnRvLCBkZXZlcsOhIGRlZmluaS1sbyBkdXJhbnRlIGEgY2FtcGFuaGEsIHBvZGVuZG8gZGVpeGFyIGEgY2FtcGFuaGEgYWJlcnRhIHBvciBubyBtw6F4aW1vIDEyIG1lc2VzLicpXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzUvOScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUHJhem8gcGFyYSByZXBhc3NlJylcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgJ1F1YW5kbyBvIHByYXpvIGRvIHNldSBwcm9qZXRvIGNoZWdhciBhbyBmaW0sIHZvY8OqIGRldmVyw6EgY29uZmlybWFyIHNldXMgZGFkb3MgYmFuY8Ohcmlvcy4gQXDDs3MgZXNzYSBjb25maXJtYcOnw6NvLCBvIENhdGFyc2UgZGVwb3NpdGFyw6EgbmEgc3VhIGNvbnRhIGNvcnJlbnRlIGVtIGF0w6kgMTAgZGlhcyDDunRlaXMuIE8gdmFsb3IgZGVwb3NpdGFkbyBqw6EgZXN0YXLDoSBjb25zaWRlcmFuZG8gbyBkZXNjb250byBkZSAxMyUgZGEgdGF4YS4nKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc2LzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ08gcXVlIHBvZGUgZSBuw6NvIHBvZGUgYWx0ZXJhciBuYSBww6FnaW5hIGRvIHByb2pldG8gYSBwYXJ0aXIgZGEgcHVibGljYcOnw6NvPycpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgW20oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnVm9jw6ogbsOjbyBwb2RlcsOhOicpLCcgYWx0ZXJhciBvIHRpcG8gZGUgZmluYW5jaWFtZW50bywgbm9tZSBkbyBwcm9qZXRvLCBhIFVSTCAobGluaykgZG8gcHJvamV0bywgYSBjYXRlZ29yaWEgZXNjb2xoaWRhLCBhIG1ldGEgZGUgYXJyZWNhZGHDp8OjbywgbyBwcmF6byAoY2FzbyBqw6EgdGVuaGEgZGVmaW5pZG8pLCBhcyByZWNvbXBlbnNhcyBvbmRlIGV4aXN0aXJlbSBhcG9pb3MgasOhIGVmZXR1YWRvcyBlIGEgY29udGEgYmFuY8OhcmlhIHJlZ2lzdHJhZGEuXFxcbiAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgICAgICAgICAgICAgICAgICAgLG0oJ2JyJyksbSgnYnInKSxtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnVm9jw6ogcG9kZXLDoTogJyksJ2VkaXRhciBvIGNvbnRlw7pkbyBkYSBkZXNjcmnDp8OjbyBkbyBwcm9qZXRvLCBhbHRlcmFyIG8gdsOtZGVvIHByaW5jaXBhbCBkYSBjYW1wYW5oYSwgYSBpbWFnZW0gZG8gcHJvamV0bywgYSBmcmFzZSBkZSBlZmVpdG8sIGFzIHJlY29tcGVuc2FzIG9uZGUgbsOjbyBleGlzdGlyZW0gYXBvaW9zIGVmZXR1YWRvcywgYWzDqW0gZGUgYWRpY2lvbmFyIG5vdmFzIHJlY29tcGVuc2FzIGR1cmFudGUgYSBhcnJlY2FkYcOnw6NvLiddKV1cbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnNy85JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxuICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdSZXNwb25zYWJpbGlkYWRlIGRvIENhdGFyc2UnKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIFttKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyksbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ08gQ2F0YXJzZSDDqSByZXNwb25zw6F2ZWw6JyksJ8KgcGVsbyBkZXNlbnZvbHZpbWVudG8gdGVjbm9sw7NnaWNvIGRhIHBsYXRhZm9ybWEsIGF0ZW5kaW1lbnRvIGRlIGTDunZpZGFzIGUgcHJvYmxlbWFzICh0YW50byBkZSBhcG9pYWRvcmVzIHF1YW50byBkZSByZWFsaXphZG9yZXMpLCBwb3IgaG9zcGVkYXIgbyBwcm9qZXRvIG5hIHBsYXRhZm9ybWEgZSBwb3IgZ2FyYW50aXIgYSBzZWd1cmFuw6dhIGRhcyB0cmFuc2HDp8O1ZXMgZmluYW5jZWlyYXMuXFwgJyxtKCdicicpLG0oJ2JyJyksbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ08gQ2F0YXJzZSBuw6NvIMOpIHJlc3BvbnPDoXZlbDonKSwnwqBwZWxvIGZpbmFuY2lhbWVudG8sIGRpdnVsZ2HDp8OjbyBlIGV4ZWN1w6fDo28sIG5lbSBwZWxhIGVudHJlZ2EgZGUgcmVjb21wZW5zYXMgZG9zIHByb2pldG9zIGluc2NyaXRvcy4nXSldXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzgvOScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnU3VhcyByZXNwb25zYWJpbGlkYWRlcycpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyksbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyksJ8OJIHN1YSByZXNwb25zYWJpbGlkYWRlIHR1ZG8gYXF1aWxvIHF1ZSBkaXogcmVzcGVpdG8gYSBmb3JtYXRhw6fDo28gZG8gcHJvamV0bywgcGxhbmVqYW1lbnRvIGUgZGl2dWxnYcOnw6NvIGRhIGNhbXBhbmhhIGRlIGFycmVjYWRhw6fDo28sIG1vYmlsaXphw6fDo28gZGUgYXBvaWFkb3JlcywgZXhlY3XDp8OjbyBkbyBwcm9qZXRvLCBwcm9kdcOnw6NvIGUgZW50cmVnYSBkZSByZWNvbXBlbnNhcyBkZW50cm8gZG8gcHJhem8gZXN0aW1hZG8gZSBjb211bmljYcOnw6NvIGNvbSBhcG9pYWRvcmVzLiddKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnOS85JyksXG4gICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdSZXRpcmFkYXMgZGUgcHJvamV0b3Mgbm8gYXInKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLCdPIENBVEFSU0UgcmVzZXJ2YS1zZSBvIGRpcmVpdG8gZGUsIGEgc2V1IGV4Y2x1c2l2byBjcml0w6lyaW8gZSB1bWEgdmV6IG5vdGlmaWNhZG8gYSByZXNwZWl0bywgY2FuY2VsYXIgcHJvamV0b3MgZSBlbmNlcnJhciBhcyBjb250YXMgZGUgQ1JJQURPUkVTIERFIFBST0pFVE9TIHF1ZSB2aW9sZW0gbm9zc2FzICcsbSgnYS5hbHQtbGlua1tocmVmPVxcJ2h0dHA6Ly9zdXBvcnRlLmNhdGFyc2UubWUvaGMvcHQtYnIvYXJ0aWNsZXMvMjAyMzg3NjM4LURpcmV0cml6ZXMtcGFyYS1jcmlhJUMzJUE3JUMzJUEzby1kZS1wcm9qZXRvc1xcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnUmVncmFzIGRvIEpvZ28nKSwnIGUgJyxtKCdhLmFsdC1saW5rW2hyZWY9XFwnaHR0cDovL3d3dy5jYXRhcnNlLm1lL3Rlcm1zLW9mLXVzZVxcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnVGVybW9zIGRlIFVzbycpLCcuJ10pXG4gICAgICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgXTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgdGVybXMgPSAocHJvamVjdCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gW20oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnMS85JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAnICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUmVncmFzIGRhIG1vZGFsaWRhZGUgVHVkby1vdS1uYWRhJylcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbJ1ZvY8OqIGVzY29saGV1IGEgY2FtcGFuaGEgdHVkby1vdS1uYWRhLiBEZXNzYSBtYW5laXJhLCB2b2PDqiBzw7MgaXLDoSByZWNlYmVyIG9zIHJlY3Vyc29zIGFycmVjYWRhZG9zICcsbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ2Nhc28gYXRpbmphIG91IHN1cGVyZSBhIG1ldGEgZGUgYXJyZWNhZGHDp8OjbycpLCcuIENhc28gY29udHLDoXJpbywgdG9kb3Mgc2V1cyBhcG9pYWRvcmVzIHNlcsOjbyByZWVtYm9sc2Fkb3MuIFZvY8OqIHNlcsOhIHJlc3BvbnPDoXZlbCBwZWxhIGVudHJlZ2EgZGFzIHJlY29tcGVuc2FzIG9mZXJlY2lkYXMgc2Ugc2V1IHByb2pldG8gYWxjYW7Dp2FyIGEgbWV0YSBkZSBhcnJlY2FkYcOnw6NvLiddKVxuICAgICAgICAgICAgICAgICAgICBdKSxcblxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzIvOScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7c3R5bGU6IHsnZm9udC13ZWlnaHQnOiAnIDYwMCd9fSwgJ01ldGEgZGUgYXJyZWNhZGHDp8OjbycpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgJ0EgbWV0YSBuw6NvIHBvZGVyw6Egc2VyIGFsdGVyYWRhIGFww7NzIG8gcHVibGljYcOnw6NvIGRvIHByb2pldG8uJyksXG5cbiAgICAgICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICczLzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdUYXhhcycpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvYnJhbW9zIDEzJSBzb2JyZSBvICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAndmFsb3IgdG90YWwgYXJyZWNhZGFkbycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJyBwZWxvIHNldSBwcm9qZXRvIGNhc28gZWxlIGF0aW5qYSBvdSBzdXBlcmUgYSBtZXRhIGRlbnRybyBkbyBwcmF6byBkYSBjYW1wYW5oYS4gU2UgbyBwcm9qZXRvIG7Do28gYXRpbmdpciBhIG1ldGEsIG5lbmh1bWEgdGF4YSBzZXLDoSBjb2JyYWRhLicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnKVxuICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnNC85JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3BhbicsIHtzdHlsZTogeydmb250LXdlaWdodCc6ICcgNjAwJ319LCAnUHJhem8gZGEgY2FtcGFuaGEnKVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIGBTZXUgcHJvamV0byBlc3RhcsOhIGVtIGFycmVjYWRhw6fDo28gbm8gQ2F0YXJzZSBhdMOpIG8gZGlhICR7aC5tb21lbnRpZnkoY3RybC5leHBpcmVzQXQoKSl9IMOgcyAyM2g1OW1pbjU5cy4gRXN0ZSBwcmF6byBuw6NvIHBvZGVyw6Egc2VyIGFsdGVyYWRvIGFww7NzIGEgcHVibGljYcOnw6NvIGRvIHByb2pldG8uYClcbiAgICAgICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc1LzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdSZWdyYXMgZG8gcmVwYXNzZSBlIHJlZW1ib2xzbycpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbJ1F1YW5kbyBvIHByYXpvIGRvIHNldSBwcm9qZXRvIGNoZWdhciBhbyBmaW0sIHZvY8OqIGRldmVyw6EgY29uZmlybWFyIHNldXMgZGFkb3MgYmFuY8Ohcmlvcy4gQXDDs3MgZXNzYSBjb25maXJtYcOnw6NvLCBvIENhdGFyc2UgZGVwb3NpdGFyw6EgbyB2YWxvciBhcnJlY2FkYWRvLCBqw6EgY29tIG8gZGVzY29udG8gZGEgdGF4YSwgbmEgc3VhIGNvbnRhIGNvcnJlbnRlIGVtIGF0w6kgMTAgZGlhcyDDunRlaXMuIENhc28gbyBwcm9qZXRvIG7Do28gYXRpbmphIDEwMCUgZGEgbWV0YSBkZW50cm8gZG8gcHJhem8sIG8gQ2F0YXJzZSBpcsOhIHJlZW1ib2xzYXIgb3MgYXBvaWFkb3Jlcy4gJyxtKCdhLmFsdC1saW5rW2hyZWY9XFwnaHR0cDovL3N1cG9ydGUuY2F0YXJzZS5tZS9oYy9wdC1ici9hcnRpY2xlcy8yMDIzNjU1MDdcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJywgJ1NhaWJhIG1haXMgc29icmUgbyBwcm9jZXNzbyBkZSByZWVtYm9sc28nKSwnLiddKVxuICAgICAgICAgICAgICAgICAgICBdKSxcblxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzYvOScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7c3R5bGU6IHsnZm9udC13ZWlnaHQnOiAnIDYwMCd9fSwgJ08gcXVlIHBvZGUgZSBuw6NvIHBvZGUgYWx0ZXJhciBuYSBww6FnaW5hIGRvIHByb2pldG8gYSBwYXJ0aXIgZGEgcHVibGljYcOnw6NvPycpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIFttKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1ZvY8OqIG7Do28gcG9kZXLDoTonKSwnIGFsdGVyYXIgbyBub21lIGRvIHByb2pldG8sIGEgVVJMIChsaW5rKSBkbyBwcm9qZXRvLCBhIGNhdGVnb3JpYSBlc2NvbGhpZGEsIG8gdGlwbyBkZSBmaW5hbmNpYW1lbnRvLCBhIGNvbnRhIGJhbmPDoXJpYSwgYSBtZXRhIGRlIGFycmVjYWRhw6fDo28sIG8gcHJhem8gZXNjb2xoaWRvIGUgYXMgcmVjb21wZW5zYXMgb25kZSBleGlzdGlyZW0gYXBvaW9zIGrDoSBlZmV0dWFkb3MuXFwgJyxtKCdicicpLG0oJ2JyJyksbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1ZvY8OqIHBvZGVyw6E6ICcpLCdlZGl0YXIgbyBjb250ZcO6ZG8gZGEgZGVzY3Jpw6fDo28gZG8gcHJvamV0bywgYWx0ZXJhciBvIHbDrWRlbyBwcmluY2lwYWwgZGEgY2FtcGFuaGEsIGEgaW1hZ2VtIGRvIHByb2pldG8sIGEgZnJhc2UgZGUgZWZlaXRvLCBhcyByZWNvbXBlbnNhcyBvbmRlIG7Do28gZXhpc3RpcmVtIGFwb2lvcyBlZmV0dWFkb3MsIGFsw6ltIGRlIGFkaWNpb25hciBub3ZhcyByZWNvbXBlbnNhcyBkdXJhbnRlIGEgYXJyZWNhZGHDp8Ojby4nXSldXSksXG5cbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc3LzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdSZXNwb25zYWJpbGlkYWRlIGRvIENhdGFyc2UnKVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBbbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdPIENhdGFyc2Ugw6kgcmVzcG9uc8OhdmVsOicpLCfCoHBlbG8gZGVzZW52b2x2aW1lbnRvIHRlY25vbMOzZ2ljbyBkYSBwbGF0YWZvcm1hLCBhdGVuZGltZW50byBkZSBkw7p2aWRhcyBlIHByb2JsZW1hcyAodGFudG8gZGUgYXBvaWFkb3JlcyBxdWFudG8gZGUgcmVhbGl6YWRvcmVzKSwgcG9yIGhvc3BlZGFyIG8gcHJvamV0byBuYSBwbGF0YWZvcm1hIGUgcG9yIGdhcmFudGlyIGEgc2VndXJhbsOnYSBkYXMgdHJhbnNhw6fDtWVzIGZpbmFuY2VpcmFzLlxcICcsbSgnYnInKSxtKCdicicpLG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdPIENhdGFyc2UgbsOjbyDDqSByZXNwb25zw6F2ZWw6JyksJ8KgcGVsbyBmaW5hbmNpYW1lbnRvLCBkaXZ1bGdhw6fDo28gZSBleGVjdcOnw6NvLCBuZW0gcGVsYSBlbnRyZWdhIGRlIHJlY29tcGVuc2FzIGRvcyBwcm9qZXRvcyBpbnNjcml0b3MuJ10pXV0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnOC85JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3BhbicsIHtzdHlsZTogeydmb250LXdlaWdodCc6ICcgNjAwJ319LCAnU3VhcyByZXNwb25zYWJpbGlkYWRlcycpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLCfDiSBzdWEgcmVzcG9uc2FiaWxpZGFkZSB0dWRvIGFxdWlsbyBxdWUgZGl6IHJlc3BlaXRvIGEgZm9ybWF0YcOnw6NvIGRvIHByb2pldG8sIHBsYW5lamFtZW50byBlIGRpdnVsZ2HDp8OjbyBkYSBjYW1wYW5oYSBkZSBhcnJlY2FkYcOnw6NvLCBtb2JpbGl6YcOnw6NvIGRlIGFwb2lhZG9yZXMsIGV4ZWN1w6fDo28gZG8gcHJvamV0bywgcHJvZHXDp8OjbyBlIGVudHJlZ2EgZGUgcmVjb21wZW5zYXMgZGVudHJvIGRvIHByYXpvIGVzdGltYWRvIGUgY29tdW5pY2HDp8OjbyBjb20gYXBvaWFkb3Jlcy4nXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc5LzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdSZXRpcmFkYXMgZGUgcHJvamV0b3Mgbm8gYXInKVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnKSwnTyBDQVRBUlNFIHJlc2VydmEtc2UgbyBkaXJlaXRvIGRlLCBhIHNldSBleGNsdXNpdm8gY3JpdMOpcmlvIGUgdW1hIHZleiBub3RpZmljYWRvIGEgcmVzcGVpdG8sIGNhbmNlbGFyIHByb2pldG9zIGUgZW5jZXJyYXIgYXMgY29udGFzIGRlIENSSUFET1JFUyBERSBQUk9KRVRPUyBxdWUgdmlvbGVtIG5vc3NhcyAnLG0oJ2EuYWx0LWxpbmtbaHJlZj1cXCdodHRwOi8vc3Vwb3J0ZS5jYXRhcnNlLm1lL2hjL3B0LWJyL2FydGljbGVzLzIwMjM4NzYzOC1EaXJldHJpemVzLXBhcmEtY3JpYSVDMyVBNyVDMyVBM28tZGUtcHJvamV0b3NcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJywgJ1JlZ3JhcyBkbyBKb2dvJyksJyBlICcsbSgnYS5hbHQtbGlua1tocmVmPVxcJ2h0dHA6Ly93d3cuY2F0YXJzZS5tZS90ZXJtcy1vZi11c2VcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJywgJ1Rlcm1vcyBkZSBVc28nKSwnLiddKVxuICAgICAgICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gWyFjdHJsLmwoKSAmJiAhY3RybC5hY2NvdW50TCgpID8gW1xuICAgICAgICAocHJvamVjdC5pc19vd25lcl9vcl9hZG1pbiA/IG0uY29tcG9uZW50KHByb2plY3REYXNoYm9hcmRNZW51LCB7XG4gICAgICAgICAgICBwcm9qZWN0OiBtLnByb3AocHJvamVjdCksXG4gICAgICAgICAgICBoaWRlUHVibGlzaDogdHJ1ZVxuICAgICAgICB9KSA6ICcnKSxcbiAgICAgICAgbShgLnctc2VjdGlvbi5zZWN0aW9uLXByb2R1Y3QuJHtwcm9qZWN0Lm1vZGV9YCksXG4gICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJyksXG4gICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgW1xuICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgbSgnaW1nLnUtbWFyZ2luYm90dG9tLTIwW3NyYz1cXCcvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL2xhdW5jaC1pY29uLnBuZ1xcJ11bd2lkdGg9XFwnOTRcXCddJyksXG4gICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0yMCcsICdQcm9udG8gcGFyYSBsYW7Dp2FyIHN1YSBjYW1wYW5oYT8nKSxcbiAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTMwJywgJ1ByZXBhcmFtb3MgdW1hIGxpc3RhIGNvbSBpbmZvcm1hw6fDtWVzIGltcG9ydGFudGVzIHBhcmEgdm9jw6ogY2hlY2FyIGFudGVzIGRlIGNvbG9jYXIgc2V1IHByb2pldG8gbm8gYXIhJylcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgbSgnLmRpdmlkZXInKSxcbiAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLW9uZS1jb2x1bW4uYmctZ3JheS5zZWN0aW9uLmJlZm9yZS1mb290ZXInLCBbXG4gICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgbSgnLmNhcmQubWVkaXVtLnUtbWFyZ2luYm90dG9tLTYwLmNhcmQtdGVyY2lhcnknLCBbXG4gICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNsZWFyZml4JywgW1xuICAgICAgICAgICAgICAgICAgbSgnaW1nLmNhcmQtcHJvamVjdC10aHVtYi51LXJpZ2h0W3NyYz0nICsgcHJvamVjdC5sYXJnZV9pbWFnZSArICddJylcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0zMC5mb250c2l6ZS1iYXNlJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1TDrXR1bG86ICcpLCBwcm9qZWN0Lm5hbWVdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdMaW5rOiAnKSxgd3d3LmNhdGFyc2UubWUvJHtwcm9qZWN0LnBlcm1hbGlua31gXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnTW9kYWxpZGFkZSBkZSBmaW5hbmNpYW1lbnRvOiAnKSwgSTE4bi50KHByb2plY3QubW9kZSwgSTE4blNjb3BlKCkpXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnTWV0YSBkZSBhcnJlY2FkYcOnw6NvOiAnKSxgUiQgJHtoLmZvcm1hdE51bWJlcihwcm9qZWN0LmdvYWwsIDIsIDMpfWBdKSxcbiAgICAgICAgICAgICAgICAgICAgKHByb2plY3Qub25saW5lX2RheXMgIT09IG51bGwpID8gbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIGBQcmF6bzogJHtwcm9qZWN0Lm9ubGluZV9kYXlzfSAkeyhwcm9qZWN0Lm9ubGluZV9kYXlzID4gMSkgPyAnZGlhcycgOiAnZGlhJyB9YCldKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1Jlc3BvbnPDoXZlbDogJyksIGFjY291bnQub3duZXJfbmFtZV0pLFxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ0NQRi9DTlBKOiAnKSwgYWNjb3VudC5vd25lcl9kb2N1bWVudF0pXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMScpLFxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbmJvdHRvbS0xMCcpLFxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udGNvbG9yLXNlY29uZGFyeScsICdPcyBkYWRvcyBhY2ltYSBuw6NvIHBvZGVtIHNlciBhbHRlcmFkb3MgYXDDs3MgbyBwcm9qZXRvIGVudHJhciBubyBhci4gU2Ugdm9jw6ogcHJlY2lzYSBmYXplciBtdWRhbsOnYXMsIG5hdmVndWUgbmEgYmFycmEgbGF0ZXJhbCBlIHZvbHRlIGFxdWkgcXVhbmRvIGVzdGl2ZXIgdHVkbyBwcm9udG8hJylcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEnKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy5jYXJkLm1lZGl1bS51LXJhZGl1cy51LW1hcmdpbmJvdHRvbS02MCcsIFtcbiAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUmVsZW1icmUgbm9zc2FzIHJlZ3JhcycpLFxuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJyksXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsJywgWydBbnRlcyBkZSBwdWJsaWNhciwgY2xpcXVlIG5vcyBjw61yY3Vsb3MgYWJhaXhvIGUgY29uZmlybWUgcXVlIHZvY8OqIGVzdMOhIGNpZW50ZSBkZSBjb21vIGZ1bmNpb25hIG8gQ2F0YXJzZS4gUXVhbHF1ZXIgZMO6dmlkYSwgJyxtKCdhLmFsdC1saW5rW2hyZWY9XFwnaHR0cHM6Ly9lcXVpcGVjYXRhcnNlLnplbmRlc2suY29tL2FjY291bnQvZHJvcGJveGVzLzIwMjk4NTM3XFwnXVt0YXJnZXQ9XFwnX2JsYW5rXFwnXScsICdlbnRyZSBlbSBjb250YXRvJyksJyEnXSlcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pLFxuXG4gICAgICAgICAgICAgIF8ubWFwKHByb2plY3QubW9kZSA9PSAnZmxleCcgPyBmbGV4VGVybXMocHJvamVjdCkgOiB0ZXJtcyhwcm9qZWN0KSwgKHRlcm0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbShgLnUtbWFyZ2luYm90dG9tLTMwLmZvbnRzaXplLWJhc2Uke2luZGV4ID09IDAgPyAnJyA6ICcudy1oaWRkZW4ucHVibGlzaC1ydWxlcyd9YCwgW1xuICAgICAgICAgICAgICAgICAgICBtKGAudy1yb3dbaWQ9J3J1bGUtJHtpbmRleH0nXWAsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMS51LXRleHQtY2VudGVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtKChwcm9qZWN0Lm1vZGUgPT0gJ2ZsZXgnID8gY3RybC5mbGV4QWNjZXB0VGVybSgpIDogY3RybC5hY2NlcHRUZXJtKCkpW2luZGV4XSA/IGBhLnctaW5saW5lLWJsb2NrLmNoZWNrYm94LWJpZ1tocmVmPScjcnVsZS0ke2luZGV4ICsgMX0nXWAgOiBgYS53LWlubGluZS1ibG9jay5jaGVja2JveC1iaWcuY2hlY2tib3gtLXNlbGVjdGVkLmZhLmZhLWNoZWNrLmZhLWxnW2hyZWY9JyNydWxlLSR7aW5kZXggKyAxfSddYCwge29uY2xpY2s6ICgpID0+IGN0cmwuc2hvd05leHRUZXJtKGluZGV4LCAocHJvamVjdC5tb2RlID09ICdmbGV4JyA/IGN0cmwuZmxleEFjY2VwdFRlcm0gOiBjdHJsLmFjY2VwdFRlcm0pKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIHRlcm1cbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1yb3cucHVibGlzaC1idG4tc2VjdGlvbi53LWhpZGRlbicsIFtcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnKSxcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgbShgYS5idG4uYnRuLWxhcmdlLnUtbWFyZ2luYm90dG9tLTIwW2hyZWY9LyR7cHJvamVjdC5tb2RlID09ICdmbGV4JyA/ICdmbGV4aWJsZV9wcm9qZWN0cycgOiAncHJvamVjdHMnfS8ke3Byb2plY3QucHJvamVjdF9pZH0vcHVzaF90b19vbmxpbmVdYCwgJ1B1YmxpY2FyIGFnb3JhIScpLFxuICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLmZvbnRzaXplLXNtYWxsZXInLCBbXG4gICAgICAgICAgICAgICAgICAnQW8gcHVibGljYXIgbyBzZXUgcHJvamV0bywgdm9jw6ogZXN0w6EgYWNlaXRhbmRvIG9zICcsXG4gICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XFwnL3Rlcm1zLW9mLXVzZVxcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnVGVybW9zIGRlIFVzbycpLFxuICAgICAgICAgICAgICAgICAgJyBlICcsXG4gICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XFwnL3ByaXZhY3ktcG9saWN5XFwnXVt0YXJnZXQ9XFwnX2JsYW5rXFwnXScsICdQb2xpdGljYSBkZSBQcml2YWNpZGFkZScpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JylcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgICdcXFxuICAgICdcbiAgICAgIF0gOiBoLmxvYWRlcigpXTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwdWJsaXNoO1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmNvbnN0IHN0YXJ0Vk0gPSAoSTE4bikgPT4ge1xuICAgIGNvbnN0IGkxOG5TdGFydCA9IEkxOG4udHJhbnNsYXRpb25zW0kxOG4uY3VycmVudExvY2FsZSgpXS5wYWdlcy5zdGFydCxcbiAgICAgICAgdGVzdGltb25pYWxzID0gaTE4blN0YXJ0LnRlc3RpbW9uaWFscyxcbiAgICAgICAgY2F0ZWdvcnlQcm9qZWN0cyA9IGkxOG5TdGFydC5jYXRlZ29yeVByb2plY3RzLFxuICAgICAgICBwYW5lcyA9IGkxOG5TdGFydC5wYW5lcyxcbiAgICAgICAgcWEgPSBpMThuU3RhcnQucWE7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0ZXN0aW1vbmlhbHM6IF8ubWFwKHRlc3RpbW9uaWFscywgKHRlc3RpbW9uaWFsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRodW1iVXJsOiB0ZXN0aW1vbmlhbC50aHVtYixcbiAgICAgICAgICAgICAgICBjb250ZW50OiB0ZXN0aW1vbmlhbC5jb250ZW50LFxuICAgICAgICAgICAgICAgIG5hbWU6IHRlc3RpbW9uaWFsLm5hbWUsXG4gICAgICAgICAgICAgICAgdG90YWxzOiB0ZXN0aW1vbmlhbC50b3RhbHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICBwYW5lczogXy5tYXAocGFuZXMsIChwYW5lKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBwYW5lLmxhYmVsLFxuICAgICAgICAgICAgICAgIHNyYzogcGFuZS5zcmNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICBxdWVzdGlvbnM6IHtcbiAgICAgICAgICAgIGNvbF8xOiBfLm1hcChxYS5jb2xfMSwgKHF1ZXN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246IHF1ZXN0aW9uLnF1ZXN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IHF1ZXN0aW9uLmFuc3dlclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNvbF8yOiBfLm1hcChxYS5jb2xfMiwgKHF1ZXN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246IHF1ZXN0aW9uLnF1ZXN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IHF1ZXN0aW9uLmFuc3dlclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjYXRlZ29yeVByb2plY3RzOiBfLm1hcChjYXRlZ29yeVByb2plY3RzLCAoY2F0ZWdvcnkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlJZDogY2F0ZWdvcnkuY2F0ZWdvcnlfaWQsXG4gICAgICAgICAgICAgICAgc2FtcGxlUHJvamVjdHM6IFtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkuc2FtcGxlX3Byb2plY3RfaWRzLnByaW1hcnksXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5LnNhbXBsZV9wcm9qZWN0X2lkcy5zZWNvbmRhcnlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzdGFydFZNO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy55b3V0dWJlTGlnaHRib3ggY29tcG9uZW50XG4gKiBBIHZpc3VhbCBjb21wb25lbnQgdGhhdCBkaXNwbGF5cyBhIGxpZ2h0Ym94IHdpdGggYSB5b3V0dWJlIHZpZGVvXG4gKlxuICogRXhhbXBsZTpcbiAqIHZpZXc6ICgpID0+IHtcbiAqICAgICAgLi4uXG4gKiAgICAgIG0uY29tcG9uZW50KGMueW91dHViZUxpZ2h0Ym94LCB7c3JjOiAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1GbEZUY0RTS25MTSd9KVxuICogICAgICAuLi5cbiAqICB9XG4gKi9cblxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgeW91dHViZUxpZ2h0Ym94ID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBsZXQgcGxheWVyO1xuICAgICAgICBjb25zdCBzaG93TGlnaHRib3ggPSBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpLFxuICAgICAgICAgICAgc2V0WW91dHViZSA9IChlbCwgaXNJbml0aWFsaXplZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0U2NyaXB0VGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICAgICAgICAgICAgICAgICAgICB0YWcuc3JjID0gJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGknO1xuICAgICAgICAgICAgICAgICAgICBmaXJzdFNjcmlwdFRhZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0YWcsIGZpcnN0U2NyaXB0VGFnKTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9uWW91VHViZUlmcmFtZUFQSVJlYWR5ID0gY3JlYXRlUGxheWVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbG9zZVZpZGVvID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChwbGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYXllci5wYXVzZVZpZGVvKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2hvd0xpZ2h0Ym94LnRvZ2dsZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyZWF0ZVBsYXllciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIgPSBuZXcgWVQuUGxheWVyKCd5dHZpZGVvJywge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICc1MjgnLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzk0MCcsXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvSWQ6IGFyZ3Muc3JjLFxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJWYXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93SW5mbzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVzdEJyYW5kaW5nOiAwXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ29uU3RhdGVDaGFuZ2UnOiAoc3RhdGUpID0+IChzdGF0ZS5kYXRhID09PSAwKSA/IGNsb3NlVmlkZW8oKSA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNob3dMaWdodGJveDogc2hvd0xpZ2h0Ym94LFxuICAgICAgICAgICAgc2V0WW91dHViZTogc2V0WW91dHViZSxcbiAgICAgICAgICAgIGNsb3NlVmlkZW86IGNsb3NlVmlkZW9cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICByZXR1cm4gbSgnI3lvdXR1YmUtbGlnaHRib3gnLCBbXG4gICAgICAgICAgICBtKCdhI3lvdXR1YmUtcGxheS53LWxpZ2h0Ym94LnctaW5saW5lLWJsb2NrLmZhLmZhLXBsYXktY2lyY2xlLmZvbnRjb2xvci1uZWdhdGl2ZS5mYS01eFtocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddJywge1xuICAgICAgICAgICAgICAgIG9uY2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5zaG93TGlnaHRib3gudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3Mub25jbGljayAmJiBhcmdzLm9uY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG0oYCNsaWdodGJveC53LWxpZ2h0Ym94LWJhY2tkcm9wW3N0eWxlPVwiZGlzcGxheToke2N0cmwuc2hvd0xpZ2h0Ym94KCkgPyAnYmxvY2snIDogJ25vbmUnfVwiXWAsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1saWdodGJveC1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWxpZ2h0Ym94LWNvbnRlbnQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1saWdodGJveC12aWV3JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWxpZ2h0Ym94LWZyYW1lJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdmaWd1cmUudy1saWdodGJveC1maWd1cmUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudy1saWdodGJveC1pbWcudy1saWdodGJveC1pbWFnZVtzcmM9XFwnZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsJTNDc3ZnJTIweG1sbnM9JTIyaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmclMjIlMjB3aWR0aD0lMjI5NDAlMjIlMjBoZWlnaHQ9JTIyNTI4JTIyLyUzRVxcJ10nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJyN5dHZpZGVvLmVtYmVkbHktZW1iZWQudy1saWdodGJveC1lbWJlZCcsIHtjb25maWc6IGN0cmwuc2V0WW91dHViZX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctbGlnaHRib3gtc3Bpbm5lci53LWxpZ2h0Ym94LWhpZGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWxpZ2h0Ym94LWNvbnRyb2wudy1saWdodGJveC1sZWZ0LnctbGlnaHRib3gtaW5hY3RpdmUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWxpZ2h0Ym94LWNvbnRyb2wudy1saWdodGJveC1yaWdodC53LWxpZ2h0Ym94LWluYWN0aXZlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcjeW91dHViZS1jbG9zZS53LWxpZ2h0Ym94LWNvbnRyb2wudy1saWdodGJveC1jbG9zZScsIHtvbmNsaWNrOiBjdHJsLmNsb3NlVmlkZW99KVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctbGlnaHRib3gtc3RyaXAnKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB5b3V0dWJlTGlnaHRib3g7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xuaW1wb3J0IHN0YXJ0Vk0gZnJvbSAnLi4vdm1zL3N0YXJ0LXZtJztcbmltcG9ydCB5b3V0dWJlTGlnaHRib3ggZnJvbSAnLi4vYy95b3V0dWJlLWxpZ2h0Ym94JztcbmltcG9ydCBzbGlkZXIgZnJvbSAnLi4vYy9zbGlkZXInO1xuaW1wb3J0IGxhbmRpbmdRQSBmcm9tICcuLi9jL2xhbmRpbmctcWEnO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwYWdlcy5zdGFydCcpO1xuXG5jb25zdCBzdGFydCA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICBoLmFuYWx5dGljcy53aW5kb3dTY3JvbGwoe2NhdDogJ3Byb2plY3Rfc3RhcnQnLGFjdDogJ3N0YXJ0X3BhZ2Vfc2Nyb2xsJ30pO1xuICAgICAgICBjb25zdCBzdGF0cyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBjYXRlZ29yaWVzID0gbS5wcm9wKFtdKSxcbiAgICAgICAgICAgIHNlbGVjdGVkUGFuZSA9IG0ucHJvcCgwKSxcbiAgICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnkgPSBtLnByb3AoW10pLFxuICAgICAgICAgICAgZmVhdHVyZWRQcm9qZWN0cyA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5SWR4ID0gbS5wcm9wKC0xKSxcbiAgICAgICAgICAgIHN0YXJ0dm0gPSBzdGFydFZNKEkxOG4pLFxuICAgICAgICAgICAgZmlsdGVycyA9IHBvc3RncmVzdC5maWx0ZXJzVk0sXG4gICAgICAgICAgICBwYW5lSW1hZ2VzID0gc3RhcnR2bS5wYW5lcyxcbiAgICAgICAgICAgIGNhdGVnb3J5dm0gPSBmaWx0ZXJzKHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeV9pZDogJ2VxJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwcm9qZWN0dm0gPSBmaWx0ZXJzKHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiAnZXEnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHVzZXJ2bSA9IGZpbHRlcnMoe1xuICAgICAgICAgICAgICAgIGlkOiAnZXEnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGxvYWRlciA9IHBvc3RncmVzdC5sb2FkZXIsXG4gICAgICAgICAgICBzdGF0c0xvYWRlciA9IGxvYWRlcihtb2RlbHMuc3RhdGlzdGljLmdldFJvd09wdGlvbnMoKSksXG4gICAgICAgICAgICBsb2FkQ2F0ZWdvcmllcyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWxzLmNhdGVnb3J5LmdldFBhZ2UoZmlsdGVycyh7fSkub3JkZXIoe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYXNjJ1xuICAgICAgICAgICAgICAgIH0pLnBhcmFtZXRlcnMoKSkudGhlbihjYXRlZ29yaWVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWxlY3RQYW5lID0gKGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUGFuZShpZHgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbENhdGVnb3J5ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkZXIobW9kZWxzLmNhdGVnb3J5VG90YWxzLmdldFJvd09wdGlvbnMoY2F0ZWdvcnl2bS5wYXJhbWV0ZXJzKCkpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsUHJvamVjdCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGVyKG1vZGVscy5wcm9qZWN0RGV0YWlsLmdldFJvd09wdGlvbnMocHJvamVjdHZtLnBhcmFtZXRlcnMoKSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxVc2VyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkZXIobW9kZWxzLnVzZXJEZXRhaWwuZ2V0Um93T3B0aW9ucyh1c2Vydm0ucGFyYW1ldGVycygpKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VsZWN0Q2F0ZWdvcnkgPSAoY2F0ZWdvcnkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5SWR4KGNhdGVnb3J5LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnl2bS5jYXRlZ29yeV9pZChjYXRlZ29yeS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnkoW2NhdGVnb3J5XSk7XG4gICAgICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgICAgIGxDYXRlZ29yeSgpLmxvYWQoKS50aGVuKGxvYWRDYXRlZ29yeVByb2plY3RzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFVzZXIgPSAodXNlciwgaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZWRQcm9qZWN0cygpW2lkeF0gPSBfLmV4dGVuZCh7fSwgZmVhdHVyZWRQcm9qZWN0cygpW2lkeF0sIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlclRodW1iOiAgXy5maXJzdCh1c2VyKS5wcm9maWxlX2ltZ190aHVtYm5haWxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRQcm9qZWN0ID0gKHByb2plY3QsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVkUHJvamVjdHMoKVtpZHhdID0gXy5maXJzdChwcm9qZWN0KTtcbiAgICAgICAgICAgICAgICB1c2Vydm0uaWQoXy5maXJzdChwcm9qZWN0KS51c2VyLmlkKTtcbiAgICAgICAgICAgICAgICBsVXNlcigpLmxvYWQoKS50aGVuKCh1c2VyKSA9PiBzZXRVc2VyKHVzZXIsIGlkeCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvYWRDYXRlZ29yeVByb2plY3RzID0gKGNhdGVnb3J5KSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeShjYXRlZ29yeSk7XG4gICAgICAgICAgICAgICAgbGV0IGNhdGVnb3J5UHJvamVjdHMgPSBfLmZpbmRXaGVyZShzdGFydHZtLmNhdGVnb3J5UHJvamVjdHMsIHtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlJZDogXy5maXJzdChjYXRlZ29yeSkuY2F0ZWdvcnlfaWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlZFByb2plY3RzKFtdKTtcbiAgICAgICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQoY2F0ZWdvcnlQcm9qZWN0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoY2F0ZWdvcnlQcm9qZWN0cy5zYW1wbGVQcm9qZWN0cywgKHByb2plY3RfaWQsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKHByb2plY3RfaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdHZtLnByb2plY3RfaWQocHJvamVjdF9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbFByb2plY3QoKS5sb2FkKCkudGhlbigocHJvamVjdCkgPT4gc2V0UHJvamVjdChwcm9qZWN0LCBpZHgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBzdGF0c0xvYWRlci5sb2FkKCkudGhlbihzdGF0cyk7XG4gICAgICAgIGxvYWRDYXRlZ29yaWVzKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXRzOiBzdGF0cyxcbiAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXMsXG4gICAgICAgICAgICBwYW5lSW1hZ2VzOiBwYW5lSW1hZ2VzLFxuICAgICAgICAgICAgc2VsZWN0Q2F0ZWdvcnk6IHNlbGVjdENhdGVnb3J5LFxuICAgICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeTogc2VsZWN0ZWRDYXRlZ29yeSxcbiAgICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnlJZHg6IHNlbGVjdGVkQ2F0ZWdvcnlJZHgsXG4gICAgICAgICAgICBzZWxlY3RQYW5lOiBzZWxlY3RQYW5lLFxuICAgICAgICAgICAgc2VsZWN0ZWRQYW5lOiBzZWxlY3RlZFBhbmUsXG4gICAgICAgICAgICBmZWF0dXJlZFByb2plY3RzOiBmZWF0dXJlZFByb2plY3RzLFxuICAgICAgICAgICAgdGVzdGltb25pYWxzOiBzdGFydHZtLnRlc3RpbW9uaWFscyxcbiAgICAgICAgICAgIHF1ZXN0aW9uczogc3RhcnR2bS5xdWVzdGlvbnNcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBsZXQgc3RhdHMgPSBfLmZpcnN0KGN0cmwuc3RhdHMoKSk7XG4gICAgICAgIGNvbnN0IHRlc3RpbW9uaWFscyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBfLm1hcChjdHJsLnRlc3RpbW9uaWFscywgKHRlc3RpbW9uaWFsKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IG0oJy5jYXJkLnUtcmFkaXVzLmNhcmQtYmlnLmNhcmQtdGVyY2lhcnknLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbShgaW1nLnRodW1iLXRlc3RpbW9uaWFsLnUtcm91bmQudS1tYXJnaW5ib3R0b20tMjBbc3JjPVwiJHt0ZXN0aW1vbmlhbC50aHVtYlVybH1cIl1gKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIGBcIiR7dGVzdGltb25pYWwuY29udGVudH1cImApLFxuICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkJywgdGVzdGltb25pYWwubmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZScsIHRlc3RpbW9uaWFsLnRvdGFscylcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbSgnI3N0YXJ0Jyx7Y29uZmlnOiBoLnNldFBhZ2VUaXRsZShJMThuLnQoJ2hlYWRlcl9odG1sJywgSTE4blNjb3BlKCkpKX0sW1xuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5oZXJvLWZ1bGwuaGVyby1zdGFydCcsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLW1lZ2FqdW1iby5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTQwJywgSTE4bi50KCdzbG9nYW4nLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNDAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1wdXNoLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5idG4uYnRuLWxhcmdlLnUtbWFyZ2luYm90dG9tLTEwW2hyZWY9XCIjc3RhcnQtZm9ybVwiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBoLnNjcm9sbFRvKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3N0YXJ0JyxhY3Q6ICdzdGFydF9idG5zdGFydF9jbGljayd9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIEkxOG4udCgnc3VibWl0JywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIF8uaXNFbXB0eShzdGF0cykgPyAnJyA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXN0LmxpbmVoZWlnaHQtbG9vc2UnLCBoLmZvcm1hdE51bWJlcihzdGF0cy50b3RhbF9jb250cmlidXRvcnMsIDAsIDMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLXNtYWxsLnN0YXJ0LXN0YXRzJywgSTE4bi50KCdoZWFkZXIucGVvcGxlJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdC5saW5laGVpZ2h0LWxvb3NlJywgc3RhdHMudG90YWxfY29udHJpYnV0ZWQudG9TdHJpbmcoKS5zbGljZSgwLCAyKSArICcgbWlsaMO1ZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLXNtYWxsLnN0YXJ0LXN0YXRzJywgSTE4bi50KCdoZWFkZXIubW9uZXknLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXN0LmxpbmVoZWlnaHQtbG9vc2UnLCBoLmZvcm1hdE51bWJlcihzdGF0cy50b3RhbF9wcm9qZWN0c19zdWNjZXNzLCAwLCAzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1zbWFsbC5zdGFydC1zdGF0cycsIEkxOG4udCgnaGVhZGVyLnN1Y2Nlc3MnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMC53LWNvbC1wdXNoLTEudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyLnUtbWFyZ2luYm90dG9tLTEwLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBJMThuLnQoJ3BhZ2UtdGl0bGUnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbCcsIEkxOG4udCgncGFnZS1zdWJ0aXRsZScsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY2xlYXJmaXguaG93LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55Lmhvdy1jb2wtMDEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmluZm8taG93d29ya3MtYmFja2VycycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UnLCBJMThuLnQoJ2Jhbm5lci4xJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLCBJMThuLnQoJ2Jhbm5lci4yJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5pbmZvLWhvd3dvcmtzLWJhY2tlcnMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlJywgSTE4bi50KCdiYW5uZXIuMycsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdiYW5uZXIuNCcsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuaG93LWNvbC0wMicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmhvdy1jb2wtMDMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UnLCBJMThuLnQoJ2Jhbm5lci41JywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZScsIEkxOG4udCgnYmFubmVyLjYnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2ludG9wLTMwJywgSTE4bi50KCdiYW5uZXIuNycsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLCBJMThuLnQoJ2Jhbm5lci44JywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0uaG93LWNvbC0wMScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuaW5mby1ob3d3b3Jrcy1iYWNrZXJzJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZScsIEkxOG4udCgnYmFubmVyLjEnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZScsIEkxOG4udCgnYmFubmVyLjInLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmluZm8taG93d29ya3MtYmFja2VycycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UnLCBJMThuLnQoJ2Jhbm5lci4zJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLCAgSTE4bi50KCdiYW5uZXIuNCcsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLmRpdmlkZXInKSxcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi1sYXJnZScsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS02MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1sYXJnZXN0LmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBJMThuLnQoJ2ZlYXR1cmVzLnRpdGxlJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMjAnLCBJMThuLnQoJ2ZlYXR1cmVzLnN1YnRpdGxlJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctaGlkZGVuLW1haW4udy1oaWRkZW4tbWVkaXVtLnUtbWFyZ2ludG9wLTMwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCdmZWF0dXJlcy5mZWF0dXJlXzEnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCdmZWF0dXJlcy5mZWF0dXJlXzInLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCdmZWF0dXJlcy5mZWF0dXJlXzMnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCdmZWF0dXJlcy5mZWF0dXJlXzQnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCdmZWF0dXJlcy5mZWF0dXJlXzUnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCdmZWF0dXJlcy5mZWF0dXJlXzYnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy10YWJzLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy10YWItbWVudS53LWNvbC53LWNvbC00JywgXy5tYXAoY3RybC5wYW5lSW1hZ2VzLCAocGFuZSwgaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oYGJ0bi53LXRhYi1saW5rLnctaW5saW5lLWJsb2NrLnRhYi1saXN0LWl0ZW0keyhpZHggPT09IGN0cmwuc2VsZWN0ZWRQYW5lKCkpID8gJy5zZWxlY3RlZCcgOiAnJ31gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3N0YXJ0JyxhY3Q6ICdzdGFydF9zb2x1dGlvbl9jbGljaycsbGJsOiBwYW5lLmxhYmVsfSxjdHJsLnNlbGVjdFBhbmUoaWR4KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBwYW5lLmxhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXRhYi1jb250ZW50LnctY29sLnctY29sLTgnLCBfLm1hcChjdHJsLnBhbmVJbWFnZXMsIChwYW5lLCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnctdGFiLXBhbmUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGltZ1tzcmM9XCIke3BhbmUuc3JjfVwiXS5wYW5lLWltYWdlJHsoaWR4ID09PSBjdHJsLnNlbGVjdGVkUGFuZSgpKSA/ICcuc2VsZWN0ZWQnIDogJyd9YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcblxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLWxhcmdlLmNhcmQtdGVyY2lhcnknLFxuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTQwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLWxhcmdlc3QuZm9udHdlaWdodC1zZW1pYm9sZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCdtb2RlLnRpdGxlJywgSTE4blNjb3BlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCdtb2RlLnN1YnRpdGxlJywgSTE4blNjb3BlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mbGV4LXJvdy51LW1hcmdpbmJvdHRvbS00MCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mbGV4LWNvbHVtbi5jYXJkLnUtcmFkaXVzLnUtbWFyZ2luYm90dG9tLTMwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTMwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZ1tzcmM9XFwnaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NjMyZjMzNGVjOGEzNjdkMzQxYjRiYmFfYmFkZ2UtYW9uLnBuZ1xcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UuZmxleC1jb2x1bW4udS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnbW9kZS5hb24uaW5mbycsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mbGV4LWNvbHVtbi5mb250Y29sb3Itc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnbW9kZS5hb24uaW5mb18yJywgSTE4blNjb3BlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZsZXgtY29sdW1uLmNhcmQudS1yYWRpdXMudS1tYXJnaW5ib3R0b20tMzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tMzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nW3NyYz1cXCdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2MzJlYmFjZDA5Mjk1N2YzNGVhZWE5Y19iYWRnZS1mbGV4LnBuZ1xcJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UuZmxleC1jb2x1bW4udS1tYXJnaW5ib3R0b20tMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCdtb2RlLmZsZXguaW5mbycsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mbGV4LWNvbHVtbi5mb250Y29sb3Itc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnbW9kZS5mbGV4LmluZm9fMicsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTMwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgnbW9kZS50YXhfaW5mbycsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCdtb2RlLmZhaWxlZF9pbmZvJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoSTE4bi50KCdtb2RlLm1vcmVfbGluaycsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICksXG5cbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi1sYXJnZS5iZy1ibHVlLW9uZScsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlci5saW5laGVpZ2h0LXRpZ2h0LmZvbnRjb2xvci1uZWdhdGl2ZS51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgndmlkZW8udGl0bGUnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdicicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCd2aWRlby5zdWJ0aXRsZScsIEkxOG5TY29wZSgpKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoeW91dHViZUxpZ2h0Ym94LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM6IEkxOG4udCgndmlkZW8uc3JjJywgSTE4blNjb3BlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3Rfc3RhcnQnLGFjdDogJ3N0YXJ0X3ZpZGVvX3BsYXknfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtKCcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5zZWN0aW9uLWNhdGVnb3JpZXMnLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTAudy1jb2wtcHVzaC0xJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tNDAuZm9udGNvbG9yLW5lZ2F0aXZlJywgSTE4bi50KCdjYXRlZ29yaWVzLnRpdGxlJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctdGFicycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXRhYi1tZW51LnUtdGV4dC1jZW50ZXInLCBfLm1hcChjdHJsLmNhdGVnb3JpZXMoKSwgKGNhdGVnb3J5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oYGEudy10YWItbGluay53LWlubGluZS1ibG9jay5idG4tY2F0ZWdvcnkuc21hbGwuYnRuLWlubGluZSR7KGN0cmwuc2VsZWN0ZWRDYXRlZ29yeUlkeCgpID09PSBjYXRlZ29yeS5pZCkgPyAnLnctLWN1cnJlbnQnIDogJyd9YCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF9zdGFydCcsYWN0OiAnc3RhcnRfY2F0ZWdvcnlfY2xpY2snLGxibDogY2F0ZWdvcnkubmFtZX0sIGN0cmwuc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgY2F0ZWdvcnkubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXRhYi1jb250ZW50LnUtbWFyZ2ludG9wLTQwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXRhYi1wYW5lLnctLXRhYi1hY3RpdmUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIChjdHJsLnNlbGVjdGVkQ2F0ZWdvcnlJZHgoKSAhPT0gLTEpID8gXy5tYXAoY3RybC5zZWxlY3RlZENhdGVnb3J5KCksIChjYXRlZ29yeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWp1bWJvLnUtbWFyZ2luYm90dG9tLTIwJywgY2F0ZWdvcnkubmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1idXR0b24uYnRuLmJ0bi1tZWRpdW0uYnRuLWlubGluZS5idG4tZGFya1tocmVmPVwiI3N0YXJ0LWZvcm1cIl0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGguc2Nyb2xsVG8oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBJMThuLnQoJ3N1Ym1pdCcsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLW1lZ2FqdW1iby5mb250Y29sb3ItbmVnYXRpdmUnLCBgUiQgJHtjYXRlZ29yeS50b3RhbF9zdWNjZXNzZnVsX3ZhbHVlID8gaC5mb3JtYXROdW1iZXIoY2F0ZWdvcnkudG90YWxfc3VjY2Vzc2Z1bF92YWx1ZSwgMiwgMykgOiAnLi4uJ31gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTIwJywgJ0RvYWRvcyBwYXJhIHByb2pldG9zJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1tZWdhanVtYm8uZm9udGNvbG9yLW5lZ2F0aXZlJywgKGNhdGVnb3J5LnN1Y2Nlc3NmdWxfcHJvamVjdHMpID8gY2F0ZWdvcnkuc3VjY2Vzc2Z1bF9wcm9qZWN0cyA6ICcuLi4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJywgJ1Byb2pldG9zIGZpbmFuY2lhZG9zJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFfLmlzRW1wdHkoY3RybC5mZWF0dXJlZFByb2plY3RzKCkpID8gXy5tYXAoY3RybC5mZWF0dXJlZFByb2plY3RzKCksIChwcm9qZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIV8uaXNVbmRlZmluZWQocHJvamVjdCkgPyBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tMTAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGltZy51c2VyLWF2YXRhcltzcmM9XCIke2gudXNlQXZhdGFyT3JEZWZhdWx0KHByb2plY3QudXNlclRodW1iKX1cIl1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZCcsIHByb2plY3QudXNlci5uYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCdjYXRlZ29yaWVzLnBsZWRnZWQnLCBJMThuU2NvcGUoe3BsZWRnZWQ6IGguZm9ybWF0TnVtYmVyKHByb2plY3QucGxlZGdlZCksIGNvbnRyaWJ1dG9yczogcHJvamVjdC50b3RhbF9jb250cmlidXRvcnN9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBhLmxpbmstaGlkZGVuW2hyZWY9XCIvJHtwcm9qZWN0LnBlcm1hbGlua31cIl1gLCBwcm9qZWN0Lm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogbSgnLmZvbnRzaXplLWJhc2UnLCBJMThuLnQoJ2NhdGVnb3JpZXMubG9hZGluZ19mZWF0dXJlZCcsIEkxOG5TY29wZSgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbS5jb21wb25lbnQoc2xpZGVyLCB7XG4gICAgICAgICAgICAgICAgc2xpZGVzOiB0ZXN0aW1vbmlhbHMoKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogSTE4bi50KCd0ZXN0aW1vbmlhbHNfdGl0bGUnLCBJMThuU2NvcGUoKSksXG4gICAgICAgICAgICAgICAgc2xpZGVDbGFzczogJ3NsaWRlLXRlc3RpbW9uaWFscy1jb250ZW50JyxcbiAgICAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICdzbGlkZS10ZXN0aW1vbmlhbHMnLFxuICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF9zdGFydCcsYWN0OiAnc3RhcnRfdGVzdGltb25pYWxzX2NoYW5nZSd9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLmRpdmlkZXIudS1tYXJnaW50b3AtMzAnKSxcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tNjAudS1tYXJnaW50b3AtNDAnLCBJMThuLnQoJ3FhX3RpdGxlJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgXy5tYXAoY3RybC5xdWVzdGlvbnMuY29sXzEsIChxdWVzdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KGxhbmRpbmdRQSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiBxdWVzdGlvbi5xdWVzdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IHF1ZXN0aW9uLmFuc3dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF9zdGFydCcsYWN0OiAnc3RhcnRfcWFfY2xpY2snLGxibDogcXVlc3Rpb24ucXVlc3Rpb259KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBfLm1hcChjdHJsLnF1ZXN0aW9ucy5jb2xfMiwgKHF1ZXN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQobGFuZGluZ1FBLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246IHF1ZXN0aW9uLnF1ZXN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogcXVlc3Rpb24uYW5zd2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3N0YXJ0JyxhY3Q6ICdzdGFydF9xYV9jbGljaycsbGJsOiBxdWVzdGlvbi5xdWVzdGlvbn0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbSgnI3N0YXJ0LWZvcm0udy1zZWN0aW9uLnNlY3Rpb24tbGFyZ2UudS10ZXh0LWNlbnRlci5iZy1wdXJwbGUuYmVmb3JlLWZvb3RlcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1qdW1iby5mb250Y29sb3ItbmVnYXRpdmUudS1tYXJnaW5ib3R0b20tNjAnLCAnQ3JpZSBvIHNldSByYXNjdW5obyBncmF0dWl0YW1lbnRlIScpLFxuICAgICAgICAgICAgICAgICAgICBtKCdmb3JtW2FjdGlvbj1cIi9wcm9qZWN0cy9mYWxsYmFja19jcmVhdGVcIl1bbWV0aG9kPVwiR0VUXCJdLnctcm93LnctZm9ybScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uc3VibWl0OiBoLmFuYWx5dGljcy5vbmVUaW1lRXZlbnQoe2NhdDogJ3Byb2plY3RfY3JlYXRlJyxhY3Q6ICdjcmVhdGVfZm9ybV9zdWJtaXQnfSlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIuZm9udGNvbG9yLW5lZ2F0aXZlLnUtbWFyZ2luYm90dG9tLTEwJywgSTE4bi50KCdmb3JtLnRpdGxlJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dFtuYW1lPVwidXRmOFwiXVt0eXBlPVwiaGlkZGVuXCJdW3ZhbHVlPVwi4pyTXCJdJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgaW5wdXRbbmFtZT1cImF1dGhlbnRpY2l0eV90b2tlblwiXVt0eXBlPVwiaGlkZGVuXCJdW3ZhbHVlPVwiJHtoLmF1dGhlbnRpY2l0eVRva2VuKCl9XCJdYCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkLm1lZGl1bS51LW1hcmdpbmJvdHRvbS0zMFt0eXBlPVwidGV4dFwiXScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb2plY3RbbmFtZV0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogaC5hbmFseXRpY3Mub25lVGltZUV2ZW50KHtjYXQ6ICdwcm9qZWN0X2NyZWF0ZScsYWN0OiAnY3JlYXRlX2Zvcm1fY2hhbmdlJyxsYmw6ICduYW1lJ30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlci5mb250Y29sb3ItbmVnYXRpdmUudS1tYXJnaW5ib3R0b20tMTAnLCAnbmEgY2F0ZWdvcmlhJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc2VsZWN0Lnctc2VsZWN0LnRleHQtZmllbGQubWVkaXVtLnUtbWFyZ2luYm90dG9tLTQwJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHJvamVjdFtjYXRlZ29yeV9pZF0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogaC5hbmFseXRpY3Mub25lVGltZUV2ZW50KHtjYXQ6ICdwcm9qZWN0X2NyZWF0ZScsYWN0OiAnY3JlYXRlX2Zvcm1fY2hhbmdlJyxsYmw6ICdjYXRlZ29yeSd9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XCJcIl0nLCBJMThuLnQoJ2Zvcm0uc2VsZWN0X2RlZmF1bHQnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLmNhdGVnb3JpZXMoKSwgKGNhdGVnb3J5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbShgb3B0aW9uW3ZhbHVlPVwiJHtjYXRlZ29yeS5pZH1cIl1gLCBjYXRlZ29yeS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTgwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXB1c2gtNC51LW1hcmdpbnRvcC00MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgaW5wdXRbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIiR7STE4bi50KCdmb3JtLnN1Ym1pdCcsIEkxOG5TY29wZSgpKX1cIl0udy1idXR0b24uYnRuLmJ0bi1sYXJnZWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHN0YXJ0O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcblxuY29uc3QgdGVhbVRvdGFsID0ge1xuICAgIGNvbnRyb2xsZXIoKSB7XG4gICAgICAgIGNvbnN0IHZtID0ge1xuICAgICAgICAgICAgY29sbGVjdGlvbjogbS5wcm9wKFtdKVxuICAgICAgICB9O1xuXG4gICAgICAgIG1vZGVscy50ZWFtVG90YWwuZ2V0Um93KCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdm0uY29sbGVjdGlvbihkYXRhKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZtOiB2bVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcjdGVhbS10b3RhbC1zdGF0aWMudy1zZWN0aW9uLnNlY3Rpb24tb25lLWNvbHVtbi5zZWN0aW9uLnUtbWFyZ2ludG9wLTQwLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICBjdHJsLnZtLmNvbGxlY3Rpb24oKS5tYXAoKHRlYW1Ub3RhbCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0zMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdIb2plIHNvbW9zICcgKyB0ZWFtVG90YWwubWVtYmVyX2NvdW50ICsgJyBwZXNzb2FzIGVzcGFsaGFkYXMgcG9yICcgKyB0ZWFtVG90YWwudG90YWxfY2l0aWVzICsgJyBjaWRhZGVzIGVtICcgKyB0ZWFtVG90YWwuY291bnRyaWVzLmxlbmd0aCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgcGHDrXNlcyAoJyArIHRlYW1Ub3RhbC5jb3VudHJpZXMudG9TdHJpbmcoKSArICcpISBPIENhdGFyc2Ugw6kgaW5kZXBlbmRlbnRlLCBzZW0gaW52ZXN0aWRvcmVzLCBkZSBjw7NkaWdvIGFiZXJ0byBlIGNvbnN0cnXDrWRvIGNvbSBhbW9yLiBOb3NzYSBwYWl4w6NvIMOpIGNvbnN0cnVpciB1bSBhbWJpZW50ZSBvbmRlIGNhZGEgdmV6IG1haXMgcHJvamV0b3MgcG9zc2FtIGdhbmhhciB2aWRhLicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIubGluZWhlaWdodC10aWdodC50ZXh0LXN1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTm9zc2EgZXF1aXBlLCBqdW50YSwgasOhIGFwb2lvdSBSJCcgKyBoLmZvcm1hdE51bWJlcih0ZWFtVG90YWwudG90YWxfYW1vdW50KSArICcgcGFyYSAnICsgdGVhbVRvdGFsLnRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzICsgJyBwcm9qZXRvcyEnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0ZWFtVG90YWw7XG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuXG5jb25zdCB0ZWFtTWVtYmVycyA9IHtcbiAgICBjb250cm9sbGVyKCkge1xuICAgICAgICBjb25zdCB2bSA9IHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBtLnByb3AoW10pXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBncm91cENvbGxlY3Rpb24gPSAoY29sbGVjdGlvbiwgZ3JvdXBUb3RhbCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBfLm1hcChfLnJhbmdlKE1hdGguY2VpbChjb2xsZWN0aW9uLmxlbmd0aCAvIGdyb3VwVG90YWwpKSwgKGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2xpY2UoaSAqIGdyb3VwVG90YWwsIChpICsgMSkgKiBncm91cFRvdGFsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgbW9kZWxzLnRlYW1NZW1iZXIuZ2V0UGFnZSgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHZtLmNvbGxlY3Rpb24oZ3JvdXBDb2xsZWN0aW9uKGRhdGEsIDQpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZtOiB2bVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsKSB7XG4gICAgICAgIHJldHVybiBtKCcjdGVhbS1tZW1iZXJzLXN0YXRpYy53LXNlY3Rpb24uc2VjdGlvbicsIFtcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICBfLm1hcChjdHJsLnZtLmNvbGxlY3Rpb24oKSwgKGdyb3VwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy1yb3cudS10ZXh0LWNlbnRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGdyb3VwLCAobWVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oJy50ZWFtLW1lbWJlci53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudy1jb2wtdGlueS02LnUtbWFyZ2luYm90dG9tLTQwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XCIvdXNlcnMvJyArIG1lbWJlci5pZCArICdcIl0nLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudGh1bWIuYmlnLnUtcm91bmQudS1tYXJnaW5ib3R0b20tMTBbc3JjPVwiJyArIG1lbWJlci5pbWcgKyAnXCJdJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1iYXNlJywgbWVtYmVyLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICdBcG9pb3UgJyArIG1lbWJlci50b3RhbF9jb250cmlidXRlZF9wcm9qZWN0cyArICcgcHJvamV0b3MnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRlYW1NZW1iZXJzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgdGVhbVRvdGFsIGZyb20gJy4uL2MvdGVhbS10b3RhbCc7XG5pbXBvcnQgdGVhbU1lbWJlcnMgZnJvbSAnLi4vYy90ZWFtLW1lbWJlcnMnO1xuXG5jb25zdCB0ZWFtID0ge1xuICAgIHZpZXcoKSB7XG4gICAgICAgIHJldHVybiBtKCcjc3RhdGljLXRlYW0tYXBwJywgW1xuICAgICAgICAgICAgbS5jb21wb25lbnQodGVhbVRvdGFsKSxcbiAgICAgICAgICAgIG0uY29tcG9uZW50KHRlYW1NZW1iZXJzKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0ZWFtO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy5Vc2VyQmFsYW5jZVJlcXVlc3RNb2RhbENvbnRlbnQgY29tcG9uZW50XG4gKiBSZW5kZXIgdGhlIGN1cnJlbnQgdXNlciBiYW5rIGFjY291bnQgdG8gY29uZmlybSBmdW5kIHJlcXVlc3RcbiAqXG4gKiBFeGFtcGxlOlxuICogbS5jb21wb25lbnQoYy5Vc2VyQmFsYW5jZVJlcXVlc3RNb2RlbENvbnRlbnQsIHtcbiAqICAgICBiYWxhbmNlOiB7dXNlcl9pZDogMTIzLCBhbW91bnQ6IDEyM30gLy8gdXNlckJhbGFuY2Ugc3RydWN0XG4gKiB9KVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAndXNlcnMuYmFsYW5jZScpO1xuXG5jb25zdCB1c2VyQmFsYW5jZVJlcXVlc3RNb2RlbENvbnRlbnQgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IHZtID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7dXNlcl9pZDogJ2VxJ30pLFxuICAgICAgICAgICAgICBiYWxhbmNlID0gYXJncy5iYWxhbmNlLFxuICAgICAgICAgICAgICBsb2FkZXJPcHRzID0gbW9kZWxzLmJhbGFuY2VUcmFuc2Zlci5wb3N0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgICB1c2VyX2lkOiBiYWxhbmNlLnVzZXJfaWR9KSxcbiAgICAgICAgICAgICAgcmVxdWVzdExvYWRlciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obG9hZGVyT3B0cyksXG4gICAgICAgICAgICAgIGRpc3BsYXlEb25lID0gaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKSxcbiAgICAgICAgICAgICAgcmVxdWVzdEZ1bmQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXF1ZXN0TG9hZGVyLmxvYWQoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgYXJncy5iYWxhbmNlTWFuYWdlci5sb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgYXJncy5iYWxhbmNlVHJhbnNhY3Rpb25NYW5hZ2VyLmxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5RG9uZS50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIGFyZ3MuYmFua0FjY291bnRNYW5hZ2VyLmxvYWQoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVxdWVzdExvYWRlcjogcmVxdWVzdExvYWRlcixcbiAgICAgICAgICAgIHJlcXVlc3RGdW5kOiByZXF1ZXN0RnVuZCxcbiAgICAgICAgICAgIGJhbmtBY2NvdW50czogYXJncy5iYW5rQWNjb3VudE1hbmFnZXIuY29sbGVjdGlvbixcbiAgICAgICAgICAgIGRpc3BsYXlEb25lOiBkaXNwbGF5RG9uZSxcbiAgICAgICAgICAgIGxvYWRCYW5rQTogYXJncy5iYW5rQWNjb3VudE1hbmFnZXIubG9hZGVyXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgYmFsYW5jZSA9IGFyZ3MuYmFsYW5jZTtcblxuICAgICAgICByZXR1cm4gKGN0cmwubG9hZEJhbmtBKCkgPyBoLmxvYWRlcigpIDogbSgnZGl2JywgXy5tYXAoY3RybC5iYW5rQWNjb3VudHMoKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1oZWFkZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LXRleHQtY2VudGVyJywgSTE4bi50KCd3aXRoZHJhdycsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAoY3RybC5kaXNwbGF5RG9uZSgpID8gbSgnLm1vZGFsLWRpYWxvZy1jb250ZW50LnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mYS5mYS1jaGVjay1jaXJjbGUuZmEtNXgudGV4dC1zdWNjZXNzLnUtbWFyZ2luYm90dG9tLTQwJyksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtbGFyZ2UnLCBJMThuLnQoJ3N1Y2Vzc19tZXNzYWdlJywgSTE4blNjb3BlKCkpKVxuICAgICAgICAgICAgICAgIF0pIDogbSgnLm1vZGFsLWRpYWxvZy1jb250ZW50JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0yMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdWYWxvcjonKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi50ZXh0LXN1Y2Nlc3MnLCBgUiQgJHtoLmZvcm1hdE51bWJlcihiYWxhbmNlLmFtb3VudCwgMiwgMyl9YClcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTEwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3BhbicsIHtzdHlsZTogeydmb250LXdlaWdodCc6ICcgNjAwJ319LCBJMThuLnQoJ2JhbmsuYWNjb3VudCcsIEkxOG5TY29wZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ2JhbmsubmFtZScsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5vd25lcl9uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ2JhbmsuY3BmX2NucGonLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub3duZXJfZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udCgnYmFuay5iYW5rX25hbWUnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uYmFua19uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ2JhbmsuYWdlbmN5JywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtpdGVtLmFnZW5jeX0tJHtpdGVtLmFnZW5jeV9kaWdpdH1gXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ2JhbmsuYWNjb3VudCcsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7aXRlbS5hY2NvdW50fS0ke2l0ZW0uYWNjb3VudF9kaWdpdH1gXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICBdKSksXG4gICAgICAgICAgICAgICAgKCFjdHJsLmRpc3BsYXlEb25lKCkgP1xuICAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLW5hdi1ib3R0b20nLCBbXG4gICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGN0cmwucmVxdWVzdExvYWRlcigpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgubG9hZGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbSgnYS5idG4uYnRuLWxhcmdlLmJ0bi1yZXF1ZXN0LWZ1bmRbaHJlZj1cImpzOnZvaWQoMCk7XCJdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b25jbGljazogY3RybC5yZXF1ZXN0RnVuZH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NvbGljaXRhciBzYXF1ZScpKVxuICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJylcbiAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgIF0pIDogJycpXG4gICAgICAgICAgICBdO1xuICAgICAgICB9KSkpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJCYWxhbmNlUmVxdWVzdE1vZGVsQ29udGVudDtcbiIsIi8qKlxuICogd2luZG93LmMuVXNlckJhbGFuY2UgY29tcG9uZW50XG4gKiBSZW5kZXIgdGhlIGN1cnJlbnQgdXNlciB0b3RhbCBiYWxhbmNlIGFuZCByZXF1ZXN0IGZ1bmQgYWN0aW9uXG4gKlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuVXNlckJhbGFuY2UsIHtcbiAqICAgICB1c2VyX2lkOiAxMjMsXG4gKiB9KVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgbW9kYWxCb3ggZnJvbSAnLi9tb2RhbC1ib3gnO1xuaW1wb3J0IHVzZXJCYWxhbmNlUmVxdWVzdE1vZGFsQ29udGVudCBmcm9tICcuL3VzZXItYmFsYW5jZS1yZXF1ZXN0LW1vZGFsLWNvbnRlbnQnO1xuXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICd1c2Vycy5iYWxhbmNlJyk7XG5cbmNvbnN0IHVzZXJCYWxhbmNlID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBhcmdzLmJhbGFuY2VNYW5hZ2VyLmxvYWQoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlckJhbGFuY2VzOiBhcmdzLmJhbGFuY2VNYW5hZ2VyLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBkaXNwbGF5TW9kYWw6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSlcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBiYWxhbmNlID0gXy5maXJzdChjdHJsLnVzZXJCYWxhbmNlcygpKSxcbiAgICAgICAgICAgIGJhbGFuY2VSZXF1ZXN0TW9kYWxDID0gW1xuICAgICAgICAgICAgICAgIHVzZXJCYWxhbmNlUmVxdWVzdE1vZGFsQ29udGVudCxcbiAgICAgICAgICAgICAgICBfLmV4dGVuZCh7fSwge2JhbGFuY2U6IGJhbGFuY2V9LCBhcmdzKVxuICAgICAgICAgICAgXTtcblxuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5zZWN0aW9uLnVzZXItYmFsYW5jZS1zZWN0aW9uJywgW1xuICAgICAgICAgICAgKGN0cmwuZGlzcGxheU1vZGFsKCkgPyBtLmNvbXBvbmVudChtb2RhbEJveCwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlNb2RhbDogY3RybC5kaXNwbGF5TW9kYWwsXG4gICAgICAgICAgICAgICAgY29udGVudDogYmFsYW5jZVJlcXVlc3RNb2RhbENcbiAgICAgICAgICAgIH0pIDogJycpLFxuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5LnUtbWFyZ2luYm90dG9tLTIwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlcicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ3RvdGFscycsIEkxOG5TY29wZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLnRleHQtc3VjY2VzcycsIGBSJCAke2guZm9ybWF0TnVtYmVyKGJhbGFuY2UuYW1vdW50LCAyLCAzKX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbShgYVtjbGFzcz1cInItZnVuZC1idG4gdy1idXR0b24gYnRuIGJ0bi1tZWRpdW0gdS1tYXJnaW5ib3R0b20tMTAgJHsoYmFsYW5jZS5hbW91bnQgPD0gMCA/ICdidG4taW5hY3RpdmUnIDogJycpfVwiXVtocmVmPVwianM6dm9pZCgwKTtcIl1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7b25jbGljazogKGJhbGFuY2UuYW1vdW50ID4gMCA/IGN0cmwuZGlzcGxheU1vZGFsLnRvZ2dsZSA6ICdqczp2b2lkKDApOycpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCd3aXRoZHJhd19jdGEnLCBJMThuU2NvcGUoKSkpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJCYWxhbmNlO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAndXNlcnMuYmFsYW5jZScpO1xuXG5jb25zdCB1c2VyQmFsYW5jZVRyYXNhY3Rpb25Sb3cgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGNvbnN0IGV4cGFuZGVkID0gaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKTtcblxuICAgICAgICBpZiAoYXJncy5pbmRleCA9PSAwKSB7XG4gICAgICAgICAgICBleHBhbmRlZC50b2dnbGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBleHBhbmRlZDogZXhwYW5kZWRcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBpdGVtID0gYXJncy5pdGVtLFxuICAgICAgICAgICAgICBjcmVhdGVkQXQgPSBoLm1vbWVudEZyb21TdHJpbmcoaXRlbS5jcmVhdGVkX2F0LCAnWVlZWS1NTS1ERCcpO1xuXG4gICAgICAgIHJldHVybiBtKGBkaXZbY2xhc3M9J2JhbGFuY2UtY2FyZCAkeyhjdHJsLmV4cGFuZGVkKCkgPyAnY2FyZC1kZXRhaWxlZC1vcGVuJyA6ICcnKX0nXWAsXG4gICAgICAgICAgICAgICAgIG0oJy53LWNsZWFyZml4LmNhcmQuY2FyZC1jbGlja2FibGUnLCBbXG4gICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtdGlueS0yJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwubGluZWhlaWdodC10aWdodGVzdCcsIGNyZWF0ZWRBdC5mb3JtYXQoJ0QgTU1NJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXRlcmNpYXJ5JywgY3JlYXRlZEF0LmZvcm1hdCgnWVlZWScpKVxuICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMC53LWNvbC10aW55LTEwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlci5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdkZWJpdCcsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLWJhc2UudGV4dC1lcnJvcicsIGBSJCAke2guZm9ybWF0TnVtYmVyKE1hdGguYWJzKGl0ZW0uZGViaXQpLCAyLCAzKX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVyLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ2NyZWRpdCcsIEkxOG5TY29wZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLWJhc2UudGV4dC1zdWNjZXNzJywgYFIkICR7aC5mb3JtYXROdW1iZXIoaXRlbS5jcmVkaXQsIDIsIDMpfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXIuZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udCgndG90YWxzJywgSTE4blNjb3BlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtYmFzZScsIGBSJCAke2guZm9ybWF0TnVtYmVyKGl0ZW0udG90YWxfYW1vdW50LCAyLCAzKX1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgIG0oYGEudy1pbmxpbmUtYmxvY2suYXJyb3ctYWRtaW4uJHsoY3RybC5leHBhbmRlZCgpID8gJ2Fycm93LWFkbWluLW9wZW5lZCcgOiAnJyl9LmZhLmZhLWNoZXZyb24tZG93bi5mb250Y29sb3Itc2Vjb25kYXJ5W2hyZWY9XCJqczoodm9pZCgwKSk7XCJdYCwge29uY2xpY2s6IGN0cmwuZXhwYW5kZWQudG9nZ2xlfSlcbiAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgIChjdHJsLmV4cGFuZGVkKCkgPyBtKCcuY2FyZCcsIF8ubWFwKGl0ZW0uc291cmNlLCAodHJhbnNhY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgIGxldCBwb3MgPSB0cmFuc2FjdGlvbi5hbW91bnQgPj0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oJ2RpdicsW1xuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGAudGV4dC0keyhwb3MgPyAnc3VjY2VzcycgOiAnZXJyb3InKX1gLCBgJHtwb3MgPyAnKycgOiAnLSd9IFIkICR7aC5mb3JtYXROdW1iZXIoTWF0aC5hYnModHJhbnNhY3Rpb24uYW1vdW50KSwgMiwgMyl9YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIGAke3RyYW5zYWN0aW9uLmV2ZW50X25hbWV9ICR7dHJhbnNhY3Rpb24ub3JpZ2luX29iamVjdC5uYW1lfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmRpdmlkZXIudS1tYXJnaW5ib3R0b20tMTAnKVxuICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgIH0pKSA6ICcnKVxuICAgICAgICAgICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlckJhbGFuY2VUcmFzYWN0aW9uUm93O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHVzZXJCYWxhbmNlVHJhbnNhY3Rpb25Sb3cgZnJvbSAnLi91c2VyLWJhbGFuY2UtdHJhbnNhY3Rpb24tcm93JztcblxuY29uc3QgdXNlckJhbGFuY2VUcmFuc2FjdGlvbnMgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIGFyZ3MuYmFsYW5jZVRyYW5zYWN0aW9uTWFuYWdlci5sb2FkKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpc3Q6IGFyZ3MuYmFsYW5jZVRyYW5zYWN0aW9uTWFuYWdlci5saXN0XG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgbGlzdCA9IGN0cmwubGlzdDtcblxuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5zZWN0aW9uLmNhcmQtdGVyY2lhcnkuYmVmb3JlLWZvb3Rlci5iYWxhbmNlLXRyYW5zYWN0aW9ucy1hcmVhJywgW1xuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgXy5tYXAobGlzdC5jb2xsZWN0aW9uKCksIChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChcbiAgICAgICAgICAgICAgICAgICAgdXNlckJhbGFuY2VUcmFuc2FjdGlvblJvdywge2l0ZW06IGl0ZW0sIGluZGV4OiBpbmRleH0pO1xuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgbSgnLmNvbnRhaW5lcicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW50b3AtNDAnLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXB1c2gtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICFsaXN0LmlzTG9hZGluZygpID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuaXNMYXN0UGFnZSgpID8gJycgOiBtKCdidXR0b24jbG9hZC1tb3JlLmJ0bi5idG4tbWVkaXVtLmJ0bi10ZXJjaWFyeScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogbGlzdC5uZXh0UGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdDYXJyZWdhciBtYWlzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgaC5sb2FkZXIoKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VyQmFsYW5jZVRyYW5zYWN0aW9ucztcbiIsIi8qKlxuICogd2luZG93LmMucm9vdC5CYWxhbmNlIGNvbXBvbmVudFxuICogQSByb290IGNvbXBvbmVudCB0byBzaG93IHVzZXIgYmFsYW5jZSBhbmQgdHJhbnNhY3Rpb25zXG4gKlxuICogRXhhbXBsZTpcbiAqIFRvIG1vdW50IHRoaXMgY29tcG9uZW50IGp1c3QgY3JlYXRlIGEgRE9NIGVsZW1lbnQgbGlrZTpcbiAqIDxkaXYgZGF0YS1taXRocmlsPVwiVXNlcnNCYWxhbmNlXCIgZGF0YS1wYXJhbWV0ZXJzPVwieyd1c2VyX2lkJzogMTB9XCI+XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB1c2VyQmFsYW5jZSBmcm9tICcuLi9jL3VzZXItYmFsYW5jZSc7XG5pbXBvcnQgdXNlckJhbGFuY2VUcmFuc2FjdGlvbnMgZnJvbSAnLi4vYy91c2VyLWJhbGFuY2UtdHJhbnNhY3Rpb25zJztcblxuY29uc3QgdXNlckJhbGFuY2VNYWluID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCB1c2VySWRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3VzZXJfaWQ6ICdlcSd9KTtcblxuICAgICAgICB1c2VySWRWTS51c2VyX2lkKGFyZ3MudXNlcl9pZCk7XG5cbiAgICAgICAgLy8gSGFuZGxlcyB3aXRoIHVzZXIgYmFsYW5jZSByZXF1ZXN0IGRhdGFcbiAgICAgICAgY29uc3QgYmFsYW5jZU1hbmFnZXIgPSAoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG0ucHJvcChbe2Ftb3VudDogMCwgdXNlcl9pZDogYXJncy51c2VyX2lkfV0pLFxuICAgICAgICAgICAgICAgICAgbG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbHMuYmFsYW5jZS5nZXRSb3dXaXRoVG9rZW4odXNlcklkVk0ucGFyYW1ldGVycygpKS50aGVuKGNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uLFxuICAgICAgICAgICAgICAgIGxvYWQ6IGxvYWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKCksXG5cbiAgICAgICAgICAgICAgLy8gSGFuZGxlcyB3aXRoIHVzZXIgYmFsYW5jZSB0cmFuc2FjdGlvbnMgbGlzdCBkYXRhXG4gICAgICAgICAgICAgIGJhbGFuY2VUcmFuc2FjdGlvbk1hbmFnZXIgPSAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdFZNID0gcG9zdGdyZXN0LnBhZ2luYXRpb25WTShcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbHMuYmFsYW5jZVRyYW5zYWN0aW9uLCAnY3JlYXRlZF9hdC5kZXNjJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UodXNlcklkVk0ucGFyYW1ldGVycygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgbG9hZDogbG9hZCxcbiAgICAgICAgICAgICAgICAgICAgICBsaXN0OiBsaXN0Vk1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pKCksXG5cbiAgICAgICAgICAgICAgLy8gSGFuZGxlcyB3aXRoIGJhbmsgYWNjb3VudCB0byBjaGVja1xuICAgICAgICAgICAgICBiYW5rQWNjb3VudE1hbmFnZXIgPSAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG0ucHJvcChbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXIgPSAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbHMuYmFua0FjY291bnQuZ2V0Um93T3B0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZFZNLnBhcmFtZXRlcnMoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyLmxvYWQoKS50aGVuKGNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgIGxvYWQ6IGxvYWQsXG4gICAgICAgICAgICAgICAgICAgICAgbG9hZGVyOiBsb2FkZXJcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhbmtBY2NvdW50TWFuYWdlcjogYmFua0FjY291bnRNYW5hZ2VyLFxuICAgICAgICAgICAgYmFsYW5jZU1hbmFnZXI6IGJhbGFuY2VNYW5hZ2VyLFxuICAgICAgICAgICAgYmFsYW5jZVRyYW5zYWN0aW9uTWFuYWdlcjogYmFsYW5jZVRyYW5zYWN0aW9uTWFuYWdlclxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBfLmV4dGVuZCh7fSwgYXJncywgY3RybCk7XG4gICAgICAgIHJldHVybiBtKCcjYmFsYW5jZS1hcmVhJywgW1xuICAgICAgICAgICAgbS5jb21wb25lbnQodXNlckJhbGFuY2UsIG9wdHMpLFxuICAgICAgICAgICAgbSgnLmRpdmlkZXInKSxcbiAgICAgICAgICAgIG0uY29tcG9uZW50KHVzZXJCYWxhbmNlVHJhbnNhY3Rpb25zLCBvcHRzKSxcbiAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS00MCcpLFxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLmNhcmQtdGVyY2lhcnkuYmVmb3JlLWZvb3RlcicpXG4gICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJCYWxhbmNlTWFpbjtcbiIsIi8qXG4gKiBVc2VyRm9sbG93QnRuIC0gQ29tcG9uZW50XG4gKiBIYW5kbGVzIHdpdGggZm9sbG93IC8gdW5mb2xsb3cgYWN0aW9ucyB0byBhbiB1c2VyXG4gKlxuICogRXhhbXBsZTpcbiAqIG0uY29tcG9uZW50KGMuVXNlckZvbGxvd0J0biwge2ZvbGxvd19pZDogMTAsIGZvbGxvd2luZzogZmFsc2V9KVxuICovXG5cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcblxuY29uc3QgVXNlckZvbGxvd0J0biA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZm9sbG93aW5nID0gbS5wcm9wKChhcmdzLmZvbGxvd2luZyB8fCBmYWxzZSkpLFxuICAgICAgICAgICAgICBmb2xsb3dWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe2ZvbGxvd19pZDogJ2VxJ30pLFxuICAgICAgICAgICAgICBsb2FkaW5nID0gbS5wcm9wKGZhbHNlKSxcbiAgICAgICAgICAgICAgaG92ZXIgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgICB1c2VyRm9sbG93SW5zZXJ0ID0gbW9kZWxzLnVzZXJGb2xsb3cucG9zdE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgICAgZm9sbG93X2lkOiBhcmdzLmZvbGxvd19pZH0pLFxuICAgICAgICAgICAgICB1c2VyRm9sbG93RGVsZXRlID0gKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGZvbGxvd1ZNLmZvbGxvd19pZChhcmdzLmZvbGxvd19pZCk7XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiBtb2RlbHMudXNlckZvbGxvdy5kZWxldGVPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICAgIGZvbGxvd1ZNLnBhcmFtZXRlcnMoKSk7XG4gICAgICAgICAgICAgIH0pKCksXG4gICAgICAgICAgICAgIGZvbGxvdyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKHVzZXJGb2xsb3dJbnNlcnQpO1xuICAgICAgICAgICAgICAgICAgbG9hZGluZyh0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgbC5sb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9sbG93aW5nKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHVuZm9sbG93ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgbCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4odXNlckZvbGxvd0RlbGV0ZSk7XG4gICAgICAgICAgICAgICAgICBsb2FkaW5nKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICBsLmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBmb2xsb3dpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvbGxvd2luZzogZm9sbG93aW5nLFxuICAgICAgICAgICAgZm9sbG93OiBmb2xsb3csXG4gICAgICAgICAgICB1bmZvbGxvdzogdW5mb2xsb3csXG4gICAgICAgICAgICBsb2FkaW5nOiBsb2FkaW5nLFxuICAgICAgICAgICAgaG92ZXI6IGhvdmVyXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgaWYgKGN0cmwubG9hZGluZygpKSB7IHJldHVybiBoLmxvYWRlcigpOyB9XG4gICAgICAgIGlmIChjdHJsLmZvbGxvd2luZygpKSB7XG4gICAgICAgICAgICByZXR1cm4gbSgnYS53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bS51LW1hcmdpbnRvcC0yMCcsXG4gICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC51bmZvbGxvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICBvbm1vdXNlb3ZlcjogKCkgPT4gY3RybC5ob3Zlcih0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBvbm1vdXNlb3V0OiAoKSA9PiBjdHJsLmhvdmVyKGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgIChjdHJsLmhvdmVyKCkgPyAnRGVpeGFyIGRlIHNlZ3VpcicgOiAnU2VndWluZG8nKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbSgnYS53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnkudS1tYXJnaW50b3AtMjAnLFxuICAgICAgICAgICAgICAgICAgICAge29uY2xpY2s6IGN0cmwuZm9sbG93fSxcbiAgICAgICAgICAgICAgICAgICAgICdTZWd1aXInKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJGb2xsb3dCdG47XG4iLCIvKlxuICogVXNlckZvbGxvd0NhcmQgLSBDb21wb25lbnRcbiAqIFVzZXIgaW5mbyBjYXJkIHdpdGggZm9sbG93IGJ1dHRvblxuICpcbiAqIEV4YW1wbGU6XG4gKiBtLmNvbXBvbmVudChjLlVzZXJGb2xsb3dDYXJkLCB7ZnJpZW5kOiBmcmllbmR9KVxuICovXG5cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IGggZnJvbSAnLi4vaCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBVc2VyRm9sbG93QnRuIGZyb20gICcuLi9jL3VzZXItZm9sbG93LWJ0bic7XG5cbmNvbnN0IFVzZXJGb2xsb3dDYXJkID0ge1xuICAgIGNvbnRyb2xsZXIoYXJncykge1xuICAgICAgICBjb25zdCBmcmllbmQgPSBtLnByb3AoYXJncy5mcmllbmQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnJpZW5kOiBmcmllbmRcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHZpZXcoY3RybCwgYXJncykge1xuICAgICAgICBjb25zdCBmcmllbmQgPSBjdHJsLmZyaWVuZCgpLFxuICAgICAgICAgIHByb2ZpbGVfaW1nID0gXy5pc0VtcHR5KGZyaWVuZC5hdmF0YXIpID8gJy9hc3NldHMvY2F0YXJzZV9ib290c3RyYXAvdXNlci5qcGcnIDogZnJpZW5kLmF2YXRhcjtcbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC00JyxcbiAgICAgICAgICBtKCcuY2FyZC5jYXJkLWJhY2tlci51LW1hcmdpbmJvdHRvbS0yMC51LXJhZGl1cy51LXRleHQtY2VudGVyJyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgbShgaW1nLnRodW1iLnUtbWFyZ2luYm90dG9tLTEwLnUtcm91bmRbc3JjPScke3Byb2ZpbGVfaW1nfSddYCksXG4gICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQubGluZWhlaWdodC10aWdodCcsXG4gICAgICAgICAgICAgICAgbSgnYS5saW5rLWhpZGRlbicsIHtocmVmOiBgL3VzZXJzLyR7ZnJpZW5kLmZyaWVuZF9pZH1gfSwgZnJpZW5kLm5hbWUpXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5LmZvbnRzaXplLXNtYWxsZXN0LnUtbWFyZ2luYm90dG9tLTEwJyxcbiAgICAgICAgICAgICAgICAoXy5pc051bGwoZnJpZW5kLmNpdHkpID8gJycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLmZvbnRjb2xvci1zZWNvbmRhcnkudS1tYXJnaW5ib3R0b20tMTAnLCBgJHtmcmllbmQuY2l0eX0sICR7ZnJpZW5kLnN0YXRlfWApKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlcicsXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgZnJpZW5kLnRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzKSxcbiAgICAgICAgICAgICAgICAgICcgYXBvaWFkb3MgJyxcbiAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgJ3wgJyxcbiAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgZnJpZW5kLnRvdGFsX3B1Ymxpc2hlZF9wcm9qZWN0cyksXG4gICAgICAgICAgICAgICAgICAnIGNyaWFkb3MnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBtKCcuYnRuLWJvdHRvbS1jYXJkLnctcm93JyxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC00LnctY29sLXRpbnktMycpLFxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTYnLFxuICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChVc2VyRm9sbG93QnRuLCB7Zm9sbG93aW5nOiBmcmllbmQuZm9sbG93aW5nLCBmb2xsb3dfaWQ6IGZyaWVuZC5mcmllbmRfaWR9KVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTQudy1jb2wtdGlueS0zJylcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF1cbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVXNlckZvbGxvd0NhcmQ7XG4iLCIvKipcbiAqIHdpbmRvdy5jLmxvYWRNb3JlQnRuIGNvbXBvbmVudFxuICogQnV0dG9uIHRvIHBhZ2luYXRlIGNvbGxlY3Rpb25cbiAqXG4gKiBFeGFtcGxlIG9mIHVzZTpcbiAqIHZpZXc6ICgpID0+IHtcbiAqICAgLi4uXG4gKiAgIG0uY29tcG9uZW50KGMubG9hZE1vcmVCdG4sIHtjb2xsZWN0aW9uOiBjb2xsZWN0aW9ufSlcbiAqICAgLi4uXG4gKiB9XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcblxuY29uc3QgbG9hZE1vcmVCdG4gPSB7XG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBhcmdzLmNvbGxlY3Rpb247XG4gICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtMicsIFtcbiAgICAgICAgICAgICAgKCFjb2xsZWN0aW9uLmlzTG9hZGluZygpID9cbiAgICAgICAgICAgICAgIChjb2xsZWN0aW9uLmlzTGFzdFBhZ2UoKSA/ICcnIDogbSgnYnV0dG9uI2xvYWQtbW9yZS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XG4gICAgICAgICAgICAgICAgICAgb25jbGljazogY29sbGVjdGlvbi5uZXh0UGFnZVxuICAgICAgICAgICAgICAgfSwgJ0NhcnJlZ2FyIG1haXMnKSkgOiBoLmxvYWRlcigpKVxuICAgICAgICAgIF0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvYWRNb3JlQnRuO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy51c2VyRnJpZW5kcyBjb21wb25lbnRcbiAqIFNob3dzIGFsbCBmcmllbmRzIGNhcmRzIGFuZCBhIGZvbGxvdy1hbGwgYnV0dG9uXG4gKlxuICogRXhhbXBsZSBvZiB1c2U6XG4gKiB2aWV3OiAoKSA9PiB7XG4gKiAgIC4uLlxuICogICBtLmNvbXBvbmVudChjLnVzZXJGcmllbmRzLCB7dXNlcjogdXNlcn0pXG4gKiAgIC4uLlxuICogfVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBVc2VyRm9sbG93Q2FyZCBmcm9tICAnLi4vYy91c2VyLWZvbGxvdy1jYXJkJztcbmltcG9ydCBsb2FkTW9yZUJ0biBmcm9tICAnLi4vYy9sb2FkLW1vcmUtYnRuJztcblxuY29uc3QgdXNlckZyaWVuZHMgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIG1vZGVscy51c2VyRnJpZW5kLnBhZ2VTaXplKDkpO1xuXG4gICAgICAgIGNvbnN0IHVzZXJGcmllbmRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3VzZXJfaWQ6ICdlcSd9KSxcbiAgICAgICAgICAgICAgdXNlciA9IGFyZ3MudXNlcixcbiAgICAgICAgICAgIGZyaWVuZExpc3RWTSA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnVzZXJGcmllbmQsICdmb2xsb3dpbmcuYXNjLHRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzLmRlc2MnLCB7XG4gICAgICAgICAgICAgICAgJ1ByZWZlcic6ICAnY291bnQ9ZXhhY3QnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGFsbExvYWRpbmcgPSBtLnByb3AoZmFsc2UpLFxuICAgICAgICAgICAgZm9sbG93QWxsID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFsbExvYWRpbmcodHJ1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obW9kZWxzLmZvbGxvd0FsbEZyaWVuZHMucG9zdE9wdGlvbnMoe30pKTtcblxuICAgICAgICAgICAgICAgIGwubG9hZCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmcmllbmRMaXN0Vk0uZmlyc3RQYWdlKHVzZXJGcmllbmRWTS5wYXJhbWV0ZXJzKCkpO1xuICAgICAgICAgICAgICAgICAgICBhbGxMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgdXNlckZyaWVuZFZNLnVzZXJfaWQodXNlci51c2VyX2lkKTtcblxuICAgICAgICBpZiAoIWZyaWVuZExpc3RWTS5jb2xsZWN0aW9uKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICBmcmllbmRMaXN0Vk0uZmlyc3RQYWdlKHVzZXJGcmllbmRWTS5wYXJhbWV0ZXJzKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmcmllbmRMaXN0Vk06IGZyaWVuZExpc3RWTSxcbiAgICAgICAgICBmb2xsb3dBbGw6IGZvbGxvd0FsbCxcbiAgICAgICAgICBhbGxMb2FkaW5nOiBhbGxMb2FkaW5nXG4gICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGxpc3RWTSA9IGN0cmwuZnJpZW5kTGlzdFZNO1xuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5iZy1ncmF5LmJlZm9yZS1mb290ZXIuc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS00MC5jYXJkLnUtcmFkaXVzLmNhcmQtdGVyY2lhcnknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNy53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwnLCAnQ29tZWNlIGFnb3JhISBTaWdhIHRvZG9zIG9zIHNldXMgYW1pZ29zIG91IHNvbWVudGUgYWxndW5zIGRlbGVzIHBhcmEgZGVzY29icmlyIHByb2pldG9zIGp1bnRvcyEnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNS53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY3RybC5hbGxMb2FkaW5nKCkgPyBoLmxvYWRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbSgnYS53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwuZm9sbG93QWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sYFNpZ2EgdG9kb3Mgb3Mgc2V1cyAke2xpc3RWTS50b3RhbCgpID8gbGlzdFZNLnRvdGFsKCkgOiAnJ30gYW1pZ29zYCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xuICAgICAgICAgICAgICAgICAgICBfLm1hcChsaXN0Vk0uY29sbGVjdGlvbigpLCAoZnJpZW5kKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQoVXNlckZvbGxvd0NhcmQsIHtmcmllbmQ6IGZyaWVuZH0pO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLmJnLWdyYXknLCBbXG4gICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5yaWdodC0yMCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGxvYWRNb3JlQnRuLCB7Y29sbGVjdGlvbjogbGlzdFZNfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgIF0pXG5cbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJGcmllbmRzO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy51c2VyRm9sbG93cyBjb21wb25lbnRcbiAqIFNob3dzIGFsbCB1c2VyIGZvbGxvd3MgY2FyZHNcbiAqXG4gKiBFeGFtcGxlIG9mIHVzZTpcbiAqIHZpZXc6ICgpID0+IHtcbiAqICAgLi4uXG4gKiAgIG0uY29tcG9uZW50KGMudXNlckZvbGxvd3MsIHt1c2VyOiB1c2VyfSlcbiAqICAgLi4uXG4gKiB9XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IFVzZXJGb2xsb3dDYXJkIGZyb20gICcuLi9jL3VzZXItZm9sbG93LWNhcmQnO1xuaW1wb3J0IGxvYWRNb3JlQnRuIGZyb20gICcuLi9jL2xvYWQtbW9yZS1idG4nO1xuXG5jb25zdCB1c2VyRm9sbG93cyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgbW9kZWxzLnVzZXJGb2xsb3cucGFnZVNpemUoOSk7XG4gICAgICAgIGNvbnN0IHVzZXJGcmllbmRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3VzZXJfaWQ6ICdlcSd9KSxcbiAgICAgICAgICAgICAgdXNlciA9IGFyZ3MudXNlcixcbiAgICAgICAgICAgICAgaGFzaCA9IG0ucHJvcCh3aW5kb3cubG9jYXRpb24uaGFzaCksXG4gICAgICAgICAgICAgIGZvbGxvd3NMaXN0Vk0gPSBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy51c2VyRm9sbG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JlYXRlZF9hdC5kZXNjJywge1xuICAgICAgICAgICAgICAgICAgJ1ByZWZlcic6ICAnY291bnQ9ZXhhY3QnXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHVzZXJGcmllbmRWTS51c2VyX2lkKHVzZXIudXNlcl9pZCk7XG4gICAgICAgIGlmICghZm9sbG93c0xpc3RWTS5jb2xsZWN0aW9uKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb2xsb3dzTGlzdFZNLmZpcnN0UGFnZSh1c2VyRnJpZW5kVk0ucGFyYW1ldGVycygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb2xsb3dzTGlzdFZNOiBmb2xsb3dzTGlzdFZNXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgZm9sbG93c1ZNID0gY3RybC5mb2xsb3dzTGlzdFZNO1xuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5iZy1ncmF5LmJlZm9yZS1mb290ZXIuc2VjdGlvbicsIFtcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoZm9sbG93c1ZNLmNvbGxlY3Rpb24oKSwgKGZyaWVuZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KFVzZXJGb2xsb3dDYXJkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmcmllbmQ6IF8uZXh0ZW5kKHt9LHtmb2xsb3dpbmc6IHRydWUsIGZyaWVuZF9pZDogZnJpZW5kLmZvbGxvd19pZH0sIGZyaWVuZC5zb3VyY2UpfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24uYmctZ3JheScsIFtcbiAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS02MCcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbnJpZ2h0LTIwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtLmNvbXBvbmVudChsb2FkTW9yZUJ0biwge2NvbGxlY3Rpb246IGZvbGxvd3NWTX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgIDtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VyRm9sbG93cztcbiIsIi8qKlxuICogd2luZG93LmMudXNlckZvbGxvd2VycyBjb21wb25lbnRcbiAqIFNob3dzIGFsbCB1c2VyIGZvbGxvd2VycyBjYXJkc1xuICpcbiAqIEV4YW1wbGUgb2YgdXNlOlxuICogdmlldzogKCkgPT4ge1xuICogICAuLi5cbiAqICAgbS5jb21wb25lbnQoYy51c2VyRm9sbG93ZXJzLCB7dXNlcjogdXNlcn0pXG4gKiAgIC4uLlxuICogfVxuICovXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgaCBmcm9tICcuLi9oJztcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBVc2VyRm9sbG93Q2FyZCBmcm9tICAnLi4vYy91c2VyLWZvbGxvdy1jYXJkJztcbmltcG9ydCBsb2FkTW9yZUJ0biBmcm9tICAnLi4vYy9sb2FkLW1vcmUtYnRuJztcblxuY29uc3QgdXNlckZvbGxvd2VycyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgbW9kZWxzLnVzZXJGb2xsb3dlci5wYWdlU2l6ZSg5KTtcbiAgICAgICAgY29uc3QgZm9sbG93ZXJzTGlzdFZNID0gcG9zdGdyZXN0LnBhZ2luYXRpb25WTShtb2RlbHMudXNlckZvbGxvd2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb2xsb3dpbmcuYXNjLGNyZWF0ZWRfYXQuZGVzYycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1ByZWZlcic6ICAnY291bnQ9ZXhhY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHVzZXIgPSBhcmdzLnVzZXIsXG4gICAgICAgICAgICAgIHVzZXJJZFZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7Zm9sbG93X2lkOiAnZXEnfSk7XG5cbiAgICAgICAgdXNlcklkVk0uZm9sbG93X2lkKHVzZXIudXNlcl9pZCk7XG5cbiAgICAgICAgaWYgKCFmb2xsb3dlcnNMaXN0Vk0uY29sbGVjdGlvbigpLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9sbG93ZXJzTGlzdFZNLmZpcnN0UGFnZSh1c2VySWRWTS5wYXJhbWV0ZXJzKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb2xsb3dlcnNMaXN0Vk06IGZvbGxvd2Vyc0xpc3RWTVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGZvbGxvd2Vyc1ZNID0gY3RybC5mb2xsb3dlcnNMaXN0Vk07XG4gICAgICAgIHJldHVybiBtKCcudy1zZWN0aW9uLmJnLWdyYXkuYmVmb3JlLWZvb3Rlci5zZWN0aW9uJywgW1xuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoZm9sbG93ZXJzVk0uY29sbGVjdGlvbigpLCAoZnJpZW5kKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQoVXNlckZvbGxvd0NhcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2ZyaWVuZDogXy5leHRlbmQoe30se2ZyaWVuZF9pZDogZnJpZW5kLnVzZXJfaWR9LCBmcmllbmQuc291cmNlKX0pO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24uYmctZ3JheScsIFtcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTYwJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5yaWdodC0yMCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIG0uY29tcG9uZW50KGxvYWRNb3JlQnRuLCB7Y29sbGVjdGlvbjogZm9sbG93ZXJzVk19KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNScpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG5cbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICAgIDtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VyRm9sbG93ZXJzO1xuIiwiLyoqXG4gKiB3aW5kb3cuYy51c2VyQ3JlYXRvcnMgY29tcG9uZW50XG4gKiBTaG93cyBhbGwgdXNlciBjcmVhdG9ycyBzdWdnZXN0aW9ucyBjYXJkc1xuICpcbiAqIEV4YW1wbGUgb2YgdXNlOlxuICogdmlldzogKCkgPT4ge1xuICogICAuLi5cbiAqICAgbS5jb21wb25lbnQoYy51c2VyQ3JlYXRvcnMsIHt1c2VyOiB1c2VyfSlcbiAqICAgLi4uXG4gKiB9XG4gKi9cbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IFVzZXJGb2xsb3dDYXJkIGZyb20gICcuLi9jL3VzZXItZm9sbG93LWNhcmQnO1xuaW1wb3J0IGxvYWRNb3JlQnRuIGZyb20gICcuLi9jL2xvYWQtbW9yZS1idG4nO1xuXG5jb25zdCB1c2VyQ3JlYXRvcnMgPSB7XG4gICAgY29udHJvbGxlcihhcmdzKSB7XG4gICAgICAgIG1vZGVscy5jcmVhdG9yU3VnZ2VzdGlvbi5wYWdlU2l6ZSg5KTtcblxuICAgICAgICBjb25zdCBjcmVhdG9yc0xpc3RWTSA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0oXG4gICAgICAgICAgICBtb2RlbHMuY3JlYXRvclN1Z2dlc3Rpb24sXG4gICAgICAgICAgICAnZm9sbG93aW5nLmFzYywgdG90YWxfcHVibGlzaGVkX3Byb2plY3RzLmRlc2MsIHRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzLmRlc2MnLCB7XG4gICAgICAgICAgICAgICAgJ1ByZWZlcic6ICAnY291bnQ9ZXhhY3QnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWNyZWF0b3JzTGlzdFZNLmNvbGxlY3Rpb24oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNyZWF0b3JzTGlzdFZNLmZpcnN0UGFnZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNyZWF0b3JzTGlzdFZNOiBjcmVhdG9yc0xpc3RWTVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNyZWF0b3JzVk0gPSBjdHJsLmNyZWF0b3JzTGlzdFZNO1xuXG4gICAgICAgIHJldHVybiBtKCcudy1zZWN0aW9uLmJnLWdyYXkuYmVmb3JlLWZvb3Rlci5zZWN0aW9uJywgW1xuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoY3JlYXRvcnNWTS5jb2xsZWN0aW9uKCksIChmcmllbmQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2VyRm9sbG93Q2FyZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyaWVuZDogXy5leHRlbmQoe30se1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJpZW5kX2lkOiBmcmllbmQudXNlcl9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmcmllbmQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi5iZy1ncmF5JywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbnJpZ2h0LTIwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbS5jb21wb25lbnQobG9hZE1vcmVCdG4sIHtjb2xsZWN0aW9uOiBjcmVhdG9yc1ZNfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgICA7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlckNyZWF0b3JzO1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IHVzZXJGcmllbmRzIGZyb20gICcuLi9jL3VzZXItZnJpZW5kcyc7XG5pbXBvcnQgdXNlckZvbGxvd3MgZnJvbSAgJy4uL2MvdXNlci1mb2xsb3dzJztcbmltcG9ydCB1c2VyRm9sbG93ZXJzIGZyb20gICcuLi9jL3VzZXItZm9sbG93ZXJzJztcbmltcG9ydCB1c2VyQ3JlYXRvcnMgZnJvbSAgJy4uL2MvdXNlci1jcmVhdG9ycyc7XG5cbmNvbnN0IEZvbGxvd0ZvdW5kRnJpZW5kcyA9IHtcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgdXNlciA9IGguZ2V0VXNlcigpLFxuICAgICAgICAgICAgICBoYXNoID0gbS5wcm9wKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSxcbiAgICAgICAgICAgICAgZGlzcGxheVRhYkNvbnRlbnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBjX29wdHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgdXNlcjogdXNlclxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHRhYnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNjcmVhdG9ycyc6IG0uY29tcG9uZW50KHVzZXJDcmVhdG9ycywgY19vcHRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZyaWVuZHMnOiBtLmNvbXBvbmVudCh1c2VyRnJpZW5kcywgY19vcHRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZvbGxvd3MnOiBtLmNvbXBvbmVudCh1c2VyRm9sbG93cywgY19vcHRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZvbGxvd2Vycyc6IG0uY29tcG9uZW50KHVzZXJGb2xsb3dlcnMsIGNfb3B0cylcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIGhhc2god2luZG93LmxvY2F0aW9uLmhhc2gpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoXy5pc0VtcHR5KGhhc2goKSkgfHwgaGFzaCgpID09PSAnI189XycpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFic1snI2ZyaWVuZHMnXTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYnNbaGFzaCgpXTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICBoLnJlZHJhd0hhc2hDaGFuZ2UoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlcjogdXNlcixcbiAgICAgICAgICAgIGRpc3BsYXlUYWJDb250ZW50OiBkaXNwbGF5VGFiQ29udGVudFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLmRhc2hib2FyZC1oZWFkZXInLCBbXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW50b3AtMjAudS1tYXJnaW5ib3R0b20tMjAnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnUtdGV4dC1jZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlci5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwJywgJ0Rlc2N1YnJhIHByb2pldG9zIGNvbSBzZXVzIGFtaWdvcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbCcsICdTaWdhIG9zIHNldXMgYW1pZ29zIGUgbsOzcyBpcmVtb3MgdGUgbm90aWZpY2FyIHNlbXByZSBxdWUgZWxlcyBsYW7Dp2FyZW0gb3UgYXBvaWFyZW0gYWxndW0gcHJvamV0bycpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xJylcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBbbSgnLmRpdmlkZXIudS1tYXJnaW50b3AtMzAnKSxcbiAgICAgICAgICAgICAgbSgnLnByb2plY3QtbmF2JyxcbiAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci53LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIG0oJ2FbaWQ9XCJjcmVhdG9ycy1saW5rXCJdW2NsYXNzPVwiZGFzaGJvYXJkLW5hdi1saW5rICcgKyAoaC5oYXNoTWF0Y2goJyNjcmVhdG9ycycpID8gJ3NlbGVjdGVkJyA6ICcnKSArICdcIl0gW2hyZWY9XCIjY3JlYXRvcnNcIl0nLFxuICAgICAgICAgICAgICAgICAgICAgICdFbmNvbnRyZSByZWFsaXphZG9yZXMnXG4gICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBtKCdhW2lkPVwiZnJpZW5kcy1saW5rXCJdW2NsYXNzPVwiZGFzaGJvYXJkLW5hdi1saW5rICcgKyAoaC5oYXNoTWF0Y2goJyNmcmllbmRzJykgfHwgaC5oYXNoTWF0Y2goJycpID8gJ3NlbGVjdGVkJyA6ICcnKSArICdcIl0gW2hyZWY9XCIjZnJpZW5kc1wiXScsXG4gICAgICAgICAgICAgICAgICAgICAgJ0VuY29udHJlIGFtaWdvcydcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnYVtpZD1cImZvbGxvd3MtbGlua1wiXVtjbGFzcz1cImRhc2hib2FyZC1uYXYtbGluayAnICsgKGguaGFzaE1hdGNoKCcjZm9sbG93cycpID8gJ3NlbGVjdGVkJyA6ICcnKSArICdcIl0gW2hyZWY9XCIjZm9sbG93c1wiXScsXG4gICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZ3VpbmRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmJhZGdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC51c2VyLmZvbGxvd3NfY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG0oJ2FbaWQ9XCJmb2xsb3dlcnMtbGlua1wiXVtjbGFzcz1cImRhc2hib2FyZC1uYXYtbGluayAnICsgKGguaGFzaE1hdGNoKCcjZm9sbG93ZXJzJykgPyAnc2VsZWN0ZWQnIDogJycpICsgJ1wiXSBbaHJlZj1cIiNmb2xsb3dlcnNcIl0nLFxuICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWd1aWRvcmVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmJhZGdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC51c2VyLmZvbGxvd2Vyc19jb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGN0cmwuZGlzcGxheVRhYkNvbnRlbnQoKVxuICAgICAgICBdO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvbGxvd0ZvdW5kRnJpZW5kcztcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xuaW1wb3J0IGZhY2Vib29rQnV0dG9uIGZyb20gJy4uL2MvZmFjZWJvb2stYnV0dG9uJztcbmltcG9ydCBwcm9qZWN0U2hhcmVCb3ggZnJvbSAnLi4vYy9wcm9qZWN0LXNoYXJlLWJveCc7XG5pbXBvcnQgcHJvamVjdFJvdyBmcm9tICcuLi9jL3Byb2plY3Qtcm93JztcbmltcG9ydCB1c2VyVk0gZnJvbSAnLi4vdm1zL3VzZXItdm0nXG5cbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLmNvbnRyaWJ1dGlvbnMnKTtcblxuY29uc3QgdGhhbmtZb3UgPSB7XG4gICAgY29udHJvbGxlciAoYXJncykge1xuICAgICAgICBjb25zdCByZWNvbW1lbmRlZFByb2plY3RzID0gdXNlclZNLmdldFVzZXJSZWNvbW1lbmRlZFByb2plY3RzKCksXG4gICAgICAgICAgICBpc1NsaXAgPSAhXy5pc0VtcHR5KGFyZ3MuY29udHJpYnV0aW9uLnNsaXBfdXJsKTtcblxuICAgICAgICBjb25zdCBzZXRFdmVudHMgPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcbiAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgIENhdGFyc2VBbmFseXRpY3MuZXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBjYXQ6J2NvbnRyaWJ1dGlvbl9maW5pc2gnLFxuICAgICAgICAgICAgICAgICAgICBhY3Q6J2NvbnRyaWJ1dGlvbl9maW5pc2hlZCcsXG4gICAgICAgICAgICAgICAgICAgIGxibDogaXNTbGlwID8gJ3NsaXAnIDogJ2NyZWRpdGNhcmQnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IGFyZ3MuY29udHJpYnV0aW9uLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBleHRyYURhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbl9pZDogYXJncy5jb250cmlidXRpb24uY29udHJpYnV0aW9uX2lkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIENhdGFyc2VBbmFseXRpY3MuY2hlY2tvdXQoXG4gICAgICAgICAgICAgICAgICAgIGAke2FyZ3MuY29udHJpYnV0aW9uLmNvbnRyaWJ1dGlvbl9pZH1gLFxuICAgICAgICAgICAgICAgICAgICBgWyR7YXJncy5jb250cmlidXRpb24ucHJvamVjdC5wZXJtYWxpbmt9XSAke2FyZ3MuY29udHJpYnV0aW9uLnJld2FyZC5taW5pbXVtX3ZhbHVlfSBbJHtpc1NsaXAgPyAnc2xpcCcgOiAnY3JlZGl0Y2FyZCd9XWAsXG4gICAgICAgICAgICAgICAgICAgIGAke2FyZ3MuY29udHJpYnV0aW9uLnJld2FyZC5yZXdhcmRfaWR9YCxcbiAgICAgICAgICAgICAgICAgICAgYCR7YXJncy5jb250cmlidXRpb24ucHJvamVjdC5jYXRlZ29yeX1gLFxuICAgICAgICAgICAgICAgICAgICBgJHthcmdzLmNvbnRyaWJ1dGlvbi52YWx1ZX1gLFxuICAgICAgICAgICAgICAgICAgICBgJHthcmdzLmNvbnRyaWJ1dGlvbi52YWx1ZSAqIGFyZ3MuY29udHJpYnV0aW9uLnByb2plY3Quc2VydmljZV9mZWV9YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNldEV2ZW50czogc2V0RXZlbnRzLFxuICAgICAgICAgICAgZGlzcGxheVNoYXJlQm94OiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpLFxuICAgICAgICAgICAgaXNTbGlwOiBpc1NsaXAsXG4gICAgICAgICAgICByZWNvbW1lbmRlZFByb2plY3RzOiByZWNvbW1lbmRlZFByb2plY3RzXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB2aWV3IChjdHJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBtKCcjdGhhbmsteW91Jyx7Y29uZmlnOiBjdHJsLnNldEV2ZW50c30sW1xuICAgICAgICAgIG0oXCIucGFnZS1oZWFkZXIudS1tYXJnaW5ib3R0b20tMzBcIixcbiAgICAgICAgICAgICAgXHRtKFwiLnctY29udGFpbmVyXCIsXG4gICAgICAgICAgICAgIFx0XHRtKFwiLnctcm93XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtKFwiLnctY29sLnctY29sLTEwLnctY29sLXB1c2gtMVwiLFxuICAgICAgICAgIFx0XHRcdFx0XHRbXG4gICAgICAgICAgXHRcdFx0XHRcdFx0bShcIi51LW1hcmdpbmJvdHRvbS0yMC51LXRleHQtY2VudGVyXCIsXG4gICAgICAgICAgXHRcdFx0XHRcdFx0XHRtKGBpbWcuYmlnLnRodW1iLnUtcm91bmRbc3JjPScke2FyZ3MuY29udHJpYnV0aW9uLnByb2plY3QudXNlcl90aHVtYn0nXWApXG4gICAgICAgICAgXHRcdFx0XHRcdFx0KSxcbiAgICAgICAgICBcdFx0XHRcdFx0XHRtKFwiI3RoYW5rLXlvdS51LXRleHQtY2VudGVyXCIsICFjdHJsLmlzU2xpcCA/XG4gICAgICAgICAgXHRcdFx0XHRcdFx0XHRbXG4gICAgICAgICAgXHRcdFx0XHRcdFx0XHRcdG0oXCIjY3JlZGl0Y2FyZC10aGFuay15b3UuZm9udHNpemUtbGFyZ2VyLnRleHQtc3VjY2Vzcy51LW1hcmdpbmJvdHRvbS0yMFwiLFxuICAgICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdEkxOG4udCgndGhhbmtfeW91LnRoYW5rX3lvdScsIEkxOG5TY29wZSgpKVxuICAgICAgICAgIFx0XHRcdFx0XHRcdFx0XHQpLFxuICAgICAgICAgIFx0XHRcdFx0XHRcdFx0XHRtKFwiLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tNDBcIixcbiAgICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRtLnRydXN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCd0aGFua195b3UudGhhbmtfeW91X3RleHRfaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4blNjb3BlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IGFyZ3MuY29udHJpYnV0aW9uLnByb2plY3QudG90YWxfY29udHJpYnV0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGFyZ3MuY29udHJpYnV0aW9uLmNvbnRyaWJ1dGlvbl9lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazI6IGAvcHQvdXNlcnMvJHtoLmdldFVzZXIoKS51c2VyX2lkfS9lZGl0I2NvbnRyaWJ1dGlvbnNgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgIFx0XHRcdFx0XHRcdFx0XHQpLFxuICAgICAgICAgIFx0XHRcdFx0XHRcdFx0XHRtKFwiLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0yMFwiLFxuICAgICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFwiQ29tcGFydGlsaGUgY29tIHNldXMgYW1pZ29zIGUgYWp1ZGUgZXNzZSBwcm9qZXRvIGEgYmF0ZXIgYSBtZXRhIVwiXG4gICAgICAgICAgXHRcdFx0XHRcdFx0XHRcdClcbiAgICAgICAgICBcdFx0XHRcdFx0XHRcdF0gOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnI3NsaXAtdGhhbmsteW91LmZvbnRzaXplLWxhcmdlc3QudGV4dC1zdWNjZXNzLnUtbWFyZ2luYm90dG9tLTIwJywgSTE4bi50KCd0aGFua195b3Vfc2xpcC50aGFua195b3UnLCBJMThuU2NvcGUoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTQwJywgSTE4bi50KCd0aGFua195b3Vfc2xpcC50aGFua195b3VfdGV4dF9odG1sJywgSTE4blNjb3BlKHtlbWFpbDogYXJncy5jb250cmlidXRpb24uY29udHJpYnV0aW9uX2VtYWlsfSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgIFx0XHRcdFx0XHRcdCksXG4gICAgICAgICAgXHRcdFx0XHRcdFx0Y3RybC5pc1NsaXAgPyAnJyA6IG0oXCIudy1yb3dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnlcIixcbiAgICAgICAgICAgICAgICAgIFx0XHRcdFx0XHRcdFx0W1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctc3ViLWNvbC53LWNvbC53LWNvbC00JywgbS5jb21wb25lbnQoZmFjZWJvb2tCdXR0b24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGBodHRwczovL3d3dy5jYXRhcnNlLm1lLyR7YXJncy5jb250cmlidXRpb24ucHJvamVjdC5wZXJtYWxpbmt9P3JlZj1jdHJzZV90aGFua3lvdSZ1dG1fc291cmNlPWZhY2Vib29rLmNvbSZ1dG1fbWVkaXVtPXNvY2lhbCZ1dG1fY2FtcGFpZ249cHJvamVjdF9zaGFyZWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmlnOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1zdWItY29sLnctY29sLnctY29sLTQnLCBtLmNvbXBvbmVudChmYWNlYm9va0J1dHRvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NlbmdlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaWc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS8ke2FyZ3MuY29udHJpYnV0aW9uLnByb2plY3QucGVybWFsaW5rfT9yZWY9Y3Ryc2VfdGhhbmt5b3UmdXRtX3NvdXJjZT1mYWNlYm9vay5jb20mdXRtX21lZGl1bT1tZXNzZW5nZXImdXRtX2NhbXBhaWduPXRoYW5rc19zaGFyZWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgbSgnYS5idG4uYnRuLWxhcmdlLmJ0bi10d2VldC51LW1hcmdpbmJvdHRvbS0yMFtocmVmPVwiaHR0cDovL3R3aXR0ZXIuY29tLz9zdGF0dXM9QWNhYmVpJTIwZGUlMjBhcG9pYXIlMjBvJTIwcHJvamV0byUyMCcgKyBhcmdzLmNvbnRyaWJ1dGlvbi5wcm9qZWN0Lm5hbWUgKyAnJTIwaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS8nICsgYXJncy5jb250cmlidXRpb24ucHJvamVjdC5wZXJtYWxpbmsgKyAnJTNGcmVmJTNEdHdpdHRlciUyNnV0bV9zb3VyY2UlM0R0d2l0dGVyLmNvbSUyNnV0bV9tZWRpdW0lM0Rzb2NpYWwlMjZ1dG1fY2FtcGFpZ24lM0Rwcm9qZWN0X3NoYXJlXCJdW3RhcmdldD1cIl9ibGFua1wiXScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLXR3aXR0ZXInKSwgJyBUd2l0dGVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkpXG4gICAgICAgICAgICAgICAgICBcdFx0XHRcdFx0XHRcdF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW1cIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tMzAudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgbSgnYnV0dG9uLmJ0bi5idG4tbGFyZ2UuYnRuLXRlcmNpYXJ5LnUtbWFyZ2luYm90dG9tLTQwJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC5kaXNwbGF5U2hhcmVCb3gudG9nZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdDb21wYXJ0aWxoZScpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5kaXNwbGF5U2hhcmVCb3goKSA/IG0ocHJvamVjdFNoYXJlQm94LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNb2NraW5nIGEgcHJvamVjdCBtLnByb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IG0ucHJvcCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVybWFsaW5rOiBhcmdzLmNvbnRyaWJ1dGlvbi5wcm9qZWN0LnBlcm1hbGluayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBhcmdzLmNvbnRyaWJ1dGlvbi5wcm9qZWN0Lm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheVNoYXJlQm94OiBjdHJsLmRpc3BsYXlTaGFyZUJveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICBcdFx0XHRcdFx0XHQpLFxuICAgICAgICAgIFx0XHRcdFx0XHRdXG4gICAgICAgICAgXHRcdFx0XHQpXG5cbiAgICAgICAgICAgICAgXHRcdClcbiAgICAgICAgICAgICAgXHQpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbShcIi5zZWN0aW9uLnUtbWFyZ2luYm90dG9tLTQwXCIsXG4gICAgICAgICAgICAgICAgbShcIi53LWNvbnRhaW5lclwiLFxuICAgICAgICAgICAgICAgICAgICBjdHJsLmlzU2xpcCA/IG0oJy53LXJvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgudy1jb2wtb2Zmc2V0LTInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpZnJhbWUuc2xpcCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogYXJncy5jb250cmlidXRpb24uc2xpcF91cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnOTA1cHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVib3JkZXI6ICcwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnb3ZlcmZsb3c6IGhpZGRlbjsnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTMwLnUtdGV4dC1jZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgndGhhbmtfeW91LnByb2plY3RfcmVjb21tZW5kYXRpb25zJywgSTE4blNjb3BlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdFJvdywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IGN0cmwucmVjb21tZW5kZWRQcm9qZWN0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6IGBjdHJzZV90aGFua3lvdV9yYFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgXSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdGhhbmtZb3U7XG4iLCJpbXBvcnQgYWRtaW5Vc2VycyBmcm9tICcuL3Jvb3QvYWRtaW4tdXNlcnMnO1xuaW1wb3J0IGFkbWluQ29udHJpYnV0aW9ucyBmcm9tICcuL3Jvb3QvYWRtaW4tY29udHJpYnV0aW9ucyc7XG5pbXBvcnQgZmxleCBmcm9tICcuL3Jvb3QvZmxleCc7XG5pbXBvcnQgaW5zaWdodHMgZnJvbSAnLi9yb290L2luc2lnaHRzJztcbmltcG9ydCBqb2JzIGZyb20gJy4vcm9vdC9qb2JzJztcbmltcG9ydCBsaXZlU3RhdGlzdGljcyBmcm9tICcuL3Jvb3QvbGl2ZS1zdGF0aXN0aWNzJztcbmltcG9ydCBwcm9qZWN0c0NvbnRyaWJ1dGlvblJlcG9ydCBmcm9tICcuL3Jvb3QvcHJvamVjdHMtY29udHJpYnV0aW9uLXJlcG9ydCc7XG5pbXBvcnQgcHJvamVjdHNEYXNoYm9hcmQgZnJvbSAnLi9yb290L3Byb2plY3RzLWRhc2hib2FyZCc7XG5pbXBvcnQgcHJvamVjdHNFeHBsb3JlIGZyb20gJy4vcm9vdC9wcm9qZWN0cy1leHBsb3JlJztcbmltcG9ydCBwcm9qZWN0c0hvbWUgZnJvbSAnLi9yb290L3Byb2plY3RzLWhvbWUnO1xuaW1wb3J0IHByb2plY3RzU2hvdyBmcm9tICcuL3Jvb3QvcHJvamVjdHMtc2hvdyc7XG5pbXBvcnQgdXNlcnNTaG93IGZyb20gJy4vcm9vdC91c2Vycy1zaG93JztcbmltcG9ydCBwcm9qZWN0c1BheW1lbnQgZnJvbSAnLi9yb290L3Byb2plY3RzLXBheW1lbnQnO1xuaW1wb3J0IHByb2plY3RzUmV3YXJkIGZyb20gJy4vcm9vdC9wcm9qZWN0cy1yZXdhcmQnO1xuaW1wb3J0IHB1Ymxpc2ggZnJvbSAnLi9yb290L3B1Ymxpc2gnO1xuaW1wb3J0IHN0YXJ0IGZyb20gJy4vcm9vdC9zdGFydCc7XG5pbXBvcnQgdGVhbSBmcm9tICcuL3Jvb3QvdGVhbSc7XG5pbXBvcnQgdXNlcnNCYWxhbmNlTWFpbiBmcm9tICcuL3Jvb3QvdXNlcnMtYmFsYW5jZS1tYWluJztcbmltcG9ydCBtZW51IGZyb20gJy4vcm9vdC9tZW51JztcbmltcG9ydCBmb290ZXIgZnJvbSAnLi9yb290L2Zvb3Rlcic7XG5pbXBvcnQgRm9sbG93Rm91bmRGcmllbmRzIGZyb20gJy4vcm9vdC9mb2xsb3ctZm91bmQtZnJpZW5kcyc7XG5pbXBvcnQgdGhhbmtZb3UgZnJvbSAnLi9yb290L3RoYW5rLXlvdSc7XG5cbmNvbnN0IGMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgICBBZG1pblVzZXJzOiBhZG1pblVzZXJzLFxuICAgICAgICBBZG1pbkNvbnRyaWJ1dGlvbnM6IGFkbWluQ29udHJpYnV0aW9ucyxcbiAgICAgICAgRmxleDogZmxleCxcbiAgICAgICAgSW5zaWdodHM6IGluc2lnaHRzLFxuICAgICAgICBKb2JzOiBqb2JzLFxuICAgICAgICBMaXZlU3RhdGlzdGljczogbGl2ZVN0YXRpc3RpY3MsXG4gICAgICAgIFByb2plY3RzQ29udHJpYnV0aW9uUmVwb3J0OiBwcm9qZWN0c0NvbnRyaWJ1dGlvblJlcG9ydCxcbiAgICAgICAgUHJvamVjdHNEYXNoYm9hcmQ6IHByb2plY3RzRGFzaGJvYXJkLFxuICAgICAgICBQcm9qZWN0c0V4cGxvcmU6IHByb2plY3RzRXhwbG9yZSxcbiAgICAgICAgUHJvamVjdHNIb21lOiBwcm9qZWN0c0hvbWUsXG4gICAgICAgIFByb2plY3RzU2hvdzogcHJvamVjdHNTaG93LFxuICAgICAgICBVc2Vyc1Nob3c6IHVzZXJzU2hvdyxcbiAgICAgICAgUHJvamVjdHNQYXltZW50OiBwcm9qZWN0c1BheW1lbnQsXG4gICAgICAgIFByb2plY3RzUmV3YXJkOiBwcm9qZWN0c1Jld2FyZCxcbiAgICAgICAgVGhhbmtZb3U6IHRoYW5rWW91LFxuICAgICAgICBQdWJsaXNoOiBwdWJsaXNoLFxuICAgICAgICBTdGFydDogc3RhcnQsXG4gICAgICAgIFRlYW06IHRlYW0sXG4gICAgICAgIFVzZXJzQmFsYW5jZTogdXNlcnNCYWxhbmNlTWFpbixcbiAgICAgICAgTWVudTogbWVudSxcbiAgICAgICAgRm9vdGVyOiBmb290ZXIsXG4gICAgICAgIEZvbGxvd0ZvdW5kRnJpZW5kczogRm9sbG93Rm91bmRGcmllbmRzXG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYztcbiJdLCJuYW1lcyI6WyJJMThuIiwicG9zdGdyZXN0IiwibSIsIl8iLCJ1c2VyRmlsdGVyVk0iLCJ2bSIsInBhcmFtVG9TdHJpbmciLCJjb250cmlidXRpb25GaWx0ZXJWTSIsImFwcGx5TWFzayIsIm1vbWVudCIsImlkVk0iLCJ1c2VyRGV0YWlscyIsInByb2plY3RGaWx0ZXJzIiwiY3VycmVudFByb2plY3QiLCJzZXRQcm9qZWN0IiwiZ2V0Q3VycmVudFByb2plY3QiLCJJMThuU2NvcGUiLCJGaWx0ZXJNYWluIiwicHJvamVjdHNDb250cmlidXRpb25SZXBvcnRWTSIsIkZpbHRlckRyb3Bkb3duIiwicHJvamVjdEZpbHRlcnNWTSIsInByb2plY3RDb250cmlidXRpb25zIiwidXNlckJhbGFuY2VSZXF1ZXN0TW9kYWxDb250ZW50IiwidXNlckJhbGFuY2VUcmFuc2FjdGlvblJvdyIsImZsZXgiLCJwcm9qZWN0c0NvbnRyaWJ1dGlvblJlcG9ydCIsInVzZXJzQmFsYW5jZU1haW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BR0ksYUFBYSxFQURqQjtNQUVJLFlBQVksU0FBWixTQUFZLENBQUMsR0FBRCxFQUFTO0FBQUUsRUFBQSxXQUFPLE9BQU8sUUFBUCxDQUFnQixJQUFoQixLQUF5QixHQUFoQztBQUFzQyxFQUFBLENBRmpFO01BR0ksY0FBYyxTQUFkLFdBQWMsQ0FBQyxJQUFELEVBQVU7QUFDcEIsRUFBQSxR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RitCO0FBTXhDLEVBQUEsNkJBQWlCLEtBQUs7QUFOa0IsRUFBQSxTQUFuQixDQUF6QixHQU9LLEVBWDJCLENBQXBDLENBakJKLENBREQsQ0E1QnBCLENBRFMsQ0FEUixDQURELENBREwsQ0FENkMsRUF3RTNDQSxJQUFFLDRCQUFGLEVBQ0lBLElBQUUsY0FBRixFQUNJLEtBQUssTUFBTCxHQUFjQSxJQUFFLFFBQUYsRUFDTkEsSUFBRSwrQkFBRixFQUNJQSxJQUFFLGFBQUYsRUFBaUI7QUFDYixFQUFBLGlCQUFLLEtBQUssWUFBTCxDQUFrQixRQURWO0FBRWIsRUFBQSxtQkFBTyxNQUZNO0FBR2IsRUFBQSxvQkFBUSxPQUhLO0FBSWIsRUFBQSx5QkFBYSxHQUpBO0FBS2IsRUFBQSxtQkFBTztBQUxNLEVBQUEsU0FBakIsQ0FESixDQURNLENBQWQsR0FVUSxDQUNKQSxJQUFFLHFFQUFGLEVBQ0lGLE9BQUssQ0FBTCxDQUFPLG1DQUFQLEVBQTRDZ0IsY0FBNUMsQ0FESixDQURJLEVBSUpkLElBQUUsU0FBRixDQUFZLFVBQVosRUFBd0I7QUFDcEIsRUFBQSx3QkFBWSxLQUFLLG1CQURHO0FBRXBCLEVBQUE7QUFGb0IsRUFBQSxTQUF4QixDQUpJLENBWFosQ0FESixDQXhFMkMsQ0FBeEMsQ0FBUDtBQWdHSCxFQUFBO0FBcElZLEVBQUEsQ0FBakI7O0VDWUEsSUFBTSxJQUFJO0FBQ04sRUFBQSxVQUFNO0FBQ0YsRUFBQSxvQkFBWSxVQURWO0FBRUYsRUFBQSw0QkFBb0Isa0JBRmxCO0FBR0YsRUFBQSxjQUFNc0IsSUFISjtBQUlGLEVBQUEsa0JBQVUsUUFKUjtBQUtGLEVBQUEsY0FBTSxJQUxKO0FBTUYsRUFBQSx3QkFBZ0IsY0FOZDtBQU9GLEVBQUEsb0NBQTRCQyx5QkFQMUI7QUFRRixFQUFBLDJCQUFtQixpQkFSakI7QUFTRixFQUFBLHlCQUFpQixlQVRmO0FBVUYsRUFBQSxzQkFBYyxZQVZaO0FBV0YsRUFBQSxzQkFBYyxZQVhaO0FBWUYsRUFBQSxtQkFBVyxTQVpUO0FBYUYsRUFBQSx5QkFBaUIsZUFiZjtBQWNGLEVBQUEsd0JBQWdCLGNBZGQ7QUFlRixFQUFBLGtCQUFVLFFBZlI7QUFnQkYsRUFBQSxpQkFBUyxPQWhCUDtBQWlCRixFQUFBLGVBQU8sS0FqQkw7QUFrQkYsRUFBQSxjQUFNLElBbEJKO0FBbUJGLEVBQUEsc0JBQWNDLGVBbkJaO0FBb0JGLEVBQUEsY0FBTSxJQXBCSjtBQXFCRixFQUFBLGdCQUFRLE1BckJOO0FBc0JGLEVBQUEsNEJBQW9CO0FBdEJsQixFQUFBO0FBREEsRUFBQSxDQUFWOzs7OyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
