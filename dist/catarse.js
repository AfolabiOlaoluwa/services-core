var c = (function (m$1,I18n$1,postgrest$1,replaceDiacritics,_$1,moment$1,Chart) {
  'use strict';

  m$1 = 'default' in m$1 ? m$1['default'] : m$1;
  I18n$1 = 'default' in I18n$1 ? I18n$1['default'] : I18n$1;
  postgrest$1 = 'default' in postgrest$1 ? postgrest$1['default'] : postgrest$1;
  replaceDiacritics = 'default' in replaceDiacritics ? replaceDiacritics['default'] : replaceDiacritics;
  _$1 = 'default' in _$1 ? _$1['default'] : _$1;
  moment$1 = 'default' in moment$1 ? moment$1['default'] : moment$1;
  Chart = 'default' in Chart ? Chart['default'] : Chart;

  var babelHelpers = {};

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers;

  var _dataCache = {};
  var hashMatch = function hashMatch(str) {
      return window.location.hash === str;
  };
  var paramByName = function paramByName(name) {
      var normalName = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]'),
          regex = new RegExp('[\\?&]' + normalName + '=([^&#]*)'),
          results = regex.exec(location.search);
      return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  };
  var selfOrEmpty = function selfOrEmpty(obj) {
      var emptyState = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

      return obj ? obj : emptyState;
  };
  var setMomentifyLocale = function setMomentifyLocale() {
      moment.locale('pt', {
          monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_')
      });
  };
  var existy = function existy(x) {
      return x != null;
  };
  var momentify = function momentify(date, format) {
      format = format || 'DD/MM/YYYY';
      return date ? moment(date).locale('pt').format(format) : 'no date';
  };
  var storeAction = function storeAction(action) {
      if (!sessionStorage.getItem(action)) {
          return sessionStorage.setItem(action, action);
      }
  };
  var storeObject = function storeObject(sessionKey, obj) {
      return sessionStorage.setItem(sessionKey, JSON.stringify(obj));
  };
  var getStoredObject = function getStoredObject(sessionKey) {
      if (sessionStorage.getItem(sessionKey)) {
          return JSON.parse(sessionStorage.getItem(sessionKey));
      } else {
          return undefined;
      }
  };
  var callStoredAction = function callStoredAction(action, func) {
      if (sessionStorage.getItem(action)) {
          func.call();
          return sessionStorage.removeItem(action);
      }
  };
  var discuss = function discuss(page, identifier) {
      var d = document,
          s = d.createElement('script');
      window.disqus_config = function () {
          this.page.url = page;
          this.page.identifier = identifier;
      };
      s.src = '//catarseflex.disqus.com/embed.js';
      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
      return m('');
  };
  var validateEmail = function validateEmail(email) {
      var re = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
      return re.test(email);
  };
  var validateCpf = function validateCpf(strCPF) {
      var sum = 0,
          remainder = void 0;

      if (strCPF == '00000000000') return false;

      for (var i = 1; i <= 9; i++) {
          sum = sum + parseInt(strCPF.substring(i - 1, i)) * (11 - i);
      }
      remainder = sum * 10 % 11;

      if (remainder == 10 || remainder == 11) {
          remainder = 0;
      }

      if (remainder != parseInt(strCPF.substring(9, 10))) {
          return false;
      }

      sum = 0;

      for (var _i = 1; _i <= 10; _i++) {
          sum = sum + parseInt(strCPF.substring(_i - 1, _i)) * (12 - _i);
      }

      remainder = sum * 10 % 11;

      if (remainder == 10 || remainder == 11) {
          remainder = 0;
      }

      if (remainder != parseInt(strCPF.substring(10, 11))) {
          return false;
      }

      return true;
  };
  var validationErrors = m.prop([]);
  var resetValidations = function resetValidations() {
      return validationErrors([]);
  };
  var validate = function validate() {
      var errorFields = m.prop([]);

      return {
          submit: function submit(fields, fn) {
              return function () {
                  resetValidations();

                  _.map(fields, function (field) {
                      if (field.rule === 'email') {
                          if (!validateEmail(field.prop())) {
                              validationErrors().push({ field: field.prop, message: 'E-mail inválido.' });
                          }
                      }

                      if (field.rule === 'text') {
                          if (field.prop().trim() === '') {
                              validationErrors().push({ field: field.prop, message: 'O campo não pode ser vazio.' });
                          }
                      }
                  });

                  return !validationErrors().length > 0 ? fn() : false;
              };
          },
          hasError: function hasError(fieldProp) {
              return _.reduce(validationErrors(), function (memo, fieldError) {
                  return fieldError.field() === fieldProp() || memo;
              }, false);
          }
      };
  };
  var momentFromString = function momentFromString(date, format) {
      var european = moment(date, format || 'DD/MM/YYYY');
      return european.isValid() ? european : moment(date);
  };
  var translatedTimeUnits = {
      days: 'dias',
      minutes: 'minutos',
      hours: 'horas',
      seconds: 'segundos'
  };
  var translatedTime = function translatedTime(time) {
      var translatedTime = translatedTimeUnits,
          unit = function unit() {
          var projUnit = translatedTime[time.unit || 'seconds'];

          return time.total <= 1 ? projUnit.slice(0, -1) : projUnit;
      };

      return {
          unit: unit(),
          total: time.total
      };
  };
  var generateFormatNumber = function generateFormatNumber(s, c) {
      return function (number, n, x) {
          if (!_.isNumber(number)) {
              return null;
          }

          var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
              num = number.toFixed(Math.max(0, ~ ~n));
          return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));
      };
  };
  var formatNumber = generateFormatNumber('.', ',');
  var toggleProp = function toggleProp(defaultState, alternateState) {
      var p = m.prop(defaultState);
      p.toggle = function () {
          return p(p() === alternateState ? defaultState : alternateState);
      };

      return p;
  };
  var idVM = postgrest.filtersVM({
      id: 'eq'
  });
  var getCurrentProject = function getCurrentProject() {
      if (_dataCache.currentProject) return _dataCache.currentProject;

      var root = document.getElementById('project-show-root'),
          data = root && root.getAttribute('data-parameters');
      if (data) {
          return _dataCache.currentProject = JSON.parse(data);
      } else {
          return false;
      }
  };
  var getRdToken = function getRdToken() {
      if (_dataCache.rdToken) return _dataCache.rdToken;

      var meta = _.first(document.querySelectorAll('[name=rd-token]'));
      return meta ? _dataCache.rdToken = meta.content : undefined;
  };
  var getMailchimpUrl = function getMailchimpUrl() {
      if (_dataCache.mailchumUrl) return _dataCache.mailchumUrl;

      var meta = _.first(document.querySelectorAll('[name=mailchimp-url]'));
      return meta ? _dataCache.mailchumUrl = meta.content : undefined;
  };
  var getUser = function getUser() {
      if (_dataCache.user) return _dataCache.user;

      var body = document.getElementsByTagName('body'),
          data = _.first(body).getAttribute('data-user');
      if (data) {
          return _dataCache.user = JSON.parse(data);
      } else {
          return false;
      }
  };
  var getBlogPosts = function getBlogPosts() {
      if (_dataCache.blogPosts) return _dataCache.blogPosts;

      var posts = _.first(document.getElementsByTagName('body')).getAttribute('data-blog');

      if (posts) {
          return _dataCache.blogPosts = JSON.parse(posts);
      } else {
          return false;
      }
  };
  var getApiHost = function getApiHost() {
      if (_dataCache.apiHost) return _dataCache.apiHost;

      var el = document.getElementById('api-host');
      return _dataCache.apiHost = el && el.getAttribute('content');
  };
  var locationActionMatch = function locationActionMatch(action) {
      var act = window.location.pathname.split('/').slice(-1)[0];
      return action === act;
  };
  var useAvatarOrDefault = function useAvatarOrDefault(avatarPath) {
      return avatarPath || '/assets/catarse_bootstrap/user.jpg';
  };
  var loader = function loader() {
      return m('.u-text-center.u-margintop-30 u-marginbottom-30', [m('img[alt="Loader"][src="https://s3.amazonaws.com/catarse.files/loader.gif"]')]);
  };
  var newFeatureBadge = function newFeatureBadge() {
      return m('span.badge.badge-success.margin-side-5', I18n$1.t('projects.new_feature_badge'));
  };
  var fbParse = function fbParse() {
      var tryParse = function tryParse() {
          try {
              window.FB.XFBML.parse();
          } catch (e) {
              console.log(e);
          }
      };

      return window.setTimeout(tryParse, 500); //use timeout to wait async of facebook
  };
  var pluralize = function pluralize(count, s, p) {
      return count > 1 ? count + p : count + s;
  };
  var strip = function strip(html) {
      var tmp = document.createElement('div');
      tmp.innerHTML = html;
      return tmp.textContent || tmp.innerText || '';
  };
  var simpleFormat = function simpleFormat() {
      var str = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

      str = str.replace(/\r\n?/, '\n');
      if (str.length > 0) {
          str = str.replace(/\n\n+/g, '</p><p>');
          str = str.replace(/\n/g, '<br />');
          str = '<p>' + str + '</p>';
      }
      return str;
  };
  var rewardSouldOut = function rewardSouldOut(reward) {
      return reward.maximum_contributions > 0 ? reward.paid_count + reward.waiting_payment_count >= reward.maximum_contributions : false;
  };
  var rewardRemaning = function rewardRemaning(reward) {
      return reward.maximum_contributions - (reward.paid_count + reward.waiting_payment_count);
  };
  var parseUrl = function parseUrl(href) {
      var l = document.createElement('a');
      l.href = href;
      return l;
  };
  var UIHelper = function UIHelper() {
      return function (el, isInitialized) {
          if (!isInitialized && window.$) {
              window.UIHelper.setupResponsiveIframes($(el));
          }
      };
  };
  var toAnchor = function toAnchor() {
      return function (el, isInitialized) {
          if (!isInitialized) {
              var hash = window.location.hash.substr(1);
              if (hash === el.id) {
                  window.location.hash = '';
                  setTimeout(function () {
                      window.location.hash = el.id;
                  });
              }
          }
      };
  };
  var navigateToDevise = function navigateToDevise() {
      window.location.href = '/pt/login';
      return false;
  };
  var navigateTo = function navigateTo(path) {
      window.location.href = path;
      return false;
  };
  var cumulativeOffset = function cumulativeOffset(element) {
      var top = 0,
          left = 0;
      do {
          top += element.offsetTop || 0;
          left += element.offsetLeft || 0;
          element = element.offsetParent;
      } while (element);

      return {
          top: top,
          left: left
      };
  };
  var closeModal = function closeModal() {
      var el = document.getElementsByClassName('modal-close')[0];
      if (_.isElement(el)) {
          el.onclick = function (event) {
              event.preventDefault();

              document.getElementsByClassName('modal-backdrop')[0].style.display = 'none';
          };
      };
  };
  var closeFlash = function closeFlash() {
      var el = document.getElementsByClassName('icon-close')[0];
      if (_.isElement(el)) {
          el.onclick = function (event) {
              event.preventDefault();

              el.parentElement.remove();
          };
      };
  };
  var i18nScope = function i18nScope(scope, obj) {
      obj = obj || {};
      return _.extend({}, obj, { scope: scope });
  };
  var redrawHashChange = function redrawHashChange(before) {
      var callback = _.isFunction(before) ? function () {
          before();
          m.redraw();
      } : m.redraw;

      window.addEventListener('hashchange', callback, false);
  };
  var authenticityToken = function authenticityToken() {
      var meta = _.first(document.querySelectorAll('[name=csrf-token]'));
      return meta ? meta.content : undefined;
  };
  var animateScrollTo = function animateScrollTo(el) {
      var scrolled = window.scrollY;

      var offset = cumulativeOffset(el).top,
          duration = 300,
          dFrame = (offset - scrolled) / duration,

      //EaseInOutCubic easing function. We'll abstract all animation funs later.
      eased = function eased(t) {
          return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
      },
          animation = setInterval(function () {
          var pos = eased(scrolled / offset) * scrolled;

          window.scrollTo(0, pos);

          if (scrolled >= offset) {
              clearInterval(animation);
          }

          scrolled = scrolled + dFrame;
      }, 1);
  };
  var scrollTo = function scrollTo() {
      var setTrigger = function setTrigger(el, anchorId) {
          el.onclick = function () {
              var anchorEl = document.getElementById(anchorId);

              if (_.isElement(anchorEl)) {
                  animateScrollTo(anchorEl);
              }

              return false;
          };
      };

      return function (el, isInitialized) {
          if (!isInitialized) {
              setTrigger(el, el.hash.slice(1));
          }
      };
  };
  var projectStateTextClass = function projectStateTextClass(state) {
      var statusText = {
          online: {
              cssClass: 'text-success',
              text: 'NO AR'
          },
          successful: {
              cssClass: 'text-success',
              text: 'FINANCIADO'
          },
          failed: {
              cssClass: 'text-error',
              text: 'NÃO FINANCIADO'
          },
          waiting_funds: {
              cssClass: 'text-waiting',
              text: 'AGUARDANDO'
          },
          rejected: {
              cssClass: 'text-error',
              text: 'RECUSADO'
          },
          draft: {
              cssClass: '',
              text: 'RASCUNHO'
          },
          in_analysis: {
              cssClass: '',
              text: 'EM ANÁLISE'
          },
          approved: {
              cssClass: 'text-success',
              text: 'APROVADO'
          }
      };

      return statusText[state];
  };
  var RDTracker = function RDTracker(eventId) {
      return function (el, isInitialized) {
          if (!isInitialized) {
              var integrationScript = document.createElement('script');
              integrationScript.type = 'text/javascript';
              integrationScript.id = 'RDIntegration';

              if (!document.getElementById(integrationScript.id)) {
                  document.body.appendChild(integrationScript);
                  integrationScript.onload = function () {
                      return RdIntegration.integrate(getRdToken(), eventId);
                  };
                  integrationScript.src = 'https://d335luupugsy2.cloudfront.net/js/integration/stable/rd-js-integration.min.js';
              }

              return false;
          }
      };
  };
  var analyticsEvent = function analyticsEvent(eventObj) {
      var fn = arguments.length <= 1 || arguments[1] === undefined ? Function.prototype : arguments[1];

      //https://developers.google.com/analytics/devguides/collection/analyticsjs/command-queue-reference#send
      if (!eventObj) {
          return fn;
      }

      return function () {
          try {
              if (!eventObj.project) eventObj.project = getCurrentProject();
              if (!eventObj.user) eventObj.user = getUser();
              CatarseAnalytics.event(eventObj);
          } catch (e) {
              console.error('[h.analyticsEvent] error:', e);
          }
          fn();
      };
  };
  var _analyticsOneTimeEventFired = {};
  var analyticsOneTimeEvent = function analyticsOneTimeEvent(eventObj, fn) {
      if (!eventObj) {
          return fn;
      }

      var eventKey = _.compact([eventObj.cat, eventObj.act]).join('_');
      if (!eventKey) {
          throw new Error('Should inform cat or act');
      }
      return function () {
          if (!_analyticsOneTimeEventFired[eventKey]) {
              //console.log('oneTimeEvent',eventKey);
              _analyticsOneTimeEventFired[eventKey] = true;
              var fireEvent = analyticsEvent(eventObj, fn);
              fireEvent();
          }
      };
  };
  var monetaryToFloat = function monetaryToFloat(propValue) {
      return parseFloat(propValue().replace('.', '').replace(',', '.'));
  };
  var applyMonetaryMask = function applyMonetaryMask(number) {
      var onlyNumbers = String(number).replace(/[^0-9]|[.,]/g, ''),
          integerPart = onlyNumbers.slice(0, onlyNumbers.length - 2),
          decimalPart = onlyNumbers.slice(onlyNumbers.length - 2);

      integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

      return integerPart + ',' + decimalPart;
  };
  var addChar = function addChar(position, maskChar) {
      return function (char) {
          return function (string) {
              if (string.length === position && char !== maskChar) {
                  return string + maskChar;
              }
              return string;
          };
      };
  };
  var readMaskDefinition = function readMaskDefinition(maskCharDefinitions) {
      return function (maskDefinition) {
          return _.compact(_.map(maskDefinition, function (letter, index) {
              return letter in maskCharDefinitions ? null : [index, letter];
          }));
      };
  };
  var isCharAllowed = function isCharAllowed(maskCharDefinitions) {
      return function (maskDefinition) {
          return function (position, newChar) {
              if (position >= maskDefinition.length) {
                  return false;
              }

              var maskChar = maskDefinition.charAt(position);
              if (maskChar in maskCharDefinitions) {
                  return maskCharDefinitions[maskChar].test(newChar);
              } else {
                  return newChar === maskChar || isCharAllowed(maskCharDefinitions)(maskDefinition)(position + 1, newChar);
              }
          };
      };
  };
  var applyMask = function applyMask(maskDefinition) {
      var maskFunctions = _.map(maskDefinition, function (maskChar) {
          return addChar(maskChar[0], maskChar[1]);
      });
      return function (string, newChar) {
          var addNewCharFunctions = _.map(maskFunctions, function (el) {
              return el(newChar);
          });
          var applyMaskFunctions = _.reduce(addNewCharFunctions, function (memo, f) {
              return _.isFunction(memo) ? _.compose(f, memo) : f;
          });
          return applyMaskFunctions(string);
      };
  };
  var mask = function mask(maskDefinition, value) {
      var maskCharDefinitions = {
          '9': /\d/,
          'A': /[a-zA-Z]/
      },
          readMask = readMaskDefinition(maskCharDefinitions),
          isStrCharAllowed = isCharAllowed(maskCharDefinitions),
          applyValueMask = applyMask(readMask(maskDefinition)),
          restrictInput = isStrCharAllowed(maskDefinition);

      return _.reduce(value, function (memo, chr) {
          if (restrictInput(memo.length, chr)) {
              memo = applyValueMask(memo, chr) + chr;
          }
          return memo;
      }, '');
  };
  var removeStoredObject = function removeStoredObject(sessionKey) {
      return sessionStorage.removeItem(sessionKey);
  };
  var currentProject = m.prop();
  var setProject = function setProject(project) {
      currentProject(project);
  };
  var getProject = function getProject() {
      return currentProject;
  };
  var currentReward = m.prop();
  var setReward = function setReward(reward) {
      currentReward(reward);
  };
  var getReward = function getReward() {
      return currentReward;
  };
  var buildLink = function buildLink(link, refStr) {
      return '/' + link + (refStr ? '?ref=' + refStr : '');
  };
  var analyticsWindowScroll = function analyticsWindowScroll(eventObj) {
      if (eventObj) {
          (function () {
              var fired = false;
              window.addEventListener('scroll', function (e) {
                  //console.log('windowScroll');
                  if (!fired && window.$ && $(document).scrollTop() > $(window).height() * (3 / 4)) {
                      fired = true;
                      var fireEvent = analyticsEvent(eventObj);
                      fireEvent();
                  }
              });
          })();
      }
  };
  var analytics = {
      event: analyticsEvent,
      oneTimeEvent: analyticsOneTimeEvent,
      windowScroll: analyticsWindowScroll
  };
  var projectFullPermalink = function projectFullPermalink(project) {
      var permalink = void 0;
      if (typeof project === 'function') {
          permalink = project().permalink;
      } else {
          permalink = project.permalink;
      }

      return 'https://www.catarse.me/' + permalink;
  };
  var isProjectPage = function isProjectPage() {
      var path = window.location.pathname,
          isOnInsights = path.indexOf('/insights') > -1,
          isOnEdit = path.indexOf('/edit') > -1,
          isOnContribution = path.indexOf('/contribution') > -1;

      return !isOnEdit && !isOnInsights && !isOnContribution;
  };
  var setPageTitle = function setPageTitle(title) {
      return function (el, isInitialized) {
          var titleEl = document.getElementsByTagName('title')[0],
              currentTitle = titleEl.innerText;

          if (currentTitle !== title) {
              return titleEl.innerText = title;
          }
      };
  };
  setMomentifyLocale();
  closeFlash();
  closeModal();

  var h = {
      authenticityToken: authenticityToken,
      buildLink: buildLink,
      cumulativeOffset: cumulativeOffset,
      discuss: discuss,
      existy: existy,
      validateEmail: validateEmail,
      validateCpf: validateCpf,
      momentify: momentify,
      momentFromString: momentFromString,
      formatNumber: formatNumber,
      idVM: idVM,
      getUser: getUser,
      getApiHost: getApiHost,
      getMailchimpUrl: getMailchimpUrl,
      getCurrentProject: getCurrentProject,
      toggleProp: toggleProp,
      loader: loader,
      newFeatureBadge: newFeatureBadge,
      fbParse: fbParse,
      pluralize: pluralize,
      simpleFormat: simpleFormat,
      translatedTime: translatedTime,
      rewardSouldOut: rewardSouldOut,
      rewardRemaning: rewardRemaning,
      parseUrl: parseUrl,
      hashMatch: hashMatch,
      redrawHashChange: redrawHashChange,
      useAvatarOrDefault: useAvatarOrDefault,
      locationActionMatch: locationActionMatch,
      navigateToDevise: navigateToDevise,
      navigateTo: navigateTo,
      storeAction: storeAction,
      callStoredAction: callStoredAction,
      UIHelper: UIHelper,
      toAnchor: toAnchor,
      paramByName: paramByName,
      i18nScope: i18nScope,
      RDTracker: RDTracker,
      selfOrEmpty: selfOrEmpty,
      scrollTo: scrollTo,
      projectStateTextClass: projectStateTextClass,
      validationErrors: validationErrors,
      validate: validate,
      analytics: analytics,
      strip: strip,
      storeObject: storeObject,
      getStoredObject: getStoredObject,
      removeStoredObject: removeStoredObject,
      setProject: setProject,
      getProject: getProject,
      setReward: setReward,
      getReward: getReward,
      applyMonetaryMask: applyMonetaryMask,
      monetaryToFloat: monetaryToFloat,
      mask: mask,
      projectFullPermalink: projectFullPermalink,
      isProjectPage: isProjectPage,
      setPageTitle: setPageTitle,
      getBlogPosts: getBlogPosts
  };

  var models = {
      country: postgrest$1.model('countries'),
      state: postgrest$1.model('states'),
      contributionDetail: postgrest$1.model('contribution_details'),
      contributionActivity: postgrest$1.model('contribution_activities'),
      projectDetail: postgrest$1.model('project_details'),
      userDetail: postgrest$1.model('user_details'),
      balance: postgrest$1.model('balances'),
      balanceTransaction: postgrest$1.model('balance_transactions'),
      balanceTransfer: postgrest$1.model('balance_transfers'),
      user: postgrest$1.model('users'),
      bankAccount: postgrest$1.model('bank_accounts'),
      rewardDetail: postgrest$1.model('reward_details'),
      projectReminder: postgrest$1.model('project_reminders'),
      projectReport: postgrest$1.model('project_reports'),
      contributions: postgrest$1.model('contributions'),
      directMessage: postgrest$1.model('direct_messages'),
      teamTotal: postgrest$1.model('team_totals'),
      projectAccount: postgrest$1.model('project_accounts'),
      projectAccountError: postgrest$1.model('project_account_errors'),
      projectContribution: postgrest$1.model('project_contributions'),
      projectContributiorsStat: postgrest$1.model('project_stat_contributors'),
      projectPostDetail: postgrest$1.model('project_posts_details'),
      projectContributionsPerDay: postgrest$1.model('project_contributions_per_day'),
      projectContributionsPerLocation: postgrest$1.model('project_contributions_per_location'),
      projectContributionsPerRef: postgrest$1.model('project_contributions_per_ref'),
      projectTransfer: postgrest$1.model('project_transfers'),
      project: postgrest$1.model('projects'),
      projectSearch: postgrest$1.model('rpc/project_search'),
      category: postgrest$1.model('categories'),
      categoryTotals: postgrest$1.model('category_totals'),
      categoryFollower: postgrest$1.model('category_followers'),
      teamMember: postgrest$1.model('team_members'),
      notification: postgrest$1.model('notifications'),
      statistic: postgrest$1.model('statistics'),
      successfulProject: postgrest$1.model('successful_projects'),
      finishedProject: postgrest$1.model('finished_projects'),
      userFriend: postgrest$1.model('user_friends'),
      userFollow: postgrest$1.model('user_follows'),
      followAllFriends: postgrest$1.model('rpc/follow_all_friends'),
      contributor: postgrest$1.model('contributors'),
      userFollower: postgrest$1.model('user_followers'),
      creatorSuggestion: postgrest$1.model('creator_suggestions'),
      userContribution: postgrest$1.model('user_contributions'),
      inviteProjectEmail: postgrest$1.model('rpc/invite_project_email'),
      deleteProject: postgrest$1.model('rpc/delete_project')
  };

  models.teamMember.pageSize(40);
  models.rewardDetail.pageSize(false);
  models.project.pageSize(30);
  models.category.pageSize(50);
  models.contributionActivity.pageSize(40);
  models.successfulProject.pageSize(9);
  models.finishedProject.pageSize(9);
  models.country.pageSize(false);
  models.state.pageSize(false);
  models.projectContribution.pageSize(9);
  models.contributor.pageSize(9);

  var userListVM = postgrest.paginationVM(models.user, 'id.desc', { 'Prefer': 'count=exact' });

  var vm = postgrest.filtersVM({
      full_text_index: '@@',
      deactivated_at: 'is.null'
  });
  var paramToString = function paramToString(p) {
      return (p || '').toString().trim();
  };
  // Set default values
  vm.deactivated_at(null).order({
      id: 'desc'
  });

  vm.deactivated_at.toFilter = function () {
      var filter = JSON.parse(vm.deactivated_at());
      return filter;
  };

  vm.full_text_index.toFilter = function () {
      var filter = paramToString(vm.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  var filterMain = {
      view: function view(ctrl, args) {
          var inputWrapperClass = args.inputWrapperClass || '.w-input.text-field.positive.medium',
              btnClass = args.btnClass || '.btn.btn-large.u-marginbottom-10';

          return m$1('.w-row', [m$1('.w-col.w-col-10', [m$1('input' + inputWrapperClass + '[placeholder="' + args.placeholder + '"][type="text"]', {
              onchange: m$1.withAttr('value', args.vm),
              value: args.vm()
          })]), m$1('.w-col.w-col-2', [m$1('input#filter-btn' + btnClass + '[type="submit"][value="Buscar"]')])]);
      }
  };

  var adminFilter = {
      controller: function controller() {
          return {
              toggler: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var filterBuilder = args.filterBuilder,
              data = args.data,
              label = args.label || '',
              main = _$1.findWhere(filterBuilder, {
              component: filterMain
          });

          return m$1('#admin-contributions-filter.w-section.page-header', [m$1('.w-container', [m$1('.fontsize-larger.u-text-center.u-marginbottom-30', label), m$1('.w-form', [m$1('form', {
              onsubmit: args.submit
          }, [main ? m$1.component(main.component, main.data) : '', m$1('.u-marginbottom-20.w-row', m$1('button.w-col.w-col-12.fontsize-smallest.link-hidden-light[style="background: none; border: none; outline: none; text-align: left;"][type="button"]', {
              onclick: ctrl.toggler.toggle
          }, 'Filtros avançados  >')), ctrl.toggler() ? m$1('#advanced-search.w-row.admin-filters', [_$1.map(filterBuilder, function (f) {
              return f.component !== filterMain ? m$1.component(f.component, f.data) : '';
          })]) : ''])])])]);
      }
  };

  var adminItem = {
      controller: function controller(args) {
          return {
              displayDetailBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var item = args.item;

          return m$1('.w-clearfix.card.u-radius.u-marginbottom-20.results-admin-items', [m$1.component(args.listItem, {
              item: item,
              key: args.key
          }), m$1('button.w-inline-block.arrow-admin.fa.fa-chevron-down.fontcolor-secondary', {
              onclick: ctrl.displayDetailBox.toggle
          }), ctrl.displayDetailBox() ? m$1.component(args.listDetail, {
              item: item,
              key: args.key
          }) : '']);
      }
  };

  var adminList = {
      controller: function controller(args) {
          var list = args.vm.list;

          if (!list.collection().length && list.firstPage) {
              list.firstPage().then(null, function (serverError) {
                  args.vm.error(serverError.message);
              });
          }
      },
      view: function view(ctrl, args) {
          var list = args.vm.list,
              error = args.vm.error,
              label = args.label || '';

          return m$1('.w-section.section', [m$1('.w-container', error() ? m$1('.card.card-error.u-radius.fontweight-bold', error()) : [m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-9', [m$1('.fontsize-base', list.isLoading() ? 'Carregando ' + label.toLowerCase() + '...' : [m$1('span.fontweight-semibold', list.total()), ' ' + label.toLowerCase() + ' encontrados'])])]), m$1('#admin-contributions-list.w-container', [list.collection().map(function (item) {
              return m$1.component(adminItem, {
                  listItem: args.listItem,
                  listDetail: args.listDetail,
                  item: item,
                  key: item.id
              });
          }), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-2.w-col-push-5', [list.isLoading() ? h.loader() : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais')])])])])])])]);
      }
  };

  var adminUser = {
      view: function view(ctrl, args) {
          var user = args.item;

          return m$1('.w-row.admin-user', [m$1('.w-col.w-col-3.w-col-small-3.u-marginbottom-10', [m$1('img.user-avatar[src="' + h.useAvatarOrDefault(user.profile_img_thumbnail) + '"]')]), m$1('.w-col.w-col-9.w-col-small-9', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-10', [m$1('a.alt-link[target="_blank"][href="/users/' + user.id + '/edit"]', user.name || user.email)]), m$1('.fontsize-smallest', 'Usuário: ' + user.id), m$1('.fontsize-smallest.fontcolor-secondary', 'Email: ' + user.email), args.additional_data])]);
      }
  };

  var adminUserItem = {
      view: function view(ctrl, args) {
          return m$1('.w-row', [m$1('.w-col.w-col-4', [m$1.component(adminUser, args)])]);
      }
  };

  var adminResetPassword = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              error = m$1.prop(false),
              fail = m$1.prop(false),
              key = builder.property,
              data = {},
              item = args.item;

          builder.requestOptions.config = function (xhr) {
              if (h.authenticityToken()) {
                  xhr.setRequestHeader('X-CSRF-Token', h.authenticityToken());
              }
          };

          var l = m$1.prop(false),
              load = function load() {
              return m$1.request(_$1.extend({}, { data: data }, builder.requestOptions));
          },
              newPassword = m$1.prop(''),
              error_message = m$1.prop('');

          var requestError = function requestError(err) {
              l(false);
              error_message(err.errors[0]);
              complete(true);
              error(true);
          };
          var updateItem = function updateItem(res) {
              l(false);
              _$1.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              l(true);
              data[key] = newPassword();
              load().then(updateItem, requestError);
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
              };
          };

          return {
              complete: complete,
              error: error,
              error_message: error_message,
              l: l,
              newPassword: newPassword,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m$1('label', data.innerLabel), m$1('input.w-input.text-field[type="text"][name="' + data.property + '"][placeholder="' + data.placeholder + '"]', {
              onchange: m$1.withAttr('value', ctrl.newPassword),
              value: ctrl.newPassword()
          }), m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', 'Senha alterada com sucesso.')])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', ctrl.error_message())])])]) : '']);
      }
  };

  var adminInputAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              error = m$1.prop(false),
              fail = m$1.prop(false),
              data = {},
              item = args.item,
              key = builder.property,
              forceValue = builder.forceValue || null,
              newValue = m$1.prop(forceValue);

          h.idVM.id(item[builder.updateKey]);

          var l = postgrest.loaderWithToken(builder.model.patchOptions(h.idVM.parameters(), data));

          var updateItem = function updateItem(res) {
              _.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              data[key] = newValue();
              l.load().then(updateItem, function () {
                  complete(true);
                  error(true);
              });
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
                  newValue(forceValue);
              };
          };

          return {
              complete: complete,
              error: error,
              l: l,
              newValue: newValue,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m$1('label', data.innerLabel), data.forceValue === undefined ? m$1('input.w-input.text-field[type="text"][placeholder="' + data.placeholder + '"]', {
              onchange: m$1.withAttr('value', ctrl.newValue),
              value: ctrl.newValue()
          }) : '', m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', data.successMessage)])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', 'Houve um problema na requisição. ' + data.errorMessage)])])]) : '']);
      }
  };

  var adminNotificationHistory = {
      controller: function controller(args) {
          var notifications = m$1.prop([]),
              getNotifications = function getNotifications(user) {
              var notification = models.notification;
              notification.getPageWithToken(postgrest.filtersVM({
                  user_id: 'eq',
                  sent_at: 'is.null'
              }).user_id(user.id).sent_at(!null).order({
                  sent_at: 'desc'
              }).parameters()).then(notifications);
          };

          getNotifications(args.user);

          return {
              notifications: notifications
          };
      },
      view: function view(ctrl) {
          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Histórico de notificações'), ctrl.notifications().map(function (cEvent) {
              return m$1('.w-row.fontsize-smallest.lineheight-looser.date-event', [m$1('.w-col.w-col-24', [m$1('.fontcolor-secondary', h.momentify(cEvent.sent_at, 'DD/MM/YYYY, HH:mm'), ' - ', cEvent.template_name, cEvent.origin ? ' - ' + cEvent.origin : '')])]);
          })]);
      }
  };

  var adminUserDetail = {
      controller: function controller() {
          return {
              actions: {
                  reset: {
                      property: 'password',
                      callToAction: 'Redefinir',
                      innerLabel: 'Nova senha de Usuário:',
                      outerLabel: 'Redefinir senha',
                      placeholder: 'ex: 123mud@r',
                      model: models.user
                  },
                  reactivate: {
                      property: 'deactivated_at',
                      updateKey: 'id',
                      callToAction: 'Reativar',
                      innerLabel: 'Tem certeza que deseja reativar esse usuário?',
                      successMessage: 'Usuário reativado com sucesso!',
                      errorMessage: 'O usuário não pôde ser reativado!',
                      outerLabel: 'Reativar usuário',
                      forceValue: null,
                      model: models.user
                  }
              }
          };
      },
      view: function view(ctrl, args) {
          var actions = ctrl.actions,
              item = args.item,
              details = args.details,
              addOptions = function addOptions(builder, id) {
              return _$1.extend({}, builder, {
                  requestOptions: {
                      url: '/users/' + id + '/new_password',
                      method: 'POST'
                  }
              });
          };

          return m$1('#admin-contribution-detail-box', [m$1('.divider.u-margintop-20.u-marginbottom-20'), m$1('.w-row.u-marginbottom-30', [m$1.component(adminResetPassword, {
              data: addOptions(actions.reset, item.id),
              item: item
          }), item.deactivated_at ? m$1.component(adminInputAction, { data: actions.reactivate, item: item }) : '']), m$1('.w-row.card.card-terciary.u-radius', [m$1.component(adminNotificationHistory, {
              user: item
          })])]);
      }
  };

  var dropdown = {
      view: function view(ctrl, args) {
          var opts = _$1.isFunction(args.options) ? args.options() : args.options;

          return m$1('select' + args.classes + '[id="' + args.id + '"]', {
              onchange: m$1.withAttr('value', args.valueProp),
              value: args.valueProp()
          }, _$1.map(opts, function (data) {
              return m$1('option[value="' + data.value + '"]', data.option);
          }));
      }
  };

  var filterDropdown = {
      view: function view(ctrl, args) {
          var wrapper_c = args.wrapper_class || '.w-col.w-col-3.w-col-small-6';
          return m$1(wrapper_c, [m$1('label.fontsize-smaller[for="' + args.index + '"]', args.custom_label ? m$1.component(args.custom_label[0], args.custom_label[1]) : args.label), m$1.component(dropdown, {
              id: args.index,
              classes: '.w-select.text-field.positive',
              valueProp: args.vm,
              options: args.options
          })]);
      }
  };

  var adminUsers = {
      controller: function controller() {
          var listVM = userListVM,
              filterVM = vm,
              error = m$1.prop(''),
              itemBuilder = [{
              component: adminUser,
              wrapperClass: '.w-col.w-col-4'
          }],
              filterBuilder = [{ //name
              component: filterMain,
              data: {
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por nome, e-mail, Ids do usuário...'
              }
          }, { //status
              component: filterDropdown,
              data: {
                  label: 'Com o estado',
                  index: 'status',
                  name: 'deactivated_at',
                  vm: filterVM.deactivated_at,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: null,
                      option: 'ativo'
                  }, {
                      value: !null,
                      option: 'desativado'
                  }]
              }
          }],
              submit = function submit() {
              listVM.firstPage(filterVM.parameters()).then(null, function (serverError) {
                  error(serverError.message);
              });
              return false;
          };

          return {
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              listVM: {
                  list: listVM,
                  error: error
              },
              submit: submit
          };
      },
      view: function view(ctrl) {
          var label = 'Usuários';

          return [m$1.component(adminFilter, {
              form: ctrl.filterVM.formDescriber,
              filterBuilder: ctrl.filterBuilder,
              label: label,
              submit: ctrl.submit
          }), m$1.component(adminList, {
              vm: ctrl.listVM,
              label: label,
              listItem: adminUserItem,
              listDetail: adminUserDetail
          })];
      }
  };

  var contributionListVM = postgrest.paginationVM(models.contributionDetail, 'id.desc', { 'Prefer': 'count=exact' });

  var vm$1 = postgrest$1.filtersVM({
      full_text_index: '@@',
      state: 'eq',
      gateway: 'eq',
      value: 'between',
      created_at: 'between'
  });
  var paramToString$1 = function paramToString(p) {
      return (p || '').toString().trim();
  };
  // Set default values
  vm$1.state('');
  vm$1.gateway('');
  vm$1.order({
      id: 'desc'
  });

  vm$1.created_at.lte.toFilter = function () {
      var filter = paramToString$1(vm$1.created_at.lte());
      return filter && h.momentFromString(filter).endOf('day').format('');
  };

  vm$1.created_at.gte.toFilter = function () {
      var filter = paramToString$1(vm$1.created_at.gte());
      return filter && h.momentFromString(filter).format();
  };

  vm$1.full_text_index.toFilter = function () {
      var filter = paramToString$1(vm$1.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  var adminProject = {
      view: function view(ctrl, args) {
          var project = args.item;
          return m$1('.w-row.admin-project', [m$1('.w-col.w-col-3.w-col-small-3.u-marginbottom-10', [m$1('img.thumb-project.u-radius[src=' + project.project_img + '][width=50]')]), m$1('.w-col.w-col-9.w-col-small-9', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-10', [m$1('a.alt-link[target="_blank"][href="/' + project.permalink + '"]', project.project_name)]), m$1('.fontsize-smallest.fontweight-semibold', project.project_state), m$1('.fontsize-smallest.fontcolor-secondary', h.momentify(project.project_online_date) + ' a ' + h.momentify(project.project_expires_at))])]);
      }
  };

  var adminContribution = {
      view: function view(ctrl, args) {
          var contribution = args.item;
          return m$1('.w-row.admin-contribution', [m$1('.fontweight-semibold.lineheight-tighter.u-marginbottom-10.fontsize-small', 'R$' + contribution.value), m$1('.fontsize-smallest.fontcolor-secondary', h.momentify(contribution.created_at, 'DD/MM/YYYY HH:mm[h]')), m$1('.fontsize-smallest', ['ID do Gateway: ', m$1('a.alt-link[target="_blank"][href="https://dashboard.pagar.me/#/transactions/' + contribution.gateway_id + '"]', contribution.gateway_id)])]);
      }
  };

  var adminContributionUser = {
      view: function view(ctrl, args) {
          var item = args.item,
              user = {
              profile_img_thumbnail: item.user_profile_img,
              id: item.user_id,
              name: item.user_name,
              email: item.email
          };

          var additionalData = m$1('.fontsize-smallest.fontcolor-secondary', 'Gateway: ' + item.payer_email);
          return m$1.component(adminUser, { item: user, additional_data: additionalData });
      }
  };

  //Add translations to payment state.
  var I18nScope = _.partial(h.i18nScope, 'projects.payment');

  var paymentStatus = {
      controller: function controller(args) {
          var payment = args.item,
              card = null,
              displayPaymentMethod = void 0,
              paymentMethodClass = void 0,
              stateClass = void 0;

          card = function card() {
              if (payment.gateway_data) {
                  switch (payment.gateway.toLowerCase()) {
                      case 'moip':
                          return {
                              first_digits: payment.gateway_data.cartao_bin,
                              last_digits: payment.gateway_data.cartao_final,
                              brand: payment.gateway_data.cartao_bandeira
                          };
                      case 'pagarme':
                          return {
                              first_digits: payment.gateway_data.card_first_digits,
                              last_digits: payment.gateway_data.card_last_digits,
                              brand: payment.gateway_data.card_brand
                          };
                  }
              }
          };

          displayPaymentMethod = function displayPaymentMethod() {
              switch (payment.payment_method.toLowerCase()) {
                  case 'boletobancario':
                      return m$1('span#boleto-detail', '');
                  case 'cartaodecredito':
                      var cardData = card();
                      if (cardData) {
                          return m$1('#creditcard-detail.fontsize-smallest.fontcolor-secondary.lineheight-tight', [cardData.first_digits + '******' + cardData.last_digits, m$1('br'), cardData.brand + ' ' + payment.installments + 'x']);
                      }
                      return '';
              }
          };

          paymentMethodClass = function paymentMethodClass() {
              switch (payment.payment_method.toLowerCase()) {
                  case 'boletobancario':
                      return '.fa-barcode';
                  case 'cartaodecredito':
                      return '.fa-credit-card';
                  default:
                      return '.fa-question';
              }
          };

          stateClass = function stateClass() {
              switch (payment.state) {
                  case 'paid':
                      return '.text-success';
                  case 'refunded':
                      return '.text-refunded';
                  case 'pending':
                  case 'pending_refund':
                      return '.text-waiting';
                  default:
                      return '.text-error';
              }
          };

          return {
              displayPaymentMethod: displayPaymentMethod,
              paymentMethodClass: paymentMethodClass,
              stateClass: stateClass
          };
      },
      view: function view(ctrl, args) {
          var payment = args.item;

          return m$1('.w-row.payment-status', [m$1('.fontsize-smallest.lineheight-looser.fontweight-semibold', [m$1('span.fa.fa-circle' + ctrl.stateClass()), ' ' + I18n$1.t(payment.state, I18nScope())]), m$1('.fontsize-smallest.fontweight-semibold', [m$1('span.fa' + ctrl.paymentMethodClass()), ' ', m$1('a.link-hidden[href="#"]', payment.payment_method)]), m$1('.fontsize-smallest.fontcolor-secondary.lineheight-tight', [ctrl.displayPaymentMethod()])]);
      }
  };

  var adminContributionItem = {
      controller: function controller() {
          return {
              itemBuilder: [{
                  component: adminContributionUser,
                  wrapperClass: '.w-col.w-col-4'
              }, {
                  component: adminProject,
                  wrapperClass: '.w-col.w-col-4'
              }, {
                  component: adminContribution,
                  wrapperClass: '.w-col.w-col-2'
              }, {
                  component: paymentStatus,
                  wrapperClass: '.w-col.w-col-2'
              }]
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-row', _.map(ctrl.itemBuilder, function (panel) {
              return m$1(panel.wrapperClass, [m$1.component(panel.component, {
                  item: args.item,
                  key: args.key
              })]);
          }));
      }
  };

  var adminRadioAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              data = {},
              error = m$1.prop(false),
              fail = m$1.prop(false),
              item = args.item(),
              description = m$1.prop(item.description || ''),
              key = builder.getKey,
              newID = m$1.prop(''),
              getFilter = {},
              setFilter = {},
              radios = m$1.prop([]),
              getAttr = builder.radios,
              getKey = builder.getKey,
              getKeyValue = args.getKeyValue,
              updateKey = builder.updateKey,
              updateKeyValue = args.updateKeyValue,
              validate = builder.validate,
              selectedItem = builder.selectedItem || m$1.prop();

          setFilter[updateKey] = 'eq';
          var setVM = postgrest.filtersVM(setFilter);
          setVM[updateKey](updateKeyValue);

          getFilter[getKey] = 'eq';
          var getVM = postgrest.filtersVM(getFilter);
          getVM[getKey](getKeyValue);

          var getLoader = postgrest.loaderWithToken(builder.getModel.getPageOptions(getVM.parameters()));

          var setLoader = postgrest.loaderWithToken(builder.updateModel.patchOptions(setVM.parameters(), data));

          var updateItem = function updateItem(data) {
              if (data.length > 0) {
                  var newItem = _$1.findWhere(radios(), {
                      id: data[0][builder.selectKey]
                  });
                  selectedItem(newItem);
              } else {
                  error({
                      message: 'Nenhum item atualizado'
                  });
              }
              complete(true);
          };

          var populateRadios = function populateRadios(data) {
              var emptyState = builder.addEmpty;

              radios(data);

              if (!_$1.isUndefined(emptyState)) {
                  radios().unshift(emptyState);
              }
          };

          var fetch = function fetch() {
              getLoader.load().then(populateRadios, error);
          };

          var submit = function submit() {
              if (newID()) {
                  var validation = validate(radios(), newID());
                  if (_$1.isUndefined(validation)) {
                      data[builder.selectKey] = newID() === -1 ? null : newID();
                      setLoader.load().then(updateItem, error);
                  } else {
                      complete(true);
                      error({
                          message: validation
                      });
                  }
              }
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
                  newID('');
              };
          };

          var setDescription = function setDescription(text) {
              description(text);
              m$1.redraw();
          };

          fetch();

          return {
              complete: complete,
              description: description,
              setDescription: setDescription,
              error: error,
              setLoader: setLoader,
              getLoader: getLoader,
              newID: newID,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload,
              radios: radios
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              item = args.item(),
              btnValue = ctrl.setLoader() || ctrl.getLoader() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [ctrl.radios() ? _$1.map(ctrl.radios(), function (radio, index) {
              return m$1('.w-radio', [m$1('input#r-' + index + '.w-radio-input[type=radio][name="admin-radio"][value="' + radio.id + '"]', {
                  checked: radio.id === (item[data.selectKey] || item.id),
                  onclick: function onclick() {
                      ctrl.newID(radio.id);
                      ctrl.setDescription(radio.description);
                  }
              }), m$1('label.w-form-label[for="r-' + index + '"]', 'R$' + radio.minimum_value)]);
          }) : h.loader(), m$1('strong', 'Descrição'), m$1('p', ctrl.description()), m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', 'Recompensa alterada com sucesso!')])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', ctrl.error().message)])])]) : '']);
      }
  };

  var adminExternalAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m$1.prop(false),
              error = m$1.prop(false),
              fail = m$1.prop(false),
              data = {},
              item = args.item;

          builder.requestOptions.config = function (xhr) {
              if (h.authenticityToken()) {
                  xhr.setRequestHeader('X-CSRF-Token', h.authenticityToken());
              }
          };

          var reload = _$1.compose(builder.model.getRowWithToken, h.idVM.id(item[builder.updateKey]).parameters),
              l = m$1.prop(false);

          var reloadItem = function reloadItem() {
              return reload().then(updateItem);
          };

          var requestError = function requestError(err) {
              l(false);
              complete(true);
              error(true);
          };

          var updateItem = function updateItem(res) {
              _$1.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              l(true);
              m$1.request(builder.requestOptions).then(reloadItem, requestError);
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
              };
          };

          return {
              l: l,
              complete: complete,
              error: error,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m$1('.w-col.w-col-2', [m$1('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m$1('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m$1('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m$1('label', data.innerLabel), m$1('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m$1('.w-form-done[style="display:block;"]', [m$1('p', 'Requisição feita com sucesso.')])] : [m$1('.w-form-error[style="display:block;"]', [m$1('p', 'Houve um problema na requisição.')])])]) : '']);
      }
  };

  var adminTransaction = {
      view: function view(ctrl, args) {
          var contribution = args.contribution;
          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Detalhes do apoio'), m$1('.fontsize-smallest.lineheight-looser', ['Valor: R$' + h.formatNumber(contribution.value, 2, 3), m$1('br'), 'Taxa: R$' + h.formatNumber(contribution.gateway_fee, 2, 3), m$1('br'), 'Aguardando Confirmação: ' + (contribution.waiting_payment ? 'Sim' : 'Não'), m$1('br'), 'Anônimo: ' + (contribution.anonymous ? 'Sim' : 'Não'), m$1('br'), 'Id pagamento: ' + contribution.gateway_id, m$1('br'), 'Apoio: ' + contribution.contribution_id, m$1('br'), 'Chave: \n', m$1('br'), contribution.key, m$1('br'), 'Meio: ' + contribution.gateway, m$1('br'), 'Operadora: ' + (contribution.gateway_data && contribution.gateway_data.acquirer_name), m$1('br'), contribution.is_second_slip ? [m$1('a.link-hidden[href="#"]', 'Boleto bancário'), ' ', m$1('span.badge', '2a via')] : ''])]);
      }
  };

  var adminTransactionHistory = {
      controller: function controller(args) {
          var contribution = args.contribution,
              mapEvents = _$1.reduce([{
              date: contribution.paid_at,
              name: 'Apoio confirmado'
          }, {
              date: contribution.pending_refund_at,
              name: 'Reembolso solicitado'
          }, {
              date: contribution.refunded_at,
              name: 'Estorno realizado'
          }, {
              date: contribution.created_at,
              name: 'Apoio criado'
          }, {
              date: contribution.refused_at,
              name: 'Apoio cancelado'
          }, {
              date: contribution.deleted_at,
              name: 'Apoio excluído'
          }, {
              date: contribution.chargeback_at,
              name: 'Chargeback'
          }], function (memo, item) {
              if (item.date !== null && item.date !== undefined) {
                  item.originalDate = item.date;
                  item.date = h.momentify(item.date, 'DD/MM/YYYY, HH:mm');
                  return memo.concat(item);
              }

              return memo;
          }, []);

          return {
              orderedEvents: _$1.sortBy(mapEvents, 'originalDate')
          };
      },
      view: function view(ctrl) {
          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Histórico da transação'), ctrl.orderedEvents.map(function (cEvent) {
              return m$1('.w-row.fontsize-smallest.lineheight-looser.date-event', [m$1('.w-col.w-col-6', [m$1('.fontcolor-secondary', cEvent.date)]), m$1('.w-col.w-col-6', [m$1('div', cEvent.name)])]);
          })]);
      }
  };

  var adminReward = {
      view: function view(ctrl, args) {
          var reward = args.reward(),
              available = parseInt(reward.paid_count) + parseInt(reward.waiting_payment_count);

          return m$1('.w-col.w-col-4', [m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Recompensa'), m$1('.fontsize-smallest.lineheight-looser', reward.id ? ['ID: ' + reward.id, m$1('br'), 'Valor mínimo: R$' + h.formatNumber(reward.minimum_value, 2, 3), m$1('br'), m$1.trust('Disponíveis: ' + available + ' / ' + (reward.maximum_contributions || '&infin;')), m$1('br'), 'Aguardando confirmação: ' + reward.waiting_payment_count, m$1('br'), 'Descrição: ' + reward.description] : 'Apoio sem recompensa')]);
      }
  };

  var adminContributionDetail = {
      controller: function controller(args) {
          var l = void 0;
          var loadReward = function loadReward() {
              var model = models.rewardDetail,
                  reward_id = args.item.reward_id,
                  opts = model.getRowOptions(h.idVM.id(reward_id).parameters()),
                  reward = m$1.prop({});

              l = postgrest.loaderWithToken(opts);

              if (reward_id) {
                  l.load().then(_$1.compose(reward, _$1.first));
              }

              return reward;
          };

          return {
              reward: loadReward(),
              actions: {
                  transfer: {
                      property: 'user_id',
                      updateKey: 'id',
                      callToAction: 'Transferir',
                      innerLabel: 'Id do novo apoiador:',
                      outerLabel: 'Transferir Apoio',
                      placeholder: 'ex: 129908',
                      successMessage: 'Apoio transferido com sucesso!',
                      errorMessage: 'O apoio não foi transferido!',
                      model: models.contributionDetail
                  },
                  reward: {
                      getKey: 'project_id',
                      updateKey: 'contribution_id',
                      selectKey: 'reward_id',
                      radios: 'rewards',
                      callToAction: 'Alterar Recompensa',
                      outerLabel: 'Recompensa',
                      getModel: models.rewardDetail,
                      updateModel: models.contributionDetail,
                      selectedItem: loadReward(),
                      addEmpty: { id: -1, minimum_value: 10, description: 'Sem recompensa' },
                      validate: function validate(rewards, newRewardID) {
                          var reward = _$1.findWhere(rewards, { id: newRewardID });
                          return args.item.value >= reward.minimum_value ? undefined : 'Valor mínimo da recompensa é maior do que o valor da contribuição.';
                      }
                  },
                  refund: {
                      updateKey: 'id',
                      callToAction: 'Reembolso direto',
                      innerLabel: 'Tem certeza que deseja reembolsar esse apoio?',
                      outerLabel: 'Reembolsar Apoio',
                      model: models.contributionDetail
                  },
                  remove: {
                      property: 'state',
                      updateKey: 'id',
                      callToAction: 'Apagar',
                      innerLabel: 'Tem certeza que deseja apagar esse apoio?',
                      outerLabel: 'Apagar Apoio',
                      forceValue: 'deleted',
                      successMessage: 'Apoio removido com sucesso!',
                      errorMessage: 'O apoio não foi removido!',
                      model: models.contributionDetail
                  }
              },
              l: l
          };
      },
      view: function view(ctrl, args) {
          var actions = ctrl.actions,
              item = args.item,
              reward = ctrl.reward;

          var addOptions = function addOptions(builder, id) {
              return _$1.extend({}, builder, {
                  requestOptions: {
                      url: '/admin/contributions/' + id + '/gateway_refund',
                      method: 'PUT'
                  }
              });
          };

          return m$1('#admin-contribution-detail-box', [m$1('.divider.u-margintop-20.u-marginbottom-20'), m$1('.w-row.u-marginbottom-30', [m$1.component(adminInputAction, {
              data: actions.transfer,
              item: item
          }), ctrl.l() ? h.loader : m$1.component(adminRadioAction, {
              data: actions.reward,
              item: reward,
              getKeyValue: item.project_id,
              updateKeyValue: item.contribution_id
          }), m$1.component(adminExternalAction, {
              data: addOptions(actions.refund, item.id),
              item: item
          }), m$1.component(adminInputAction, {
              data: actions.remove,
              item: item
          })]), m$1('.w-row.card.card-terciary.u-radius', [m$1.component(adminTransaction, {
              contribution: item
          }), m$1.component(adminTransactionHistory, {
              contribution: item
          }), ctrl.l() ? h.loader : m$1.component(adminReward, {
              reward: reward,
              key: item.key
          })])]);
      }
  };

  var filterNumberRange = {
      view: function view(ctrl, args) {
          return m$1('.w-col.w-col-3.w-col-small-6', [m$1('label.fontsize-smaller[for="' + args.index + '"]', args.label), m$1('.w-row', [m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[id="' + args.index + '"][type="text"]', {
              onchange: m$1.withAttr('value', args.first),
              value: args.first()
          })]), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m$1('.fontsize-smaller.u-text-center.lineheight-looser', 'e')]), m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[type="text"]', {
              onchange: m$1.withAttr('value', args.last),
              value: args.last()
          })])])]);
      }
  };

  var filterDateRange = {
      view: function view(ctrl, args) {
          return m$1('.w-col.w-col-3.w-col-small-6', [m$1('label.fontsize-smaller[for="' + args.index + '"]', args.label), m$1('.w-row', [m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[id="' + args.index + '"][type="text"]', {
              onchange: m$1.withAttr('value', args.first),
              value: args.first()
          })]), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m$1('.fontsize-smaller.u-text-center.lineheight-looser', 'e')]), m$1('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m$1('input.w-input.text-field.positive[type="text"]', {
              onchange: m$1.withAttr('value', args.last),
              value: args.last()
          })])])]);
      }
  };

  var adminContributions = {
      controller: function controller() {
          var listVM = contributionListVM,
              filterVM = vm$1,
              error = m$1.prop(''),
              filterBuilder = [{ //full_text_index
              component: filterMain,
              data: {
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por projeto, email, Ids do usuário e do apoio...'
              }
          }, { //state
              component: filterDropdown,
              data: {
                  label: 'Com o estado',
                  name: 'state',
                  vm: filterVM.state,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: 'paid',
                      option: 'paid'
                  }, {
                      value: 'refused',
                      option: 'refused'
                  }, {
                      value: 'pending',
                      option: 'pending'
                  }, {
                      value: 'pending_refund',
                      option: 'pending_refund'
                  }, {
                      value: 'refunded',
                      option: 'refunded'
                  }, {
                      value: 'chargeback',
                      option: 'chargeback'
                  }, {
                      value: 'deleted',
                      option: 'deleted'
                  }]
              }
          }, { //gateway
              component: filterDropdown,
              data: {
                  label: 'gateway',
                  name: 'gateway',
                  vm: filterVM.gateway,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: 'Pagarme',
                      option: 'Pagarme'
                  }, {
                      value: 'MoIP',
                      option: 'MoIP'
                  }, {
                      value: 'PayPal',
                      option: 'PayPal'
                  }, {
                      value: 'Credits',
                      option: 'Créditos'
                  }]
              }
          }, { //value
              component: filterNumberRange,
              data: {
                  label: 'Valores entre',
                  first: filterVM.value.gte,
                  last: filterVM.value.lte
              }
          }, { //created_at
              component: filterDateRange,
              data: {
                  label: 'Período do apoio',
                  first: filterVM.created_at.gte,
                  last: filterVM.created_at.lte
              }
          }],
              submit = function submit() {
              error(false);
              listVM.firstPage(filterVM.parameters()).then(null, function (serverError) {
                  error(serverError.message);
              });
              return false;
          };

          return {
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              listVM: {
                  list: listVM,
                  error: error
              },
              data: {
                  label: 'Apoios'
              },
              submit: submit
          };
      },
      view: function view(ctrl) {
          return [m$1.component(adminFilter, {
              form: ctrl.filterVM.formDescriber,
              filterBuilder: ctrl.filterBuilder,
              submit: ctrl.submit
          }), m$1.component(adminList, {
              vm: ctrl.listVM,
              listItem: adminContributionItem,
              listDetail: adminContributionDetail
          })];
      }
  };

  var landingSignup = {
      controller: function controller(args) {
          var builder = args.builder,
              email = m$1.prop(''),
              error = m$1.prop(false),
              submit = function submit() {
              if (h.validateEmail(email())) {
                  return true;
              } else {
                  error(true);
                  return false;
              }
          };
          return {
              email: email,
              submit: submit,
              error: error
          };
      },
      view: function view(ctrl, args) {
          var errorClasses = !ctrl.error ? '.positive.error' : '';
          return m$1('form.w-form[id="email-form"][method="post"][action="' + args.builder.customAction + '"]', {
              onsubmit: ctrl.submit
          }, [m$1('.w-col.w-col-5', [m$1('input' + errorClasses + '.w-input.text-field.medium[name="EMAIL"][placeholder="Digite seu email"][type="text"]', {
              config: h.RDTracker('landing-flex'),
              onchange: m$1.withAttr('value', ctrl.email),
              value: ctrl.email()
          }), ctrl.error() ? m$1('span.fontsize-smaller.text-error', 'E-mail inválido') : '']), m$1('.w-col.w-col-3', [m$1('input.w-button.btn.btn-large[type="submit"][value="Cadastrar"]')])]);
      }
  };

  var error = m.prop('');
  var rewards = m.prop([]);
  var noReward = {
      id: -1,
      description: 'Obrigado. Eu só quero ajudar o projeto.',
      minimum_value: 10
  };
  var contributionValue = m.prop(noReward.minimum_value + ',00');
  var selectedReward = m.prop(noReward);
  var vm$3 = postgrest$1.filtersVM({
      project_id: 'eq'
  });
  var rewardsLoader = function rewardsLoader(project_id) {
      vm$3.project_id(project_id);

      return postgrest$1.loaderWithToken(models.rewardDetail.getPageOptions(vm$3.parameters()));
  };

  var fetchRewards = function fetchRewards(project_id) {
      return rewardsLoader(project_id).load().then(rewards);
  };

  var selectReward = function selectReward(reward) {
      return function () {
          if (rewardVM.selectedReward() !== reward) {
              rewardVM.selectedReward(reward);

              contributionValue(h.applyMonetaryMask(reward.minimum_value + ',00'));
          }
      };
  };

  var applyMask$1 = _.compose(contributionValue, h.applyMonetaryMask);

  var rewardVM = {
      error: error,
      rewards: rewards,
      applyMask: applyMask$1,
      noReward: noReward,
      fetchRewards: fetchRewards,
      selectReward: selectReward,
      selectedReward: selectedReward,
      contributionValue: contributionValue,
      rewardsLoader: rewardsLoader,
      getValue: contributionValue,
      setValue: contributionValue
  };

  var idVM$2 = h.idVM;
  var userDetails$1 = m$1.prop([]);
  var currentUser = m$1.prop();
  var createdVM = postgrest$1.filtersVM({ user_id: 'eq' });
  var getUserCreatedProjects = function getUserCreatedProjects(user_id) {
      createdVM.user_id(user_id).order({ project_id: 'desc' });

      models.projectDetail.pageSize(3);

      var lUserCreated = postgrest$1.loaderWithToken(models.project.getPageOptions(createdVM.parameters()));

      return lUserCreated.load();
  };

  var getUserContributedProjects = function getUserContributedProjects(user_id) {
      var contextVM = postgrest$1.filtersVM({
          user_id: 'eq',
          state: 'in'
      });

      contextVM.user_id(user_id).order({
          created_at: 'desc'
      }).state(['refunded', 'pending_refund', 'paid']);

      models.userContribution.pageSize(3);

      var lUserContributed = postgrest$1.loaderWithToken(models.userContribution.getPageOptions(contextVM.parameters()));

      return lUserContributed.load();
  };

  var fetchUser = function fetchUser(user_id) {
      var handlePromise = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
      var customProp = arguments.length <= 2 || arguments[2] === undefined ? currentUser : arguments[2];

      idVM$2.id(user_id);

      var lUser = postgrest$1.loaderWithToken(models.userDetail.getRowOptions(idVM$2.parameters()));

      return !handlePromise ? lUser.load() : lUser.load().then(_$1.compose(customProp, _$1.first));
  };

  var userVM = {
      getUserCreatedProjects: getUserCreatedProjects,
      getUserContributedProjects: getUserContributedProjects,
      currentUser: currentUser,
      fetchUser: fetchUser
  };

  var idVM$1 = h.idVM;
  var currentProject$1 = m$1.prop();
  var userDetails = m$1.prop();
  var vm$2 = postgrest$1.filtersVM({ project_id: 'eq' });
  var setProject$1 = function setProject(project_user_id) {
      return function (data) {
          currentProject$1(_$1.first(data));

          if (!project_user_id) {
              userVM.fetchUser(currentProject$1().user_id, true, userDetails);
          }

          return currentProject$1;
      };
  };

  var init = function init(project_id, project_user_id) {
      vm$2.project_id(project_id);

      var lProject = postgrest$1.loaderWithToken(models.projectDetail.getRowOptions(vm$2.parameters()));

      fetchParallelData(project_id, project_user_id);

      return lProject.load().then(setProject$1(project_user_id));
  };

  var resetData = function resetData() {
      userDetails({});
      rewardVM.rewards([]);
  };

  var fetchParallelData = function fetchParallelData(project_id, project_user_id) {
      if (project_user_id) {
          userVM.fetchUser(project_user_id, true, userDetails);
      }

      rewardVM.fetchRewards(project_id);
  };

  var getCurrentProject$1 = function getCurrentProject() {
      var root = document.getElementById('application'),
          data = root && root.getAttribute('data-parameters');

      if (data) {
          var _currentProject = currentProject$1(JSON.parse(data));

          var project_id = _currentProject.project_id;
          var project_user_id = _currentProject.project_user_id;


          m$1.redraw(true);

          fetchParallelData(project_id, project_user_id);

          return currentProject$1();
      } else {
          return false;
      }
  };

  var routeToProject = function routeToProject(project, ref) {
      return function () {
          currentProject$1(project);

          resetData();

          m$1.route(h.buildLink(project.permalink, ref), { project_id: project.project_id, project_user_id: project.project_user_id });

          return false;
      };
  };

  var setProjectPageTitle = function setProjectPageTitle() {
      if (currentProject$1()) {
          var projectName = currentProject$1().project_name || currentProject$1().name;

          return projectName ? h.setPageTitle(projectName) : Function.prototype;
      }
  };

  var projectVM = {
      userDetails: userDetails,
      getCurrentProject: getCurrentProject$1,
      currentProject: currentProject$1,
      rewardDetails: rewardVM.rewards,
      routeToProject: routeToProject,
      setProjectPageTitle: setProjectPageTitle,
      init: init
  };

  var projectFriends = {
      controller: function controller(args) {
          var project = args.project,
              friendsSample = m$1.prop([]),
              listVM = postgrest$1.paginationVM(models.contributor, 'user_id.desc', {
              'Prefer': 'count=exact'
          }),
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq',
              is_follow: 'eq'
          }).project_id(project.project_id).is_follow(true);

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters()).then(function () {
                  friendsSample(_$1.sample(listVM.collection(), 2));
              });
          }
          return {
              project: project,
              listVM: listVM,
              friendsSample: friendsSample
          };
      },
      view: function view(ctrl, args) {
          var project = ctrl.project,
              friendsCount = ctrl.listVM.collection().length;
          return m$1('.friend-backed-card', [m$1('.friend-facepile', [_$1.map(ctrl.friendsSample(), function (user) {
              var profile_img = _$1.isEmpty(user.data.profile_img_thumbnail) ? '/assets/catarse_bootstrap/user.jpg' : user.data.profile_img_thumbnail;
              return m$1('img.user-avatar[src=\'' + profile_img + '\']');
          })]), m$1('p.fontsize-smallest.friend-namepile.lineheight-tighter', [m$1('span.fontweight-semibold', _$1.map(ctrl.friendsSample(), function (user) {
              return user.data.name.split(' ')[0];
          }).join(friendsCount > 2 ? ', ' : ' e ')), friendsCount > 2 ? [' e ', m$1('span.fontweight-semibold', 'mais ' + (friendsCount - ctrl.friendsSample().length))] : '', friendsCount > 1 ? ' apoiaram' : ' apoiou'])]);
      }
  };

  var I18nScope$1 = _$1.partial(h.i18nScope, 'projects.card');
  var projectCard = {
      controller: function controller(args) {
          var project = args.project,
              progress = project.progress.toFixed(2),
              remainingTextObj = h.translatedTime(project.remaining_time),
              elapsedTextObj = h.translatedTime(project.elapsed_time),
              type = args.type || 'small';

          var css = function css() {
              var cssClasses = {
                  'small': {
                      wrapper: '.w-col.w-col-4',
                      innerWrapper: '.card-project.card.u-radius',
                      thumb: '.card-project-thumb',
                      descriptionWrapper: '',
                      description: '.card-project-description.alt',
                      title: '.fontweight-semibold.u-text-center-small-only.lineheight-tight.u-marginbottom-10.fontsize-base',
                      author: '.w-hidden-small.w-hidden-tiny.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.w-hidden-small.w-hidden-tiny.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden-small.w-hidden-tiny.card-project-author.altt'
                  },
                  'medium': {
                      wrapper: '.w-col.w-col-6',
                      innerWrapper: '.card-project.card.u-radius',
                      thumb: '.card-project-thumb.medium',
                      descriptionWrapper: '',
                      description: '.card-project-description.alt',
                      title: '.fontsize-large.fontweight-semibold.u-marginbottom-10',
                      author: '.w-hidden-small.w-hidden-tiny.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.w-hidden-small.w-hidden-tiny.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden-small.w-hidden-tiny.card-project-author.altt'
                  },
                  'big': {
                      wrapper: '.card.u-radius.card-project',
                      innerWrapper: '.w-row',
                      thumb: '.w-col.w-col-8.w-col-medium-6.card-project-thumb.big',
                      descriptionWrapper: '.w-col.w-col-4.w-col-medium-6',
                      description: '.card-project-description.big',
                      title: '.fontsize-large.fontweight-semibold.u-marginbottom-10',
                      author: '.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden'
                  }
              };

              return cssClasses[type];
          };

          var cardMeter = function cardMeter() {
              var failed = function failed() {
                  return project.state === 'failed' || project.state === 'waiting_funds' ? 'card-secondary' : '';
              };

              return '.card-project-meter.' + project.mode + '.' + project.state + '.' + progress + '.' + failed();
          };

          return {
              css: css,
              type: type,
              progress: progress,
              remainingTextObj: remainingTextObj,
              elapsedTextObj: elapsedTextObj,
              cardMeter: cardMeter
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1(ctrl.css().wrapper, [m$1(ctrl.css().innerWrapper, [m$1('a' + ctrl.css().thumb + '[href="/' + project.permalink + '"]', {
              onclick: projectVM.routeToProject(project, args.ref),
              style: {
                  'background-image': 'url(' + project.project_img + ')',
                  'display': 'block'
              }
          }), m$1(ctrl.css().descriptionWrapper, [m$1(ctrl.css().description, [m$1(ctrl.css().title, [m$1('a.link-hidden[href="/' + project.permalink + '"]', {
              onclick: projectVM.routeToProject(project, args.ref)
          }, project.project_name)]), m$1(ctrl.css().author, I18n$1.t('by', I18nScope$1()) + ' ' + project.owner_name), m$1(ctrl.css().headline, [m$1('a.link-hidden[href="/' + project.permalink + '"]', {
              onclick: projectVM.routeToProject(project, args.ref)
          }, project.headline)])]), m$1(ctrl.css().city, [m$1('.fontsize-smallest.fontcolor-secondary', [m$1('span.fa.fa-map-marker.fa-1', ' '), ' ' + (project.city_name ? project.city_name : '') + ', ' + (project.state_acronym ? project.state_acronym : '')])]), m$1(ctrl.cardMeter(), [_$1.contains(['successful', 'failed', 'waiting_funds'], project.state) ? m$1('div', project.state === 'successful' && ctrl.progress < 100 ? I18n$1.t('display_status.flex_successful', I18nScope$1()) : I18n$1.t('display_status.' + project.state, I18nScope$1())) : m$1('.meter', [m$1('.meter-fill', {
              style: {
                  width: (ctrl.progress > 100 ? 100 : ctrl.progress) + '%'
              }
          })])]), m$1('.card-project-stats', [m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4', [m$1('.fontsize-base.fontweight-semibold', Math.ceil(project.progress) + '%')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.u-text-center-small-only', [m$1('.fontsize-smaller.fontweight-semibold', 'R$ ' + h.formatNumber(project.pledged)), m$1('.fontsize-smallest.lineheight-tightest', 'Levantados')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.u-text-right', project.expires_at ? [m$1('.fontsize-smaller.fontweight-semibold', ctrl.remainingTextObj.total + ' ' + ctrl.remainingTextObj.unit), m$1('.fontsize-smallest.lineheight-tightest', ctrl.remainingTextObj.total > 1 ? 'Restantes' : 'Restante')] : [m$1('.fontsize-smallest.lineheight-tight', ['Iniciado há', m$1('br'), ctrl.elapsedTextObj.total + ' ' + ctrl.elapsedTextObj.unit])])])])]), args.showFriends && ctrl.type === 'big' ? m$1('.w-col.w-col-4.w-col-medium-6', [m$1.component(projectFriends, { project: project })]) : '']), args.showFriends && ctrl.type !== 'big' ? m$1.component(projectFriends, { project: project }) : '']);
      }
  };

  var projectRow = {
      view: function view(ctrl, args) {
          var collection = args.collection,
              title = args.title || collection.title,
              ref = args.ref,
              showFriends = args.showFriends,
              wrapper = args.wrapper || '.w-section.section.u-marginbottom-40';

          if (collection.loader() || collection.collection().length > 0) {
              return m$1(wrapper, [m$1('.w-container', [!_$1.isUndefined(collection.title) || !_$1.isUndefined(collection.hash) ? m$1('.w-row.u-marginbottom-30', [m$1(showFriends ? '.w-col.w-col-8.w-col-small-6.w-col-tiny-6' : '.w-col.w-col-10.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-large.lineheight-looser', title)]), m$1(showFriends ? '.w-col.w-col-4.w-col-small-6.w-col-tiny-6' : '.w-col.w-col-2.w-col-small-6.w-col-tiny-6', [m$1('.w-row', [showFriends ? m$1('.w-col.w-col-6', [m$1('a.btn.btn-no-border.btn-small.btn-terciary[href="/connect-facebook?ref=' + ref + '"]', "Encontrar amigos")]) : '', m$1(showFriends ? '.w-col.w-col-6' : '.w-col.w-col-12', m$1('a.btn.btn-small.btn-terciary[href="/explore?ref=' + ref + '&filter=' + collection.hash + '"]', {
                  config: m$1.route
              }, 'Ver todos'))])])]) : '', collection.loader() ? h.loader() : m$1('.w-row', _$1.map(collection.collection(), function (project) {
                  return m$1.component(projectCard, {
                      project: project,
                      ref: ref,
                      showFriends: showFriends
                  });
              }))])]);
          } else {
              return m$1('div');
          }
      }
  };

  var landingQA = {
      controller: function controller(args) {
          return {
              showAnswer: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('.card.qa-card.u-marginbottom-20.u-radius.btn-terciary', [m$1('.fontsize-base', {
              onclick: function onclick() {
                  ctrl.showAnswer.toggle();
                  args.onclick && args.onclick();
              }
          }, args.question), ctrl.showAnswer() ? m$1('p.u-margintop-20.fontsize-small', m$1.trust(args.answer)) : '']);
      }
  };

  var Flex = {
      controller: function controller() {
          var stats = m$1.prop([]),
              projects = m$1.prop([]),
              l = m$1.prop(),
              sample3 = _.partial(_.sample, _, 3),
              builder = {
              customAction: 'http://fazum.catarse.me/obrigado-landing-catarse-flex'
          },
              addDisqus = function addDisqus(el, isInitialized) {
              if (!isInitialized) {
                  h.discuss('https://catarse.me/flex', 'flex_page');
              }
          },
              flexVM = postgrest$1.filtersVM({
              mode: 'eq',
              state: 'eq',
              recommended: 'eq'
          }),
              statsLoader = postgrest$1.loaderWithToken(models.statistic.getRowOptions());

          flexVM.mode('flex').state('online').recommended(true);

          var projectsLoader = postgrest$1.loader(models.project.getPageOptions(flexVM.parameters()));

          statsLoader.load().then(stats);

          projectsLoader.load().then(_.compose(projects, sample3));

          return {
              addDisqus: addDisqus,
              builder: builder,
              statsLoader: statsLoader,
              stats: stats,
              projectsLoader: projectsLoader,
              projects: {
                  loader: projectsLoader,
                  collection: projects
              }
          };
      },
      view: function view(ctrl, args) {
          var stats = _.first(ctrl.stats());

          return [m$1('.w-section.hero-full.hero-zelo', [m$1('.w-container.u-text-center', [m$1('img.logo-flex-home[src=\'/assets/logo-flex.png\'][width=\'359\']'), m$1('.w-row', [m$1('.w-col.fontsize-large.u-marginbottom-60.w-col-push-2.w-col-8', 'Vamos construir uma nova modalidade de crowdfunding! Cadastre seu email e saiba como inscrever o seu projeto no flex!')]), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1.component(landingSignup, {
              builder: ctrl.builder
          }), m$1('.w-col.w-col-2')])])]), [m$1('.section', [m$1('.w-container', [m$1('.fontsize-largest.u-margintop-40.u-text-center', 'Pra quem será?'), m$1('.fontsize-base.u-text-center.u-marginbottom-60', 'Iniciaremos a fase de testes com categorias de projetos específicas'), m$1('div', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-6', [m$1('.u-text-center.u-marginbottom-20', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e393a01b66e250aca67cb_icon-zelo-com.png\'][width=\'210\']'), m$1('.fontsize-largest.lineheight-loose', 'Causas')]), m$1('p.fontsize-base', 'Flexibilidade para causas de impacto! Estaremos abertos a campanhas de organizações ou pessoas físicas para arrecadação de recursos para causas pessoais, projetos assistenciais, saúde, ajudas humanitárias, proteção aos animais, empreendedorismo socioambiental, ativismo ou qualquer coisa que una as pessoas para fazer o bem.')]), m$1('.w-col.w-col-6', [m$1('.u-text-center.u-marginbottom-20', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e3929a0daea230a5f12cd_icon-zelo-pessoal.png\'][width=\'210\']'), m$1('.fontsize-largest.lineheight-loose', 'Vaquinhas')]), m$1('p.fontsize-base', 'Campanhas simples que precisam de flexibilidade para arrecadar dinheiro com pessoas próximas. Estaremos abertos a uma variedade de campanhas pessoais que podem ir desde cobrir custos de estudos a ajudar quem precisa de tratamento médico. De juntar a grana para fazer aquela festa a comprar presentes para alguém com a ajuda da galera. ')])])])])]), m$1('.w-section.section.bg-greenlime.fontcolor-negative', [m$1('.w-container', [m$1('.fontsize-largest.u-margintop-40.u-marginbottom-60.u-text-center', 'Como funcionará?'), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39c578b284493e2a428a_zelo-money.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Fique com quanto arrecadar'), m$1('p.u-text-center.fontsize-base', 'O flex é para impulsionar campanhas onde todo dinheiro é bem vindo! Você fica com tudo que conseguir arrecadar.')]), m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39d37c013d4a3ee687d2_icon-reward.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Não precisa de recompensas'), m$1('p.u-text-center.fontsize-base', 'No flex oferecer recompensas é opcional. Você escolhe se oferecê-las faz sentido para o seu projeto e campanha.')])]), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39fb01b66e250aca67e3_icon-curad.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Você mesmo publica seu projeto'), m$1('p.u-text-center.fontsize-base', 'Todos os projetos inscritos no flex entram no ar. Agilidade e facilidade para você captar recursos através da internet.')]), m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39e77c013d4a3ee687d4_icon-time.png\'][width=\'180\']')]), m$1('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Encerre a campanha quando quiser'), m$1('p.u-text-center.fontsize-base', 'Não há limite de tempo de captação. Você escolhe  quando encerrar sua campanha e receber os valores arrecadados.')])])])]), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-editable.fontsize-larger.u-margintop-40.u-margin-bottom-40.u-text-center', 'Conheça alguns dos primeiros projetos flex'), ctrl.projectsLoader() ? h.loader() : m$1.component(projectRow, { collection: ctrl.projects, ref: 'ctrse_flex', wrapper: '.w-row.u-margintop-40' })])]), m$1('.w-section.divider'), m$1('.w-section.section', [m$1('.w-container', [m$1('.fontsize-larger.u-text-center.u-marginbottom-60.u-margintop-40', 'Dúvidas'), m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-6', [m$1.component(landingQA, {
              question: 'Quais são as taxas da modalidade flexível? ',
              answer: 'Como no Catarse, enviar um projeto não custa nada! A taxa cobrada no serviço Catarse flex é de 13% sobre o valor arrecadado.'
          }), m$1.component(landingQA, {
              question: 'De onde vem o dinheiro do meu projeto?',
              answer: 'Família, amigos, fãs e membros de comunidades que você faz parte são seus maiores colaboradores. São eles que irão divulgar sua campanha para as pessoas que eles conhecem, e assim o círculo de apoiadores vai aumentando e a sua campanha ganha força.'
          }), m$1.component(landingQA, {
              question: 'Qual a diferença entre o flexível e o "tudo ou nada"?',
              answer: 'Atualmente o Catarse utiliza apenas o modelo "tudo ou nada", onde você só fica com o dinheiro se bater a meta de arrecadação dentro do prazo da campanha. O modelo flexível é diferente pois permite que o realizador fique com o que arrecadar, independente de atingir ou não a meta do projeto no prazo da campanha. Não haverá limite de tempo para as campanhas. Nosso sistema flexível será algo novo em relação aos modelos que existem atualmente no mercado.'
          })]), m$1('.w-col.w-col-6', [m$1.component(landingQA, {
              question: 'Posso inscrever projetos para a modalidade flexível já?',
              answer: 'Sim. Cadastre seu email e saiba como inscrever o seu projeto no flex!'
          }), m$1.component(landingQA, {
              question: 'Por quê vocês querem fazer o Catarse flex?',
              answer: 'Acreditamos que o ambiente do crowdfunding brasileiro ainda tem espaço para muitas ações, testes e experimentações para entender de fato o que as pessoas precisam. Sonhamos com tornar o financiamento coletivo um hábito no Brasil. O Catarse flex é mais um passo nessa direção.'
          }), m$1.component(landingQA, {
              question: 'Quando vocês irão lançar o Catarse flex?',
              answer: 'Ainda não sabemos quando abriremos o flex para o público em geral, mas você pode cadastrar seu email nessa página e receber um material especial de como inscrever seu projeto.'
          })])])])]), m$1('.w-section.section-large.u-text-center.bg-purple', [m$1('.w-container.fontcolor-negative', [m$1('.fontsize-largest', 'Inscreva seu projeto!'), m$1('.fontsize-base.u-marginbottom-60', 'Cadastre seu email e saiba como inscrever o seu projeto no flex!'), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1.component(landingSignup, {
              builder: ctrl.builder
          }), m$1('.w-col.w-col-2')])])]), m$1('.w-section.section-one-column.bg-catarse-zelo.section-large[style="min-height: 50vh;"]', [m$1('.w-container.u-text-center', [m$1('.w-editable.u-marginbottom-40.fontsize-larger.lineheight-tight.fontcolor-negative', 'O flex é um experimento e iniciativa do Catarse, maior plataforma de crowdfunding do Brasil.'), m$1('.w-row.u-text-center', ctrl.statsLoader() ? h.loader() : [m$1('.w-col.w-col-4', [m$1('.fontsize-jumbo.text-success.lineheight-loose', h.formatNumber(stats.total_contributors, 0, 3)), m$1('p.start-stats.fontsize-base.fontcolor-negative', 'Pessoas ja apoiaram pelo menos 01 projeto no Catarse')]), m$1('.w-col.w-col-4', [m$1('.fontsize-jumbo.text-success.lineheight-loose', h.formatNumber(stats.total_projects_success, 0, 3)), m$1('p.start-stats.fontsize-base.fontcolor-negative', 'Projetos ja foram financiados no Catarse')]), m$1('.w-col.w-col-4', [m$1('.fontsize-jumbo.text-success.lineheight-loose', stats.total_contributed.toString().slice(0, 2) + ' milhões'), m$1('p.start-stats.fontsize-base.fontcolor-negative', 'Foram investidos em ideias publicadas no Catarse')])])])]), m$1('.w-section.section.bg-blue-one.fontcolor-negative', [m$1('.w-container', [m$1('.fontsize-large.u-text-center.u-marginbottom-20', 'Recomende o Catarse flex para amigos! '), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.w-row', [m$1('.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle', [m$1('div', [m$1('img.icon-share-mobile[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/53a3f66e05eb6144171d8edb_facebook-xxl.png\']'), m$1('a.w-button.btn.btn-large.btn-fb[href="http://www.facebook.com/sharer/sharer.php?u=https://www.catarse.me/flex?ref=facebook&title=' + encodeURIComponent('Conheça o novo Catarse Flex!') + '"][target="_blank"]', 'Compartilhar')])]), m$1('.w-col.w-col-6.w-col-small-6.w-col-tiny-6', [m$1('div', [m$1('img.icon-share-mobile[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/53a3f65105eb6144171d8eda_twitter-256.png\']'), m$1('a.w-button.btn.btn-large.btn-tweet[href="http://twitter.com/?status=' + encodeURIComponent('Vamos construir uma nova modalidade de crowdfunding para o Catarse! Junte-se a nós, inscreva seu email!') + 'https://www.catarse.me/flex?ref=twitter"][target="_blank"]', 'Tuitar')])])])]), m$1('.w-col.w-col-2')])])]), m$1('.w-section.section-large.bg-greenlime', [m$1('.w-container', [m$1('#participe-do-debate.u-text-center', { config: h.toAnchor() }, [m$1('h1.fontsize-largest.fontcolor-negative', 'Construa o flex conosco'), m$1('.fontsize-base.u-marginbottom-60.fontcolor-negative', 'Inicie uma conversa, pergunte, comente, critique e faça sugestões!')]), m$1('#disqus_thread.card.u-radius[style="min-height: 50vh;"]', {
              config: ctrl.addDisqus
          })])])]];
      }
  };

  var tooltip = {
      controller: function controller(args) {
          var parentHeight = m$1.prop(0),
              width = m$1.prop(args.width || 280),
              top = m$1.prop(0),
              left = m$1.prop(0),
              opacity = m$1.prop(0),
              parentOffset = m$1.prop({ top: 0, left: 0 }),
              tooltip = h.toggleProp(0, 1),
              toggle = function toggle() {
              tooltip.toggle();
              m$1.redraw();
          };

          var setParentPosition = function setParentPosition(el, isInitialized) {
              if (!isInitialized) {
                  parentOffset(h.cumulativeOffset(el));
              }
          },
              setPosition = function setPosition(el, isInitialized) {
              if (!isInitialized) {
                  var elTop = el.offsetHeight + el.offsetParent.offsetHeight;
                  var style = window.getComputedStyle(el);

                  if (window.innerWidth < el.offsetWidth + 2 * parseFloat(style.paddingLeft) + 30) {
                      //30 here is a safe margin
                      el.style.width = window.innerWidth - 30; //Adding the safe margin
                      left(-parentOffset().left + 15); //positioning center of window, considering margin
                  } else if (parentOffset().left + el.offsetWidth / 2 <= window.innerWidth && parentOffset().left - el.offsetWidth / 2 >= 0) {
                          left(-el.offsetWidth / 2); //Positioning to the center
                      } else if (parentOffset().left + el.offsetWidth / 2 > window.innerWidth) {
                              left(-el.offsetWidth + el.offsetParent.offsetWidth); //Positioning to the left
                          } else if (parentOffset().left - el.offsetWidth / 2 < 0) {
                                  left(-el.offsetParent.offsetWidth); //Positioning to the right
                              }
                  top(-elTop); //Setting top position
              }
          };

          return {
              width: width,
              top: top,
              left: left,
              opacity: opacity,
              tooltip: tooltip,
              toggle: toggle,
              setPosition: setPosition,
              setParentPosition: setParentPosition
          };
      },
      view: function view(ctrl, args) {
          var width = ctrl.width();
          return m$1(args.el, {
              onclick: ctrl.toggle,
              config: ctrl.setParentPosition,
              style: { cursor: 'pointer' }
          }, ctrl.tooltip() ? [m$1('.tooltip.dark[style="width: ' + width + 'px; top: ' + ctrl.top() + 'px; left: ' + ctrl.left() + 'px;"]', {
              config: ctrl.setPosition
          }, [m$1('.fontsize-smallest', args.text)])] : '');
      }
  };

  var I18nScope$3 = _$1.partial(h.i18nScope, 'projects.dashboard_nav');
  var linksScope = _$1.partial(h.i18nScope, 'projects.dashboard_nav_links');

  var projectDashboardMenu = {
      controller: function controller(args) {
          var body = document.getElementsByTagName('body')[0],
              editLinksToggle = h.toggleProp(true, false),
              showPublish = h.toggleProp(true, false),
              bodyToggleForNav = h.toggleProp('body-project open', 'body-project closed');

          var projectThumb = function projectThumb(project) {
              if (_$1.isEmpty(project.large_image)) {
                  if (_$1.isEmpty(project.thumb_image)) {
                      return '/assets/thumb-project.png';
                  } else {
                      return project.thumb_image;
                  }
              } else {
                  return project.large_image;
              }
          };

          if (args.project().is_published) {
              editLinksToggle.toggle(false);
          }

          if (args.hidePublish) {
              showPublish.toggle(false);
          }

          return {
              body: body,
              editLinksToggle: editLinksToggle,
              showPublish: showPublish,
              bodyToggleForNav: bodyToggleForNav,
              projectThumb: projectThumb
          };
      },
      view: function view(ctrl, args) {
          var project = args.project(),
              projectRoute = '/projects/' + project.project_id,
              editRoute = projectRoute + '/edit',
              editLinkClass = 'dashboard-nav-link-left ' + (project.is_published ? 'indent' : '');
          var optionalOpt = m$1('span.fontsize-smallest.fontcolor-secondary', ' (opcional)');

          ctrl.body.className = ctrl.bodyToggleForNav();

          return m$1('#project-nav', [m$1('.project-nav-wrapper', [m$1('nav.w-section.dashboard-nav.side', [m$1('a#dashboard_preview_link.w-inline-block.dashboard-project-name[href="' + (project.is_published ? '/' + project.permalink : editRoute + '#preview') + '"]', [m$1('img.thumb-project-dashboard[src="' + (project ? ctrl.projectThumb(project) : '/assets/thumb-project.png') + '"][width="114"]'), m$1('.fontcolor-negative.lineheight-tight.fontsize-small', project.name), m$1('img.u-margintop-10[src="/assets/catarse_bootstrap/badge-' + project.mode + '-h.png"][width=80]')]), m$1('#info-links', [m$1('a#dashboard_home_link[class="dashboard-nav-link-left ' + (h.locationActionMatch('insights') ? 'selected' : '') + '"][href="' + projectRoute + '/insights"]', [m$1('span.fa.fa-bar-chart.fa-lg.fa-fw'), I18n$1.t('start_tab', I18nScope$3())]), project.is_published ? [m$1('a#dashboard_reports_link.dashboard-nav-link-left[href="' + projectRoute + '/contributions_report"]', [m$1('span.fa.fa.fa-table.fa-lg.fa-fw'), I18n$1.t('reports_tab', I18nScope$3())]), m$1('a#dashboard_reports_link.dashboard-nav-link-left.u-marginbottom-30[href="' + editRoute + '#posts' + '"]', [m$1('span.fa.fa-bullhorn.fa-fw.fa-lg'), I18n$1.t('posts_tab', I18nScope$3()), m$1('span.badge', project.posts_count)])] : '']), m$1('.edit-project-div', [!project.is_published ? '' : m$1('button#toggle-edit-menu.dashboard-nav-link-left', {
              onclick: ctrl.editLinksToggle.toggle
          }, [m$1('span.fa.fa-pencil.fa-fw.fa-lg'), I18n$1.t('edit_project', I18nScope$3())]), ctrl.editLinksToggle() ? m$1('#edit-menu-items', [m$1('#dashboard-links', [!project.is_published || project.is_admin_role ? [m$1('a#basics_link[class="' + editLinkClass + '"][href="' + editRoute + '#basics' + '"]', I18n$1.t(project.mode + '.basics_tab', linksScope())), m$1('a#goal_link[class="' + editLinkClass + '"][href="' + editRoute + '#goal' + '"]', I18n$1.t(project.mode + '.goal_tab', linksScope()))] : '', m$1('a#description_link[class="' + editLinkClass + '"][href="' + editRoute + '#description' + '"]', I18n$1.t(project.mode + '.description_tab', linksScope())), m$1('a#video_link[class="' + editLinkClass + '"][href="' + editRoute + '#video' + '"]', ['Vídeo', m$1('span.fontsize-smallest.fontcolor-secondary', ' (opcional)')]), m$1('a#budget_link[class="' + editLinkClass + '"][href="' + editRoute + '#budget' + '"]', I18n$1.t(project.mode + '.budget_tab', linksScope())), m$1('a#card_link[class="' + editLinkClass + '"][href="' + editRoute + '#card' + '"]', I18n$1.t(project.mode + '.card_tab', linksScope())), m$1('a#dashboard_reward_link[class="' + editLinkClass + '"][href="' + editRoute + '#reward' + '"]', ['Recompensas', optionalOpt]), m$1('a#dashboard_user_about_link[class="' + editLinkClass + '"][href="' + editRoute + '#user_about' + '"]', I18n$1.t(project.mode + '.about_you_tab', linksScope())), project.is_published || project.state === 'draft' || project.is_admin_role ? [m$1('a#dashboard_user_settings_link[class="' + editLinkClass + '"][href="' + editRoute + '#user_settings' + '"]', I18n$1.t(project.mode + '.account_tab', linksScope()))] : '', !project.is_published ? [m$1('a#dashboard_preview_link[class="' + editLinkClass + '"][href="' + editRoute + '#preview' + '"]', [m$1('span.fa.fa-fw.fa-eye.fa-lg'), I18n$1.t(project.mode + '.preview_tab', linksScope())])] : ''])]) : '', !project.is_published && ctrl.showPublish() ? [m$1('.btn-send-draft-fixed', project.mode === 'aon' ? [project.state === 'draft' ? m$1('a.btn.btn-medium[href="/projects/' + project.project_id + '/validate_publish"]', [I18n$1.t('publish', I18nScope$3()), m$1.trust('&nbsp;&nbsp;'), m$1('span.fa.fa-chevron-right')]) : ''] : [project.state === 'draft' ? m$1('a.btn.btn-medium[href="/flexible_projects/' + project.project_id + '/validate_publish"]', [I18n$1.t('publish', I18nScope$3()), m$1.trust('&nbsp;&nbsp;'), m$1('span.fa.fa-chevron-right')]) : ''])] : [project.mode === 'flex' && project.is_published ? [m$1('.btn-send-draft-fixed', _$1.isNull(project.expires_at) ? m$1('a.w-button.btn.btn-medium.btn-secondary-dark[href="/projects/' + project.project_id + '/edit#announce_expiration"]', I18n$1.t('announce_expiration', I18nScope$3())) : '')] : '']])])]), m$1('a.btn-dashboard href="javascript:void(0);"', {
              onclick: ctrl.bodyToggleForNav.toggle
          }, [m$1('span.fa.fa-bars.fa-lg')])]);
      }
  };

  var modalBox = {
      view: function view(ctrl, args) {
          return m$1('.modal-backdrop', [m$1('.modal-dialog-outer', [m$1('.modal-dialog-inner.modal-dialog-small', [m$1('a.w-inline-block.modal-close.fa.fa-close.fa-lg[href="javascript:void(0);"]', {
              onclick: args.displayModal.toggle
          }), m$1.component(args.content[0], args.content[1])])])]);
      }
  };

  var adminProjectDetailsCard = {
      controller: function controller(args) {
          var project = args.resource,
              isFinalLap = function isFinalLap() {
              // @TODO: use 8 days because timezone on js
              return !_.isNull(project.expires_at) && moment$1().add(8, 'days') >= moment$1(project.zone_expires_at);
          };
          return {
              project: project,
              remainingTextObj: h.translatedTime(project.remaining_time),
              elapsedTextObj: h.translatedTime(project.elapsed_time),
              isFinalLap: isFinalLap
          };
      },
      view: function view(ctrl) {
          var project = ctrl.project,
              progress = project.progress.toFixed(2),
              statusTextObj = h.projectStateTextClass(project.state),
              remainingTextObj = ctrl.remainingTextObj,
              elapsedTextObj = ctrl.elapsedTextObj;

          return m$1('.project-details-card.card.u-radius.card-terciary.u-marginbottom-20', [m$1('div', [m$1('.fontsize-small.fontweight-semibold', [m$1('span.fontcolor-secondary', 'Status:'), ' ', m$1('span', {
              class: statusTextObj.cssClass
          }, ctrl.isFinalLap() && project.open_for_contributions ? 'RETA FINAL' : statusTextObj.text), ' ']), project.is_published ? [m$1('.meter.u-margintop-20.u-marginbottom-10', [m$1('.meter-fill', {
              style: {
                  width: (progress > 100 ? 100 : progress) + '%'
              }
          })]), m$1('.w-row', [m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'financiado'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', progress + '%')]), m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'levantados'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', ['R$ ' + h.formatNumber(project.pledged, 2)])]), m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'apoios'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', project.total_contributions)]), m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [_.isNull(project.expires_at) ? [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'iniciado há'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', elapsedTextObj.total + ' ' + elapsedTextObj.unit)] : [m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'restam'), m$1('.fontweight-semibold.fontsize-large.lineheight-tight', remainingTextObj.total + ' ' + remainingTextObj.unit)]])])] : ''])]);
      }
  };

  var onlineSuccessModalContent = {
      view: function view(ctrl, args) {
          return m$1('.modal-dialog-content.u-text-center', [m$1('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m$1('p.fontsize-larger.lineheight-tight', 'Sua campanha está no ar!!! Parabéns por esse primeiro grande passo. Boa sorte nessa jornada ;)')]);
      }
  };

  var projectDataStats = {
      view: function view(ctrl, args) {
          var project = args.project(),
              progress = project.progress.toFixed(2),
              statusTextObj = h.projectStateTextClass(project.state),
              remainingTextObj = h.translatedTime(project.remaining_time),
              elapsedTextObj = h.translatedTime(project.elapsed_time);

          return m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-3.u-text-center-small-only', [m$1('.fontsize-small.fontweight-semibold.u-marginbottom-20', [m$1('span.fontcolor-secondary', 'Status: '), m$1('span', { class: statusTextObj.cssClass }, statusTextObj.text)])]), m$1('.w-col.w-col-9', [m$1('.w-row.u-text-center', [m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', progress + '%'), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small.u-marginbottom-10', 'financiado')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', 'R$ ' + h.formatNumber(project.pledged, 2)), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small.u-marginbottom-10', 'levantados')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', project.total_contributions), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'apoios')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [_$1.isNull(project.expires_at) ? [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', elapsedTextObj.total + ' ' + elapsedTextObj.unit), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'iniciado há')] : [m$1('.fontweight-semibold.fontsize-large.lineheight-tight', '' + remainingTextObj.total), m$1('.fontcolor-secondary.lineheight-tighter.fontsize-small', remainingTextObj.unit + ' ' + (remainingTextObj.total > 0 ? 'restantes' : 'restante'))]])])])]);
      }
  };

  var deleteProjectModalContent = {
    controller: function controller(args) {
      var l = m$1.prop(false),
          deleteSuccess = m$1.prop(false),
          confirmed = m$1.prop(true),
          check = m$1.prop('');

      var deleteProject = function deleteProject() {
        if (check() === 'deletar-rascunho') {
          var loaderOpts = models.deleteProject.postOptions({
            _project_id: args.project.project_id
          });
          l = postgrest$1.loaderWithToken(loaderOpts);
          l.load().then(deleteSuccess(true));
        } else {
          confirmed(false);
        }
        return false;
      };

      return {
        deleteProject: deleteProject,
        confirmed: confirmed,
        deleteSuccess: deleteSuccess,
        check: check
      };
    },
    view: function view(ctrl, args) {
      var project = args.project;
      return m$1('div', ctrl.deleteSuccess() ? '' : m$1('.modal-dialog-header', m$1('.fontsize-large.u-text-center', ['Confirmar ', m$1('span.fa.fa-trash', '')])), m$1('form.modal-dialog-content', { onsubmit: ctrl.deleteProject }, ctrl.deleteSuccess() ? [m$1('.fontsize-base.u-margintop-30', 'Projeto deletado com sucesso. Clique no link abaixo para voltar a página inicial.'), m$1('a.btn.btn-inactive.btn-large.u-margintop-30[href=\'/pt/explore\']', { onclick: function onclick() {
          return m$1.route('/explore');
        } }, 'Voltar')] : [m$1('.fontsize-base.u-marginbottom-60', ['O projeto será deletado permanentemente e todos os dados que você preencheu na edição do rascunho não poderão ser recuperados.']), m$1('.fontsize-base.u-marginbottom-10', ['Confirme escrevendo ', 'no campo abaixo ', m$1('span.fontweight-semibold.text-error', 'deletar-rascunho')]), m$1('.w-form', [m$1('div', m$1('input.positive.text-field.u-marginbottom-40.w-input[maxlength=\'256\'][type=\'text\']', { class: ctrl.confirmed() ? false : 'error', placeholder: 'deletar-rascunho', onchange: m$1.withAttr('value', ctrl.check) }))]), m$1('div', m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.u-text-center.w-col.w-col-6', [m$1('input.btn.btn-inactive.btn-large.u-marginbottom-20[type=\'submit\'][value=\'Deletar para sempre\']'), m$1('a.fontsize-small.link-hidden-light[href=\'#\']', { onclick: args.displayDeleteModal.toggle }, 'Cancelar')]), m$1('.w-col.w-col-3')]))]));
    }
  };

  var projectDeleteButton = {
    view: function view(ctrl, args) {
      return m$1('div', [args.displayDeleteModal() ? m$1.component(modalBox, {
        displayModal: args.displayDeleteModal,
        content: [deleteProjectModalContent, { displayDeleteModal: args.displayDeleteModal, project: args.project }]
      }) : '', m$1('.before-footer', m$1('.w-container', m$1('a.btn.btn-inline.btn-no-border.btn-small.btn-terciary.u-marginbottom-20.u-right.w-button[href=\'javascript:void(0);\']', { onclick: args.displayDeleteModal.toggle, style: { 'transition': 'all 0.5s ease 0s' } }, [m$1.trust('&nbsp;'), 'Deletar projeto ', m$1('span.fa.fa-trash', '')])))]);
    }
  };

  var projectDataChart = {
      controller: function controller(args) {
          var resource = _$1.first(args.collection()),
              source = !_$1.isUndefined(resource) ? resource.source : [],
              mountDataset = function mountDataset() {
              return [{
                  fillColor: 'rgba(126,194,69,0.2)',
                  strokeColor: 'rgba(126,194,69,1)',
                  pointColor: 'rgba(126,194,69,1)',
                  pointStrokeColor: '#fff',
                  pointHighlightFill: '#fff',
                  pointHighlightStroke: 'rgba(220,220,220,1)',
                  data: _$1.map(source, function (item) {
                      return item[args.dataKey];
                  })
              }];
          },
              renderChart = function renderChart(element, isInitialized) {
              if (!isInitialized) {
                  var ctx = element.getContext('2d');

                  new Chart(ctx).Line({
                      labels: _$1.map(source, function (item) {
                          return args.xAxis(item);
                      }),
                      datasets: mountDataset()
                  });
              }
          };

          return {
              renderChart: renderChart,
              source: source
          };
      },
      view: function view(ctrl, args) {
          return m$1('.card.u-radius.medium.u-marginbottom-30', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', args.label), m$1('.w-row', [m$1('.w-col.w-col-12.overflow-auto', [!_$1.isEmpty(ctrl.source) ? m$1('canvas[id="chart"][width="860"][height="300"]', {
              config: ctrl.renderChart
          }) : m$1('.w-col.w-col-8.w-col-push-2', m$1('p.fontsize-base', args.emptyState))])])]);
      }
  };

  var projectDataTable = {
      controller: function controller(args) {
          var table = m$1.prop(args.table),
              sortIndex = m$1.prop(-1);

          var comparator = function comparator(a, b) {
              var idx = sortIndex(),

              //Check if a custom comparator is used => Read component description
              x = _$1.isArray(a[idx]) && a[idx].length > 1 ? a[idx][0] : a[idx],
                  y = _$1.isArray(b[idx]) && b[idx].length > 1 ? b[idx][0] : b[idx];

              if (x < y) {
                  return -1;
              }
              if (y < x) {
                  return 1;
              }
              return 0;
          };

          var sortTable = function sortTable(idx) {
              var header = _$1.first(table()),
                  body = void 0;
              if (sortIndex() === idx) {
                  body = _$1.rest(table()).reverse();
              } else {
                  sortIndex(idx);
                  body = _$1.rest(table()).sort(comparator);
              }

              table(_$1.union([header], body));
          };

          sortTable(Math.abs(args.defaultSortIndex) || 0);

          if (args.defaultSortIndex < 0) {
              sortTable(Math.abs(args.defaultSortIndex) || 0);
          }

          return {
              table: table,
              sortTable: sortTable
          };
      },
      view: function view(ctrl, args) {
          var header = _$1.first(ctrl.table()),
              body = _$1.rest(ctrl.table());
          return m$1('.table-outer.u-marginbottom-60', [m$1('.w-row.table-row.fontweight-semibold.fontsize-smaller.header', _$1.map(header, function (heading, idx) {
              var sort = function sort() {
                  return ctrl.sortTable(idx);
              };
              return m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.table-col', [m$1('a.link-hidden[href="javascript:void(0);"]', {
                  onclick: sort
              }, [heading + ' ', m$1('span.fa.fa-sort')])]);
          })), m$1('.table-inner.fontsize-small', _$1.map(body, function (rowData) {
              return m$1('.w-row.table-row', _$1.map(rowData, function (row) {
                  //Check if a custom comparator is used => Read component description
                  row = _$1.isArray(row) && row.length > 1 ? row[1] : row;
                  return m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.table-col', [m$1('div', row)]);
              }));
          }))]);
      }
  };

  var projectReminderCount = {
      view: function view(ctrl, args) {
          var project = args.resource;
          return m$1('#project-reminder-count.card.u-radius.u-text-center.medium.u-marginbottom-80', [m$1('.fontsize-large.fontweight-semibold', 'Total de pessoas que clicaram no botão Lembrar-me'), m$1('.fontsize-smaller.u-marginbottom-30', 'Um lembrete por email é enviado 48 horas antes do término da sua campanha'), m$1('.fontsize-jumbo', project.reminder_count)]);
      }
  };

  var dashboardInfo = {
      controller: function controller(args) {
          var toRedraw = args.dataToRedraw || {},
              listenToReplace = function listenToReplace(element, isInitialized, context) {

              if (isInitialized) return;

              _$1.map(element.children, function (item) {
                  var toR = toRedraw[item.getAttribute('id')];

                  if (toR) {
                      item[toR.action] = toR.actionSource;
                  }
              });
          };

          return {
              listenToReplace: listenToReplace
          };
      },
      view: function view(ctrl, args) {
          var content = args.content;

          return m$1('.w-container', [m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6.w-col-push-3', [m$1('.u-text-center', [m$1('img.u-marginbottom-20', { src: content.icon, width: 94 }), m$1('.fontsize-large.fontweight-semibold.u-marginbottom-20', content.title), m$1('.fontsize-base.u-marginbottom-30', { config: ctrl.listenToReplace }, m$1.trust(content.text)), content.cta ? m$1('a.btn.btn-large.btn-inline', { href: content.href, onclick: args.nextStage }, content.cta) : ''])])])]);
      }
  };

  var I18nScope$6 = _$1.partial(h.i18nScope, 'projects.successful_onboard.confirm_account.refuse');

  var projectSuccessfulOnboardConfirmAccountError = {
      controller: function controller(args) {
          var errorReasonM = m$1.prop(''),
              error = m$1.prop(false);

          var addErrorReason = function addErrorReason() {
              if (errorReasonM().trim() === '') {
                  return error(true);
              } else {
                  return args.addErrorReason(errorReasonM).call();
              }
          };

          return {
              addErrorReason: addErrorReason,
              errorReasonM: errorReasonM,
              error: error
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-row.bank-transfer-answer', [m$1('.w-col.w-col-6.w-col-push-3', [m$1('.w-form.bank-transfer-problem.card.u-radius', [m$1('form#successful-onboard-error', [m$1('a.w-inline-block.u-right.btn.btn-terciary.btn-no-border.btn-inline.fa.fa-close', { href: '#confirm_account', onclick: args.changeToAction('start') }), m$1('label.field-label.fontweight-semibold.u-marginbottom-20', I18n$1.t('title', I18nScope$6())), m$1('textarea.w-input.text-field', {
              placeholder: I18n$1.t('placeholder', I18nScope$6()),
              class: ctrl.error() ? 'error' : '',
              onfocus: function onfocus() {
                  return ctrl.error(false);
              },
              onchange: m$1.withAttr('value', ctrl.errorReasonM)
          }), ctrl.error() ? m$1('.w-row', [m$1('.w-col.w-col-6.w-col-push-3.u-text-center', [m$1('span.fontsize-smallest.text-error', 'Campo Obrigatório')])]) : '', m$1('.w-row', [m$1('.w-col.w-col-4.w-col-push-4', [m$1('a.w-button.btn.btn-medium', {
              href: '#confirm_account_refuse',
              onclick: ctrl.addErrorReason
          }, I18n$1.t('cta', I18nScope$6()))])])])])])]);
      }
  };

  var I18nScope$7 = _$1.partial(h.i18nScope, 'projects.successful_onboard.confirm_account');

  var projectSuccessfulOnboardConfirmAccountAccept = {
      view: function view(ctrl, args) {
          return m$1('.w-row.bank-transfer-answer', [m$1('.w-col.w-col-6.w-col-push-3', [m$1('.w-form.bank-transfer-confirm.card.u-radius', [m$1('form#successful-onboard-form', [m$1('a.w-inline-block.u-right.btn.btn-terciary.btn-no-border.btn-inline.fa.fa-close', { href: '#confirm_account', onclick: args.changeToAction('start') }), m$1('label.field-label.fontweight-semibold.u-marginbottom-20', I18n$1.t('accept.title', I18nScope$7())), m$1('.fontsize-smaller.u-marginbottom-30', I18n$1.t('accept.info', I18nScope$7())), m$1('.w-row', [m$1('.w-col.w-col-4.w-col-push-4', [!args.acceptAccountLoader() ? m$1('a.w-button.btn.btn-medium', {
              href: '#accept_account',
              onclick: args.acceptAccount
          }, I18n$1.t('accept.cta', I18nScope$7())) : h.loader()])])])])])]);
      }
  };

  var I18nScope$5 = _$1.partial(h.i18nScope, 'projects.successful_onboard.confirm_account');

  var projectSuccessfulOnboardConfirmAccount = {
      controller: function controller(args) {
          var actionStages = {
              'error': projectSuccessfulOnboardConfirmAccountError,
              'accept': projectSuccessfulOnboardConfirmAccountAccept
          },
              currentStage = m$1.prop('start'),
              actionStage = function actionStage() {
              return actionStages[currentStage()];
          },
              changeToAction = function changeToAction(stage) {
              console.log('\n======\nChanging action to ', stage);
              return function () {
                  currentStage(stage);

                  return false;
              };
          };

          return {
              changeToAction: changeToAction,
              actionStage: actionStage,
              currentStage: currentStage
          };
      },
      view: function view(ctrl, args) {
          var projectAccount = args.projectAccount,
              actionStage = ctrl.actionStage,
              currentStage = ctrl.currentStage,
              personKind = projectAccount.owner_document.length > 14 ? 'juridical' : 'natural',
              juridicalPerson = projectAccount.owner_document.length > 14;

          return m$1('.w-container.u-marginbottom-40', [m$1('.u-text-center', [m$1('.fontsize-large.fontweight-semibold.u-marginbottom-30', I18n$1.t('title', I18nScope$5()))]), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-6', [m$1('.fontsize-base.u-marginbottom-30.card.card-terciary', [m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.label', I18nScope$5())), I18n$1.t('person.' + personKind + '.label', I18nScope$5())]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.' + personKind + '.name', I18nScope$5())), projectAccount.owner_name]), projectAccount.state_inscription && juridicalPerson ? m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.state_inscription', I18nScope$5())), projectAccount.state_inscription]) : '', m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.' + personKind + '.document', I18nScope$5())), projectAccount.owner_document]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.bank.name', I18nScope$5())), projectAccount.bank_name]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.bank.agency', I18nScope$5())), '' + projectAccount.agency + (_$1.isEmpty(projectAccount.agency_digit) ? '' : '-' + projectAccount.agency_digit)]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.bank.account', I18nScope$5())), projectAccount.account + '-' + projectAccount.account_digit])])]), m$1('.w-col.w-col-6', [m$1('.fontsize-base.u-marginbottom-30.card.card-terciary', [m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.address', I18nScope$5())), projectAccount.address_street + ', ' + projectAccount.address_number + ' ' + (!_$1.isNull(projectAccount.address_complement) ? ', ' + projectAccount.address_complement : '')]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.neighbourhood', I18nScope$5())), projectAccount.address_neighbourhood]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.city', I18nScope$5())), projectAccount.address_city]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.state', I18nScope$5())), projectAccount.address_state]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('person.zip_code', I18nScope$5())), projectAccount.address_zip_code])])])]), currentStage() === 'start' ? m$1('#confirmation-dialog.w-row.bank-transfer-answer', [m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6.w-hidden-small.w-hidden-tiny'), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('a#confirm-account.btn.btn-large', { href: '#confirm_account', onclick: ctrl.changeToAction('accept') }, 'Sim')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6', [m$1('a#refuse-account.btn.btn-large.btn-terciary', { href: '#error_account', onclick: ctrl.changeToAction('error') }, 'Não')]), m$1('.w-col.w-col-3.w-col-small-6.w-col-tiny-6.w-hidden-small.w-hidden-tiny')]) : m$1.component(actionStage(), {
              projectAccount: projectAccount,
              changeToAction: ctrl.changeToAction,
              addErrorReason: args.addErrorReason,
              acceptAccount: args.acceptAccount,
              acceptAccountLoader: args.acceptAccountLoader
          })]);
      }
  };

  var successfulProjectTaxModal = {
      view: function view(ctrl, args) {
          var pt = args.projectTransfer;

          return m$1('div', [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', 'Extrato do projeto')]), m$1('.modal-dialog-content', [m$1('p.fontsize-small.u-marginbottom-40', ['Confira o extrato do seu projeto, já incluindo as taxas e retenções. Se você tiver dúvidas sobre como esse cálculo é feito, ', m$1('a.alt-link[href="http://suporte.catarse.me/hc/pt-br/articles/202037493-FINANCIADO-Como-ser%C3%A1-feito-o-repasse-do-dinheiro-"][target="__blank"]', 'acesse aqui'), '.']), m$1('div', [m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-4', [m$1('.text-success', '+ R$ ' + h.formatNumber(pt.pledged, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Arrecadação total (' + pt.total_contributions + ' apoios)')])]), pt.irrf_tax > 0 ? m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-4', [m$1('.text-success', '+ R$ ' + h.formatNumber(pt.irrf_tax, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Retenção IRF (Imposto de Renda na Fonte)')])]) : '', m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-4', [m$1('.text-error', '- R$ ' + h.formatNumber(pt.catarse_fee, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Taxa do Catarse e meio de pagamento (' + h.formatNumber(pt.service_fee * 100, 2) + '%) ')])]), m$1('.divider.u-marginbottom-10'), m$1('.w-row.fontsize-base.fontweight-semibold', [m$1('.w-col.w-col-4', [m$1('div', 'R$ ' + h.formatNumber(pt.total_amount, 2))]), m$1('.w-col.w-col-8', [m$1('div', 'Total a ser transferido')])])])])]);
      }
  };

  var I18nScope$8 = _$1.partial(h.i18nScope, 'projects.successful_onboard');

  var parseAccountData = function parseAccountData(account, transfer) {
      return {
          transfer_limit_date: h.momentify(account.transfer_limit_date),
          total_amount: h.formatNumber(transfer.total_amount, 2),
          bank_name: account.bank_name,
          agency: '' + account.agency + (account.agency_digit ? '-' + account.agency_digit : ''),
          account: '' + account.account + (account.account_digit ? '-' + account.account_digit : ''),
          user_email: account.user_email
      };
  };

  var insightVM = {
      content: function content(state, data) {
          var translations = I18n$1.translations[I18n$1.currentLocale()].projects.successful_onboard[state],
              translationContext = state === 'finished' ? {} : parseAccountData(_$1.first(data.account()), _$1.first(data.transfer()));
          var contentObj = {};

          _$1.map(translations, function (translation, translationKey) {
              contentObj = _$1.extend({}, contentObj, babelHelpers.defineProperty({}, translationKey, I18n$1.t(state + '.' + translationKey, I18nScope$8(translationContext))));
          });
          return contentObj;
      }
  };

  var I18nScope$4 = _.partial(h.i18nScope, 'projects.successful_onboard');

  var projectSuccessfulOnboard = {
      controller: function controller(args) {
          var projectIdVM = postgrest$1.filtersVM({ project_id: 'eq' }),
              projectAccounts = m$1.prop([]),
              projectTransfers = m$1.prop([]),
              showTaxModal = h.toggleProp(false, true),
              onboardComponents = {
              'start': dashboardInfo,
              'confirm_account': projectSuccessfulOnboardConfirmAccount,
              'error_account': dashboardInfo,
              'pending_transfer': dashboardInfo,
              'finished': dashboardInfo
          },
              currentState = m$1.prop('start'),
              currentComponent = function currentComponent() {
              return onboardComponents[currentState()];
          },
              content = function content() {
              return insightVM.content(currentState(), {
                  account: projectAccounts,
                  transfer: projectTransfers,
                  showTaxModal: showTaxModal
              });
          },
              loader = postgrest$1.loaderWithToken,
              declineAccountLoader = function declineAccountLoader(errorMsg) {
              var pa = _.first(projectAccounts());

              return postgrest$1.loaderWithToken(models.projectAccountError.postOptions({
                  project_id: args.project().project_id,
                  reason: errorMsg
              }));
          },
              acceptAccountLoader = postgrest$1.loaderWithToken(models.projectAccount.postOptions({
              project_id: args.project().project_id
          }));

          projectIdVM.project_id(args.project().project_id);

          var lProjectAccount = loader(models.projectAccount.getRowOptions(projectIdVM.parameters()));
          lProjectAccount.load().then(function (data) {
              projectAccounts(data);

              loadCurrentStage();
          });

          var lProjectTransfer = loader(models.projectTransfer.getRowOptions(projectIdVM.parameters()));
          lProjectTransfer.load().then(projectTransfers);

          var setStage = function setStage(state) {
              currentState(state);

              return currentComponent;
          },
              nextStage = function nextStage() {
              var keys = _.keys(onboardComponents),
                  nextKey = keys[_.indexOf(keys, currentState()) + 1];

              currentState(nextKey);

              return currentComponent;
          },
              loadCurrentStage = function loadCurrentStage() {
              if (!lProjectAccount()) {
                  var pa = _.first(projectAccounts());

                  if (_.isNull(pa)) {
                      return setStage('finished')();
                  }

                  if (_.isNull(pa.error_reason) && _.isNull(pa.transfer_state)) {
                      return setStage('start')();
                  } else if (!_.isNull(pa.error_reason)) {
                      return setStage('error_account')();
                  } else if (!_.isNull(pa.transfer_state)) {
                      if (pa.transfer_state == 'transferred') {
                          return setStage('finished')();
                      } else {
                          return setStage('pending_transfer')();
                      }
                  }
              }

              return false;
          },


          // TODO: need to add an error validation to not null
          addErrorReason = function addErrorReason(errorProp) {
              return function () {
                  var fn = declineAccountLoader(errorProp());
                  fn.load().then(function () {
                      setStage('error_account')();
                  });

                  return false;
              };
          },
              acceptAccount = function acceptAccount() {
              acceptAccountLoader.load().then(function () {
                  setStage('pending_transfer')();
              });

              return false;
          };

          return {
              projectAccounts: projectAccounts,
              projectTransfers: projectTransfers,
              lProjectAccount: lProjectAccount,
              lProjectTransfer: lProjectTransfer,
              setStage: setStage,
              nextStage: nextStage,
              currentComponent: currentComponent,
              addErrorReason: addErrorReason,
              acceptAccount: acceptAccount,
              acceptAccountLoader: acceptAccountLoader,
              content: content,
              declineAccountLoader: declineAccountLoader,
              loadCurrentStage: loadCurrentStage,
              showTaxModal: showTaxModal
          };
      },
      view: function view(ctrl, args) {
          var projectAccount = _.first(ctrl.projectAccounts()),
              projectTransfer = _.first(ctrl.projectTransfers()),
              lpa = ctrl.lProjectAccount,
              lpt = ctrl.lProjectTransfer;

          return m$1('.w-section.section', [ctrl.showTaxModal() ? m$1.component(modalBox, {
              displayModal: ctrl.showTaxModal,
              content: [successfulProjectTaxModal, {
                  projectTransfer: projectTransfer
              }]
          }) : '', !lpa() && !lpt() ? m$1.component(ctrl.currentComponent(), {
              projectTransfer: projectTransfer,
              projectAccount: projectAccount,
              setStage: ctrl.setStage,
              addErrorReason: ctrl.addErrorReason,
              acceptAccount: ctrl.acceptAccount,
              acceptAccountLoader: ctrl.acceptAccountLoader,
              nextStage: ctrl.nextStage,
              content: ctrl.content(),
              dataToRedraw: {
                  'tax_link': {
                      action: 'onclick',
                      actionSource: function actionSource() {
                          ctrl.showTaxModal.toggle();
                          m$1.redraw();
                      }
                  }
              }
          }) : h.loader()]);
      }
  };

  var facebookButton = {
      controller: function controller(args) {
          var share = function share() {
              if (FB) {
                  FB.ui({
                      method: args.messenger ? 'send' : 'share',
                      link: args.url,
                      href: args.url
                  });
              }
          };

          return {
              share: share
          };
      },
      view: function view(ctrl, args) {
          var buttonCss = function buttonCss() {
              if (args.mobile) {
                  return 'w-hidden-main w-hidden-medium u-marginbottom-20 btn btn-medium btn-fb';
              } else if (args.big) {
                  return 'btn btn-fb btn-large u-marginbottom-20 w-button';
              } else if (args.medium) {
                  return 'btn ' + (args.messenger ? 'btn-messenger' : 'btn-fb') + ' btn-medium u-marginbottom-20 w-button';
              } else {
                  return 'btn btn-inline btn-medium btn-terciary u-marginright-20';
              }
          };

          return m$1('button', {
              class: buttonCss(),
              onclick: ctrl.share
          }, [m$1('span.fa', {
              class: args.messenger ? 'fa-comment' : 'fa-facebook'
          }), args.messenger ? ' Messenger' : ' Facebook']);
      }
  };

  var popNotification = {
      controller: function controller() {
          return {
              displayNotification: h.toggleProp(true, false)
          };
      },
      view: function view(ctrl, args) {
          return ctrl.displayNotification() ? m$1('.flash.w-clearfix.card.card-notification.u-radius.zindex-20', [m$1('img.icon-close[src="/assets/catarse_bootstrap/x.png"][width="12"][alt="fechar"]', {
              onclick: ctrl.displayNotification.toggle
          }), m$1('.fontsize-small', args.message)]) : m$1('span');
      }
  };

  var copyTextInput = {
      controller: function controller(args) {
          var showSuccess = m$1.prop(false);

          var select = function select(el) {
              var range = void 0,
                  selection = void 0;

              if (document.body.createTextRange) {
                  range = document.body.createTextRange();
                  range.moveToElementText(el);
                  range.select();
              } else if (window.getSelection) {
                  selection = window.getSelection();
                  range = document.createRange();
                  range.selectNodeContents(el);
                  selection.removeAllRanges();
                  selection.addRange(range);
              }
          };

          var setClickHandler = function setClickHandler(el, isInitialized) {
              var copy = void 0;
              if (!isInitialized) {
                  (function () {
                      var textarea = document.getElementById('copy-textarea');
                      el.onclick = function () {
                          select(textarea);
                          copy = document.execCommand('copy');
                          if (copy) {
                              showSuccess(true);
                              m$1.redraw();
                          } else {
                              textarea.blur();
                          }
                      };
                  })();
              }
          };

          return {
              setClickHandler: setClickHandler,
              showSuccess: showSuccess
          };
      },
      view: function view(ctrl, args) {
          return m$1('#clipboard.w-row', [m$1('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', m$1('textarea#copy-textarea.positive.text-field.w-input', {
              style: 'margin-bottom:0;'
          }, args.value)), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', m$1('.btn.btn-medium.btn-no-border.btn-terciary.fa.fa-clipboard.w-button', {
              config: ctrl.setClickHandler
          })), ctrl.showSuccess() ? m$1.component(popNotification, { message: 'Link copiado' }) : '']);
      }
  };

  var inviteEmailsFromImport = {
      controller: function controller(args) {
          var checkedList = m$1.prop([]),
              loading = m$1.prop(false),
              filterTerm = m$1.prop(''),
              filteredData = m$1.prop(args.dataEmails()),
              filtering = m$1.prop(false),
              onCheckGenerator = function onCheckGenerator(item) {
              return function () {
                  var matchEmail = function matchEmail(resource) {
                      return resource.email === item.email;
                  };
                  if (_$1.find(checkedList(), matchEmail)) {
                      checkedList(_$1.reject(checkedList(), matchEmail));
                  } else {
                      checkedList().push(item);
                  }
              };
          },
              submitInvites = function submitInvites() {
              loading(true);

              if (!_$1.isEmpty(checkedList)) {
                  postgrest$1.loaderWithToken(models.inviteProjectEmail.postOptions({
                      data: {
                          project_id: args.project.project_id,
                          emails: _$1.map(checkedList(), function (x) {
                              return x.email;
                          })
                      }
                  })).load().then(function (data) {
                      args.modalToggle.toggle();
                      loading(false);
                      args.showSuccess(true);
                  });
              }
          },
              search = function search() {
              if (!filtering()) {
                  filtering(true);
                  var searchFilter = void 0;
                  var matchSearch = function matchSearch(item) {
                      var pattern = '\\b' + _$1.escape(filterTerm()),
                          regex = new RegExp(pattern, 'gim');

                      return !_$1.isNull(item.email.match(regex)) || !_$1.isNull(item.name.match(regex));
                  };

                  if (!_$1.isEmpty(filterTerm()) || !_$1.isUndefined(filterTerm())) {
                      searchFilter = _$1.filter(args.dataEmails(), matchSearch);
                  }

                  filtering(false);
                  return searchFilter || args.dataEmails;
              }
          };

          return {
              onCheckGenerator: onCheckGenerator,
              submitInvites: submitInvites,
              checkedList: checkedList,
              filterTerm: filterTerm,
              loading: loading,
              search: search,
              filteredData: filteredData,
              filtering: filtering
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1('div', [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', 'Convide seus amigos')]), m$1('.modal-dialog-content', !args.loadingContacts() && !ctrl.loading() ? [m$1('.filter-area', [m$1('.w-row.u-margintop-20', [m$1('.w-sub-col.w-col.w-col-12', [m$1('form[action="javascript:void(0);"]', [m$1('input.w-input.text-field[type="text"][placeholder="Busque pelo nome ou email."]', {
              onkeyup: m$1.withAttr('value', ctrl.filterTerm),
              onchange: function onchange(e) {
                  e.preventDefault();
              }
          })])])])]), m$1('.emails-area.u-margintop-40', { style: { height: '250px', 'overflow-x': 'auto' } }, ctrl.filtering() ? h.loader() : _$1.map(ctrl.search(), function (item, i) {
              return m$1('.w-row.u-marginbottom-20', [m$1('.w-sub-col.w-col.w-col-1', [m$1('input[type=\'checkbox\'][name=\'check_' + i + '\']', { onchange: ctrl.onCheckGenerator(item) })]), m$1('.w-sub-col.w-col.w-col-4', [m$1('label.fontsize-small[for=\'check_' + i + '\']', item.name)]), m$1('.w-sub-col.w-col.w-col-7', [m$1('label.fontsize-small.fontweight-semibold[for=\'check_' + i + '\']', item.email)])]);
          }))] : h.loader()), m$1('.modal-dialog-nav-bottom.u-text-center', [!args.loadingContacts() && !ctrl.loading() && !ctrl.filtering() ? m$1('.u-text-center.u-margintop-20', [m$1('a.btn.btn-inline.btn-medium.w-button[href="javascript:void(0)"]', {
              onclick: ctrl.submitInvites
          }, 'Enviar ' + ctrl.checkedList().length + ' convites')]) : !ctrl.loading() ? 'carregando contatos...' : 'enviando convites...'])]);
      }
  };

  var projectGoogleContactImport = {
      controller: function controller(args) {
          var clientId = document.getElementById('google_oauth_client'),
              modalToggle = h.toggleProp(false, true),
              feedPageUrl = 'https://www.google.com/m8/feeds/contacts/default/full?alt=json&max-results=1000',
              dataEmails = m$1.prop([]),
              loadingContacts = m$1.prop(false),
              fetch = function fetch(token, pageUrl) {
              if (!modalToggle()) {
                  modalToggle.toggle();
                  loadingContacts(true);
                  m$1.redraw();
              }

              m$1.request({
                  url: pageUrl || feedPageUrl,
                  dataType: 'jsonp',
                  data: token
              }).then(function (data) {
                  var nextLink = _$1.find(data.feed.link, function (l) {
                      return l.rel === 'next';
                  }),
                      reducedList = _$1.reduce(data.feed.entry, function (memo, entry) {
                      if ("gd$email" in entry && entry.gd$email.length > 0) {
                          (function () {
                              var gemails = entry.gd$email,
                                  name = entry.title.$t;

                              _$1.each(gemails, function (email) {
                                  memo.push({
                                      email: email.address,
                                      name: name
                                  });
                              });
                          })();
                      }

                      return memo;
                  }, []);

                  dataEmails(dataEmails().concat(reducedList));

                  if (_$1.isUndefined(nextLink)) {
                      loadingContacts(false);
                      m$1.redraw();
                  } else {
                      fetch(token, nextLink.href);
                  }
              });
          },
              auth = function auth() {
              var config = {
                  client_id: clientId.getAttribute('data-token'),
                  'scope': 'https://www.googleapis.com/auth/contacts.readonly'
              };
              gapi.auth.authorize(config, function () {
                  fetch(gapi.auth.getToken());
              });
          };

          return {
              auth: auth,
              modalToggle: modalToggle,
              loadingContacts: loadingContacts,
              dataEmails: dataEmails
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1('#google_contact_wrapper', [ctrl.modalToggle() ? m$1.component(modalBox, {
              displayModal: ctrl.modalToggle,
              content: [inviteEmailsFromImport, {
                  project: args.project,
                  dataEmails: ctrl.dataEmails,
                  loadingContacts: ctrl.loadingContacts,
                  modalToggle: ctrl.modalToggle,
                  showSuccess: args.showSuccess
              }]
          }) : '', m$1("a.btn.btn-inline.btn-no-border.btn-terciary.w-inline-block[href='javascript:void(0);']", {
              onclick: ctrl.auth
          }, [m$1("img[src='http://uploads.webflow.com/57ba58b4846cc19e60acdd5b/57bc339f77f314e23b94d44d_gmail-icon.png'][width='25']"), m$1("._w-inline-block.fontsize-smallest", "Contatos do gmail")])]);
      }
  };

  var projectEmailInvite = {
      controller: function controller(args) {
          var emailText = m$1.prop(''),
              loading = m$1.prop(false),
              project = args.project,
              showSuccess = m$1.prop(false),
              submitInvite = function submitInvite() {
              if (_$1.isEmpty(emailText()) || loading() === true) {} else {
                  loading(true);
                  var emailList = _$1.reduce(emailText().split('\n'), function (memo, text) {
                      if (h.validateEmail(text)) {
                          memo.push(text);
                      }
                      return memo;
                  }, []);

                  if (!_$1.isEmpty(emailList)) {
                      showSuccess(false);
                      postgrest$1.loaderWithToken(models.inviteProjectEmail.postOptions({
                          data: {
                              project_id: project.project_id,
                              emails: emailList
                          }
                      })).load().then(function (data) {
                          emailText('');
                          loading(false);
                          showSuccess(true);
                      });
                  } else {
                      loading(false);
                  }
              }
          };

          return {
              emailText: emailText,
              submitInvite: submitInvite,
              loading: loading,
              showSuccess: showSuccess
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1('.email-invite-box', [ctrl.showSuccess() ? m$1.component(popNotification, { message: 'Convites enviados.' }) : '', ctrl.loading() ? h.loader() : [m$1('.w-form', [m$1('form', [m$1(".u-marginbottom-10", [m$1.component(projectGoogleContactImport, {
              project: project,
              showSuccess: ctrl.showSuccess
          })
          //    m("a.btn.btn-inline.btn-no-border.btn-terciary.w-inline-block[href='#']", [
          //        m("._w-inline-block.fontsize-smallest", "Upload CSV")
          //    ])
          ]), m$1('textarea.positive.text-field.w-input[maxlength="5000"][placeholder="Adicione um ou mais emails, separados por linha."]', {
              onchange: m$1.withAttr('value', ctrl.emailText),
              value: ctrl.emailText()
          })])]), m$1('.u-text-center', [m$1('a.btn.btn-inline.btn-medium.w-button[href="javascript:void(0)"]', {
              onclick: ctrl.submitInvite
          }, 'Enviar convites')])]]);
      }
  };

  var projectInviteCard = {
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1(".card.card-secondary.u-marginbottom-20.u-radius.w-clearfix", [m$1(".fontsize-base.fontweight-semibold.u-marginbottom-30.u-text-center", "Convide seus amigos para apoiar sua campanha"), m$1('.w-row', [m$1(".invite-friends-back-col-1", [m$1.component(facebookButton, { url: h.projectFullPermalink(project) + '?ref=facebook&utm_source=facebook.com&utm_medium=social&utm_campaign=project_share_insights', medium: true }), m$1.component(facebookButton, { messenger: true, url: h.projectFullPermalink(project) + '?ref=facebook&utm_source=facebook.com&utm_medium=messenger&utm_campaign=project_share_insights', medium: true }), m$1(".w-form", [m$1("form[data-name='Email Form 2'][id='email-form-2'][name='email-form-2']", [m$1(".fontcolor-secondary.fontsize-smallest", "Link direto"), m$1.component(copyTextInput, { value: h.projectFullPermalink(project) + '?ref=project_link' })])])]), m$1(".invite-friends-back-col-2", m$1.component(projectEmailInvite, { project: project }))])]);
      }
  };

  var I18nScope$2 = _$1.partial(h.i18nScope, 'projects.insights');

  var insights = {
      controller: function controller(args) {
          var filtersVM = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              displayModal = h.toggleProp(false, true),
              displayDeleteModal = h.toggleProp(false, true),
              projectDetails = m$1.prop([]),
              contributionsPerDay = m$1.prop([]),
              contributionsPerLocation = m$1.prop([]),
              loader = postgrest$1.loaderWithToken;

          if (h.paramByName('online_success') === 'true') {
              displayModal.toggle();
          }

          filtersVM.project_id(args.root.getAttribute('data-id'));

          var l = loader(models.projectDetail.getRowOptions(filtersVM.parameters()));
          l.load().then(projectDetails);

          var lContributionsPerDay = loader(models.projectContributionsPerDay.getRowOptions(filtersVM.parameters()));
          lContributionsPerDay.load().then(contributionsPerDay);

          var contributionsPerLocationTable = [['Estado', 'Apoios', 'R$ apoiados (% do total)']];
          var buildPerLocationTable = function buildPerLocationTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  var column = [];

                  column.push(contribution.state_acronym || 'Outro/other');
                  column.push(contribution.total_contributions);
                  column.push([contribution.total_contributed, [//Adding row with custom comparator => read project-data-table description
                  m$1('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_contributed, 2, 3), m$1('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerLocationTable.push(column);
              }) : [];
          };

          var lContributionsPerLocation = loader(models.projectContributionsPerLocation.getRowOptions(filtersVM.parameters()));
          lContributionsPerLocation.load().then(buildPerLocationTable);

          var contributionsPerRefTable = [[I18n$1.t('ref_table.header.origin', I18nScope$2()), I18n$1.t('ref_table.header.contributions', I18nScope$2()), I18n$1.t('ref_table.header.amount', I18nScope$2())]];
          var buildPerRefTable = function buildPerRefTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  //Test if the string matches a word starting with ctrse_ and followed by any non-digit group of characters
                  //This allows to remove any versioned referral (i.e.: ctrse_newsletter_123) while still getting ctrse_test_ref
                  var re = /(ctrse_[\D]*)/,
                      test = re.exec(contribution.referral_link);

                  var column = [];

                  if (test) {
                      //Removes last underscore if it exists
                      contribution.referral_link = test[0].substr(-1) === '_' ? test[0].substr(0, test[0].length - 1) : test[0];
                  }

                  column.push(contribution.referral_link ? I18n$1.t('referral.' + contribution.referral_link, I18nScope$2({ defaultValue: contribution.referral_link })) : I18n$1.t('referral.others', I18nScope$2()));
                  column.push(contribution.total);
                  column.push([contribution.total_amount, [m$1('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_amount, 2, 3), m$1('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerRefTable.push(column);
              }) : [];
          };

          var lContributionsPerRef = loader(models.projectContributionsPerRef.getRowOptions(filtersVM.parameters()));
          lContributionsPerRef.load().then(buildPerRefTable);

          return {
              l: l,
              lContributionsPerRef: lContributionsPerRef,
              lContributionsPerLocation: lContributionsPerLocation,
              lContributionsPerDay: lContributionsPerDay,
              displayModal: displayModal,
              displayDeleteModal: displayDeleteModal,
              filtersVM: filtersVM,
              projectDetails: projectDetails,
              contributionsPerDay: contributionsPerDay,
              contributionsPerLocationTable: contributionsPerLocationTable,
              contributionsPerRefTable: contributionsPerRefTable
          };
      },
      view: function view(ctrl) {
          var project = _$1.first(ctrl.projectDetails()) || {
              user: {
                  name: 'Realizador'
              }
          },
              buildTooltip = function buildTooltip(el) {
              return m$1.component(tooltip, {
                  el: el,
                  text: ['Informa de onde vieram os apoios de seu projeto. Saiba como usar essa tabela e planejar melhor suas ações de comunicação ', m$1('a[href="' + I18n$1.t('ref_table.help_url', I18nScope$2()) + '"][target=\'_blank\']', 'aqui.')],
                  width: 380
              });
          };

          if (!ctrl.l()) {
              project.user.name = project.user.name || 'Realizador';
          }

          return m$1('.project-insights', !ctrl.l() ? [project.is_owner_or_admin ? m$1.component(projectDashboardMenu, {
              project: m$1.prop(project)
          }) : '', ctrl.displayModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: [onlineSuccessModalContent]
          }) : '', m$1('.w-container', project.state === 'successful' ? m$1.component(projectSuccessfulOnboard, { project: m$1.prop(project) }) : [m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-8.w-col-push-2', [m$1('.fontweight-semibold.fontsize-larger.lineheight-looser.u-marginbottom-10.u-text-center.dashboard-header', I18n$1.t('campaign_title', I18nScope$2())), project.state === 'online' ? m$1.component(projectInviteCard, { project: project }) : '', project.state === 'draft' ? m$1.component(adminProjectDetailsCard, {
              resource: project
          }) : '', m$1('p.' + project.state + '-project-text.fontsize-small.lineheight-loose', [project.mode === 'flex' && _$1.isNull(project.expires_at) && project.state !== 'draft' ? m$1('span', [I18n$1.t('finish_explanation', I18nScope$2()), m$1('a.alt-link[href="http://suporte.catarse.me/hc/pt-br/articles/208141033-Como-definir-o-prazo-no-Catarse-flex-"][target="_blank"]', I18n$1.t('know_more', I18nScope$2()))]) : m$1.trust(I18n$1.t('campaign.' + project.mode + '.' + project.state, I18nScope$2({ username: project.user.name, expires_at: h.momentify(project.zone_expires_at), sent_to_analysis_at: h.momentify(project.sent_to_analysis_at) })))])])])]), project.state === 'draft' ? m$1.component(projectDeleteButton, { displayDeleteModal: ctrl.displayDeleteModal, project: project }) : '', project.is_published ? [m$1('.divider'), m$1('.w-section.section-one-column.section.bg-gray.before-footer', [m$1('.w-container', [m$1.component(projectDataStats, { project: m$1.prop(project) }), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m$1.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: I18n$1.t('amount_per_day_label', I18nScope$2()),
              dataKey: 'total_amount',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              },
              emptyState: I18n$1.t('amount_per_day_empty', I18nScope$2())
          }) : h.loader()])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m$1.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: I18n$1.t('contributions_per_day_label', I18nScope$2()),
              dataKey: 'total',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              },
              emptyState: I18n$1.t('contributions_per_day_empty', I18nScope$2())
          }) : h.loader()])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', [m$1('.project-contributions-per-ref', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', [I18n$1.t('ref_origin_title', I18nScope$2()), h.newFeatureBadge(), buildTooltip('span.fontsize-smallest.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary')]), !ctrl.lContributionsPerRef() ? !_$1.isEmpty(_$1.rest(ctrl.contributionsPerRefTable)) ? m$1.component(projectDataTable, {
              table: ctrl.contributionsPerRefTable,
              defaultSortIndex: -2
          }) : m$1('.card.u-radius.medium.u-marginbottom-60', m$1('.w-row.u-text-center.u-margintop-40.u-marginbottom-40', m$1('.w-col.w-col-8.w-col-push-2', m$1('p.fontsize-base', I18n$1.t('contributions_per_ref_empty', I18nScope$2()))))) : h.loader()])])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', [m$1('.project-contributions-per-ref', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', I18n$1.t('location_origin_title', I18nScope$2())), !ctrl.lContributionsPerLocation() ? !_$1.isEmpty(_$1.rest(ctrl.contributionsPerLocationTable)) ? m$1.component(projectDataTable, {
              table: ctrl.contributionsPerLocationTable,
              defaultSortIndex: -2
          }) : m$1('.card.u-radius.medium.u-marginbottom-60', m$1('.w-row.u-text-center.u-margintop-40.u-marginbottom-40', m$1('.w-col.w-col-8.w-col-push-2', m$1('p.fontsize-base', I18n$1.t('contributions_per_location_empty', I18nScope$2()))))) : h.loader()])])]), m$1('.w-row', [m$1('.w-col.w-col-12.u-text-center', [m$1.component(projectReminderCount, {
              resource: project
          })])])])])] : ''] : h.loader());
      }
  };

  var I18nScope$9 = _.partial(h.i18nScope, 'pages.jobs');

  var jobs = {
      view: function view(ctrl, args) {
          return [m$1('.w-section.hero-jobs.hero-medium', [m$1('.w-containe.u-text-center', [m$1('img.icon-hero[src="/assets/logo-white.png"]'), m$1('.u-text-center.u-marginbottom-20.fontsize-largest', I18n$1.t('title', I18nScope$9()))])]), m$1('.w-section.section', [m$1('.w-container.u-margintop-40', [m$1('.w-row', [m$1('.w-col.w-col-8.w-col-push-2.u-text-center', [m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('info', I18nScope$9())), m$1('a[href="/projects/new"].w-button.btn.btn-large.btn-inline', I18n$1.t('cta', I18nScope$9()))])])])])];
      }
  };

  var liveStatistics = {
      controller: function controller() {
          var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

          var pageStatistics = m$1.prop([]),
              notificationData = m$1.prop({});

          models.statistic.getRow().then(pageStatistics);
          // args.socket is a socket provided by socket.io
          // can see there https://github.com/catarse/catarse-live/blob/master/public/index.js#L8
          if (args.socket && _$1.isFunction(args.socket.on)) {
              args.socket.on('new_paid_contributions', function (msg) {
                  notificationData(JSON.parse(msg.payload));
                  models.statistic.getRow().then(pageStatistics);
                  m$1.redraw();
              });
          }

          return {
              pageStatistics: pageStatistics,
              notificationData: notificationData
          };
      },
      view: function view(ctrl) {
          var data = ctrl.notificationData();

          return m$1('.w-section.bg-stats.section.min-height-100', [m$1('.w-container.u-text-center', _$1.map(ctrl.pageStatistics(), function (stat) {
              return [m$1('img.u-marginbottom-60[src="https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/55ada5dd11b36a52616d97df_symbol-catarse.png"]'), m$1('.fontcolor-negative.u-marginbottom-40', [m$1('.fontsize-megajumbo.fontweight-semibold', 'R$ ' + h.formatNumber(stat.total_contributed, 2, 3)), m$1('.fontsize-large', 'Doados para projetos publicados por aqui')]), m$1('.fontcolor-negative.u-marginbottom-60', [m$1('.fontsize-megajumbo.fontweight-semibold', stat.total_contributors), m$1('.fontsize-large', 'Pessoas já apoiaram pelo menos 1 projeto no Catarse')])];
          })), !_$1.isEmpty(data) ? m$1('.w-container', [m$1('div', [m$1('.card.u-radius.u-marginbottom-60.medium', [m$1('.w-row', [m$1('.w-col.w-col-4', [m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4', [m$1('img.thumb.u-round[src="' + h.useAvatarOrDefault(data.user_image) + '"]')]), m$1('.w-col.w-col-8.w-col-small-8', [m$1('.fontsize-large.lineheight-tight', data.user_name)])])]), m$1('.w-col.w-col-4.u-text-center.fontsize-base.u-margintop-20', [m$1('div', 'acabou de apoiar o')]), m$1('.w-col.w-col-4', [m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4', [m$1('img.thumb-project.u-radius[src="' + data.project_image + '"][width="75"]')]), m$1('.w-col.w-col-8.w-col-small-8', [m$1('.fontsize-large.lineheight-tight', data.project_name)])])])])])])]) : '', m$1('.u-text-center.fontsize-large.u-marginbottom-10.fontcolor-negative', [m$1('a.link-hidden.fontcolor-negative[href="https://github.com/catarse"][target="_blank"]', [m$1('span.fa.fa-github', '.'), ' Open Source com orgulho! '])])]);
      }
  };

  var projectContributionReportHeader = {
      view: function view(ctrl, args) {
          var filterBuilder = args.filterBuilder,
              paymentStateFilter = _$1.findWhere(filterBuilder, { label: 'payment_state' }),
              rewardFilter = _$1.findWhere(filterBuilder, { label: 'reward_filter' }),
              mainFilter = _$1.findWhere(filterBuilder, { component: filterMain }),
              project_id = args.filterVM.project_id();

          rewardFilter.data.options = args.mapRewardsToOptions();

          return m$1('.w-section.dashboard-header', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [m$1('.fontsize-larger.u-text-center.fontweight-semibold.lineheight-looser.u-marginbottom-30', 'Relatório de apoios')]), m$1('.w-col.w-col-3')]), m$1('.w-form', [m$1('form', { onsubmit: args.submit }, [m$1('.w-row', [m$1('.w-col.w-col-5', [m$1('.w-row', [m$1.component(paymentStateFilter.component, paymentStateFilter.data), m$1.component(rewardFilter.component, rewardFilter.data)])]), m$1('.w-col.w-col-7.u-margintop-20', [m$1('.w-row', [m$1('.w-col.w-col-8._w-sub-col', [m$1.component(mainFilter.component, mainFilter.data)]), m$1('.w-col.w-col-4.w-clearfix.w-hidden-small.w-hidden-tiny', [m$1('a.alt-link.u-right.fontsize-small.lineheight-looser[href="/projects/' + project_id + '/download_reports"]', [m$1('span.fa.fa-download', '.'), ' Baixar relatórios'])])])])])])])])]);
      }
  };

  var projectContributionReportContentCard = {
      controller: function controller(args) {
          var project = args.project(),
              stateClass = function stateClass(state) {
              var classes = {
                  online: {
                      'paid': 'text-success.fa-circle',
                      'refunded': 'text-error.fa-circle',
                      'pending_refund': 'text-error.fa-circle',
                      'pending': 'text-waiting.fa-circle',
                      'refused': 'text-error.fa-circle'
                  },
                  failed: {
                      'paid': 'text-error.fa-circle-o',
                      'refunded': 'text-refunded.fa-circle',
                      'pending_refund': 'text-refunded.fa-circle-o',
                      'pending': 'text-refunded',
                      'refused': 'text-refunded'
                  },
                  waiting_funds: {
                      'paid': 'text-success.fa-circle',
                      'refunded': 'text-error.fa-circle',
                      'pending_refund': 'text-error.fa-circle',
                      'pending': 'text-waiting.fa-circle',
                      'refused': 'text-error.fa-circle'
                  },
                  successful: {
                      'paid': 'text-success.fa-circle',
                      'refunded': 'text-error.fa-circle',
                      'pending_refund': 'text-error.fa-circle',
                      'pending': 'text-waiting.fa-circle',
                      'refused': 'text-error.fa-circle'
                  }
              };

              return classes[project.state][state];
          };

          return {
              stateClass: stateClass
          };
      },
      view: function view(ctrl, args) {
          var contribution = args.contribution(),
              profile_img = _$1.isEmpty(contribution.profile_img_thumbnail) ? '/assets/catarse_bootstrap/user.jpg' : contribution.profile_img_thumbnail,
              reward = contribution.reward || { minimum_value: 0, description: 'Nenhuma recompensa selecionada' };
          return m$1('.w-clearfix.card', [m$1('.w-row', [m$1('.w-col.w-col-1.w-col-tiny-1', [m$1('img.user-avatar.u-marginbottom-10[src=\'' + profile_img + '\']')]), m$1('.w-col.w-col-11.w-col-tiny-11', [m$1('.w-row', [m$1('.w-col.w-col-3', [m$1('.fontcolor-secondary.fontsize-mini.fontweight-semibold', h.momentify(contribution.created_at, 'DD/MM/YYYY, HH:mm')), m$1('.fontweight-semibold.fontsize-smaller.lineheight-tighter', contribution.user_name), m$1('.fontsize-smallest.lineheight-looser', [contribution.has_another ? [m$1('a.link-hidden-light.badge.badge-light', '+1 apoio ')] : '', contribution.anonymous ? m$1('span.fa.fa-eye-slash.fontcolor-secondary', m$1('span.fontcolor-secondary[style="font-size:11px;"]', ' Apoio não-público')) : '']), m$1('.fontsize-smallest.lineheight-looser', contribution.email)]), m$1('.w-col.w-col-3', [m$1('.lineheight-tighter', [m$1('span.fa.fontsize-smallest.' + ctrl.stateClass(contribution.state)), '   ', m$1('span.fontsize-large', 'R$ ' + h.formatNumber(contribution.value, 2, 3))])]), m$1('.w-col.w-col-3.w-hidden-small.w-hidden-tiny', [m$1('.fontsize-smallest.fontweight-semibold', 'Recompensa: R$ ' + h.formatNumber(reward.minimum_value, 2, 3)), m$1('.fontsize-smallest', reward.description.substring(0, 80) + '...')]) /*,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          m(".w-col.w-col-2.w-hidden-small.w-hidden-tiny.u-text-center", [
m(".fontsize-smallest.fontcolor-secondary", "Enviei!"),
m(".fontsize-smallest.u-marginbottom-20.lineheight-loose", [
m("a.checkbox-big[href='#']", ".")


m(".w-col.w-col-2", [
m(".fontsize-smallest", [
m("a.link-hidden[href='#']", "Questionário")

m("span.fontweight-semibold.text-waiting", "enviado")

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           m(".fontsize-smallest.fontcolor-terciary", "em 29/10/2015")

          ])])])]);
      }
  };

  var projectContributionReportContent = {
      view: function view(ctrl, args) {
          var list = args.list;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-9.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-base', [m$1('span.fontweight-semibold', list.isLoading() ? '' : list.total()), ' apoios'])])]),
          //m(".fontsize-large.fontweight-semibold", "R$ 12.000,00")

          /*
           TODO: ordering filter template
          m(".w-col.w-col-3.w-col-small-6.w-col-tiny-6", [
              m(".w-form", [
                  m("form[data-name='Email Form 5'][id='email-form-5'][name='email-form-5']", [
                      m(".fontsize-smallest.fontcolor-secondary", "Ordenar por:"),
                      m("select.w-select.text-field.positive.fontsize-smallest[id='field-9'][name='field-9']", [
                          m("option[value='']", "Data (recentes para antigos)"),
                          m("option[value='']", "Data (antigos para recentes)"),
                          m("option[value='']", "Valor (maior para menor)"),
                          m("option[value='First']", "Valor (menor para maior)")
                      ])
                  ])
              ])
          ])*/
          _$1.map(list.collection(), function (item) {
              var contribution = m$1.prop(item);
              return m$1.component(projectContributionReportContentCard, { project: args.project, contribution: contribution });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])])]);
      }
  };

  var vm$4 = postgrest.filtersVM({
      full_text_index: '@@',
      state: 'in',
      reward_id: 'eq',
      project_id: 'eq'
  });
  var paramToString$2 = function paramToString(p) {
      return (p || '').toString().trim();
  };
  vm$4.state('');
  vm$4.order({
      id: 'desc'
  });

  vm$4.full_text_index.toFilter = function () {
      var filter = paramToString$2(vm$4.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  vm$4.withNullParameters = function () {
      var withNullVm = postgrest.filtersVM({
          full_text_index: '@@',
          state: 'in',
          reward_id: 'is',
          project_id: 'eq'
      });

      withNullVm.full_text_index(vm$4.full_text_index());
      withNullVm.order(vm$4.order());
      withNullVm.state(vm$4.state());
      withNullVm.reward_id(vm$4.reward_id());
      withNullVm.project_id(vm$4.project_id());

      return withNullVm.parameters();
  };

  var I18nScope$10 = _$1.partial(h.i18nScope, 'projects.contributions_report.legend_labels');

  var ProjectContributionStateLegendModal = {
      controller: function controller(args) {
          var translate = function translate(path) {
              return I18n$1.t(path, I18nScope$10());
          };

          return {
              stages: {
                  online: [{
                      label: translate('online.paid.label'),
                      text: translate('online.paid.text'),
                      i_class: '.fa.fa-circle.text-success'
                  }, {
                      label: translate('online.pending.label'),
                      text: translate('online.pending.text'),
                      i_class: '.fa.fa-circle.text-waiting'
                  }, {
                      label: translate('online.refunded.label'),
                      text: translate('online.refunded.text'),
                      i_class: '.fa.fa-circle.text-error'
                  }],
                  failed: [{
                      label: translate('failed.pending_refund.label'),
                      text: translate('failed.pending_refund.text'),
                      i_class: '.fa.fa-circle-o.text-refunded'
                  }, {
                      label: translate('failed.refunded.label'),
                      text: translate('failed.refunded.text'),
                      i_class: '.fa.fa-circle.text-refunded'
                  }, {
                      label: translate('failed.paid.label'),
                      text: translate('failed.paid.text'),
                      i_class: '.fa.fa-circle-o.text-error'
                  }],
                  successful: [{
                      label: translate('successful.paid.label'),
                      text: translate('successful.paid.text'),
                      i_class: '.fa.fa-circle.text-success'
                  }, {
                      label: translate('successful.refunded.label'),
                      text: translate('successful.refunded.text'),
                      i_class: '.fa.fa-circle.text-error'
                  }]

              }
          };
      },
      view: function view(ctrl, args) {
          var project = _$1.first(args.project()),
              project_stage = project.state == 'waiting_funds' ? 'online' : project.state;

          return m$1('div', [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', 'Status do apoio')]), m$1('.modal-dialog-content', _$1.map(ctrl.stages[project_stage], function (item, i) {
              return m$1('.u-marginbottom-20', [m$1('.fontsize-small.fontweight-semibold', [m$1('span' + item.i_class), '  ' + item.label]), m$1('.fontsize-smaller', m$1.trust(item.text))]);
          }))]);
      }
  };

  var InfoProjectContributionStateLegend = {
      controller: function controller(args) {
          return {
              modalToggle: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('span', [args.text, m$1.trust('&nbsp;'), m$1('a.fa.fa-question-circle.fontcolor-secondary[href="#"]', {
              onclick: ctrl.modalToggle.toggle
          }, ''), ctrl.modalToggle() ? m$1.component(modalBox, {
              displayModal: ctrl.modalToggle,
              content: [ProjectContributionStateLegendModal, {
                  project: args.project
              }]
          }) : '']);
      }
  };

  var projectContributionReport = {
      controller: function controller(args) {
          var listVM = postgrest$1.paginationVM(models.projectContribution, 'id.desc', { 'Prefer': 'count=exact' }),
              filterVM = vm$4,
              project = m$1.prop([{}]),
              rewards = m$1.prop([]),
              contributionStateOptions = m$1.prop([]),
              reloadSelectOptions = function reloadSelectOptions(project_state) {
              var opts = [{ value: '', option: 'Todos' }];

              var options_map = {
                  'online': [{ value: 'paid', option: 'Confirmado' }, { value: 'pending', option: 'Iniciado' }, { value: 'refunded,chargeback,deleted,pending_refund', option: 'Contestado' }],
                  'waiting_funds': [{ value: 'paid', option: 'Confirmado' }, { value: 'pending', option: 'Iniciado' }, { value: 'refunded,chargeback,deleted,pending_refund', option: 'Contestado' }],
                  'failed': [{ value: 'pending_refund', option: 'Reembolso em andamento' }, { value: 'refunded', option: 'Reembolsado' }, { value: 'paid', option: 'Reembolso não iniciado' }],
                  'successful': [{ value: 'paid', option: 'Confirmado' }, { value: 'refunded,chargeback,deleted,pending_refund', option: 'Contestado' }]
              };

              opts = opts.concat(options_map[project_state] || []);

              contributionStateOptions(opts);
          },
              filterBuilder = [{
              component: filterMain,
              data: {
                  inputWrapperClass: '.w-input.text-field',
                  btnClass: '.btn.btn-medium',
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por nome ou email do apoiador'
              }
          }, {
              label: 'reward_filter',
              component: filterDropdown,
              data: {
                  label: 'Recompensa',
                  name: 'reward_id',
                  vm: filterVM.reward_id,
                  wrapper_class: '.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle',
                  options: []
              }
          }, {
              label: 'payment_state',
              component: filterDropdown,
              data: {
                  custom_label: [InfoProjectContributionStateLegend, {
                      text: 'Status do apoio',
                      project: project
                  }],
                  name: 'state',
                  vm: filterVM.state,
                  wrapper_class: '.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle',
                  options: contributionStateOptions
              }
          }],
              submit = function submit() {
              if (filterVM.reward_id() === 'null') {
                  listVM.firstPage(filterVM.withNullParameters()).then(null);
              } else {
                  listVM.firstPage(filterVM.parameters()).then(null);
              }

              return false;
          };

          filterVM.project_id(args.root.getAttribute('data-id'));

          var lReward = postgrest$1.loaderWithToken(models.rewardDetail.getPageOptions({ project_id: 'eq.' + filterVM.project_id() }));
          var lProject = postgrest$1.loaderWithToken(models.projectDetail.getPageOptions({ project_id: 'eq.' + filterVM.project_id() }));

          lReward.load().then(rewards);
          lProject.load().then(function (data) {
              project(data);
              reloadSelectOptions(_$1.first(data).state);
          });

          var mapRewardsToOptions = function mapRewardsToOptions() {
              var options = [];
              if (!lReward()) {
                  options = _$1.map(rewards(), function (r) {
                      return {
                          value: r.id,
                          option: 'R$ ' + h.formatNumber(r.minimum_value, 2, 3) + ' - ' + r.description.substring(0, 20)
                      };
                  });
              }

              options.unshift({
                  value: null,
                  option: 'Sem recompensa'
              });

              options.unshift({
                  value: '',
                  option: 'Todas'
              });

              return options;
          };

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }

          return {
              listVM: listVM,
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              submit: submit,
              lReward: lReward,
              lProject: lProject,
              rewards: rewards,
              project: project,
              mapRewardsToOptions: mapRewardsToOptions
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM;

          if (!ctrl.lProject()) {
              return [m$1.component(projectDashboardMenu, { project: m$1.prop(_$1.first(ctrl.project())) }), m$1.component(projectContributionReportHeader, {
                  submit: ctrl.submit,
                  filterBuilder: ctrl.filterBuilder,
                  form: ctrl.filterVM.formDescriber,
                  mapRewardsToOptions: ctrl.mapRewardsToOptions,
                  filterVM: ctrl.filterVM
              }), m$1('.divider.u-margintop-30'), m$1.component(projectContributionReportContent, {
                  list: list,
                  project: m$1.prop(_$1.first(ctrl.project()))
              })];
          } else {
              return h.loader();
          }
      }
  };

  var projectsDashboard = {
      controller: function controller(args) {
          projectVM.init(args.project_id, args.project_user_id);

          return projectVM;
      },
      view: function view(ctrl) {
          var project = ctrl.currentProject;

          return project().is_owner_or_admin ? m$1.component(projectDashboardMenu, { project: project }) : '';
      }
  };

  var projectFiltersVM = function projectFiltersVM() {
      var filtersVM = postgrest$1.filtersVM,
          all = filtersVM({
          state: 'eq'
      }).state('online'),
          nearMe = filtersVM({
          near_me: 'eq',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').near_me(true),
          expiring = filtersVM({
          expires_at: 'lte',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').expires_at(moment$1().add(14, 'days').format('YYYY-MM-DD')),
          recent = filtersVM({
          online_date: 'gte',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').online_date(moment$1().subtract(5, 'days').format('YYYY-MM-DD')),
          score = filtersVM({
          score: 'gte',
          open_for_contributions: 'eq'
      }).score('1').open_for_contributions('true'),
          online = filtersVM({
          open_for_contributions: 'eq'
      }).open_for_contributions('true'),
          contributed_by_friends = filtersVM({
          open_for_contributions: 'eq',
          contributed_by_friends: 'eq'
      }).open_for_contributions('true').contributed_by_friends(true),
          successful = filtersVM({
          state: 'eq'
      }).state('successful'),
          finished = filtersVM({}),
          filters = {
          all: {
              title: 'Todas as Categorias',
              filter: all,
              nicename: 'No ar',
              isContextual: false,
              keyName: 'all'
          },
          score: {
              title: 'Todas as Categorias',
              filter: score,
              nicename: 'Populares',
              isContextual: false,
              keyName: 'score'
          },
          contributed_by_friends: {
              title: 'Amigos',
              filter: contributed_by_friends,
              nicename: 'Amigos',
              isContextual: false,
              keyName: 'contributed_by_friends'
          },
          online: {
              title: 'No ar',
              filter: online,
              isContextual: false,
              keyName: 'online'
          },
          expiring: {
              title: 'Reta final',
              filter: expiring,
              isContextual: false,
              keyName: 'expiring'
          },
          successful: {
              title: 'Todas as Categorias',
              filter: successful,
              nicename: 'Financiados',
              isContextual: false,
              keyName: 'successful'
          },
          finished: {
              title: 'Todas as Categorias',
              filter: finished,
              nicename: 'Finalizados',
              isContextual: false,
              keyName: 'finished'
          },
          recent: {
              title: 'Recentes',
              filter: recent,
              isContextual: false,
              keyName: 'recent'
          },
          near_me: {
              title: 'Próximos a mim',
              filter: nearMe,
              isContextual: false,
              keyName: 'near_me'
          }
      };

      var setContextFilters = function setContextFilters(contextFilters) {
          _.map(contextFilters, function (filterKey) {
              return filters[filterKey].isContextual = true;
          });

          return filters;
      },
          getContextFilters = function getContextFilters() {
          return _.filter(filters, function (filter) {
              return filter.isContextual;
          });
      },
          removeContextFilter = function removeContextFilter(filter) {
          filters[filter.keyName].isContextual = false;

          return filters;
      };

      return {
          filters: filters,
          setContextFilters: setContextFilters,
          getContextFilters: getContextFilters,
          removeContextFilter: removeContextFilter
      };
  };

  var search = {
      view: function view(ctrl) {
          var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

          var action = args.action || '/pt/explore?ref=ctrse_explore_pgsearch',
              method = args.method || 'GET';

          return m$1('#search.w-container.w-hidden-main.w-hidden-medium', [m$1('.w-row', [m$1('.w-col.w-col-10.u-marginbottom-20', [m$1('.w-form', [m$1('form#email-form', { action: action, method: method }, [m$1('.w-row', [m$1('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', [m$1('input[type="text"][name="pg_search"][placeholder="Busque projetos"]#pg_search_inside.w-input.text-field.negative.prefix')]), m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m$1('button.w-inline-block.btn.btn-dark.btn-attached.postfix', [m$1('img.header-lupa[src="https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/54e44178b2135fce2b6cd235_lupa.png"]')])])])])])])])]);
      }
  };

  var categoryButton = {
      view: function view(ctrl, args) {
          var category = args.category;

          return m$1('.w-col.w-col-2.w-col-small-6.w-col-tiny-6', [m$1('a.w-inline-block.btn-category[href=\'#by_category_id/' + category.id + '\']', [m$1('div', [category.name, m$1('span.badge.explore', category.online_projects)])])]);
      }
  };

  var SignedFriendFacebookConnect = {
      controller: function controller(args) {
          var mapWithAvatar = function mapWithAvatar() {
              return _$1.sample(_$1.filter(args.friendListVM.collection(), function (item) {
                  return !_$1.isNull(item.avatar);
              }), 8);
          };

          return {
              mapWithAvatar: mapWithAvatar
          };
      },
      view: function view(ctrl, args) {
          if (args.friendListVM.isLoading()) {
              return h.loader();
          } else {
              var total = args.friendListVM.total();
              return m$1('.w-section.section.bg-backs-carrosel.section-large', [m$1('.w-container', [m$1('.card.card-big', [m$1('.w-row', [m$1('.w-col.w-col-8', [m$1('.fontsize-largest.u-marginbottom-20', 'Encontre projetos incríveis junto com seus amigos'), m$1('.fontsize-small', 'O universo do Catarse junto com a sua rede do Facebook te farão descobrir projetos incríveis!')]), m$1('.w-col.w-col-4.u-text-center', [m$1('.fontsize-smallest.u-marginbottom-10', total + ' dos seus amigos estão no Catarse!'), m$1('.u-marginbottom-20', [_$1.map(ctrl.mapWithAvatar(), function (item) {
                  return m$1('img.thumb.small.u-round.u-marginbottom-10[src="' + item.avatar + '"]');
              })]), total > 0 ? m$1('a.w-button.btn.btn-large[href="/follow-fb-friends"]', 'Procure seus amigos') : m$1('a.w-button.btn.btn-fb.btn-large.u-margintop-30.u-marginbottom-10[href="/connect-facebook"]', 'Conecte seu facebook')])])])])]);
          }
      }
  };

  var UnsignedFriendFacebookConnect = {
      controller: function controller(args) {
          return {
              largeBg: function () {
                  if (_$1.isUndefined(args)) {
                      return false;
                  } else {
                      return _$1.isUndefined(args.largeBg) ? false : args.largeBg;
                  }
              }()
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-section.section' + (ctrl.largeBg ? '.bg-backs-carrosel.section-large' : ''), [m$1('.w-container', [m$1('.card.card-big', [m$1('.w-row', [m$1('.w-col.w-col-8', [m$1('.fontsize-largest.u-marginbottom-20', 'Encontre projetos incríveis junto com seus amigos'), m$1('.fontsize-small', 'O universo do Catarse junto com a sua rede do Facebook te farão descobrir projetos incríveis!')]), m$1('.w-col.w-col-4', [m$1('a.w-button.btn.btn-fb.btn-large.u-margintop-30.u-marginbottom-10[href="/connect-facebook"]', 'Conecte seu facebook'), m$1('.fontsize-smallest.fontcolor-secondary.u-text-center', 'Nós nunca postaremos nada no facebook sem sua permissão')])])])])]);
      }
  };

  var I18nScope$11 = _$1.partial(h.i18nScope, 'pages.explore');

  // TODO Slim down controller by abstracting logic to view-models where it fits
  var projectsExplore = {
      controller: function controller(args) {
          var filters = postgrest$1.filtersVM,
              projectFiltersVM$$ = projectFiltersVM(),
              filtersMap = projectFiltersVM$$.filters,
              defaultFilter = h.paramByName('filter') || 'all',
              fallbackFilter = 'all',
              currentFilter = m$1.prop(filtersMap[defaultFilter]),
              changeFilter = function changeFilter(newFilter) {
              currentFilter(filtersMap[newFilter]);
              loadRoute();
          },
              resetContextFilter = function resetContextFilter() {
              currentFilter(filtersMap[defaultFilter]);
              projectFiltersVM$$.setContextFilters(['finished', 'all', 'contributed_by_friends']);
          },
              currentUser = h.getUser(),
              currentUserId = currentUser.id,
              hasFBAuth = currentUser.has_fb_auth,
              buildTooltip = function buildTooltip(tooltipText) {
              return m$1.component(tooltip, {
                  el: '.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary',
                  text: tooltipText,
                  width: 380
              });
          },
              hint = function hint() {
              // TODO Add copies to i18n.
              var hintText = '',
                  tooltipText = '',
                  hasHint = false;
              if (currentFilter().keyName === 'all') {
                  hasHint = true;
                  hintText = 'Ordenados por popularidade ';
                  tooltipText = 'O nosso fator popularidade é uma mistura da seleção do time do Catarse com um valor que é calculado pela velocidade de arrecadação do projeto';
              } else if (currentFilter().keyName === 'finished') {
                  hasHint = true;
                  hintText = 'Ordenados por R$ alcançado ';
                  tooltipText = 'Os projetos com maior meta de arrecadação alcançada ficam no topo';
              } else if (currentFilter().keyName === 'contributed_by_friends') {
                  hasHint = true;
                  hintText = 'Projetos apoiados por amigos ';
                  tooltipText = 'Projetos apoiados por amigos';
              }

              return hasHint ? m$1('.fontsize-smaller.fontcolor-secondary', [hintText, buildTooltip(tooltipText)]) : '';
          },
              isSearch = m$1.prop(false),
              categoryCollection = m$1.prop([]),
              categoryId = m$1.prop(),
              findCategory = function findCategory(id) {
              return _$1.find(categoryCollection(), function (c) {
                  return c.id === parseInt(id);
              });
          },
              category = _$1.compose(findCategory, categoryId),
              loadCategories = function loadCategories() {
              return models.category.getPageWithToken(filters({}).order({ name: 'asc' }).parameters()).then(categoryCollection);
          },

          // just small fix when have two scored projects only
          checkForMinScoredProjects = function checkForMinScoredProjects(collection) {
              return _$1.size(_$1.filter(collection, function (x) {
                  return x.score >= 1;
              })) >= 3;
          },

          // Fake projects object to be able to render page while loadding (in case of search)
          projects = m$1.prop({ collection: m$1.prop([]), isLoading: function isLoading() {
                  return true;
              }, isLastPage: function isLastPage() {
                  return true;
              } }),
              loadRoute = function loadRoute() {
              var route = window.location.hash.match(/\#([^\/]*)\/?(\d+)?/),
                  cat = route && route[2] && findCategory(route[2]),
                  filterFromRoute = function filterFromRoute() {
                  var byCategory = filters({
                      category_id: 'eq'
                  });

                  return route && route[1] && filtersMap[route[1]] || cat && { title: cat.name, filter: byCategory.category_id(cat.id) };
              },
                  filter = filterFromRoute() || currentFilter(),
                  search = h.paramByName('pg_search'),
                  searchProjects = function searchProjects() {
                  var l = postgrest$1.loaderWithToken(models.projectSearch.postOptions({ query: search })),
                      page = { // We build an object with the same interface as paginationVM
                      collection: m$1.prop([]),
                      isLoading: l,
                      isLastPage: function isLastPage() {
                          return true;
                      },
                      nextPage: function nextPage() {
                          return false;
                      }
                  };
                  l.load().then(page.collection);
                  return page;
              },
                  loadProjects = function loadProjects() {
                  var pages = postgrest$1.paginationVM(models.project);
                  var parameters = _$1.extend({}, currentFilter().filter.parameters(), filter.filter.order({
                      open_for_contributions: 'desc',
                      state_order: 'asc',
                      state: 'desc',
                      score: 'desc',
                      pledged: 'desc'
                  }).parameters());
                  pages.firstPage(parameters);
                  return pages;
              },
                  loadFinishedProjects = function loadFinishedProjects() {
                  var pages = postgrest$1.paginationVM(models.finishedProject),
                      parameters = _$1.extend({}, currentFilter().filter.parameters(), filter.filter.order({
                      state_order: 'asc',
                      state: 'desc',
                      pledged: 'desc'
                  }).parameters());
                  pages.firstPage(parameters);

                  return pages;
              };

              if (_$1.isString(search) && search.length > 0 && route === null) {
                  isSearch(true);
                  title('Busca ' + search);
                  projects(searchProjects());
              } else if (currentFilter().keyName === 'finished') {
                  isSearch(false);
                  projects(loadFinishedProjects());
              } else {
                  isSearch(false);
                  title(filter.title);
                  if (!_$1.isNull(route) && route[1] == 'finished') {
                      projects(loadFinishedProjects());
                  } else {
                      projects(loadProjects());
                  }
              }
              categoryId(cat && cat.id);
              route || _$1.isString(search) && search.length > 0 ? toggleCategories(false) : toggleCategories(true);
          },
              title = m$1.prop(),
              toggleCategories = h.toggleProp(false, true);

          window.addEventListener('hashchange', function () {
              resetContextFilter();
              loadRoute();
              m$1.redraw();
          }, false);

          // Initial loads
          resetContextFilter();
          models.project.pageSize(9);
          loadCategories().then(loadRoute);

          if (args.filter) {
              currentFilter(filtersMap[args.filter]);
          }

          if (!currentFilter()) {
              currentFilter(filtersMap[defaultFilter]);
          }

          return {
              categories: categoryCollection,
              changeFilter: changeFilter,
              fallbackFilter: fallbackFilter,
              projects: projects,
              category: category,
              title: title,
              hint: hint,
              filtersMap: filtersMap,
              currentFilter: currentFilter,
              projectFiltersVM: projectFiltersVM$$,
              toggleCategories: toggleCategories,
              isSearch: isSearch,
              hasFBAuth: hasFBAuth,
              checkForMinScoredProjects: checkForMinScoredProjects
          };
      },
      view: function view(ctrl, args) {
          var projects_collection = ctrl.projects().collection(),
              projectsCount = projects_collection.length,
              widowProjects = [],
              filterKeyName = ctrl.currentFilter().keyName,
              isContributedByFriendsFilter = filterKeyName === 'contributed_by_friends';

          if (!ctrl.projects().isLoading() && _$1.isEmpty(projects_collection) && !ctrl.isSearch()) {
              if (isContributedByFriendsFilter && !ctrl.hasFBAuth) {} else {
                  ctrl.projectFiltersVM.removeContextFilter(ctrl.currentFilter());
                  ctrl.changeFilter(ctrl.fallbackFilter);
              }
          }

          return m$1('#explore', { config: h.setPageTitle(I18n$1.t('header_html', I18nScope$11())) }, [m$1('.w-section.hero-search', [m$1.component(search), m$1('.w-container.u-marginbottom-10', [m$1('.u-text-center.u-marginbottom-40', [m$1('a#explore-open.link-hidden-white.fontweight-light.fontsize-larger[href="javascript:void(0);"]', { onclick: function onclick() {
                  return ctrl.toggleCategories.toggle();
              } }, ['Explore projetos incríveis ', m$1('span#explore-btn.fa.fa-angle-down' + (ctrl.toggleCategories() ? '.opened' : ''), '')])]), m$1('#categories.category-slider' + (ctrl.toggleCategories() ? '.opened' : ''), [m$1('.w-row.u-marginbottom-30', [_$1.map(ctrl.categories(), function (category) {
              return m$1.component(categoryButton, { category: category });
          })])])])]), m$1('.w-section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-9.w-col-small-8.w-col-tiny-8', [m$1('.fontsize-larger', ctrl.title()), ctrl.hint()]), m$1('.w-col.w-col-3.w-col-small-4.w-col-tiny-4', !ctrl.isSearch() ? m$1('select.w-select.text-field.positive', { onchange: m$1.withAttr('value', ctrl.changeFilter) }, _$1.map(ctrl.projectFiltersVM.getContextFilters(), function (pageFilter, idx) {
              var projects = ctrl.projects(),
                  isSelected = ctrl.currentFilter() == pageFilter;

              return m$1('option[value="' + pageFilter.keyName + '"]', { selected: isSelected }, pageFilter.nicename);
          })) : '')])])]), isContributedByFriendsFilter && _$1.isEmpty(projects_collection) ? !ctrl.hasFBAuth ? m$1.component(UnsignedFriendFacebookConnect) : '' : '', m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-row', _$1.map(projects_collection, function (project, idx) {
              var cardType = 'small',
                  ref = 'ctrse_explore';

              if (ctrl.isSearch()) {
                  ref = 'ctrse_explore_pgsearch';
              } else if (isContributedByFriendsFilter) {
                  ref = 'ctrse_explore_friends';
              } else if (filterKeyName === 'all') {
                  if (project.score >= 1) {
                      if (idx === 0) {
                          cardType = 'big';
                          ref = 'ctrse_explore_featured_big';
                          widowProjects = [projectsCount - 1, projectsCount - 2];
                      } else if (idx === 1 || idx === 2) {
                          if (ctrl.checkForMinScoredProjects(projects_collection)) {
                              cardType = 'medium';
                              ref = 'ctrse_explore_featured_medium';
                              widowProjects = [];
                          } else {
                              cardType = 'big';
                              ref = 'ctrse_explore_featured_big';
                              widowProjects = [projectsCount - 1];
                          }
                      } else {
                          ref = 'ctrse_explore_featured';
                      }
                  }
              }

              return _$1.indexOf(widowProjects, idx) > -1 && !ctrl.projects().isLastPage() ? '' : m$1.component(projectCard, { project: project, ref: ref, type: cardType, showFriends: isContributedByFriendsFilter });
          })), ctrl.projects().isLoading() ? h.loader() : _$1.isEmpty(projects_collection) && ctrl.hasFBAuth ? m$1('.fontsize-base.w-col.w-col-12', 'Nenhum projeto para mostrar.') : ''])])]), m$1('.w-section.u-marginbottom-80', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-2.w-col-push-5', [ctrl.projects().isLastPage() || ctrl.projects().isLoading() || _$1.isEmpty(projects_collection) ? '' : m$1('a.btn.btn-medium.btn-terciary[href=\'#loadMore\']', { onclick: function onclick() {
                  ctrl.projects().nextPage();return false;
              } }, 'Carregar mais')])])])]), m$1('.w-section.section-large.before-footer.u-margintop-80.bg-gray.divider', [m$1('.w-container.u-text-center', [m$1('img.u-marginbottom-20.icon-hero', { src: 'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/56f4414d3a0fcc0124ec9a24_icon-launch-explore.png' }), m$1('h2.fontsize-larger.u-marginbottom-60', 'Lance sua campanha no Catarse!'), m$1('.w-row', [m$1('.w-col.w-col-4.w-col-push-4', [m$1('a.w-button.btn.btn-large', { href: '/start?ref=ctrse_explore' }, 'Aprenda como')])])])])]);
      }
  };

  var menuSearch = {
      view: function view(ctrl, args) {
          return m$1('span#menu-search', [m$1('.w-form.w-hidden-small.w-hidden-tiny.header-search[id=\'discover-form-wrapper\']', [m$1('form.discover-form[accept-charset=\'UTF-8\'][action=\'/pt/explore?ref=ctrse_header\'][id=\'search-form\'][method=\'get\']', [m$1('div', { style: { 'display': 'none' } }, m$1('input[name=\'utf8\'][type=\'hidden\'][value=\'✓\']')), m$1('input.w-input.text-field.negative.prefix.search-input[autocomplete=\'off\'][id=\'pg_search\'][name=\'pg_search\'][placeholder=\'Busque projetos\'][type=\'text\']')]), m$1('.search-pre-result.w-hidden[data-searchpath=\'/pt/auto_complete_projects\']', [m$1('.result', m$1('.u-text-center', m$1('img[alt=\'Loader\'][src=\'/assets/catarse_bootstrap/loader-b642f2f0212454026a5c7c40620427c1.gif\']'))), m$1('a.btn.btn-small.btn-terciary.see-more-projects[href=\'javascript:void(0);\']', ' ver todos')])]), m$1('a.w-inline-block.w-hidden-small.w-hidden-tiny.btn.btn-dark.btn-attached.postfix[href=\'#\'][id=\'pg_search_submit\']', m$1('img.header-lupa[alt=\'Lupa\'][data-pin-nopin=\'true\'][src=\'/assets/catarse_bootstrap/lupa-a2e6f4b98c43604325ed4c786d4be5a4.png\']'))]);
      }
  };

  var quickProjectList = {
      view: function view(ctrl, args) {
          return m$1('.quickProjectList', _.map(args.projects(), function (project, idx) {
              return m$1('li.u-marginbottom-10', {
                  key: idx
              }, m$1('.w-row', [m$1('.w-col.w-col-3', m$1('img.thumb.small.u-radius[alt=\'Project thumb 01\'][src=\'' + (project.thumb_image || project.video_cover_image) + '\']')), m$1('.w-col.w-col-9', m$1('a.alt-link.fontsize-smaller[href=\'/' + project.permalink + '?ref=ctrse_search_quick\']', {
                  onclick: projectVM.routeToProject(project, args.ref)
              }, '' + project.name))]));
          }), m$1('li.u-margintop-20', m$1('.w-row', [m$1('.w-col.w-col-6', m$1('a.btn.btn-terciary[href=' + args.loadMoreHref + '?ref=ctrse_search_quick]', 'Ver todos')), m$1('.w-col.w-col-6')])));
      }
  };

  var menuProfile = {
      controller: function controller(args) {
          var contributedProjects = m$1.prop(),
              latestProjects = m$1.prop([]),
              userDetails = m$1.prop({}),
              user_id = args.user.user_id;

          userVM.fetchUser(user_id, true, userDetails);
          //userVM.getUserCreatedProjects(user_id).then(latestProjects);
          //userVM.getUserContributedProjects(user_id).then(contributedProjects);

          return {
              contributedProjects: contributedProjects,
              latestProjects: latestProjects,
              userDetails: userDetails,
              toggleMenu: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var user = ctrl.userDetails();

          return m$1('.w-dropdown.user-profile', [m$1('a.w-dropdown-toggle.dropdown-toggle[href=\'javascript:void()\'][id=\'user-menu\']', {
              onclick: ctrl.toggleMenu.toggle
          }, m$1('img.user-avatar[alt=\'Thumbnail - ' + user.name + '\'][height=\'40\'][src=\'' + h.useAvatarOrDefault(user.profile_img_thumbnail) + '\'][width=\'40\']')), ctrl.toggleMenu() ? m$1('nav.w-dropdown-list.dropdown-list.user-menu.w--open[id=\'user-menu-dropdown\']', { style: 'display:block;' }, [m$1('.w-row', [m$1('.w-col.w-col-12', [m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Meu histórico'), m$1('ul.w-list-unstyled.u-marginbottom-20', [m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#contributions\']', 'Histórico de apoio')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#contributions\']', 'Projetos criados')), m$1('li.w-hidden-main.w-hidden-medium.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#projects\']', 'Projetos criados'))]), m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Configurações'), m$1('ul.w-list-unstyled.u-marginbottom-20', [m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#about_me\']', 'Sobre você')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#notifications\']', 'Notificações')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#settings\']', 'Dados e endereço')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/users/' + user.id + '/edit#billing\']', 'Banco e cartões'))])])]),
          //m(`.w-col.w-col-4.w-hidden-small.w-hidden-tiny`,
          //    [
          //        m(`.fontweight-semibold.fontsize-smaller.u-marginbottom-10`,
          //            `Projetos apoiados`
          //        ),
          //        m(`ul.w-list-unstyled.u-marginbottom-20`, ctrl.contributedProjects() ?
          //            _.isEmpty(ctrl.contributedProjects) ? 'Nenhum projeto.' :
          //            m.component(quickProjectList, {
          //                projects: m.prop(_.map(ctrl.contributedProjects(), (contribution) => {
          //                    return {
          //                        project_id: contribution.project_id,
          //                        project_user_id: contribution.project_user_id,
          //                        thumb_image: contribution.project_img,
          //                        video_cover_image: contribution.project_img,
          //                        permalink: contribution.permalink,
          //                        name: contribution.project_name
          //                    };
          //                })),
          //                loadMoreHref: '/pt/users/${user.id}/edit#contributions',
          //                ref: 'user_menu_my_contributions'
          //            }) : 'carregando...'
          //        )
          //    ]
          //),
          //m(`.w-col.w-col-4.w-hidden-small.w-hidden-tiny`,
          //    [
          //        m(`.fontweight-semibold.fontsize-smaller.u-marginbottom-10`,
          //            `Projetos criados`
          //        ),
          //        m(`ul.w-list-unstyled.u-marginbottom-20`, ctrl.latestProjects() ?
          //            _.isEmpty(ctrl.latestProjects) ? 'Nenhum projeto.' :
          //            m.component(quickProjectList, {
          //                projects: ctrl.latestProjects,
          //                loadMoreHref: '/pt/users/${user.id}/edit#contributions',
          //                ref: 'user_menu_my_projects'
          //            }) : 'carregando...'
          //        )
          //    ]
          //)
          m$1('.divider.u-marginbottom-20'), args.user.is_admin_role ? m$1('.fontweight-semibold.fontsize-smaller.u-marginbottom-10', 'Admin') : '', args.user.is_admin_role ? m$1('ul.w-list-unstyled.u-marginbottom-20', [m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/new-admin#/users\']', 'Usuários')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/new-admin\']', 'Apoios')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/admin/financials\']', 'Rel. Financeiros')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/admin/projects\']', 'Admin projetos')), m$1('li.lineheight-looser', m$1('a.alt-link.fontsize-smaller[href=\'/pt/dbhero\']', 'Dataclips'))]) : '', m$1('.divider.u-marginbottom-20'), m$1('.fontsize-smallest', ['Você está logado como ', m$1('span', [m$1('span.fontweight-semibold', user.name), m$1.trust('&nbsp;'), m$1('a.alt-link[href=\'/pt/logout\']', 'Sair')])])]) : '']);
      }
  };

  var menu = {
      controller: function controller(args) {
          var user = h.getUser(),
              menuCss = function menuCss() {
              var dynamicClasses = void 0;

              return (args.menuTransparency ? 'overlayer' : '') + ' ' + (args.withAlert ? 'with-global-alert' : '');
          };

          return {
              user: user,
              menuCss: menuCss
          };
      },
      view: function view(ctrl, args) {
          return m$1('header.main-header.w-section', {
              class: ctrl.menuCss()
          }, [m$1('.w-clearfix', [m$1('a.header-logo.w-nav-brand[href=\'/?ref=ctrse_header\'][title=\'Catarse\']', { config: m$1.route }, m$1('img[alt=\'Logo big\'][src=\'/assets/catarse_bootstrap/logo_big-8726f3436ac23c97959d3f7bf10365b7.png\']')), m$1('a.w-hidden-small.w-hidden-tiny.header-link.w-nav-link[href=\'/start?ref=ctrse_header\']', { config: m$1.route }, 'Comece seu projeto'), m$1('a.w-hidden-small.w-hidden-tiny.header-link.w-nav-link[href=\'/explore?ref=ctrse_header\']', { config: m$1.route }, 'Explore'), m$1.component(menuSearch), ctrl.user ? m$1.component(menuProfile, { user: ctrl.user }) : m$1('a.w-nav-link.header-link.w-nav-link.btn-edit.u-right[href=\'/pt/login?ref=ctrse_header\']', 'Login'), m$1('a.w-nav-link.w-hidden-small.w-hidden-tiny.header-link.w-nav-link.u-right[href=\'http://blog.catarse.me?ref=ctrse_header\'][target=\'_blank\']', { style: 'float: right;' }, 'Blog')]), m$1('.w-hidden-main.w-hidden-medium.header-controls-mobile', [m$1('a.header-link.w-nav-link[href=\'/pt/start?ref=ctrse_header\']', { onclick: function onclick() {
                  return m$1.route('/start');
              } }, 'Comece seu projeto'), m$1('a.header-link.w-nav-link[href=\'/pt/explore?ref=ctrse_header\']', { onclick: function onclick() {
                  return m$1.route('/explore');
              } }, 'Explore')])]);
      }
  };

  var homeVM = function homeVM() {
      var i18nStart = I18n$1.translations[I18n$1.currentLocale()].projects.home,
          banners = i18nStart.banners;

      return {
          banners: banners
      };
  };

  var slider = {
      controller: function controller(args) {
          var interval = void 0;
          var selectedSlideIdx = m$1.prop(0),
              translationSize = m$1.prop(1600),
              sliderTime = args.sliderTime || 6500,
              decrementSlide = function decrementSlide() {
              if (selectedSlideIdx() > 0) {
                  selectedSlideIdx(selectedSlideIdx() - 1);
              } else {
                  selectedSlideIdx(args.slides.length - 1);
              }
          },
              incrementSlide = function incrementSlide() {
              if (selectedSlideIdx() < args.slides.length - 1) {
                  selectedSlideIdx(selectedSlideIdx() + 1);
              } else {
                  selectedSlideIdx(0);
              }
          },
              startSliderTimer = function startSliderTimer() {
              interval = setInterval(function () {
                  incrementSlide();
                  m$1.redraw();
              }, sliderTime);
          },
              resetSliderTimer = function resetSliderTimer() {
              clearInterval(interval);
              startSliderTimer();
          },
              config = function config(el, isInitialized, context) {
              if (!isInitialized) {
                  translationSize(Math.max(document.documentElement.clientWidth, window.innerWidth || 0));
                  m$1.redraw();
              };

              context.onunload = function () {
                  return clearInterval(interval);
              };
          };

          startSliderTimer();

          return {
              config: config,
              selectedSlideIdx: selectedSlideIdx,
              translationSize: translationSize,
              decrementSlide: decrementSlide,
              incrementSlide: incrementSlide,
              resetSliderTimer: resetSliderTimer
          };
      },
      view: function view(ctrl, args) {
          var slideClass = args.slideClass || '',
              wrapperClass = args.wrapperClass || '',
              effect = args.effect || 'slide',
              sliderClick = function sliderClick(fn, param) {
              fn(param);
              ctrl.resetSliderTimer();
              args.onchange && args.onchange();
          },
              effectStyle = function effectStyle(idx, translateStr) {
              var slideFx = 'transform: ' + translateStr + '; -webkit-transform: ' + translateStr + '; -ms-transform:' + translateStr,
                  fadeFx = idx === ctrl.selectedSlideIdx() ? 'opacity: 1; visibility: visible;' : 'opacity: 0; visibility: hidden;';

              return effect === 'fade' ? fadeFx : slideFx;
          };

          return m$1('.w-slider.' + wrapperClass, {
              config: ctrl.config
          }, [m$1('.fontsize-larger', args.title), m$1('.w-slider-mask', [_$1.map(args.slides, function (slide, idx) {
              var translateValue = (idx - ctrl.selectedSlideIdx()) * ctrl.translationSize(),
                  translateStr = 'translate3d(' + translateValue + 'px, 0, 0)';

              return m$1('.slide.w-slide.' + slideClass, {
                  style: effectStyle(idx, translateStr) + ' ' + slide.customStyle
              }, [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-8.w-col-push-2', slide.content)])])]);
          }), m$1('#slide-prev.w-slider-arrow-left.w-hidden-small.w-hidden-tiny', {
              onclick: function onclick() {
                  return sliderClick(ctrl.decrementSlide);
              }
          }, [m$1('.w-icon-slider-left.fa.fa-lg.fa-angle-left.fontcolor-terciary')]), m$1('#slide-next.w-slider-arrow-right.w-hidden-small.w-hidden-tiny', {
              onclick: function onclick() {
                  return sliderClick(ctrl.incrementSlide);
              }
          }, [m$1('.w-icon-slider-right.fa.fa-lg.fa-angle-right.fontcolor-terciary')]), m$1('.w-slider-nav.w-slider-nav-invert.w-round.slide-nav', _$1(args.slides.length).times(function (idx) {
              return m$1('.slide-bullet.w-slider-dot' + (ctrl.selectedSlideIdx() === idx ? '.w-active' : ''), {
                  onclick: function onclick() {
                      return sliderClick(ctrl.selectedSlideIdx, idx);
                  }
              });
          }))])]);
      }
  };

  var contributionActivities = {
      controller: function controller(args) {
          var interval = void 0;
          var collection = m$1.prop([]),
              resource = m$1.prop(),
              collectionIndex = m$1.prop(0),
              collectionSize = m$1.prop(),
              collectionL = postgrest$1.loader(models.contributionActivity.getPageOptions()),
              nextResource = function nextResource() {
              if (collectionIndex() + 1 > collectionSize()) {
                  collectionIndex(0);
              }

              collectionIndex(collectionIndex() + 1);
              resource(collection()[collectionIndex()]);
              m$1.redraw();
          },
              startConfig = function startConfig(el, isinitialized, context) {
              context.onunload = function () {
                  return clearInterval(interval);
              };
          },
              startTimer = function startTimer() {
              interval = setInterval(nextResource, 15000);
          };

          collectionL.load().then(function (data) {
              collection(data);
              collectionSize(data.length);
              resource(_$1.first(data));
          });

          startTimer();

          return {
              collection: collection,
              collectionL: collectionL,
              resource: resource,
              collectionSize: collectionSize
          };
      },
      view: function view(ctrl, args) {
          if (!ctrl.collectionL() && !_$1.isUndefined(ctrl.resource()) && (ctrl.collectionSize() || 0) > 0) {
              var resource = ctrl.resource(),
                  elapsed = h.translatedTime(resource.elapsed_time),
                  project_link = 'https://catarse.me/' + resource.permalink + '?ref=ctrse_home_activities';

              return m$1('.w-section.section.bg-backs-carrosel', { config: ctrl.startConfig }, [m$1('.w-container.u-text-center.fontcolor-negative', [m$1('.fontsize-large.u-marginbottom-30', 'há ' + parseInt(elapsed.total) + ' ' + elapsed.unit + '...'), m$1('.w-clearfix.w-inline-block.u-marginbottom-10', [m$1('a', { href: project_link }, [m$1('img.thumb-author.u-round', { src: resource.thumbnail, width: 80 })]), m$1('img.thumb-author.u-round', { src: 'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/56d646f7710a7126338b46ff_logo-catarse-back-carrosel.png' }), m$1('a', { href: project_link }, [m$1('img.thumb-author.u-round', { src: resource.project_thumbnail, width: 80, style: 'margin-right: 0;' })])]), m$1('.fontsize-large', resource.name + ' apoiou'), m$1('.fontsize-larger', [m$1('a.link-hidden-white', { href: project_link }, resource.project_name)])])]);
          } else {
              return m$1('div');
          }
      }
  };

  var blogBanner = {
      controller: function controller(args) {
          var posts = h.getBlogPosts();

          return { posts: posts };
      },
      view: function view(ctrl, args) {

          return m$1('section.section-large.bg-gray.before-footer[id=\'blog\']', m$1('.w-container', [m$1('.u-text-center', [m$1('a[href=\'http://blog.catarse.me\'][target=\'blank\']', m$1('img.u-marginbottom-10[alt=\'Icon blog\'][src=\'/assets/icon-blog.png\']')), m$1('.fontsize-large.u-marginbottom-60.text-success', m$1('a.link-hidden-success[href=\'http://blog.catarse.me\'][target=\'__blank\']', 'Blog do Catarse'))]), m$1('.w-row', _$1.map(ctrl.posts, function (post) {
              return m$1('.w-col.w-col-4.col-blog-post', [m$1('a.link-hidden.fontweight-semibold.fontsize-base.u-marginbottom-10[href="' + post[1][1] + '"][target=\'__blank\']', post[0][1]), m$1('.fontsize-smaller.fontcolor-secondary.u-margintop-10', m$1.trust(h.strip(post[6][1].substr(0, 130)) + '...'))]);
          }))]));
      }
  };

  var footer = {
      view: function view() {
          return m$1('footer.main-footer.main-footer-neg', [m$1('section.w-container', m$1('.w-row', [m$1('.w-col.w-col-9', m$1('.w-row', [m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.w-hidden-tiny', [m$1('.footer-full-signature-text.fontsize-small', 'Bem-vindo'), m$1('a.link-footer[href=\'http://crowdfunding.catarse.me/paratodos?ref=ctrse_footer\']', ['Como funciona', m$1.trust('&nbsp;'), m$1('span.badge.badge-success', 'Novidade‍')]), m$1('a.link-footer[href=\'https://www.catarse.me/pt/flex?ref=ctrse_footer\']', ' Catarse flex'), m$1('a.link-footer[href=\'https://www.catarse.me/pt/team?ref=ctrse_footer\']', [' Nosso time ', m$1.trust('&lt;'), '3']), m$1('a.link-footer[href=\'http://facebook.com/catarse.me\']', ' Facebook'), m$1('a.link-footer[href=\'http://twitter.com/catarse\']', ' Twitter'), m$1('a.link-footer[href=\'http://instagram.com/catarse\']', ' Instagram'), m$1('a.link-footer[href=\'http://github.com/catarse/catarse\']', ' Github'), m$1('a.link-footer[href=\'http://blog.catarse.me\']', ' Blog'), m$1('a.link-footer[href=\'https://www.catarse.me/pt/jobs\']', ' Trabalhe conosco')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.footer-full-firstcolumn', [m$1('.footer-full-signature-text.fontsize-small', 'Ajuda'), m$1('a.zendesk_widget.link-footer[href=\'https://equipecatarse.zendesk.com/account/dropboxes/20298537\']', ' Contato'), m$1('a.link-footer[href=\'http://crowdfunding.catarse.me/nossa-taxa?ref=ctrse_footer\']', ['Nossa Taxa', m$1.trust('&nbsp;'), m$1('span.badge.badge-success', 'Novidade‍')]), m$1('a.link-footer[href=\'https://www.catarse.me/pt/press?ref=ctrse_footer\']', ' Imprensa'), m$1('a.link-footer[href=\'http://suporte.catarse.me?ref=ctrse_footer/\']', ' Central de Suporte'), m$1('a.link-footer[href=\'https://www.catarse.me/pt/guides?ref=ctrse_footer\']', ' Guia dos Realizadores'), m$1('a.link-footer[href=\'http://pesquisa.catarse.me/\']', ' Retrato FC Brasil 2013/2014'), m$1('a.link-footer[href=\'/pt/terms-of-use\']', ' Termos de uso'), m$1('a.link-footer[href=\'/pt/privacy-policy\']', ' Política de privacidade')]), m$1('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.footer-full-lastcolumn', [m$1('.footer-full-signature-text.fontsize-small', 'Navegue'), m$1('a.w-hidden-small.w-hidden-tiny.link-footer[href=\'/pt/start?ref=ctrse_footer\']', ' Comece seu projeto'), m$1('a.link-footer[href=\'/pt/explore?ref=ctrse_footer\']', ' Explore projetos'), m$1('a.w-hidden-main.w-hidden-medium.w-hidden-small.link-footer[href=\'http://blog.catarse.me?ref=ctrse_footer\']', ' Blog'), m$1('a.w-hidden-main.w-hidden-medium.w-hidden-small.link-footer[href=\'https://equipecatarse.zendesk.com/account/dropboxes/20298537\']', ' Contato'), m$1('a.w-hidden-tiny.link-footer[href=\'/pt/explore?filter=score&ref=ctrse_footer\']', ' Populares'), m$1('a.w-hidden-tiny.link-footer[href=\'/pt/explore?filter=online&ref=ctrse_footer\']', ' No ar'), m$1('a.w-hidden-tiny.link-footer[href=\'/pt/explore?filter=finished&ref=ctrse_footer\']', ' Finalizados')])])), m$1('.w-col.w-col-3.column-social-media-footer', [m$1('.footer-full-signature-text.fontsize-small', 'Assine nossa news'), m$1('.w-form', m$1('form[accept-charset=\'UTF-8\'][action=\'' + h.getMailchimpUrl() + '\'][id=\'mailee-form\'][method=\'post\']', [m$1('.w-form.footer-newsletter', m$1('input.w-input.text-field.prefix[id=\'EMAIL\'][label=\'email\'][name=\'EMAIL\'][placeholder=\'Digite seu email\'][type=\'email\']')), m$1('button.w-inline-block.btn.btn-edit.postfix.btn-attached[style="padding:0;"]', m$1('img.footer-news-icon[alt=\'Icon newsletter\'][src=\'/assets/catarse_bootstrap/icon-newsletter-aa77cede92b4d0a314170a10b1c41754.png\']'))])), m$1('.footer-full-signature-text.fontsize-small', 'Redes sociais'), m$1('.w-widget.w-widget-facebook.u-marginbottom-20', m$1('.facebook', m$1('.fb-like[data-colorscheme=\'dark\'][data-href=\'http://facebook.com/catarse.me\'][data-layout=\'button_count\'][data-send=\'false\'][data-show-faces=\'false\'][data-title=\'\'][data-width=\'260\']'))), m$1('.w-widget.w-widget-twitter', [m$1('a.twitter-follow-button[href="httṕ://twitter.com/catarse"][data-button="blue"][data-text-color="#FFFFFF][data-link-color="#FFFFFF"][data-width="224px"]')]), m$1('.u-margintop-30', [m$1('.footer-full-signature-text.fontsize-small', 'Change language'), m$1('[id=\'google_translate_element\']')])])])), m$1('.w-container', m$1('.footer-full-copyleft', [m$1('img.u-marginbottom-20[alt=\'Logo footer\'][src=\'/assets/logo-footer-b5edd43e0ec420a39310ea965341f3ea.png\']'), m$1('.lineheight-loose', m$1('a.link-footer-inline[href=\'http://github.com/catarse/catarse\']', 'Feito com amor | 2016 | Open source'))]))]);
      }
  };

  var I18nScope$12 = _$1.partial(h.i18nScope, 'projects.home');

  var projectsHome = {
      controller: function controller(args) {
          var sample6 = _$1.partial(_$1.sample, _$1, 6),
              loader = postgrest$1.loaderWithToken,
              project = models.project,
              filters = projectFiltersVM().filters,
              userFriendVM = postgrest$1.filtersVM({ user_id: 'eq' }),
              friendListVM = postgrest$1.paginationVM(models.userFriend, 'user_id.desc', {
              'Prefer': 'count=exact'
          }),
              currentUser = h.getUser(),
              hasFBAuth = currentUser.has_fb_auth,
              vm = homeVM();

          project.pageSize(20);

          userFriendVM.user_id(currentUser.user_id);

          if (hasFBAuth && !friendListVM.collection().length) {
              friendListVM.firstPage(userFriendVM.parameters());
          }

          var collections = _$1.map(['score', 'contributed_by_friends'], function (name) {
              var f = filters[name],
                  cLoader = loader(project.getPageOptions(_$1.extend({}, { order: 'score.desc' }, f.filter.parameters()))),
                  collection = m$1.prop([]);

              cLoader.load().then(_$1.compose(collection, sample6));

              return {
                  title: f.nicename,
                  hash: name === 'score' ? 'all' : name,
                  collection: collection,
                  loader: cLoader,
                  showFriends: name === 'contributed_by_friends'
              };
          });

          return {
              collections: collections,
              slidesContent: vm.banners,
              hasFBAuth: hasFBAuth
          };
      },
      view: function view(ctrl) {
          var slides = function slides() {
              return _$1.map(ctrl.slidesContent, function (slide) {
                  var customStyle = 'background-image: url(' + slide.image + ');';
                  var content = m$1('.w-container.u-text-center', [m$1('.w-row.u-marginbottom-40', [m$1('h1.fontcolor-negative.fontsize-megajumbo.u-marginbottom-20', slide.title), m$1('h2.fontcolor-negative.fontsize-large', m$1.trust(slide.subtitle))]), m$1('a.btn.btn-large.u-marginbottom-10.btn-inline', { href: slide.link }, slide.cta)]);

                  return {
                      content: content,
                      customStyle: customStyle
                  };
              });
          };

          return m$1('#projects-home-component', { config: h.setPageTitle(I18n$1.t('header_html', I18nScope$12())) }, [
          // m.component(menu, {transparent: true}),
          m$1.component(slider, {
              slides: slides(),
              effect: 'fade',
              slideClass: 'hero-slide start',
              wrapperClass: 'hero-full hero-full-slide',
              sliderTime: 10000
          }), _$1.map(ctrl.collections, function (collection) {
              return m$1.component(projectRow, {
                  collection: collection,
                  title: collection.title,
                  ref: 'home_' + (collection.hash === 'all' ? 'score' : collection.hash),
                  showFriends: collection.showFriends
              });
          }),
          // m.component(contributionActivities),
          !ctrl.hasFBAuth ? m$1.component(UnsignedFriendFacebookConnect, { largeBg: true }) : '', m$1.component(blogBanner)
          // m.component(footer, {expanded: true}),
          // m.component(contributionActivities)
          ]);
      }
  };

  var projectShareBox = {
      controller: function controller() {
          return {
              displayEmbed: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('.pop-share', {
              style: 'display: block;'
          }, [m$1('.w-hidden-main.w-hidden-medium.w-clearfix', [m$1('a.btn.btn-small.btn-terciary.btn-inline.u-right', {
              onclick: args.displayShareBox.toggle
          }, 'Fechar'), m$1('.fontsize-small.fontweight-semibold.u-marginbottom-30', 'Compartilhe este projeto')]), m$1('.w-widget.w-widget-twitter.w-hidden-small.w-hidden-tiny.share-block', [m$1('iframe[allowtransparency="true"][width="120px"][height="22px"][frameborder="0"][scrolling="no"][src="//platform.twitter.com/widgets/tweet_button.8d007ddfc184e6776be76fe9e5e52d69.en.html#_=1442425984936&count=horizontal&dnt=false&id=twitter-widget-1&lang=en&original_referer=https%3A%2F%2Fwww.catarse.me%2Fpt%2F' + args.project().permalink + '&size=m&text=Confira%20o%20projeto%20' + args.project().name + '%20no%20%40catarse&type=share&url=https%3A%2F%2Fwww.catarse.me%2Fpt%2F' + args.project().permalink + '%3Fref%3Dtwitter%26utm_source%3Dtwitter.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share&via=catarse"]')]), m$1('a.w-hidden-small.widget-embed.w-hidden-tiny.fontsize-small.link-hidden.fontcolor-secondary[href="js:void(0);"]', {
              onclick: ctrl.displayEmbed.toggle
          }, '< embed >'), ctrl.displayEmbed() ? m$1('.embed-expanded.u-margintop-30', [m$1('.fontsize-small.fontweight-semibold.u-marginbottom-20', 'Insira um widget em seu site'), m$1('.w-form', [m$1('input.w-input[type="text"][value="<iframe frameborder="0" height="314px" src="https://www.catarse.me/pt/projects/' + args.project().project_id + '/embed" width="300px" scrolling="no"></iframe>"]')]), m$1('.card-embed', [m$1('iframe[frameborder="0"][height="350px"][src="/projects/' + args.project().project_id + '/embed"][width="300px"][scrolling="no"]')])]) : '', args.project().permalink ? m$1.component(facebookButton, {
              mobile: true,
              url: 'https://www.catarse.me/' + args.project().permalink + '?ref=facebook&utm_source=facebook.com&utm_medium=social&utm_campaign=project_share'
          }) : '', m$1('a.w-hidden-main.w-hidden-medium.btn.btn-medium.btn-tweet.u-marginbottom-20[href="http://twitter.com/?status=Acabei%20de%20apoiar%20o%20projeto%20' + args.project().name + '%20https://www.catarse.me/' + args.project().permalink + '%3Fref%3Dtwitter%26utm_source%3Dtwitter.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share"][target="_blank"]', [m$1('span.fa.fa-twitter'), ' Tweet']), m$1('a.w-hidden-main.w-hidden-medium.btn.btn-medium[data-action="share/whatsapp/share"]', {
              href: 'whatsapp://send?text=' + encodeURIComponent('https://www.catarse.me/' + args.project().permalink + '/?ref=whatsapp&utm_source=whatsapp&utm_medium=social&utm_campaign=project_share')
          }, [m$1('span.fa.fa-whatsapp'), ' Whatsapp'])]);
      }
  };

  var addressTag = {
      view: function view(ctrl, args) {
          var project = args.project,
              address = project().address || {
              state_acronym: '',
              city: ''
          };

          return !_.isNull(address) ? m$1('a.btn.btn-inline.btn-small.btn-transparent.link-hidden-light.u-marginbottom-10[href="/pt/explore?pg_search=' + address.state_acronym + '"]', {
              onclick: h.analytics.event({
                  cat: 'project_view',
                  act: 'project_location_link',
                  lbl: address.city + ' ' + address.state_acronym,
                  project: project()
              })
          }, [m$1('span.fa.fa-map-marker'), ' ' + address.city + ', ' + address.state_acronym]) : '';
      }
  };

  var categoryTag = {
      view: function view(ctrl, args) {
          var project = args.project;

          return project ? m$1('a.btn.btn-inline.btn-small.btn-transparent.link-hidden-light[href="/pt/explore#by_category_id/' + project().category_id + '"]', {
              onclick: h.analytics.event({
                  cat: 'project_view',
                  act: 'project_category_link',
                  lbl: project().category_name,
                  project: project()
              })
          }, [m$1('span.fa.fa-tag'), ' ', project().category_name]) : '';
      }
  };

  var projectHighlight = {
      controller: function controller() {
          return {
              displayShareBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var project = args.project;

          return m$1('#project-highlight', [project().video_embed_url ? m$1('.w-embed.w-video.project-video', {
              style: 'min-height: 240px;'
          }, [m$1('iframe.embedly-embed[itemprop="video"][src="' + project().video_embed_url + '"][frameborder="0"][allowFullScreen]')]) : m$1('.project-image', {
              style: 'background-image:url(\'' + (project().original_image || project().project_img) + '\');'
          }), m$1('.w-hidden-small.w-hidden-tiny', [m$1.component(addressTag, { project: project }), m$1.component(categoryTag, { project: project })]), m$1('.project-blurb', project().headline), m$1('.project-share.w-hidden-small.w-hidden-tiny', m$1('.u-marginbottom-30.u-text-center-small-only', [m$1('.w-inline-block.fontcolor-secondary.fontsize-smaller.u-marginright-20', 'Compartilhar:'), project().permalink ? m$1.component(facebookButton, {
              url: 'https://www.catarse.me/' + project().permalink + '?ref=facebook&utm_source=facebook.com&utm_medium=social&utm_campaign=project_share'
          }) : '', project().permalink ? m$1.component(facebookButton, {
              messenger: true,
              url: 'https://www.catarse.me/' + project().permalink + '?ref=facebook&utm_source=facebook.com&utm_medium=messenger&utm_campaign=project_share'
          }) : '', m$1('button#more-share.btn.btn-inline.btn-medium.btn-terciary', {
              style: {
                  'transition': 'all 0.5s ease 0s'
              },
              onclick: ctrl.displayShareBox.toggle
          }, ['···', ' Mais']), ctrl.displayShareBox() ? m$1(projectShareBox, {
              project: project,
              displayShareBox: ctrl.displayShareBox
          }) : '']))]);
      }
  };

  var projectMode = {
      view: function view(ctrl, args) {
          var project = args.project(),
              mode = project.mode,
              modeImgSrc = mode === 'aon' ? '/assets/aon-badge.png' : '/assets/flex-badge.png',
              modeTitle = mode === 'aon' ? 'Campanha Tudo-ou-nada ' : 'Campanha Flexível ',
              goal = _$1.isNull(project.goal) ? 'não definida' : h.formatNumber(project.goal),
              buildTooltip = function buildTooltip(el) {
              return m$1.component(tooltip, {
                  el: el,
                  text: mode === 'aon' ? 'Somente receberá os recursos se atingir ou ultrapassar a meta até o dia ' + h.momentify(project.zone_expires_at, 'DD/MM/YYYY') + '.' : 'O realizador receberá todos os recursos quando encerrar a campanha, mesmo que não tenha atingido esta meta.',
                  width: 280
              });
          };

          return m$1('#' + mode + '.w-row', [m$1('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [!_$1.isEmpty(project) ? m$1('img[src="' + modeImgSrc + '"][width=\'30\']') : '']), m$1('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', [m$1('.fontsize-base.fontweight-semibold', 'Meta R$ ' + h.selfOrEmpty(goal, '--')), m$1('.w-inline-block.fontsize-smallest._w-inline-block', [!_$1.isEmpty(project) ? modeTitle : '', buildTooltip('span.w-inline-block.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary')])])]);
      }
  };

  var projectReminder = {
      controller: function controller(args) {
          var l = m$1.prop(false);
          var project = args.project,
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              storeReminderName = 'remind_' + project().project_id,
              popNotification = m$1.prop(false),
              submitReminder = function submitReminder() {
              if (!h.getUser()) {
                  h.storeAction(storeReminderName, submitReminder);
                  return h.navigateToDevise();
              }
              var loaderOpts = project().in_reminder ? models.projectReminder.deleteOptions(filterVM.parameters()) : models.projectReminder.postOptions({
                  project_id: project().project_id
              });
              l = postgrest$1.loaderWithToken(loaderOpts);

              l.load().then(function () {
                  project().in_reminder = !project().in_reminder;

                  if (project().in_reminder) {
                      popNotification(true);
                      setTimeout(function () {
                          popNotification(false);
                          m$1.redraw();
                      }, 5000);
                  } else {
                      popNotification(false);
                  }
              });
          };

          h.callStoredAction(storeReminderName, submitReminder);
          filterVM.project_id(project().project_id);

          return {
              l: l,
              submitReminder: submitReminder,
              popNotification: popNotification
          };
      },
      view: function view(ctrl, args) {
          var mainClass = args.type === 'button' ? '' : '.u-text-center.u-marginbottom-30',
              buttonClass = args.type === 'button' ? 'w-button btn btn-terciary btn-no-border' : 'btn-link link-hidden fontsize-small',
              hideTextOnMobile = args.hideTextOnMobile || false,
              project = args.project,
              onclickFunc = h.analytics.event({ cat: 'project_view', act: 'project_floatingreminder_click', project: project() }, ctrl.submitReminder);

          return m$1('#project-reminder' + mainClass, [m$1("a.btn.btn-small.btn-terciary.w-hidden-main.w-hidden-medium[data-ix='popshare'][href='#']", {
              onclick: onclickFunc
          }, project().in_reminder ? [m$1('span.fa.fa-heart'), ' Lembrete ativo'] : [m$1('span.fa.fa-heart-o'), ' Lembrar-me']), m$1('button[class="w-hidden-small w-hidden-tiny ' + buttonClass + ' ' + (project().in_reminder ? 'link-hidden-success' : 'fontcolor-secondary') + ' fontweight-semibold"]', {
              onclick: onclickFunc
          }, [ctrl.l() ? h.loader() : project().in_reminder ? m$1('span.fa.fa-heart') : m$1('span.fa.fa-heart-o')]), ctrl.popNotification() ? m$1.component(popNotification, {
              message: 'Ok! Vamos te mandar um lembrete por e-mail 48 horas antes do fim da campanha'
          }) : '']);
      }
  };

  var ownerMessageContent = {
      controller: function controller(args) {
          var l = m$1.prop(false),
              sendSuccess = m$1.prop(false),
              submitDisabled = m$1.prop(false),

          //sets default values when user is not logged in
          user = h.getUser() || { name: '', email: '' },
              from_name = m$1.prop(user.name),
              from_email = m$1.prop(user.email),
              content = m$1.prop('');

          var sendMessage = function sendMessage() {
              if (l()) {
                  return false;
              }
              submitDisabled(true);

              var loaderOpts = models.directMessage.postOptions({
                  from_name: from_name(),
                  from_email: from_email(),
                  user_id: h.getUser().user_id,
                  content: content(),
                  project_id: h.getCurrentProject().project_id,
                  to_user_id: h.getCurrentProject().project_user_id
              });

              l = postgrest.loaderWithToken(loaderOpts);

              l.load().then(sendSuccess(true));

              submitDisabled(false);
              return false;
          };

          return {
              sendMessage: sendMessage,
              submitDisabled: submitDisabled,
              sendSuccess: sendSuccess,
              userDetails: args,
              from_name: from_name,
              from_email: from_email,
              content: content,
              l: l
          };
      },
      view: function view(ctrl, args) {
          var successMessage = m$1('.modal-dialog-content.u-text-center', [m$1('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m$1('p.fontsize-large', 'Sua mensagem foi enviada com sucesso para ' + ctrl.userDetails().name + '. Você vai receber uma cópia no seu email e pode seguir a conversa por lá!')]),
              contactForm = [m$1('.modal-dialog-content', [m$1('.w-form', [m$1('form', { onsubmit: h.validate().submit([{
                  prop: ctrl.from_name,
                  rule: 'text'
              }, {
                  prop: ctrl.from_email,
                  rule: 'email'
              }, {
                  prop: ctrl.content,
                  rule: 'text'
              }], ctrl.sendMessage) }, [m$1('.w-row', [m$1('.w-col.w-col-6.w-sub-col', [m$1('label.fontsize-smaller', 'Seu nome'), m$1('input.w-input.text-field[value=\'' + ctrl.from_name() + '\'][type=\'text\'][required=\'required\']', {
              onchange: m$1.withAttr('value', ctrl.from_name),
              class: h.validate().hasError(ctrl.from_name) ? 'error' : ''
          })]), m$1('.w-col.w-col-6', [m$1('label.fontsize-smaller', 'Seu email'), m$1('input.w-input.text-field[value=\'' + ctrl.from_email() + '\'][type=\'text\'][required=\'required\']', {
              onchange: m$1.withAttr('value', ctrl.from_email),
              class: h.validate().hasError(ctrl.from_email) ? 'error' : ''
          })])]), m$1('label', 'Mensagem'), m$1('textarea.w-input.text-field.height-small[required=\'required\']', {
              onchange: m$1.withAttr('value', ctrl.content),
              class: h.validate().hasError(ctrl.content) ? 'error' : ''
          }), m$1('.u-marginbottom-10.fontsize-smallest.fontcolor-terciary', 'Você receberá uma cópia desta mensagem em seu email.'), m$1('.w-row', h.validationErrors().length ? _$1.map(h.validationErrors(), function (errors) {
              return m$1('span.fontsize-smallest.text-error', [m$1('span.fa.fa-exclamation-triangle'), ' ' + errors.message, m$1('br')]);
          }) : ''), m$1('.modal-dialog-nav-bottom', m$1('.w-row', m$1('.w-col.w-col-6.w-col-push-3', !ctrl.l() ? m$1('input.w-button.btn.btn-large[type="submit"][value="Enviar mensagem"]', { disabled: ctrl.submitDisabled() }) : h.loader())))])])])];

          return m$1('div', [m$1('.modal-dialog-header', m$1('.fontsize-large.u-text-center', 'Enviar mensagem')), ctrl.sendSuccess() ? successMessage : contactForm]);
      }
  };

  var projectUserCard = {
      controller: function controller(args) {
          return { displayModal: h.toggleProp(false, true) };
      },
      view: function view(ctrl, args) {
          var project = args.project;
          var contactModalC = [ownerMessageContent, args.userDetails];
          var userDetail = args.userDetails();

          return m$1('#user-card', !userDetail ? 'carregando...' : m$1('.u-marginbottom-30.u-text-center-small-only', [ctrl.displayModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: contactModalC
          }) : '', m$1('.w-row', [m$1('.w-col.w-col-4', [m$1('img.thumb.u-marginbottom-30.u-round[width="100"][itemprop="image"][src="' + userDetail.profile_img_thumbnail + '"]')]), m$1('.w-col.w-col-8', [m$1('.fontsize-small.link-hidden.fontweight-semibold.u-marginbottom-10.lineheight-tight[itemprop="name"]', [m$1('a.link-hidden[href="/users/' + userDetail.id + '"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_link', lbl: userDetail.id, project: project() }) }, userDetail.name)]), m$1('.fontsize-smallest', [h.pluralize(userDetail.total_published_projects, ' criado', ' criados'), m$1.trust('&nbsp;&nbsp;|&nbsp;&nbsp;'), h.pluralize(userDetail.total_contributed_projects, ' apoiado', ' apoiados')]), m$1('ul.w-hidden-tiny.w-hidden-small.w-list-unstyled.fontsize-smaller.fontweight-semibold.u-margintop-20.u-marginbottom-20', [!_$1.isEmpty(userDetail.facebook_link) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="' + userDetail.facebook_link + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_fb', lbl: userDetail.facebook_link, project: project() }) }, 'Perfil no Facebook')]) : '', !_$1.isEmpty(userDetail.twitter_username) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="https://twitter.com/' + userDetail.twitter_username + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_twitter', lbl: userDetail.twitter_username, project: project() }) }, 'Perfil no Twitter')]) : '', _$1.map(userDetail.links, function (link) {
              var parsedLink = h.parseUrl(link);

              return !_$1.isEmpty(parsedLink.hostname) ? m$1('li', [m$1('a.link-hidden[itemprop="url"][href="' + link + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_otherlinks', lbl: link, project: project() }) }, parsedLink.hostname)]) : '';
          })]), !_$1.isEmpty(userDetail) ? [m$1('a.w-button.btn.btn-terciary.btn-small.btn-inline[href=\'javascript:void(0);\']', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_sendmsg', lbl: userDetail.id, project: project() }, ctrl.displayModal.toggle) }, 'Enviar mensagem')] : '', args.project().is_admin_role ? m$1('p', userDetail.email) : ''])])]));
      }
  };

  var I18nScope$13 = _$1.partial(h.i18nScope, 'projects.project_sidebar');

  var projectSidebar = {
      controller: function controller(args) {
          var project = args.project,
              animateProgress = function animateProgress(el, isInitialized) {
              if (!isInitialized) {
                  (function () {
                      var animation = void 0,
                          progress = 0,
                          pledged = 0,
                          contributors = 0,
                          pledgedIncrement = project().pledged / project().progress,
                          contributorsIncrement = project().total_contributors / project().progress;

                      var progressBar = document.getElementById('progressBar'),
                          pledgedEl = document.getElementById('pledged'),
                          contributorsEl = document.getElementById('contributors'),
                          animate = function animate() {
                          animation = setInterval(incrementProgress, 28);
                      },
                          incrementProgress = function incrementProgress() {
                          if (progress <= parseInt(project().progress)) {
                              progressBar.style.width = progress + '%';
                              pledgedEl.innerText = 'R$ ' + h.formatNumber(pledged);
                              contributorsEl.innerText = parseInt(contributors) + ' pessoas';
                              el.innerText = progress + '%';
                              pledged = pledged + pledgedIncrement;
                              contributors = contributors + contributorsIncrement;
                              progress = progress + 1;
                          } else {
                              clearInterval(animation);
                          }
                      };

                      setTimeout(function () {
                          animate();
                      }, 1800);
                  })();
              }
          };

          return {
              animateProgress: animateProgress,
              displayShareBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              elapsed = project().elapsed_time,
              remaining = project().remaining_time,
              displayCardClass = function displayCardClass() {
              var states = {
                  'waiting_funds': 'card-waiting',
                  'successful': 'card-success',
                  'failed': 'card-error',
                  'draft': 'card-dark',
                  'in_analysis': 'card-dark',
                  'approved': 'card-dark'
              };

              return states[project().state] ? 'card u-radius zindex-10 ' + states[project().state] : '';
          },
              displayStatusText = function displayStatusText() {
              var states = {
                  'approved': I18n$1.t('display_status.approved', I18nScope$13()),
                  'online': h.existy(project().zone_expires_at) && project().open_for_contributions ? I18n$1.t('display_status.online', I18nScope$13({ date: h.momentify(project().zone_expires_at) })) : '',
                  'failed': I18n$1.t('display_status.failed', I18nScope$13({ date: h.momentify(project().zone_expires_at), goal: project().goal })),
                  'rejected': I18n$1.t('display_status.rejected', I18nScope$13()),
                  'in_analysis': I18n$1.t('display_status.in_analysis', I18nScope$13()),
                  'successful': I18n$1.t('display_status.successful', I18nScope$13({ date: h.momentify(project().zone_expires_at) })),
                  'waiting_funds': I18n$1.t('display_status.waiting_funds', I18nScope$13()),
                  'draft': I18n$1.t('display_status.draft', I18nScope$13())
              };

              return states[project().state];
          };

          return m$1('#project-sidebar.aside', [m$1('.project-stats', [m$1('.project-stats-inner', [m$1('.project-stats-info', [m$1('.u-marginbottom-20', [m$1('#pledged.fontsize-largest.fontweight-semibold.u-text-center-small-only', 'R$ ' + (project().pledged ? h.formatNumber(project().pledged) : '0')), m$1('.fontsize-small.u-text-center-small-only', [I18n$1.t('contributors_call', I18nScope$13()), m$1('span#contributors.fontweight-semibold', I18n$1.t('contributors_count', I18nScope$13({ count: project().total_contributors }))), !project().expires_at && elapsed ? ' em ' + I18n$1.t('datetime.distance_in_words.x_' + elapsed.unit, { count: elapsed.total }, I18nScope$13()) : ''])]), m$1('.meter', [m$1('#progressBar.meter-fill', {
              style: {
                  width: project().progress + '%'
              }
          })]), m$1('.w-row.u-margintop-10', [m$1('.w-col.w-col-5.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-small.fontweight-semibold.lineheight-tighter', (project().progress ? parseInt(project().progress) : '0') + '%')]), m$1('.w-col.w-col-7.w-col-small-6.w-col-tiny-6.w-clearfix', [m$1('.u-right.fontsize-small.lineheight-tighter', remaining && remaining.total ? [m$1('span.fontweight-semibold', remaining.total), I18n$1.t('remaining_time.' + remaining.unit, I18nScope$13({ count: remaining.total }))] : '')])])]), m$1('.w-row', [m$1.component(projectMode, {
              project: project
          })])]), project().open_for_contributions ? m$1('.back-project-btn-div', [m$1('.back-project--btn-row', [m$1('a#contribute_project_form.btn.btn-large.u-marginbottom-20[href="javascript:void(0);"]', {
              onclick: h.analytics.event({
                  cat: 'contribution_create',
                  act: 'contribution_button_click',
                  project: project()
              }, function () {
                  return h.navigateTo('/projects/' + project().project_id + '/contributions/new');
              })

          }, I18n$1.t('submit', I18nScope$13()))]), m$1('.back-project-btn-row-right', m$1.component(projectReminder, {
              project: project,
              type: 'link'
          }))]) : '', m$1('.friend-backed-card.project-page', [!_$1.isUndefined(project()) && project().contributed_by_friends ? m$1.component(projectFriends, { project: project() }) : '']), m$1('div[class="fontsize-smaller u-marginbottom-30 ' + displayCardClass() + '"]', displayStatusText())]), m$1('.project-share.w-hidden-main.w-hidden-medium', [m$1.component(addressTag, { project: project }), m$1.component(categoryTag, { project: project }), m$1('.u-marginbottom-30.u-text-center-small-only', m$1('button.btn.btn-inline.btn-medium.btn-terciary', {
              onclick: ctrl.displayShareBox.toggle
          }, 'Compartilhar este projeto')), ctrl.displayShareBox() ? m$1(projectShareBox, {
              project: project,
              displayShareBox: ctrl.displayShareBox
          }) : '']), m$1('.user-c', m$1.component(projectUserCard, {
              userDetails: args.userDetails,
              project: project
          }))]);
      }
  };

  var userContributionDetail = {
      controller: function controller(args) {
          var contribution = args.contribution,
              rewardDetails = args.rewardDetails,
              chosenReward = _$1.findWhere(rewardDetails(), { id: contribution.reward_id });

          return {
              contribution: contribution,
              chosenReward: chosenReward
          };
      },
      view: function view(ctrl, args) {
          var contribution = args.contribution;

          return m$1('.user-contribution-detail', [m$1('.w-col.w-col-4', [m$1('.fontsize-smallest.lineheight-tight.fontweight-semibold.u-marginbottom-10', 'Valor do apoio:'), m$1('.fontsize-large', 'R$' + contribution.value)]), m$1('.w-col.w-col-4', m$1.component(paymentStatus, { item: contribution })), m$1('.w-col.w-col-4', [m$1('.fontsize-smaller.fontweight-semibold.u-marginbottom-10', 'Recompensa:'), m$1('.fontsize-smallest.lineheight-tight.u-marginbottom-20', !_$1.isUndefined(ctrl.chosenReward) ? ctrl.chosenReward.description : 'Nenhuma recompensa selecionada.'), m$1('.fontsize-smallest.lineheight-looser', !_$1.isUndefined(ctrl.chosenReward) ? [m$1('span.fontweight-semibold', 'Estimativa de entrega: '), h.momentify(ctrl.chosenReward.deliver_at, 'MMM/YYYY')] : '')])]);
      }
  };

  var getUserProjectContributions = function getUserProjectContributions(user_id, project_id, states) {
      var vm = postgrest$1.filtersVM({
          user_id: 'eq',
          project_id: 'eq',
          state: 'in'
      });

      vm.user_id(user_id);
      vm.project_id(project_id);
      vm.state(states);

      var lProjectContributions = postgrest$1.loaderWithToken(models.userContribution.getPageOptions(vm.parameters()));

      return lProjectContributions.load();
  };

  var contributionVM = {
      getUserProjectContributions: getUserProjectContributions
  };

  var projectHeader = {
      controller: function controller(args) {
          var project = args.project,
              currentUser = h.getUser(),
              projectContributions = m$1.prop([]);

          if (h.isProjectPage() && currentUser && !_$1.isUndefined(project())) {
              contributionVM.getUserProjectContributions(currentUser.user_id, project().project_id, ['paid', 'refunded', 'pending_refund']).then(projectContributions);
          }

          return {
              projectContributions: projectContributions,
              showContributions: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              rewardDetails = args.rewardDetails;

          return !_$1.isUndefined(project()) ? m$1('#project-header', [m$1('.w-section.section-product.' + project().mode), m$1('.w-section.page-header.u-text-center', [m$1('.w-container', [m$1('h1.fontsize-larger.fontweight-semibold.project-name[itemprop="name"]', h.selfOrEmpty(project().name || project().project_name)), m$1('h2.fontsize-base.lineheight-looser[itemprop="author"]', ['por ', project().user ? project().user.name : project().owner_name ? project().owner_name : '']), !_$1.isEmpty(ctrl.projectContributions()) ? m$1(".card.card-terciary.u-radius.u-margintop-20", [m$1(".fontsize-small.u-text-center", [m$1("span.fa.fa-thumbs-up"), " Você é apoiador deste projeto! ", m$1("a.alt-link[href='javascript:void(0);']", { onclick: ctrl.showContributions.toggle }, "Detalhes")]), ctrl.showContributions() ? m$1(".card.u-margintop-20", m$1(".w-row", _$1.map(ctrl.projectContributions(), function (contribution) {
              return m$1.component(userContributionDetail, { contribution: contribution, rewardDetails: rewardDetails });
          }))) : '']) : ''])]), m$1('.w-section.project-main', [m$1('.w-container', [m$1('.w-row.project-main', [m$1('.w-col.w-col-8.project-highlight', m$1.component(projectHighlight, {
              project: project
          })), m$1('.w-col.w-col-4', m$1.component(projectSidebar, {
              project: project,
              userDetails: args.userDetails
          }))])])])]) : m$1('');
      }
  };

  var projectTabs = {
      controller: function controller(args) {
          var isFixed = m$1.prop(false),
              originalPosition = m$1.prop(-1);

          var fixOnScroll = function fixOnScroll(el) {
              return function () {
                  var viewportOffset = el.getBoundingClientRect();

                  if (window.scrollY <= originalPosition()) {
                      originalPosition(-1);
                      isFixed(false);
                      m$1.redraw();
                  }

                  if (viewportOffset.top < 0 || window.scrollY > originalPosition() && originalPosition() > 0) {
                      if (!isFixed()) {
                          originalPosition(window.scrollY);
                          isFixed(true);
                          m$1.redraw();
                      }
                  }
              };
          };

          var navDisplay = function navDisplay(el, isInitialized) {
              if (!isInitialized) {
                  var fixNavBar = fixOnScroll(el);
                  window.addEventListener('scroll', fixNavBar);
              }
          };

          return {
              navDisplay: navDisplay,
              isFixed: isFixed
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              rewards = args.rewardDetails;

          var mainClass = !ctrl.isFixed() || project().is_owner_or_admin ? '.w-section.project-nav' : '.w-section.project-nav.project-nav-fixed';

          return m$1('nav-wrapper', project() ? [m$1(mainClass, {
              config: ctrl.navDisplay
          }, [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-8', [!_.isEmpty(rewards()) ? m$1('a[id="rewards-link"][class="w-hidden-main w-hidden-medium dashboard-nav-link mf  ' + (h.hashMatch('#rewards') ? 'selected' : '') + '"][href="/' + project().permalink + '#rewards"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_rewards_view', project: project() })
          }, 'Recompensas') : m$1('a[id="rewards-link"][class="w-hidden-main w-hidden-medium dashboard-nav-link mf ' + (h.hashMatch('#contribution_suggestions') ? 'selected' : '') + '"][href="/' + project().permalink + '#contribution_suggestions"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_contribsuggestions_view', project: project() })
          }, 'Valores Sugeridos'), m$1('a[id="about-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#about') || h.hashMatch('') ? 'selected' : '') + '"][href="#about"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_about_view', project: project() })
          }, 'Sobre'), m$1('a[id="posts-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#posts') ? 'selected' : '') + '"][href="#posts"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_posts_view', project: project() })
          }, ['Novidades ', m$1('span.badge', project() ? project().posts_count : '')]), m$1('a[id="contributions-link"][class="w-hidden-small w-hidden-tiny dashboard-nav-link mf ' + (h.hashMatch('#contributions') ? 'selected' : '') + '"][href="#contributions"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_contributions_view', project: project() })
          }, ['Apoiadores ', m$1('span.badge.w-hidden-small.w-hidden-tiny', project() ? project().total_contributors : '-')]), m$1('a[id="comments-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#comments') ? 'selected' : '') + '"][href="#comments"]', {
              style: 'float: left;',
              onclick: h.analytics.event({
                  cat: 'project_view', act: 'project_comments_view', project: project() })
          }, ['Comentários ', project() ? m$1('fb:comments-count[href="http://www.catarse.me/' + project().permalink + '"][class="badge project-fb-comment w-hidden-small w-hidden-tiny"][style="display: inline"]', m$1.trust('&nbsp;')) : '-'])]), project() ? m$1('.w-col.w-col-4.w-hidden-small.w-hidden-tiny', project().open_for_contributions ? [m$1('.w-row.project-nav-back-button', [m$1('.w-col.w-col-6.w-col-medium-8', [m$1('a.w-button.btn[href="/projects/' + project().project_id + '/contributions/new"]', {
              onclick: h.analytics.event({ cat: 'contribution_create', act: 'contribution_floatingbtn_click', project: project() })
          }, 'Apoiar ‍este projeto')]), m$1('.w-col.w-col-6.w-col-medium-4', {
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_floatingreminder_click', project: project() })
          }, [m$1.component(projectReminder, { project: project, type: 'button', hideTextOnMobile: true })])])] : '') : ''])])]), ctrl.isFixed() && !project().is_owner_or_admin ? m$1('.w-section.project-nav') : ''] : '');
      }
  };

  var projectRewardList = {
      controller: function controller(args) {
          var storeKey = 'selectedReward',
              vm = rewardVM;

          var setInput = function setInput(el, isInitialized) {
              return !isInitialized ? el.focus() : false;
          };

          var submitContribution = function submitContribution() {
              var valueFloat = h.monetaryToFloat(vm.contributionValue);

              if (valueFloat < vm.selectedReward().minimum_value) {
                  vm.error('O valor de apoio para essa recompensa deve ser de no mínimo R$' + vm.selectedReward().minimum_value);
              } else {
                  vm.error('');

                  // THIS CHECK IS ONLY NECESSARY IF WHEN WE START ROUTING DIRECTLY TO THE /contributions/edit page
                  // if (!h.getUser()) {
                  //     h.storeObject(storeKey, {value: valueFloat, reward: vm.selectedReward()});

                  //     return h.navigateToDevise('/' + projectVM.currentProject().permalink);
                  // } else {
                  // vm.contributionValue(valueFloat);
                  //h.navigateTo(`/projects/${projectVM.currentproject().project_id}/contributions/new?reward_id=${vm.selectedReward().id}`);
                  h.navigateTo('/projects/' + projectVM.currentProject().project_id + '/contributions/fallback_create?contribution%5Breward_id%5D=' + vm.selectedReward().id + '&contribution%5Bvalue%5D=' + valueFloat);
                  // m.route(`/projects/${projectVM.currentproject().project_id}/payment`, {
                  //    project_user_id: projectVM.currentProject().user_id
                  // });
                  // }
              }

              return false;
          };

          if (h.getStoredObject(storeKey)) {
              var _h$getStoredObject = h.getStoredObject(storeKey);

              var value = _h$getStoredObject.value;
              var reward = _h$getStoredObject.reward;


              h.removeStoredObject(storeKey);
              vm.selectedReward(reward);
              vm.contributionValue(h.applyMonetaryMask(value + ',00'));
              submitContribution();
          }

          return {
              applyMask: vm.applyMask,
              error: vm.error,
              submitContribution: submitContribution,
              openedReward: vm.selectedReward,
              selectReward: vm.selectReward,
              contributionValue: vm.contributionValue,
              setInput: setInput
          };
      },
      view: function view(ctrl, args) {
          //FIXME: MISSING ADJUSTS
          // - add draft admin modifications
          var project = args.project() || { open_for_contributions: false };
          return m$1('#rewards.u-marginbottom-30', _$1.map(args.rewardDetails(), function (reward) {

              return m$1('div[class="' + (h.rewardSouldOut(reward) ? 'card-gone' : 'card-reward ' + (project.open_for_contributions ? 'clickable' : '')) + ' card card-secondary u-marginbottom-10"]', {
                  onclick: h.analytics.event({
                      cat: 'contribution_create',
                      act: 'contribution_reward_click',
                      lbl: reward.minimum_value,
                      project: project,
                      extraData: {
                          reward_id: reward.id,
                          reward_value: reward.minimum_value
                      }
                  }, ctrl.selectReward(reward))
              }, [m$1('.u-marginbottom-20', [m$1('.fontsize-base.fontweight-semibold', 'Para R$ ' + h.formatNumber(reward.minimum_value) + ' ou mais'), m$1('.fontsize-smaller.fontweight-semibold', h.pluralize(reward.paid_count, ' apoio', ' apoios')), reward.maximum_contributions > 0 ? [reward.waiting_payment_count > 0 ? m$1('.maximum_contributions.in_time_to_confirm.clearfix', [m$1('.pending.fontsize-smallest.fontcolor-secondary', h.pluralize(reward.waiting_payment_count, ' apoio em prazo de confirmação', ' apoios em prazo de confirmação.'))]) : '', h.rewardSouldOut(reward) ? m$1('.u-margintop-10', [m$1('span.badge.badge-gone.fontsize-smaller', 'Esgotada')]) : m$1('.u-margintop-10', [m$1('span.badge.badge-attention.fontsize-smaller', [m$1('span.fontweight-bold', 'Limitada'), ' (' + h.rewardRemaning(reward) + ' de ' + reward.maximum_contributions + ' disponíveis)'])])] : '']), m$1('.fontsize-smaller.u-margintop-20', m$1.trust(h.simpleFormat(h.strip(reward.description)))), !_$1.isEmpty(reward.deliver_at) ? m$1('.fontsize-smaller', [m$1('b', 'Estimativa de Entrega: '), h.momentify(reward.deliver_at, 'MMM/YYYY')]) : '', project.open_for_contributions && !h.rewardSouldOut(reward) ? [ctrl.openedReward().id === reward.id ? m$1('.w-form', [m$1('form.u-margintop-30', {
                  onsubmit: ctrl.submitContribution
              }, [m$1('.divider.u-marginbottom-20'), m$1('.fontcolor-secondary.u-marginbottom-10', 'Valor do apoio'), m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-3', m$1('.back-reward-input-reward.placeholder', 'R$')), m$1('.w-col.w-col-9.w-col-small-9.w-col-tiny-9', m$1('input.w-input.back-reward-input-reward[type="tel"]', {
                  config: ctrl.setInput,
                  onkeyup: m$1.withAttr('value', ctrl.applyMask),
                  value: ctrl.contributionValue()
              }))]), m$1('input.w-button.btn.btn-medium[type="submit"][value="Continuar >"]'), ctrl.error().length > 0 ? m$1('.text-error', [m$1('br'), m$1('span.fa.fa-exclamation-triangle'), ' ' + ctrl.error()]) : ''])]) : ''] :
              // m('.project-reward-box-hover', [
              //     m('.project-reward-box-select-text.u-text-center', 'Selecione essa recompensa')
              // ])
              '']);
          }));
      }
  };

  var projectSuggestedContributions = {
      view: function view(ctrl, args) {
          var project = args.project();

          var suggestionUrl = function suggestionUrl(amount) {
              return '/projects/' + project.project_id + '/contributions/new?amount=' + amount;
          },
              suggestedValues = [10, 25, 50, 100];

          return m$1('#suggestions', _$1.map(suggestedValues, function (amount) {
              return project ? m$1('a[href="' + suggestionUrl(amount) + '"].card-reward.card-big.card-secondary.u-marginbottom-20', [m$1('.fontsize-larger', 'R$ ' + amount)]) : '';
          }));
      }
  };

  var projectContributions = {
      controller: function controller(args) {
          var contributionsPerLocation = m$1.prop([]),
              contributionsPerDay = m$1.prop([]),
              listVM = postgrest$1.paginationVM(models.contributor),
              filterStats = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              groupedCollection = function groupedCollection() {
              var collection = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

              var grouped = [[]],
                  group = 0;

              _$1.map(collection, function (item, index) {
                  if (grouped[group].length >= 3) {
                      group = group + 1;
                      grouped[group] = [];
                  }

                  grouped[group].push(item);
              });

              return grouped;
          },
              contributionsStats = m$1.prop({});

          filterVM.project_id(args.project().project_id);
          filterStats.project_id(args.project().project_id);

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }
          //TODO: Abstract table fetch and contruction logic to contributions-vm to avoid insights.js duplicated code.
          var lContributionsPerDay = postgrest$1.loader(models.projectContributionsPerDay.getRowOptions(filterStats.parameters()));
          lContributionsPerDay.load().then(contributionsPerDay);

          var contributionsPerLocationTable = [['Estado', 'Apoios', 'R$ apoiados (% do total)']];
          var buildPerLocationTable = function buildPerLocationTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  var column = [];

                  column.push(contribution.state_acronym || 'Outro/other');
                  column.push(contribution.total_contributions);
                  column.push([contribution.total_contributed, [//Adding row with custom comparator => read project-data-table description
                  m$1('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_contributed, 2, 3), m$1('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerLocationTable.push(column);
              }) : [];
          };

          var lContributionsPerLocation = postgrest$1.loader(models.projectContributionsPerLocation.getRowOptions(filterStats.parameters()));
          lContributionsPerLocation.load().then(buildPerLocationTable);

          var lContributionsStats = postgrest$1.loader(models.projectContributiorsStat.getRowOptions(filterStats.parameters()));
          lContributionsStats.load().then(function (data) {
              return contributionsStats(_$1.first(data));
          });

          return {
              listVM: listVM,
              filterVM: filterVM,
              groupedCollection: groupedCollection,
              lContributionsStats: lContributionsStats,
              contributionsPerLocationTable: contributionsPerLocationTable,
              lContributionsPerLocation: lContributionsPerLocation,
              contributionsPerDay: contributionsPerDay,
              lContributionsPerDay: lContributionsPerDay,
              contributionsStats: contributionsStats
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM,
              stats = ctrl.contributionsStats(),
              groupedCollection = ctrl.groupedCollection(list.collection());

          return m$1('#project_contributions', m$1('#contributions_top', [m$1('.section.w-section', m$1('.w-container', m$1('.w-row', ctrl.lContributionsStats() ? h.loader() : !_$1.isEmpty(stats) ? [m$1('.u-marginbottom-20.u-text-center-small-only.w-col.w-col-6', [m$1('.fontsize-megajumbo', stats.total), m$1('.fontsize-large', 'pessoas apoiam este projeto')]), m$1('.w-col.w-col-6', m$1('.card.card-terciary.u-radius', m$1('.w-row', [m$1('.u-marginbottom-20.w-col.w-col-6.w-col-small-6', [m$1('.fontweight-semibold.u-marginbottom-10', 'Apoiadores novos'), m$1('.fontsize-largest.u-marginbottom-10', Math.floor(stats.new_percent) + '%'), m$1('.fontsize-smallest', 'apoiadores que nunca tinham apoiado um projeto no Catarse')]), m$1('.w-col.w-col-6.w-col-small-6', [m$1('.divider.u-marginbottom-20.w-hidden-main.w-hidden-medium.w-hidden-small'), m$1('.fontweight-semibold.u-marginbottom-10', 'Apoiadores recorrentes'), m$1('.fontsize-largest.u-marginbottom-10', Math.ceil(stats.returning_percent) + '%'), m$1('.fontsize-smallest', 'apoiadores que já tinham apoiado um projeto no Catarse')])])))] : ''))), m$1('.divider.w-section'), m$1('.section.w-section', m$1('.w-container', [m$1('.fontsize-large.fontweight-semibold.u-marginbottom-40.u-text-center', 'Apoiadores'), m$1('.project-contributions.w-clearfix', _$1.map(groupedCollection, function (group, idx) {
              return m$1('.w-row', _$1.map(group, function (contribution) {
                  return m$1('.project-contribution-item.w-col.w-col-4', [
                  // here new card
                  m$1('.card.card-backer.u-marginbottom-20.u-radius.u-text-center', [m$1('a[href="/users/' + contribution.user_id + '"][style="display: block;"]', {
                      onclick: h.analytics.event({
                          cat: 'project_view',
                          act: 'project_backer_link',
                          lbl: contribution.user_id,
                          project: args.project()
                      })
                  }, [m$1('img.thumb.u-marginbottom-10.u-round[src="' + (!_$1.isEmpty(contribution.data.profile_img_thumbnail) ? contribution.data.profile_img_thumbnail : '/assets/catarse_bootstrap/user.jpg') + '"]')]), m$1('a.fontsize-base.fontweight-semibold.lineheigh-tight.link-hidden-dark[href="/users/' + contribution.user_id + '"]', {
                      onclick: h.analytics.event({
                          cat: 'project_view',
                          act: 'project_backer_link',
                          lbl: contribution.user_id,
                          project: args.project()
                      })
                  }, contribution.data.name), m$1('.fontcolor-secondary.fontsize-smallest.u-marginbottom-10', contribution.data.city + ',' + contribution.data.state), m$1('.fontsize-smaller', [m$1('span.fontweight-semibold', contribution.data.total_contributed_projects), ' apoiados  |  ', m$1('span.fontweight-semibold', contribution.data.total_published_projects), ' criado'])])
                  // new card
                  ]);
              }));
          })),
          //m('.btn-bottom-card.w-row', [
          //    m('.w-col.w-col-3.w-col-small-4.w-col-tiny-3'),
          //    m('.w-col.w-col-6.w-col-small-4.w-col-tiny-6', [
          //        m("a.btn.btn-medium.w-button[href='#']", "Seguindo")
          //    ]),
          //    m(".w-col.w-col-3.w-col-small-4.w-col-tiny-3")
          //])
          m$1('.w-row.u-marginbottom-40.u-margintop-20', [m$1('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])]))]), m$1('.before-footer.bg-gray.section.w-section', m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m$1.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: 'R$ arrecadados por dia',
              dataKey: 'total_amount',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              },
              emptyState: 'Apoios não contabilizados'
          }) : h.loader()])]), m$1('.w-row', m$1('.w-col.w-col-12.u-text-center', [m$1('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', 'De onde vem os apoios'), !ctrl.lContributionsPerLocation() ? !_$1.isEmpty(_$1.rest(ctrl.contributionsPerLocationTable)) ? m$1.component(projectDataTable, {
              table: ctrl.contributionsPerLocationTable,
              defaultSortIndex: -2
          }) : '' : h.loader()]))])));
      }
  };

  var projectReport = {
    controller: function controller(args) {
      var displayForm = h.toggleProp(false, true),
          sendSuccess = m$1.prop(false),
          submitDisabled = m$1.prop(false),
          user = h.getUser(),
          email = m$1.prop(user.email),
          details = m$1.prop(''),
          reason = m$1.prop(''),
          l = m$1.prop(false),
          checkLogin = function checkLogin() {
        if (user) {
          displayForm.toggle();
        } else {
          window.location.href = '/login';
        }
      },
          sendReport = function sendReport() {
        submitDisabled(true);
        var loaderOpts = models.projectReport.postOptions({
          email: email(),
          details: details(),
          reason: reason(),
          project_id: h.getCurrentProject().project_id
        });
        l = postgrest$1.loaderWithToken(loaderOpts);

        l.load().then(sendSuccess(true));
        submitDisabled(false);
        return false;
      };

      return {
        checkLogin: checkLogin,
        displayForm: displayForm,
        sendSuccess: sendSuccess,
        submitDisabled: submitDisabled,
        sendReport: sendReport,
        user: user,
        email: email,
        details: details,
        reason: reason
      };
    },
    view: function view(ctrl, args) {
      var user = ctrl.user;
      return m$1('.card.card-terciary.u-radius', [m$1('.fontsize-small.u-marginbottom-20', ['Este projeto desrespeita', m$1.trust('&nbsp;'), m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638\'][target=\'_blank\']', 'nossas regras? ')]), ctrl.sendSuccess() ? m$1('.w-form', m$1('p', 'Obrigado! A sua denúncia foi recebida.')) : [m$1('.a.w-button.btn.btn-medium.btn-terciary.btn-inline[href=\'javascript:void(0);\']', { onclick: ctrl.checkLogin }, 'Denunciar este projeto'), ctrl.displayForm() ? m$1('#report-form.u-margintop-30', m$1('.w-form', m$1('form', { onsubmit: ctrl.sendReport }, [m$1('.fontsize-small.fontweight-semibold.u-marginbottom-10', 'Por que você está denunciando este projeto?'), m$1('select.w-select.text-field.positive[required=\'required\']', { onchange: m$1.withAttr('value', ctrl.reason) }, [m$1('option[value=\'\']', 'Selecione um motivo'), m$1('option[value=\'Violação de propriedade intelectual\']', 'Violação de propriedade intelectual'), m$1('option[value=\'Calúnia, injúria, difamação ou discriminação\']', 'Calúnia, injúria, difamação ou discriminação'), m$1('option[value=\'Escopo de projeto proibido\']', 'Escopo de projeto proibido'), m$1('option[value=\'Recompensas proibidas\']', 'Recompensas proibidas'), m$1('option[value=\'Cenas de sexo explícitas e gratuitas\']', 'Cenas de sexo explícitas e gratuitas'), m$1('option[value=\'Abuso de SPAM\']', 'Abuso de SPAM'), m$1('option[value=\'Outros\']', 'Outros')]), m$1('textarea.w-input.text-field.positive.u-marginbottom-30', { placeholder: 'Por favor, dê mais detalhes que nos ajudem a identificar o problema', onchange: m$1.withAttr('value', ctrl.details) }), m$1('input.w-button.btn.btn-medium.btn-inline.btn-dark[type=\'submit\'][value=\'Enviar denúncia\']', { disabled: ctrl.submitDisabled() })]))) : '']]);
    }
  };

  var projectAbout = {
      view: function view(ctrl, args) {
          var project = args.project() || {},
              onlineDays = function onlineDays() {
              var diff = moment(project.zone_online_date).diff(moment(project.zone_expires_at)),
                  duration = moment.duration(diff);

              return -Math.ceil(duration.asDays());
          };
          var fundingPeriod = function fundingPeriod() {
              return project.is_published && h.existy(project.zone_expires_at) ? m$1('.funding-period', [m$1('.fontsize-small.fontweight-semibold.u-text-center-small-only', 'Período de campanha'), m$1('.fontsize-small.u-text-center-small-only', h.momentify(project.zone_online_date) + ' - ' + h.momentify(project.zone_expires_at) + ' (' + onlineDays() + ' dias)')]) : '';
          };

          return m$1('#project-about', [m$1('.project-about.w-col.w-col-8', {
              config: h.UIHelper()
          }, [m$1('p.fontsize-base', [m$1('strong', 'O projeto')]), m$1('.fontsize-base[itemprop="about"]', m$1.trust(h.selfOrEmpty(project.about_html, '...'))), project.budget ? [m$1('p.fontsize-base.fontweight-semibold', 'Orçamento'), m$1('p.fontsize-base', m$1.trust(project.budget))] : '', m$1.component(projectReport)]), m$1('.w-col.w-col-4.w-hidden-small.w-hidden-tiny', !_.isEmpty(args.rewardDetails()) ? [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-30', 'Recompensas'), m$1.component(projectRewardList, {
              project: args.project,
              rewardDetails: args.rewardDetails
          }), fundingPeriod()] : [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-30', 'Sugestões de apoio'), m$1.component(projectSuggestedContributions, { project: args.project }), fundingPeriod()])]);
      }
  };

  var projectComments = {
      controller: function controller() {
          var loadComments = function loadComments(el, isInitialized) {
              return function (el, isInitialized) {
                  if (isInitialized) {
                      return;
                  }
                  h.fbParse();
              };
          };

          return { loadComments: loadComments };
      },
      view: function view(ctrl, args) {
          var project = args.project();
          return m$1('.w-row', [m$1('.w-col.w-col-7', m$1('.fb-comments[data-href="http://www.catarse.me/' + project.permalink + '"][data-num-posts=50][data-width="610"]', { config: ctrl.loadComments() })), m$1('.w-col.w-col-5', m$1.component(projectReport))]);
      }
  };

  var projectPosts = {
      controller: function controller(args) {
          var listVM = postgrest$1.paginationVM(models.projectPostDetail),
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq',
              id: 'eq'
          });

          filterVM.project_id(args.project().project_id);

          if (_$1.isNumber(args.post_id)) {
              filterVM.id(args.post_id);
          }

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }

          return {
              listVM: listVM,
              filterVM: filterVM
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM,
              project = args.project() || {};

          return m$1('.project-posts.w-section', [m$1('.w-container.u-margintop-20', [project.is_owner_or_admin ? [!list.isLoading() ? _$1.isEmpty(list.collection()) ? m$1('.w-hidden-small.w-hidden-tiny', [m$1('.fontsize-base.u-marginbottom-30.u-margintop-20', 'Toda novidade publicada no Catarse é enviada diretamente para o email de quem já apoiou seu projeto e também fica disponível para visualização no site. Você pode optar por deixá-la pública, ou visível somente para seus apoiadores aqui nesta aba.')]) : '' : '', m$1('.w-row.u-marginbottom-20', [m$1('.w-col.w-col-4'), m$1('.w-col.w-col-4', [m$1('a.btn.btn-edit.btn-small[href=\'/pt/projects/' + project.project_id + '/edit#posts\']', 'Escrever novidade')]), m$1('.w-col.w-col-4')])] : '', _$1.map(list.collection(), function (post) {
              return m$1('.w-row', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10', [m$1('.post', [m$1('.u-marginbottom-60 .w-clearfix', [m$1('.fontsize-small.fontcolor-secondary.u-text-center', h.momentify(post.created_at)), m$1('p.fontweight-semibold.fontsize-larger.u-text-center.u-marginbottom-30', [m$1('a.link-hidden[href="/projects/' + post.project_id + '/posts/' + post.id + '#posts"]', post.title)]), !_$1.isEmpty(post.comment_html) ? m$1('.fontsize-base', m$1.trust(post.comment_html)) : m$1('.fontsize-base', 'Post exclusivo para apoiadores.')]), m$1('.divider.u-marginbottom-60')])]), m$1('.w-col.w-col-1')]);
          }), m$1('.w-row', [m$1('.w-col.w-col-2.w-col-push-5', [!_$1.isUndefined(args.post_id) ? '' : !list.isLoading() ? list.isLastPage() ? 'Nenhuma novidade.' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])]);
      }
  };

  var projectMain = {
      controller: function controller(args) {
          var hash = m$1.prop(window.location.hash),
              displayTabContent = function displayTabContent(project) {
              var c_opts = {
                  project: project,
                  post_id: args.post_id
              },
                  tabs = {
                  '#rewards': m$1('.w-col.w-col-12', m$1.component(projectRewardList, _$1.extend({}, {
                      rewardDetails: args.rewardDetails
                  }, c_opts))),
                  '#contribution_suggestions': m$1.component(projectSuggestedContributions, c_opts),
                  '#contributions': m$1.component(projectContributions, c_opts),
                  '#about': m$1.component(projectAbout, _$1.extend({}, {
                      rewardDetails: args.rewardDetails
                  }, c_opts)),
                  '#comments': m$1.component(projectComments, c_opts),
                  '#posts': m$1.component(projectPosts, c_opts)
              };

              if (_$1.isNumber(args.post_id)) {
                  window.location.hash = 'posts';
              }

              hash(window.location.hash);

              if (_$1.isEmpty(hash()) || hash() === '#_=_' || hash() === '#preview') {
                  return tabs['#about'];
              }

              return tabs[hash()];
          };

          h.redrawHashChange();

          return {
              displayTabContent: displayTabContent,
              hash: hash
          };
      },
      view: function view(ctrl, args) {
          return m$1('section.section[itemtype="http://schema.org/CreativeWork"]', [m$1('' + (ctrl.hash() !== '#contributions' ? '.w-container' : '.about-tab-content'), [m$1('.w-row', args.project() ? ctrl.displayTabContent(args.project) : h.loader())])]);
      }
  };

  var projectsShow = {
      controller: function controller(args) {
          var project_id = args.project_id;
          var project_user_id = args.project_user_id;


          h.analytics.windowScroll({ cat: 'project_view', act: 'project_page_scroll' });

          if (project_id) {
              projectVM.init(project_id, project_user_id);
          } else {
              projectVM.getCurrentProject();
          }

          return projectVM;
      },
      view: function view(ctrl, args) {
          var project = ctrl.currentProject;

          return m$1('.project-show', {
              config: ctrl.setProjectPageTitle()
          }, [m$1.component(projectHeader, {
              project: project,
              rewardDetails: ctrl.rewardDetails,
              userDetails: ctrl.userDetails
          }), m$1.component(projectTabs, {
              project: project,
              rewardDetails: ctrl.rewardDetails
          }), m$1.component(projectMain, {
              project: project,
              post_id: args.post_id,
              rewardDetails: ctrl.rewardDetails
          }), project() && project().is_owner_or_admin ? m$1.component(projectDashboardMenu, {
              project: project
          }) : '']);
      }
  };

  var paymentVM = function paymentVM(mode) {
      var fields = {
          completeName: m.prop(''),
          email: m.prop(''),
          anonymous: m.prop(''),
          countries: m.prop(),
          userCountryId: m.prop(),
          zipCode: m.prop(''),
          street: m.prop(''),
          number: m.prop(''),
          addressComplement: m.prop(''),
          neighbourhood: m.prop(''),
          city: m.prop(''),
          states: m.prop([]),
          userState: m.prop(),
          ownerDocument: m.prop(''),
          phone: m.prop(''),
          errors: m.prop([])
      },
          faq = I18n$1.translations[I18n$1.currentLocale()].projects.faq[mode],
          currentUser = h.getUser(),
          countriesLoader = postgrest$1.loader(models.country.getPageOptions()),
          statesLoader = postgrest$1.loader(models.state.getPageOptions());

      var populateForm = function populateForm(fetchedData) {
          var data = _.first(fetchedData);

          fields.completeName(data.name);
          fields.email(data.email);
          fields.city(data.address.city);
          fields.zipCode(data.address.zipcode);
          fields.street(data.address.street);
          fields.number(data.address.number);
          fields.addressComplement(data.address.complement);
          fields.userState(data.address.state);
          fields.userCountryId(data.address.country_id);
          fields.ownerDocument(data.owner_document);
          fields.phone(data.address.phonenumber);
          fields.neighbourhood(data.address.neighbourhood);
      };

      var isInternational = function isInternational() {
          return !_.isEmpty(fields.countries()) ? fields.userCountryId() != _.findWhere(fields.countries(), { name: 'Brasil' }).id : false;
      };

      var checkEmptyFields = function checkEmptyFields(checkedFields) {
          return _.map(checkedFields, function (field) {
              if (_.isEmpty(String(fields[field]()).trim())) {
                  fields.errors().push({ field: field, message: 'O campo não pode ser vazio.' });
              }
          });
      };

      var checkEmail = function checkEmail() {
          var isValid = h.validateEmail(fields.email());

          if (!isValid) {
              fields.errors().push({ field: 'email', message: 'E-mail inválido.' });
          }
      };

      var checkDocument = function checkDocument() {
          var isValid = h.validateCpf(fields.ownerDocument().replace(/[\.|\-]*/g, ''));

          if (!isValid) {
              fields.errors().push({ field: 'ownerDocument', message: 'CPF inválido.' });
          }
      };

      var validate = function validate() {
          fields.errors([]);

          checkEmptyFields(['completeName', 'street', 'number', 'neighbourhood', 'city']);

          checkEmail();

          if (!isInternational()) {
              checkEmptyFields(['phone']);
              checkDocument();
          }

          return _.isEmpty(fields.errors());
      };

      var resetFieldError = function resetFieldError(fieldName) {
          return function () {
              var errors = fields.errors(),
                  errorField = _.findWhere(fields.errors(), { field: fieldName }),
                  newErrors = _.compose(fields.errors, _.without);

              return newErrors(fields.errors(), errorField);
          };
      };

      countriesLoader.load().then(fields.countries);
      statesLoader.load().then(fields.states);
      userVM.fetchUser(currentUser.user_id, false).then(populateForm);

      return {
          fields: fields,
          validate: validate,
          isInternational: isInternational,
          resetFieldError: resetFieldError,
          faq: faq
      };
  };

  var I18nScope$14 = _.partial(h.i18nScope, 'projects.faq');

  var faqBox = {
      controller: function controller(args) {
          var mode = args.mode,
              questions = args.faq.questions,
              selectedQuestion = m$1.prop(-1),
              scopedQuestions = m$1.prop(questions);

          var selectQuestion = function selectQuestion(idx) {
              return function () {
                  return selectedQuestion(idx);
              };
          };

          var updateQuestionsData = function updateQuestionsData(data) {
              //Rewrites questions from translate with proper scope
              var user = data[0];
              var updatedQuestions = _.map(questions, function (quest, idx) {
                  return {
                      question: quest.question,
                      answer: I18n$1.t(mode + '.questions.' + idx + '.answer', I18nScope$14({ userLink: '/users/' + user.id, userName: user.name }))
                  };
              });

              scopedQuestions(updatedQuestions);
          };

          userVM.fetchUser(args.projectUserId, false).then(updateQuestionsData);

          return {
              scopedQuestions: scopedQuestions,
              selectQuestion: selectQuestion,
              selectedQuestion: selectedQuestion
          };
      },
      view: function view(ctrl, args) {
          return m$1('.w-hidden-small.w-hidden-tiny.card.u-radius', [m$1(".w-row.u-marginbottom-30", [m$1(".w-col.w-col-2.w-col-small-2.w-col-tiny-2", m$1("img[width='30']", {
              src: args.mode === 'aon' ? '/assets/aon-badge.png' : '/assets/flex-badge.png'
          })), m$1(".w-col.w-col-10.w-col-small-10.w-col-tiny-10", m$1(".w-inline-block.fontsize-smallest.w-inline-block.fontcolor-secondary", args.faq.description))]), m$1(".u-marginbottom-20.fontsize-small.fontweight-semibold", "Dúvidas frequentes"), m$1('ul.w-list-unstyled', _.map(ctrl.scopedQuestions(), function (question, idx) {
              return [m$1('li.fontsize-smaller.alt-link.list-question', {
                  onclick: ctrl.selectQuestion(idx)
              }, m$1('span', [m$1('span.faq-box-arrow'), ' ' + question.question])), m$1('li.list-answer', {
                  class: ctrl.selectedQuestion() === idx ? 'list-answer-opened' : ''
              }, m$1('p.fontsize-smaller', m$1.trust(question.answer)))];
          }))]);
      }
  };

  var paymentForm = {
      controller: function controller() {
          var buildTooltip = function buildTooltip(tooltipText) {
              return m$1.component(tooltip, {
                  el: '.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary',
                  text: tooltipText,
                  width: 380
              });
          };

          return {
              buildTooltip: buildTooltip,
              toggleBoleto: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m$1('[id=\'step2\']', [m$1('.u-text-center-small-only.u-marginbottom-30', [m$1('.fontsize-large.fontweight-semibold', 'Escolha o meio de pagamento'), m$1('.fontsize-smallest.fontcolor-secondary.fontweight-semibold', [m$1('span.fa.fa-lock', '.'), ' PAGAMENTO SEGURO'])]), m$1('.flex-row.u-marginbottom-40', [m$1('a.w-inline-block.btn-select.flex-column.u-text-center[href=\'javascript:void(0);\']', {
              onclick: ctrl.toggleBoleto.toggle,
              class: !ctrl.toggleBoleto() ? 'selected' : ''
          }, [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-20', 'Cartão de crédito'), m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/57299bd8f326a24d4828a0fd_credit-cards.png\']')]), m$1('a.w-inline-block.btn-select.flex-column.u-text-center[href=\'javascript:void(0);\']', {
              onclick: ctrl.toggleBoleto.toggle,
              class: ctrl.toggleBoleto() ? 'selected' : ''
          }, [m$1('.fontsize-base.fontweight-semibold.u-marginbottom-20', 'Boleto bancário'), m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/57299c6ef96a6e44489a7a07_boleto.png\'][width=\'48\']')])]), !ctrl.toggleBoleto() ? m$1('#credit-card-section', [m$1('.w-form.u-marginbottom-40', [m$1('form[data-name=\'Email Form\'][id=\'email-form\'][name=\'email-form\']', [m$1('div', [m$1('label.field-label.fontweight-semibold[for=\'email-61\']', 'Nome no cartão de crédito *'), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip', 'Nome impresso na frente do seu cartão de crédito'), m$1('input.w-input.text-field[data-name=\'Email 61\'][id=\'email-61\'][name=\'email-61\'][required=\'required\'][type=\'email\']')]), m$1('div', [m$1('label.field-label.fontweight-semibold[for=\'email-66\']', 'Número do cartão de crédito *'), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip', 'O número normalmente com 16 dígitos na frente do seu cartão de crédito'), m$1('input.w-input.text-field[data-name=\'Email 66\'][id=\'email-66\'][name=\'email-66\'][required=\'required\'][type=\'email\']')]), m$1('div', [m$1('label.field-label.fontweight-semibold[for=\'email-70\']', ['Expiração (mm/aaaa)* ', ctrl.buildTooltip('Copy tooltip de validade')]), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip', 'A data de validade, geralmente na frente do cartão'), m$1('.w-row', [m$1('.w-col.w-col-6.w-col-tiny-6.w-sub-col', m$1('select.w-select.text-field[id=\'field-2\'][name=\'field-2\']', [m$1('option[value=\'\']', '01 - Janeiro'), m$1('option[value=\'First\']', '02 - Fevereiro'), m$1('option[value=\'Second\']', '03 - Março'), m$1('option[value=\'Third\']', '04 - Abril'), m$1('option[value=\'\']', '05 - Maio'), m$1('option[value=\'\']', '06 - Junho')])), m$1('.w-col.w-col-6.w-col-tiny-6', m$1('select.w-select.text-field[id=\'field-2\'][name=\'field-2\']', [m$1('option[value=\'\']', '2016'), m$1('option[value=\'First\']', '2017'), m$1('option[value=\'Second\']', '2018'), m$1('option[value=\'Third\']', '2019')]))])]), m$1('div', [m$1('label.field-label.fontweight-semibold[for=\'email-67\']', ['Código de Segurança (CVV / CVV2)* ', ctrl.buildTooltip('Copy tooltip código de segurança')]), m$1('.fontsize-smallest.fontcolor-terciary.u-marginbottom-10.field-label-tip', 'Os 3 dígitos (quando na frente) ou 4 dígitos (quando atrás) do seu cartão'), m$1('.w-row', [m$1('.w-col.w-col-8.w-col-tiny-6', m$1('input.w-input.text-field[data-name=\'Email 67\'][id=\'email-67\'][name=\'email-67\'][required=\'required\'][type=\'email\']')), m$1('.w-col.w-col-4.w-col-tiny-6.u-text-center', m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/57298c1c7e99926e77127bdd_cvv-card.jpg\'][width=\'176\']'))])]), m$1('.w-row', [m$1('.w-col.w-col-6', [m$1('label.field-label.fontweight-semibold[for=\'field\']', 'Parcelas'), m$1('select.w-select.text-field[id=\'field\'][name=\'field\']', [m$1('option[value=\'\']', '1 X R$75'), m$1('option[value=\'First\']', 'First Choice'), m$1('option[value=\'Second\']', 'Second Choice'), m$1('option[value=\'Third\']', 'Third Choice')])]), m$1('.w-col.w-col-6')])])]), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('a.btn.btn-large.u-marginbottom-20[href=\'#\']', 'Finalizar pagamento'), m$1('.fontsize-smallest.u-text-center', ['Ao apoiar, você concorda com os ', m$1('a.alt-link[href=\'#\']', 'Termos de Uso'), m$1.trust('&nbsp;'), 'e ', m$1('a.alt-link[href=\'#\']', 'Política de Privacidade')])]), m$1('.w-col.w-col-2')])]) : m$1('#boleto-section', [m$1('form.simple_form.edit_user[accept-charset=\'UTF-8\'][action=\'javascript:void(0)\'][id=\'edit_user_387622\'][method=\'post\'][novalidate=\'novalidate\']', [m$1('div', {
              style: {
                  'display': 'none'
              }
          }, [m$1('input[name=\'utf8\'][type=\'hidden\'][value=\'✓\']'), m$1('input[name=\'_method\'][type=\'hidden\'][value=\'patch\']'), m$1('input[name=\'authenticity_token\'][type=\'hidden\'][value=\'rU9SQFhzUkv8WLbRfq9TYRHP3EZKOuUkOlzmcEUv9VA=\']')]), m$1('.w-row', m$1('.w-col.w-col-12', m$1('.payment-error-message.card.card-error.u-radius.zindex-10.u-marginbottom-30.w-hidden', [m$1('.fontsize-smaller.fontweight-bold.u-marginbottom-10', 'Verifique os dados informados'), m$1('.message-text.fontsize-smaller', m$1('span.translation_missing[title=\'translation missing: pt.catarse_pagarme.pagarme.review.review_errors\']', 'Review Errors'))]))), m$1('.w-row', m$1('.w-col.w-col-12', m$1('.u-margintop-30.u-marginbottom-60.u-radius.card-big.card', [m$1('.fontsize-small.u-marginbottom-20', 'Esse boleto bancário vence no dia 29/06/2016.'), m$1('.fontsize-small.u-marginbottom-40', 'Ao gerar o boleto, o realizador já está contando com o seu apoio. Pague até a data de vencimento pela internet, casas lotéricas, caixas eletrônicos ou agência bancária.'), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.loader.u-text-center.w-col.w-col-12.u-marginbottom-30[id=\'card-loading\']', m$1('img[alt=\'Loader\'][src=\'/assets/catarse_bootstrap/loader-b642f2f0212454026a5c7c40620427c1.gif\']')), m$1('input.btn.btn-large.u-marginbottom-20[id=\'build_boleto\'][name=\'commit\'][type=\'submit\'][value=\'Imprimir boleto\']'), m$1('.fontsize-smallest.u-text-center.u-marginbottom-30', ['Ao apoiar, você concorda com os ', m$1('a.alt-link[href=\'/pt/terms-of-use\']', 'Termos de Uso '), 'e ', m$1('a.alt-link[href=\'/pt/privacy-policy\']', 'Política de Privacidade')])]), m$1('.w-col.w-col-2')])])))])])]);
      }
  };

  var inlineError = {
    view: function view(ctrl, args) {
      return m$1(".fontsize-smaller.text-error.u-marginbottom-20.fa.fa-exclamation-triangle", m$1('span', ' ' + args.message));
    }
  };

  var projectsPayment = {
    controller: function controller(args) {
      var mode = projectVM.currentProject().mode,
          projectUserId = projectVM.currentProject().user_id,
          value = rewardVM.getValue(),
          vm = paymentVM(mode),
          showPaymentForm = m$1.prop(false),
          reward = rewardVM.selectedReward,
          documentMask = _.partial(h.mask, '999.999.999-99'),
          zipcodeMask = _.partial(h.mask, '99999-999');

      var validateForm = function validateForm() {
        if (vm.validate()) {
          showPaymentForm(true);
        }
      };

      var fieldHasError = function fieldHasError(fieldName) {
        var fieldWithError = _.findWhere(vm.fields.errors(), { field: fieldName });

        return fieldWithError ? m$1.component(inlineError, { message: fieldWithError.message }) : '';
      };

      var applyDocumentMask = _.compose(vm.fields.ownerDocument, documentMask);

      var applyZipcodeMask = _.compose(vm.fields.zipcode, zipcodeMask);

      if (!h.getUser()) {
        return h.navigateToDevise();
      }

      return {
        applyDocumentMask: applyDocumentMask,
        applyZipcodeMask: applyZipcodeMask,
        fieldHasError: fieldHasError,
        validateForm: validateForm,
        projectUserId: projectUserId,
        showPaymentForm: showPaymentForm,
        reward: reward,
        value: value,
        mode: mode,
        vm: vm
      };
    },
    view: function view(ctrl, args) {
      return m$1(".w-section.w-clearfix.section", [m$1(".w-col", m$1(".w-clearfix.w-hidden-main.w-hidden-medium.card.u-radius.u-marginbottom-20", [m$1(".fontsize-smaller.fontweight-semibold", "Valor do apoio"), m$1("a.w-inline-block.arrow-admin.fa.fa-chevron-down.fontcolor-secondary[data-ix='show-reward-details'][data-vivaldi-spatnav-clickable='1'][href='#']"), m$1(".w-clearfix.u-marginbottom-20", m$1(".fontsize-larger.text-success.u-left", 'R$' + ctrl.value)), m$1(".w-clearfix.back-payment-info-reward[data-ix='display-none-on-load']", { style: { "display": "none" } }, [m$1(".fontsize-smaller.fontweight-semibold.u-marginbottom-10", "Recompensa selecionada"), m$1(".fontsize-smallest", '' + ctrl.reward().description), m$1('a.fontsize-small.link-hidden.u-right.fontweight-semibold[href="/projects/' + projectVM.currentproject().project_id + '/contribution"]', {
        config: m$1.route
      }, "Editar")])])), m$1(".w-container", m$1(".w-row", [m$1(".w-col.w-col-8", [ctrl.vm.fields.errors() ? m$1(".w-hidden-main.w-hidden-medium.w-hidden-small.w-hidden-tiny.card.card-error.u-radius.zindex-10.u-marginbottom-30.fontsize-smaller[data-ix='display-none-on-load']", { style: { "display": "block" } }, [m$1(".u-marginbottom-10.fontweight-bold", "Por favor, reveja os campos abaixo antes de prosseguir"), m$1("div", "This is some text inside of a div block."), m$1("div", "This is some text inside of a div block.")]) : '', m$1(".w-form", [m$1("form.u-marginbottom-40[data-name='Email Form'][id='email-form'][name='email-form']", [m$1(".u-marginbottom-40.u-text-center-small-only", [m$1(".fontweight-semibold.lineheight-tight.fontsize-large", "Dados de contato e endereço"), m$1(".fontsize-smaller", "* Preenchimento obrigatório")]), m$1(".w-row", [m$1(".w-col.w-col-7.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='complete-name']", "Nome completo *"), m$1("input.w-input.text-field[id='complete-name'][name='complete-name']", {
        onfocus: ctrl.vm.resetFieldError('completeName'),
        class: ctrl.fieldHasError('completeName') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.completeName),
        value: ctrl.vm.fields.completeName(),
        required: 'required',
        placeholder: 'Nome Completo'
      }), ctrl.fieldHasError('completeName')]), m$1(".w-col.w-col-5", [m$1("label.field-label.fontweight-semibold[for='email']", "Email *"), m$1("input.w-input.text-field[id='email']", {
        onfocus: ctrl.vm.resetFieldError('email'),
        class: ctrl.fieldHasError('email') ? 'error' : false,
        type: 'email',
        onchange: m$1.withAttr('value', ctrl.vm.fields.email),
        value: ctrl.vm.fields.email(),
        required: 'required',
        placeholder: 'email@catarse.me'
      }), ctrl.fieldHasError('email')])]), m$1(".w-checkbox.w-clearfix", [m$1("input.w-checkbox-input[id='anonymous'][name='anonymous'][type='checkbox']", {
        onchange: m$1.withAttr('value', ctrl.vm.fields.anonymous),
        checked: ctrl.vm.fields.anonymous()
      }), m$1("label.w-form-label.fontsize-smallest[for='anonymous']", "Quero que meu apoio não fique público")]), ctrl.vm.fields.anonymous() ? m$1(".card.card-message.u-radius.zindex-10.fontsize-smallest", m$1("div", [m$1("span.fontweight-bold", ["Você tem certeza que quer que seu apoio seja anônimo?", m$1.trust("&nbsp;"), m$1("br")]), m$1("br"), "O valor do seu apoio não será divulgado para ninguém além do dono do projeto. Somente o proponente terá acesso a essa informação, independente se o seu investimento seja público ou anônimo."])) : ''])]), m$1(".u-marginbottom-40", m$1(".w-form", [m$1(".w-row", [m$1(".w-col.w-col-6.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='country']", "País *"), m$1("select.w-select.text-field[id='country']", {
        onchange: m$1.withAttr('value', ctrl.vm.fields.userCountryId),
        value: ctrl.vm.fields.userCountryId()
      }, _.map(ctrl.vm.fields.countries(), function (country, idx) {
        return m$1("option", { value: country.id, key: idx, selected: country.id === ctrl.vm.fields.userCountryId() }, country.name);
      }))]), m$1(".w-col.w-col-6", !ctrl.vm.isInternational() ? [m$1("label.field-label.fontweight-semibold[for='zip-code']", "CEP"), m$1("input.w-input.text-field[id='zip-code']", {
        type: 'tel',
        onkeyup: m$1.withAttr('value', ctrl.applyZipcodeMask),
        value: ctrl.vm.fields.zipCode(),
        placeholder: '42100000'
      })] : '')]), m$1(".w-row", [m$1(".w-col.w-col-6.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='street']", "Rua *"), m$1("input.w-input.text-field[id='street']", {
        onfocus: ctrl.vm.resetFieldError('street'),
        class: ctrl.fieldHasError('street') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.street),
        value: ctrl.vm.fields.street(),
        required: 'required',
        placeholder: 'Rua Da Minha Casa'
      }), ctrl.fieldHasError('street')]), m$1(".w-col.w-col-6", m$1(".w-row", [m$1(".w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle", [m$1("label.field-label.fontweight-semibold[for='number']", "Número *"), m$1("input.w-input.text-field[id='number']", {
        onfocus: ctrl.vm.resetFieldError('number'),
        class: ctrl.fieldHasError('number') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.number),
        value: ctrl.vm.fields.number(),
        required: 'required',
        placeholder: '421'
      }), ctrl.fieldHasError('number')]), m$1(".w-col.w-col-6.w-col-small-6.w-col-tiny-6", [m$1("label.field-label.fontweight-semibold[for='address-complement']", "Complemento"), m$1("input.w-input.text-field[id='address-complement']", {
        onfocus: ctrl.vm.resetFieldError('addressComplement'),
        class: ctrl.fieldHasError('addressComplement') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.addressComplement),
        value: ctrl.vm.fields.addressComplement(),
        placeholder: 'Residencial 123'
      }), ctrl.fieldHasError('addressComplement')])]))]), m$1(".w-row", [m$1(".w-col.w-col-4.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='neighbourhood']", "Bairro *"), m$1("input.w-input.text-field[id='neighbourhood']", {
        onfocus: ctrl.vm.resetFieldError('neighbourhood'),
        class: ctrl.fieldHasError('neighbourhood') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.neighbourhood),
        value: ctrl.vm.fields.neighbourhood(),
        required: 'required',
        placeholder: 'São José'
      }), ctrl.fieldHasError('neighbourhood')]), m$1(".w-col.w-col-4.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='city']", "Cidade *"), m$1("input.w-input.text-field[id='city']", {
        onfocus: ctrl.vm.resetFieldError('city'),
        class: ctrl.fieldHasError('city') ? 'error' : false,
        type: 'text',
        onchange: m$1.withAttr('value', ctrl.vm.fields.city),
        value: ctrl.vm.fields.city(),
        required: 'required',
        placeholder: 'Cidade'
      }), ctrl.fieldHasError('city')]), m$1(".w-col.w-col-4", [m$1("label.field-label.fontweight-semibold[for='state']", "Estado *"), m$1("select.w-select.text-field[id='state']", {
        onchange: m$1.withAttr('value', ctrl.vm.fields.userState),
        value: ctrl.vm.fields.userState()
      }, _.map(ctrl.vm.fields.states(), function (state, idx) {
        return m$1('option', { value: state.acronym, selected: state.acronym === ctrl.vm.fields.userState() }, state.name);
      }))])]), !ctrl.vm.isInternational() ? m$1(".w-row", [m$1(".w-col.w-col-6.w-sub-col", [m$1("label.field-label.fontweight-semibold[for='document']", "CPF *"), m$1("input.w-input.text-field[id='document']", {
        onfocus: ctrl.vm.resetFieldError('ownerDocument'),
        class: ctrl.fieldHasError('ownerDocument') ? 'error' : false,
        type: 'tel',
        onkeyup: m$1.withAttr('value', ctrl.applyDocumentMask),
        value: ctrl.vm.fields.ownerDocument(),
        required: 'required'
      }), ctrl.fieldHasError('ownerDocument')]), m$1(".w-col.w-col-6", [m$1("label.field-label.fontweight-semibold[for='phone']", "Telefone *"), m$1("input.w-input.text-field[id='phone']", {
        onfocus: ctrl.vm.resetFieldError('phone'),
        class: ctrl.fieldHasError('phone') ? 'error' : false,
        type: 'tel',
        onchange: m$1.withAttr('value', ctrl.vm.fields.phone),
        value: ctrl.vm.fields.phone(),
        required: 'required'
      }), ctrl.fieldHasError('phone')])]) : ''])), m$1(".w-row.u-marginbottom-40", m$1(".w-col.w-col-push-3.w-col-6", m$1("button.btn.btn-large", {
        onclick: ctrl.validateForm
      }, "Próximo passo"))), ctrl.showPaymentForm() ? m$1.component(paymentForm) : '']), m$1(".w-col.w-col-4", [m$1(".w-hidden-small.w-hidden-tiny.card.u-radius.u-marginbottom-20", [m$1(".fontsize-smaller.fontweight-semibold.u-marginbottom-20", "Valor do apoio"), m$1(".w-clearfix.u-marginbottom-20", [m$1(".fontsize-larger.text-success.u-left", 'R$' + ctrl.value), m$1('a.fontsize-small.link-hidden.u-right.fontweight-semibold[href="/projects/' + projectVM.currentproject().project_id + '/contribution"]', {
        config: m$1.route
      }, "Editar")]), m$1(".back-payment-info-reward", [m$1(".fontsize-smaller.fontweight-semibold.u-marginbottom-10", "Recompensa selecionada"), m$1(".fontsize-smallest", ctrl.reward().description)])]), m$1.component(faqBox, { mode: ctrl.mode, faq: ctrl.vm.faq, projectUserId: ctrl.projectUserId })])]))]);
    }
  };

  var projectsReward = {
      controller: function controller(args) {
          var vm = rewardVM,
              selectedReward = vm.selectedReward,
              selectReward = vm.selectReward,
              rewards = vm.rewards(),
              mode = projectVM.currentProject().mode,
              faq = I18n$1.translations[I18n$1.currentLocale()].projects.faq[mode];

          //TODO unify projectsReward and project-reward-list reward submission. fix routing issue.
          var submitContribution = function submitContribution() {
              var valueFloat = h.monetaryToFloat(vm.contributionValue);

              if (valueFloat < vm.selectedReward().minimum_value) {
                  vm.error('O valor de apoio para essa recompensa deve ser de no mínimo R$' + vm.selectedReward().minimum_value);
              } else {
                  if (!h.getUser()) {
                      h.storeObject(storeKey, { value: valueFloat, reward: vm.selectedReward() });

                      return h.navigateToDevise('/' + projectVM.currentProject().permalink);
                  } else {
                      vm.error('');
                      vm.contributionValue(valueFloat);
                      m$1.route('/projects/' + projectVM.currentproject().project_id + '/payment', {
                          project_user_id: projectVM.currentProject().user_id
                      });
                  }
              }

              return false;
          };

          var isSelected = function isSelected(reward) {
              return reward.id === selectedReward().id;
          };

          if (_$1.first(rewards).id !== vm.noReward.id) {
              rewards.unshift(vm.noReward);
          }

          return {
              rewards: rewards,
              project: projectVM.currentProject,
              contributionValue: vm.contributionValue,
              submitContribution: submitContribution,
              applyMask: vm.applyMask,
              error: vm.error,
              isSelected: isSelected,
              selectedReward: selectedReward,
              selectReward: selectReward,
              faq: faq
          };
      },
      view: function view(ctrl, args) {
          var project = ctrl.project;

          return m$1('#project-rewards', [m$1('.w-section.page-header.u-text-center', [m$1('.w-container', [m$1('h1.fontsize-larger.fontweight-semibold.project-name[itemprop="name"]', h.selfOrEmpty(project().name || project().project_name)), m$1('h2.fontsize-base.lineheight-looser[itemprop="author"]', ['por ', project().user ? project().user.name : project().owner_name ? project().owner_name : ''])])]), m$1('.w-section.header-cont-new', m$1('.w-container', m$1('.fontweight-semibold.lineheight-tight.text-success.fontsize-large.u-text-center-small-only', 'Escolha a recompensa e em seguida o valor do apoio'))), m$1('.section[id=\'new-contribution\']', m$1('.w-container', m$1('.w-row', [m$1('.w-col.w-col-8', m$1('.w-form.back-reward-form', m$1('form.simple_form.new_contribution', {
              onsubmit: ctrl.submitContribution
          }, _$1.map(ctrl.rewards, function (reward, index) {
              var isSelected = ctrl.isSelected(reward),
                  monetaryMinimum = h.applyMonetaryMask(reward.minimum_value);

              return m$1('span.radio.w-radio.w-clearfix.back-reward-radio-reward', {
                  class: isSelected ? 'selected' : '',
                  onclick: ctrl.selectReward(reward),
                  key: index
              }, m$1('label[for=\'contribution_reward_id_' + reward.id + '\']', [m$1('input.radio_buttons.optional.w-input.text-field.w-radio-input.back-reward-radio-button[id=\'contribution_reward_id_' + reward.id + '\'][name=\'contribution[reward_id]\'][type=\'radio\'][value=\'' + reward.id + '\']', {
                  checked: isSelected ? true : false
              }), m$1('label.w-form-label.fontsize-base.fontweight-semibold.u-marginbottom-10[for=\'contribution_reward_' + reward.id + '\']', reward.id === -1 ? 'Não quero recompensa' : 'R$ ' + reward.minimum_value + ' ou mais'), isSelected ? m$1('.w-row.back-reward-money', [m$1('.w-col.w-col-8.w-col-small-8.w-col-tiny-8.w-sub-col-middle.w-clearfix', [m$1('.w-row', [m$1('.w-col.w-col-3.w-col-small-3.w-col-tiny-3', m$1('.back-reward-input-reward.placeholder', 'R$')), m$1('.w-col.w-col-9.w-col-small-9.w-col-tiny-9', m$1('input.user-reward-value.back-reward-input-reward[autocomplete=\'off\'][type=\'tel\']', {
                  class: ctrl.error() ? 'error' : '',
                  min: monetaryMinimum,
                  placeholder: monetaryMinimum,
                  onkeyup: m$1.withAttr('value', ctrl.applyMask),
                  value: ctrl.contributionValue()
              }))]), ctrl.error().length > 0 ? m$1('.text-error', [m$1('br'), m$1('span.fa.fa-exclamation-triangle'), ' ' + ctrl.error()]) : '']), m$1('.submit-form.w-col.w-col-4.w-col-small-4.w-col-tiny-4', m$1('button.btn.btn-large', ['Continuar  ', m$1('span.fa.fa-chevron-right')]))]) : '', m$1('.back-reward-reward-description', [m$1('.fontsize-smaller.u-marginbottom-10', reward.description), reward.deliver_at ? m$1('.fontsize-smallest.fontcolor-secondary', 'Estimativa de entrega: ' + h.momentify(reward.deliver_at, 'MMM/YYYY')) : ''])])); //End map return
          })))), m$1('.w-col.w-col-4', m$1.component(faqBox, { mode: ctrl.project().mode, faq: ctrl.faq }))])))]);
      }
  };

  var I18nScope$15 = _$1.partial(h.i18nScope, 'projects.publish');

  var publish = {
    controller: function controller(args) {
      var filtersVM = postgrest.filtersVM({
        project_id: 'eq'
      }),
          projectAccount = m$1.prop([]),
          projectDetails = m$1.prop([]),
          acceptTerm = m$1.prop([true, true, true, true, true, true, true, true, true]),
          flexAcceptTerm = m$1.prop([true, true, true, true, true, true, true, true, true]),
          showNextTerm = function showNextTerm(index, acceptTerms) {
        var terms = acceptTerms();
        if (terms[index]) {
          terms[index] = false;
          acceptTerms(terms);
          var nextTerm = document.getElementsByClassName('w-hidden publish-rules');
          if (nextTerm[0] !== undefined) {
            nextTerm[0].classList.remove('w-hidden');
          }
        }
        //show publish button after accepting all rules
        if (index === terms.length - 1) {
          document.getElementsByClassName('publish-btn-section')[0].classList.remove('w-hidden');
        }
      },
          loader = postgrest.loaderWithToken;

      filtersVM.project_id(args.root.getAttribute('data-id'));

      var l = loader(models.projectDetail.getRowOptions(filtersVM.parameters())),
          accountL = loader(models.projectAccount.getRowOptions(filtersVM.parameters()));
      l.load().then(projectDetails);
      accountL.load().then(projectAccount);

      var expiresAt = function expiresAt() {
        var project = _$1.first(projectDetails());
        return moment().add(project.online_days, 'days');
      };

      return {
        l: l,
        accountL: accountL,
        expiresAt: expiresAt,
        filtersVM: filtersVM,
        acceptTerm: acceptTerm,
        flexAcceptTerm: flexAcceptTerm,
        showNextTerm: showNextTerm,
        projectAccount: projectAccount,
        projectDetails: projectDetails
      };
    },
    view: function view(ctrl, args) {
      var project = _$1.first(ctrl.projectDetails()),
          account = _$1.first(ctrl.projectAccount()),
          flexTerms = function flexTerms(project) {
        return [m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '1/9'), ' ', m$1('span.fontweight-semibold', 'Regras da modalidade FLEX')]), m$1('div', 'Você escolheu a campanha flexível. Dessa maneira, você irá receber todos os recursos arrecadados junto aos apoiadores ao final do prazo da campanha (descontando a taxa do Catarse) e deverá cumprir com a execução do projeto e com a entrega das recompensas oferecidas independente do quanto arrecadar.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '2/9'), ' ', m$1('span.fontweight-semibold', 'Meta de arrecadação')]), m$1('div', 'A meta não poderá ser alterada após o publicação do projeto.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '3/9'), ' ', m$1('span.fontweight-semibold', 'Taxas')]), m$1('div', ['Ao final da campanha, cobraremos 13% sobre o ', m$1('span.fontweight-semibold', 'valor total arrecadado.')])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '4/9'), ' ', m$1('span.fontweight-semibold', 'Prazo da campanha')]), m$1('div', 'Uma vez definido, o prazo de encerramento não poderá ser alterado. Caso você tenha iniciado a campanha com o prazo em aberto, deverá defini-lo durante a campanha, podendo deixar a campanha aberta por no máximo 12 meses.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '5/9'), ' ', m$1('span.fontweight-semibold', 'Prazo para repasse')]), m$1('div', 'Quando o prazo do seu projeto chegar ao fim, você deverá confirmar seus dados bancários. Após essa confirmação, o Catarse depositará na sua conta corrente em até 10 dias úteis. O valor depositado já estará considerando o desconto de 13% da taxa.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '6/9'), ' ', m$1('span.fontweight-semibold', 'O que pode e não pode alterar na página do projeto a partir da publicação?')]), [m$1('div', [m$1('span.fontweight-semibold', 'Você não poderá:'), ' alterar o tipo de financiamento, nome do projeto, a URL (link) do projeto, a categoria escolhida, a meta de arrecadação, o prazo (caso já tenha definido), as recompensas onde existirem apoios já efetuados e a conta bancária registrada.\
                    ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'Você poderá: '), 'editar o conteúdo da descrição do projeto, alterar o vídeo principal da campanha, a imagem do projeto, a frase de efeito, as recompensas onde não existirem apoios efetuados, além de adicionar novas recompensas durante a arrecadação.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '7/9'), ' ', m$1('span.fontweight-semibold', 'Responsabilidade do Catarse')]), [m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold', 'O Catarse é responsável:'), ' pelo desenvolvimento tecnológico da plataforma, atendimento de dúvidas e problemas (tanto de apoiadores quanto de realizadores), por hospedar o projeto na plataforma e por garantir a segurança das transações financeiras.\ ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'O Catarse não é responsável:'), ' pelo financiamento, divulgação e execução, nem pela entrega de recompensas dos projetos inscritos.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '8/9'), ' ', m$1('span.fontweight-semibold', 'Suas responsabilidades')]), m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold'), 'É sua responsabilidade tudo aquilo que diz respeito a formatação do projeto, planejamento e divulgação da campanha de arrecadação, mobilização de apoiadores, execução do projeto, produção e entrega de recompensas dentro do prazo estimado e comunicação com apoiadores.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '9/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Retiradas de projetos no ar')]), m$1('div', [m$1('span.fontweight-semibold'), 'O CATARSE reserva-se o direito de, a seu exclusivo critério e uma vez notificado a respeito, cancelar projetos e encerrar as contas de CRIADORES DE PROJETOS que violem nossas ', m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638-Diretrizes-para-cria%C3%A7%C3%A3o-de-projetos\'][target=\'_blank\']', 'Regras do Jogo'), ' e ', m$1('a.alt-link[href=\'http://www.catarse.me/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), '.'])])];
      },
          terms = function terms(project) {
        return [m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '1/9'), ' ', m$1('span.fontweight-semibold', 'Regras da modalidade Tudo-ou-nada')]), m$1('div', ['Você escolheu a campanha tudo-ou-nada. Dessa maneira, você só irá receber os recursos arrecadados ', m$1('span.fontweight-semibold', 'caso atinja ou supere a meta de arrecadação'), '. Caso contrário, todos seus apoiadores serão reembolsados. Você será responsável pela entrega das recompensas oferecidas se seu projeto alcançar a meta de arrecadação.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '2/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Meta de arrecadação')]), m$1('div', 'A meta não poderá ser alterada após o publicação do projeto.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '3/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Taxas')]), m$1('div', ['Cobramos 13% sobre o ', m$1('span.fontweight-semibold', 'valor total arrecadado'), ' pelo seu projeto caso ele atinja ou supere a meta dentro do prazo da campanha. Se o projeto não atingir a meta, nenhuma taxa será cobrada.', m$1('span.fontweight-semibold')])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '4/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Prazo da campanha')]), m$1('div', 'Seu projeto estará em arrecadação no Catarse até o dia ' + h.momentify(ctrl.expiresAt()) + ' às 23h59min59s. Este prazo não poderá ser alterado após a publicação do projeto.')]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '5/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Regras do repasse e reembolso')]), m$1('div', ['Quando o prazo do seu projeto chegar ao fim, você deverá confirmar seus dados bancários. Após essa confirmação, o Catarse depositará o valor arrecadado, já com o desconto da taxa, na sua conta corrente em até 10 dias úteis. Caso o projeto não atinja 100% da meta dentro do prazo, o Catarse irá reembolsar os apoiadores. ', m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202365507\'][target=\'_blank\']', 'Saiba mais sobre o processo de reembolso'), '.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '6/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'O que pode e não pode alterar na página do projeto a partir da publicação?')]), [m$1('div', [m$1('span.fontweight-semibold', 'Você não poderá:'), ' alterar o nome do projeto, a URL (link) do projeto, a categoria escolhida, o tipo de financiamento, a conta bancária, a meta de arrecadação, o prazo escolhido e as recompensas onde existirem apoios já efetuados.\ ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'Você poderá: '), 'editar o conteúdo da descrição do projeto, alterar o vídeo principal da campanha, a imagem do projeto, a frase de efeito, as recompensas onde não existirem apoios efetuados, além de adicionar novas recompensas durante a arrecadação.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '7/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Responsabilidade do Catarse')]), [m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold', 'O Catarse é responsável:'), ' pelo desenvolvimento tecnológico da plataforma, atendimento de dúvidas e problemas (tanto de apoiadores quanto de realizadores), por hospedar o projeto na plataforma e por garantir a segurança das transações financeiras.\ ', m$1('br'), m$1('br'), m$1('span.fontweight-semibold', 'O Catarse não é responsável:'), ' pelo financiamento, divulgação e execução, nem pela entrega de recompensas dos projetos inscritos.'])]]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '8/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Suas responsabilidades')]), m$1('div', [m$1('span.fontweight-semibold'), m$1('span.fontweight-semibold'), 'É sua responsabilidade tudo aquilo que diz respeito a formatação do projeto, planejamento e divulgação da campanha de arrecadação, mobilização de apoiadores, execução do projeto, produção e entrega de recompensas dentro do prazo estimado e comunicação com apoiadores.'])]), m$1('.w-col.w-col-11', [m$1('div', [m$1('span.fontsize-smallest.fontcolor-secondary', '9/9'), ' ', m$1('span', { style: { 'font-weight': ' 600' } }, 'Retiradas de projetos no ar')]), m$1('div', [m$1('span.fontweight-semibold'), 'O CATARSE reserva-se o direito de, a seu exclusivo critério e uma vez notificado a respeito, cancelar projetos e encerrar as contas de CRIADORES DE PROJETOS que violem nossas ', m$1('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638-Diretrizes-para-cria%C3%A7%C3%A3o-de-projetos\'][target=\'_blank\']', 'Regras do Jogo'), ' e ', m$1('a.alt-link[href=\'http://www.catarse.me/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), '.'])])];
      };

      return [!ctrl.l() && !ctrl.accountL() ? [project.is_owner_or_admin ? m$1.component(projectDashboardMenu, {
        project: m$1.prop(project),
        hidePublish: true
      }) : '', m$1('.w-section.section-product.' + project.mode), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [m$1('.u-text-center', [m$1('img.u-marginbottom-20[src=\'/assets/catarse_bootstrap/launch-icon.png\'][width=\'94\']'), m$1('.fontsize-large.fontweight-semibold.u-marginbottom-20', 'Pronto para lançar sua campanha?'), m$1('.fontsize-base.u-marginbottom-30', 'Preparamos uma lista com informações importantes para você checar antes de colocar seu projeto no ar!')])]), m$1('.w-col.w-col-3')])])]), m$1('.divider'), m$1('.w-section.section-one-column.bg-gray.section.before-footer', [m$1('.w-container', [m$1('.card.medium.u-marginbottom-60.card-terciary', [m$1('.w-row', [m$1('.w-col.w-col-6.w-clearfix', [m$1('img.card-project-thumb.u-right[src=' + project.large_image + ']')]), m$1('.w-col.w-col-6', [m$1('.u-marginbottom-30.fontsize-base', [m$1('div', [m$1('span.fontweight-semibold', 'Título: '), project.name]), m$1('div', [m$1('span.fontweight-semibold', 'Link: '), 'www.catarse.me/' + project.permalink]), m$1('div', [m$1('span.fontweight-semibold', 'Modalidade de financiamento: '), I18n$1.t(project.mode, I18nScope$15())]), m$1('div', [m$1('span.fontweight-semibold', 'Meta de arrecadação: '), 'R$ ' + h.formatNumber(project.goal, 2, 3)]), project.online_days !== null ? m$1('div', [m$1('span.fontweight-semibold', 'Prazo: ' + project.online_days + ' ' + (project.online_days > 1 ? 'dias' : 'dia'))]) : '', m$1('div', [m$1('span.fontweight-semibold', 'Responsável: '), account.owner_name]), m$1('div', [m$1('span.fontweight-semibold', 'CPF/CNPJ: '), account.owner_document])])])]), m$1('.u-text-center', [m$1('.w-row', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10', [m$1('.divider.u-marginbottom-10'), m$1('.fontsize-small.fontcolor-secondary', 'Os dados acima não podem ser alterados após o projeto entrar no ar. Se você precisa fazer mudanças, navegue na barra lateral e volte aqui quando estiver tudo pronto!')]), m$1('.w-col.w-col-1')])])]), m$1('.card.medium.u-radius.u-marginbottom-60', [m$1('.u-text-center.u-marginbottom-60', [m$1('.fontsize-large.fontweight-semibold', 'Relembre nossas regras'), m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.fontsize-small', ['Antes de publicar, clique nos círculos abaixo e confirme que você está ciente de como funciona o Catarse. Qualquer dúvida, ', m$1('a.alt-link[href=\'https://equipecatarse.zendesk.com/account/dropboxes/20298537\'][target=\'_blank\']', 'entre em contato'), '!'])]), m$1('.w-col.w-col-2')])]), _$1.map(project.mode == 'flex' ? flexTerms(project) : terms(project), function (term, index) {
        return m$1('.u-marginbottom-30.fontsize-base' + (index == 0 ? '' : '.w-hidden.publish-rules'), [m$1('.w-row[id=\'rule-' + index + '\']', [m$1('.w-col.w-col-1.u-text-center', [m$1('div', [m$1((project.mode == 'flex' ? ctrl.flexAcceptTerm() : ctrl.acceptTerm())[index] ? 'a.w-inline-block.checkbox-big[href=\'#rule-' + (index + 1) + '\']' : 'a.w-inline-block.checkbox-big.checkbox--selected.fa.fa-check.fa-lg[href=\'#rule-' + (index + 1) + '\']', { onclick: function onclick() {
            return ctrl.showNextTerm(index, project.mode == 'flex' ? ctrl.flexAcceptTerm : ctrl.acceptTerm);
          } })])]), term])]);
      })]), m$1('.w-row.publish-btn-section.w-hidden', [m$1('.w-col.w-col-4'), m$1('.w-col.w-col-4', [m$1('a.btn.btn-large.u-marginbottom-20[href=/' + (project.mode == 'flex' ? 'flexible_projects' : 'projects') + '/' + project.project_id + '/push_to_online]', 'Publicar agora!'), m$1('.u-text-center.fontsize-smaller', ['Ao publicar o seu projeto, você está aceitando os ', m$1('a.alt-link[href=\'/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), ' e ', m$1('a.alt-link[href=\'/privacy-policy\'][target=\'_blank\']', 'Politica de Privacidade')])]), m$1('.w-col.w-col-4')])])]), '\
    '] : h.loader()];
    }
  };

  var startVM = function startVM(I18n) {
      var i18nStart = I18n.translations[I18n.currentLocale()].pages.start,
          testimonials = i18nStart.testimonials,
          categoryProjects = i18nStart.categoryProjects,
          panes = i18nStart.panes,
          qa = i18nStart.qa;

      return {
          testimonials: _$1.map(testimonials, function (testimonial) {
              return {
                  thumbUrl: testimonial.thumb,
                  content: testimonial.content,
                  name: testimonial.name,
                  totals: testimonial.totals
              };
          }),
          panes: _$1.map(panes, function (pane) {
              return {
                  label: pane.label,
                  src: pane.src
              };
          }),
          questions: {
              col_1: _$1.map(qa.col_1, function (question) {
                  return {
                      question: question.question,
                      answer: question.answer
                  };
              }),
              col_2: _$1.map(qa.col_2, function (question) {
                  return {
                      question: question.question,
                      answer: question.answer
                  };
              })
          },
          categoryProjects: _$1.map(categoryProjects, function (category) {
              return {
                  categoryId: category.category_id,
                  sampleProjects: [category.sample_project_ids.primary, category.sample_project_ids.secondary]
              };
          })
      };
  };

  var youtubeLightbox = {
      controller: function controller(args) {
          var player = void 0;
          var showLightbox = h.toggleProp(false, true),
              setYoutube = function setYoutube(el, isInitialized) {
              if (!isInitialized) {
                  var tag = document.createElement('script'),
                      firstScriptTag = document.getElementsByTagName('script')[0];
                  tag.src = 'https://www.youtube.com/iframe_api';
                  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                  window.onYouTubeIframeAPIReady = createPlayer;
              }
          },
              closeVideo = function closeVideo() {
              if (!_.isUndefined(player)) {
                  player.pauseVideo();
              }

              showLightbox.toggle();

              return false;
          },
              createPlayer = function createPlayer() {
              player = new YT.Player('ytvideo', {
                  height: '528',
                  width: '940',
                  videoId: args.src,
                  playerVars: {
                      showInfo: 0,
                      modestBranding: 0
                  },
                  events: {
                      'onStateChange': function onStateChange(state) {
                          return state.data === 0 ? closeVideo() : false;
                      }
                  }
              });
          };

          return {
              showLightbox: showLightbox,
              setYoutube: setYoutube,
              closeVideo: closeVideo
          };
      },
      view: function view(ctrl, args) {
          return m$1('#youtube-lightbox', [m$1('a#youtube-play.w-lightbox.w-inline-block.fa.fa-play-circle.fontcolor-negative.fa-5x[href=\'javascript:void(0);\']', {
              onclick: function onclick() {
                  ctrl.showLightbox.toggle();
                  args.onclick && args.onclick();
              }
          }), m$1('#lightbox.w-lightbox-backdrop[style="display:' + (ctrl.showLightbox() ? 'block' : 'none') + '"]', [m$1('.w-lightbox-container', [m$1('.w-lightbox-content', [m$1('.w-lightbox-view', [m$1('.w-lightbox-frame', [m$1('figure.w-lightbox-figure', [m$1('img.w-lightbox-img.w-lightbox-image[src=\'data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20width=%22940%22%20height=%22528%22/%3E\']'), m$1('#ytvideo.embedly-embed.w-lightbox-embed', { config: ctrl.setYoutube })])])]), m$1('.w-lightbox-spinner.w-lightbox-hide'), m$1('.w-lightbox-control.w-lightbox-left.w-lightbox-inactive'), m$1('.w-lightbox-control.w-lightbox-right.w-lightbox-inactive'), m$1('#youtube-close.w-lightbox-control.w-lightbox-close', { onclick: ctrl.closeVideo })]), m$1('.w-lightbox-strip')])])]);
      }
  };

  var I18nScope$16 = _$1.partial(h.i18nScope, 'pages.start');

  var start = {
      controller: function controller() {
          h.analytics.windowScroll({ cat: 'project_start', act: 'start_page_scroll' });
          var stats = m$1.prop([]),
              categories = m$1.prop([]),
              selectedPane = m$1.prop(0),
              selectedCategory = m$1.prop([]),
              featuredProjects = m$1.prop([]),
              selectedCategoryIdx = m$1.prop(-1),
              startvm = startVM(I18n$1),
              filters = postgrest$1.filtersVM,
              paneImages = startvm.panes,
              categoryvm = filters({
              category_id: 'eq'
          }),
              projectvm = filters({
              project_id: 'eq'
          }),
              uservm = filters({
              id: 'eq'
          }),
              loader = postgrest$1.loader,
              statsLoader = loader(models.statistic.getRowOptions()),
              loadCategories = function loadCategories() {
              return models.category.getPage(filters({}).order({
                  name: 'asc'
              }).parameters()).then(categories);
          },
              selectPane = function selectPane(idx) {
              return function () {
                  selectedPane(idx);
              };
          },
              lCategory = function lCategory() {
              return loader(models.categoryTotals.getRowOptions(categoryvm.parameters()));
          },
              lProject = function lProject() {
              return loader(models.projectDetail.getRowOptions(projectvm.parameters()));
          },
              lUser = function lUser() {
              return loader(models.userDetail.getRowOptions(uservm.parameters()));
          },
              selectCategory = function selectCategory(category) {
              return function () {
                  selectedCategoryIdx(category.id);
                  categoryvm.category_id(category.id);
                  selectedCategory([category]);
                  m$1.redraw();
                  lCategory().load().then(loadCategoryProjects);
              };
          },
              setUser = function setUser(user, idx) {
              featuredProjects()[idx] = _$1.extend({}, featuredProjects()[idx], {
                  userThumb: _$1.first(user).profile_img_thumbnail
              });
          },
              setProject = function setProject(project, idx) {
              featuredProjects()[idx] = _$1.first(project);
              uservm.id(_$1.first(project).user.id);
              lUser().load().then(function (user) {
                  return setUser(user, idx);
              });
          },
              loadCategoryProjects = function loadCategoryProjects(category) {
              selectedCategory(category);
              var categoryProjects = _$1.findWhere(startvm.categoryProjects, {
                  categoryId: _$1.first(category).category_id
              });
              featuredProjects([]);
              if (!_$1.isUndefined(categoryProjects)) {
                  _$1.map(categoryProjects.sampleProjects, function (project_id, idx) {
                      if (!_$1.isUndefined(project_id)) {
                          projectvm.project_id(project_id);
                          lProject().load().then(function (project) {
                              return setProject(project, idx);
                          });
                      }
                  });
              }
          };

          statsLoader.load().then(stats);
          loadCategories();

          return {
              stats: stats,
              categories: categories,
              paneImages: paneImages,
              selectCategory: selectCategory,
              selectedCategory: selectedCategory,
              selectedCategoryIdx: selectedCategoryIdx,
              selectPane: selectPane,
              selectedPane: selectedPane,
              featuredProjects: featuredProjects,
              testimonials: startvm.testimonials,
              questions: startvm.questions
          };
      },
      view: function view(ctrl, args) {
          var stats = _$1.first(ctrl.stats());
          var testimonials = function testimonials() {
              return _$1.map(ctrl.testimonials, function (testimonial) {
                  var content = m$1('.card.u-radius.card-big.card-terciary', [m$1('.u-text-center.u-marginbottom-20', [m$1('img.thumb-testimonial.u-round.u-marginbottom-20[src="' + testimonial.thumbUrl + '"]')]), m$1('p.fontsize-large.u-marginbottom-30', '"' + testimonial.content + '"'), m$1('.u-text-center', [m$1('.fontsize-large.fontweight-semibold', testimonial.name), m$1('.fontsize-base', testimonial.totals)])]);

                  return {
                      content: content
                  };
              });
          };

          return m$1('#start', { config: h.setPageTitle(I18n$1.t('header_html', I18nScope$16())) }, [m$1('.w-section.hero-full.hero-start', [m$1('.w-container.u-text-center', [m$1('.fontsize-megajumbo.fontweight-semibold.u-marginbottom-40', I18n$1.t('slogan', I18nScope$16())), m$1('.w-row.u-marginbottom-40', [m$1('.w-col.w-col-4.w-col-push-4', [m$1('a.btn.btn-large.u-marginbottom-10[href="#start-form"]', {
              config: h.scrollTo(),
              onclick: h.analytics.event({ cat: 'project_start', act: 'start_btnstart_click' })
          }, I18n$1.t('submit', I18nScope$16()))])]), m$1('.w-row', _$1.isEmpty(stats) ? '' : [m$1('.w-col.w-col-4', [m$1('.fontsize-largest.lineheight-loose', h.formatNumber(stats.total_contributors, 0, 3)), m$1('p.fontsize-small.start-stats', I18n$1.t('header.people', I18nScope$16()))]), m$1('.w-col.w-col-4', [m$1('.fontsize-largest.lineheight-loose', stats.total_contributed.toString().slice(0, 2) + ' milhões'), m$1('p.fontsize-small.start-stats', I18n$1.t('header.money', I18nScope$16()))]), m$1('.w-col.w-col-4', [m$1('.fontsize-largest.lineheight-loose', h.formatNumber(stats.total_projects_success, 0, 3)), m$1('p.fontsize-small.start-stats', I18n$1.t('header.success', I18nScope$16()))])])])]), m$1('.w-section.section', [m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-10.w-col-push-1.u-text-center', [m$1('.fontsize-larger.u-marginbottom-10.fontweight-semibold', I18n$1.t('page-title', I18nScope$16())), m$1('.fontsize-small', I18n$1.t('page-subtitle', I18nScope$16()))])]), m$1('.w-clearfix.how-row', [m$1('.w-hidden-small.w-hidden-tiny.how-col-01', [m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.1', I18nScope$16())), m$1('.fontsize-base', I18n$1.t('banner.2', I18nScope$16()))]), m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.3', I18nScope$16())), m$1('.fontsize-base', I18n$1.t('banner.4', I18nScope$16()))])]), m$1('.how-col-02'), m$1('.how-col-03', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.5', I18nScope$16())), m$1('.fontsize-base', I18n$1.t('banner.6', I18nScope$16())), m$1('.fontweight-semibold.fontsize-large.u-margintop-30', I18n$1.t('banner.7', I18nScope$16())), m$1('.fontsize-base', I18n$1.t('banner.8', I18nScope$16()))]), m$1('.w-hidden-main.w-hidden-medium.how-col-01', [m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.1', I18nScope$16())), m$1('.fontsize-base', I18n$1.t('banner.2', I18nScope$16()))]), m$1('.info-howworks-backers', [m$1('.fontweight-semibold.fontsize-large', I18n$1.t('banner.3', I18nScope$16())), m$1('.fontsize-base', I18n$1.t('banner.4', I18nScope$16()))])])])])]), m$1('.w-section.divider'), m$1('.w-section.section-large', [m$1('.w-container.u-text-center.u-marginbottom-60', [m$1('div', [m$1('span.fontsize-largest.fontweight-semibold', I18n$1.t('features.title', I18nScope$16()))]), m$1('.w-hidden-small.w-hidden-tiny.fontsize-large.u-marginbottom-20', I18n$1.t('features.subtitle', I18nScope$16())), m$1('.w-hidden-main.w-hidden-medium.u-margintop-30', [m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_1', I18nScope$16())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_2', I18nScope$16())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_3', I18nScope$16())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_4', I18nScope$16())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_5', I18nScope$16())), m$1('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_6', I18nScope$16()))])]), m$1('.w-container', [m$1('.w-tabs.w-hidden-small.w-hidden-tiny', [m$1('.w-tab-menu.w-col.w-col-4', _$1.map(ctrl.paneImages, function (pane, idx) {
              return m$1('btn.w-tab-link.w-inline-block.tab-list-item' + (idx === ctrl.selectedPane() ? '.selected' : ''), {
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_solution_click', lbl: pane.label }, ctrl.selectPane(idx))
              }, pane.label);
          })), m$1('.w-tab-content.w-col.w-col-8', _$1.map(ctrl.paneImages, function (pane, idx) {
              return m$1('.w-tab-pane', [m$1('img[src="' + pane.src + '"].pane-image' + (idx === ctrl.selectedPane() ? '.selected' : ''))]);
          }))])])]), m$1('.w-section.section-large.card-terciary', m$1('.w-container', [m$1('.u-text-center.u-marginbottom-40', [m$1('div', m$1('span.fontsize-largest.fontweight-semibold', I18n$1.t('mode.title', I18nScope$16()))), m$1('.w-row', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10', m$1('.fontsize-large.u-marginbottom-20', I18n$1.t('mode.subtitle', I18nScope$16()))), m$1('.w-col.w-col-1')])]), m$1('div', m$1('.flex-row.u-marginbottom-40', [m$1('.flex-column.card.u-radius.u-marginbottom-30', [m$1('.u-text-center.u-marginbottom-30', m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/5632f334ec8a367d341b4bba_badge-aon.png\']')), m$1('.fontsize-large.flex-column.u-marginbottom-20', [I18n$1.t('mode.aon.info', I18nScope$16()), m$1.trust('&nbsp;')]), m$1('.fontsize-base.flex-column.fontcolor-secondary', I18n$1.t('mode.aon.info_2', I18nScope$16()))]), m$1('.flex-column.card.u-radius.u-marginbottom-30', [m$1('.u-text-center.u-marginbottom-30', m$1('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/5632ebacd092957f34eaea9c_badge-flex.png\']')), m$1('.fontsize-large.flex-column.u-marginbottom-20', I18n$1.t('mode.flex.info', I18nScope$16())), m$1('.fontsize-base.flex-column.fontcolor-secondary', I18n$1.t('mode.flex.info_2', I18nScope$16()))])])), m$1('.u-text-center.u-marginbottom-30', [m$1('.fontsize-large.fontweight-semibold', I18n$1.t('mode.tax_info', I18nScope$16())), m$1('.fontsize-smallest.fontcolor-secondary', [I18n$1.t('mode.failed_info', I18nScope$16()), m$1.trust(I18n$1.t('mode.more_link', I18nScope$16()))])])])), m$1('.w-section.section-large.bg-blue-one', [m$1('.w-container.u-text-center', [m$1('.fontsize-larger.lineheight-tight.fontcolor-negative.u-marginbottom-20', [I18n$1.t('video.title', I18nScope$16()), m$1('br'), I18n$1.t('video.subtitle', I18nScope$16())]), m$1.component(youtubeLightbox, {
              src: I18n$1.t('video.src', I18nScope$16()),
              onclick: h.analytics.event({ cat: 'project_start', act: 'start_video_play' })
          })])]), m$1('.w-hidden-small.w-hidden-tiny.section-categories', [m$1('.w-container', [m$1('.u-text-center', [m$1('.w-row', [m$1('.w-col.w-col-10.w-col-push-1', [m$1('.fontsize-large.u-marginbottom-40.fontcolor-negative', I18n$1.t('categories.title', I18nScope$16()))])])]), m$1('.w-tabs', [m$1('.w-tab-menu.u-text-center', _$1.map(ctrl.categories(), function (category) {
              return m$1('a.w-tab-link.w-inline-block.btn-category.small.btn-inline' + (ctrl.selectedCategoryIdx() === category.id ? '.w--current' : ''), {
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_category_click', lbl: category.name }, ctrl.selectCategory(category))
              }, [m$1('div', category.name)]);
          })), m$1('.w-tab-content.u-margintop-40', [m$1('.w-tab-pane.w--tab-active', [m$1('.w-row', ctrl.selectedCategoryIdx() !== -1 ? _$1.map(ctrl.selectedCategory(), function (category) {
              return [m$1('.w-col.w-col-5', [m$1('.fontsize-jumbo.u-marginbottom-20', category.name), m$1('a.w-button.btn.btn-medium.btn-inline.btn-dark[href="#start-form"]', {
                  config: h.scrollTo()
              }, I18n$1.t('submit', I18nScope$16()))]), m$1('.w-col.w-col-7', [m$1('.fontsize-megajumbo.fontcolor-negative', 'R$ ' + (category.total_successful_value ? h.formatNumber(category.total_successful_value, 2, 3) : '...')), m$1('.fontsize-large.u-marginbottom-20', 'Doados para projetos'), m$1('.fontsize-megajumbo.fontcolor-negative', category.successful_projects ? category.successful_projects : '...'), m$1('.fontsize-large.u-marginbottom-30', 'Projetos financiados'), !_$1.isEmpty(ctrl.featuredProjects()) ? _$1.map(ctrl.featuredProjects(), function (project) {
                  return !_$1.isUndefined(project) ? m$1('.w-row.u-marginbottom-10', [m$1('.w-col.w-col-1', [m$1('img.user-avatar[src="' + h.useAvatarOrDefault(project.userThumb) + '"]')]), m$1('.w-col.w-col-11', [m$1('.fontsize-base.fontweight-semibold', project.user.name), m$1('.fontsize-smallest', [I18n$1.t('categories.pledged', I18nScope$16({ pledged: h.formatNumber(project.pledged), contributors: project.total_contributors })), m$1('a.link-hidden[href="/' + project.permalink + '"]', project.name)])])]) : m$1('.fontsize-base', I18n$1.t('categories.loading_featured', I18nScope$16()));
              }) : ''])];
          }) : '')])])])])]), m$1.component(slider, {
              slides: testimonials(),
              title: I18n$1.t('testimonials_title', I18nScope$16()),
              slideClass: 'slide-testimonials-content',
              wrapperClass: 'slide-testimonials',
              onchange: h.analytics.event({ cat: 'project_start', act: 'start_testimonials_change' })
          }), m$1('.w-section.divider.u-margintop-30'), m$1('.w-container', [m$1('.fontsize-larger.u-text-center.u-marginbottom-60.u-margintop-40', I18n$1.t('qa_title', I18nScope$16())), m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-6', _$1.map(ctrl.questions.col_1, function (question) {
              return m$1.component(landingQA, {
                  question: question.question,
                  answer: question.answer,
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_qa_click', lbl: question.question })
              });
          })), m$1('.w-col.w-col-6', _$1.map(ctrl.questions.col_2, function (question) {
              return m$1.component(landingQA, {
                  question: question.question,
                  answer: question.answer,
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_qa_click', lbl: question.question })
              });
          }))])]), m$1('#start-form.w-section.section-large.u-text-center.bg-purple.before-footer', [m$1('.w-container', [m$1('.fontsize-jumbo.fontcolor-negative.u-marginbottom-60', 'Crie o seu rascunho gratuitamente!'), m$1('form[action="/projects/fallback_create"][method="GET"].w-row.w-form', {
              onsubmit: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_submit' })
          }, [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.fontsize-larger.fontcolor-negative.u-marginbottom-10', I18n$1.t('form.title', I18nScope$16())), m$1('input[name="utf8"][type="hidden"][value="✓"]'), m$1('input[name="authenticity_token"][type="hidden"][value="' + h.authenticityToken() + '"]'), m$1('input.w-input.text-field.medium.u-marginbottom-30[type="text"]', {
              name: 'project[name]',
              onchange: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_change', lbl: 'name' })
          }), m$1('.fontsize-larger.fontcolor-negative.u-marginbottom-10', 'na categoria'), m$1('select.w-select.text-field.medium.u-marginbottom-40', {
              name: 'project[category_id]',
              onchange: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_change', lbl: 'category' })
          }, [m$1('option[value=""]', I18n$1.t('form.select_default', I18nScope$16())), _$1.map(ctrl.categories(), function (category) {
              return m$1('option[value="' + category.id + '"]', category.name);
          })])]), m$1('.w-col.w-col-2'), m$1('.w-row.u-marginbottom-80', [m$1('.w-col.w-col-4.w-col-push-4.u-margintop-40', [m$1('input[type="submit"][value="' + I18n$1.t('form.submit', I18nScope$16()) + '"].w-button.btn.btn-large')])])])])])]);
      }
  };

  var teamTotal = {
      controller: function controller() {
          var vm = {
              collection: m$1.prop([])
          };

          models.teamTotal.getRow().then(function (data) {
              vm.collection(data);
          });

          return {
              vm: vm
          };
      },
      view: function view(ctrl, args) {
          return m$1('#team-total-static.w-section.section-one-column.section.u-margintop-40.u-text-center.u-marginbottom-20', [ctrl.vm.collection().map(function (teamTotal) {
              return m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-2'), m$1('.w-col.w-col-8', [m$1('.fontsize-base.u-marginbottom-30', 'Hoje somos ' + teamTotal.member_count + ' pessoas espalhadas por ' + teamTotal.total_cities + ' cidades em ' + teamTotal.countries.length + ' países (' + teamTotal.countries.toString() + ')! O Catarse é independente, sem investidores, de código aberto e construído com amor. Nossa paixão é construir um ambiente onde cada vez mais projetos possam ganhar vida.'), m$1('.fontsize-larger.lineheight-tight.text-success', 'Nossa equipe, junta, já apoiou R$' + h.formatNumber(teamTotal.total_amount) + ' para ' + teamTotal.total_contributed_projects + ' projetos!')]), m$1('.w-col.w-col-2')])]);
          })]);
      }
  };

  var teamMembers = {
      controller: function controller() {
          var vm = {
              collection: m$1.prop([])
          },
              groupCollection = function groupCollection(collection, groupTotal) {
              return _$1.map(_$1.range(Math.ceil(collection.length / groupTotal)), function (i) {
                  return collection.slice(i * groupTotal, (i + 1) * groupTotal);
              });
          };

          models.teamMember.getPage().then(function (data) {
              vm.collection(groupCollection(data, 4));
          });

          return {
              vm: vm
          };
      },
      view: function view(ctrl) {
          return m$1('#team-members-static.w-section.section', [m$1('.w-container', [_$1.map(ctrl.vm.collection(), function (group) {
              return m$1('.w-row.u-text-center', [_$1.map(group, function (member) {
                  return m$1('.team-member.w-col.w-col-3.w-col-small-3.w-col-tiny-6.u-marginbottom-40', [m$1('a.alt-link[href="/users/' + member.id + '"]', [m$1('img.thumb.big.u-round.u-marginbottom-10[src="' + member.img + '"]'), m$1('.fontweight-semibold.fontsize-base', member.name)]), m$1('.fontsize-smallest.fontcolor-secondary', 'Apoiou ' + member.total_contributed_projects + ' projetos')]);
              })]);
          })])]);
      }
  };

  var team = {
      view: function view() {
          return m$1('#static-team-app', [m$1.component(teamTotal), m$1.component(teamMembers)]);
      }
  };

  var I18nScope$18 = _$1.partial(h.i18nScope, 'users.balance');

  var userBalanceRequestModelContent = {
      controller: function controller(args) {
          var vm = postgrest.filtersVM({ user_id: 'eq' }),
              balance = args.balance,
              loaderOpts = models.balanceTransfer.postOptions({
              user_id: balance.user_id }),
              requestLoader = postgrest.loaderWithToken(loaderOpts),
              displayDone = h.toggleProp(false, true),
              requestFund = function requestFund() {
              requestLoader.load().then(function (data) {
                  args.balanceManager.load();
                  args.balanceTransactionManager.load();
                  displayDone.toggle();
              });
          };

          args.bankAccountManager.load();

          return {
              requestLoader: requestLoader,
              requestFund: requestFund,
              bankAccounts: args.bankAccountManager.collection,
              displayDone: displayDone,
              loadBankA: args.bankAccountManager.loader
          };
      },
      view: function view(ctrl, args) {
          var balance = args.balance;

          return ctrl.loadBankA() ? h.loader() : m$1('div', _$1.map(ctrl.bankAccounts(), function (item) {
              return [m$1('.modal-dialog-header', [m$1('.fontsize-large.u-text-center', I18n$1.t('withdraw', I18nScope$18()))]), ctrl.displayDone() ? m$1('.modal-dialog-content.u-text-center', [m$1('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m$1('p.fontsize-large', I18n$1.t('sucess_message', I18nScope$18()))]) : m$1('.modal-dialog-content', [m$1('.fontsize-base.u-marginbottom-20', [m$1('span.fontweight-semibold', 'Valor:'), m$1.trust('&nbsp;'), m$1('span.text-success', 'R$ ' + h.formatNumber(balance.amount, 2, 3))]), m$1('.fontsize-base.u-marginbottom-10', [m$1('span', { style: { 'font-weight': ' 600' } }, I18n$1.t('bank.account', I18nScope$18()))]), m$1('.fontsize-small.u-marginbottom-10', [m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.name', I18nScope$18())), m$1.trust('&nbsp;'), item.owner_name]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.cpf_cnpj', I18nScope$18())), m$1.trust('&nbsp;'), item.owner_document]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.bank_name', I18nScope$18())), m$1.trust('&nbsp;'), item.bank_name]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.agency', I18nScope$18())), m$1.trust('&nbsp;'), item.agency + '-' + item.agency_digit]), m$1('div', [m$1('span.fontcolor-secondary', I18n$1.t('bank.account', I18nScope$18())), m$1.trust('&nbsp;'), item.account + '-' + item.account_digit])])]), !ctrl.displayDone() ? m$1('.modal-dialog-nav-bottom', [m$1('.w-row', [m$1('.w-col.w-col-3'), m$1('.w-col.w-col-6', [ctrl.requestLoader() ? h.loader() : m$1('a.btn.btn-large.btn-request-fund[href="js:void(0);"]', { onclick: ctrl.requestFund }, 'Solicitar saque')]), m$1('.w-col.w-col-3')])]) : ''];
          }));
      }
  };

  var I18nScope$17 = _$1.partial(h.i18nScope, 'users.balance');

  var userBalance = {
      controller: function controller(args) {
          args.balanceManager.load();

          return {
              userBalances: args.balanceManager.collection,
              displayModal: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var balance = _$1.first(ctrl.userBalances()),
              balanceRequestModalC = [userBalanceRequestModelContent, _$1.extend({}, { balance: balance }, args)];

          return m$1('.w-section.section.user-balance-section', [ctrl.displayModal() ? m$1.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: balanceRequestModalC
          }) : '', m$1('.w-container', [m$1('.w-row', [m$1('.w-col.w-col-8.u-text-center-small-only.u-marginbottom-20', [m$1('.fontsize-larger', [I18n.t('totals', I18nScope$17()), m$1('span.text-success', 'R$ ' + h.formatNumber(balance.amount, 2, 3))])]), m$1('.w-col.w-col-4', [m$1('a[class="r-fund-btn w-button btn btn-medium u-marginbottom-10 ' + (balance.amount <= 0 ? 'btn-inactive' : '') + '"][href="js:void(0);"]', { onclick: balance.amount > 0 ? ctrl.displayModal.toggle : 'js:void(0);' }, I18n.t('withdraw_cta', I18nScope$17()))])])])]);
      }
  };

  var I18nScope$19 = _.partial(h.i18nScope, 'users.balance');

  var userBalanceTrasactionRow = {
      controller: function controller(args) {
          var expanded = h.toggleProp(false, true);

          if (args.index == 0) {
              expanded.toggle();
          }

          return {
              expanded: expanded
          };
      },
      view: function view(ctrl, args) {
          var item = args.item,
              createdAt = h.momentFromString(item.created_at, 'YYYY-MM-DD');

          return m$1('div[class=\'balance-card ' + (ctrl.expanded() ? 'card-detailed-open' : '') + '\']', m$1('.w-clearfix.card.card-clickable', [m$1('.w-row', [m$1('.w-col.w-col-2.w-col-tiny-2', [m$1('.fontsize-small.lineheight-tightest', createdAt.format('D MMM')), m$1('.fontsize-smallest.fontcolor-terciary', createdAt.format('YYYY'))]), m$1('.w-col.w-col-10.w-col-tiny-10', [m$1('.w-row', [m$1('.w-col.w-col-4', [m$1('div', [m$1('span.fontsize-smaller.fontcolor-secondary', I18n.t('debit', I18nScope$19())), m$1.trust('&nbsp;'), m$1('span.fontsize-base.text-error', 'R$ ' + h.formatNumber(Math.abs(item.debit), 2, 3))])]), m$1('.w-col.w-col-4', [m$1('div', [m$1('span.fontsize-smaller.fontcolor-secondary', I18n.t('credit', I18nScope$19())), m$1.trust('&nbsp;'), m$1('span.fontsize-base.text-success', 'R$ ' + h.formatNumber(item.credit, 2, 3))])]), m$1('.w-col.w-col-4', [m$1('div', [m$1('span.fontsize-smaller.fontcolor-secondary', I18n.t('totals', I18nScope$19())), m$1.trust('&nbsp;'), m$1('span.fontsize-base', 'R$ ' + h.formatNumber(item.total_amount, 2, 3))])])])])]), m$1('a.w-inline-block.arrow-admin.' + (ctrl.expanded() ? 'arrow-admin-opened' : '') + '.fa.fa-chevron-down.fontcolor-secondary[href="js:(void(0));"]', { onclick: ctrl.expanded.toggle })]), ctrl.expanded() ? m$1('.card', _.map(item.source, function (transaction) {
              var pos = transaction.amount >= 0;

              return m$1('div', [m$1('.w-row.fontsize-small.u-marginbottom-10', [m$1('.w-col.w-col-2', [m$1('.text-' + (pos ? 'success' : 'error'), (pos ? '+' : '-') + ' R$ ' + h.formatNumber(Math.abs(transaction.amount), 2, 3))]), m$1('.w-col.w-col-10', [m$1('div', transaction.event_name + ' ' + transaction.origin_object.name)])]), m$1('.divider.u-marginbottom-10')]);
          })) : '');
      }
  };

  var userBalanceTransactions = {
      controller: function controller(args) {
          args.balanceTransactionManager.load();

          return {
              list: args.balanceTransactionManager.list
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.list;

          return m$1('.w-section.section.card-terciary.before-footer.balance-transactions-area', [m$1('.w-container', _$1.map(list.collection(), function (item, index) {
              return m$1.component(userBalanceTrasactionRow, { item: item, index: index });
          })), m$1('.container', [m$1('.w-row.u-margintop-40', [m$1('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])]);
      }
  };

  var userBalanceMain = {
      controller: function controller(args) {
          var userIdVM = postgrest$1.filtersVM({ user_id: 'eq' });

          userIdVM.user_id(args.user_id);

          // Handles with user balance request data
          var balanceManager = function () {
              var collection = m$1.prop([{ amount: 0, user_id: args.user_id }]),
                  load = function load() {
                  models.balance.getRowWithToken(userIdVM.parameters()).then(collection);
              };

              return {
                  collection: collection,
                  load: load
              };
          }(),


          // Handles with user balance transactions list data
          balanceTransactionManager = function () {
              var listVM = postgrest$1.paginationVM(models.balanceTransaction, 'created_at.desc'),
                  load = function load() {
                  listVM.firstPage(userIdVM.parameters());
              };

              return {
                  load: load,
                  list: listVM
              };
          }(),


          // Handles with bank account to check
          bankAccountManager = function () {
              var collection = m$1.prop([]),
                  loader = function () {
                  return postgrest$1.loaderWithToken(models.bankAccount.getRowOptions(userIdVM.parameters()));
              }(),
                  load = function load() {
                  loader.load().then(collection);
              };

              return {
                  collection: collection,
                  load: load,
                  loader: loader
              };
          }();

          return {
              bankAccountManager: bankAccountManager,
              balanceManager: balanceManager,
              balanceTransactionManager: balanceTransactionManager
          };
      },
      view: function view(ctrl, args) {
          var opts = _$1.extend({}, args, ctrl);
          return m$1('#balance-area', [m$1.component(userBalance, opts), m$1('.divider'), m$1.component(userBalanceTransactions, opts), m$1('.u-marginbottom-40'), m$1('.w-section.section.card-terciary.before-footer')]);
      }
  };

  var UserFollowBtn = {
      controller: function controller(args) {
          var following = m$1.prop(args.following || false),
              followVM = postgrest$1.filtersVM({ follow_id: 'eq' }),
              loading = m$1.prop(false),
              hover = m$1.prop(false),
              userFollowInsert = models.userFollow.postOptions({
              follow_id: args.follow_id }),
              userFollowDelete = function () {
              followVM.follow_id(args.follow_id);

              return models.userFollow.deleteOptions(followVM.parameters());
          }(),
              follow = function follow() {
              var l = postgrest$1.loaderWithToken(userFollowInsert);
              loading(true);

              l.load().then(function () {
                  following(true);
                  loading(false);
              });
          },
              unfollow = function unfollow() {
              var l = postgrest$1.loaderWithToken(userFollowDelete);
              loading(true);

              l.load().then(function () {
                  following(false);
                  loading(false);
              });
          };

          return {
              following: following,
              follow: follow,
              unfollow: unfollow,
              loading: loading,
              hover: hover
          };
      },
      view: function view(ctrl, args) {
          if (ctrl.loading()) {
              return h.loader();
          }
          if (ctrl.following()) {
              return m$1('a.w-button.btn.btn-medium.u-margintop-20', {
                  onclick: ctrl.unfollow,
                  onmouseover: function onmouseover() {
                      return ctrl.hover(true);
                  },
                  onmouseout: function onmouseout() {
                      return ctrl.hover(false);
                  }
              }, ctrl.hover() ? 'Deixar de seguir' : 'Seguindo');
          } else {
              return m$1('a.w-button.btn.btn-medium.btn-terciary.u-margintop-20', { onclick: ctrl.follow }, 'Seguir');
          }
      }
  };

  var UserFollowCard = {
    controller: function controller(args) {
      var friend = m$1.prop(args.friend);
      return {
        friend: friend
      };
    },
    view: function view(ctrl, args) {
      var friend = ctrl.friend(),
          profile_img = _$1.isEmpty(friend.avatar) ? '/assets/catarse_bootstrap/user.jpg' : friend.avatar;
      return m$1('.w-col.w-col-4', m$1('.card.card-backer.u-marginbottom-20.u-radius.u-text-center', [m$1('img.thumb.u-marginbottom-10.u-round[src=\'' + profile_img + '\']'), m$1('.fontsize-base.fontweight-semibold.lineheight-tight', m$1('a.link-hidden', { href: '/users/' + friend.friend_id }, friend.name)), m$1('.fontcolor-secondary.fontsize-smallest.u-marginbottom-10', _$1.isNull(friend.city) ? '' : m$1('.fontsize-smaller.fontcolor-secondary.u-marginbottom-10', friend.city + ', ' + friend.state)), m$1('.fontsize-smaller', [m$1('span.fontweight-semibold', friend.total_contributed_projects), ' apoiados ', m$1.trust('&nbsp;'), '| ', m$1.trust('&nbsp;'), m$1('span.fontweight-semibold', friend.total_published_projects), ' criados']), m$1('.btn-bottom-card.w-row', [m$1('.w-col.w-col-3.w-col-small-4.w-col-tiny-3'), m$1('.w-col.w-col-6.w-col-small-4.w-col-tiny-6', m$1.component(UserFollowBtn, { following: friend.following, follow_id: friend.friend_id })), m$1('.w-col.w-col-3.w-col-small-4.w-col-tiny-3')])]));
    }
  };

  var loadMoreBtn = {
      view: function view(ctrl, args) {
          var collection = args.collection;
          return m$1('.w-col.w-col-2', [!collection.isLoading() ? collection.isLastPage() ? '' : m$1('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: collection.nextPage
          }, 'Carregar mais') : h.loader()]);
      }
  };

  var userFriends = {
      controller: function controller(args) {
          models.userFriend.pageSize(9);

          var userFriendVM = postgrest$1.filtersVM({ user_id: 'eq' }),
              user = args.user,
              friendListVM = postgrest$1.paginationVM(models.userFriend, 'following.asc,total_contributed_projects.desc', {
              'Prefer': 'count=exact'
          }),
              allLoading = m$1.prop(false),
              followAll = function followAll() {
              allLoading(true);
              var l = postgrest$1.loaderWithToken(models.followAllFriends.postOptions({}));

              l.load().then(function () {
                  friendListVM.firstPage(userFriendVM.parameters());
                  allLoading(false);
              });
          };

          userFriendVM.user_id(user.user_id);

          if (!friendListVM.collection().length) {
              friendListVM.firstPage(userFriendVM.parameters());
          }

          return {
              friendListVM: friendListVM,
              followAll: followAll,
              allLoading: allLoading
          };
      },
      view: function view(ctrl, args) {
          var listVM = ctrl.friendListVM;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row.u-marginbottom-40.card.u-radius.card-terciary', [m$1('.w-col.w-col-7.w-col-small-6.w-col-tiny-6', [m$1('.fontsize-small', 'Comece agora! Siga todos os seus amigos ou somente alguns deles para descobrir projetos juntos!')]), m$1('.w-col.w-col-5.w-col-small-6.w-col-tiny-6', [ctrl.allLoading() ? h.loader() : m$1('a.w-button.btn.btn-medium', {
              onclick: ctrl.followAll
          }, 'Siga todos os seus ' + (listVM.total() ? listVM.total() : '') + ' amigos')])]), m$1('.w-row', [_$1.map(listVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, { friend: friend });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: listVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var userFollows = {
      controller: function controller(args) {
          models.userFollow.pageSize(9);
          var userFriendVM = postgrest$1.filtersVM({ user_id: 'eq' }),
              user = args.user,
              hash = m$1.prop(window.location.hash),
              followsListVM = postgrest$1.paginationVM(models.userFollow, 'created_at.desc', {
              'Prefer': 'count=exact'
          });

          userFriendVM.user_id(user.user_id);
          if (!followsListVM.collection().length) {
              followsListVM.firstPage(userFriendVM.parameters());
          }

          return {
              followsListVM: followsListVM
          };
      },
      view: function view(ctrl, args) {
          var followsVM = ctrl.followsListVM;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row', [_$1.map(followsVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, { friend: _$1.extend({}, { following: true, friend_id: friend.follow_id }, friend.source) });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: followsVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var userFollowers = {
      controller: function controller(args) {
          models.userFollower.pageSize(9);
          var followersListVM = postgrest$1.paginationVM(models.userFollower, 'following.asc,created_at.desc', {
              'Prefer': 'count=exact'
          }),
              user = args.user,
              userIdVM = postgrest$1.filtersVM({ follow_id: 'eq' });

          userIdVM.follow_id(user.user_id);

          if (!followersListVM.collection().length) {
              followersListVM.firstPage(userIdVM.parameters());
          }
          return {
              followersListVM: followersListVM
          };
      },
      view: function view(ctrl, args) {
          var followersVM = ctrl.followersListVM;
          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row', [_$1.map(followersVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, { friend: _$1.extend({}, { friend_id: friend.user_id }, friend.source) });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: followersVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var userCreators = {
      controller: function controller(args) {
          models.creatorSuggestion.pageSize(9);

          var creatorsListVM = postgrest$1.paginationVM(models.creatorSuggestion, "following.asc, total_published_projects.desc, total_contributed_projects.desc", {
              'Prefer': 'count=exact'
          });

          if (!creatorsListVM.collection().length) {
              creatorsListVM.firstPage();
          }

          return {
              creatorsListVM: creatorsListVM
          };
      },
      view: function view(ctrl, args) {
          var creatorsVM = ctrl.creatorsListVM;

          return m$1('.w-section.bg-gray.before-footer.section', [m$1('.w-container', [m$1('.w-row', [_$1.map(creatorsVM.collection(), function (friend) {
              return m$1.component(UserFollowCard, {
                  friend: _$1.extend({}, {
                      friend_id: friend.user_id
                  }, friend)
              });
          })]), m$1('.w-section.section.bg-gray', [m$1('.w-container', [m$1('.w-row.u-marginbottom-60', [m$1('.w-col.w-col-5', [m$1('.u-marginright-20')]), m$1.component(loadMoreBtn, { collection: creatorsVM }), m$1('.w-col.w-col-5')])])])])]);
      }
  };

  var FollowFoundFriends = {
      controller: function controller(args) {
          var user = h.getUser(),
              hash = m$1.prop(window.location.hash),
              displayTabContent = function displayTabContent() {
              var c_opts = {
                  user: user
              },
                  tabs = {
                  '#creators': m$1.component(userCreators, c_opts),
                  '#friends': m$1.component(userFriends, c_opts),
                  '#follows': m$1.component(userFollows, c_opts),
                  '#followers': m$1.component(userFollowers, c_opts)
              };

              hash(window.location.hash);

              if (_$1.isEmpty(hash()) || hash() === '#_=_') {
                  return tabs['#friends'];
              }

              return tabs[hash()];
          };

          h.redrawHashChange();

          return {
              user: user,
              displayTabContent: displayTabContent
          };
      },
      view: function view(ctrl, args) {
          return [m$1('.w-section.dashboard-header', [m$1('.w-container', [m$1('.w-row.u-margintop-20.u-marginbottom-20', [m$1('.w-col.w-col-1'), m$1('.w-col.w-col-10.u-text-center', [m$1('.fontsize-larger.fontweight-semibold.u-marginbottom-10', 'Descubra projetos com seus amigos'), m$1('.fontsize-small', 'Siga os seus amigos e nós iremos te notificar sempre que eles lançarem ou apoiarem algum projeto')]), m$1('.w-col.w-col-1')])])]), [m$1('.divider.u-margintop-30'), m$1('.project-nav', m$1('.u-text-center.w-container', [m$1('a[id="creators-link"][class="dashboard-nav-link ' + (h.hashMatch('#creators') ? 'selected' : '') + '"] [href="#creators"]', 'Encontre realizadores'), m$1('a[id="friends-link"][class="dashboard-nav-link ' + (h.hashMatch('#friends') || h.hashMatch('') ? 'selected' : '') + '"] [href="#friends"]', 'Encontre amigos'), m$1('a[id="follows-link"][class="dashboard-nav-link ' + (h.hashMatch('#follows') ? 'selected' : '') + '"] [href="#follows"]', ['Seguindo', m$1.trust('&nbsp;'), m$1('span.w-hidden-small.w-hidden-tiny.badge', ctrl.user.follows_count)]), m$1('a[id="followers-link"][class="dashboard-nav-link ' + (h.hashMatch('#followers') ? 'selected' : '') + '"] [href="#followers"]', ['Seguidores', m$1.trust('&nbsp;'), m$1('span.w-hidden-small.w-hidden-tiny.badge', ctrl.user.followers_count)])]))], ctrl.displayTabContent()];
      }
  };

  var c = {
      root: {
          AdminUsers: adminUsers,
          AdminContributions: adminContributions,
          Flex: Flex,
          Insights: insights,
          Jobs: jobs,
          LiveStatistics: liveStatistics,
          ProjectsContributionReport: projectContributionReport,
          ProjectsDashboard: projectsDashboard,
          ProjectsExplore: projectsExplore,
          ProjectsHome: projectsHome,
          ProjectsShow: projectsShow,
          ProjectsPayment: projectsPayment,
          ProjectsReward: projectsReward,
          Publish: publish,
          Start: start,
          Team: team,
          UsersBalance: userBalanceMain,
          Menu: menu,
          Footer: footer,
          FollowFoundFriends: FollowFoundFriends
      }
  };

  return c;

}(m,I18n,postgrest,replaceDiacritics,_,moment,Chart));

//# sourceMappingURL=data:application/json;base64,
