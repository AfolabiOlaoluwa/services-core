var c = (function (m,moment$1,I18n$1,postgrest$1,replaceDiacritics,_$1,Chart) {
  'use strict';

  m = 'default' in m ? m['default'] : m;
  moment$1 = 'default' in moment$1 ? moment$1['default'] : moment$1;
  I18n$1 = 'default' in I18n$1 ? I18n$1['default'] : I18n$1;
  postgrest$1 = 'default' in postgrest$1 ? postgrest$1['default'] : postgrest$1;
  replaceDiacritics = 'default' in replaceDiacritics ? replaceDiacritics['default'] : replaceDiacritics;
  _$1 = 'default' in _$1 ? _$1['default'] : _$1;
  Chart = 'default' in Chart ? Chart['default'] : Chart;

  var _dataCache = {};
  var hashMatch = function hashMatch(str) {
      return window.location.hash === str;
  };
  var paramByName = function paramByName(name) {
      var normalName = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]'),
          regex = new RegExp('[\\?&]' + normalName + '=([^&#]*)'),
          results = regex.exec(location.search);
      return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  };
  var selfOrEmpty = function selfOrEmpty(obj) {
      var emptyState = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

      return obj ? obj : emptyState;
  };
  var setMomentifyLocale = function setMomentifyLocale() {
      moment$1.locale('pt', {
          monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_')
      });
  };
  var existy = function existy(x) {
      return x != null;
  };
  var momentify = function momentify(date, format) {
      format = format || 'DD/MM/YYYY';
      return date ? moment$1(date).locale('pt').format(format) : 'no date';
  };
  var storeAction = function storeAction(action) {
      if (!sessionStorage.getItem(action)) {
          return sessionStorage.setItem(action, action);
      }
  };
  var callStoredAction = function callStoredAction(action, func) {
      if (sessionStorage.getItem(action)) {
          func.call();
          return sessionStorage.removeItem(action);
      }
  };
  var discuss = function discuss(page, identifier) {
      var d = document,
          s = d.createElement('script');
      window.disqus_config = function () {
          this.page.url = page;
          this.page.identifier = identifier;
      };
      s.src = '//catarseflex.disqus.com/embed.js';
      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
      return m('');
  };
  var validateEmail = function validateEmail(email) {
      var re = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
      return re.test(email);
  };
  var validationErrors = m.prop([]);
  var resetValidations = function resetValidations() {
      return validationErrors([]);
  };
  var validate = function validate() {
      var errorFields = m.prop([]);

      return {
          submit: function submit(fields, fn) {
              return function () {
                  resetValidations();

                  _.map(fields, function (field) {
                      if (field.rule === 'email') {
                          if (!validateEmail(field.prop())) {
                              validationErrors().push({ field: field.prop, message: 'E-mail inválido.' });
                          }
                      }

                      if (field.rule === 'text') {
                          if (field.prop().trim() === '') {
                              validationErrors().push({ field: field.prop, message: 'O campo não pode ser vazio.' });
                          }
                      }
                  });

                  return !validationErrors().length > 0 ? fn() : false;
              };
          },
          hasError: function hasError(fieldProp) {
              return _.reduce(validationErrors(), function (memo, fieldError) {
                  return fieldError.field() === fieldProp() || memo;
              }, false);
          }
      };
  };
  var momentFromString = function momentFromString(date, format) {
      var european = moment$1(date, format || 'DD/MM/YYYY');
      return european.isValid() ? european : moment$1(date);
  };
  var translatedTimeUnits = {
      days: 'dias',
      minutes: 'minutos',
      hours: 'horas',
      seconds: 'segundos'
  };
  var translatedTime = function translatedTime(time) {
      var translatedTime = translatedTimeUnits,
          unit = function unit() {
          var projUnit = translatedTime[time.unit || 'seconds'];

          return time.total <= 1 ? projUnit.slice(0, -1) : projUnit;
      };

      return {
          unit: unit(),
          total: time.total
      };
  };
  var generateFormatNumber = function generateFormatNumber(s, c) {
      return function (number, n, x) {
          if (!_.isNumber(number)) {
              return null;
          }

          var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
              num = number.toFixed(Math.max(0, ~ ~n));
          return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));
      };
  };
  var formatNumber = generateFormatNumber('.', ',');
  var toggleProp = function toggleProp(defaultState, alternateState) {
      var p = m.prop(defaultState);
      p.toggle = function () {
          return p(p() === alternateState ? defaultState : alternateState);
      };

      return p;
  };
  var idVM = postgrest.filtersVM({
      id: 'eq'
  });
  var getCurrentProject = function getCurrentProject() {
      if (_dataCache.currentProject) return _dataCache.currentProject;

      var root = document.getElementById('project-show-root'),
          data = root && root.getAttribute('data-parameters');
      if (data) {
          return _dataCache.currentProject = JSON.parse(data);
      } else {
          return false;
      }
  };
  var getRdToken = function getRdToken() {
      if (_dataCache.rdToken) return _dataCache.rdToken;

      var meta = _.first(document.querySelectorAll('[name=rd-token]'));
      return meta ? _dataCache.rdToken = meta.content : undefined;
  };
  var getUser = function getUser() {
      if (_dataCache.user) return _dataCache.user;

      var body = document.getElementsByTagName('body'),
          data = _.first(body).getAttribute('data-user');
      if (data) {
          return _dataCache.user = JSON.parse(data);
      } else {
          return false;
      }
  };
  var getApiHost = function getApiHost() {
      if (_dataCache.apiHost) return _dataCache.apiHost;

      var el = document.getElementById('api-host');
      return _dataCache.apiHost = el && el.getAttribute('content');
  };
  var locationActionMatch = function locationActionMatch(action) {
      var act = window.location.pathname.split('/').slice(-1)[0];
      return action === act;
  };
  var useAvatarOrDefault = function useAvatarOrDefault(avatarPath) {
      return avatarPath || '/assets/catarse_bootstrap/user.jpg';
  };
  var loader = function loader() {
      return m('.u-text-center.u-margintop-30 u-marginbottom-30', [m('img[alt="Loader"][src="https://s3.amazonaws.com/catarse.files/loader.gif"]')]);
  };
  var newFeatureBadge = function newFeatureBadge() {
      return m('span.badge.badge-success.margin-side-5', I18n$1.t('projects.new_feature_badge'));
  };
  var fbParse = function fbParse() {
      var tryParse = function tryParse() {
          try {
              window.FB.XFBML.parse();
          } catch (e) {
              console.log(e);
          }
      };

      return window.setTimeout(tryParse, 500); //use timeout to wait async of facebook
  };
  var pluralize = function pluralize(count, s, p) {
      return count > 1 ? count + p : count + s;
  };
  var strip = function strip(html) {
      var tmp = document.createElement('div');
      tmp.innerHTML = html;
      return tmp.textContent || tmp.innerText || '';
  };
  var simpleFormat = function simpleFormat() {
      var str = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

      str = str.replace(/\r\n?/, '\n');
      if (str.length > 0) {
          str = str.replace(/\n\n+/g, '</p><p>');
          str = str.replace(/\n/g, '<br />');
          str = '<p>' + str + '</p>';
      }
      return str;
  };
  var rewardSouldOut = function rewardSouldOut(reward) {
      return reward.maximum_contributions > 0 ? reward.paid_count + reward.waiting_payment_count >= reward.maximum_contributions : false;
  };
  var rewardRemaning = function rewardRemaning(reward) {
      return reward.maximum_contributions - (reward.paid_count + reward.waiting_payment_count);
  };
  var parseUrl = function parseUrl(href) {
      var l = document.createElement('a');
      l.href = href;
      return l;
  };
  var UIHelper = function UIHelper() {
      return function (el, isInitialized) {
          if (!isInitialized && $) {
              window.UIHelper.setupResponsiveIframes($(el));
          }
      };
  };
  var toAnchor = function toAnchor() {
      return function (el, isInitialized) {
          if (!isInitialized) {
              var hash = window.location.hash.substr(1);
              if (hash === el.id) {
                  window.location.hash = '';
                  setTimeout(function () {
                      window.location.hash = el.id;
                  });
              }
          }
      };
  };
  var navigateToDevise = function navigateToDevise() {
      window.location.href = '/pt/login';
      return false;
  };
  var cumulativeOffset = function cumulativeOffset(element) {
      var top = 0,
          left = 0;
      do {
          top += element.offsetTop || 0;
          left += element.offsetLeft || 0;
          element = element.offsetParent;
      } while (element);

      return {
          top: top,
          left: left
      };
  };
  var closeModal = function closeModal() {
      var el = document.getElementsByClassName('modal-close')[0];
      if (_.isElement(el)) {
          el.onclick = function (event) {
              event.preventDefault();

              document.getElementsByClassName('modal-backdrop')[0].style.display = 'none';
          };
      };
  };
  var closeFlash = function closeFlash() {
      var el = document.getElementsByClassName('icon-close')[0];
      if (_.isElement(el)) {
          el.onclick = function (event) {
              event.preventDefault();

              el.parentElement.remove();
          };
      };
  };
  var i18nScope = function i18nScope(scope, obj) {
      obj = obj || {};
      return _.extend({}, obj, { scope: scope });
  };
  var redrawHashChange = function redrawHashChange(before) {
      var callback = _.isFunction(before) ? function () {
          before();
          m.redraw();
      } : m.redraw;

      window.addEventListener('hashchange', callback, false);
  };
  var authenticityToken = function authenticityToken() {
      var meta = _.first(document.querySelectorAll('[name=csrf-token]'));
      return meta ? meta.content : undefined;
  };
  var animateScrollTo = function animateScrollTo(el) {
      var scrolled = window.scrollY;

      var offset = cumulativeOffset(el).top,
          duration = 300,
          dFrame = (offset - scrolled) / duration,

      //EaseInOutCubic easing function. We'll abstract all animation funs later.
      eased = function eased(t) {
          return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
      },
          animation = setInterval(function () {
          var pos = eased(scrolled / offset) * scrolled;

          window.scrollTo(0, pos);

          if (scrolled >= offset) {
              clearInterval(animation);
          }

          scrolled = scrolled + dFrame;
      }, 1);
  };
  var scrollTo = function scrollTo() {
      var setTrigger = function setTrigger(el, anchorId) {
          el.onclick = function () {
              var anchorEl = document.getElementById(anchorId);

              if (_.isElement(anchorEl)) {
                  animateScrollTo(anchorEl);
              }

              return false;
          };
      };

      return function (el, isInitialized) {
          if (!isInitialized) {
              setTrigger(el, el.hash.slice(1));
          }
      };
  };
  var RDTracker = function RDTracker(eventId) {
      return function (el, isInitialized) {
          if (!isInitialized) {
              var integrationScript = document.createElement('script');
              integrationScript.type = 'text/javascript';
              integrationScript.id = 'RDIntegration';

              if (!document.getElementById(integrationScript.id)) {
                  document.body.appendChild(integrationScript);
                  integrationScript.onload = function () {
                      return RdIntegration.integrate(getRdToken(), eventId);
                  };
                  integrationScript.src = 'https://d335luupugsy2.cloudfront.net/js/integration/stable/rd-js-integration.min.js';
              }

              return false;
          }
      };
  };
  var analyticsEvent = function analyticsEvent(eventObj) {
      var fn = arguments.length <= 1 || arguments[1] === undefined ? Function.prototype : arguments[1];

      //https://developers.google.com/analytics/devguides/collection/analyticsjs/command-queue-reference#send
      if (!eventObj) {
          return fn;
      }

      var fireEvent = function fireEvent() {
          try {
              (function () {
                  var project = eventObj.project || getCurrentProject(),
                      user = getUser();
                  var dataProject = project && (project.id || project.project_id) ? {
                      project: {
                          id: project.id || project.project_id,
                          user_id: project.user_id,
                          category_id: project.category_id,
                          state: project.address && project.address.state_acronym,
                          city: project.address && project.address.city
                      }
                  } : null;
                  var dataUser = user && user.user_id ? {
                      user: {
                          id: user.user_id,
                          contributions: user.contributions,
                          published_projects: user.published_projects
                      }
                  } : null; //TODO
                  var data = _.extend({}, eventObj.extraData, dataProject, dataUser);
                  var location = window.location;
                  var domain = location.origin || location.protocol + '//' + location.hostname;
                  var ga = window.ga; //o ga tem q ser verificado aqui pq pode não existir na criaçaõ do DOM
                  var gaTracker = ga && ga.getAll && !_.isEmpty(ga.getAll()) ? _.first(ga.getAll()) : null;
                  try {
                      var sendData = {
                          event: _.extend({}, data, {
                              category: eventObj.cat,
                              action: eventObj.act,
                              label: eventObj.lbl,
                              value: eventObj.val,
                              request: {
                                  referrer: document.referrer || undefined,
                                  url: location.href,
                                  protocol: location.protocol.substr(0, location.protocol.length - 1),
                                  hostname: location.hostname,
                                  domain: domain,
                                  pathname: location.pathname || location.href.substr(domain.length).replace(/[\?\#].*$/, ''),
                                  hash: location.hash.replace(/^\#/, ''),
                                  query: function parseParams() {
                                      if (location.search) {
                                          try {
                                              return location.search.replace(/^\?/, '').split('&').reduce(function (params, param) {
                                                  var paramSplit = param.split('=').map(function (value) {
                                                      return decodeURIComponent(value.replace('+', ' '));
                                                  });
                                                  params[paramSplit[0]] = paramSplit[1];
                                                  return params;
                                              }, {});
                                          } catch (e) {
                                              return location.search;
                                          }
                                      }
                                  }()
                              }
                          }, gaTracker ? { ga: { clientId: gaTracker.get('clientId') } } : null)
                      };

                      $.ajax({
                          type: "POST",
                          url: getApiHost() + '/rpc/track',
                          // The key needs to match your method's input parameter (case-sensitive).
                          data: JSON.stringify(sendData),
                          contentType: "application/json; charset=utf-8",
                          dataType: "json",
                          success: function success(data) {
                              console.log('[h.analyticsEvent] /track ok', data);
                          },
                          failure: function failure(errMsg) {
                              console.error('[h.analyticsEvent] error:', e);
                          }
                      });
                  } catch (e) {
                      console.error('[h.analyticsEvent] error:', e);
                  }

                  if (typeof ga === 'function') {
                      //https://developers.google.com/analytics/devguides/collection/analyticsjs/sending-hits#the_send_method
                      ga('send', 'event', eventObj.cat, eventObj.act, eventObj.lbl, eventObj.val, {
                          nonInteraction: eventObj.nonInteraction !== false, //default é true,e só será false se, e somente se, esse parametro for definido como false
                          transport: 'beacon'
                      });
                  }
              })();
          } catch (e) {
              console.error('[h.analyticsEvent] error:', e);
          }
      };

      return function () {
          fireEvent();
          fn();
      };
  };
  var _analyticsOneTimeEventFired = {};
  var analyticsOneTimeEvent = function analyticsOneTimeEvent(eventObj, fn) {
      if (!eventObj) {
          return fn;
      }

      var eventKey = _.compact([eventObj.cat, eventObj.act]).join('_');
      if (!eventKey) {
          throw new Error('Should inform cat or act');
      }
      var fireEvent = analyticsEvent(eventObj, fn);
      return function () {
          if (!_analyticsOneTimeEventFired[eventKey]) {
              //console.log('oneTimeEvent',eventKey);
              _analyticsOneTimeEventFired[eventKey] = true;
              fireEvent();
          }
      };
  };
  var analyticsWindowScroll = function analyticsWindowScroll(eventObj) {
      if (eventObj) {
          (function () {
              var fireEvent = analyticsEvent(eventObj);
              window.addEventListener('scroll', function (e) {
                  //console.log('windowScroll');
                  if (fireEvent && $ && $(document).scrollTop() > $(window).height() * (3 / 4)) {
                      fireEvent();
                      fireEvent = null;
                  }
              });
          })();
      }
  };
  var analytics = {
      event: analyticsEvent,
      oneTimeEvent: analyticsOneTimeEvent,
      windowScroll: analyticsWindowScroll
  };
  setMomentifyLocale();
  closeFlash();
  closeModal();

  var h = {
      authenticityToken: authenticityToken,
      cumulativeOffset: cumulativeOffset,
      discuss: discuss,
      existy: existy,
      validateEmail: validateEmail,
      momentify: momentify,
      momentFromString: momentFromString,
      formatNumber: formatNumber,
      idVM: idVM,
      getUser: getUser,
      getApiHost: getApiHost,
      getCurrentProject: getCurrentProject,
      toggleProp: toggleProp,
      loader: loader,
      newFeatureBadge: newFeatureBadge,
      fbParse: fbParse,
      pluralize: pluralize,
      simpleFormat: simpleFormat,
      translatedTime: translatedTime,
      rewardSouldOut: rewardSouldOut,
      rewardRemaning: rewardRemaning,
      parseUrl: parseUrl,
      hashMatch: hashMatch,
      redrawHashChange: redrawHashChange,
      useAvatarOrDefault: useAvatarOrDefault,
      locationActionMatch: locationActionMatch,
      navigateToDevise: navigateToDevise,
      storeAction: storeAction,
      callStoredAction: callStoredAction,
      UIHelper: UIHelper,
      toAnchor: toAnchor,
      paramByName: paramByName,
      i18nScope: i18nScope,
      RDTracker: RDTracker,
      selfOrEmpty: selfOrEmpty,
      scrollTo: scrollTo,
      validationErrors: validationErrors,
      validate: validate,
      analytics: analytics,
      strip: strip
  };

  var models = {
      contributionDetail: postgrest$1.model('contribution_details'),
      contributionActivity: postgrest$1.model('contribution_activities'),
      projectDetail: postgrest$1.model('project_details'),
      userDetail: postgrest$1.model('user_details'),
      balance: postgrest$1.model('balances'),
      balanceTransaction: postgrest$1.model('balance_transactions'),
      balanceTransfer: postgrest$1.model('balance_transfers'),
      user: postgrest$1.model('users'),
      bankAccount: postgrest$1.model('bank_accounts'),
      rewardDetail: postgrest$1.model('reward_details'),
      projectReminder: postgrest$1.model('project_reminders'),
      projectReport: postgrest$1.model('project_reports'),
      contributions: postgrest$1.model('contributions'),
      directMessage: postgrest$1.model('direct_messages'),
      teamTotal: postgrest$1.model('team_totals'),
      projectAccount: postgrest$1.model('project_accounts'),
      projectContribution: postgrest$1.model('project_contributions'),
      projectPostDetail: postgrest$1.model('project_posts_details'),
      projectContributionsPerDay: postgrest$1.model('project_contributions_per_day'),
      projectContributionsPerLocation: postgrest$1.model('project_contributions_per_location'),
      projectContributionsPerRef: postgrest$1.model('project_contributions_per_ref'),
      project: postgrest$1.model('projects'),
      projectSearch: postgrest$1.model('rpc/project_search'),
      category: postgrest$1.model('categories'),
      categoryTotals: postgrest$1.model('category_totals'),
      categoryFollower: postgrest$1.model('category_followers'),
      teamMember: postgrest$1.model('team_members'),
      notification: postgrest$1.model('notifications'),
      statistic: postgrest$1.model('statistics'),
      successfulProject: postgrest$1.model('successful_projects'),
      finishedProject: postgrest$1.model('finished_projects')
  };

  models.teamMember.pageSize(40);
  models.rewardDetail.pageSize(false);
  models.project.pageSize(30);
  models.category.pageSize(50);
  models.contributionActivity.pageSize(40);
  models.successfulProject.pageSize(9);
  models.finishedProject.pageSize(9);

  var userListVM = postgrest.paginationVM(models.user, 'id.desc', { 'Prefer': 'count=exact' });

  var vm = postgrest.filtersVM({
      full_text_index: '@@',
      deactivated_at: 'is.null'
  });
  var paramToString = function paramToString(p) {
      return (p || '').toString().trim();
  };
  // Set default values
  vm.deactivated_at(null).order({
      id: 'desc'
  });

  vm.deactivated_at.toFilter = function () {
      var filter = JSON.parse(vm.deactivated_at());
      return filter;
  };

  vm.full_text_index.toFilter = function () {
      var filter = paramToString(vm.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  var filterMain = {
      view: function view(ctrl, args) {
          var inputWrapperClass = args.inputWrapperClass || '.w-input.text-field.positive.medium',
              btnClass = args.btnClass || '.btn.btn-large.u-marginbottom-10';

          return m('.w-row', [m('.w-col.w-col-10', [m('input' + inputWrapperClass + '[placeholder="' + args.placeholder + '"][type="text"]', {
              onchange: m.withAttr('value', args.vm),
              value: args.vm()
          })]), m('.w-col.w-col-2', [m('input#filter-btn' + btnClass + '[type="submit"][value="Buscar"]')])]);
      }
  };

  var adminFilter = {
      controller: function controller() {
          return {
              toggler: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var filterBuilder = args.filterBuilder,
              data = args.data,
              label = args.label || '',
              main = _$1.findWhere(filterBuilder, {
              component: filterMain
          });

          return m('#admin-contributions-filter.w-section.page-header', [m('.w-container', [m('.fontsize-larger.u-text-center.u-marginbottom-30', label), m('.w-form', [m('form', {
              onsubmit: args.submit
          }, [main ? m.component(main.component, main.data) : '', m('.u-marginbottom-20.w-row', m('button.w-col.w-col-12.fontsize-smallest.link-hidden-light[style="background: none; border: none; outline: none; text-align: left;"][type="button"]', {
              onclick: ctrl.toggler.toggle
          }, 'Filtros avançados  >')), ctrl.toggler() ? m('#advanced-search.w-row.admin-filters', [_$1.map(filterBuilder, function (f) {
              return f.component !== filterMain ? m.component(f.component, f.data) : '';
          })]) : ''])])])]);
      }
  };

  var adminItem = {
      controller: function controller(args) {
          return {
              displayDetailBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var item = args.item;

          return m('.w-clearfix.card.u-radius.u-marginbottom-20.results-admin-items', [m.component(args.listItem, {
              item: item,
              key: args.key
          }), m('button.w-inline-block.arrow-admin.fa.fa-chevron-down.fontcolor-secondary', {
              onclick: ctrl.displayDetailBox.toggle
          }), ctrl.displayDetailBox() ? m.component(args.listDetail, {
              item: item,
              key: args.key
          }) : '']);
      }
  };

  var adminList = {
      controller: function controller(args) {
          var list = args.vm.list;

          if (!list.collection().length && list.firstPage) {
              list.firstPage().then(null, function (serverError) {
                  args.vm.error(serverError.message);
              });
          }
      },
      view: function view(ctrl, args) {
          var list = args.vm.list,
              error = args.vm.error,
              label = args.label || '';

          return m('.w-section.section', [m('.w-container', error() ? m('.card.card-error.u-radius.fontweight-bold', error()) : [m('.w-row.u-marginbottom-20', [m('.w-col.w-col-9', [m('.fontsize-base', list.isLoading() ? 'Carregando ' + label.toLowerCase() + '...' : [m('span.fontweight-semibold', list.total()), ' ' + label.toLowerCase() + ' encontrados'])])]), m('#admin-contributions-list.w-container', [list.collection().map(function (item) {
              return m.component(adminItem, {
                  listItem: args.listItem,
                  listDetail: args.listDetail,
                  item: item,
                  key: item.id
              });
          }), m('.w-section.section', [m('.w-container', [m('.w-row', [m('.w-col.w-col-2.w-col-push-5', [list.isLoading() ? h.loader() : m('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais')])])])])])])]);
      }
  };

  var adminUser = {
      view: function view(ctrl, args) {
          var user = args.item;

          return m('.w-row.admin-user', [m('.w-col.w-col-3.w-col-small-3.u-marginbottom-10', [m('img.user-avatar[src="' + h.useAvatarOrDefault(user.profile_img_thumbnail) + '"]')]), m('.w-col.w-col-9.w-col-small-9', [m('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-10', [m('a.alt-link[target="_blank"][href="/users/' + user.id + '/edit"]', user.name || user.email)]), m('.fontsize-smallest', 'Usuário: ' + user.id), m('.fontsize-smallest.fontcolor-secondary', 'Email: ' + user.email), args.additional_data])]);
      }
  };

  var adminUserItem = {
      view: function view(ctrl, args) {
          return m('.w-row', [m('.w-col.w-col-4', [m.component(adminUser, args)])]);
      }
  };

  var adminResetPassword = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m.prop(false),
              error = m.prop(false),
              fail = m.prop(false),
              key = builder.property,
              data = {},
              item = args.item;

          builder.requestOptions.config = function (xhr) {
              if (h.authenticityToken()) {
                  xhr.setRequestHeader('X-CSRF-Token', h.authenticityToken());
              }
          };

          var l = m.prop(false),
              load = function load() {
              return m.request(_$1.extend({}, { data: data }, builder.requestOptions));
          },
              newPassword = m.prop(''),
              error_message = m.prop('');

          var requestError = function requestError(err) {
              l(false);
              error_message(err.errors[0]);
              complete(true);
              error(true);
          };
          var updateItem = function updateItem(res) {
              l(false);
              _$1.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              l(true);
              data[key] = newPassword();
              load().then(updateItem, requestError);
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
              };
          };

          return {
              complete: complete,
              error: error,
              error_message: error_message,
              l: l,
              newPassword: newPassword,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m('.w-col.w-col-2', [m('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m('label', data.innerLabel), m('input.w-input.text-field[type="text"][name="' + data.property + '"][placeholder="' + data.placeholder + '"]', {
              onchange: m.withAttr('value', ctrl.newPassword),
              value: ctrl.newPassword()
          }), m('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m('.w-form-done[style="display:block;"]', [m('p', 'Senha alterada com sucesso.')])] : [m('.w-form-error[style="display:block;"]', [m('p', ctrl.error_message())])])]) : '']);
      }
  };

  var adminInputAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m.prop(false),
              error = m.prop(false),
              fail = m.prop(false),
              data = {},
              item = args.item,
              key = builder.property,
              forceValue = builder.forceValue || null,
              newValue = m.prop(forceValue);

          h.idVM.id(item[builder.updateKey]);

          var l = postgrest.loaderWithToken(builder.model.patchOptions(h.idVM.parameters(), data));

          var updateItem = function updateItem(res) {
              _.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              data[key] = newValue();
              l.load().then(updateItem, function () {
                  complete(true);
                  error(true);
              });
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
                  newValue(forceValue);
              };
          };

          return {
              complete: complete,
              error: error,
              l: l,
              newValue: newValue,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m('.w-col.w-col-2', [m('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m('label', data.innerLabel), data.forceValue === undefined ? m('input.w-input.text-field[type="text"][placeholder="' + data.placeholder + '"]', {
              onchange: m.withAttr('value', ctrl.newValue),
              value: ctrl.newValue()
          }) : '', m('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m('.w-form-done[style="display:block;"]', [m('p', data.successMessage)])] : [m('.w-form-error[style="display:block;"]', [m('p', 'Houve um problema na requisição. ' + data.errorMessage)])])]) : '']);
      }
  };

  var adminNotificationHistory = {
      controller: function controller(args) {
          var notifications = m.prop([]),
              getNotifications = function getNotifications(user) {
              var notification = models.notification;
              notification.getPageWithToken(postgrest.filtersVM({
                  user_id: 'eq',
                  sent_at: 'is.null'
              }).user_id(user.id).sent_at(!null).order({
                  sent_at: 'desc'
              }).parameters()).then(notifications);
          };

          getNotifications(args.user);

          return {
              notifications: notifications
          };
      },
      view: function view(ctrl) {
          return m('.w-col.w-col-4', [m('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Histórico de notificações'), ctrl.notifications().map(function (cEvent) {
              return m('.w-row.fontsize-smallest.lineheight-looser.date-event', [m('.w-col.w-col-24', [m('.fontcolor-secondary', h.momentify(cEvent.sent_at, 'DD/MM/YYYY, HH:mm'), ' - ', cEvent.template_name, cEvent.origin ? ' - ' + cEvent.origin : '')])]);
          })]);
      }
  };

  var adminUserDetail = {
      controller: function controller() {
          return {
              actions: {
                  reset: {
                      property: 'password',
                      callToAction: 'Redefinir',
                      innerLabel: 'Nova senha de Usuário:',
                      outerLabel: 'Redefinir senha',
                      placeholder: 'ex: 123mud@r',
                      model: models.user
                  },
                  reactivate: {
                      property: 'deactivated_at',
                      updateKey: 'id',
                      callToAction: 'Reativar',
                      innerLabel: 'Tem certeza que deseja reativar esse usuário?',
                      successMessage: 'Usuário reativado com sucesso!',
                      errorMessage: 'O usuário não pôde ser reativado!',
                      outerLabel: 'Reativar usuário',
                      forceValue: null,
                      model: models.user
                  }
              }
          };
      },
      view: function view(ctrl, args) {
          var actions = ctrl.actions,
              item = args.item,
              details = args.details,
              addOptions = function addOptions(builder, id) {
              return _$1.extend({}, builder, {
                  requestOptions: {
                      url: '/users/' + id + '/new_password',
                      method: 'POST'
                  }
              });
          };

          return m('#admin-contribution-detail-box', [m('.divider.u-margintop-20.u-marginbottom-20'), m('.w-row.u-marginbottom-30', [m.component(adminResetPassword, {
              data: addOptions(actions.reset, item.id),
              item: item
          }), item.deactivated_at ? m.component(adminInputAction, { data: actions.reactivate, item: item }) : '']), m('.w-row.card.card-terciary.u-radius', [m.component(adminNotificationHistory, {
              user: item
          })])]);
      }
  };

  var dropdown = {
      view: function view(ctrl, args) {
          return m('select' + args.classes + '[id="' + args.id + '"]', {
              onchange: m.withAttr('value', args.valueProp),
              value: args.valueProp()
          }, _$1.map(args.options, function (data) {
              return m('option[value="' + data.value + '"]', data.option);
          }));
      }
  };

  var filterDropdown = {
      view: function view(ctrl, args) {
          var wrapper_c = args.wrapper_class || '.w-col.w-col-3.w-col-small-6';
          return m(wrapper_c, [m('label.fontsize-smaller[for="' + args.index + '"]', args.label), m.component(dropdown, {
              id: args.index,
              classes: '.w-select.text-field.positive',
              valueProp: args.vm,
              options: args.options
          })]);
      }
  };

  var adminUsers = {
      controller: function controller() {
          var listVM = userListVM,
              filterVM = vm,
              error = m.prop(''),
              itemBuilder = [{
              component: adminUser,
              wrapperClass: '.w-col.w-col-4'
          }],
              filterBuilder = [{ //name
              component: filterMain,
              data: {
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por nome, e-mail, Ids do usuário...'
              }
          }, { //status
              component: filterDropdown,
              data: {
                  label: 'Com o estado',
                  index: 'status',
                  name: 'deactivated_at',
                  vm: filterVM.deactivated_at,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: null,
                      option: 'ativo'
                  }, {
                      value: !null,
                      option: 'desativado'
                  }]
              }
          }],
              submit = function submit() {
              listVM.firstPage(filterVM.parameters()).then(null, function (serverError) {
                  error(serverError.message);
              });
              return false;
          };

          return {
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              listVM: {
                  list: listVM,
                  error: error
              },
              submit: submit
          };
      },
      view: function view(ctrl) {
          var label = 'Usuários';

          return [m.component(adminFilter, {
              form: ctrl.filterVM.formDescriber,
              filterBuilder: ctrl.filterBuilder,
              label: label,
              submit: ctrl.submit
          }), m.component(adminList, {
              vm: ctrl.listVM,
              label: label,
              listItem: adminUserItem,
              listDetail: adminUserDetail
          })];
      }
  };

  var contributionListVM = postgrest.paginationVM(models.contributionDetail, 'id.desc', { 'Prefer': 'count=exact' });

  var vm$1 = postgrest$1.filtersVM({
      full_text_index: '@@',
      state: 'eq',
      gateway: 'eq',
      value: 'between',
      created_at: 'between'
  });
  var paramToString$1 = function paramToString(p) {
      return (p || '').toString().trim();
  };
  // Set default values
  vm$1.state('');
  vm$1.gateway('');
  vm$1.order({
      id: 'desc'
  });

  vm$1.created_at.lte.toFilter = function () {
      var filter = paramToString$1(vm$1.created_at.lte());
      return filter && h.momentFromString(filter).endOf('day').format('');
  };

  vm$1.created_at.gte.toFilter = function () {
      var filter = paramToString$1(vm$1.created_at.gte());
      return filter && h.momentFromString(filter).format();
  };

  vm$1.full_text_index.toFilter = function () {
      var filter = paramToString$1(vm$1.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  var adminProject = {
      view: function view(ctrl, args) {
          var project = args.item;
          return m('.w-row.admin-project', [m('.w-col.w-col-3.w-col-small-3.u-marginbottom-10', [m('img.thumb-project.u-radius[src=' + project.project_img + '][width=50]')]), m('.w-col.w-col-9.w-col-small-9', [m('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-10', [m('a.alt-link[target="_blank"][href="/' + project.permalink + '"]', project.project_name)]), m('.fontsize-smallest.fontweight-semibold', project.project_state), m('.fontsize-smallest.fontcolor-secondary', h.momentify(project.project_online_date) + ' a ' + h.momentify(project.project_expires_at))])]);
      }
  };

  var adminContribution = {
      view: function view(ctrl, args) {
          var contribution = args.item;
          return m('.w-row.admin-contribution', [m('.fontweight-semibold.lineheight-tighter.u-marginbottom-10.fontsize-small', 'R$' + contribution.value), m('.fontsize-smallest.fontcolor-secondary', h.momentify(contribution.created_at, 'DD/MM/YYYY HH:mm[h]')), m('.fontsize-smallest', ['ID do Gateway: ', m('a.alt-link[target="_blank"][href="https://dashboard.pagar.me/#/transactions/' + contribution.gateway_id + '"]', contribution.gateway_id)])]);
      }
  };

  var adminContributionUser = {
      view: function view(ctrl, args) {
          var item = args.item,
              user = {
              profile_img_thumbnail: item.user_profile_img,
              id: item.user_id,
              name: item.user_name,
              email: item.email
          };

          var additionalData = m('.fontsize-smallest.fontcolor-secondary', 'Gateway: ' + item.payer_email);
          return m.component(adminUser, { item: user, additional_data: additionalData });
      }
  };

  var paymentStatus = {
      controller: function controller(args) {
          var payment = args.item,
              card = null,
              displayPaymentMethod = void 0,
              paymentMethodClass = void 0,
              stateClass = void 0;

          card = function card() {
              if (payment.gateway_data) {
                  switch (payment.gateway.toLowerCase()) {
                      case 'moip':
                          return {
                              first_digits: payment.gateway_data.cartao_bin,
                              last_digits: payment.gateway_data.cartao_final,
                              brand: payment.gateway_data.cartao_bandeira
                          };
                      case 'pagarme':
                          return {
                              first_digits: payment.gateway_data.card_first_digits,
                              last_digits: payment.gateway_data.card_last_digits,
                              brand: payment.gateway_data.card_brand
                          };
                  }
              }
          };

          displayPaymentMethod = function displayPaymentMethod() {
              switch (payment.payment_method.toLowerCase()) {
                  case 'boletobancario':
                      return m('span#boleto-detail', '');
                  case 'cartaodecredito':
                      var cardData = card();
                      if (cardData) {
                          return m('#creditcard-detail.fontsize-smallest.fontcolor-secondary.lineheight-tight', [cardData.first_digits + '******' + cardData.last_digits, m('br'), cardData.brand + ' ' + payment.installments + 'x']);
                      }
                      return '';
              }
          };

          paymentMethodClass = function paymentMethodClass() {
              switch (payment.payment_method.toLowerCase()) {
                  case 'boletobancario':
                      return '.fa-barcode';
                  case 'cartaodecredito':
                      return '.fa-credit-card';
                  default:
                      return '.fa-question';
              }
          };

          stateClass = function stateClass() {
              switch (payment.state) {
                  case 'paid':
                      return '.text-success';
                  case 'refunded':
                      return '.text-refunded';
                  case 'pending':
                  case 'pending_refund':
                      return '.text-waiting';
                  default:
                      return '.text-error';
              }
          };

          return {
              displayPaymentMethod: displayPaymentMethod,
              paymentMethodClass: paymentMethodClass,
              stateClass: stateClass
          };
      },
      view: function view(ctrl, args) {
          var payment = args.item;

          return m('.w-row.payment-status', [m('.fontsize-smallest.lineheight-looser.fontweight-semibold', [m('span.fa.fa-circle' + ctrl.stateClass()), ' ' + payment.state]), m('.fontsize-smallest.fontweight-semibold', [m('span.fa' + ctrl.paymentMethodClass()), ' ', m('a.link-hidden[href="#"]', payment.payment_method)]), m('.fontsize-smallest.fontcolor-secondary.lineheight-tight', [ctrl.displayPaymentMethod()])]);
      }
  };

  var adminContributionItem = {
      controller: function controller() {
          return {
              itemBuilder: [{
                  component: adminContributionUser,
                  wrapperClass: '.w-col.w-col-4'
              }, {
                  component: adminProject,
                  wrapperClass: '.w-col.w-col-4'
              }, {
                  component: adminContribution,
                  wrapperClass: '.w-col.w-col-2'
              }, {
                  component: paymentStatus,
                  wrapperClass: '.w-col.w-col-2'
              }]
          };
      },
      view: function view(ctrl, args) {
          return m('.w-row', _.map(ctrl.itemBuilder, function (panel) {
              return m(panel.wrapperClass, [m.component(panel.component, {
                  item: args.item,
                  key: args.key
              })]);
          }));
      }
  };

  var adminRadioAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m.prop(false),
              data = {},
              error = m.prop(false),
              fail = m.prop(false),
              item = args.item(),
              description = m.prop(item.description || ''),
              key = builder.getKey,
              newID = m.prop(''),
              getFilter = {},
              setFilter = {},
              radios = m.prop(),
              getAttr = builder.radios,
              getKey = builder.getKey,
              getKeyValue = args.getKeyValue,
              updateKey = builder.updateKey,
              updateKeyValue = args.updateKeyValue,
              validate = builder.validate,
              selectedItem = builder.selectedItem || m.prop();

          setFilter[updateKey] = 'eq';
          var setVM = postgrest.filtersVM(setFilter);
          setVM[updateKey](updateKeyValue);

          getFilter[getKey] = 'eq';
          var getVM = postgrest.filtersVM(getFilter);
          getVM[getKey](getKeyValue);

          var getLoader = postgrest.loaderWithToken(builder.getModel.getPageOptions(getVM.parameters()));

          var setLoader = postgrest.loaderWithToken(builder.updateModel.patchOptions(setVM.parameters(), data));

          var updateItem = function updateItem(data) {
              if (data.length > 0) {
                  var newItem = _$1.findWhere(radios(), {
                      id: data[0][builder.selectKey]
                  });
                  selectedItem(newItem);
              } else {
                  error({
                      message: 'Nenhum item atualizado'
                  });
              }
              complete(true);
          };

          var fetch = function fetch() {
              getLoader.load().then(radios, error);
          };

          var submit = function submit() {
              if (newID()) {
                  var validation = validate(radios(), newID());
                  if (_$1.isUndefined(validation)) {
                      data[builder.selectKey] = newID();
                      setLoader.load().then(updateItem, error);
                  } else {
                      complete(true);
                      error({
                          message: validation
                      });
                  }
              }
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
                  newID('');
              };
          };

          var setDescription = function setDescription(text) {
              description(text);
              m.redraw();
          };

          fetch();

          return {
              complete: complete,
              description: description,
              setDescription: setDescription,
              error: error,
              setLoader: setLoader,
              getLoader: getLoader,
              newID: newID,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload,
              radios: radios
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              item = args.item(),
              btnValue = ctrl.setLoader() || ctrl.getLoader() ? 'por favor, aguarde...' : data.callToAction;

          return m('.w-col.w-col-2', [m('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [ctrl.radios() ? _$1.map(ctrl.radios(), function (radio, index) {
              var set = function set() {
                  ctrl.newID(radio.id);
                  ctrl.setDescription(radio.description);
              };
              var selected = radio.id === (item[data.selectKey] || item.id) ? true : false;

              return m('.w-radio', [m('input#r-' + index + '.w-radio-input[type=radio][name="admin-radio"][value="' + radio.id + '"]' + (selected ? '[checked]' : ''), {
                  onclick: set
              }), m('label.w-form-label[for="r-' + index + '"]', 'R$' + radio.minimum_value)]);
          }) : h.loader(), m('strong', 'Descrição'), m('p', ctrl.description()), m('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m('.w-form-done[style="display:block;"]', [m('p', 'Recompensa alterada com sucesso!')])] : [m('.w-form-error[style="display:block;"]', [m('p', ctrl.error().message)])])]) : '']);
      }
  };

  var adminExternalAction = {
      controller: function controller(args) {
          var builder = args.data,
              complete = m.prop(false),
              error = m.prop(false),
              fail = m.prop(false),
              data = {},
              item = args.item;

          builder.requestOptions.config = function (xhr) {
              if (h.authenticityToken()) {
                  xhr.setRequestHeader('X-CSRF-Token', h.authenticityToken());
              }
          };

          var reload = _$1.compose(builder.model.getRowWithToken, h.idVM.id(item[builder.updateKey]).parameters),
              l = m.prop(false);

          var reloadItem = function reloadItem() {
              return reload().then(updateItem);
          };

          var requestError = function requestError(err) {
              l(false);
              complete(true);
              error(true);
          };

          var updateItem = function updateItem(res) {
              _$1.extend(item, res[0]);
              complete(true);
              error(false);
          };

          var submit = function submit() {
              l(true);
              m.request(builder.requestOptions).then(reloadItem, requestError);
              return false;
          };

          var unload = function unload(el, isinit, context) {
              context.onunload = function () {
                  complete(false);
                  error(false);
              };
          };

          return {
              l: l,
              complete: complete,
              error: error,
              submit: submit,
              toggler: h.toggleProp(false, true),
              unload: unload
          };
      },
      view: function view(ctrl, args) {
          var data = args.data,
              btnValue = ctrl.l() ? 'por favor, aguarde...' : data.callToAction;

          return m('.w-col.w-col-2', [m('button.btn.btn-small.btn-terciary', {
              onclick: ctrl.toggler.toggle
          }, data.outerLabel), ctrl.toggler() ? m('.dropdown-list.card.u-radius.dropdown-list-medium.zindex-10', {
              config: ctrl.unload
          }, [m('form.w-form', {
              onsubmit: ctrl.submit
          }, !ctrl.complete() ? [m('label', data.innerLabel), m('input.w-button.btn.btn-small[type="submit"][value="' + btnValue + '"]')] : !ctrl.error() ? [m('.w-form-done[style="display:block;"]', [m('p', 'Requisição feita com sucesso.')])] : [m('.w-form-error[style="display:block;"]', [m('p', 'Houve um problema na requisição.')])])]) : '']);
      }
  };

  var adminTransaction = {
      view: function view(ctrl, args) {
          var contribution = args.contribution;
          return m('.w-col.w-col-4', [m('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Detalhes do apoio'), m('.fontsize-smallest.lineheight-looser', ['Valor: R$' + h.formatNumber(contribution.value, 2, 3), m('br'), 'Taxa: R$' + h.formatNumber(contribution.gateway_fee, 2, 3), m('br'), 'Aguardando Confirmação: ' + (contribution.waiting_payment ? 'Sim' : 'Não'), m('br'), 'Anônimo: ' + (contribution.anonymous ? 'Sim' : 'Não'), m('br'), 'Id pagamento: ' + contribution.gateway_id, m('br'), 'Apoio: ' + contribution.contribution_id, m('br'), 'Chave: \n', m('br'), contribution.key, m('br'), 'Meio: ' + contribution.gateway, m('br'), 'Operadora: ' + (contribution.gateway_data && contribution.gateway_data.acquirer_name), m('br'), contribution.is_second_slip ? [m('a.link-hidden[href="#"]', 'Boleto bancário'), ' ', m('span.badge', '2a via')] : ''])]);
      }
  };

  var adminTransactionHistory = {
      controller: function controller(args) {
          var contribution = args.contribution,
              mapEvents = _$1.reduce([{
              date: contribution.paid_at,
              name: 'Apoio confirmado'
          }, {
              date: contribution.pending_refund_at,
              name: 'Reembolso solicitado'
          }, {
              date: contribution.refunded_at,
              name: 'Estorno realizado'
          }, {
              date: contribution.created_at,
              name: 'Apoio criado'
          }, {
              date: contribution.refused_at,
              name: 'Apoio cancelado'
          }, {
              date: contribution.deleted_at,
              name: 'Apoio excluído'
          }, {
              date: contribution.chargeback_at,
              name: 'Chargeback'
          }], function (memo, item) {
              if (item.date !== null && item.date !== undefined) {
                  item.originalDate = item.date;
                  item.date = h.momentify(item.date, 'DD/MM/YYYY, HH:mm');
                  return memo.concat(item);
              }

              return memo;
          }, []);

          return {
              orderedEvents: _$1.sortBy(mapEvents, 'originalDate')
          };
      },
      view: function view(ctrl) {
          return m('.w-col.w-col-4', [m('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Histórico da transação'), ctrl.orderedEvents.map(function (cEvent) {
              return m('.w-row.fontsize-smallest.lineheight-looser.date-event', [m('.w-col.w-col-6', [m('.fontcolor-secondary', cEvent.date)]), m('.w-col.w-col-6', [m('div', cEvent.name)])]);
          })]);
      }
  };

  var adminReward = {
      view: function view(ctrl, args) {
          var reward = args.reward(),
              available = parseInt(reward.paid_count) + parseInt(reward.waiting_payment_count);

          return m('.w-col.w-col-4', [m('.fontweight-semibold.fontsize-smaller.lineheight-tighter.u-marginbottom-20', 'Recompensa'), m('.fontsize-smallest.lineheight-looser', reward.id ? ['ID: ' + reward.id, m('br'), 'Valor mínimo: R$' + h.formatNumber(reward.minimum_value, 2, 3), m('br'), m.trust('Disponíveis: ' + available + ' / ' + (reward.maximum_contributions || '&infin;')), m('br'), 'Aguardando confirmação: ' + reward.waiting_payment_count, m('br'), 'Descrição: ' + reward.description] : 'Apoio sem recompensa')]);
      }
  };

  var adminContributionDetail = {
      controller: function controller(args) {
          var l = void 0;
          var loadReward = function loadReward() {
              var model = models.rewardDetail,
                  reward_id = args.item.reward_id,
                  opts = model.getRowOptions(h.idVM.id(reward_id).parameters()),
                  reward = m.prop({});

              l = postgrest.loaderWithToken(opts);

              if (reward_id) {
                  l.load().then(_$1.compose(reward, _$1.first));
              }

              return reward;
          };

          return {
              reward: loadReward(),
              actions: {
                  transfer: {
                      property: 'user_id',
                      updateKey: 'id',
                      callToAction: 'Transferir',
                      innerLabel: 'Id do novo apoiador:',
                      outerLabel: 'Transferir Apoio',
                      placeholder: 'ex: 129908',
                      successMessage: 'Apoio transferido com sucesso!',
                      errorMessage: 'O apoio não foi transferido!',
                      model: models.contributionDetail
                  },
                  reward: {
                      getKey: 'project_id',
                      updateKey: 'contribution_id',
                      selectKey: 'reward_id',
                      radios: 'rewards',
                      callToAction: 'Alterar Recompensa',
                      outerLabel: 'Recompensa',
                      getModel: models.rewardDetail,
                      updateModel: models.contributionDetail,
                      selectedItem: loadReward(),
                      validate: function validate(rewards, newRewardID) {
                          var reward = _$1.findWhere(rewards, { id: newRewardID });
                          return args.item.value >= reward.minimum_value ? undefined : 'Valor mínimo da recompensa é maior do que o valor da contribuição.';
                      }
                  },
                  refund: {
                      updateKey: 'id',
                      callToAction: 'Reembolso direto',
                      innerLabel: 'Tem certeza que deseja reembolsar esse apoio?',
                      outerLabel: 'Reembolsar Apoio',
                      model: models.contributionDetail
                  },
                  remove: {
                      property: 'state',
                      updateKey: 'id',
                      callToAction: 'Apagar',
                      innerLabel: 'Tem certeza que deseja apagar esse apoio?',
                      outerLabel: 'Apagar Apoio',
                      forceValue: 'deleted',
                      successMessage: 'Apoio removido com sucesso!',
                      errorMessage: 'O apoio não foi removido!',
                      model: models.contributionDetail
                  }
              },
              l: l
          };
      },
      view: function view(ctrl, args) {
          var actions = ctrl.actions,
              item = args.item,
              reward = ctrl.reward;

          var addOptions = function addOptions(builder, id) {
              return _$1.extend({}, builder, {
                  requestOptions: {
                      url: '/admin/contributions/' + id + '/gateway_refund',
                      method: 'PUT'
                  }
              });
          };

          return m('#admin-contribution-detail-box', [m('.divider.u-margintop-20.u-marginbottom-20'), m('.w-row.u-marginbottom-30', [m.component(adminInputAction, {
              data: actions.transfer,
              item: item
          }), ctrl.l() ? h.loader : m.component(adminRadioAction, {
              data: actions.reward,
              item: reward,
              getKeyValue: item.project_id,
              updateKeyValue: item.contribution_id
          }), m.component(adminExternalAction, {
              data: addOptions(actions.refund, item.id),
              item: item
          }), m.component(adminInputAction, {
              data: actions.remove,
              item: item
          })]), m('.w-row.card.card-terciary.u-radius', [m.component(adminTransaction, {
              contribution: item
          }), m.component(adminTransactionHistory, {
              contribution: item
          }), ctrl.l() ? h.loader : m.component(adminReward, {
              reward: reward,
              key: item.key
          })])]);
      }
  };

  var filterNumberRange = {
      view: function view(ctrl, args) {
          return m('.w-col.w-col-3.w-col-small-6', [m('label.fontsize-smaller[for="' + args.index + '"]', args.label), m('.w-row', [m('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m('input.w-input.text-field.positive[id="' + args.index + '"][type="text"]', {
              onchange: m.withAttr('value', args.first),
              value: args.first()
          })]), m('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m('.fontsize-smaller.u-text-center.lineheight-looser', 'e')]), m('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m('input.w-input.text-field.positive[type="text"]', {
              onchange: m.withAttr('value', args.last),
              value: args.last()
          })])])]);
      }
  };

  var filterDateRange = {
      view: function view(ctrl, args) {
          return m('.w-col.w-col-3.w-col-small-6', [m('label.fontsize-smaller[for="' + args.index + '"]', args.label), m('.w-row', [m('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m('input.w-input.text-field.positive[id="' + args.index + '"][type="text"]', {
              onchange: m.withAttr('value', args.first),
              value: args.first()
          })]), m('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m('.fontsize-smaller.u-text-center.lineheight-looser', 'e')]), m('.w-col.w-col-5.w-col-small-5.w-col-tiny-5', [m('input.w-input.text-field.positive[type="text"]', {
              onchange: m.withAttr('value', args.last),
              value: args.last()
          })])])]);
      }
  };

  var adminContributions = {
      controller: function controller() {
          var listVM = contributionListVM,
              filterVM = vm$1,
              error = m.prop(''),
              filterBuilder = [{ //full_text_index
              component: filterMain,
              data: {
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por projeto, email, Ids do usuário e do apoio...'
              }
          }, { //state
              component: filterDropdown,
              data: {
                  label: 'Com o estado',
                  name: 'state',
                  vm: filterVM.state,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: 'paid',
                      option: 'paid'
                  }, {
                      value: 'refused',
                      option: 'refused'
                  }, {
                      value: 'pending',
                      option: 'pending'
                  }, {
                      value: 'pending_refund',
                      option: 'pending_refund'
                  }, {
                      value: 'refunded',
                      option: 'refunded'
                  }, {
                      value: 'chargeback',
                      option: 'chargeback'
                  }, {
                      value: 'deleted',
                      option: 'deleted'
                  }]
              }
          }, { //gateway
              component: filterDropdown,
              data: {
                  label: 'gateway',
                  name: 'gateway',
                  vm: filterVM.gateway,
                  options: [{
                      value: '',
                      option: 'Qualquer um'
                  }, {
                      value: 'Pagarme',
                      option: 'Pagarme'
                  }, {
                      value: 'MoIP',
                      option: 'MoIP'
                  }, {
                      value: 'PayPal',
                      option: 'PayPal'
                  }, {
                      value: 'Credits',
                      option: 'Créditos'
                  }]
              }
          }, { //value
              component: filterNumberRange,
              data: {
                  label: 'Valores entre',
                  first: filterVM.value.gte,
                  last: filterVM.value.lte
              }
          }, { //created_at
              component: filterDateRange,
              data: {
                  label: 'Período do apoio',
                  first: filterVM.created_at.gte,
                  last: filterVM.created_at.lte
              }
          }],
              submit = function submit() {
              error(false);
              listVM.firstPage(filterVM.parameters()).then(null, function (serverError) {
                  error(serverError.message);
              });
              return false;
          };

          return {
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              listVM: {
                  list: listVM,
                  error: error
              },
              data: {
                  label: 'Apoios'
              },
              submit: submit
          };
      },
      view: function view(ctrl) {
          return [m.component(adminFilter, {
              form: ctrl.filterVM.formDescriber,
              filterBuilder: ctrl.filterBuilder,
              submit: ctrl.submit
          }), m.component(adminList, {
              vm: ctrl.listVM,
              listItem: adminContributionItem,
              listDetail: adminContributionDetail
          })];
      }
  };

  var landingSignup = {
      controller: function controller(args) {
          var builder = args.builder,
              email = m.prop(''),
              error = m.prop(false),
              submit = function submit() {
              if (h.validateEmail(email())) {
                  return true;
              } else {
                  error(true);
                  return false;
              }
          };
          return {
              email: email,
              submit: submit,
              error: error
          };
      },
      view: function view(ctrl, args) {
          var errorClasses = !ctrl.error ? '.positive.error' : '';
          return m('form.w-form[id="email-form"][method="post"][action="' + args.builder.customAction + '"]', {
              onsubmit: ctrl.submit
          }, [m('.w-col.w-col-5', [m('input' + errorClasses + '.w-input.text-field.medium[name="EMAIL"][placeholder="Digite seu email"][type="text"]', {
              config: h.RDTracker('landing-flex'),
              onchange: m.withAttr('value', ctrl.email),
              value: ctrl.email()
          }), ctrl.error() ? m('span.fontsize-smaller.text-error', 'E-mail inválido') : '']), m('.w-col.w-col-3', [m('input.w-button.btn.btn-large[type="submit"][value="Cadastrar"]')])]);
      }
  };

  var I18nScope = _$1.partial(h.i18nScope, 'projects.card');
  var projectCard = {
      view: function view(ctrl, args) {
          var project = args.project,
              progress = project.progress.toFixed(2),
              remainingTextObj = h.translatedTime(project.remaining_time),
              elapsedTextObj = h.translatedTime(project.elapsed_time),
              link = '/' + project.permalink + (args.ref ? '?ref=' + args.ref : ''),
              type = args.type || 'small',
              css = function css(cardType) {
              var cssClasses = {
                  'small': {
                      wrapper: '.w-col.w-col-4',
                      innerWrapper: '.card-project.card.u-radius',
                      thumb: '.card-project-thumb',
                      descriptionWrapper: '',
                      description: '.card-project-description.alt',
                      title: '.fontweight-semibold.u-text-center-small-only.lineheight-tight.u-marginbottom-10.fontsize-base',
                      author: '.w-hidden-small.w-hidden-tiny.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.w-hidden-small.w-hidden-tiny.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden-small.w-hidden-tiny.card-project-author.altt'
                  },
                  'medium': {
                      wrapper: '.w-col.w-col-6',
                      innerWrapper: '.card-project.card.u-radius',
                      thumb: '.card-project-thumb.medium',
                      descriptionWrapper: '',
                      description: '.card-project-description.alt',
                      title: '.fontsize-large.fontweight-semibold.u-marginbottom-10',
                      author: '.w-hidden-small.w-hidden-tiny.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.w-hidden-small.w-hidden-tiny.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden-small.w-hidden-tiny.card-project-author.altt'
                  },
                  'big': {
                      wrapper: '.card.u-radius.card-project',
                      innerWrapper: '.w-row',
                      thumb: '.w-col.w-col-8.w-col-medium-6.card-project-thumb.big',
                      descriptionWrapper: '.w-col.w-col-4.w-col-medium-6',
                      description: '.card-project-description.big',
                      title: '.fontsize-large.fontweight-semibold.u-marginbottom-10',
                      author: '.fontsize-smallest.fontcolor-secondary.u-marginbottom-20',
                      headline: '.fontcolor-secondary.fontsize-smaller',
                      city: '.w-hidden'
                  }
              };

              return cssClasses[cardType];
          };

          return m(css(type).wrapper, [m(css(type).innerWrapper, [m('a' + css(type).thumb + '[href="' + link + '"]', {
              style: {
                  'background-image': 'url(' + project.project_img + ')',
                  'display': 'block'
              }
          }), m(css(type).descriptionWrapper, [m(css(type).description, [m(css(type).title, [m('a.link-hidden[href="' + link + '"]', project.project_name)]), m(css(type).author, I18n$1.t('by', I18nScope()) + ' ' + project.owner_name), m(css(type).headline, [m('a.link-hidden[href="' + link + '"]', project.headline)])]), m(css(type).city, [m('.fontsize-smallest.fontcolor-secondary', [m('span.fa.fa-map-marker.fa-1', ' '), ' ' + (project.city_name ? project.city_name : '') + ', ' + (project.state_acronym ? project.state_acronym : '')])]), m('.card-project-meter.' + project.state, [_$1.contains(['successful', 'failed', 'waiting_funds'], project.state) ? m('div', I18n$1.t('display_status.' + project.state, I18nScope())) : m('.meter', [m('.meter-fill', {
              style: {
                  width: (progress > 100 ? 100 : progress) + '%'
              }
          })])]), m('.card-project-stats', [m('.w-row', [m('.w-col.w-col-4.w-col-small-4.w-col-tiny-4', [m('.fontsize-base.fontweight-semibold', Math.ceil(project.progress) + '%')]), m('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.u-text-center-small-only', [m('.fontsize-smaller.fontweight-semibold', 'R$ ' + h.formatNumber(project.pledged)), m('.fontsize-smallest.lineheight-tightest', 'Levantados')]), m('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.u-text-right', project.expires_at ? [m('.fontsize-smaller.fontweight-semibold', remainingTextObj.total + ' ' + remainingTextObj.unit), m('.fontsize-smallest.lineheight-tightest', remainingTextObj.total > 1 ? 'Restantes' : 'Restante')] : [m('.fontsize-smallest.lineheight-tight', ['Iniciado há', m('br'), elapsedTextObj.total + ' ' + elapsedTextObj.unit])])])])])])]);
      }
  };

  var projectRow = {
      view: function view(ctrl, args) {
          var collection = args.collection,
              title = args.title || collection.title,
              ref = args.ref,
              wrapper = args.wrapper || '.w-section.section.u-marginbottom-40';

          if (collection.loader() || collection.collection().length > 0) {
              return m(wrapper, [m('.w-container', [!_$1.isUndefined(collection.title) || !_$1.isUndefined(collection.hash) ? m('.w-row.u-marginbottom-30', [m('.w-col.w-col-10.w-col-small-6.w-col-tiny-6', [m('.fontsize-large.lineheight-looser', title)]), m('.w-col.w-col-2.w-col-small-6.w-col-tiny-6', [m('a.btn.btn-small.btn-terciary[href="/pt/explore?ref=' + ref + '#' + collection.hash + '"]', 'Ver todos')])]) : '', collection.loader() ? h.loader() : m('.w-row', _$1.map(collection.collection(), function (project) {
                  return m.component(projectCard, {
                      project: project,
                      ref: ref
                  });
              }))])]);
          } else {
              return m('div');
          }
      }
  };

  var landingQA = {
      controller: function controller(args) {
          return {
              showAnswer: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m('.card.qa-card.u-marginbottom-20.u-radius.btn-terciary', [m('.fontsize-base', {
              onclick: function onclick() {
                  ctrl.showAnswer.toggle();
                  args.onclick && args.onclick();
              }
          }, args.question), ctrl.showAnswer() ? m('p.u-margintop-20.fontsize-small', m.trust(args.answer)) : '']);
      }
  };

  var Flex = {
      controller: function controller() {
          var stats = m.prop([]),
              projects = m.prop([]),
              l = m.prop(),
              sample3 = _.partial(_.sample, _, 3),
              builder = {
              customAction: 'http://fazum.catarse.me/obrigado-landing-catarse-flex'
          },
              addDisqus = function addDisqus(el, isInitialized) {
              if (!isInitialized) {
                  h.discuss('https://catarse.me/flex', 'flex_page');
              }
          },
              flexVM = postgrest$1.filtersVM({
              mode: 'eq',
              state: 'eq',
              recommended: 'eq'
          }),
              statsLoader = postgrest$1.loaderWithToken(models.statistic.getRowOptions());

          flexVM.mode('flex').state('online').recommended(true);

          var projectsLoader = postgrest$1.loader(models.project.getPageOptions(flexVM.parameters()));

          statsLoader.load().then(stats);

          projectsLoader.load().then(_.compose(projects, sample3));

          return {
              addDisqus: addDisqus,
              builder: builder,
              statsLoader: statsLoader,
              stats: stats,
              projectsLoader: projectsLoader,
              projects: {
                  loader: projectsLoader,
                  collection: projects
              }
          };
      },
      view: function view(ctrl, args) {
          var stats = _.first(ctrl.stats());

          return [m('.w-section.hero-full.hero-zelo', [m('.w-container.u-text-center', [m('img.logo-flex-home[src=\'/assets/logo-flex.png\'][width=\'359\']'), m('.w-row', [m('.w-col.fontsize-large.u-marginbottom-60.w-col-push-2.w-col-8', 'Vamos construir uma nova modalidade de crowdfunding! Cadastre seu email e saiba como inscrever o seu projeto no flex!')]), m('.w-row', [m('.w-col.w-col-2'), m.component(landingSignup, {
              builder: ctrl.builder
          }), m('.w-col.w-col-2')])])]), [m('.section', [m('.w-container', [m('.fontsize-largest.u-margintop-40.u-text-center', 'Pra quem será?'), m('.fontsize-base.u-text-center.u-marginbottom-60', 'Iniciaremos a fase de testes com categorias de projetos específicas'), m('div', [m('.w-row.u-marginbottom-60', [m('.w-col.w-col-6', [m('.u-text-center.u-marginbottom-20', [m('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e393a01b66e250aca67cb_icon-zelo-com.png\'][width=\'210\']'), m('.fontsize-largest.lineheight-loose', 'Causas')]), m('p.fontsize-base', 'Flexibilidade para causas de impacto! Estaremos abertos a campanhas de organizações ou pessoas físicas para arrecadação de recursos para causas pessoais, projetos assistenciais, saúde, ajudas humanitárias, proteção aos animais, empreendedorismo socioambiental, ativismo ou qualquer coisa que una as pessoas para fazer o bem.')]), m('.w-col.w-col-6', [m('.u-text-center.u-marginbottom-20', [m('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e3929a0daea230a5f12cd_icon-zelo-pessoal.png\'][width=\'210\']'), m('.fontsize-largest.lineheight-loose', 'Vaquinhas')]), m('p.fontsize-base', 'Campanhas simples que precisam de flexibilidade para arrecadar dinheiro com pessoas próximas. Estaremos abertos a uma variedade de campanhas pessoais que podem ir desde cobrir custos de estudos a ajudar quem precisa de tratamento médico. De juntar a grana para fazer aquela festa a comprar presentes para alguém com a ajuda da galera. ')])])])])]), m('.w-section.section.bg-greenlime.fontcolor-negative', [m('.w-container', [m('.fontsize-largest.u-margintop-40.u-marginbottom-60.u-text-center', 'Como funcionará?'), m('.w-row.u-marginbottom-40', [m('.w-col.w-col-6', [m('.u-text-center', [m('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39c578b284493e2a428a_zelo-money.png\'][width=\'180\']')]), m('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Fique com quanto arrecadar'), m('p.u-text-center.fontsize-base', 'O flex é para impulsionar campanhas onde todo dinheiro é bem vindo! Você fica com tudo que conseguir arrecadar.')]), m('.w-col.w-col-6', [m('.u-text-center', [m('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39d37c013d4a3ee687d2_icon-reward.png\'][width=\'180\']')]), m('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Não precisa de recompensas'), m('p.u-text-center.fontsize-base', 'No flex oferecer recompensas é opcional. Você escolhe se oferecê-las faz sentido para o seu projeto e campanha.')])]), m('.w-row.u-marginbottom-40', [m('.w-col.w-col-6', [m('.u-text-center', [m('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39fb01b66e250aca67e3_icon-curad.png\'][width=\'180\']')]), m('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Você mesmo publica seu projeto'), m('p.u-text-center.fontsize-base', 'Todos os projetos inscritos no flex entram no ar. Agilidade e facilidade para você captar recursos através da internet.')]), m('.w-col.w-col-6', [m('.u-text-center', [m('img[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/560e39e77c013d4a3ee687d4_icon-time.png\'][width=\'180\']')]), m('.fontsize-large.u-marginbottom-10.u-text-center.fontweight-semibold', 'Encerre a campanha quando quiser'), m('p.u-text-center.fontsize-base', 'Não há limite de tempo de captação. Você escolhe  quando encerrar sua campanha e receber os valores arrecadados.')])])])]), m('.w-section.section', [m('.w-container', [m('.w-editable.fontsize-larger.u-margintop-40.u-margin-bottom-40.u-text-center', 'Conheça alguns dos primeiros projetos flex'), ctrl.projectsLoader() ? h.loader() : m.component(projectRow, { collection: ctrl.projects, ref: 'ctrse_flex', wrapper: '.w-row.u-margintop-40' })])]), m('.w-section.divider'), m('.w-section.section', [m('.w-container', [m('.fontsize-larger.u-text-center.u-marginbottom-60.u-margintop-40', 'Dúvidas'), m('.w-row.u-marginbottom-60', [m('.w-col.w-col-6', [m.component(landingQA, {
              question: 'Quais são as taxas da modalidade flexível? ',
              answer: 'Como no Catarse, enviar um projeto não custa nada! A taxa cobrada no serviço Catarse flex é de 13% sobre o valor arrecadado.'
          }), m.component(landingQA, {
              question: 'De onde vem o dinheiro do meu projeto?',
              answer: 'Família, amigos, fãs e membros de comunidades que você faz parte são seus maiores colaboradores. São eles que irão divulgar sua campanha para as pessoas que eles conhecem, e assim o círculo de apoiadores vai aumentando e a sua campanha ganha força.'
          }), m.component(landingQA, {
              question: 'Qual a diferença entre o flexível e o "tudo ou nada"?',
              answer: 'Atualmente o Catarse utiliza apenas o modelo "tudo ou nada", onde você só fica com o dinheiro se bater a meta de arrecadação dentro do prazo da campanha. O modelo flexível é diferente pois permite que o realizador fique com o que arrecadar, independente de atingir ou não a meta do projeto no prazo da campanha. Não haverá limite de tempo para as campanhas. Nosso sistema flexível será algo novo em relação aos modelos que existem atualmente no mercado.'
          })]), m('.w-col.w-col-6', [m.component(landingQA, {
              question: 'Posso inscrever projetos para a modalidade flexível já?',
              answer: 'Sim. Cadastre seu email e saiba como inscrever o seu projeto no flex!'
          }), m.component(landingQA, {
              question: 'Por quê vocês querem fazer o Catarse flex?',
              answer: 'Acreditamos que o ambiente do crowdfunding brasileiro ainda tem espaço para muitas ações, testes e experimentações para entender de fato o que as pessoas precisam. Sonhamos com tornar o financiamento coletivo um hábito no Brasil. O Catarse flex é mais um passo nessa direção.'
          }), m.component(landingQA, {
              question: 'Quando vocês irão lançar o Catarse flex?',
              answer: 'Ainda não sabemos quando abriremos o flex para o público em geral, mas você pode cadastrar seu email nessa página e receber um material especial de como inscrever seu projeto.'
          })])])])]), m('.w-section.section-large.u-text-center.bg-purple', [m('.w-container.fontcolor-negative', [m('.fontsize-largest', 'Inscreva seu projeto!'), m('.fontsize-base.u-marginbottom-60', 'Cadastre seu email e saiba como inscrever o seu projeto no flex!'), m('.w-row', [m('.w-col.w-col-2'), m.component(landingSignup, {
              builder: ctrl.builder
          }), m('.w-col.w-col-2')])])]), m('.w-section.section-one-column.bg-catarse-zelo.section-large[style="min-height: 50vh;"]', [m('.w-container.u-text-center', [m('.w-editable.u-marginbottom-40.fontsize-larger.lineheight-tight.fontcolor-negative', 'O flex é um experimento e iniciativa do Catarse, maior plataforma de crowdfunding do Brasil.'), m('.w-row.u-text-center', ctrl.statsLoader() ? h.loader() : [m('.w-col.w-col-4', [m('.fontsize-jumbo.text-success.lineheight-loose', h.formatNumber(stats.total_contributors, 0, 3)), m('p.start-stats.fontsize-base.fontcolor-negative', 'Pessoas ja apoiaram pelo menos 01 projeto no Catarse')]), m('.w-col.w-col-4', [m('.fontsize-jumbo.text-success.lineheight-loose', h.formatNumber(stats.total_projects_success, 0, 3)), m('p.start-stats.fontsize-base.fontcolor-negative', 'Projetos ja foram financiados no Catarse')]), m('.w-col.w-col-4', [m('.fontsize-jumbo.text-success.lineheight-loose', stats.total_contributed.toString().slice(0, 2) + ' milhões'), m('p.start-stats.fontsize-base.fontcolor-negative', 'Foram investidos em ideias publicadas no Catarse')])])])]), m('.w-section.section.bg-blue-one.fontcolor-negative', [m('.w-container', [m('.fontsize-large.u-text-center.u-marginbottom-20', 'Recomende o Catarse flex para amigos! '), m('.w-row', [m('.w-col.w-col-2'), m('.w-col.w-col-8', [m('.w-row', [m('.w-col.w-col-6.w-col-small-6.w-col-tiny-6.w-sub-col-middle', [m('div', [m('img.icon-share-mobile[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/53a3f66e05eb6144171d8edb_facebook-xxl.png\']'), m('a.w-button.btn.btn-large.btn-fb[href="http://www.facebook.com/sharer/sharer.php?u=https://www.catarse.me/flex?ref=facebook&title=' + encodeURIComponent('Conheça o novo Catarse Flex!') + '"][target="_blank"]', 'Compartilhar')])]), m('.w-col.w-col-6.w-col-small-6.w-col-tiny-6', [m('div', [m('img.icon-share-mobile[src=\'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/53a3f65105eb6144171d8eda_twitter-256.png\']'), m('a.w-button.btn.btn-large.btn-tweet[href="http://twitter.com/?status=' + encodeURIComponent('Vamos construir uma nova modalidade de crowdfunding para o Catarse! Junte-se a nós, inscreva seu email!') + 'https://www.catarse.me/flex?ref=twitter"][target="_blank"]', 'Tuitar')])])])]), m('.w-col.w-col-2')])])]), m('.w-section.section-large.bg-greenlime', [m('.w-container', [m('#participe-do-debate.u-text-center', { config: h.toAnchor() }, [m('h1.fontsize-largest.fontcolor-negative', 'Construa o flex conosco'), m('.fontsize-base.u-marginbottom-60.fontcolor-negative', 'Inicie uma conversa, pergunte, comente, critique e faça sugestões!')]), m('#disqus_thread.card.u-radius[style="min-height: 50vh;"]', {
              config: ctrl.addDisqus
          })])])]];
      }
  };

  var tooltip = {
      controller: function controller(args) {
          var parentHeight = m.prop(0),
              width = m.prop(args.width || 280),
              top = m.prop(0),
              left = m.prop(0),
              opacity = m.prop(0),
              parentOffset = m.prop({ top: 0, left: 0 }),
              tooltip = h.toggleProp(0, 1),
              toggle = function toggle() {
              tooltip.toggle();
              m.redraw();
          };

          var setParentPosition = function setParentPosition(el, isInitialized) {
              if (!isInitialized) {
                  parentOffset(h.cumulativeOffset(el));
              }
          },
              setPosition = function setPosition(el, isInitialized) {
              if (!isInitialized) {
                  var elTop = el.offsetHeight + el.offsetParent.offsetHeight;
                  var style = window.getComputedStyle(el);

                  if (window.innerWidth < el.offsetWidth + 2 * parseFloat(style.paddingLeft) + 30) {
                      //30 here is a safe margin
                      el.style.width = window.innerWidth - 30; //Adding the safe margin
                      left(-parentOffset().left + 15); //positioning center of window, considering margin
                  } else if (parentOffset().left + el.offsetWidth / 2 <= window.innerWidth && parentOffset().left - el.offsetWidth / 2 >= 0) {
                          left(-el.offsetWidth / 2); //Positioning to the center
                      } else if (parentOffset().left + el.offsetWidth / 2 > window.innerWidth) {
                              left(-el.offsetWidth + el.offsetParent.offsetWidth); //Positioning to the left
                          } else if (parentOffset().left - el.offsetWidth / 2 < 0) {
                                  left(-el.offsetParent.offsetWidth); //Positioning to the right
                              }
                  top(-elTop); //Setting top position
              }
          };

          return {
              width: width,
              top: top,
              left: left,
              opacity: opacity,
              tooltip: tooltip,
              toggle: toggle,
              setPosition: setPosition,
              setParentPosition: setParentPosition
          };
      },
      view: function view(ctrl, args) {
          var width = ctrl.width();
          return m(args.el, {
              onclick: ctrl.toggle,
              config: ctrl.setParentPosition,
              style: { cursor: 'pointer' }
          }, ctrl.tooltip() ? [m('.tooltip.dark[style="width: ' + width + 'px; top: ' + ctrl.top() + 'px; left: ' + ctrl.left() + 'px;"]', {
              config: ctrl.setPosition
          }, [m('.fontsize-smallest', args.text)])] : '');
      }
  };

  var I18nScope$2 = _$1.partial(h.i18nScope, 'projects.dashboard_nav');
  var linksScope = _$1.partial(h.i18nScope, 'projects.dashboard_nav_links');

  var projectDashboardMenu = {
      controller: function controller(args) {
          var body = document.getElementsByTagName('body')[0],
              editLinksToggle = h.toggleProp(true, false),
              showPublish = h.toggleProp(true, false),
              bodyToggleForNav = h.toggleProp('body-project open', 'body-project closed');

          if (args.project().is_published) {
              editLinksToggle.toggle(false);
          }

          if (args.hidePublish) {
              showPublish.toggle(false);
          }

          return {
              body: body,
              editLinksToggle: editLinksToggle,
              showPublish: showPublish,
              bodyToggleForNav: bodyToggleForNav
          };
      },
      view: function view(ctrl, args) {
          var project = args.project(),
              projectRoute = '/projects/' + project.id,
              editRoute = projectRoute + '/edit',
              editLinkClass = 'dashboard-nav-link-left ' + (project.is_published ? 'indent' : '');
          var optionalOpt = m('span.fontsize-smallest.fontcolor-secondary', ' (opcional)');

          ctrl.body.className = ctrl.bodyToggleForNav();

          return m('#project-nav', [m('.project-nav-wrapper', [m('nav.w-section.dashboard-nav.side', [m('a#dashboard_preview_link.w-inline-block.dashboard-project-name[href="' + (project.is_published ? '/' + project.permalink : editRoute + '#preview') + '"]', [m('img.thumb-project-dashboard[src="' + (_$1.isNull(project.large_image) ? '/assets/thumb-project.png' : project.large_image) + '"][width="114"]'), m('.fontcolor-negative.lineheight-tight.fontsize-small', project.name), m('img.u-margintop-10[src="/assets/catarse_bootstrap/badge-' + project.mode + '-h.png"][width=80]')]), m('#info-links', [m('a#dashboard_home_link[class="dashboard-nav-link-left ' + (h.locationActionMatch('insights') ? 'selected' : '') + '"][href="' + projectRoute + '/insights"]', [m('span.fa.fa-bar-chart.fa-lg.fa-fw'), I18n$1.t('start_tab', I18nScope$2())]), project.is_published ? [m('a#dashboard_reports_link.dashboard-nav-link-left[href="' + editRoute + '#reports' + '"]', [m('span.fa.fa.fa-table.fa-lg.fa-fw'), I18n$1.t('reports_tab', I18nScope$2())]), m('a#dashboard_reports_link.dashboard-nav-link-left.u-marginbottom-30[href="' + editRoute + '#posts' + '"]', [m('span.fa.fa-bullhorn.fa-fw.fa-lg'), I18n$1.t('posts_tab', I18nScope$2()), m('span.badge', project.posts_count)])] : '']), m('.edit-project-div', [!project.is_published ? '' : m('button#toggle-edit-menu.dashboard-nav-link-left', {
              onclick: ctrl.editLinksToggle.toggle
          }, [m('span.fa.fa-pencil.fa-fw.fa-lg'), I18n$1.t('edit_project', I18nScope$2())]), ctrl.editLinksToggle() ? m('#edit-menu-items', [m('#dashboard-links', [!project.is_published || project.is_admin_role ? [m('a#basics_link[class="' + editLinkClass + '"][href="' + editRoute + '#basics' + '"]', I18n$1.t(project.mode + '.basics_tab', linksScope())), m('a#goal_link[class="' + editLinkClass + '"][href="' + editRoute + '#goal' + '"]', I18n$1.t(project.mode + '.goal_tab', linksScope()))] : '', m('a#description_link[class="' + editLinkClass + '"][href="' + editRoute + '#description' + '"]', I18n$1.t(project.mode + '.description_tab', linksScope())), m('a#video_link[class="' + editLinkClass + '"][href="' + editRoute + '#video' + '"]', ['Vídeo', m('span.fontsize-smallest.fontcolor-secondary', ' (opcional)')]), m('a#budget_link[class="' + editLinkClass + '"][href="' + editRoute + '#budget' + '"]', I18n$1.t(project.mode + '.budget_tab', linksScope())), m('a#card_link[class="' + editLinkClass + '"][href="' + editRoute + '#card' + '"]', I18n$1.t(project.mode + '.card_tab', linksScope())), m('a#dashboard_reward_link[class="' + editLinkClass + '"][href="' + editRoute + '#reward' + '"]', ['Recompensas', optionalOpt]), m('a#dashboard_user_about_link[class="' + editLinkClass + '"][href="' + editRoute + '#user_about' + '"]', I18n$1.t(project.mode + '.about_you_tab', linksScope())), project.is_published || project.state === 'draft' || project.is_admin_role ? [m('a#dashboard_user_settings_link[class="' + editLinkClass + '"][href="' + editRoute + '#user_settings' + '"]', I18n$1.t(project.mode + '.account_tab', linksScope()))] : '', !project.is_published ? [m('a#dashboard_preview_link[class="' + editLinkClass + '"][href="' + editRoute + '#preview' + '"]', [m('span.fa.fa-fw.fa-eye.fa-lg'), I18n$1.t(project.mode + '.preview_tab', linksScope())])] : ''])]) : '', !project.is_published && ctrl.showPublish() ? [m('.btn-send-draft-fixed', project.mode === 'aon' ? [project.state === 'draft' ? m('a.btn.btn-medium[href="/projects/' + project.id + '/validate_publish"]', [I18n$1.t('publish', I18nScope$2()), m.trust('&nbsp;&nbsp;'), m('span.fa.fa-chevron-right')]) : ''] : [project.state === 'draft' ? m('a.btn.btn-medium[href="/flexible_projects/' + project.id + '/validate_publish"]', [I18n$1.t('publish', I18nScope$2()), m.trust('&nbsp;&nbsp;'), m('span.fa.fa-chevron-right')]) : ''])] : [project.mode === 'flex' && project.is_published ? [m('.btn-send-draft-fixed', _$1.isNull(project.expires_at) ? m('a.w-button.btn.btn-medium.btn-secondary-dark[href="/projects/' + project.id + '/edit#announce_expiration"]', I18n$1.t('announce_expiration', I18nScope$2())) : '')] : '']])])]), m('a.btn-dashboard href="js:void(0);"', {
              onclick: ctrl.bodyToggleForNav.toggle
          }, [m('span.fa.fa-bars.fa-lg')])]);
      }
  };

  var modalBox = {
      view: function view(ctrl, args) {
          return m('.modal-backdrop', [m('.modal-dialog-outer', [m('.modal-dialog-inner.modal-dialog-small', [m('a.w-inline-block.modal-close.fa.fa-close.fa-lg[href="javascript:void(0);"]', {
              onclick: args.displayModal.toggle
          }), m.component(args.content[0], args.content[1])])])]);
      }
  };

  var adminProjectDetailsCard = {
      controller: function controller(args) {
          var project = args.resource,
              generateStatusText = function generateStatusText() {
              var statusTextObj = m.prop({}),
                  statusText = {
                  online: {
                      cssClass: 'text-success',
                      text: 'NO AR'
                  },
                  successful: {
                      cssClass: 'text-success',
                      text: 'FINANCIADO'
                  },
                  failed: {
                      cssClass: 'text-error',
                      text: 'NÃO FINANCIADO'
                  },
                  waiting_funds: {
                      cssClass: 'text-waiting',
                      text: 'AGUARDANDO'
                  },
                  rejected: {
                      cssClass: 'text-error',
                      text: 'RECUSADO'
                  },
                  draft: {
                      cssClass: '',
                      text: 'RASCUNHO'
                  },
                  in_analysis: {
                      cssClass: '',
                      text: 'EM ANÁLISE'
                  },
                  approved: {
                      cssClass: 'text-success',
                      text: 'APROVADO'
                  }
              };

              statusTextObj(statusText[project.state]);

              return statusTextObj;
          },
              isFinalLap = function isFinalLap() {
              // @TODO: use 8 days because timezone on js
              return !_.isNull(project.expires_at) && moment$1().add(8, 'days') >= moment$1(project.zone_expires_at);
          };
          return {
              project: project,
              statusTextObj: generateStatusText(),
              remainingTextObj: h.translatedTime(project.remaining_time),
              elapsedTextObj: h.translatedTime(project.elapsed_time),
              isFinalLap: isFinalLap
          };
      },
      view: function view(ctrl) {
          var project = ctrl.project,
              progress = project.progress.toFixed(2),
              statusTextObj = ctrl.statusTextObj(),
              remainingTextObj = ctrl.remainingTextObj,
              elapsedTextObj = ctrl.elapsedTextObj;

          return m('.project-details-card.card.u-radius.card-terciary.u-marginbottom-20', [m('div', [m('.fontsize-small.fontweight-semibold', [m('span.fontcolor-secondary', 'Status:'), ' ', m('span', {
              class: statusTextObj.cssClass
          }, ctrl.isFinalLap() && project.open_for_contributions ? 'RETA FINAL' : statusTextObj.text), ' ']), project.is_published ? [m('.meter.u-margintop-20.u-marginbottom-10', [m('.meter-fill', {
              style: {
                  width: (progress > 100 ? 100 : progress) + '%'
              }
          })]), m('.w-row', [m('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'financiado'), m('.fontweight-semibold.fontsize-large.lineheight-tight', progress + '%')]), m('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'levantados'), m('.fontweight-semibold.fontsize-large.lineheight-tight', ['R$ ' + h.formatNumber(project.pledged, 2)])]), m('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [m('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'apoios'), m('.fontweight-semibold.fontsize-large.lineheight-tight', project.total_contributions)]), m('.w-col.w-col-3.w-col-small-3.w-col-tiny-6', [_.isNull(project.expires_at) ? [m('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'iniciado há'), m('.fontweight-semibold.fontsize-large.lineheight-tight', elapsedTextObj.total + ' ' + elapsedTextObj.unit)] : [m('.fontcolor-secondary.lineheight-tighter.fontsize-small', 'restam'), m('.fontweight-semibold.fontsize-large.lineheight-tight', remainingTextObj.total + ' ' + remainingTextObj.unit)]])])] : ''])]);
      }
  };

  var projectDataChart = {
      controller: function controller(args) {
          var resource = _$1.first(args.collection()),
              source = !_$1.isUndefined(resource) ? resource.source : [],
              mountDataset = function mountDataset() {
              return [{
                  fillColor: 'rgba(126,194,69,0.2)',
                  strokeColor: 'rgba(126,194,69,1)',
                  pointColor: 'rgba(126,194,69,1)',
                  pointStrokeColor: '#fff',
                  pointHighlightFill: '#fff',
                  pointHighlightStroke: 'rgba(220,220,220,1)',
                  data: _$1.map(source, function (item) {
                      return item[args.dataKey];
                  })
              }];
          },
              renderChart = function renderChart(element, isInitialized) {
              if (!isInitialized) {
                  var ctx = element.getContext('2d');

                  new Chart(ctx).Line({
                      labels: _$1.map(source, function (item) {
                          return args.xAxis(item);
                      }),
                      datasets: mountDataset()
                  });
              }
          };

          return {
              renderChart: renderChart
          };
      },
      view: function view(ctrl, args) {
          return m('.card.u-radius.medium.u-marginbottom-30', [m('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', args.label), m('.w-row', [m('.w-col.w-col-12.overflow-auto', [m('canvas[id="chart"][width="860"][height="300"]', {
              config: ctrl.renderChart
          })])])]);
      }
  };

  var projectDataTable = {
      controller: function controller(args) {
          var table = m.prop(args.table),
              sortIndex = m.prop(-1);

          var comparator = function comparator(a, b) {
              var idx = sortIndex(),

              //Check if a custom comparator is used => Read component description
              x = _$1.isArray(a[idx]) && a[idx].length > 1 ? a[idx][0] : a[idx],
                  y = _$1.isArray(b[idx]) && b[idx].length > 1 ? b[idx][0] : b[idx];

              if (x < y) {
                  return -1;
              }
              if (y < x) {
                  return 1;
              }
              return 0;
          };

          var sortTable = function sortTable(idx) {
              var header = _$1.first(table()),
                  body = void 0;
              if (sortIndex() === idx) {
                  body = _$1.rest(table()).reverse();
              } else {
                  sortIndex(idx);
                  body = _$1.rest(table()).sort(comparator);
              }

              table(_$1.union([header], body));
          };

          sortTable(Math.abs(args.defaultSortIndex) || 0);

          if (args.defaultSortIndex < 0) {
              sortTable(Math.abs(args.defaultSortIndex) || 0);
          }

          return {
              table: table,
              sortTable: sortTable
          };
      },
      view: function view(ctrl, args) {
          var header = _$1.first(ctrl.table()),
              body = _$1.rest(ctrl.table());
          return m('.table-outer.u-marginbottom-60', [m('.w-row.table-row.fontweight-semibold.fontsize-smaller.header', _$1.map(header, function (heading, idx) {
              var sort = function sort() {
                  return ctrl.sortTable(idx);
              };
              return m('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.table-col', [m('a.link-hidden[href="javascript:void(0);"]', {
                  onclick: sort
              }, [heading + ' ', m('span.fa.fa-sort')])]);
          })), m('.table-inner.fontsize-small', _$1.map(body, function (rowData) {
              return m('.w-row.table-row', _$1.map(rowData, function (row) {
                  //Check if a custom comparator is used => Read component description
                  row = _$1.isArray(row) && row.length > 1 ? row[1] : row;
                  return m('.w-col.w-col-4.w-col-small-4.w-col-tiny-4.table-col', [m('div', row)]);
              }));
          }))]);
      }
  };

  var projectReminderCount = {
      view: function view(ctrl, args) {
          var project = args.resource;
          return m('#project-reminder-count.card.u-radius.u-text-center.medium.u-marginbottom-80', [m('.fontsize-large.fontweight-semibold', 'Total de pessoas que clicaram no botão Lembrar-me'), m('.fontsize-smaller.u-marginbottom-30', 'Um lembrete por email é enviado 48 horas antes do término da sua campanha'), m('.fontsize-jumbo', project.reminder_count)]);
      }
  };

  var I18nScope$1 = _$1.partial(h.i18nScope, 'projects.insights');

  var insights = {
      controller: function controller(args) {
          var filtersVM = postgrest$1.filtersVM({
              project_id: 'eq'
          }),
              displayModal = h.toggleProp(false, true),
              projectDetails = m.prop([]),
              contributionsPerDay = m.prop([]),
              contributionsPerLocation = m.prop([]),
              loader = postgrest$1.loaderWithToken;

          if (h.paramByName('online_success') === 'true') {
              displayModal.toggle();
          }

          filtersVM.project_id(args.root.getAttribute('data-id'));

          var l = loader(models.projectDetail.getRowOptions(filtersVM.parameters()));
          l.load().then(projectDetails);

          var lContributionsPerDay = loader(models.projectContributionsPerDay.getRowOptions(filtersVM.parameters()));
          lContributionsPerDay.load().then(contributionsPerDay);

          var contributionsPerLocationTable = [['Estado', 'Apoios', 'R$ apoiados (% do total)']];
          var buildPerLocationTable = function buildPerLocationTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  var column = [];

                  column.push(contribution.state_acronym || 'Outro/other');
                  column.push(contribution.total_contributions);
                  column.push([contribution.total_contributed, [//Adding row with custom comparator => read project-data-table description
                  m('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_contributed, 2, 3), m('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerLocationTable.push(column);
              }) : [];
          };

          var lContributionsPerLocation = loader(models.projectContributionsPerLocation.getRowOptions(filtersVM.parameters()));
          lContributionsPerLocation.load().then(buildPerLocationTable);

          var contributionsPerRefTable = [[I18n$1.t('ref_table.header.origin', I18nScope$1()), I18n$1.t('ref_table.header.contributions', I18nScope$1()), I18n$1.t('ref_table.header.amount', I18nScope$1())]];
          var buildPerRefTable = function buildPerRefTable(contributions) {
              return !_$1.isEmpty(contributions) ? _$1.map(_$1.first(contributions).source, function (contribution) {
                  //Test if the string matches a word starting with ctrse_ and followed by any non-digit group of characters
                  //This allows to remove any versioned referral (i.e.: ctrse_newsletter_123) while still getting ctrse_test_ref
                  var re = /(ctrse_[\D]*)/,
                      test = re.exec(contribution.referral_link);

                  var column = [];

                  if (test) {
                      //Removes last underscore if it exists
                      contribution.referral_link = test[0].substr(-1) === '_' ? test[0].substr(0, test[0].length - 1) : test[0];
                  }

                  column.push(contribution.referral_link ? I18n$1.t('referral.' + contribution.referral_link, I18nScope$1({ defaultValue: contribution.referral_link })) : I18n$1.t('referral.others', I18nScope$1()));
                  column.push(contribution.total);
                  column.push([contribution.total_amount, [m('input[type="hidden"][value="' + contribution.total_contributed + '"'), 'R$ ', h.formatNumber(contribution.total_amount, 2, 3), m('span.w-hidden-small.w-hidden-tiny', ' (' + contribution.total_on_percentage.toFixed(2) + '%)')]]);
                  return contributionsPerRefTable.push(column);
              }) : [];
          };

          var lContributionsPerRef = loader(models.projectContributionsPerRef.getRowOptions(filtersVM.parameters()));
          lContributionsPerRef.load().then(buildPerRefTable);

          return {
              l: l,
              lContributionsPerRef: lContributionsPerRef,
              lContributionsPerLocation: lContributionsPerLocation,
              lContributionsPerDay: lContributionsPerDay,
              displayModal: displayModal,
              filtersVM: filtersVM,
              projectDetails: projectDetails,
              contributionsPerDay: contributionsPerDay,
              contributionsPerLocationTable: contributionsPerLocationTable,
              contributionsPerRefTable: contributionsPerRefTable
          };
      },
      view: function view(ctrl) {
          var project = _$1.first(ctrl.projectDetails()) || {
              user: {
                  name: 'Realizador'
              }
          },
              successModalC = ['OnlineSucessModalContent'],
              buildTooltip = function buildTooltip(el) {
              return m.component(tooltip, {
                  el: el,
                  text: ['Informa de onde vieram os apoios de seu projeto. Saiba como usar essa tabela e planejar melhor suas ações de comunicação ', m('a[href="' + I18n$1.t('ref_table.help_url', I18nScope$1()) + '"][target=\'_blank\']', 'aqui.')],
                  width: 380
              });
          };

          project.user.name = project.user.name || 'Realizador';

          return m('.project-insights', !ctrl.l() ? [project.is_owner_or_admin ? m.component(projectDashboardMenu, {
              project: m.prop(project)
          }) : '', ctrl.displayModal() ? m.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: successModalC
          }) : '', m('.w-container', [m('.w-row.u-marginbottom-40', [m('.w-col.w-col-2'), m('.w-col.w-col-8.dashboard-header.u-text-center', [m('.fontweight-semibold.fontsize-larger.lineheight-looser.u-marginbottom-10', I18n$1.t('campaign_title', I18nScope$1())), m.component(adminProjectDetailsCard, {
              resource: project
          }), m('p.' + project.state + '-project-text.fontsize-small.lineheight-loose', [project.mode === 'flex' && _$1.isNull(project.expires_at) && project.state !== 'draft' ? m('span', [I18n$1.t('finish_explanation', I18nScope$1()), m('a.alt-link[href="http://suporte.catarse.me/hc/pt-br/articles/206507863-Catarse-flex-Principais-perguntas-e-respostas-"][target="_blank"]', I18n$1.t('know_more', I18nScope$1()))]) : m.trust(I18n$1.t('campaign.' + project.mode + '.' + project.state, I18nScope$1({ username: project.user.name, expires_at: h.momentify(project.zone_expires_at), sent_to_analysis_at: h.momentify(project.sent_to_analysis_at) })))])]), m('.w-col.w-col-2')])]), project.is_published ? [m('.divider'), m('.w-section.section-one-column.section.bg-gray.before-footer', [m('.w-container', [m('.w-row', [m('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: I18n$1.t('amount_per_day_label', I18nScope$1()),
              dataKey: 'total_amount',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              }
          }) : h.loader()])]), m('.w-row', [m('.w-col.w-col-12.u-text-center', {
              style: {
                  'min-height': '300px'
              }
          }, [!ctrl.lContributionsPerDay() ? m.component(projectDataChart, {
              collection: ctrl.contributionsPerDay,
              label: I18n$1.t('contributions_per_day_label', I18nScope$1()),
              dataKey: 'total',
              xAxis: function xAxis(item) {
                  return h.momentify(item.paid_at);
              }
          }) : h.loader()])]), m('.w-row', [m('.w-col.w-col-12.u-text-center', [m('.project-contributions-per-ref', [m('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', [I18n$1.t('ref_origin_title', I18nScope$1()), h.newFeatureBadge(), buildTooltip('span.fontsize-smallest.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary')]), !ctrl.lContributionsPerRef() ? m.component(projectDataTable, {
              table: ctrl.contributionsPerRefTable,
              defaultSortIndex: -2
          }) : h.loader()])])]), m('.w-row', [m('.w-col.w-col-12.u-text-center', [m('.project-contributions-per-ref', [m('.fontweight-semibold.u-marginbottom-10.fontsize-large.u-text-center', I18n$1.t('location_origin_title', I18nScope$1())), !ctrl.lContributionsPerLocation() ? m.component(projectDataTable, {
              table: ctrl.contributionsPerLocationTable,
              defaultSortIndex: -2
          }) : h.loader()])])]), m('.w-row', [m('.w-col.w-col-12.u-text-center', [m.component(projectReminderCount, {
              resource: project
          })])])])])] : ''] : h.loader());
      }
  };

  var I18nScope$3 = _.partial(h.i18nScope, 'pages.jobs');

  var jobs = {
      view: function view(ctrl, args) {
          return [m('.w-section.hero-jobs.hero-medium', [m('.w-containe.u-text-center', [m('img.icon-hero[src="/assets/logo-white.png"]'), m('.u-text-center.u-marginbottom-20.fontsize-largest', I18n$1.t('title', I18nScope$3()))])]), m('.w-section.section', [m('.w-container.u-margintop-40', [m('.w-row', [m('.w-col.w-col-8.w-col-push-2.u-text-center', [m('.fontsize-large.u-marginbottom-30', I18n$1.t('info', I18nScope$3())), m('a[href="/projects/new"].w-button.btn.btn-large.btn-inline', I18n$1.t('cta', I18nScope$3()))])])])])];
      }
  };

  var liveStatistics = {
      controller: function controller() {
          var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

          var pageStatistics = m.prop([]),
              notificationData = m.prop({});

          models.statistic.getRow().then(pageStatistics);
          // args.socket is a socket provided by socket.io
          // can see there https://github.com/catarse/catarse-live/blob/master/public/index.js#L8
          if (args.socket && _$1.isFunction(args.socket.on)) {
              args.socket.on('new_paid_contributions', function (msg) {
                  notificationData(JSON.parse(msg.payload));
                  models.statistic.getRow().then(pageStatistics);
                  m.redraw();
              });
          }

          return {
              pageStatistics: pageStatistics,
              notificationData: notificationData
          };
      },
      view: function view(ctrl) {
          var data = ctrl.notificationData();

          return m('.w-section.bg-stats.section.min-height-100', [m('.w-container.u-text-center', _$1.map(ctrl.pageStatistics(), function (stat) {
              return [m('img.u-marginbottom-60[src="https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/55ada5dd11b36a52616d97df_symbol-catarse.png"]'), m('.fontcolor-negative.u-marginbottom-40', [m('.fontsize-megajumbo.fontweight-semibold', 'R$ ' + h.formatNumber(stat.total_contributed, 2, 3)), m('.fontsize-large', 'Doados para projetos publicados por aqui')]), m('.fontcolor-negative.u-marginbottom-60', [m('.fontsize-megajumbo.fontweight-semibold', stat.total_contributors), m('.fontsize-large', 'Pessoas já apoiaram pelo menos 1 projeto no Catarse')])];
          })), !_$1.isEmpty(data) ? m('.w-container', [m('div', [m('.card.u-radius.u-marginbottom-60.medium', [m('.w-row', [m('.w-col.w-col-4', [m('.w-row', [m('.w-col.w-col-4.w-col-small-4', [m('img.thumb.u-round[src="' + h.useAvatarOrDefault(data.user_image) + '"]')]), m('.w-col.w-col-8.w-col-small-8', [m('.fontsize-large.lineheight-tight', data.user_name)])])]), m('.w-col.w-col-4.u-text-center.fontsize-base.u-margintop-20', [m('div', 'acabou de apoiar o')]), m('.w-col.w-col-4', [m('.w-row', [m('.w-col.w-col-4.w-col-small-4', [m('img.thumb-project.u-radius[src="' + data.project_image + '"][width="75"]')]), m('.w-col.w-col-8.w-col-small-8', [m('.fontsize-large.lineheight-tight', data.project_name)])])])])])])]) : '', m('.u-text-center.fontsize-large.u-marginbottom-10.fontcolor-negative', [m('a.link-hidden.fontcolor-negative[href="https://github.com/catarse"][target="_blank"]', [m('span.fa.fa-github', '.'), ' Open Source com orgulho! '])])]);
      }
  };

  var projectContributionReportHeader = {
      view: function view(ctrl, args) {
          var filterBuilder = args.filterBuilder,
              paymentStateFilter = _$1.findWhere(filterBuilder, { label: 'payment_state' }),
              rewardFilter = _$1.findWhere(filterBuilder, { label: 'reward_filter' }),
              mainFilter = _$1.findWhere(filterBuilder, { component: 'FilterMain' }),
              project_id = args.filterVM.project_id();

          rewardFilter.data.options = args.mapRewardsToOptions();

          return m('.w-section.dashboard-header', [m('.w-container', [m('.w-row', [m('.w-col.w-col-3'), m('.w-col.w-col-6', [m('.fontsize-larger.u-text-center.fontweight-semibold.lineheight-looser.u-marginbottom-30', 'Relatório de apoios')]), m('.w-col.w-col-3')]), m('.w-form', [m('form', { onsubmit: args.submit }, [m('.w-row', [m('.w-col.w-col-5', [m('.w-row', [m.component(c[paymentStateFilter.component], paymentStateFilter.data), m.component(c[rewardFilter.component], rewardFilter.data)])]), m('.w-col.w-col-7.u-margintop-20', [m('.w-row', [m('.w-col.w-col-8._w-sub-col', [m.component(c[mainFilter.component], mainFilter.data)]), m('.w-col.w-col-4.w-clearfix.w-hidden-small.w-hidden-tiny', [m('a.alt-link.u-right.fontsize-small.lineheight-looser[target="__blank" href="/projects/' + project_id + '/edit#reports"]', [m('span.fa.fa-download', '.'), ' Baixar relatórios'])])])])])])])])]);
      }
  };

  var projectContributionReportContentCard = {
      controller: function controller(args) {
          var stateClass = function stateClass(state) {
              var classes = {
                  'paid': 'text-success',
                  'refunded': 'text-refunded',
                  'pending_refund': 'text-refunded',
                  'pending': 'text-waiting',
                  'refused': 'text-error'
              };

              return classes[state];
          };

          return {
              stateClass: stateClass
          };
      },
      view: function view(ctrl, args) {
          var contribution = args.contribution(),
              profile_img = _$1.isEmpty(contribution.profile_img_thumbnail) ? '/assets/catarse_bootstrap/user.jpg' : contribution.profile_img_thumbnail,
              reward = contribution.reward || { minimum_value: 0, description: 'Nenhuma recompensa selecionada' };
          return m('.w-clearfix.card.card-clickable', [m('.w-row', [m('.w-col.w-col-1.w-col-tiny-1', [m('img.user-avatar.u-marginbottom-10[src=\'' + profile_img + '\']')]), m('.w-col.w-col-11.w-col-tiny-11', [m('.w-row', [m('.w-col.w-col-3', [m('.fontweight-semibold.fontsize-smaller.lineheight-tighter', contribution.user_name), m('.fontsize-smallest.lineheight-looser', [contribution.has_another ? [m('a.link-hidden-light.badge.badge-light', '+1 apoio'), m.trust('&nbsp;')] : '', contribution.anonymous ? m('span.fa.fa-eye-slash.fontcolor-secondary') : ''])]), m('.w-col.w-col-3', [m('.lineheight-tighter', [m('span.fa.fa-circle.fontsize-smallest.' + ctrl.stateClass(contribution.state), '.'), '   ', m('span.fontsize-large', 'R$ ' + h.formatNumber(contribution.value, 2, 3))])]), m('.w-col.w-col-3.w-hidden-small.w-hidden-tiny', [m('.fontsize-smallest.fontweight-semibold', 'Recompensa: R$ ' + h.formatNumber(reward.minimum_value, 2, 3)), m('.fontsize-smallest', reward.description.substring(0, 80) + '...')]) /*,
m(".w-col.w-col-2.w-hidden-small.w-hidden-tiny.u-text-center", [
m(".fontsize-smallest.fontcolor-secondary", "Enviei!"),
m(".fontsize-smallest.u-marginbottom-20.lineheight-loose", [
m("a.checkbox-big[href='#']", ".")


m(".w-col.w-col-2", [
m(".fontsize-smallest", [
m("a.link-hidden[href='#']", "Questionário")

m("span.fontweight-semibold.text-waiting", "enviado")

m(".fontsize-smallest.fontcolor-terciary", "em 29/10/2015")

          ])])])]);
      }
  };

  var projectContributionReportContent = {
      view: function view(ctrl, args) {
          var list = args.list;
          return m('.w-section.bg-gray.before-footer.section', [m('.w-container', [m('.w-row.u-marginbottom-20', [m('.w-col.w-col-9.w-col-small-6.w-col-tiny-6', [m('.fontsize-base', [m('span.fontweight-semibold', list.isLoading() ? '' : list.total()), ' apoios'])])]),
          //m(".fontsize-large.fontweight-semibold", "R$ 12.000,00")

          /*
           TODO: ordering filter template
          m(".w-col.w-col-3.w-col-small-6.w-col-tiny-6", [
              m(".w-form", [
                  m("form[data-name='Email Form 5'][id='email-form-5'][name='email-form-5']", [
                      m(".fontsize-smallest.fontcolor-secondary", "Ordenar por:"),
                      m("select.w-select.text-field.positive.fontsize-smallest[id='field-9'][name='field-9']", [
                          m("option[value='']", "Data (recentes para antigos)"),
                          m("option[value='']", "Data (antigos para recentes)"),
                          m("option[value='']", "Valor (maior para menor)"),
                          m("option[value='First']", "Valor (menor para maior)")
                      ])
                  ])
              ])
          ])*/
          _$1.map(list.collection(), function (item) {
              var contribution = m.prop(item);
              return m.component(projectContributionReportContentCard, { contribution: contribution });
          })]), m('.w-section.section.bg-gray', [m('.w-container', [m('.w-row.u-marginbottom-60', [m('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])])]);
      }
  };

  var vm$2 = postgrest.filtersVM({
      full_text_index: '@@',
      state: 'eq',
      reward_id: 'eq',
      project_id: 'eq'
  });
  var paramToString$2 = function paramToString(p) {
      return (p || '').toString().trim();
  };
  vm$2.state('');
  vm$2.order({
      id: 'desc'
  });

  vm$2.full_text_index.toFilter = function () {
      var filter = paramToString$2(vm$2.full_text_index());
      return filter && replaceDiacritics(filter) || undefined;
  };

  var projectContributionReport = {
      controller: function controller(args) {
          var listVM = postgrest$1.paginationVM(models.projectContribution, 'id.desc', { 'Prefer': 'count=exact' }),
              filterVM = vm$2,
              project = m.prop({}),
              rewards = m.prop([]),
              filterBuilder = [{
              component: 'FilterMain',
              data: {
                  inputWrapperClass: '.w-input.text-field',
                  btnClass: '.btn.btn-medium',
                  vm: filterVM.full_text_index,
                  placeholder: 'Busque por nome ou email do apoiador'
              }
          }, {
              label: 'reward_filter',
              component: 'FilterDropdown',
              data: {
                  label: 'Recompensa',
                  name: 'reward_id',
                  vm: filterVM.reward_id,
                  wrapper_class: '.w-col.w-col-6.w-col-small-6.w-col-tiny-6._w-sub-col-middle',
                  options: []
              }
          }, {
              label: 'payment_state',
              component: 'FilterDropdown',
              data: {
                  label: 'Status do apoio',
                  name: 'state',
                  vm: filterVM.state,
                  wrapper_class: '.w-col.w-col-6.w-col-small-6.w-col-tiny-6._w-sub-col-middle',
                  options: [{
                      value: '',
                      option: 'Todos'
                  }, {
                      value: 'paid',
                      option: 'Pago'
                  }, {
                      value: 'refused',
                      option: 'Cancelado'
                  }, {
                      value: 'pending',
                      option: 'Pendente'
                  }, {
                      value: 'pending_refund',
                      option: 'Reembolso pendente'
                  }, {
                      value: 'refunded',
                      option: 'Reembolsado'
                  }, {
                      value: 'chargeback',
                      option: 'Contestado'
                  }]
              }
          }],
              submit = function submit() {
              listVM.firstPage(filterVM.parameters()).then(null);
              return false;
          };

          filterVM.project_id(args.root.getAttribute('data-id'));

          var lReward = postgrest$1.loaderWithToken(models.rewardDetail.getPageOptions({ project_id: 'eq.' + filterVM.project_id() }));
          var lProject = postgrest$1.loaderWithToken(models.projectDetail.getPageOptions({ project_id: 'eq.' + filterVM.project_id() }));

          lReward.load().then(rewards);
          lProject.load().then(project);

          var mapRewardsToOptions = function mapRewardsToOptions() {
              var options = [];
              if (!lReward()) {
                  options = _$1.map(rewards(), function (r) {
                      return {
                          value: r.id,
                          option: 'R$ ' + h.formatNumber(r.minimum_value, 2, 3) + ' - ' + r.description.substring(0, 20)
                      };
                  });
              }

              options.unshift({
                  value: '',
                  option: 'Todas'
              });

              return options;
          };

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }

          return {
              listVM: listVM,
              filterVM: filterVM,
              filterBuilder: filterBuilder,
              submit: submit,
              lReward: lReward,
              rewards: rewards,
              project: project,
              mapRewardsToOptions: mapRewardsToOptions
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM;

          return [m.component(projectDashboardMenu, { project: m.prop(_$1.first(ctrl.project())) }), m.component(projectContributionReportHeader, {
              submit: ctrl.submit,
              filterBuilder: ctrl.filterBuilder,
              form: ctrl.filterVM.formDescriber,
              mapRewardsToOptions: ctrl.mapRewardsToOptions,
              filterVM: ctrl.filterVM
          }), m('.divider.u-margintop-30'), m.component(projectContributionReportContent, {
              list: list
          })];
      }
  };

  var projectVM = function projectVM(project_id, project_user_id) {
      var vm = postgrest.filtersVM({
          project_id: 'eq'
      }),
          idVM = h.idVM,
          projectDetails = m.prop([]),
          userDetails = m.prop([]),
          rewardDetails = m.prop([]);

      vm.project_id(project_id);
      idVM.id(project_user_id);

      var lProject = postgrest.loaderWithToken(models.projectDetail.getRowOptions(vm.parameters())),
          lUser = postgrest.loaderWithToken(models.userDetail.getRowOptions(idVM.parameters())),
          lReward = postgrest.loaderWithToken(models.rewardDetail.getPageOptions(vm.parameters())),
          isLoading = function isLoading() {
          return lProject() || lUser() || lReward();
      };

      lProject.load().then(function (data) {
          lUser.load().then(userDetails);
          lReward.load().then(rewardDetails);

          projectDetails(data);
      });

      return {
          projectDetails: _$1.compose(_$1.first, projectDetails),
          userDetails: userDetails,
          rewardDetails: rewardDetails,
          isLoading: isLoading
      };
  };

  var projectsDashboard = {
      controller: function controller(args) {
          return projectVM(args.project_id, args.project_user_id);
      },
      view: function view(ctrl) {
          var project = ctrl.projectDetails;
          return project().is_owner_or_admin ? m.component(projectDashboardMenu, { project: project }) : '';
      }
  };

  var projectFiltersVM = function projectFiltersVM() {
      var filtersVM = postgrest$1.filtersVM,
          all = filtersVM({
          state: 'eq'
      }).state('online'),
          nearMe = filtersVM({
          near_me: 'eq',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').near_me(true),
          expiring = filtersVM({
          expires_at: 'lte',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').expires_at(moment$1().add(14, 'days').format('YYYY-MM-DD')),
          recent = filtersVM({
          online_date: 'gte',
          open_for_contributions: 'eq'
      }).open_for_contributions('true').online_date(moment$1().subtract(5, 'days').format('YYYY-MM-DD')),
          score = filtersVM({
          score: 'gte',
          open_for_contributions: 'eq'
      }).score('1').open_for_contributions('true'),
          online = filtersVM({
          open_for_contributions: 'eq'
      }).open_for_contributions('true'),
          successful = filtersVM({
          state: 'eq'
      }).state('successful'),
          finished = filtersVM({}),
          filters = {
          all: {
              title: 'Todas as Categorias',
              filter: all,
              nicename: 'No ar',
              isContextual: false,
              keyName: 'all'
          },
          score: {
              title: 'Todas as Categorias',
              filter: score,
              nicename: 'Populares',
              isContextual: false,
              keyName: 'score'
          },
          online: {
              title: 'No ar',
              filter: online,
              isContextual: false,
              keyName: 'online'
          },
          expiring: {
              title: 'Reta final',
              filter: expiring,
              isContextual: false,
              keyName: 'expiring'
          },
          successful: {
              title: 'Todas as Categorias',
              filter: successful,
              nicename: 'Financiados',
              isContextual: false,
              keyName: 'successful'
          },
          finished: {
              title: 'Todas as Categorias',
              filter: finished,
              nicename: 'Finalizados',
              isContextual: false,
              keyName: 'finished'
          },
          recent: {
              title: 'Recentes',
              filter: recent,
              isContextual: false,
              keyName: 'recent'
          },
          near_me: {
              title: 'Próximos a mim',
              filter: nearMe,
              isContextual: false,
              keyName: 'near_me'
          }
      };

      var setContextFilters = function setContextFilters(contextFilters) {
          _.map(contextFilters, function (filterKey) {
              return filters[filterKey].isContextual = true;
          });

          return filters;
      },
          getContextFilters = function getContextFilters() {
          return _.filter(filters, function (filter) {
              return filter.isContextual;
          });
      },
          removeContextFilter = function removeContextFilter(filter) {
          filters[filter.keyName].isContextual = false;

          return filters;
      };

      return {
          filters: filters,
          setContextFilters: setContextFilters,
          getContextFilters: getContextFilters,
          removeContextFilter: removeContextFilter
      };
  };

  var search = {
      view: function view(ctrl) {
          var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

          var action = args.action || '/pt/explore',
              method = args.method || 'GET';

          return m('#search.w-container.w-hidden-main.w-hidden-medium', [m('.w-row', [m('.w-col.w-col-10.u-marginbottom-20', [m('.w-form', [m('form#email-form', { action: action, method: method }, [m('.w-row', [m('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', [m('input[type="text"][name="pg_search"][placeholder="Busque projetos"]#pg_search_inside.w-input.text-field.negative.prefix')]), m('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [m('button.w-inline-block.btn.btn-dark.btn-attached.postfix', [m('img.header-lupa[src="https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/54e44178b2135fce2b6cd235_lupa.png"]')])])])])])])])]);
      }
  };

  var categoryButton = {
      view: function view(ctrl, args) {
          var category = args.category;

          return m('.w-col.w-col-2.w-col-small-6.w-col-tiny-6', [m('a.w-inline-block.btn-category[href=\'#by_category_id/' + category.id + '\']', [m('div', [category.name, m('span.badge.explore', category.online_projects)])])]);
      }
  };

  var projectsExplore = {
      controller: function controller() {
          var filters = postgrest$1.filtersVM,
              projectFiltersVM$$ = projectFiltersVM(),
              filtersMap = projectFiltersVM$$.filters,
              defaultFilter = h.paramByName('filter') || 'score',
              fallbackFilter = 'all',
              currentFilter = m.prop(filtersMap[defaultFilter]),
              changeFilter = function changeFilter(newFilter) {
              currentFilter(filtersMap[newFilter]);
              loadRoute();
          },
              resetContextFilter = function resetContextFilter() {
              currentFilter(filtersMap[defaultFilter]);
              projectFiltersVM$$.setContextFilters(['score', 'finished', 'all']);
          },
              isSearch = m.prop(false),
              categoryCollection = m.prop([]),
              categoryId = m.prop(),
              findCategory = function findCategory(id) {
              return _$1.find(categoryCollection(), function (c) {
                  return c.id === parseInt(id);
              });
          },
              category = _$1.compose(findCategory, categoryId),
              loadCategories = function loadCategories() {
              return models.category.getPageWithToken(filters({}).order({ name: 'asc' }).parameters()).then(categoryCollection);
          },

          // Fake projects object to be able to render page while loadding (in case of search)
          projects = m.prop({ collection: m.prop([]), isLoading: function isLoading() {
                  return true;
              }, isLastPage: function isLastPage() {
                  return true;
              } }),
              loadRoute = function loadRoute() {
              var route = window.location.hash.match(/\#([^\/]*)\/?(\d+)?/),
                  cat = route && route[2] && findCategory(route[2]),
                  filterFromRoute = function filterFromRoute() {
                  var byCategory = filters({
                      category_id: 'eq'
                  });

                  return route && route[1] && filtersMap[route[1]] || cat && { title: cat.name, filter: byCategory.category_id(cat.id) };
              },
                  filter = filterFromRoute() || currentFilter(),
                  search = h.paramByName('pg_search'),
                  searchProjects = function searchProjects() {
                  var l = postgrest$1.loaderWithToken(models.projectSearch.postOptions({ query: search })),
                      page = { // We build an object with the same interface as paginationVM
                      collection: m.prop([]),
                      isLoading: l,
                      isLastPage: function isLastPage() {
                          return true;
                      },
                      nextPage: function nextPage() {
                          return false;
                      }
                  };
                  l.load().then(page.collection);
                  return page;
              },
                  loadProjects = function loadProjects() {
                  var pages = postgrest$1.paginationVM(models.project);
                  var parameters = _$1.extend({}, currentFilter().filter.parameters(), filter.filter.order({
                      open_for_contributions: 'desc',
                      state_order: 'asc',
                      state: 'desc',
                      score: 'desc',
                      pledged: 'desc'
                  }).parameters());
                  pages.firstPage(parameters);
                  return pages;
              },
                  loadFinishedProjects = function loadFinishedProjects() {
                  var pages = postgrest$1.paginationVM(models.finishedProject),
                      parameters = _$1.extend({}, currentFilter().filter.parameters(), filter.filter.order({
                      state_order: 'asc',
                      state: 'desc',
                      pledged: 'desc'
                  }).parameters());
                  pages.firstPage(parameters);

                  return pages;
              };

              if (_$1.isString(search) && search.length > 0 && route === null) {
                  isSearch(true);
                  title('Busca ' + search);
                  projects(searchProjects());
              } else if (currentFilter().keyName === 'finished') {
                  isSearch(false);
                  projects(loadFinishedProjects());
              } else {
                  isSearch(false);
                  title(filter.title);
                  if (!_$1.isNull(route) && route[1] == 'finished') {
                      projects(loadFinishedProjects());
                  } else {
                      projects(loadProjects());
                  }
              }
              categoryId(cat && cat.id);
              route || _$1.isString(search) && search.length > 0 ? toggleCategories(false) : toggleCategories(true);
          },
              title = m.prop(),
              toggleCategories = h.toggleProp(false, true);

          window.addEventListener('hashchange', function () {
              resetContextFilter();
              loadRoute();
              m.redraw();
          }, false);

          // Initial loads
          resetContextFilter();
          models.project.pageSize(9);
          loadCategories().then(loadRoute);

          if (!currentFilter()) {
              currentFilter(filtersMap[defaultFilter]);
          }

          return {
              categories: categoryCollection,
              changeFilter: changeFilter,
              fallbackFilter: fallbackFilter,
              projects: projects,
              category: category,
              title: title,
              filtersMap: filtersMap,
              currentFilter: currentFilter,
              projectFiltersVM: projectFiltersVM$$,
              toggleCategories: toggleCategories,
              isSearch: isSearch
          };
      },
      view: function view(ctrl, args) {
          if (!ctrl.projects().isLoading() && _$1.isEmpty(ctrl.projects().collection()) && !ctrl.isSearch()) {
              ctrl.projectFiltersVM.removeContextFilter(ctrl.currentFilter());
              ctrl.changeFilter(ctrl.fallbackFilter);
          }

          return [m('.w-section.hero-search', [m.component(search), m('.w-container.u-marginbottom-10', [m('.u-text-center.u-marginbottom-40', [m('a#explore-open.link-hidden-white.fontweight-light.fontsize-larger[href="javascript:void(0);"]', { onclick: function onclick() {
                  return ctrl.toggleCategories.toggle();
              } }, ['Explore projetos incríveis ', m('span#explore-btn.fa.fa-angle-down' + (ctrl.toggleCategories() ? '.opened' : ''), '')])]), m('#categories.category-slider' + (ctrl.toggleCategories() ? '.opened' : ''), [m('.w-row.u-marginbottom-30', [_$1.map(ctrl.categories(), function (category) {
              return m.component(categoryButton, { category: category });
          })])])])]), m('.w-section', [m('.w-container', [m('.w-row', [m('.w-col.w-col-9.w-col-small-8.w-col-tiny-8', [m('.fontsize-larger', ctrl.title())]), m('.w-col.w-col-3.w-col-small-4.w-col-tiny-4', !ctrl.isSearch() ? m('select.w-select.text-field.positive', { onchange: m.withAttr('value', ctrl.changeFilter) }, _$1.map(ctrl.projectFiltersVM.getContextFilters(), function (pageFilter, idx) {
              var projects = ctrl.projects(),
                  isSelected = ctrl.currentFilter() == pageFilter;

              return m('option[value="' + pageFilter.keyName + '"]', { selected: isSelected }, pageFilter.nicename);
          })) : '')])])]), m('.w-section.section', [m('.w-container', [m('.w-row', [m('.w-row', _$1.map(ctrl.projects().collection(), function (project, idx) {
              var cardType = 'small',
                  ref = 'ctrse_explore';

              if (ctrl.currentFilter().keyName === 'score' && !ctrl.isSearch()) {
                  if (idx === 0) {
                      cardType = 'big';
                      ref = 'ctrse_explore_featured_big';
                  } else if (idx === 1 || idx === 2) {
                      cardType = 'medium';
                      ref = 'ctrse_explore_featured_medium';
                  } else {
                      ref = 'ctrse_explore_featured';
                  }
              }

              return m.component(projectCard, { project: project, ref: ref, type: cardType });
          })), ctrl.projects().isLoading() ? h.loader() : _$1.isEmpty(ctrl.projects().collection()) ? m('.fontsize-base.w-col.w-col-12', 'Nenhum projeto para mostrar.') : ''])])]), m('.w-section.u-marginbottom-80', [m('.w-container', [m('.w-row', [m('.w-col.w-col-2.w-col-push-5', [ctrl.projects().isLastPage() || ctrl.projects().isLoading() || _$1.isEmpty(ctrl.projects().collection()) ? '' : m('a.btn.btn-medium.btn-terciary[href=\'#loadMore\']', { onclick: function onclick() {
                  ctrl.projects().nextPage();return false;
              } }, 'Carregar mais')])])])]), m('.w-section.section-large.before-footer.u-margintop-80.bg-gray.divider', [m('.w-container.u-text-center', [m('img.u-marginbottom-20.icon-hero', { src: 'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/56f4414d3a0fcc0124ec9a24_icon-launch-explore.png' }), m('h2.fontsize-larger.u-marginbottom-60', 'Lance sua campanha no Catarse!'), m('.w-row', [m('.w-col.w-col-4.w-col-push-4', [m('a.w-button.btn.btn-large', { href: '/start?ref=ctrse_explore' }, 'Aprenda como')])])])])];
      }
  };

  var homeVM = function homeVM() {
      var i18nStart = I18n$1.translations[I18n$1.currentLocale()].projects.home,
          banners = i18nStart.banners;

      return {
          banners: banners
      };
  };

  var slider = {
      controller: function controller(args) {
          var interval = void 0;
          var selectedSlideIdx = m.prop(0),
              translationSize = m.prop(1600),
              sliderTime = args.sliderTime || 6500,
              decrementSlide = function decrementSlide() {
              if (selectedSlideIdx() > 0) {
                  selectedSlideIdx(selectedSlideIdx() - 1);
              } else {
                  selectedSlideIdx(args.slides.length - 1);
              }
          },
              incrementSlide = function incrementSlide() {
              if (selectedSlideIdx() < args.slides.length - 1) {
                  selectedSlideIdx(selectedSlideIdx() + 1);
              } else {
                  selectedSlideIdx(0);
              }
          },
              startSliderTimer = function startSliderTimer() {
              interval = setInterval(function () {
                  incrementSlide();
                  m.redraw();
              }, sliderTime);
          },
              resetSliderTimer = function resetSliderTimer() {
              clearInterval(interval);
              startSliderTimer();
          },
              config = function config(el, isInitialized, context) {
              if (!isInitialized) {
                  translationSize(Math.max(document.documentElement.clientWidth, window.innerWidth || 0));
                  m.redraw();
              };

              context.onunload = function () {
                  return clearInterval(interval);
              };
          };

          startSliderTimer();

          return {
              config: config,
              selectedSlideIdx: selectedSlideIdx,
              translationSize: translationSize,
              decrementSlide: decrementSlide,
              incrementSlide: incrementSlide,
              resetSliderTimer: resetSliderTimer
          };
      },
      view: function view(ctrl, args) {
          var slideClass = args.slideClass || '',
              wrapperClass = args.wrapperClass || '',
              effect = args.effect || 'slide',
              sliderClick = function sliderClick(fn, param) {
              fn(param);
              ctrl.resetSliderTimer();
              args.onchange && args.onchange();
          },
              effectStyle = function effectStyle(idx, translateStr) {
              var slideFx = 'transform: ' + translateStr + '; -webkit-transform: ' + translateStr + '; -ms-transform:' + translateStr,
                  fadeFx = idx === ctrl.selectedSlideIdx() ? 'opacity: 1; visibility: visible;' : 'opacity: 0; visibility: hidden;';

              return effect === 'fade' ? fadeFx : slideFx;
          };

          return m('.w-slider.' + wrapperClass, {
              config: ctrl.config
          }, [m('.fontsize-larger', args.title), m('.w-slider-mask', [_$1.map(args.slides, function (slide, idx) {
              var translateValue = (idx - ctrl.selectedSlideIdx()) * ctrl.translationSize(),
                  translateStr = 'translate3d(' + translateValue + 'px, 0, 0)';

              return m('.slide.w-slide.' + slideClass, {
                  style: effectStyle(idx, translateStr) + ' ' + slide.customStyle
              }, [m('.w-container', [m('.w-row', [m('.w-col.w-col-8.w-col-push-2', slide.content)])])]);
          }), m('#slide-prev.w-slider-arrow-left.w-hidden-small.w-hidden-tiny', {
              onclick: function onclick() {
                  return sliderClick(ctrl.decrementSlide);
              }
          }, [m('.w-icon-slider-left.fa.fa-lg.fa-angle-left.fontcolor-terciary')]), m('#slide-next.w-slider-arrow-right.w-hidden-small.w-hidden-tiny', {
              onclick: function onclick() {
                  return sliderClick(ctrl.incrementSlide);
              }
          }, [m('.w-icon-slider-right.fa.fa-lg.fa-angle-right.fontcolor-terciary')]), m('.w-slider-nav.w-slider-nav-invert.w-round.slide-nav', _$1(args.slides.length).times(function (idx) {
              return m('.slide-bullet.w-slider-dot' + (ctrl.selectedSlideIdx() === idx ? '.w-active' : ''), {
                  onclick: function onclick() {
                      return sliderClick(ctrl.selectedSlideIdx, idx);
                  }
              });
          }))])]);
      }
  };

  var contributionActivities = {
      controller: function controller(args) {
          var interval = void 0;
          var collection = m.prop([]),
              resource = m.prop(),
              collectionIndex = m.prop(0),
              collectionSize = m.prop(),
              collectionL = postgrest$1.loader(models.contributionActivity.getPageOptions()),
              nextResource = function nextResource() {
              if (collectionIndex() + 1 > collectionSize()) {
                  collectionIndex(0);
              }

              collectionIndex(collectionIndex() + 1);
              resource(collection()[collectionIndex()]);
              m.redraw();
          },
              startConfig = function startConfig(el, isinitialized, context) {
              context.onunload = function () {
                  return clearInterval(interval);
              };
          },
              startTimer = function startTimer() {
              interval = setInterval(nextResource, 15000);
          };

          collectionL.load().then(function (data) {
              collection(data);
              collectionSize(data.length);
              resource(_$1.first(data));
          });

          startTimer();

          return {
              collection: collection,
              collectionL: collectionL,
              resource: resource,
              collectionSize: collectionSize
          };
      },
      view: function view(ctrl, args) {
          if (!ctrl.collectionL() && !_$1.isUndefined(ctrl.resource()) && (ctrl.collectionSize() || 0) > 0) {
              var resource = ctrl.resource(),
                  elapsed = h.translatedTime(resource.elapsed_time),
                  project_link = 'https://catarse.me/' + resource.permalink + '?ref=ctrse_home_activities';

              return m('.w-section.section.bg-backs-carrosel', { config: ctrl.startConfig }, [m('.w-container.u-text-center.fontcolor-negative', [m('.fontsize-large.u-marginbottom-30', 'há ' + parseInt(elapsed.total) + ' ' + elapsed.unit + '...'), m('.w-clearfix.w-inline-block.u-marginbottom-10', [m('a', { href: project_link }, [m('img.thumb-author.u-round', { src: resource.thumbnail, width: 80 })]), m('img.thumb-author.u-round', { src: 'https://daks2k3a4ib2z.cloudfront.net/54b440b85608e3f4389db387/56d646f7710a7126338b46ff_logo-catarse-back-carrosel.png' }), m('a', { href: project_link }, [m('img.thumb-author.u-round', { src: resource.project_thumbnail, width: 80, style: 'margin-right: 0;' })])]), m('.fontsize-large', resource.name + ' apoiou'), m('.fontsize-larger', [m('a.link-hidden-white', { href: project_link }, resource.project_name)])])]);
          } else {
              return m('div');
          }
      }
  };

  var I18nScope$4 = _$1.partial(h.i18nScope, 'projects.home');

  var projectsHome = {
      controller: function controller() {
          var sample6 = _$1.partial(_$1.sample, _$1, 6),
              loader = postgrest.loader,
              project = models.project,
              filters = projectFiltersVM().filters,
              vm = homeVM();

          var collections = _$1.map(['score'], function (name) {
              var f = filters[name],
                  cLoader = loader(project.getPageOptions(_$1.extend({}, { order: 'score.desc' }, f.filter.parameters()))),
                  collection = m.prop([]);

              cLoader.load().then(_$1.compose(collection, sample6));

              project.pageSize(20);

              return {
                  title: f.title,
                  hash: name,
                  collection: collection,
                  loader: cLoader
              };
          });

          return {
              collections: collections,
              slidesContent: vm.banners
          };
      },
      view: function view(ctrl) {
          var slides = function slides() {
              return _$1.map(ctrl.slidesContent, function (slide) {
                  var customStyle = 'background-image: url(' + slide.image + ');';
                  var content = m('.w-container.u-text-center', [m('.w-row.u-marginbottom-40', [m('h1.fontcolor-negative.fontsize-megajumbo.u-marginbottom-20', slide.title), m('h2.fontcolor-negative.fontsize-large', m.trust(slide.subtitle))]), m('a.btn.btn-large.u-marginbottom-10.btn-inline', { href: slide.link }, slide.cta)]);

                  return {
                      content: content,
                      customStyle: customStyle
                  };
              });
          };

          return [m.component(slider, {
              slides: slides(),
              effect: 'fade',
              slideClass: 'hero-slide start',
              wrapperClass: 'hero-full hero-full-slide',
              sliderTime: 10000
          }), _$1.map(ctrl.collections, function (collection) {
              return m.component(projectRow, {
                  collection: collection,
                  title: I18n$1.t('row_title', I18nScope$4()),
                  ref: 'home_' + collection.hash
              });
          }), m.component(contributionActivities)];
      }
  };

  var projectShareBox = {
      controller: function controller() {
          return {
              displayEmbed: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          return m('.pop-share', {
              style: 'display: block;'
          }, [m('.w-hidden-main.w-hidden-medium.w-clearfix', [m('a.btn.btn-small.btn-terciary.btn-inline.u-right', {
              onclick: args.displayShareBox.toggle
          }, 'Fechar'), m('.fontsize-small.fontweight-semibold.u-marginbottom-30', 'Compartilhe este projeto')]), m('.w-widget.w-widget-facebook.w-hidden-small.w-hidden-tiny.share-block', [m('iframe[allowtransparency="true"][width="150px"][height="22px"][frameborder="0"][scrolling="no"][src="https://www.facebook.com/v2.0/plugins/share_button.php?app_id=173747042661491&channel=https%3A%2F%2Fs-static.ak.facebook.com%2Fconnect%2Fxd_arbiter%2F44OwK74u0Ie.js%3Fversion%3D41%23cb%3Df7d9b900c%26domain%3Dwww.catarse.me%26origin%3Dhttps%253A%252F%252Fwww.catarse.me%252Ff4b3ad0c8%26relation%3Dparent.parent&container_width=0&href=https%3A%2F%2Fwww.catarse.me%2Fpt%2F' + args.project().permalink + '%3Fref%3Dfacebook%26utm_source%3Dfacebook.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share&layout=button_count&locale=pt_BR&sdk=joey"]')]), m('.w-widget.w-widget-twitter.w-hidden-small.w-hidden-tiny.share-block', [m('iframe[allowtransparency="true"][width="120px"][height="22px"][frameborder="0"][scrolling="no"][src="//platform.twitter.com/widgets/tweet_button.8d007ddfc184e6776be76fe9e5e52d69.en.html#_=1442425984936&count=horizontal&dnt=false&id=twitter-widget-1&lang=en&original_referer=https%3A%2F%2Fwww.catarse.me%2Fpt%2F' + args.project().permalink + '&size=m&text=Confira%20o%20projeto%20' + args.project().name + '%20no%20%40catarse&type=share&url=https%3A%2F%2Fwww.catarse.me%2Fpt%2F' + args.project().permalink + '%3Fref%3Dtwitter%26utm_source%3Dtwitter.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share&via=catarse"]')]), m('a.w-hidden-small.widget-embed.w-hidden-tiny.fontsize-small.link-hidden.fontcolor-secondary[href="js:void(0);"]', {
              onclick: ctrl.displayEmbed.toggle
          }, '< embed >'), ctrl.displayEmbed() ? m('.embed-expanded.u-margintop-30', [m('.fontsize-small.fontweight-semibold.u-marginbottom-20', 'Insira um widget em seu site'), m('.w-form', [m('input.w-input[type="text"][value="<iframe frameborder="0" height="314px" src="https://www.catarse.me/pt/projects/' + args.project().id + '/embed" width="300px" scrolling="no"></iframe>"]')]), m('.card-embed', [m('iframe[frameborder="0"][height="350px"][src="/projects/' + args.project().id + '/embed"][width="300px"][scrolling="no"]')])]) : '', m('a.w-hidden-main.w-hidden-medium.btn.btn-medium.btn-fb.u-marginbottom-20[href="http://www.facebook.com/sharer/sharer.php?u=https://www.catarse.me/' + args.project().permalink + '%3Fref%3Dfacebook%26utm_source%3Dfacebook.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share&title=' + args.project().name + '"][target="_blank"]', [m('span.fa.fa-facebook'), ' Compartilhe']), m('a.w-hidden-main.w-hidden-medium.btn.btn-medium.btn-tweet.u-marginbottom-20[href="http://twitter.com/?status=Acabei%20de%20apoiar%20o%20projeto%20' + args.project().name + '%20https://www.catarse.me/' + args.project().permalink + '%3Fref%3Dtwitter%26utm_source%3Dtwitter.com%26utm_medium%3Dsocial%26utm_campaign%3Dproject_share"][target="_blank"]', [m('span.fa.fa-twitter'), ' Tweet'])]);
      }
  };

  var projectHighlight = {
      controller: function controller() {
          return {
              displayShareBox: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              address = project().address || { state_acronym: '', city: '' };

          return m('#project-highlight', [project().video_embed_url ? m('.w-embed.w-video.project-video', {
              style: 'min-height: 240px;'
          }, [m('iframe.embedly-embed[itemprop="video"][src="' + project().video_embed_url + '"][frameborder="0"][allowFullScreen]')]) : m('.project-image', {
              style: 'background-image:url(' + project().original_image + ');'
          }), m('.project-blurb', project().headline), m('.u-text-center-small-only.u-marginbottom-30', [!_$1.isNull(address) ? m('a.btn.btn-inline.btn-small.btn-transparent.link-hidden-light.u-marginbottom-10[href="/pt/explore?pg_search=' + address.state_acronym + '"]', {
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_location_link', lbl: address.city + ' ' + address.state_acronym, project: project() })
          }, [m('span.fa.fa-map-marker'), ' ' + address.city + ', ' + address.state_acronym]) : '', m('a.btn.btn-inline.btn-small.btn-transparent.link-hidden-light[href="/pt/explore#by_category_id/' + project().category_id + '"]', {
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_category_link', lbl: project().category_name, project: project() })
          }, [m('span.fa.fa-tag'), ' ', project().category_name]), m('button#share-box.btn.btn-small.btn-terciary.btn-inline', {
              onclick: ctrl.displayShareBox.toggle
          }, 'Compartilhar'), ctrl.displayShareBox() ? m.component(projectShareBox, {
              project: project,
              displayShareBox: ctrl.displayShareBox
          }) : ''])]);
      }
  };

  var projectMode = {
      view: function view(ctrl, args) {
          var project = args.project(),
              mode = project.mode,
              modeImgSrc = mode === 'aon' ? '/assets/aon-badge.png' : '/assets/flex-badge.png',
              modeTitle = mode === 'aon' ? 'Campanha Tudo-ou-nada ' : 'Campanha Flexível ',
              goal = _$1.isNull(project.goal) ? 'não definida' : h.formatNumber(project.goal),
              buildTooltip = function buildTooltip(el) {
              return m.component(tooltip, {
                  el: el,
                  text: mode === 'aon' ? 'Somente receberá os recursos se atingir ou ultrapassar a meta até o dia ' + h.momentify(project.zone_expires_at, 'DD/MM/YYYY') + '.' : 'O realizador receberá todos os recursos quando encerrar a campanha, mesmo que não tenha atingido esta meta.',
                  width: 280
              });
          };

          return m('#' + mode + '.w-row', [m('.w-col.w-col-2.w-col-small-2.w-col-tiny-2', [!_$1.isEmpty(project) ? m('img[src="' + modeImgSrc + '"][width=\'30\']') : '']), m('.w-col.w-col-10.w-col-small-10.w-col-tiny-10', [m('.fontsize-base.fontweight-semibold', 'Meta R$ ' + h.selfOrEmpty(goal, '--')), m('.w-inline-block.fontsize-smallest._w-inline-block', [!_$1.isEmpty(project) ? modeTitle : '', buildTooltip('span.w-inline-block.tooltip-wrapper.fa.fa-question-circle.fontcolor-secondary')])])]);
      }
  };

  var popNotification = {
      controller: function controller() {
          return {
              displayNotification: h.toggleProp(true, false)
          };
      },
      view: function view(ctrl, args) {
          return ctrl.displayNotification() ? m('.flash.w-clearfix.card.card-notification.u-radius.zindex-20', [m('img.icon-close[src="/assets/catarse_bootstrap/x.png"][width="12"][alt="fechar"]', {
              onclick: ctrl.displayNotification.toggle
          }), m('.fontsize-small', args.message)]) : m('span');
      }
  };

  var projectReminder = {
      controller: function controller(args) {
          var l = m.prop(false);
          var project = args.project,
              filterVM = postgrest.filtersVM({
              project_id: 'eq'
          }),
              storeReminderName = 'remind_' + project().id,
              popNotification = m.prop(false),
              submitReminder = function submitReminder() {
              if (!h.getUser()) {
                  h.storeAction(storeReminderName, submitReminder);
                  return h.navigateToDevise();
              }
              var loaderOpts = project().in_reminder ? models.projectReminder.deleteOptions(filterVM.parameters()) : models.projectReminder.postOptions({
                  project_id: project().id
              });
              l = postgrest.loaderWithToken(loaderOpts);

              l.load().then(function () {
                  project().in_reminder = !project().in_reminder;

                  if (project().in_reminder) {
                      popNotification(true);
                      setTimeout(function () {
                          popNotification(false);
                          m.redraw();
                      }, 5000);
                  } else {
                      popNotification(false);
                  }
              });
          };

          h.callStoredAction(storeReminderName, submitReminder);
          filterVM.project_id(project().id);

          return {
              l: l,
              submitReminder: submitReminder,
              popNotification: popNotification
          };
      },
      view: function view(ctrl, args) {
          var mainClass = args.type === 'button' ? '' : '.u-text-center.u-marginbottom-30',
              buttonClass = args.type === 'button' ? 'w-button btn btn-terciary btn-no-border' : 'btn-link link-hidden fontsize-small',
              hideTextOnMobile = args.hideTextOnMobile || false,
              project = args.project;

          return m('#project-reminder' + mainClass, [m('button[class="' + buttonClass + ' ' + (project().in_reminder ? 'link-hidden-success' : 'fontcolor-secondary') + ' fontweight-semibold"]', {
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_floatingreminder_click', project: project() }, ctrl.submitReminder)
          }, [ctrl.l() ? 'aguarde ...' : m('span.fa.fa-clock-o', [m('span' + (hideTextOnMobile ? '.w-hidden-medium' : ''), project().in_reminder ? ' Lembrete ativo' : ' Lembrar-me')])]), ctrl.popNotification() ? m.component(popNotification, {
              message: 'Ok! Vamos te mandar um lembrete por e-mail 48 horas antes do fim da campanha'
          }) : '']);
      }
  };

  var ownerMessageContent = {
      controller: function controller(args) {
          var l = m.prop(false),
              sendSuccess = m.prop(false),
              submitDisabled = m.prop(false),

          //sets default values when user is not logged in
          user = h.getUser() || { name: '', email: '' },
              from_name = m.prop(user.name),
              from_email = m.prop(user.email),
              content = m.prop('');

          var sendMessage = function sendMessage() {
              if (l()) {
                  return false;
              }
              submitDisabled(true);

              var loaderOpts = models.directMessage.postOptions({
                  from_name: from_name(),
                  from_email: from_email(),
                  user_id: h.getUser().user_id,
                  content: content(),
                  project_id: h.getCurrentProject().project_id,
                  to_user_id: h.getCurrentProject().project_user_id
              });

              l = postgrest.loaderWithToken(loaderOpts);

              l.load().then(sendSuccess(true));

              submitDisabled(false);
              return false;
          };

          return {
              sendMessage: sendMessage,
              submitDisabled: submitDisabled,
              sendSuccess: sendSuccess,
              userDetails: args,
              from_name: from_name,
              from_email: from_email,
              content: content,
              l: l
          };
      },
      view: function view(ctrl, args) {
          var successMessage = m('.modal-dialog-content.u-text-center', [m('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m('p.fontsize-large', 'Sua mensagem foi enviada com sucesso para ' + _$1.first(ctrl.userDetails()).name + '. Você vai receber uma cópia no seu email e pode seguir a conversa por lá!')]),
              contactForm = [m('.modal-dialog-content', [m('.w-form', [m('form', { onsubmit: h.validate().submit([{
                  prop: ctrl.from_name,
                  rule: 'text'
              }, {
                  prop: ctrl.from_email,
                  rule: 'email'
              }, {
                  prop: ctrl.content,
                  rule: 'text'
              }], ctrl.sendMessage) }, [m('.w-row', [m('.w-col.w-col-6.w-sub-col', [m('label.fontsize-smaller', 'Seu nome'), m('input.w-input.text-field[value=\'' + ctrl.from_name() + '\'][type=\'text\'][required=\'required\']', {
              onchange: m.withAttr('value', ctrl.from_name),
              class: h.validate().hasError(ctrl.from_name) ? 'error' : ''
          })]), m('.w-col.w-col-6', [m('label.fontsize-smaller', 'Seu email'), m('input.w-input.text-field[value=\'' + ctrl.from_email() + '\'][type=\'text\'][required=\'required\']', {
              onchange: m.withAttr('value', ctrl.from_email),
              class: h.validate().hasError(ctrl.from_email) ? 'error' : ''
          })])]), m('label', 'Mensagem'), m('textarea.w-input.text-field.height-small[required=\'required\']', {
              onchange: m.withAttr('value', ctrl.content),
              class: h.validate().hasError(ctrl.content) ? 'error' : ''
          }), m('.u-marginbottom-10.fontsize-smallest.fontcolor-terciary', 'Você receberá uma cópia desta mensagem em seu email.'), m('.w-row', h.validationErrors().length ? _$1.map(h.validationErrors(), function (errors) {
              return m('span.fontsize-smallest.text-error', [m('span.fa.fa-exclamation-triangle'), ' ' + errors.message, m('br')]);
          }) : ''), m('.modal-dialog-nav-bottom', m('.w-row', m('.w-col.w-col-6.w-col-push-3', !ctrl.l() ? m('input.w-button.btn.btn-large[type="submit"][value="Enviar mensagem"]', { disabled: ctrl.submitDisabled() }) : h.loader())))])])])];

          return m('div', [m('.modal-dialog-header', m('.fontsize-large.u-text-center', 'Enviar mensagem')), ctrl.sendSuccess() ? successMessage : contactForm]);
      }
  };

  var projectUserCard = {
      controller: function controller(args) {
          return { displayModal: h.toggleProp(false, true) };
      },
      view: function view(ctrl, args) {
          var project = args.project;
          var contactModalC = [ownerMessageContent, args.userDetails];

          return m('#user-card', _$1.map(args.userDetails(), function (userDetail) {
              return m('.u-marginbottom-30.u-text-center-small-only', [ctrl.displayModal() ? m.component(modalBox, {
                  displayModal: ctrl.displayModal,
                  content: contactModalC
              }) : '', m('.w-row', [m('.w-col.w-col-4', [m('img.thumb.u-marginbottom-30.u-round[width="100"][itemprop="image"][src="' + userDetail.profile_img_thumbnail + '"]')]), m('.w-col.w-col-8', [m('.fontsize-small.link-hidden.fontweight-semibold.u-marginbottom-10.lineheight-tight[itemprop="name"]', [m('a.link-hidden[href="/users/' + userDetail.id + '"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_link', lbl: userDetail.id, project: project() }) }, userDetail.name)]), m('.fontsize-smallest', [h.pluralize(userDetail.total_published_projects, ' criado', ' criados'), m.trust('&nbsp;&nbsp;|&nbsp;&nbsp;'), h.pluralize(userDetail.total_contributed_projects, ' apoiado', ' apoiados')]), m('ul.w-hidden-tiny.w-hidden-small.w-list-unstyled.fontsize-smaller.fontweight-semibold.u-margintop-20.u-marginbottom-20', [!_$1.isEmpty(userDetail.facebook_link) ? m('li', [m('a.link-hidden[itemprop="url"][href="' + userDetail.facebook_link + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_fb', lbl: userDetail.facebook_link, project: project() }) }, 'Perfil no Facebook')]) : '', !_$1.isEmpty(userDetail.twitter_username) ? m('li', [m('a.link-hidden[itemprop="url"][href="https://twitter.com/' + userDetail.twitter_username + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_twitter', lbl: userDetail.twitter_username, project: project() }) }, 'Perfil no Twitter')]) : '', _$1.map(userDetail.links, function (link) {
                  var parsedLink = h.parseUrl(link);

                  return !_$1.isEmpty(parsedLink.hostname) ? m('li', [m('a.link-hidden[itemprop="url"][href="' + link + '"][target="_blank"]', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_otherlinks', lbl: link, project: project() }) }, parsedLink.hostname)]) : '';
              })]), !_$1.isEmpty(userDetail) ? [m('a.w-button.btn.btn-terciary.btn-small.btn-inline[href=\'javascript:void(0);\']', { onclick: h.analytics.event({ cat: 'project_view', act: 'project_creator_sendmsg', lbl: userDetail.id, project: project() }, ctrl.displayModal.toggle) }, 'Enviar mensagem')] : '', args.project().is_admin_role ? m('p', userDetail.email) : ''])])]);
          }));
      }
  };

  var I18nScope$5 = _$1.partial(h.i18nScope, 'projects.project_sidebar');

  var projectSidebar = {
      controller: function controller(args) {
          var project = args.project,
              animateProgress = function animateProgress(el, isInitialized) {
              if (!isInitialized) {
                  (function () {
                      var animation = void 0,
                          progress = 0,
                          pledged = 0,
                          contributors = 0,
                          pledgedIncrement = project().pledged / project().progress,
                          contributorsIncrement = project().total_contributors / project().progress;

                      var progressBar = document.getElementById('progressBar'),
                          pledgedEl = document.getElementById('pledged'),
                          contributorsEl = document.getElementById('contributors'),
                          animate = function animate() {
                          animation = setInterval(incrementProgress, 28);
                      },
                          incrementProgress = function incrementProgress() {
                          if (progress <= parseInt(project().progress)) {
                              progressBar.style.width = progress + '%';
                              pledgedEl.innerText = 'R$ ' + h.formatNumber(pledged);
                              contributorsEl.innerText = parseInt(contributors) + ' pessoas';
                              el.innerText = progress + '%';
                              pledged = pledged + pledgedIncrement;
                              contributors = contributors + contributorsIncrement;
                              progress = progress + 1;
                          } else {
                              clearInterval(animation);
                          }
                      };

                      setTimeout(function () {
                          animate();
                      }, 1800);
                  })();
              }
          };

          return {
              animateProgress: animateProgress
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              elapsed = project().elapsed_time,
              remaining = project().remaining_time,
              displayCardClass = function displayCardClass() {
              var states = {
                  'waiting_funds': 'card-waiting',
                  'successful': 'card-success',
                  'failed': 'card-error',
                  'draft': 'card-dark',
                  'in_analysis': 'card-dark',
                  'approved': 'card-dark'
              };

              return states[project().state] ? 'card u-radius zindex-10 ' + states[project().state] : '';
          },
              displayStatusText = function displayStatusText() {
              var states = {
                  'approved': I18n$1.t('display_status.approved', I18nScope$5()),
                  'online': h.existy(project().zone_expires_at) ? I18n$1.t('display_status.online', I18nScope$5({ date: h.momentify(project().zone_expires_at) })) : '',
                  'failed': I18n$1.t('display_status.failed', I18nScope$5({ date: h.momentify(project().zone_expires_at), goal: project().goal })),
                  'rejected': I18n$1.t('display_status.rejected', I18nScope$5()),
                  'in_analysis': I18n$1.t('display_status.in_analysis', I18nScope$5()),
                  'successful': I18n$1.t('display_status.successful', I18nScope$5({ date: h.momentify(project().zone_expires_at) })),
                  'waiting_funds': I18n$1.t('display_status.waiting_funds', I18nScope$5()),
                  'draft': I18n$1.t('display_status.draft', I18nScope$5())
              };

              return states[project().state];
          };

          return m('#project-sidebar.aside', [m('.project-stats', [m('.project-stats-inner', [m('.project-stats-info', [m('.u-marginbottom-20', [m('#pledged.fontsize-largest.fontweight-semibold.u-text-center-small-only', 'R$ ' + (project().pledged ? h.formatNumber(project().pledged) : '0')), m('.fontsize-small.u-text-center-small-only', [I18n$1.t('contributors_call', I18nScope$5()), m('span#contributors.fontweight-semibold', I18n$1.t('contributors_count', I18nScope$5({ count: project().total_contributors }))), !project().expires_at && elapsed ? ' em ' + I18n$1.t('datetime.distance_in_words.x_' + elapsed.unit, { count: elapsed.total }, I18nScope$5()) : ''])]), m('.meter', [m('#progressBar.meter-fill', {
              style: {
                  width: project().progress + '%'
              }
          })]), m('.w-row.u-margintop-10', [m('.w-col.w-col-5.w-col-small-6.w-col-tiny-6', [m('.fontsize-small.fontweight-semibold.lineheight-tighter', (project().progress ? parseInt(project().progress) : '0') + '%')]), m('.w-col.w-col-7.w-col-small-6.w-col-tiny-6.w-clearfix', [m('.u-right.fontsize-small.lineheight-tighter', remaining && remaining.total ? [m('span.fontweight-semibold', remaining.total), I18n$1.t('remaining_time.' + remaining.unit, I18nScope$5({ count: remaining.total }))] : '')])])]), m('.w-row', [m.component(projectMode, {
              project: project
          })])]), project().open_for_contributions ? m('a#contribute_project_form.btn.btn-large.u-marginbottom-20[href="/projects/' + project().id + '/contributions/new"]', {
              onclick: h.analytics.event({ cat: 'contribution_create', act: 'contribution_button_click', project: project() })
          }, I18n$1.t('submit', I18nScope$5())) : '', project().open_for_contributions ? m.component(projectReminder, {
              project: project,
              type: 'link'
          }) : '', m('div[class="fontsize-smaller u-marginbottom-30 ' + displayCardClass() + '"]', displayStatusText())]), m('.user-c', m.component(projectUserCard, {
              userDetails: args.userDetails,
              project: project
          }))]);
      }
  };

  var projectHeader = {
      view: function view(ctrl, args) {
          var project = args.project;

          if (_$1.isUndefined(project())) {
              project = m.prop({});
          }

          return m('#project-header', [m('.w-section.section-product.' + project().mode), m('.w-section.page-header.u-text-center', [m('.w-container', [m('h1.fontsize-larger.fontweight-semibold.project-name[itemprop="name"]', h.selfOrEmpty(project().name)), m('h2.fontsize-base.lineheight-looser[itemprop="author"]', project().user ? ['por ', project().user.name] : '')])]), m('.w-section.project-main', [m('.w-container', [m('.w-row.project-main', [m('.w-col.w-col-8.project-highlight', m.component(projectHighlight, {
              project: project
          })), m('.w-col.w-col-4', m.component(projectSidebar, {
              project: project,
              userDetails: args.userDetails
          }))])])])]);
      }
  };

  var projectTabs = {
      controller: function controller(args) {
          var isFixed = m.prop(false),
              originalPosition = m.prop(-1);

          var fixOnScroll = function fixOnScroll(el) {
              return function () {
                  var viewportOffset = el.getBoundingClientRect();

                  if (window.scrollY <= originalPosition()) {
                      originalPosition(-1);
                      isFixed(false);
                      m.redraw();
                  }

                  if (viewportOffset.top < 0 || window.scrollY > originalPosition() && originalPosition() > 0) {
                      if (!isFixed()) {
                          originalPosition(window.scrollY);
                          isFixed(true);
                          m.redraw();
                      }
                  }
              };
          };

          var navDisplay = function navDisplay(el, isInitialized) {
              if (!isInitialized) {
                  var fixNavBar = fixOnScroll(el);
                  window.addEventListener('scroll', fixNavBar);
              }
          };

          return {
              navDisplay: navDisplay,
              isFixed: isFixed
          };
      },
      view: function view(ctrl, args) {
          var project = args.project,
              rewards = args.rewardDetails;

          var mainClass = !ctrl.isFixed() || project().is_owner_or_admin ? '.w-section.project-nav' : '.w-section.project-nav.project-nav-fixed';

          return m('nav-wrapper', project() ? [m(mainClass, {
              config: ctrl.navDisplay
          }, [m('.w-container', [m('.w-row', [m('.w-col.w-col-8', [!_.isEmpty(rewards()) ? m('a[id="rewards-link"][class="w-hidden-main w-hidden-medium dashboard-nav-link mf ' + (h.hashMatch('#rewards') ? 'selected' : '') + '"][href="#rewards"]', {
              style: 'float: left;',
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_rewards_view', project: project() })
          }, 'Recompensas') : m('a[id="rewards-link"][class="w-hidden-main w-hidden-medium dashboard-nav-link mf ' + (h.hashMatch('#contribution_suggestions') ? 'selected' : '') + '"][href="#contribution_suggestions"]', {
              style: 'float: left;',
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_contribsuggestions_view', project: project() })
          }, 'Valores Sugeridos'), m('a[id="about-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#about') || h.hashMatch('') ? 'selected' : '') + ' "][href="#about"]', {
              style: 'float: left;',
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_about_view', project: project() })
          }, 'Sobre'), m('a[id="posts-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#posts') ? 'selected' : '') + '"][href="#posts"]', {
              style: 'float: left;',
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_posts_view', project: project() })
          }, ['Novidades ', m('span.badge', project() ? project().posts_count : '')]), m('a[id="contributions-link"][class="w-hidden-small w-hidden-tiny dashboard-nav-link mf ' + (h.hashMatch('#contributions') ? 'selected' : '') + '"][href="#contributions"]', {
              style: 'float: left;',
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_contributions_view', project: project() })
          }, ['Apoios ', m('span.badge.w-hidden-small.w-hidden-tiny', project() ? project().total_contributions : '-')]), m('a[id="comments-link"][class="dashboard-nav-link mf ' + (h.hashMatch('#comments') ? 'selected' : '') + '"][href="#comments"]', {
              style: 'float: left;',
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_comments_view', project: project() })
          }, ['Comentários ', project() ? m('fb:comments-count[href="http://www.catarse.me/' + project().permalink + '"][class="badge project-fb-comment w-hidden-small w-hidden-tiny"][style="display: inline"]', m.trust('&nbsp;')) : '-'])]), project() ? m('.w-col.w-col-4.w-hidden-small.w-hidden-tiny', project().open_for_contributions ? [m('.w-row.project-nav-back-button', [m('.w-col.w-col-6.w-col-medium-8', [m('a.w-button.btn[href="/projects/' + project().id + '/contributions/new"]', {
              onclick: h.analytics.event({ cat: 'contribution_create', act: 'contribution_floatingbtn_click', project: project() })
          }, 'Apoiar ‍este projeto')]), m('.w-col.w-col-6.w-col-medium-4', {
              onclick: h.analytics.event({ cat: 'project_view', act: 'project_floatingreminder_click', project: project() })
          }, [m.component(projectReminder, { project: project, type: 'button', hideTextOnMobile: true })])])] : '') : ''])])]), ctrl.isFixed() && !project().is_owner_or_admin ? m('.w-section.project-nav') : ''] : '');
      }
  };

  var projectRewardList = {
      view: function view(ctrl, args) {
          //FIXME: MISSING ADJUSTS
          // - add draft admin modifications
          var project = args.project;
          return m('#rewards.u-marginbottom-30', _$1.map(args.rewardDetails(), function (reward) {
              var contributionUrlWithReward = '/projects/' + project().id + '/contributions/new?reward_id=' + reward.id;

              return m('a[class="' + (h.rewardSouldOut(reward) ? 'card-gone' : 'card-reward ' + (project().open_for_contributions ? 'clickable' : '')) + ' card card-secondary u-marginbottom-10"][href="' + (project().open_for_contributions && !h.rewardSouldOut(reward) ? contributionUrlWithReward : 'js:void(0);') + '"]', {
                  onclick: h.analytics.event({ cat: 'contribution_create', act: 'contribution_reward_click', lbl: reward.minimum_value, project: project(), extraData: { reward_id: reward.id, reward_value: reward.minimum_value } })
              }, [m('.u-marginbottom-20', [m('.fontsize-base.fontweight-semibold', 'Para R$ ' + h.formatNumber(reward.minimum_value) + ' ou mais'), m('.fontsize-smaller.fontweight-semibold', h.pluralize(reward.paid_count, ' apoio', ' apoios')), reward.maximum_contributions > 0 ? [reward.waiting_payment_count > 0 ? m('.maximum_contributions.in_time_to_confirm.clearfix', [m('.pending.fontsize-smallest.fontcolor-secondary', h.pluralize(reward.waiting_payment_count, ' apoio em prazo de confirmação', ' apoios em prazo de confirmação.'))]) : '', h.rewardSouldOut(reward) ? m('.u-margintop-10', [m('span.badge.badge-gone.fontsize-smaller', 'Esgotada')]) : m('.u-margintop-10', [m('span.badge.badge-attention.fontsize-smaller', [m('span.fontweight-bold', 'Limitada'), ' (' + h.rewardRemaning(reward) + ' de ' + reward.maximum_contributions + ' disponíveis)'])])] : '']), m('.fontsize-smaller.u-margintop-20', m.trust(h.simpleFormat(h.strip(reward.description)))), !_$1.isEmpty(reward.deliver_at) ? m('.fontsize-smaller', [m('b', 'Estimativa de Entrega: '), h.momentify(reward.deliver_at, 'MMM/YYYY')]) : '', project().open_for_contributions && !h.rewardSouldOut(reward) ? m('.project-reward-box-hover', [m('.project-reward-box-select-text.u-text-center', 'Selecione essa recompensa')]) : '']);
          }));
      }
  };

  var projectSuggestedContributions = {
      view: function view(ctrl, args) {
          var project = args.project();
          var suggestionUrl = function suggestionUrl(amount) {
              return '/projects/' + project.project_id + '/contributions/new?amount=' + amount;
          },
              suggestedValues = [10, 25, 50, 100];

          return m('#suggestions', _$1.map(suggestedValues, function (amount) {
              return m('a[href="' + suggestionUrl(amount) + '"].card-reward.card-big.card-secondary.u-marginbottom-20', [m('.fontsize-larger', 'R$ ' + amount)]);
          }));
      }
  };

  var projectContributions = {
      controller: function controller(args) {
          var listVM = postgrest.paginationVM(models.projectContribution),
              filterVM = postgrest.filtersVM({
              project_id: 'eq',
              waiting_payment: 'eq'
          }),
              toggleWaiting = function toggleWaiting() {
              var waiting = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

              return function () {
                  filterVM.waiting_payment(waiting);
                  listVM.firstPage(filterVM.parameters());
              };
          };

          filterVM.project_id(args.project().id).waiting_payment(false);

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }

          return {
              listVM: listVM,
              filterVM: filterVM,
              toggleWaiting: toggleWaiting
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM;
          return m('#project_contributions.content.w-col.w-col-12', [args.project().is_owner_or_admin ? m('.w-row.u-marginbottom-20', [m('.w-col.w-col-1', [m('input[checked="checked"][id="contribution_state_available_to_count"][name="waiting_payment"][type="radio"][value="available_to_count"]', {
              onclick: ctrl.toggleWaiting()
          })]), m('.w-col.w-col-5', [m('label[for="contribution_state_available_to_count"]', 'Confirmados')]), m('.w-col.w-col-1', [m('input[id="contribution_state_waiting_confirmation"][type="radio"][name="waiting_payment"][value="waiting_confirmation"]', {
              onclick: ctrl.toggleWaiting(true)
          })]), m('.w-col.w-col-5', [m('label[for="contribution_state_waiting_confirmation"]', 'Pendentes')])]) : '', m('.project-contributions', _$1.map(list.collection(), function (contribution) {
              return m('.w-clearfix', [m('.w-row.u-marginbottom-20', [m('.w-col.w-col-1', [m('a[href="/users/' + contribution.user_id + '"]', {
                  onclick: h.analytics.event({ cat: 'project_view', act: 'project_backer_link', lbl: contribution.user_id, project: args.project() })
              }, [m('.thumb.u-left.u-round[style="background-image: url(' + (!_$1.isEmpty(contribution.profile_img_thumbnail) ? contribution.profile_img_thumbnail : '/assets/catarse_bootstrap/user.jpg') + '); background-size: contain;"]')])]), m('.w-col.w-col-11', [m('.fontsize-base.fontweight-semibold', [m('a.link-hidden-dark[href="/users/' + contribution.user_id + '"]', {
                  onclick: h.analytics.event({ cat: 'project_view', act: 'project_backer_link', lbl: contribution.user_id, project: args.project() })
              }, contribution.user_name), contribution.is_owner_or_admin ? m('.fontsize-smaller', ['R$ ' + h.formatNumber(contribution.value, 2, 3), contribution.anonymous ? [m.trust('&nbsp;-&nbsp;'), m('strong', 'Apoiador anônimo')] : '']) : '', m('.fontsize-smaller', h.momentify(contribution.created_at, 'DD/MM/YYYY, HH:mm') + 'h'), m('.fontsize-smaller', contribution.total_contributed_projects > 1 ? 'Apoiou este e mais outros ' + contribution.total_contributed_projects + ' projetos' : 'Apoiou somente este projeto até agora')])])]), m('.divider.u-marginbottom-20')]);
          })), m('.w-row', [m('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])]);
      }
  };

  var projectReport = {
    controller: function controller(args) {
      var displayForm = h.toggleProp(false, true),
          sendSuccess = m.prop(false),
          submitDisabled = m.prop(false),
          user = h.getUser() || { name: '', email: '' },
          email = m.prop(user.email),
          details = m.prop(''),
          reason = m.prop(''),
          l = m.prop(false),
          sendReport = function sendReport() {
        submitDisabled(true);
        var loaderOpts = models.projectReport.postOptions({
          email: email(),
          details: details(),
          reason: reason(),
          project_id: h.getCurrentProject().project_id
        });
        l = postgrest$1.loaderWithToken(loaderOpts);

        l.load().then(sendSuccess(true));
        submitDisabled(false);
        return false;
      };

      return {
        displayForm: displayForm,
        sendSuccess: sendSuccess,
        submitDisabled: submitDisabled,
        sendReport: sendReport,
        user: user,
        email: email,
        details: details,
        reason: reason
      };
    },
    view: function view(ctrl, args) {
      var user = ctrl.user;
      return m('.card.card-terciary.u-radius', [m('.fontsize-small.u-marginbottom-20', ['Este projeto desrespeita', m.trust('&nbsp;'), m('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638\'][target=\'_blank\']', 'nossas regras? ')]), ctrl.sendSuccess() ? m('.w-form', m('p', 'Obrigado! A sua denúncia foi recebida.')) : [m('.a.w-button.btn.btn-medium.btn-terciary.btn-inline[href=\'javascript:void(0);\']', { onclick: ctrl.displayForm.toggle }, 'Denunciar este projeto'), ctrl.displayForm() ? m('#report-form.u-margintop-30', m('.w-form', m('form', { onsubmit: ctrl.sendReport }, [m('.fontsize-small.fontweight-semibold.u-marginbottom-10', 'Por que você está denunciando este projeto?'), m('select.w-select.text-field.positive[required=\'required\']', { onchange: m.withAttr('value', ctrl.reason) }, [m('option[value=\'\']', 'Selecione um motivo'), m('option[value=\'Violação de propriedade intelectual\']', 'Violação de propriedade intelectual'), m('option[value=\'Calúnia, injúria, difamação ou discriminação\']', 'Calúnia, injúria, difamação ou discriminação'), m('option[value=\'Escopo de projeto proibido\']', 'Escopo de projeto proibido'), m('option[value=\'Recompensas proibidas\']', 'Recompensas proibidas'), m('option[value=\'Cenas de sexo explícitas e gratuitas\']', 'Cenas de sexo explícitas e gratuitas'), m('option[value=\'Abuso de SPAM\']', 'Abuso de SPAM'), m('option[value=\'Outros\']', 'Outros')]), m('textarea.w-input.text-field.positive.u-marginbottom-30', { placeholder: 'Por favor, dê mais detalhes que nos ajudem a identificar o problema', onchange: m.withAttr('value', ctrl.details) }), m('.fontsize-small.fontweight-semibold.u-marginbottom-10', 'Seu email'), m('input.w-input.text-field.positive.u-marginbottom-30[required=\'required\'][type=\'text\'][value="' + ctrl.email() + '"]', { onchange: m.withAttr('value', ctrl.email) }), m('input.w-button.btn.btn-medium.btn-inline.btn-dark[type=\'submit\'][value=\'Enviar denúncia\']', { disabled: ctrl.submitDisabled() })]))) : '']]);
    }
  };

  var projectAbout = {
      view: function view(ctrl, args) {
          var project = args.project() || {},
              onlineDays = function onlineDays() {
              var diff = moment(project.zone_online_date).diff(moment(project.zone_expires_at)),
                  duration = moment.duration(diff);

              return -Math.ceil(duration.asDays());
          };
          var fundingPeriod = function fundingPeriod() {
              return project.is_published && h.existy(project.zone_expires_at) ? m('.funding-period', [m('.fontsize-small.fontweight-semibold.u-text-center-small-only', 'Período de campanha'), m('.fontsize-small.u-text-center-small-only', h.momentify(project.zone_online_date) + ' - ' + h.momentify(project.zone_expires_at) + ' (' + onlineDays() + ' dias)')]) : '';
          };

          return m('#project-about', [m('.project-about.w-col.w-col-8', {
              config: h.UIHelper()
          }, [m('p.fontsize-base', [m('strong', 'O projeto')]), m('.fontsize-base[itemprop="about"]', m.trust(h.selfOrEmpty(project.about_html, '...'))), project.budget ? [m('p.fontsize-base.fontweight-semibold', 'Orçamento'), m('p.fontsize-base', m.trust(project.budget))] : '', m.component(projectReport)]), m('.w-col.w-col-4.w-hidden-small.w-hidden-tiny', !_.isEmpty(args.rewardDetails()) ? [m('.fontsize-base.fontweight-semibold.u-marginbottom-30', 'Recompensas'), m.component(projectRewardList, {
              project: args.project,
              rewardDetails: args.rewardDetails
          }), fundingPeriod()] : [m('.fontsize-base.fontweight-semibold.u-marginbottom-30', 'Sugestões de apoio'), m.component(projectSuggestedContributions, { project: args.project }), fundingPeriod()])]);
      }
  };

  var projectComments = {
      controller: function controller() {
          var loadComments = function loadComments(el, isInitialized) {
              return function (el, isInitialized) {
                  if (isInitialized) {
                      return;
                  }
                  h.fbParse();
              };
          };

          return { loadComments: loadComments };
      },
      view: function view(ctrl, args) {
          var project = args.project();
          return m('.w-row', [m('.w-col.w-col-7', m('.fb-comments[data-href="http://www.catarse.me/' + project.permalink + '"][data-num-posts=50][data-width="610"]', { config: ctrl.loadComments() })), m('.w-col.w-col-5', m.component(projectReport))]);
      }
  };

  var projectPosts = {
      controller: function controller(args) {
          var listVM = postgrest$1.paginationVM(models.projectPostDetail),
              filterVM = postgrest$1.filtersVM({
              project_id: 'eq'
          });

          filterVM.project_id(args.project().id);

          if (!listVM.collection().length) {
              listVM.firstPage(filterVM.parameters());
          }

          return {
              listVM: listVM,
              filterVM: filterVM
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.listVM,
              project = args.project() || {};

          return m('.project-posts.w-section', [m('.w-container.u-margintop-20', [project.is_owner_or_admin ? [!list.isLoading() ? _$1.isEmpty(list.collection()) ? m('.w-hidden-small.w-hidden-tiny', [m('.fontsize-base.u-marginbottom-30.u-margintop-20', 'Toda novidade publicada no Catarse é enviada diretamente para o email de quem já apoiou seu projeto e também fica disponível para visualização no site. Você pode optar por deixá-la pública, ou visível somente para seus apoiadores aqui nesta aba.')]) : '' : '', m('.w-row.u-marginbottom-20', [m('.w-col.w-col-4'), m('.w-col.w-col-4', [m('a.btn.btn-edit.btn-small[href=\'/pt/projects/' + project.id + '/edit#posts\']', 'Escrever novidade')]), m('.w-col.w-col-4')])] : '', _$1.map(list.collection(), function (post) {
              return m('.w-row', [m('.w-col.w-col-1'), m('.w-col.w-col-10', [m('.post', [m('.u-marginbottom-60 .w-clearfix', [m('.fontsize-small.fontcolor-secondary.u-text-center', h.momentify(post.created_at)), m('.fontweight-semibold.fontsize-larger.u-text-center.u-marginbottom-30', post.title), !_$1.isEmpty(post.comment_html) ? m('.fontsize-base', m.trust(post.comment_html)) : m('.fontsize-base', 'Post exclusivo para apoiadores.')]), m('.divider.u-marginbottom-60')])]), m('.w-col.w-col-1')]);
          }), m('.w-row', [m('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? 'Nenhuma novidade.' : m('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])]);
      }
  };

  var projectMain = {
      controller: function controller(args) {
          var project = args.project,
              displayTabContent = function displayTabContent() {
              var hash = window.location.hash,
                  c_opts = {
                  project: project
              },
                  tabs = {
                  '#rewards': m('.w-col.w-col-12', m.component(projectRewardList, _$1.extend({}, {
                      rewardDetails: args.rewardDetails
                  }, c_opts))),
                  '#contribution_suggestions': m.component(projectSuggestedContributions, c_opts),
                  '#contributions': m.component(projectContributions, c_opts),
                  '#about': m.component(projectAbout, _$1.extend({}, {
                      rewardDetails: args.rewardDetails
                  }, c_opts)),
                  '#comments': m.component(projectComments, c_opts),
                  '#posts': m.component(projectPosts, c_opts)
              };

              if (_$1.isEmpty(hash) || hash === '#_=_' || hash === '#preview') {
                  return tabs['#about'];
              }

              return tabs[hash];
          };

          h.redrawHashChange();

          return {
              displayTabContent: displayTabContent
          };
      },
      view: function view(ctrl, args) {
          return m('section.section[itemtype="http://schema.org/CreativeWork"]', [m('.w-container', [m('.w-row', args.project() ? ctrl.displayTabContent() : '')])]);
      }
  };

  var projectsShow = {
      controller: function controller(args) {
          h.analytics.windowScroll({ cat: 'project_view', act: 'project_page_scroll' });
          return projectVM(args.project_id, args.project_user_id);
      },
      view: function view(ctrl) {
          var project = ctrl.projectDetails;

          return m('.project-show', [m.component(projectHeader, {
              project: project,
              userDetails: ctrl.userDetails
          }), m.component(projectTabs, {
              project: project,
              rewardDetails: ctrl.rewardDetails
          }), m.component(projectMain, {
              project: project,
              rewardDetails: ctrl.rewardDetails
          }), project() && project().is_owner_or_admin ? m.component(projectDashboardMenu, {
              project: project
          }) : '']);
      }
  };

  var I18nScope$6 = _$1.partial(h.i18nScope, 'projects.publish');

  var publish = {
    controller: function controller(args) {
      var filtersVM = postgrest.filtersVM({
        project_id: 'eq'
      }),
          projectAccount = m.prop([]),
          projectDetails = m.prop([]),
          acceptTerm = m.prop([true, true, true, true, true, true, true, true, true]),
          flexAcceptTerm = m.prop([true, true, true, true, true, true, true, true, true]),
          showNextTerm = function showNextTerm(index, acceptTerms) {
        var terms = acceptTerms();
        if (terms[index]) {
          terms[index] = false;
          acceptTerms(terms);
          var nextTerm = document.getElementsByClassName('w-hidden publish-rules');
          if (nextTerm[0] !== undefined) {
            nextTerm[0].classList.remove('w-hidden');
          }
        }
        //show publish button after accepting all rules
        if (index === terms.length - 1) {
          document.getElementsByClassName('publish-btn-section')[0].classList.remove('w-hidden');
        }
      },
          loader = postgrest.loaderWithToken;

      filtersVM.project_id(args.root.getAttribute('data-id'));

      var l = loader(models.projectDetail.getRowOptions(filtersVM.parameters())),
          accountL = loader(models.projectAccount.getRowOptions(filtersVM.parameters()));
      l.load().then(projectDetails);
      accountL.load().then(projectAccount);

      var expiresAt = function expiresAt() {
        var project = _$1.first(projectDetails());
        return moment().add(project.online_days, 'days');
      };

      return {
        l: l,
        accountL: accountL,
        expiresAt: expiresAt,
        filtersVM: filtersVM,
        acceptTerm: acceptTerm,
        flexAcceptTerm: flexAcceptTerm,
        showNextTerm: showNextTerm,
        projectAccount: projectAccount,
        projectDetails: projectDetails
      };
    },
    view: function view(ctrl, args) {
      var project = _$1.first(ctrl.projectDetails()),
          account = _$1.first(ctrl.projectAccount()),
          flexTerms = function flexTerms(project) {
        return [m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '1/9'), ' ', m('span.fontweight-semibold', 'Regras da modalidade FLEX')]), m('div', 'Você escolheu a campanha flexível. Dessa maneira, você irá receber todos os recursos arrecadados junto aos apoiadores ao final do prazo da campanha (descontando a taxa do Catarse) e deverá cumprir com a execução do projeto e com a entrega das recompensas oferecidas independente do quanto arrecadar.')]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '2/9'), ' ', m('span.fontweight-semibold', 'Meta de arrecadação')]), m('div', 'A meta não poderá ser alterada após o publicação do projeto.')]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '3/9'), ' ', m('span.fontweight-semibold', 'Taxas')]), m('div', ['Ao final da campanha, cobraremos 13% sobre o ', m('span.fontweight-semibold', 'valor total arrecadado.')])]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '4/9'), ' ', m('span.fontweight-semibold', 'Prazo da campanha')]), m('div', 'Uma vez definido, o prazo de encerramento não poderá ser alterado. Caso você tenha iniciado a campanha com o prazo em aberto, deverá defini-lo durante a campanha, podendo deixar a campanha aberta por no máximo 12 meses.')]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '5/9'), ' ', m('span.fontweight-semibold', 'Prazo para repasse')]), m('div', 'Após encerrar a sua campanha e confirmar seus dados bancários, o Catarse realizará o repasse diretamente na sua conta corrente em até 10 dias úteis. O valor depositado já estará considerando o desconto de 13% da taxa.')]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '6/9'), ' ', m('span.fontweight-semibold', 'O que pode e não pode alterar na página do projeto a partir da publicação?')]), [m('div', [m('span.fontweight-semibold', 'Você não poderá:'), ' alterar o tipo de financiamento, nome do projeto, a URL (link) do projeto, a categoria escolhida, a meta de arrecadação, o prazo (caso já tenha definido), as recompensas onde existirem apoios já efetuados e a conta bancária registrada.\
                    ', m('br'), m('br'), m('span.fontweight-semibold', 'Você poderá: '), 'editar o conteúdo da descrição do projeto, alterar o vídeo principal da campanha, a imagem do projeto, a frase de efeito, as recompensas onde não existirem apoios efetuados, além de adicionar novas recompensas durante a arrecadação.'])]]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '7/9'), ' ', m('span.fontweight-semibold', 'Responsabilidade do Catarse')]), [m('div', [m('span.fontweight-semibold'), m('span.fontweight-semibold', 'O Catarse é responsável:'), ' pelo desenvolvimento tecnológico da plataforma, atendimento de dúvidas e problemas (tanto de apoiadores quanto de realizadores), por hospedar o projeto na plataforma e por garantir a segurança das transações financeiras.\ ', m('br'), m('br'), m('span.fontweight-semibold', 'O Catarse não é responsável:'), ' pelo financiamento, divulgação e execução, nem pela entrega de recompensas dos projetos inscritos.'])]]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '8/9'), ' ', m('span.fontweight-semibold', 'Suas responsabilidades')]), m('div', [m('span.fontweight-semibold'), m('span.fontweight-semibold'), 'É sua responsabilidade tudo aquilo que diz respeito a formatação do projeto, planejamento e divulgação da campanha de arrecadação, mobilização de apoiadores, execução do projeto, produção e entrega de recompensas dentro do prazo estimado e comunicação com apoiadores.'])]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '9/9'), ' ', m('span', { style: { 'font-weight': ' 600' } }, 'Retiradas de projetos no ar')]), m('div', [m('span.fontweight-semibold'), 'O CATARSE reserva-se o direito de, a seu exclusivo critério e uma vez notificado a respeito, cancelar projetos e encerrar as contas de CRIADORES DE PROJETOS que violem nossas ', m('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638-Diretrizes-para-cria%C3%A7%C3%A3o-de-projetos\'][target=\'_blank\']', 'Regras do Jogo'), ' e ', m('a.alt-link[href=\'http://www.catarse.me/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), '.'])])];
      },
          terms = function terms(project) {
        return [m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '1/9'), ' ', m('span.fontweight-semibold', 'Regras da modalidade Tudo-ou-nada')]), m('div', ['Você escolheu a campanha tudo-ou-nada. Dessa maneira, você só irá receber os recursos arrecadados ', m('span.fontweight-semibold', 'caso atinja ou supere a meta de arrecadação'), '. Caso contrário, todos seus apoiadores serão reembolsados. Você será responsável pela entrega das recompensas oferecidas se seu projeto alcançar a meta de arrecadação.'])]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '2/9'), ' ', m('span', { style: { 'font-weight': ' 600' } }, 'Meta de arrecadação')]), m('div', 'A meta não poderá ser alterada após o publicação do projeto.')]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '3/9'), ' ', m('span', { style: { 'font-weight': ' 600' } }, 'Taxas')]), m('div', ['Cobramos 13% sobre o ', m('span.fontweight-semibold', 'valor total arrecadado'), ' pelo seu projeto caso ele atinja ou supere a meta dentro do prazo da campanha. Se o projeto não atingir a meta, nenhuma taxa será cobrada.', m('span.fontweight-semibold')])]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '4/9'), ' ', m('span', { style: { 'font-weight': ' 600' } }, 'Prazo da campanha')]), m('div', 'Seu projeto estará em arrecadação no Catarse até o dia ' + h.momentify(ctrl.expiresAt()) + ' às 23h59min59s. Este prazo não poderá ser alterado após a publicação do projeto.')]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '5/9'), ' ', m('span', { style: { 'font-weight': ' 600' } }, 'Regras do repasse e reembolso')]), m('div', ['Após encerrar o seu projeto e confirmar seus dados bancários, o Catarse depositará o valor arrecadado, já com o desconto da taxa, na sua conta corrente em até 10 dias úteis. Caso o projeto não atinja 100% da meta dentro do prazo, o Catarse irá reembolsar os apoiadores. ', m('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202365507\'][target=\'_blank\']', 'Saiba mais sobre o processo de reembolso'), '.'])]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '6/9'), ' ', m('span', { style: { 'font-weight': ' 600' } }, 'O que pode e não pode alterar na página do projeto a partir da publicação?')]), [m('div', [m('span.fontweight-semibold', 'Você não poderá:'), ' alterar o nome do projeto, a URL (link) do projeto, a categoria escolhida, o tipo de financiamento, a conta bancária, a meta de arrecadação, o prazo escolhido e as recompensas onde existirem apoios já efetuados.\ ', m('br'), m('br'), m('span.fontweight-semibold', 'Você poderá: '), 'editar o conteúdo da descrição do projeto, alterar o vídeo principal da campanha, a imagem do projeto, a frase de efeito, as recompensas onde não existirem apoios efetuados, além de adicionar novas recompensas durante a arrecadação.'])]]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '7/9'), ' ', m('span', { style: { 'font-weight': ' 600' } }, 'Responsabilidade do Catarse')]), [m('div', [m('span.fontweight-semibold'), m('span.fontweight-semibold', 'O Catarse é responsável:'), ' pelo desenvolvimento tecnológico da plataforma, atendimento de dúvidas e problemas (tanto de apoiadores quanto de realizadores), por hospedar o projeto na plataforma e por garantir a segurança das transações financeiras.\ ', m('br'), m('br'), m('span.fontweight-semibold', 'O Catarse não é responsável:'), ' pelo financiamento, divulgação e execução, nem pela entrega de recompensas dos projetos inscritos.'])]]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '8/9'), ' ', m('span', { style: { 'font-weight': ' 600' } }, 'Suas responsabilidades')]), m('div', [m('span.fontweight-semibold'), m('span.fontweight-semibold'), 'É sua responsabilidade tudo aquilo que diz respeito a formatação do projeto, planejamento e divulgação da campanha de arrecadação, mobilização de apoiadores, execução do projeto, produção e entrega de recompensas dentro do prazo estimado e comunicação com apoiadores.'])]), m('.w-col.w-col-11', [m('div', [m('span.fontsize-smallest.fontcolor-secondary', '9/9'), ' ', m('span', { style: { 'font-weight': ' 600' } }, 'Retiradas de projetos no ar')]), m('div', [m('span.fontweight-semibold'), 'O CATARSE reserva-se o direito de, a seu exclusivo critério e uma vez notificado a respeito, cancelar projetos e encerrar as contas de CRIADORES DE PROJETOS que violem nossas ', m('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/202387638-Diretrizes-para-cria%C3%A7%C3%A3o-de-projetos\'][target=\'_blank\']', 'Regras do Jogo'), ' e ', m('a.alt-link[href=\'http://www.catarse.me/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), '.'])])];
      };

      return [!ctrl.l() && !ctrl.accountL() ? [project.is_owner_or_admin ? m.component(projectDashboardMenu, {
        project: m.prop(project),
        hidePublish: true
      }) : '', m('.w-section.section-product.' + project.mode), m('.w-section.section', [m('.w-container', [m('.w-row', [m('.w-col.w-col-3'), m('.w-col.w-col-6', [m('.u-text-center', [m('img.u-marginbottom-20[src=\'/assets/catarse_bootstrap/launch-icon.png\'][width=\'94\']'), m('.fontsize-large.fontweight-semibold.u-marginbottom-20', 'Pronto para lançar sua campanha?'), m('.fontsize-base.u-marginbottom-30', 'Preparamos uma lista com informações importantes para você checar antes de colocar seu projeto no ar!')])]), m('.w-col.w-col-3')])])]), m('.divider'), m('.w-section.section-one-column.bg-gray.section.before-footer', [m('.w-container', [m('.card.medium.u-marginbottom-60.card-terciary', [m('.w-row', [m('.w-col.w-col-6.w-clearfix', [m('img.card-project-thumb.u-right[src=' + project.large_image + ']')]), m('.w-col.w-col-6', [m('.u-marginbottom-30.fontsize-base', [m('div', [m('span.fontweight-semibold', 'Título: '), project.name]), m('div', [m('span.fontweight-semibold', 'Link: '), 'www.catarse.me/' + project.permalink]), m('div', [m('span.fontweight-semibold', 'Modalidade de financiamento: '), I18n$1.t(project.mode, I18nScope$6())]), m('div', [m('span.fontweight-semibold', 'Meta de arrecadação: '), 'R$ ' + h.formatNumber(project.goal, 2, 3)]), project.online_days !== null ? m('div', [m('span.fontweight-semibold', 'Prazo: ' + project.online_days + ' ' + (project.online_days > 1 ? 'dias' : 'dia'))]) : '', m('div', [m('span.fontweight-semibold', 'Responsável: '), account.owner_name]), m('div', [m('span.fontweight-semibold', 'CPF/CNPJ: '), account.owner_document])])])]), m('.u-text-center', [m('.w-row', [m('.w-col.w-col-1'), m('.w-col.w-col-10', [m('.divider.u-marginbottom-10'), m('.fontsize-small.fontcolor-secondary', 'Os dados acima não podem ser alterados após o projeto entrar no ar. Se você precisa fazer mudanças, navegue na barra lateral e volte aqui quando estiver tudo pronto!')]), m('.w-col.w-col-1')])])]), m('.card.medium.u-radius.u-marginbottom-60', [m('.u-text-center.u-marginbottom-60', [m('.fontsize-large.fontweight-semibold', 'Relembre nossas regras'), m('.w-row', [m('.w-col.w-col-2'), m('.w-col.w-col-8', [m('.fontsize-small', ['Antes de publicar, clique nos círculos abaixo e confirme que você está ciente de como funciona o Catarse. Qualquer dúvida, ', m('a.alt-link[href=\'https://equipecatarse.zendesk.com/account/dropboxes/20298537\'][target=\'_blank\']', 'entre em contato'), '!'])]), m('.w-col.w-col-2')])]), _$1.map(project.mode == 'flex' ? flexTerms(project) : terms(project), function (term, index) {
        return m('.u-marginbottom-30.fontsize-base' + (index == 0 ? '' : '.w-hidden.publish-rules'), [m('.w-row[id=\'rule-' + index + '\']', [m('.w-col.w-col-1.u-text-center', [m('div', [m((project.mode == 'flex' ? ctrl.flexAcceptTerm() : ctrl.acceptTerm())[index] ? 'a.w-inline-block.checkbox-big[href=\'#rule-' + (index + 1) + '\']' : 'a.w-inline-block.checkbox-big.checkbox--selected.fa.fa-check.fa-lg[href=\'#rule-' + (index + 1) + '\']', { onclick: function onclick() {
            return ctrl.showNextTerm(index, project.mode == 'flex' ? ctrl.flexAcceptTerm : ctrl.acceptTerm);
          } })])]), term])]);
      })]), m('.w-row.publish-btn-section.w-hidden', [m('.w-col.w-col-4'), m('.w-col.w-col-4', [m('a.btn.btn-large.u-marginbottom-20[href=/' + (project.mode == 'flex' ? 'flexible_projects' : 'projects') + '/' + project.id + '/push_to_online]', 'Publicar agora!'), m('.u-text-center.fontsize-smaller', ['Ao publicar o seu projeto, você está aceitando os ', m('a.alt-link[href=\'/terms-of-use\'][target=\'_blank\']', 'Termos de Uso'), ', ', project.mode == 'flex' ? m('a.alt-link[href=\'http://suporte.catarse.me/hc/pt-br/articles/206574833-Regras-para-a-fase-de-testes-do-Catarse-Flex\'][target=\'_blank\']', 'Regras do Flex') : '', ' e ', m('a.alt-link[href=\'/privacy-policy\'][target=\'_blank\']', 'Politica de Privacidade')])]), m('.w-col.w-col-4')])])]), '\
    '] : h.loader()];
    }
  };

  var startVM = function startVM(I18n) {
      var i18nStart = I18n.translations[I18n.currentLocale()].pages.start,
          testimonials = i18nStart.testimonials,
          categoryProjects = i18nStart.categoryProjects,
          panes = i18nStart.panes,
          qa = i18nStart.qa;

      return {
          testimonials: _$1.map(testimonials, function (testimonial) {
              return {
                  thumbUrl: testimonial.thumb,
                  content: testimonial.content,
                  name: testimonial.name,
                  totals: testimonial.totals
              };
          }),
          panes: _$1.map(panes, function (pane) {
              return {
                  label: pane.label,
                  src: pane.src
              };
          }),
          questions: {
              col_1: _$1.map(qa.col_1, function (question) {
                  return {
                      question: question.question,
                      answer: question.answer
                  };
              }),
              col_2: _$1.map(qa.col_2, function (question) {
                  return {
                      question: question.question,
                      answer: question.answer
                  };
              })
          },
          categoryProjects: _$1.map(categoryProjects, function (category) {
              return {
                  categoryId: category.category_id,
                  sampleProjects: [category.sample_project_ids.primary, category.sample_project_ids.secondary]
              };
          })
      };
  };

  var youtubeLightbox = {
      controller: function controller(args) {
          var player = void 0;
          var showLightbox = h.toggleProp(false, true),
              setYoutube = function setYoutube(el, isInitialized) {
              if (!isInitialized) {
                  var tag = document.createElement('script'),
                      firstScriptTag = document.getElementsByTagName('script')[0];
                  tag.src = 'https://www.youtube.com/iframe_api';
                  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                  window.onYouTubeIframeAPIReady = createPlayer;
              }
          },
              closeVideo = function closeVideo() {
              if (!_.isUndefined(player)) {
                  player.pauseVideo();
              }

              showLightbox.toggle();

              return false;
          },
              createPlayer = function createPlayer() {
              player = new YT.Player('ytvideo', {
                  height: '528',
                  width: '940',
                  videoId: args.src,
                  playerVars: {
                      showInfo: 0,
                      modestBranding: 0
                  },
                  events: {
                      'onStateChange': function onStateChange(state) {
                          return state.data === 0 ? closeVideo() : false;
                      }
                  }
              });
          };

          return {
              showLightbox: showLightbox,
              setYoutube: setYoutube,
              closeVideo: closeVideo
          };
      },
      view: function view(ctrl, args) {
          return m('#youtube-lightbox', [m('a#youtube-play.w-lightbox.w-inline-block.fa.fa-play-circle.fontcolor-negative.fa-5x[href=\'javascript:void(0);\']', {
              onclick: function onclick() {
                  ctrl.showLightbox.toggle();
                  args.onclick && args.onclick();
              }
          }), m('#lightbox.w-lightbox-backdrop[style="display:' + (ctrl.showLightbox() ? 'block' : 'none') + '"]', [m('.w-lightbox-container', [m('.w-lightbox-content', [m('.w-lightbox-view', [m('.w-lightbox-frame', [m('figure.w-lightbox-figure', [m('img.w-lightbox-img.w-lightbox-image[src=\'data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20width=%22940%22%20height=%22528%22/%3E\']'), m('#ytvideo.embedly-embed.w-lightbox-embed', { config: ctrl.setYoutube })])])]), m('.w-lightbox-spinner.w-lightbox-hide'), m('.w-lightbox-control.w-lightbox-left.w-lightbox-inactive'), m('.w-lightbox-control.w-lightbox-right.w-lightbox-inactive'), m('#youtube-close.w-lightbox-control.w-lightbox-close', { onclick: ctrl.closeVideo })]), m('.w-lightbox-strip')])])]);
      }
  };

  var I18nScope$7 = _$1.partial(h.i18nScope, 'pages.start');

  var start = {
      controller: function controller() {
          h.analytics.windowScroll({ cat: 'project_start', act: 'start_page_scroll' });
          var stats = m.prop([]),
              categories = m.prop([]),
              selectedPane = m.prop(0),
              selectedCategory = m.prop([]),
              featuredProjects = m.prop([]),
              selectedCategoryIdx = m.prop(-1),
              startvm = startVM(I18n$1),
              filters = postgrest$1.filtersVM,
              paneImages = startvm.panes,
              categoryvm = filters({
              category_id: 'eq'
          }),
              projectvm = filters({
              project_id: 'eq'
          }),
              uservm = filters({
              id: 'eq'
          }),
              loader = postgrest$1.loader,
              statsLoader = loader(models.statistic.getRowOptions()),
              loadCategories = function loadCategories() {
              return models.category.getPage(filters({}).order({
                  name: 'asc'
              }).parameters()).then(categories);
          },
              selectPane = function selectPane(idx) {
              return function () {
                  selectedPane(idx);
              };
          },
              lCategory = function lCategory() {
              return loader(models.categoryTotals.getRowOptions(categoryvm.parameters()));
          },
              lProject = function lProject() {
              return loader(models.projectDetail.getRowOptions(projectvm.parameters()));
          },
              lUser = function lUser() {
              return loader(models.userDetail.getRowOptions(uservm.parameters()));
          },
              selectCategory = function selectCategory(category) {
              return function () {
                  selectedCategoryIdx(category.id);
                  categoryvm.category_id(category.id);
                  selectedCategory([category]);
                  m.redraw();
                  lCategory().load().then(loadCategoryProjects);
              };
          },
              setUser = function setUser(user, idx) {
              featuredProjects()[idx] = _$1.extend({}, featuredProjects()[idx], {
                  userThumb: _$1.first(user).profile_img_thumbnail
              });
          },
              setProject = function setProject(project, idx) {
              featuredProjects()[idx] = _$1.first(project);
              uservm.id(_$1.first(project).user.id);
              lUser().load().then(function (user) {
                  return setUser(user, idx);
              });
          },
              loadCategoryProjects = function loadCategoryProjects(category) {
              selectedCategory(category);
              var categoryProjects = _$1.findWhere(startvm.categoryProjects, {
                  categoryId: _$1.first(category).category_id
              });
              featuredProjects([]);
              if (!_$1.isUndefined(categoryProjects)) {
                  _$1.map(categoryProjects.sampleProjects, function (project_id, idx) {
                      if (!_$1.isUndefined(project_id)) {
                          projectvm.project_id(project_id);
                          lProject().load().then(function (project) {
                              return setProject(project, idx);
                          });
                      }
                  });
              }
          };

          statsLoader.load().then(stats);
          loadCategories();

          return {
              stats: stats,
              categories: categories,
              paneImages: paneImages,
              selectCategory: selectCategory,
              selectedCategory: selectedCategory,
              selectedCategoryIdx: selectedCategoryIdx,
              selectPane: selectPane,
              selectedPane: selectedPane,
              featuredProjects: featuredProjects,
              testimonials: startvm.testimonials,
              questions: startvm.questions
          };
      },
      view: function view(ctrl, args) {
          var stats = _$1.first(ctrl.stats());
          var testimonials = function testimonials() {
              return _$1.map(ctrl.testimonials, function (testimonial) {
                  var content = m('.card.u-radius.card-big.card-terciary', [m('.u-text-center.u-marginbottom-20', [m('img.thumb-testimonial.u-round.u-marginbottom-20[src="' + testimonial.thumbUrl + '"]')]), m('p.fontsize-large.u-marginbottom-30', '"' + testimonial.content + '"'), m('.u-text-center', [m('.fontsize-large.fontweight-semibold', testimonial.name), m('.fontsize-base', testimonial.totals)])]);

                  return {
                      content: content
                  };
              });
          };

          return [m('.w-section.hero-full.hero-start', [m('.w-container.u-text-center', [m('.fontsize-megajumbo.fontweight-semibold.u-marginbottom-40', I18n$1.t('slogan', I18nScope$7())), m('.w-row.u-marginbottom-40', [m('.w-col.w-col-4.w-col-push-4', [m('a.btn.btn-large.u-marginbottom-10[href="#start-form"]', {
              config: h.scrollTo(),
              onclick: h.analytics.event({ cat: 'project_start', act: 'start_btnstart_click' })
          }, I18n$1.t('submit', I18nScope$7()))])]), m('.w-row', _$1.isEmpty(stats) ? '' : [m('.w-col.w-col-4', [m('.fontsize-largest.lineheight-loose', h.formatNumber(stats.total_contributors, 0, 3)), m('p.fontsize-small.start-stats', I18n$1.t('header.people', I18nScope$7()))]), m('.w-col.w-col-4', [m('.fontsize-largest.lineheight-loose', stats.total_contributed.toString().slice(0, 2) + ' milhões'), m('p.fontsize-small.start-stats', I18n$1.t('header.money', I18nScope$7()))]), m('.w-col.w-col-4', [m('.fontsize-largest.lineheight-loose', h.formatNumber(stats.total_projects_success, 0, 3)), m('p.fontsize-small.start-stats', I18n$1.t('header.success', I18nScope$7()))])])])]), m('.w-section.section', [m('.w-container', [m('.w-row', [m('.w-col.w-col-10.w-col-push-1.u-text-center', [m('.fontsize-larger.u-marginbottom-10.fontweight-semibold', I18n$1.t('page-title', I18nScope$7())), m('.fontsize-small', I18n$1.t('page-subtitle', I18nScope$7()))])]), m('.w-clearfix.how-row', [m('.w-hidden-small.w-hidden-tiny.how-col-01', [m('.info-howworks-backers', [m('.fontweight-semibold.fontsize-large', I18n$1.t('banner.1', I18nScope$7())), m('.fontsize-base', I18n$1.t('banner.2', I18nScope$7()))]), m('.info-howworks-backers', [m('.fontweight-semibold.fontsize-large', I18n$1.t('banner.3', I18nScope$7())), m('.fontsize-base', I18n$1.t('banner.4', I18nScope$7()))])]), m('.how-col-02'), m('.how-col-03', [m('.fontweight-semibold.fontsize-large', I18n$1.t('banner.5', I18nScope$7())), m('.fontsize-base', I18n$1.t('banner.6', I18nScope$7())), m('.fontweight-semibold.fontsize-large.u-margintop-30', I18n$1.t('banner.7', I18nScope$7())), m('.fontsize-base', I18n$1.t('banner.8', I18nScope$7()))]), m('.w-hidden-main.w-hidden-medium.how-col-01', [m('.info-howworks-backers', [m('.fontweight-semibold.fontsize-large', I18n$1.t('banner.1', I18nScope$7())), m('.fontsize-base', I18n$1.t('banner.2', I18nScope$7()))]), m('.info-howworks-backers', [m('.fontweight-semibold.fontsize-large', I18n$1.t('banner.3', I18nScope$7())), m('.fontsize-base', I18n$1.t('banner.4', I18nScope$7()))])])])])]), m('.w-section.divider'), m('.w-section.section-large', [m('.w-container.u-text-center.u-marginbottom-60', [m('div', [m('span.fontsize-largest.fontweight-semibold', I18n$1.t('features.title', I18nScope$7()))]), m('.w-hidden-small.w-hidden-tiny.fontsize-large.u-marginbottom-20', I18n$1.t('features.subtitle', I18nScope$7())), m('.w-hidden-main.w-hidden-medium.u-margintop-30', [m('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_1', I18nScope$7())), m('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_2', I18nScope$7())), m('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_3', I18nScope$7())), m('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_4', I18nScope$7())), m('.fontsize-large.u-marginbottom-30', I18n$1.t('features.feature_5', I18nScope$7()))])]), m('.w-container', [m('.w-tabs.w-hidden-small.w-hidden-tiny', [m('.w-tab-menu.w-col.w-col-4', _$1.map(ctrl.paneImages, function (pane, idx) {
              return m('btn.w-tab-link.w-inline-block.tab-list-item' + (idx === ctrl.selectedPane() ? '.selected' : ''), {
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_solution_click', lbl: pane.label }, ctrl.selectPane(idx))
              }, pane.label);
          })), m('.w-tab-content.w-col.w-col-8', _$1.map(ctrl.paneImages, function (pane, idx) {
              return m('.w-tab-pane', [m('img[src="' + pane.src + '"].pane-image' + (idx === ctrl.selectedPane() ? '.selected' : ''))]);
          }))])])]), m('.w-section.section-large.bg-blue-one', [m('.w-container.u-text-center', [m('.fontsize-larger.lineheight-tight.fontcolor-negative.u-marginbottom-20', [I18n$1.t('video.title', I18nScope$7()), m('br'), I18n$1.t('video.subtitle', I18nScope$7())]), m.component(youtubeLightbox, {
              src: I18n$1.t('video.src', I18nScope$7()),
              onclick: h.analytics.event({ cat: 'project_start', act: 'start_video_play' })
          })])]), m('.w-hidden-small.w-hidden-tiny.section-categories', [m('.w-container', [m('.u-text-center', [m('.w-row', [m('.w-col.w-col-10.w-col-push-1', [m('.fontsize-large.u-marginbottom-40.fontcolor-negative', I18n$1.t('categories.title', I18nScope$7()))])])]), m('.w-tabs', [m('.w-tab-menu.u-text-center', _$1.map(ctrl.categories(), function (category) {
              return m('a.w-tab-link.w-inline-block.btn-category.small.btn-inline' + (ctrl.selectedCategoryIdx() === category.id ? '.w--current' : ''), {
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_category_click', lbl: category.name }, ctrl.selectCategory(category))
              }, [m('div', category.name)]);
          })), m('.w-tab-content.u-margintop-40', [m('.w-tab-pane.w--tab-active', [m('.w-row', ctrl.selectedCategoryIdx() !== -1 ? _$1.map(ctrl.selectedCategory(), function (category) {
              return [m('.w-col.w-col-5', [m('.fontsize-jumbo.u-marginbottom-20', category.name), m('a.w-button.btn.btn-medium.btn-inline.btn-dark[href="#start-form"]', {
                  config: h.scrollTo()
              }, I18n$1.t('submit', I18nScope$7()))]), m('.w-col.w-col-7', [m('.fontsize-megajumbo.fontcolor-negative', 'R$ ' + (category.total_successful_value ? h.formatNumber(category.total_successful_value, 2, 3) : '...')), m('.fontsize-large.u-marginbottom-20', 'Doados para projetos'), m('.fontsize-megajumbo.fontcolor-negative', category.successful_projects ? category.successful_projects : '...'), m('.fontsize-large.u-marginbottom-30', 'Projetos financiados'), !_$1.isEmpty(ctrl.featuredProjects()) ? _$1.map(ctrl.featuredProjects(), function (project) {
                  return !_$1.isUndefined(project) ? m('.w-row.u-marginbottom-10', [m('.w-col.w-col-1', [m('img.user-avatar[src="' + h.useAvatarOrDefault(project.userThumb) + '"]')]), m('.w-col.w-col-11', [m('.fontsize-base.fontweight-semibold', project.user.name), m('.fontsize-smallest', [I18n$1.t('categories.pledged', I18nScope$7({ pledged: h.formatNumber(project.pledged), contributors: project.total_contributors })), m('a.link-hidden[href="/' + project.permalink + '"]', project.name)])])]) : m('.fontsize-base', I18n$1.t('categories.loading_featured', I18nScope$7()));
              }) : ''])];
          }) : '')])])])])]), m.component(slider, {
              slides: testimonials(),
              title: I18n$1.t('testimonials_title', I18nScope$7()),
              slideClass: 'slide-testimonials-content',
              wrapperClass: 'slide-testimonials',
              onchange: h.analytics.event({ cat: 'project_start', act: 'start_testimonials_change' })
          }), m('.w-section.divider.u-margintop-30'), m('.w-container', [m('.fontsize-larger.u-text-center.u-marginbottom-60.u-margintop-40', I18n$1.t('qa_title', I18nScope$7())), m('.w-row.u-marginbottom-60', [m('.w-col.w-col-6', _$1.map(ctrl.questions.col_1, function (question) {
              return m.component(landingQA, {
                  question: question.question,
                  answer: question.answer,
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_qa_click', lbl: question.question })
              });
          })), m('.w-col.w-col-6', _$1.map(ctrl.questions.col_2, function (question) {
              return m.component(landingQA, {
                  question: question.question,
                  answer: question.answer,
                  onclick: h.analytics.event({ cat: 'project_start', act: 'start_qa_click', lbl: question.question })
              });
          }))])]), m('#start-form.w-section.section-large.u-text-center.bg-purple.before-footer', [m('.w-container', [m('.fontsize-jumbo.fontcolor-negative.u-marginbottom-60', 'Crie o seu rascunho gratuitamente!'), m('form[action="/projects/fallback_create"][method="GET"].w-row.w-form', {
              onsubmit: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_submit' })
          }, [m('.w-col.w-col-2'), m('.w-col.w-col-8', [m('.fontsize-larger.fontcolor-negative.u-marginbottom-10', I18n$1.t('form.title', I18nScope$7())), m('input[name="utf8"][type="hidden"][value="✓"]'), m('input[name="authenticity_token"][type="hidden"][value="' + h.authenticityToken() + '"]'), m('input.w-input.text-field.medium.u-marginbottom-30[type="text"]', {
              name: 'project[name]',
              onchange: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_change', lbl: 'name' })
          }), m('.fontsize-larger.fontcolor-negative.u-marginbottom-10', 'na categoria'), m('select.w-select.text-field.medium.u-marginbottom-40', {
              name: 'project[category_id]',
              onchange: h.analytics.oneTimeEvent({ cat: 'project_create', act: 'create_form_change', lbl: 'category' })
          }, [m('option[value=""]', I18n$1.t('form.select_default', I18nScope$7())), _$1.map(ctrl.categories(), function (category) {
              return m('option[value="' + category.id + '"]', category.name);
          })])]), m('.w-col.w-col-2'), m('.w-row.u-marginbottom-80', [m('.w-col.w-col-4.w-col-push-4.u-margintop-40', [m('input[type="submit"][value="' + I18n$1.t('form.submit', I18nScope$7()) + '"].w-button.btn.btn-large')])])])])])];
      }
  };

  var teamTotal = {
      controller: function controller() {
          var vm = {
              collection: m.prop([])
          };

          models.teamTotal.getRow().then(function (data) {
              vm.collection(data);
          });

          return {
              vm: vm
          };
      },
      view: function view(ctrl, args) {
          return m('#team-total-static.w-section.section-one-column.section.u-margintop-40.u-text-center.u-marginbottom-20', [ctrl.vm.collection().map(function (teamTotal) {
              return m('.w-container', [m('.w-row', [m('.w-col.w-col-2'), m('.w-col.w-col-8', [m('.fontsize-base.u-marginbottom-30', 'Hoje somos ' + teamTotal.member_count + ' pessoas espalhadas por ' + teamTotal.total_cities + ' cidades em ' + teamTotal.countries.length + ' países (' + teamTotal.countries.toString() + ')! O Catarse é independente, sem investidores, de código aberto e construído com amor. Nossa paixão é construir um ambiente onde cada vez mais projetos possam ganhar vida.'), m('.fontsize-larger.lineheight-tight.text-success', 'Nossa equipe, junta, já apoiou R$' + h.formatNumber(teamTotal.total_amount) + ' para ' + teamTotal.total_contributed_projects + ' projetos!')]), m('.w-col.w-col-2')])]);
          })]);
      }
  };

  var teamMembers = {
      controller: function controller() {
          var vm = {
              collection: m.prop([])
          },
              groupCollection = function groupCollection(collection, groupTotal) {
              return _$1.map(_$1.range(Math.ceil(collection.length / groupTotal)), function (i) {
                  return collection.slice(i * groupTotal, (i + 1) * groupTotal);
              });
          };

          models.teamMember.getPage().then(function (data) {
              vm.collection(groupCollection(data, 4));
          });

          return {
              vm: vm
          };
      },
      view: function view(ctrl) {
          return m('#team-members-static.w-section.section', [m('.w-container', [_$1.map(ctrl.vm.collection(), function (group) {
              return m('.w-row.u-text-center', [_$1.map(group, function (member) {
                  return m('.team-member.w-col.w-col-3.w-col-small-3.w-col-tiny-6.u-marginbottom-40', [m('a.alt-link[href="/users/' + member.id + '"]', [m('img.thumb.big.u-round.u-marginbottom-10[src="' + member.img + '"]'), m('.fontweight-semibold.fontsize-base', member.name)]), m('.fontsize-smallest.fontcolor-secondary', 'Apoiou ' + member.total_contributed_projects + ' projetos')]);
              })]);
          })])]);
      }
  };

  var team = {
      view: function view() {
          return m('#static-team-app', [m.component(teamTotal), m.component(teamMembers)]);
      }
  };

  var I18nScope$9 = _$1.partial(h.i18nScope, 'users.balance');

  var userBalanceRequestModelContent = {
      controller: function controller(args) {
          var vm = postgrest.filtersVM({ user_id: 'eq' }),
              balance = args.balance,
              loaderOpts = models.balanceTransfer.postOptions({
              user_id: balance.user_id }),
              requestLoader = postgrest.loaderWithToken(loaderOpts),
              displayDone = h.toggleProp(false, true),
              requestFund = function requestFund() {
              requestLoader.load().then(function (data) {
                  args.balanceManager.load();
                  args.balanceTransactionManager.load();
                  displayDone.toggle();
              });
          };

          args.bankAccountManager.load();

          return {
              requestLoader: requestLoader,
              requestFund: requestFund,
              bankAccounts: args.bankAccountManager.collection,
              displayDone: displayDone,
              loadBankA: args.bankAccountManager.loader
          };
      },
      view: function view(ctrl, args) {
          var balance = args.balance;

          return ctrl.loadBankA() ? h.loader() : m('div', _$1.map(ctrl.bankAccounts(), function (item) {
              return [m('.modal-dialog-header', [m('.fontsize-large.u-text-center', I18n$1.t('withdraw', I18nScope$9()))]), ctrl.displayDone() ? m('.modal-dialog-content.u-text-center', [m('.fa.fa-check-circle.fa-5x.text-success.u-marginbottom-40'), m('p.fontsize-large', I18n$1.t('sucess_message', I18nScope$9()))]) : m('.modal-dialog-content', [m('.fontsize-base.u-marginbottom-20', [m('span.fontweight-semibold', 'Valor:'), m.trust('&nbsp;'), m('span.text-success', 'R$ ' + h.formatNumber(balance.amount, 2, 3))]), m('.fontsize-base.u-marginbottom-10', [m('span', { style: { 'font-weight': ' 600' } }, I18n$1.t('bank.account', I18nScope$9()))]), m('.fontsize-small.u-marginbottom-10', [m('div', [m('span.fontcolor-secondary', I18n$1.t('bank.name', I18nScope$9())), m.trust('&nbsp;'), item.owner_name]), m('div', [m('span.fontcolor-secondary', I18n$1.t('bank.cpf_cnpj', I18nScope$9())), m.trust('&nbsp;'), item.owner_document]), m('div', [m('span.fontcolor-secondary', I18n$1.t('bank.bank_name', I18nScope$9())), m.trust('&nbsp;'), item.bank_name]), m('div', [m('span.fontcolor-secondary', I18n$1.t('bank.agency', I18nScope$9())), m.trust('&nbsp;'), item.agency + '-' + item.agency_digit]), m('div', [m('span.fontcolor-secondary', I18n$1.t('bank.account', I18nScope$9())), m.trust('&nbsp;'), item.account + '-' + item.account_digit])])]), !ctrl.displayDone() ? m('.modal-dialog-nav-bottom', [m('.w-row', [m('.w-col.w-col-3'), m('.w-col.w-col-6', [ctrl.requestLoader() ? h.loader() : m('a.btn.btn-large.btn-request-fund[href="js:void(0);"]', { onclick: ctrl.requestFund }, 'Solicitar saque')]), m('.w-col.w-col-3')])]) : ''];
          }));
      }
  };

  var I18nScope$8 = _$1.partial(h.i18nScope, 'users.balance');

  var userBalance = {
      controller: function controller(args) {
          args.balanceManager.load();

          return {
              userBalances: args.balanceManager.collection,
              displayModal: h.toggleProp(false, true)
          };
      },
      view: function view(ctrl, args) {
          var balance = _$1.first(ctrl.userBalances()),
              balanceRequestModalC = [userBalanceRequestModelContent, _$1.extend({}, { balance: balance }, args)];

          return m('.w-section.section.user-balance-section', [ctrl.displayModal() ? m.component(modalBox, {
              displayModal: ctrl.displayModal,
              content: balanceRequestModalC
          }) : '', m('.w-container', [m('.w-row', [m('.w-col.w-col-8.u-text-center-small-only.u-marginbottom-20', [m('.fontsize-larger', [I18n.t('totals', I18nScope$8()), m('span.text-success', 'R$ ' + h.formatNumber(balance.amount, 2, 3))])]), m('.w-col.w-col-4', [m('a[class="r-fund-btn w-button btn btn-medium u-marginbottom-10 ' + (balance.amount <= 0 ? 'btn-inactive' : '') + '"][href="js:void(0);"]', { onclick: balance.amount > 0 ? ctrl.displayModal.toggle : 'js:void(0);' }, I18n.t('withdraw_cta', I18nScope$8()))])])])]);
      }
  };

  var I18nScope$10 = _.partial(h.i18nScope, 'users.balance');

  var userBalanceTrasactionRow = {
      controller: function controller(args) {
          var expanded = h.toggleProp(false, true);

          if (args.index == 0) {
              expanded.toggle();
          }

          return {
              expanded: expanded
          };
      },
      view: function view(ctrl, args) {
          var item = args.item,
              createdAt = h.momentFromString(item.created_at, 'YYYY-MM-DD');

          return m('div[class=\'balance-card ' + (ctrl.expanded() ? 'card-detailed-open' : '') + '\']', m('.w-clearfix.card.card-clickable', [m('.w-row', [m('.w-col.w-col-2.w-col-tiny-2', [m('.fontsize-small.lineheight-tightest', createdAt.format('D MMM')), m('.fontsize-smallest.fontcolor-terciary', createdAt.format('YYYY'))]), m('.w-col.w-col-10.w-col-tiny-10', [m('.w-row', [m('.w-col.w-col-4', [m('div', [m('span.fontsize-smaller.fontcolor-secondary', I18n.t('debit', I18nScope$10())), m.trust('&nbsp;'), m('span.fontsize-base.text-error', 'R$ ' + h.formatNumber(Math.abs(item.debit), 2, 3))])]), m('.w-col.w-col-4', [m('div', [m('span.fontsize-smaller.fontcolor-secondary', I18n.t('credit', I18nScope$10())), m.trust('&nbsp;'), m('span.fontsize-base.text-success', 'R$ ' + h.formatNumber(item.credit, 2, 3))])]), m('.w-col.w-col-4', [m('div', [m('span.fontsize-smaller.fontcolor-secondary', I18n.t('totals', I18nScope$10())), m.trust('&nbsp;'), m('span.fontsize-base', 'R$ ' + h.formatNumber(item.total_amount, 2, 3))])])])])]), m('a.w-inline-block.arrow-admin.' + (ctrl.expanded() ? 'arrow-admin-opened' : '') + '.fa.fa-chevron-down.fontcolor-secondary[href="js:(void(0));"]', { onclick: ctrl.expanded.toggle })]), ctrl.expanded() ? m('.card', _.map(item.source, function (transaction) {
              var pos = transaction.amount >= 0;

              return m('div', [m('.w-row.fontsize-small.u-marginbottom-10', [m('.w-col.w-col-2', [m('.text-' + (pos ? 'success' : 'error'), (pos ? '+' : '-') + ' R$ ' + h.formatNumber(Math.abs(transaction.amount), 2, 3))]), m('.w-col.w-col-10', [m('div', transaction.event_name + ' ' + transaction.origin_object.name)])]), m('.divider.u-marginbottom-10')]);
          })) : '');
      }
  };

  var userBalanceTransactions = {
      controller: function controller(args) {
          args.balanceTransactionManager.load();

          return {
              list: args.balanceTransactionManager.list
          };
      },
      view: function view(ctrl, args) {
          var list = ctrl.list;

          return m('.w-section.section.card-terciary.before-footer.balance-transactions-area', [m('.w-container', _$1.map(list.collection(), function (item, index) {
              return m.component(userBalanceTrasactionRow, { item: item, index: index });
          })), m('.container', [m('.w-row.u-margintop-40', [m('.w-col.w-col-2.w-col-push-5', [!list.isLoading() ? list.isLastPage() ? '' : m('button#load-more.btn.btn-medium.btn-terciary', {
              onclick: list.nextPage
          }, 'Carregar mais') : h.loader()])])])]);
      }
  };

  var userBalanceMain = {
      controller: function controller(args) {
          var userIdVM = postgrest$1.filtersVM({ user_id: 'eq' });

          userIdVM.user_id(args.user_id);

          // Handles with user balance request data
          var balanceManager = function () {
              var collection = m.prop([{ amount: 0, user_id: args.user_id }]),
                  load = function load() {
                  models.balance.getRowWithToken(userIdVM.parameters()).then(collection);
              };

              return {
                  collection: collection,
                  load: load
              };
          }(),


          // Handles with user balance transactions list data
          balanceTransactionManager = function () {
              var listVM = postgrest$1.paginationVM(models.balanceTransaction, 'created_at.desc'),
                  load = function load() {
                  listVM.firstPage(userIdVM.parameters());
              };

              return {
                  load: load,
                  list: listVM
              };
          }(),


          // Handles with bank account to check
          bankAccountManager = function () {
              var collection = m.prop([]),
                  loader = function () {
                  return postgrest$1.loaderWithToken(models.bankAccount.getRowOptions(userIdVM.parameters()));
              }(),
                  load = function load() {
                  loader.load().then(collection);
              };

              return {
                  collection: collection,
                  load: load,
                  loader: loader
              };
          }();

          return {
              bankAccountManager: bankAccountManager,
              balanceManager: balanceManager,
              balanceTransactionManager: balanceTransactionManager
          };
      },
      view: function view(ctrl, args) {
          var opts = _$1.extend({}, args, ctrl);
          return m('#balance-area', [m.component(userBalance, opts), m('.divider'), m.component(userBalanceTransactions, opts), m('.u-marginbottom-40'), m('.w-section.section.card-terciary.before-footer')]);
      }
  };

  var c$1 = {
      root: {
          AdminUsers: adminUsers,
          AdminContributions: adminContributions,
          Flex: Flex,
          Insights: insights,
          Jobs: jobs,
          LiveStatistics: liveStatistics,
          ProjectsContributionReport: projectContributionReport,
          ProjectsDashboard: projectsDashboard,
          ProjectsExplore: projectsExplore,
          ProjectsHome: projectsHome,
          ProjectsShow: projectsShow,
          Publish: publish,
          Start: start,
          Team: team,
          UsersBalance: userBalanceMain
      }
  };

  return c$1;

}(m,moment,I18n,postgrest,replaceDiacritics,_,Chart));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjLyoqLyouanMiLCJzb3VyY2VzIjpbInNyYy9oLmpzIiwic3JjL21vZGVscy5qcyIsInNyYy92bXMvdXNlci1saXN0LXZtLmpzIiwic3JjL3Ztcy91c2VyLWZpbHRlci12bS5qcyIsInNyYy9jL2ZpbHRlci1tYWluLmpzIiwic3JjL2MvYWRtaW4tZmlsdGVyLmpzIiwic3JjL2MvYWRtaW4taXRlbS5qcyIsInNyYy9jL2FkbWluLWxpc3QuanMiLCJzcmMvYy9hZG1pbi11c2VyLmpzIiwic3JjL2MvYWRtaW4tdXNlci1pdGVtLmpzIiwic3JjL2MvYWRtaW4tcmVzZXQtcGFzc3dvcmQuanMiLCJzcmMvYy9hZG1pbi1pbnB1dC1hY3Rpb24uanMiLCJzcmMvYy9hZG1pbi1ub3RpZmljYXRpb24taGlzdG9yeS5qcyIsInNyYy9jL2FkbWluLXVzZXItZGV0YWlsLmpzIiwic3JjL2MvZHJvcGRvd24uanMiLCJzcmMvYy9maWx0ZXItZHJvcGRvd24uanMiLCJzcmMvcm9vdC9hZG1pbi11c2Vycy5qcyIsInNyYy92bXMvY29udHJpYnV0aW9uLWxpc3Qtdm0uanMiLCJzcmMvdm1zL2NvbnRyaWJ1dGlvbi1maWx0ZXItdm0uanMiLCJzcmMvYy9hZG1pbi1wcm9qZWN0LmpzIiwic3JjL2MvYWRtaW4tY29udHJpYnV0aW9uLmpzIiwic3JjL2MvYWRtaW4tY29udHJpYnV0aW9uLXVzZXIuanMiLCJzcmMvYy9wYXltZW50LXN0YXR1cy5qcyIsInNyYy9jL2FkbWluLWNvbnRyaWJ1dGlvbi1pdGVtLmpzIiwic3JjL2MvYWRtaW4tcmFkaW8tYWN0aW9uLmpzIiwic3JjL2MvYWRtaW4tZXh0ZXJuYWwtYWN0aW9uLmpzIiwic3JjL2MvYWRtaW4tdHJhbnNhY3Rpb24uanMiLCJzcmMvYy9hZG1pbi10cmFuc2FjdGlvbi1oaXN0b3J5LmpzIiwic3JjL2MvYWRtaW4tcmV3YXJkLmpzIiwic3JjL2MvYWRtaW4tY29udHJpYnV0aW9uLWRldGFpbC5qcyIsInNyYy9jL2ZpbHRlci1udW1iZXItcmFuZ2UuanMiLCJzcmMvYy9maWx0ZXItZGF0ZS1yYW5nZS5qcyIsInNyYy9yb290L2FkbWluLWNvbnRyaWJ1dGlvbnMuanMiLCJzcmMvYy9sYW5kaW5nLXNpZ251cC5qcyIsInNyYy9jL3Byb2plY3QtY2FyZC5qcyIsInNyYy9jL3Byb2plY3Qtcm93LmpzIiwic3JjL2MvbGFuZGluZy1xYS5qcyIsInNyYy9yb290L2ZsZXguanMiLCJzcmMvYy90b29sdGlwLmpzIiwic3JjL2MvcHJvamVjdC1kYXNoYm9hcmQtbWVudS5qcyIsInNyYy9jL21vZGFsLWJveC5qcyIsInNyYy9jL2FkbWluLXByb2plY3QtZGV0YWlscy1jYXJkLmpzIiwic3JjL2MvcHJvamVjdC1kYXRhLWNoYXJ0LmpzIiwic3JjL2MvcHJvamVjdC1kYXRhLXRhYmxlLmpzIiwic3JjL2MvcHJvamVjdC1yZW1pbmRlci1jb3VudC5qcyIsInNyYy9yb290L2luc2lnaHRzLmpzIiwic3JjL3Jvb3Qvam9icy5qcyIsInNyYy9yb290L2xpdmUtc3RhdGlzdGljcy5qcyIsInNyYy9jL3Byb2plY3QtY29udHJpYnV0aW9uLXJlcG9ydC1oZWFkZXIuanMiLCJzcmMvYy9wcm9qZWN0LWNvbnRyaWJ1dGlvbi1yZXBvcnQtY29udGVudC1jYXJkLmpzIiwic3JjL2MvcHJvamVjdC1jb250cmlidXRpb24tcmVwb3J0LWNvbnRlbnQuanMiLCJzcmMvdm1zL3Byb2plY3RzLWNvbnRyaWJ1dGlvbi1yZXBvcnQtdm0uanMiLCJzcmMvcm9vdC9wcm9qZWN0cy1jb250cmlidXRpb24tcmVwb3J0LmpzIiwic3JjL3Ztcy9wcm9qZWN0LXZtLmpzIiwic3JjL3Jvb3QvcHJvamVjdHMtZGFzaGJvYXJkLmpzIiwic3JjL3Ztcy9wcm9qZWN0LWZpbHRlcnMtdm0uanMiLCJzcmMvYy9zZWFyY2guanMiLCJzcmMvYy9jYXRlZ29yeS1idXR0b24uanMiLCJzcmMvcm9vdC9wcm9qZWN0cy1leHBsb3JlLmpzIiwic3JjL3Ztcy9ob21lLXZtLmpzIiwic3JjL2Mvc2xpZGVyLmpzIiwic3JjL2MvY29udHJpYnV0aW9uLWFjdGl2aXRpZXMuanMiLCJzcmMvcm9vdC9wcm9qZWN0cy1ob21lLmpzIiwic3JjL2MvcHJvamVjdC1zaGFyZS1ib3guanMiLCJzcmMvYy9wcm9qZWN0LWhpZ2hsaWdodC5qcyIsInNyYy9jL3Byb2plY3QtbW9kZS5qcyIsInNyYy9jL3BvcC1ub3RpZmljYXRpb24uanMiLCJzcmMvYy9wcm9qZWN0LXJlbWluZGVyLmpzIiwic3JjL2Mvb3duZXItbWVzc2FnZS1jb250ZW50LmpzIiwic3JjL2MvcHJvamVjdC11c2VyLWNhcmQuanMiLCJzcmMvYy9wcm9qZWN0LXNpZGViYXIuanMiLCJzcmMvYy9wcm9qZWN0LWhlYWRlci5qcyIsInNyYy9jL3Byb2plY3QtdGFicy5qcyIsInNyYy9jL3Byb2plY3QtcmV3YXJkLWxpc3QuanMiLCJzcmMvYy9wcm9qZWN0LXN1Z2dlc3RlZC1jb250cmlidXRpb25zLmpzIiwic3JjL2MvcHJvamVjdC1jb250cmlidXRpb25zLmpzIiwic3JjL2MvcHJvamVjdC1yZXBvcnQuanMiLCJzcmMvYy9wcm9qZWN0LWFib3V0LmpzIiwic3JjL2MvcHJvamVjdC1jb21tZW50cy5qcyIsInNyYy9jL3Byb2plY3QtcG9zdHMuanMiLCJzcmMvYy9wcm9qZWN0LW1haW4uanMiLCJzcmMvcm9vdC9wcm9qZWN0cy1zaG93LmpzIiwic3JjL3Jvb3QvcHVibGlzaC5qcyIsInNyYy92bXMvc3RhcnQtdm0uanMiLCJzcmMvYy95b3V0dWJlLWxpZ2h0Ym94LmpzIiwic3JjL3Jvb3Qvc3RhcnQuanMiLCJzcmMvYy90ZWFtLXRvdGFsLmpzIiwic3JjL2MvdGVhbS1tZW1iZXJzLmpzIiwic3JjL3Jvb3QvdGVhbS5qcyIsInNyYy9jL3VzZXItYmFsYW5jZS1yZXF1ZXN0LW1vZGFsLWNvbnRlbnQuanMiLCJzcmMvYy91c2VyLWJhbGFuY2UuanMiLCJzcmMvYy91c2VyLWJhbGFuY2UtdHJhbnNhY3Rpb24tcm93LmpzIiwic3JjL2MvdXNlci1iYWxhbmNlLXRyYW5zYWN0aW9ucy5qcyIsInNyYy9yb290L3VzZXJzLWJhbGFuY2UtbWFpbi5qcyIsInNyYy9jLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xyXG5cclxuY29uc3RcclxuICAgIF9kYXRhQ2FjaGUgPSB7fSxcclxuICAgIGhhc2hNYXRjaCA9IChzdHIpID0+IHsgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSBzdHI7IH0sXHJcbiAgICBwYXJhbUJ5TmFtZSA9IChuYW1lKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsTmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXScpLFxyXG4gICAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoJ1tcXFxcPyZdJyArIG5vcm1hbE5hbWUgKyAnPShbXiYjXSopJyksXHJcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZWdleC5leGVjKGxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdHMgPT09IG51bGwgPyAnJyA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcclxuICAgIH0sXHJcbiAgXHRzZWxmT3JFbXB0eSA9IChvYmosIGVtcHR5U3RhdGUgPSAnJykgPT4ge1xyXG4gICAgICByZXR1cm4gb2JqID8gb2JqIDogZW1wdHlTdGF0ZTtcclxuICBcdH0sXHJcbiAgICBzZXRNb21lbnRpZnlMb2NhbGUgPSAoKSA9PiB7XHJcbiAgICAgICAgbW9tZW50LmxvY2FsZSgncHQnLCB7XHJcbiAgICAgICAgICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZXZfbWFyX2Ficl9tYWlfanVuX2p1bF9hZ29fc2V0X291dF9ub3ZfZGV6Jy5zcGxpdCgnXycpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGV4aXN0eSA9ICh4KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHggIT0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgbW9tZW50aWZ5ID0gKGRhdGUsIGZvcm1hdCkgPT4ge1xyXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnREQvTU0vWVlZWSc7XHJcbiAgICAgICAgcmV0dXJuIGRhdGUgPyBtb21lbnQoZGF0ZSkubG9jYWxlKCdwdCcpLmZvcm1hdChmb3JtYXQpIDogJ25vIGRhdGUnO1xyXG4gICAgfSxcclxuXHJcbiAgICBzdG9yZUFjdGlvbiA9IChhY3Rpb24pID0+IHtcclxuICAgICAgICBpZiAoIXNlc3Npb25TdG9yYWdlLmdldEl0ZW0oYWN0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShhY3Rpb24sIGFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBjYWxsU3RvcmVkQWN0aW9uID0gKGFjdGlvbiwgZnVuYykgPT4ge1xyXG4gICAgICAgIGlmIChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgZnVuYy5jYWxsKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBkaXNjdXNzID0gKHBhZ2UsIGlkZW50aWZpZXIpID0+IHtcclxuICAgICAgICBjb25zdCBkID0gZG9jdW1lbnQsXHJcbiAgICAgICAgICAgIHMgPSBkLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICAgIHdpbmRvdy5kaXNxdXNfY29uZmlnID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZS51cmwgPSBwYWdlO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2UuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzLnNyYyA9ICcvL2NhdGFyc2VmbGV4LmRpc3F1cy5jb20vZW1iZWQuanMnO1xyXG4gICAgICAgIHMuc2V0QXR0cmlidXRlKCdkYXRhLXRpbWVzdGFtcCcsICtuZXcgRGF0ZSgpKTtcclxuICAgICAgICAoZC5oZWFkIHx8IGQuYm9keSkuYXBwZW5kQ2hpbGQocyk7XHJcbiAgICAgICAgcmV0dXJuIG0oJycpO1xyXG4gICAgfSxcclxuXHJcbiAgICB2YWxpZGF0ZUVtYWlsID0gKGVtYWlsKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmUgPSAvXigoW148PigpW1xcXVxcLiw7Olxcc0BcXFwiXSsoXFwuW148PigpW1xcXVxcLiw7Olxcc0BcXFwiXSspKil8KFxcXCIuK1xcXCIpKUAoKFtePD4oKVtcXF1cXC4sOzpcXHNAXFxcIl0rXFwuKStbXjw+KClbXFxdXFwuLDs6XFxzQFxcXCJdezIsfSkkL2k7XHJcbiAgICAgICAgcmV0dXJuIHJlLnRlc3QoZW1haWwpO1xyXG4gICAgfSxcclxuXHJcbiAgICB2YWxpZGF0aW9uRXJyb3JzID0gbS5wcm9wKFtdKSxcclxuXHJcbiAgICByZXNldFZhbGlkYXRpb25zID0gKCkgPT4gdmFsaWRhdGlvbkVycm9ycyhbXSksXHJcblxyXG4gICAgdmFsaWRhdGUgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZXJyb3JGaWVsZHMgPSBtLnByb3AoW10pO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdWJtaXQoZmllbGRzLCBmbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNldFZhbGlkYXRpb25zKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKGZpZWxkcywgZmllbGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQucnVsZSA9PT0gJ2VtYWlsJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZGF0ZUVtYWlsKGZpZWxkLnByb3AoKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JzKCkucHVzaCh7ZmllbGQ6IGZpZWxkLnByb3AsIG1lc3NhZ2U6ICdFLW1haWwgaW52w6FsaWRvLid9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLnJ1bGUgPT09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLnByb3AoKS50cmltKCkgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9ycygpLnB1c2goe2ZpZWxkOiBmaWVsZC5wcm9wLCBtZXNzYWdlOiAnTyBjYW1wbyBuw6NvIHBvZGUgc2VyIHZhemlvLid9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXZhbGlkYXRpb25FcnJvcnMoKS5sZW5ndGggPiAwID8gZm4oKSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFzRXJyb3IoZmllbGRQcm9wKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5yZWR1Y2UodmFsaWRhdGlvbkVycm9ycygpLCAobWVtbywgZmllbGRFcnJvcikgPT4gZmllbGRFcnJvci5maWVsZCgpID09PSBmaWVsZFByb3AoKSB8fCBtZW1vLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBtb21lbnRGcm9tU3RyaW5nID0gKGRhdGUsIGZvcm1hdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGV1cm9wZWFuID0gbW9tZW50KGRhdGUsIGZvcm1hdCB8fCAnREQvTU0vWVlZWScpO1xyXG4gICAgICAgIHJldHVybiBldXJvcGVhbi5pc1ZhbGlkKCkgPyBldXJvcGVhbiA6IG1vbWVudChkYXRlKTtcclxuICAgIH0sXHJcblxyXG4gICAgdHJhbnNsYXRlZFRpbWVVbml0cyA9IHtcclxuICAgICAgICBkYXlzOiAnZGlhcycsXHJcbiAgICAgICAgbWludXRlczogJ21pbnV0b3MnLFxyXG4gICAgICAgIGhvdXJzOiAnaG9yYXMnLFxyXG4gICAgICAgIHNlY29uZHM6ICdzZWd1bmRvcydcclxuICAgIH0sXHJcbiAgICAvL09iamVjdCBtYW5pcHVsYXRpb24gaGVscGVyc1xyXG4gICAgdHJhbnNsYXRlZFRpbWUgPSAodGltZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZWRUaW1lID0gdHJhbnNsYXRlZFRpbWVVbml0cyxcclxuICAgICAgICAgICAgdW5pdCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb2pVbml0ID0gdHJhbnNsYXRlZFRpbWVbdGltZS51bml0IHx8ICdzZWNvbmRzJ107XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aW1lLnRvdGFsIDw9IDEpID8gcHJvalVuaXQuc2xpY2UoMCwgLTEpIDogcHJvalVuaXQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVuaXQ6IHVuaXQoKSxcclxuICAgICAgICAgICAgdG90YWw6IHRpbWUudG90YWxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvL051bWJlciBmb3JtYXR0aW5nIGhlbHBlcnNcclxuICAgIGdlbmVyYXRlRm9ybWF0TnVtYmVyID0gKHMsIGMpID0+IHtcclxuICAgICAgICByZXR1cm4gKG51bWJlciwgbiwgeCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIV8uaXNOdW1iZXIobnVtYmVyKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlID0gJ1xcXFxkKD89KFxcXFxkeycgKyAoeCB8fCAzKSArICd9KSsnICsgKG4gPiAwID8gJ1xcXFxEJyA6ICckJykgKyAnKScsXHJcbiAgICAgICAgICAgICAgICBudW0gPSBudW1iZXIudG9GaXhlZChNYXRoLm1heCgwLCB+fm4pKTtcclxuICAgICAgICAgICAgcmV0dXJuIChjID8gbnVtLnJlcGxhY2UoJy4nLCBjKSA6IG51bSkucmVwbGFjZShuZXcgUmVnRXhwKHJlLCAnZycpLCAnJCYnICsgKHMgfHwgJywnKSk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBmb3JtYXROdW1iZXIgPSBnZW5lcmF0ZUZvcm1hdE51bWJlcignLicsICcsJyksXHJcblxyXG4gICAgdG9nZ2xlUHJvcCA9IChkZWZhdWx0U3RhdGUsIGFsdGVybmF0ZVN0YXRlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcCA9IG0ucHJvcChkZWZhdWx0U3RhdGUpO1xyXG4gICAgICAgIHAudG9nZ2xlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcCgoKHAoKSA9PT0gYWx0ZXJuYXRlU3RhdGUpID8gZGVmYXVsdFN0YXRlIDogYWx0ZXJuYXRlU3RhdGUpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH0sXHJcblxyXG4gICAgaWRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xyXG4gICAgICAgIGlkOiAnZXEnXHJcbiAgICB9KSxcclxuXHJcbiAgICBnZXRDdXJyZW50UHJvamVjdCA9ICgpID0+IHtcclxuICAgICAgICBpZihfZGF0YUNhY2hlLmN1cnJlbnRQcm9qZWN0KVxyXG4gICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUuY3VycmVudFByb2plY3Q7XHJcblxyXG4gICAgICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdC1zaG93LXJvb3QnKSxcclxuICAgICAgICAgICAgICBkYXRhID0gcm9vdCAmJiByb290LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJhbWV0ZXJzJyk7XHJcbiAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUuY3VycmVudFByb2plY3QgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGdldFJkVG9rZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgaWYoX2RhdGFDYWNoZS5yZFRva2VuKVxyXG4gICAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUucmRUb2tlbjtcclxuXHJcbiAgICAgICAgY29uc3QgbWV0YSA9IF8uZmlyc3QoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW25hbWU9cmQtdG9rZW5dJykpO1xyXG4gICAgICAgIHJldHVybiBtZXRhID8gKF9kYXRhQ2FjaGUucmRUb2tlbj1tZXRhLmNvbnRlbnQpIDogdW5kZWZpbmVkO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRVc2VyID0gKCkgPT4ge1xyXG4gICAgICAgIGlmKF9kYXRhQ2FjaGUudXNlcilcclxuICAgICAgICAgIHJldHVybiBfZGF0YUNhY2hlLnVzZXI7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpLFxyXG4gICAgICAgICAgICBkYXRhID0gXy5maXJzdChib2R5KS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXNlcicpO1xyXG4gICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZGF0YUNhY2hlLnVzZXI9SlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBnZXRBcGlIb3N0ID0gKCkgPT4ge1xyXG4gICAgICBpZihfZGF0YUNhY2hlLmFwaUhvc3QpXHJcbiAgICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUuYXBpSG9zdDtcclxuXHJcbiAgICAgIHZhciBlbD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBpLWhvc3QnKTtcclxuICAgICAgcmV0dXJuIF9kYXRhQ2FjaGUuYXBpSG9zdCA9IGVsICYmIGVsLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xyXG4gICAgfSxcclxuXHJcbiAgICBsb2NhdGlvbkFjdGlvbk1hdGNoID0gKGFjdGlvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFjdCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpLnNsaWNlKC0xKVswXTtcclxuICAgICAgICByZXR1cm4gYWN0aW9uID09PSBhY3Q7XHJcbiAgICB9LFxyXG5cclxuICAgIHVzZUF2YXRhck9yRGVmYXVsdCA9IChhdmF0YXJQYXRoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGF2YXRhclBhdGggfHwgJy9hc3NldHMvY2F0YXJzZV9ib290c3RyYXAvdXNlci5qcGcnO1xyXG4gICAgfSxcclxuXHJcbiAgICAvL1RlbXBsYXRlc1xyXG4gICAgbG9hZGVyID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBtKCcudS10ZXh0LWNlbnRlci51LW1hcmdpbnRvcC0zMCB1LW1hcmdpbmJvdHRvbS0zMCcsIFtcclxuICAgICAgICAgICAgbSgnaW1nW2FsdD1cIkxvYWRlclwiXVtzcmM9XCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vY2F0YXJzZS5maWxlcy9sb2FkZXIuZ2lmXCJdJylcclxuICAgICAgICBdKTtcclxuICAgIH0sXHJcblxyXG4gICAgbmV3RmVhdHVyZUJhZGdlID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBtKCdzcGFuLmJhZGdlLmJhZGdlLXN1Y2Nlc3MubWFyZ2luLXNpZGUtNScsIEkxOG4udCgncHJvamVjdHMubmV3X2ZlYXR1cmVfYmFkZ2UnKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGZiUGFyc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdHJ5UGFyc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuRkIuWEZCTUwucGFyc2UoKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQodHJ5UGFyc2UsIDUwMCk7IC8vdXNlIHRpbWVvdXQgdG8gd2FpdCBhc3luYyBvZiBmYWNlYm9va1xyXG4gICAgfSxcclxuXHJcbiAgICBwbHVyYWxpemUgPSAoY291bnQsIHMsIHApID0+IHtcclxuICAgICAgICByZXR1cm4gKGNvdW50ID4gMSA/IGNvdW50ICsgcCA6IGNvdW50ICsgcyk7XHJcbiAgICB9LFxyXG5cclxuICAgIHN0cmlwID0gKGh0bWwpID0+ICB7XHJcbiAgICAgICAgdmFyIHRtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1x0XHRcclxuICAgICAgICB0bXAuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgICAgICByZXR1cm4gdG1wLnRleHRDb250ZW50IHx8IHRtcC5pbm5lclRleHQgfHwgJyc7XHJcbiAgICB9LFxyXG5cclxuICAgIHNpbXBsZUZvcm1hdCA9IChzdHIgPSAnJykgPT4ge1xyXG4gICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXHJcXG4/LywgJ1xcbicpO1xyXG4gICAgICAgIGlmIChzdHIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxuXFxuKy9nLCAnPC9wPjxwPicpO1xyXG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxuL2csICc8YnIgLz4nKTtcclxuICAgICAgICAgICAgc3RyID0gJzxwPicgKyBzdHIgKyAnPC9wPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9LFxyXG5cclxuICAgIHJld2FyZFNvdWxkT3V0ID0gKHJld2FyZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiAocmV3YXJkLm1heGltdW1fY29udHJpYnV0aW9ucyA+IDAgP1xyXG4gICAgICAgICAgICAocmV3YXJkLnBhaWRfY291bnQgKyByZXdhcmQud2FpdGluZ19wYXltZW50X2NvdW50ID49IHJld2FyZC5tYXhpbXVtX2NvbnRyaWJ1dGlvbnMpIDogZmFsc2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICByZXdhcmRSZW1hbmluZyA9IChyZXdhcmQpID0+IHtcclxuICAgICAgICByZXR1cm4gcmV3YXJkLm1heGltdW1fY29udHJpYnV0aW9ucyAtIChyZXdhcmQucGFpZF9jb3VudCArIHJld2FyZC53YWl0aW5nX3BheW1lbnRfY291bnQpO1xyXG4gICAgfSxcclxuXHJcbiAgICBwYXJzZVVybCA9IChocmVmKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBsLmhyZWYgPSBocmVmO1xyXG4gICAgICAgIHJldHVybiBsO1xyXG4gICAgfSxcclxuXHJcbiAgICBVSUhlbHBlciA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCAmJiAkKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuVUlIZWxwZXIuc2V0dXBSZXNwb25zaXZlSWZyYW1lcygkKGVsKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICB0b0FuY2hvciA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc2ggPT09IGVsLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gZWwuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBuYXZpZ2F0ZVRvRGV2aXNlID0gKCkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9wdC9sb2dpbic7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICBjdW11bGF0aXZlT2Zmc2V0ID0gKGVsZW1lbnQpID0+IHtcclxuICAgICAgICBsZXQgdG9wID0gMCwgbGVmdCA9IDA7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICB0b3AgKz0gZWxlbWVudC5vZmZzZXRUb3AgIHx8IDA7XHJcbiAgICAgICAgICAgIGxlZnQgKz0gZWxlbWVudC5vZmZzZXRMZWZ0IHx8IDA7XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcclxuICAgICAgICB9IHdoaWxlIChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9wOiB0b3AsXHJcbiAgICAgICAgICAgIGxlZnQ6IGxlZnRcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBjbG9zZU1vZGFsID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21vZGFsLWNsb3NlJylbMF07XHJcbiAgICAgICAgaWYgKF8uaXNFbGVtZW50KGVsKSl7XHJcbiAgICAgICAgICAgIGVsLm9uY2xpY2sgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbW9kYWwtYmFja2Ryb3AnKVswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIGNsb3NlRmxhc2ggPSAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaWNvbi1jbG9zZScpWzBdO1xyXG4gICAgICAgIGlmIChfLmlzRWxlbWVudChlbCkpe1xyXG4gICAgICAgICAgICBlbC5vbmNsaWNrID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsLnBhcmVudEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgaTE4blNjb3BlID0gKHNjb3BlLCBvYmopID0+IHtcclxuICAgICAgICBvYmogPSBvYmogfHwge307XHJcbiAgICAgICAgcmV0dXJuIF8uZXh0ZW5kKHt9LCBvYmosIHtzY29wZTogc2NvcGV9KTtcclxuICAgIH0sXHJcblxyXG4gICAgcmVkcmF3SGFzaENoYW5nZSA9IChiZWZvcmUpID0+IHtcclxuICAgICAgICBjb25zdCBjYWxsYmFjayA9IF8uaXNGdW5jdGlvbihiZWZvcmUpID9cclxuICAgICAgICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgYmVmb3JlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgICB9IDogbS5yZWRyYXc7XHJcblxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgY2FsbGJhY2ssIGZhbHNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgYXV0aGVudGljaXR5VG9rZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWV0YSA9IF8uZmlyc3QoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW25hbWU9Y3NyZi10b2tlbl0nKSk7XHJcbiAgICAgICAgcmV0dXJuIG1ldGEgPyBtZXRhLmNvbnRlbnQgOiB1bmRlZmluZWQ7XHJcbiAgICB9LFxyXG4gICAgYW5pbWF0ZVNjcm9sbFRvID0gKGVsKSA9PiB7XHJcbiAgICAgICAgbGV0IHNjcm9sbGVkID0gd2luZG93LnNjcm9sbFk7XHJcblxyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGN1bXVsYXRpdmVPZmZzZXQoZWwpLnRvcCxcclxuICAgICAgICAgICAgZHVyYXRpb24gPSAzMDAsXHJcbiAgICAgICAgICAgIGRGcmFtZSA9IChvZmZzZXQgLSBzY3JvbGxlZCkgLyBkdXJhdGlvbixcclxuICAgICAgICAgICAgLy9FYXNlSW5PdXRDdWJpYyBlYXNpbmcgZnVuY3Rpb24uIFdlJ2xsIGFic3RyYWN0IGFsbCBhbmltYXRpb24gZnVucyBsYXRlci5cclxuICAgICAgICAgICAgZWFzZWQgPSAodCkgPT4gdCA8IC41ID8gNCAqIHQgKiB0ICogdCA6ICh0IC0gMSkgKiAoMiAqIHQgLSAyKSAqICgyICogdCAtIDIpICsgMSxcclxuICAgICAgICAgICAgYW5pbWF0aW9uID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvcyA9IGVhc2VkKHNjcm9sbGVkIC8gb2Zmc2V0KSAqIHNjcm9sbGVkO1xyXG5cclxuICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBwb3MpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzY3JvbGxlZCA+PSBvZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsZWQgPSBzY3JvbGxlZCArIGRGcmFtZTtcclxuICAgICAgICAgICAgfSwgMSk7XHJcbiAgICB9LFxyXG4gICAgc2Nyb2xsVG8gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2V0VHJpZ2dlciA9IChlbCwgYW5jaG9ySWQpID0+IHtcclxuICAgICAgICAgICAgZWwub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvckVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYW5jaG9ySWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfLmlzRWxlbWVudChhbmNob3JFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlU2Nyb2xsVG8oYW5jaG9yRWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgc2V0VHJpZ2dlcihlbCwgZWwuaGFzaC5zbGljZSgxKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBSRFRyYWNrZXIgPSAoZXZlbnRJZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlZ3JhdGlvblNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICAgICAgICAgICAgaW50ZWdyYXRpb25TY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICAgICAgICAgICAgaW50ZWdyYXRpb25TY3JpcHQuaWQgPSAnUkRJbnRlZ3JhdGlvbic7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbnRlZ3JhdGlvblNjcmlwdC5pZCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaW50ZWdyYXRpb25TY3JpcHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGludGVncmF0aW9uU2NyaXB0Lm9ubG9hZCA9ICgpID0+IFJkSW50ZWdyYXRpb24uaW50ZWdyYXRlKGdldFJkVG9rZW4oKSwgZXZlbnRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRpb25TY3JpcHQuc3JjID0gJ2h0dHBzOi8vZDMzNWx1dXB1Z3N5Mi5jbG91ZGZyb250Lm5ldC9qcy9pbnRlZ3JhdGlvbi9zdGFibGUvcmQtanMtaW50ZWdyYXRpb24ubWluLmpzJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBhbmFseXRpY3NFdmVudCA9IChldmVudE9iaiwgZm49RnVuY3Rpb24ucHJvdG90eXBlKSA9PiB7XHJcbiAgICAgICAgLy9odHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hbmFseXRpY3MvZGV2Z3VpZGVzL2NvbGxlY3Rpb24vYW5hbHl0aWNzanMvY29tbWFuZC1xdWV1ZS1yZWZlcmVuY2Ujc2VuZFxyXG4gICAgICAgIGlmICghZXZlbnRPYmope1xyXG4gICAgICAgICAgICByZXR1cm4gZm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBmaXJlRXZlbnQgPSAoKSA9PiB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0ID0gZXZlbnRPYmoucHJvamVjdHx8Z2V0Q3VycmVudFByb2plY3QoKSxcclxuICAgICAgICAgICAgICAgICAgdXNlciA9IGdldFVzZXIoKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YVByb2plY3QgPSBwcm9qZWN0JiYocHJvamVjdC5pZHx8cHJvamVjdC5wcm9qZWN0X2lkKSA/IHtcclxuICAgICAgICAgICAgICBwcm9qZWN0OiB7XHJcbiAgICAgICAgICAgICAgICBpZDogcHJvamVjdC5pZHx8cHJvamVjdC5wcm9qZWN0X2lkLFxyXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcHJvamVjdC51c2VyX2lkLFxyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlfaWQ6IHByb2plY3QuY2F0ZWdvcnlfaWQsXHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogcHJvamVjdC5hZGRyZXNzICYmIHByb2plY3QuYWRkcmVzcy5zdGF0ZV9hY3JvbnltLFxyXG4gICAgICAgICAgICAgICAgY2l0eTogcHJvamVjdC5hZGRyZXNzICYmIHByb2plY3QuYWRkcmVzcy5jaXR5XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IDogbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgZGF0YVVzZXIgPSB1c2VyJiZ1c2VyLnVzZXJfaWQgPyB7XHJcbiAgICAgICAgICAgICAgdXNlcjoge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHVzZXIudXNlcl9pZCxcclxuICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnM6IHVzZXIuY29udHJpYnV0aW9ucyxcclxuICAgICAgICAgICAgICAgIHB1Ymxpc2hlZF9wcm9qZWN0czogdXNlci5wdWJsaXNoZWRfcHJvamVjdHNcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gOiBudWxsOy8vVE9ET1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gXy5leHRlbmQoe30sZXZlbnRPYmouZXh0cmFEYXRhLGRhdGFQcm9qZWN0LGRhdGFVc2VyKTtcclxuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbWFpbiA9IGxvY2F0aW9uLm9yaWdpbiB8fCAobG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICBjb25zdCBnYSA9IHdpbmRvdy5nYTsvL28gZ2EgdGVtIHEgc2VyIHZlcmlmaWNhZG8gYXF1aSBwcSBwb2RlIG7Do28gZXhpc3RpciBuYSBjcmlhw6dhw7UgZG8gRE9NXHJcbiAgICAgICAgICAgIGNvbnN0IGdhVHJhY2tlciA9IGdhICYmIGdhLmdldEFsbCAmJiAhXy5pc0VtcHR5KGdhLmdldEFsbCgpKSA/IF8uZmlyc3QoZ2EuZ2V0QWxsKCkpIDogbnVsbDtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBjb25zdCBzZW5kRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50OiBfLmV4dGVuZCh7fSxkYXRhLCB7XHJcbiAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBldmVudE9iai5jYXQsXHJcbiAgICAgICAgICAgICAgICAgIGFjdGlvbjogZXZlbnRPYmouYWN0LFxyXG4gICAgICAgICAgICAgICAgICBsYWJlbDogZXZlbnRPYmoubGJsLFxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogZXZlbnRPYmoudmFsLFxyXG4gICAgICAgICAgICAgICAgICByZXF1ZXN0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJyZXI6IGRvY3VtZW50LnJlZmVycmVyfHx1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBsb2NhdGlvbi5ocmVmLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb3RvY29sOiBsb2NhdGlvbi5wcm90b2NvbC5zdWJzdHIoMCxsb2NhdGlvbi5wcm90b2NvbC5sZW5ndGgtMSksXHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdG5hbWU6IGxvY2F0aW9uLmhvc3RuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbjogZG9tYWluLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSB8fCBsb2NhdGlvbi5ocmVmLnN1YnN0cihkb21haW4ubGVuZ3RoKS5yZXBsYWNlKC9bXFw/XFwjXS4qJC8sJycpLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhc2g6IGxvY2F0aW9uLmhhc2gucmVwbGFjZSgvXlxcIy8sJycpLFxyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAoZnVuY3Rpb24gcGFyc2VQYXJhbXMoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxvY2F0aW9uLnNlYXJjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRpb24uc2VhcmNoLnJlcGxhY2UoL15cXD8vLCcnKS5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbiAocGFyYW1zLCBwYXJhbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbVNwbGl0ID0gcGFyYW0uc3BsaXQoJz0nKS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUucmVwbGFjZSgnKycsICcgJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1twYXJhbVNwbGl0WzBdXSA9IHBhcmFtU3BsaXRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbi5zZWFyY2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSkoKVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgKGdhVHJhY2tlcj97Z2E6e2NsaWVudElkOiBnYVRyYWNrZXIuZ2V0KCdjbGllbnRJZCcpfX06bnVsbClcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgICAgICAgdXJsOiBnZXRBcGlIb3N0KCkrJy9ycGMvdHJhY2snLFxyXG4gICAgICAgICAgICAgICAgICAvLyBUaGUga2V5IG5lZWRzIHRvIG1hdGNoIHlvdXIgbWV0aG9kJ3MgaW5wdXQgcGFyYW1ldGVyIChjYXNlLXNlbnNpdGl2ZSkuXHJcbiAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHNlbmREYXRhKSxcclxuICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiLFxyXG4gICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXHJcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbaC5hbmFseXRpY3NFdmVudF0gL3RyYWNrIG9rJywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uKGVyck1zZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW2guYW5hbHl0aWNzRXZlbnRdIGVycm9yOicsIGUpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1toLmFuYWx5dGljc0V2ZW50XSBlcnJvcjonLCBlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYodHlwZW9mIGdhPT09J2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgIC8vaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2FuYWx5dGljc2pzL3NlbmRpbmctaGl0cyN0aGVfc2VuZF9tZXRob2RcclxuICAgICAgICAgICAgICBnYSgnc2VuZCcsICdldmVudCcsIGV2ZW50T2JqLmNhdCwgZXZlbnRPYmouYWN0LCBldmVudE9iai5sYmwsIGV2ZW50T2JqLnZhbCwge1xyXG4gICAgICAgICAgICAgICAgbm9uSW50ZXJhY3Rpb246IGV2ZW50T2JqLm5vbkludGVyYWN0aW9uIT09ZmFsc2UsLy9kZWZhdWx0IMOpIHRydWUsZSBzw7Mgc2Vyw6EgZmFsc2Ugc2UsIGUgc29tZW50ZSBzZSwgZXNzZSBwYXJhbWV0cm8gZm9yIGRlZmluaWRvIGNvbW8gZmFsc2VcclxuICAgICAgICAgICAgICAgIHRyYW5zcG9ydDogJ2JlYWNvbidcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1toLmFuYWx5dGljc0V2ZW50XSBlcnJvcjonLGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGZpcmVFdmVudCgpO1xyXG4gICAgICAgICAgICBmbigpO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgX2FuYWx5dGljc09uZVRpbWVFdmVudEZpcmVkID0ge30sXHJcbiAgICBhbmFseXRpY3NPbmVUaW1lRXZlbnQgPSAoZXZlbnRPYmosIGZuKSA9PiB7XHJcbiAgICAgICAgaWYgKCFldmVudE9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gZm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBldmVudEtleSA9IF8uY29tcGFjdChbZXZlbnRPYmouY2F0LGV2ZW50T2JqLmFjdF0pLmpvaW4oJ18nKTtcclxuICAgICAgICBpZiAoIWV2ZW50S2V5KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2hvdWxkIGluZm9ybSBjYXQgb3IgYWN0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZpcmVFdmVudCA9IGFuYWx5dGljc0V2ZW50KGV2ZW50T2JqLCBmbik7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFfYW5hbHl0aWNzT25lVGltZUV2ZW50RmlyZWRbZXZlbnRLZXldKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdvbmVUaW1lRXZlbnQnLGV2ZW50S2V5KTtcclxuICAgICAgICAgICAgICAgIF9hbmFseXRpY3NPbmVUaW1lRXZlbnRGaXJlZFtldmVudEtleV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFuYWx5dGljc1dpbmRvd1Njcm9sbCA9IChldmVudE9iaikgPT4ge1xyXG4gICAgICAgIGlmIChldmVudE9iaikge1xyXG4gICAgICAgICAgICBsZXQgZmlyZUV2ZW50ID0gYW5hbHl0aWNzRXZlbnQoZXZlbnRPYmopO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCd3aW5kb3dTY3JvbGwnKTtcclxuICAgICAgICAgICAgICAgIGlmIChmaXJlRXZlbnQgJiYgJCAmJiAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSA+ICQod2luZG93KS5oZWlnaHQoKSAqICgzIC8gNCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYW5hbHl0aWNzID0ge1xyXG4gICAgICAgIGV2ZW50OiBhbmFseXRpY3NFdmVudCxcclxuICAgICAgICBvbmVUaW1lRXZlbnQ6IGFuYWx5dGljc09uZVRpbWVFdmVudCxcclxuICAgICAgICB3aW5kb3dTY3JvbGw6IGFuYWx5dGljc1dpbmRvd1Njcm9sbFxyXG4gICAgfTtcclxuXHJcbnNldE1vbWVudGlmeUxvY2FsZSgpO1xyXG5jbG9zZUZsYXNoKCk7XHJcbmNsb3NlTW9kYWwoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGF1dGhlbnRpY2l0eVRva2VuLFxyXG4gICAgY3VtdWxhdGl2ZU9mZnNldCxcclxuICAgIGRpc2N1c3MsXHJcbiAgICBleGlzdHksXHJcbiAgICB2YWxpZGF0ZUVtYWlsLFxyXG4gICAgbW9tZW50aWZ5LFxyXG4gICAgbW9tZW50RnJvbVN0cmluZyxcclxuICAgIGZvcm1hdE51bWJlcixcclxuICAgIGlkVk0sXHJcbiAgICBnZXRVc2VyLFxyXG4gICAgZ2V0QXBpSG9zdCxcclxuICAgIGdldEN1cnJlbnRQcm9qZWN0LFxyXG4gICAgdG9nZ2xlUHJvcCxcclxuICAgIGxvYWRlcixcclxuICAgIG5ld0ZlYXR1cmVCYWRnZSxcclxuICAgIGZiUGFyc2UsXHJcbiAgICBwbHVyYWxpemUsXHJcbiAgICBzaW1wbGVGb3JtYXQsXHJcbiAgICB0cmFuc2xhdGVkVGltZSxcclxuICAgIHJld2FyZFNvdWxkT3V0LFxyXG4gICAgcmV3YXJkUmVtYW5pbmcsXHJcbiAgICBwYXJzZVVybCxcclxuICAgIGhhc2hNYXRjaCxcclxuICAgIHJlZHJhd0hhc2hDaGFuZ2UsXHJcbiAgICB1c2VBdmF0YXJPckRlZmF1bHQsXHJcbiAgICBsb2NhdGlvbkFjdGlvbk1hdGNoLFxyXG4gICAgbmF2aWdhdGVUb0RldmlzZSxcclxuICAgIHN0b3JlQWN0aW9uLFxyXG4gICAgY2FsbFN0b3JlZEFjdGlvbixcclxuICAgIFVJSGVscGVyLFxyXG4gICAgdG9BbmNob3IsXHJcbiAgICBwYXJhbUJ5TmFtZSxcclxuICAgIGkxOG5TY29wZSxcclxuICAgIFJEVHJhY2tlcixcclxuICAgIHNlbGZPckVtcHR5LFxyXG4gICAgc2Nyb2xsVG8sXHJcbiAgICB2YWxpZGF0aW9uRXJyb3JzLFxyXG4gICAgdmFsaWRhdGUsXHJcbiAgICBhbmFseXRpY3MsXHJcbiAgICBzdHJpcFxyXG59O1xyXG4iLCJpbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcclxuXHJcbmNvbnN0IG1vZGVscyA9IHtcclxuICAgIGNvbnRyaWJ1dGlvbkRldGFpbDogcG9zdGdyZXN0Lm1vZGVsKCdjb250cmlidXRpb25fZGV0YWlscycpLFxyXG4gICAgY29udHJpYnV0aW9uQWN0aXZpdHk6IHBvc3RncmVzdC5tb2RlbCgnY29udHJpYnV0aW9uX2FjdGl2aXRpZXMnKSxcclxuICAgIHByb2plY3REZXRhaWw6IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF9kZXRhaWxzJyksXHJcbiAgICB1c2VyRGV0YWlsOiBwb3N0Z3Jlc3QubW9kZWwoJ3VzZXJfZGV0YWlscycpLFxyXG4gICAgYmFsYW5jZTogcG9zdGdyZXN0Lm1vZGVsKCdiYWxhbmNlcycpLFxyXG4gICAgYmFsYW5jZVRyYW5zYWN0aW9uOiBwb3N0Z3Jlc3QubW9kZWwoJ2JhbGFuY2VfdHJhbnNhY3Rpb25zJyksXHJcbiAgICBiYWxhbmNlVHJhbnNmZXI6IHBvc3RncmVzdC5tb2RlbCgnYmFsYW5jZV90cmFuc2ZlcnMnKSxcclxuICAgIHVzZXI6IHBvc3RncmVzdC5tb2RlbCgndXNlcnMnKSxcclxuICAgIGJhbmtBY2NvdW50OiBwb3N0Z3Jlc3QubW9kZWwoJ2JhbmtfYWNjb3VudHMnKSxcclxuICAgIHJld2FyZERldGFpbDogcG9zdGdyZXN0Lm1vZGVsKCdyZXdhcmRfZGV0YWlscycpLFxyXG4gICAgcHJvamVjdFJlbWluZGVyOiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RfcmVtaW5kZXJzJyksXHJcbiAgICBwcm9qZWN0UmVwb3J0OiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RfcmVwb3J0cycpLFxyXG4gICAgY29udHJpYnV0aW9uczogcG9zdGdyZXN0Lm1vZGVsKCdjb250cmlidXRpb25zJyksXHJcbiAgICBkaXJlY3RNZXNzYWdlOiBwb3N0Z3Jlc3QubW9kZWwoJ2RpcmVjdF9tZXNzYWdlcycpLFxyXG4gICAgdGVhbVRvdGFsOiBwb3N0Z3Jlc3QubW9kZWwoJ3RlYW1fdG90YWxzJyksXHJcbiAgICBwcm9qZWN0QWNjb3VudDogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X2FjY291bnRzJyksXHJcbiAgICBwcm9qZWN0Q29udHJpYnV0aW9uOiBwb3N0Z3Jlc3QubW9kZWwoJ3Byb2plY3RfY29udHJpYnV0aW9ucycpLFxyXG4gICAgcHJvamVjdFBvc3REZXRhaWw6IHBvc3RncmVzdC5tb2RlbCgncHJvamVjdF9wb3N0c19kZXRhaWxzJyksXHJcbiAgICBwcm9qZWN0Q29udHJpYnV0aW9uc1BlckRheTogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X2NvbnRyaWJ1dGlvbnNfcGVyX2RheScpLFxyXG4gICAgcHJvamVjdENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbjogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X2NvbnRyaWJ1dGlvbnNfcGVyX2xvY2F0aW9uJyksXHJcbiAgICBwcm9qZWN0Q29udHJpYnV0aW9uc1BlclJlZjogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0X2NvbnRyaWJ1dGlvbnNfcGVyX3JlZicpLFxyXG4gICAgcHJvamVjdDogcG9zdGdyZXN0Lm1vZGVsKCdwcm9qZWN0cycpLFxyXG4gICAgcHJvamVjdFNlYXJjaDogcG9zdGdyZXN0Lm1vZGVsKCdycGMvcHJvamVjdF9zZWFyY2gnKSxcclxuICAgIGNhdGVnb3J5OiBwb3N0Z3Jlc3QubW9kZWwoJ2NhdGVnb3JpZXMnKSxcclxuICAgIGNhdGVnb3J5VG90YWxzOiBwb3N0Z3Jlc3QubW9kZWwoJ2NhdGVnb3J5X3RvdGFscycpLFxyXG4gICAgY2F0ZWdvcnlGb2xsb3dlcjogcG9zdGdyZXN0Lm1vZGVsKCdjYXRlZ29yeV9mb2xsb3dlcnMnKSxcclxuICAgIHRlYW1NZW1iZXI6IHBvc3RncmVzdC5tb2RlbCgndGVhbV9tZW1iZXJzJyksXHJcbiAgICBub3RpZmljYXRpb246IHBvc3RncmVzdC5tb2RlbCgnbm90aWZpY2F0aW9ucycpLFxyXG4gICAgc3RhdGlzdGljOiBwb3N0Z3Jlc3QubW9kZWwoJ3N0YXRpc3RpY3MnKSxcclxuICAgIHN1Y2Nlc3NmdWxQcm9qZWN0OiBwb3N0Z3Jlc3QubW9kZWwoJ3N1Y2Nlc3NmdWxfcHJvamVjdHMnKSxcclxuICAgIGZpbmlzaGVkUHJvamVjdDogcG9zdGdyZXN0Lm1vZGVsKCdmaW5pc2hlZF9wcm9qZWN0cycpXHJcbn07XHJcblxyXG5tb2RlbHMudGVhbU1lbWJlci5wYWdlU2l6ZSg0MCk7XHJcbm1vZGVscy5yZXdhcmREZXRhaWwucGFnZVNpemUoZmFsc2UpO1xyXG5tb2RlbHMucHJvamVjdC5wYWdlU2l6ZSgzMCk7XHJcbm1vZGVscy5jYXRlZ29yeS5wYWdlU2l6ZSg1MCk7XHJcbm1vZGVscy5jb250cmlidXRpb25BY3Rpdml0eS5wYWdlU2l6ZSg0MCk7XHJcbm1vZGVscy5zdWNjZXNzZnVsUHJvamVjdC5wYWdlU2l6ZSg5KTtcclxubW9kZWxzLmZpbmlzaGVkUHJvamVjdC5wYWdlU2l6ZSg5KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1vZGVscztcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnVzZXIsICdpZC5kZXNjJywgeydQcmVmZXInOiAnY291bnQ9ZXhhY3QnfSk7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgcmVwbGFjZURpYWNyaXRpY3MgZnJvbSAncmVwbGFjZURpYWNyaXRpY3MnO1xyXG5cclxuY29uc3Qgdm0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcclxuICAgICAgICBmdWxsX3RleHRfaW5kZXg6ICdAQCcsXHJcbiAgICAgICAgZGVhY3RpdmF0ZWRfYXQ6ICdpcy5udWxsJ1xyXG4gICAgfSksXHJcblxyXG4gICAgcGFyYW1Ub1N0cmluZyA9IGZ1bmN0aW9uKHApIHtcclxuICAgICAgICByZXR1cm4gKHAgfHwgJycpLnRvU3RyaW5nKCkudHJpbSgpO1xyXG4gICAgfTtcclxuXHJcbi8vIFNldCBkZWZhdWx0IHZhbHVlc1xyXG52bS5kZWFjdGl2YXRlZF9hdChudWxsKS5vcmRlcih7XHJcbiAgICBpZDogJ2Rlc2MnXHJcbn0pO1xyXG5cclxudm0uZGVhY3RpdmF0ZWRfYXQudG9GaWx0ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBmaWx0ZXIgPSBKU09OLnBhcnNlKHZtLmRlYWN0aXZhdGVkX2F0KCkpO1xyXG4gICAgcmV0dXJuIGZpbHRlcjtcclxufTtcclxuXHJcbnZtLmZ1bGxfdGV4dF9pbmRleC50b0ZpbHRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGZpbHRlciA9IHBhcmFtVG9TdHJpbmcodm0uZnVsbF90ZXh0X2luZGV4KCkpO1xyXG4gICAgcmV0dXJuIGZpbHRlciAmJiByZXBsYWNlRGlhY3JpdGljcyhmaWx0ZXIpIHx8IHVuZGVmaW5lZDtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHZtO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuXHJcbmNvbnN0IGZpbHRlck1haW4gPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBpbnB1dFdyYXBwZXJDbGFzcyA9IGFyZ3MuaW5wdXRXcmFwcGVyQ2xhc3MgfHwgJy53LWlucHV0LnRleHQtZmllbGQucG9zaXRpdmUubWVkaXVtJyxcclxuICAgICAgICAgICAgICBidG5DbGFzcyA9IGFyZ3MuYnRuQ2xhc3MgfHwgJy5idG4uYnRuLWxhcmdlLnUtbWFyZ2luYm90dG9tLTEwJztcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwJywgW1xyXG4gICAgICAgICAgICAgICAgbShgaW5wdXQke2lucHV0V3JhcHBlckNsYXNzfVtwbGFjZWhvbGRlcj1cIiR7YXJncy5wbGFjZWhvbGRlcn1cIl1bdHlwZT1cInRleHRcIl1gLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgYXJncy52bSksXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFyZ3Mudm0oKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJywgW1xyXG4gICAgICAgICAgICAgICAgbShgaW5wdXQjZmlsdGVyLWJ0biR7YnRuQ2xhc3N9W3R5cGU9XCJzdWJtaXRcIl1bdmFsdWU9XCJCdXNjYXJcIl1gKVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZmlsdGVyTWFpbjtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IGZpbHRlck1haW4gZnJvbSAnLi9maWx0ZXItbWFpbic7XHJcblxyXG5jb25zdCBhZG1pbkZpbHRlciA9IHtcclxuICAgIGNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9nZ2xlcjogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyQnVpbGRlciA9IGFyZ3MuZmlsdGVyQnVpbGRlcixcclxuICAgICAgICAgICAgZGF0YSA9IGFyZ3MuZGF0YSxcclxuICAgICAgICAgICAgbGFiZWwgPSBhcmdzLmxhYmVsIHx8ICcnLFxyXG4gICAgICAgICAgICBtYWluID0gXy5maW5kV2hlcmUoZmlsdGVyQnVpbGRlciwge1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBmaWx0ZXJNYWluXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbSgnI2FkbWluLWNvbnRyaWJ1dGlvbnMtZmlsdGVyLnctc2VjdGlvbi5wYWdlLWhlYWRlcicsIFtcclxuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlci51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTMwJywgbGFiZWwpLFxyXG4gICAgICAgICAgICAgICAgbSgnLnctZm9ybScsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCdmb3JtJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbnN1Ym1pdDogYXJncy5zdWJtaXRcclxuICAgICAgICAgICAgICAgICAgICB9LCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW4gPyBtLmNvbXBvbmVudChtYWluLmNvbXBvbmVudCwgbWFpbi5kYXRhKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tMjAudy1yb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYnV0dG9uLnctY29sLnctY29sLTEyLmZvbnRzaXplLXNtYWxsZXN0LmxpbmstaGlkZGVuLWxpZ2h0W3N0eWxlPVwiYmFja2dyb3VuZDogbm9uZTsgYm9yZGVyOiBub25lOyBvdXRsaW5lOiBub25lOyB0ZXh0LWFsaWduOiBsZWZ0O1wiXVt0eXBlPVwiYnV0dG9uXCJdJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlci50b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdGaWx0cm9zIGF2YW7Dp2Fkb3MgwqA+JykpLCAoY3RybC50b2dnbGVyKCkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnI2FkdmFuY2VkLXNlYXJjaC53LXJvdy5hZG1pbi1maWx0ZXJzJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGZpbHRlckJ1aWxkZXIsIGZ1bmN0aW9uKGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmLmNvbXBvbmVudCAhPT0gZmlsdGVyTWFpbikgPyBtLmNvbXBvbmVudChmLmNvbXBvbmVudCwgZi5kYXRhKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkbWluRmlsdGVyO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5cclxuY29uc3QgYWRtaW5JdGVtID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZGlzcGxheURldGFpbEJveDogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IGFyZ3MuaXRlbTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJy53LWNsZWFyZml4LmNhcmQudS1yYWRpdXMudS1tYXJnaW5ib3R0b20tMjAucmVzdWx0cy1hZG1pbi1pdGVtcycsIFtcclxuICAgICAgICAgICAgbS5jb21wb25lbnQoYXJncy5saXN0SXRlbSwge1xyXG4gICAgICAgICAgICAgICAgaXRlbTogaXRlbSxcclxuICAgICAgICAgICAgICAgIGtleTogYXJncy5rZXlcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG0oJ2J1dHRvbi53LWlubGluZS1ibG9jay5hcnJvdy1hZG1pbi5mYS5mYS1jaGV2cm9uLWRvd24uZm9udGNvbG9yLXNlY29uZGFyeScsIHtcclxuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwuZGlzcGxheURldGFpbEJveC50b2dnbGVcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGN0cmwuZGlzcGxheURldGFpbEJveCgpID8gbS5jb21wb25lbnQoYXJncy5saXN0RGV0YWlsLCB7XHJcbiAgICAgICAgICAgICAgICBpdGVtOiBpdGVtLFxyXG4gICAgICAgICAgICAgICAga2V5OiBhcmdzLmtleVxyXG4gICAgICAgICAgICB9KSA6ICcnXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZG1pbkl0ZW07XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IGFkbWluSXRlbSBmcm9tICcuL2FkbWluLWl0ZW0nO1xyXG5cclxuY29uc3QgYWRtaW5MaXN0ID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdCA9IGFyZ3Mudm0ubGlzdDtcclxuXHJcbiAgICAgICAgaWYgKCFsaXN0LmNvbGxlY3Rpb24oKS5sZW5ndGggJiYgbGlzdC5maXJzdFBhZ2UpIHtcclxuICAgICAgICAgICAgbGlzdC5maXJzdFBhZ2UoKS50aGVuKG51bGwsIGZ1bmN0aW9uKHNlcnZlckVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBhcmdzLnZtLmVycm9yKHNlcnZlckVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdCA9IGFyZ3Mudm0ubGlzdCxcclxuICAgICAgICAgICAgZXJyb3IgPSBhcmdzLnZtLmVycm9yLFxyXG4gICAgICAgICAgICBsYWJlbCA9IGFyZ3MubGFiZWwgfHwgJyc7XHJcblxyXG4gICAgICAgIHJldHVybiBtKCcudy1zZWN0aW9uLnNlY3Rpb24nLCBbXHJcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsXHJcbiAgICAgICAgICAgICAgICBlcnJvcigpID9cclxuICAgICAgICAgICAgICAgIG0oJy5jYXJkLmNhcmQtZXJyb3IudS1yYWRpdXMuZm9udHdlaWdodC1ib2xkJywgZXJyb3IoKSkgOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTIwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmlzTG9hZGluZygpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgQ2FycmVnYW5kbyAke2xhYmVsLnRvTG93ZXJDYXNlKCl9Li4uYCA6IFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBsaXN0LnRvdGFsKCkpLCBgICR7bGFiZWwudG9Mb3dlckNhc2UoKX0gZW5jb250cmFkb3NgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJyNhZG1pbi1jb250cmlidXRpb25zLWxpc3Qudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuY29sbGVjdGlvbigpLm1hcCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KGFkbWluSXRlbSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RJdGVtOiBhcmdzLmxpc3RJdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3REZXRhaWw6IGFyZ3MubGlzdERldGFpbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtOiBpdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogaXRlbS5pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24nLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1wdXNoLTUnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmlzTG9hZGluZygpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgubG9hZGVyKCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYnV0dG9uI2xvYWQtbW9yZS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogbGlzdC5uZXh0UGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ0NhcnJlZ2FyIG1haXMnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZG1pbkxpc3Q7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IGFkbWluVXNlciA9IHtcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhcmdzLml0ZW07XHJcblxyXG4gICAgICAgIHJldHVybiBtKCcudy1yb3cuYWRtaW4tdXNlcicsIFtcclxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtMy51LW1hcmdpbmJvdHRvbS0xMCcsIFtcclxuICAgICAgICAgICAgICAgIG0oJ2ltZy51c2VyLWF2YXRhcltzcmM9XCInICsgaC51c2VBdmF0YXJPckRlZmF1bHQodXNlci5wcm9maWxlX2ltZ190aHVtYm5haWwpICsgJ1wiXScpXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOS53LWNvbC1zbWFsbC05JywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtc21hbGxlci5saW5laGVpZ2h0LXRpZ2h0ZXIudS1tYXJnaW5ib3R0b20tMTAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1t0YXJnZXQ9XCJfYmxhbmtcIl1baHJlZj1cIi91c2Vycy8nICsgdXNlci5pZCArICcvZWRpdFwiXScsIHVzZXIubmFtZSB8fCB1c2VyLmVtYWlsKVxyXG4gICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QnLCAnVXN1w6FyaW86ICcgKyB1c2VyLmlkKSxcclxuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJ0VtYWlsOiAnICsgdXNlci5lbWFpbCksXHJcbiAgICAgICAgICAgICAgICBhcmdzLmFkZGl0aW9uYWxfZGF0YVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Vc2VyO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcbmltcG9ydCBhZG1pblVzZXIgZnJvbSAnLi9hZG1pbi11c2VyJztcclxuXHJcbmNvbnN0IGFkbWluVXNlckl0ZW0gPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbShcclxuICAgICAgICAgICAgJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluVXNlciwgYXJncylcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Vc2VySXRlbTtcclxuIiwiLyoqXHJcbiAqIHdpbmRvdy5jLkFkbWluUmVzZXRQYXNzd29yZCBjb21wb25lbnRcclxuICogTWFrZXMgYWpheCByZXF1ZXN0IHRvIHVwZGF0ZSBVc2VyIHBhc3N3b3JkLlxyXG4gKlxyXG4gKiBFeGFtcGxlOlxyXG4gKiBtLmNvbXBvbmVudChjLkFkbWluUmVzZXRQYXNzd29yZCwge1xyXG4gKiAgICAgZGF0YToge30sXHJcbiAqICAgICBpdGVtOiByb3dGcm9tRGF0YWJhc2VcclxuICogfSlcclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcblxyXG5jb25zdCBhZG1pblJlc2V0UGFzc3dvcmQgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBsZXQgYnVpbGRlciA9IGFyZ3MuZGF0YSxcclxuICAgICAgICAgICAgY29tcGxldGUgPSBtLnByb3AoZmFsc2UpLFxyXG4gICAgICAgICAgICBlcnJvciA9IG0ucHJvcChmYWxzZSksXHJcbiAgICAgICAgICAgIGZhaWwgPSBtLnByb3AoZmFsc2UpLFxyXG4gICAgICAgICAgICBrZXkgPSBidWlsZGVyLnByb3BlcnR5LFxyXG4gICAgICAgICAgICBkYXRhID0ge30sXHJcbiAgICAgICAgICAgIGl0ZW0gPSBhcmdzLml0ZW07XHJcblxyXG4gICAgICAgIGJ1aWxkZXIucmVxdWVzdE9wdGlvbnMuY29uZmlnID0gKHhocikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaC5hdXRoZW50aWNpdHlUb2tlbigpKSB7XHJcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1DU1JGLVRva2VuJywgaC5hdXRoZW50aWNpdHlUb2tlbigpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGwgPSBtLnByb3AoZmFsc2UpLFxyXG4gICAgICAgICAgICBsb2FkID0gKCkgPT4gbS5yZXF1ZXN0KF8uZXh0ZW5kKHt9LCB7ZGF0YTogZGF0YX0sIGJ1aWxkZXIucmVxdWVzdE9wdGlvbnMpKSxcclxuICAgICAgICAgICAgbmV3UGFzc3dvcmQgPSBtLnByb3AoJycpLFxyXG4gICAgICAgICAgICBlcnJvcl9tZXNzYWdlID0gbS5wcm9wKCcnKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdEVycm9yID0gKGVycikgPT4ge1xyXG4gICAgICAgICAgICBsKGZhbHNlKTtcclxuICAgICAgICAgICAgZXJyb3JfbWVzc2FnZShlcnIuZXJyb3JzWzBdKTtcclxuICAgICAgICAgICAgY29tcGxldGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIGVycm9yKHRydWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgdXBkYXRlSXRlbSA9IChyZXMpID0+IHtcclxuICAgICAgICAgICAgbChmYWxzZSk7XHJcbiAgICAgICAgICAgIF8uZXh0ZW5kKGl0ZW0sIHJlc1swXSk7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xyXG4gICAgICAgICAgICBlcnJvcihmYWxzZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3VibWl0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBsKHRydWUpO1xyXG4gICAgICAgICAgICBkYXRhW2tleV0gPSBuZXdQYXNzd29yZCgpO1xyXG4gICAgICAgICAgICBsb2FkKCkudGhlbih1cGRhdGVJdGVtLCByZXF1ZXN0RXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgdW5sb2FkID0gKGVsLCBpc2luaXQsIGNvbnRleHQpID0+IHtcclxuICAgICAgICAgICAgY29udGV4dC5vbnVubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSxcclxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxyXG4gICAgICAgICAgICBlcnJvcl9tZXNzYWdlOiBlcnJvcl9tZXNzYWdlLFxyXG4gICAgICAgICAgICBsOiBsLFxyXG4gICAgICAgICAgICBuZXdQYXNzd29yZDogbmV3UGFzc3dvcmQsXHJcbiAgICAgICAgICAgIHN1Ym1pdDogc3VibWl0LFxyXG4gICAgICAgICAgICB0b2dnbGVyOiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpLFxyXG4gICAgICAgICAgICB1bmxvYWQ6IHVubG9hZFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3MuZGF0YSxcclxuICAgICAgICAgICAgYnRuVmFsdWUgPSAoY3RybC5sKCkpID8gJ3BvciBmYXZvciwgYWd1YXJkZS4uLicgOiBkYXRhLmNhbGxUb0FjdGlvbjtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC0yJywgW1xyXG4gICAgICAgICAgICBtKCdidXR0b24uYnRuLmJ0bi1zbWFsbC5idG4tdGVyY2lhcnknLCB7XHJcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnRvZ2dsZXIudG9nZ2xlXHJcbiAgICAgICAgICAgIH0sIGRhdGEub3V0ZXJMYWJlbCksIChjdHJsLnRvZ2dsZXIoKSkgP1xyXG4gICAgICAgICAgICBtKCcuZHJvcGRvd24tbGlzdC5jYXJkLnUtcmFkaXVzLmRyb3Bkb3duLWxpc3QtbWVkaXVtLnppbmRleC0xMCcsIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC51bmxvYWRcclxuICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgbSgnZm9ybS53LWZvcm0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGN0cmwuc3VibWl0XHJcbiAgICAgICAgICAgICAgICB9LCAoIWN0cmwuY29tcGxldGUoKSkgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwnLCBkYXRhLmlubmVyTGFiZWwpLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZFt0eXBlPVwidGV4dFwiXVtuYW1lPVwiJyArIGRhdGEucHJvcGVydHkgKyAnXCJdW3BsYWNlaG9sZGVyPVwiJyArIGRhdGEucGxhY2Vob2xkZXIgKyAnXCJdJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLm5ld1Bhc3N3b3JkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwubmV3UGFzc3dvcmQoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctYnV0dG9uLmJ0bi5idG4tc21hbGxbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIicgKyBidG5WYWx1ZSArICdcIl0nKVxyXG4gICAgICAgICAgICAgICAgXSA6ICghY3RybC5lcnJvcigpKSA/IFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtLWRvbmVbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsICdTZW5oYSBhbHRlcmFkYSBjb20gc3VjZXNzby4nKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdIDogW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWZvcm0tZXJyb3Jbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsIGN0cmwuZXJyb3JfbWVzc2FnZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKSA6ICcnXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZG1pblJlc2V0UGFzc3dvcmQ7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IGFkbWluSW5wdXRBY3Rpb24gPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBidWlsZGVyID0gYXJncy5kYXRhLFxyXG4gICAgICAgICAgICBjb21wbGV0ZSA9IG0ucHJvcChmYWxzZSksXHJcbiAgICAgICAgICAgIGVycm9yID0gbS5wcm9wKGZhbHNlKSxcclxuICAgICAgICAgICAgZmFpbCA9IG0ucHJvcChmYWxzZSksXHJcbiAgICAgICAgICAgIGRhdGEgPSB7fSxcclxuICAgICAgICAgICAgaXRlbSA9IGFyZ3MuaXRlbSxcclxuICAgICAgICAgICAga2V5ID0gYnVpbGRlci5wcm9wZXJ0eSxcclxuICAgICAgICAgICAgZm9yY2VWYWx1ZSA9IGJ1aWxkZXIuZm9yY2VWYWx1ZSB8fCBudWxsLFxyXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG0ucHJvcChmb3JjZVZhbHVlKTtcclxuXHJcbiAgICAgICAgaC5pZFZNLmlkKGl0ZW1bYnVpbGRlci51cGRhdGVLZXldKTtcclxuXHJcbiAgICAgICAgY29uc3QgbCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4oYnVpbGRlci5tb2RlbC5wYXRjaE9wdGlvbnMoaC5pZFZNLnBhcmFtZXRlcnMoKSwgZGF0YSkpO1xyXG5cclxuICAgICAgICBjb25zdCB1cGRhdGVJdGVtID0gZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgICAgICAgIF8uZXh0ZW5kKGl0ZW0sIHJlc1swXSk7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xyXG4gICAgICAgICAgICBlcnJvcihmYWxzZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3VibWl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IG5ld1ZhbHVlKCk7XHJcbiAgICAgICAgICAgIGwubG9hZCgpLnRoZW4odXBkYXRlSXRlbSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIGVycm9yKHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHVubG9hZCA9IGZ1bmN0aW9uKGVsLCBpc2luaXQsIGNvbnRleHQpIHtcclxuICAgICAgICAgICAgY29udGV4dC5vbnVubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWUoZm9yY2VWYWx1ZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlLFxyXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXHJcbiAgICAgICAgICAgIGw6IGwsXHJcbiAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgc3VibWl0OiBzdWJtaXQsXHJcbiAgICAgICAgICAgIHRvZ2dsZXI6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXHJcbiAgICAgICAgICAgIHVubG9hZDogdW5sb2FkXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXJncy5kYXRhLFxyXG4gICAgICAgICAgICBidG5WYWx1ZSA9IChjdHJsLmwoKSkgPyAncG9yIGZhdm9yLCBhZ3VhcmRlLi4uJyA6IGRhdGEuY2FsbFRvQWN0aW9uO1xyXG5cclxuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTInLCBbXHJcbiAgICAgICAgICAgIG0oJ2J1dHRvbi5idG4uYnRuLXNtYWxsLmJ0bi10ZXJjaWFyeScsIHtcclxuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwudG9nZ2xlci50b2dnbGVcclxuICAgICAgICAgICAgfSwgZGF0YS5vdXRlckxhYmVsKSwgKGN0cmwudG9nZ2xlcigpKSA/XHJcbiAgICAgICAgICAgIG0oJy5kcm9wZG93bi1saXN0LmNhcmQudS1yYWRpdXMuZHJvcGRvd24tbGlzdC1tZWRpdW0uemluZGV4LTEwJywge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnOiBjdHJsLnVubG9hZFxyXG4gICAgICAgICAgICB9LCBbXHJcbiAgICAgICAgICAgICAgICBtKCdmb3JtLnctZm9ybScsIHtcclxuICAgICAgICAgICAgICAgICAgICBvbnN1Ym1pdDogY3RybC5zdWJtaXRcclxuICAgICAgICAgICAgICAgIH0sICghY3RybC5jb21wbGV0ZSgpKSA/IFtcclxuICAgICAgICAgICAgICAgICAgICBtKCdsYWJlbCcsIGRhdGEuaW5uZXJMYWJlbCksIChkYXRhLmZvcmNlVmFsdWUgPT09IHVuZGVmaW5lZCkgP1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZFt0eXBlPVwidGV4dFwiXVtwbGFjZWhvbGRlcj1cIicgKyBkYXRhLnBsYWNlaG9sZGVyICsgJ1wiXScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5uZXdWYWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdHJsLm5ld1ZhbHVlKClcclxuICAgICAgICAgICAgICAgICAgICB9KSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctYnV0dG9uLmJ0bi5idG4tc21hbGxbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIicgKyBidG5WYWx1ZSArICdcIl0nKVxyXG4gICAgICAgICAgICAgICAgXSA6ICghY3RybC5lcnJvcigpKSA/IFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtLWRvbmVbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsIGRhdGEuc3VjY2Vzc01lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0gOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybS1lcnJvcltzdHlsZT1cImRpc3BsYXk6YmxvY2s7XCJdJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdwJywgJ0hvdXZlIHVtIHByb2JsZW1hIG5hIHJlcXVpc2nDp8Ojby4gJyArIGRhdGEuZXJyb3JNZXNzYWdlKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKSA6ICcnXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZG1pbklucHV0QWN0aW9uO1xyXG4iLCIvKipcclxuICogd2luZG93LmMuQWRtaW5Ob3RpZmljYXRpb25IaXN0b3J5IGNvbXBvbmVudFxyXG4gKiBSZXR1cm4gbm90aWZpY2F0aW9ucyBsaXN0IGZyb20gYW4gVXNlciBvYmplY3QuXHJcbiAqXHJcbiAqIEV4YW1wbGU6XHJcbiAqIG0uY29tcG9uZW50KGMuQWRtaW5Ob3RpZmljYXRpb25IaXN0b3J5LCB7XHJcbiAqICAgICB1c2VyOiB1c2VyXHJcbiAqIH0pXHJcbiAqL1xyXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5jb25zdCBhZG1pbk5vdGlmaWNhdGlvbkhpc3RvcnkgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBub3RpZmljYXRpb25zID0gbS5wcm9wKFtdKSxcclxuICAgICAgICAgICAgZ2V0Tm90aWZpY2F0aW9ucyA9ICh1c2VyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbm90aWZpY2F0aW9uID0gbW9kZWxzLm5vdGlmaWNhdGlvbjtcclxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5nZXRQYWdlV2l0aFRva2VuKHBvc3RncmVzdC5maWx0ZXJzVk0oe1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfaWQ6ICdlcScsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VudF9hdDogJ2lzLm51bGwnXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnVzZXJfaWQodXNlci5pZClcclxuICAgICAgICAgICAgICAgIC5zZW50X2F0KCFudWxsKVxyXG4gICAgICAgICAgICAgICAgLm9yZGVyKHtcclxuICAgICAgICAgICAgICAgICAgICBzZW50X2F0OiAnZGVzYydcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAucGFyYW1ldGVycygpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4obm90aWZpY2F0aW9ucyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIGdldE5vdGlmaWNhdGlvbnMoYXJncy51c2VyKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbm90aWZpY2F0aW9uczogbm90aWZpY2F0aW9uc1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsKSB7XHJcbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC00JywgW1xyXG4gICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1zbWFsbGVyLmxpbmVoZWlnaHQtdGlnaHRlci51LW1hcmdpbmJvdHRvbS0yMCcsICdIaXN0w7NyaWNvIGRlIG5vdGlmaWNhw6fDtWVzJyksXHJcbiAgICAgICAgICAgIGN0cmwubm90aWZpY2F0aW9ucygpLm1hcCgoY0V2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnctcm93LmZvbnRzaXplLXNtYWxsZXN0LmxpbmVoZWlnaHQtbG9vc2VyLmRhdGUtZXZlbnQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTI0JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeScsIGgubW9tZW50aWZ5KGNFdmVudC5zZW50X2F0LCAnREQvTU0vWVlZWSwgSEg6bW0nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAnIC0gJywgY0V2ZW50LnRlbXBsYXRlX25hbWUsIGNFdmVudC5vcmlnaW4gPyAnIC0gJyArIGNFdmVudC5vcmlnaW4gOiAnJylcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Ob3RpZmljYXRpb25IaXN0b3J5O1xyXG4iLCIvKipcclxuICogd2luZG93LmMuQWRtaW5Vc2VyRGV0YWlsIGNvbXBvbmVudFxyXG4gKiBSZXR1cm4gYWN0aW9uIGlucHV0cyB0byBiZSB1c2VkIGluc2lkZSBBZG1pbkxpc3QgY29tcG9uZW50LlxyXG4gKlxyXG4gKiBFeGFtcGxlOlxyXG4gKiBtLmNvbXBvbmVudChjLkFkbWluTGlzdCwge1xyXG4gKiAgICAgZGF0YToge30sXHJcbiAqICAgICBsaXN0RGV0YWlsOiBjLkFkbWluVXNlckRldGFpbFxyXG4gKiB9KVxyXG4gKi9cclxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCBhZG1pblJlc2V0UGFzc3dvcmQgZnJvbSAnLi9hZG1pbi1yZXNldC1wYXNzd29yZCc7XHJcbmltcG9ydCBhZG1pbklucHV0QWN0aW9uIGZyb20gJy4vYWRtaW4taW5wdXQtYWN0aW9uJztcclxuaW1wb3J0IGFkbWluTm90aWZpY2F0aW9uSGlzdG9yeSBmcm9tICcuL2FkbWluLW5vdGlmaWNhdGlvbi1oaXN0b3J5JztcclxuXHJcbmNvbnN0IGFkbWluVXNlckRldGFpbCA9IHtcclxuICAgIGNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYWN0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgcmVzZXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eTogJ3Bhc3N3b3JkJyxcclxuICAgICAgICAgICAgICAgICAgICBjYWxsVG9BY3Rpb246ICdSZWRlZmluaXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyTGFiZWw6ICdOb3ZhIHNlbmhhIGRlIFVzdcOhcmlvOicsXHJcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJMYWJlbDogJ1JlZGVmaW5pciBzZW5oYScsXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdleDogMTIzbXVkQHInLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBtb2RlbHMudXNlclxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlYWN0aXZhdGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eTogJ2RlYWN0aXZhdGVkX2F0JyxcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXk6ICdpZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbFRvQWN0aW9uOiAnUmVhdGl2YXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyTGFiZWw6ICdUZW0gY2VydGV6YSBxdWUgZGVzZWphIHJlYXRpdmFyIGVzc2UgdXN1w6FyaW8/JyxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzTWVzc2FnZTogJ1VzdcOhcmlvIHJlYXRpdmFkbyBjb20gc3VjZXNzbyEnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ08gdXN1w6FyaW8gbsOjbyBww7RkZSBzZXIgcmVhdGl2YWRvIScsXHJcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJMYWJlbDogJ1JlYXRpdmFyIHVzdcOhcmlvJyxcclxuICAgICAgICAgICAgICAgICAgICBmb3JjZVZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBtb2RlbHMudXNlclxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBhY3Rpb25zID0gY3RybC5hY3Rpb25zLFxyXG4gICAgICAgICAgICBpdGVtID0gYXJncy5pdGVtLFxyXG4gICAgICAgICAgICBkZXRhaWxzID0gYXJncy5kZXRhaWxzLFxyXG4gICAgICAgICAgICBhZGRPcHRpb25zID0gKGJ1aWxkZXIsIGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5leHRlbmQoe30sIGJ1aWxkZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0T3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IChgL3VzZXJzLyR7aWR9L25ld19wYXNzd29yZGApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gbSgnI2FkbWluLWNvbnRyaWJ1dGlvbi1kZXRhaWwtYm94JywgW1xyXG4gICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbnRvcC0yMC51LW1hcmdpbmJvdHRvbS0yMCcpLFxyXG4gICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tMzAnLCBbXHJcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pblJlc2V0UGFzc3dvcmQsIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBhZGRPcHRpb25zKGFjdGlvbnMucmVzZXQsIGl0ZW0uaWQpLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1cclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKGl0ZW0uZGVhY3RpdmF0ZWRfYXQpID9cclxuICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pbklucHV0QWN0aW9uLCB7ZGF0YTogYWN0aW9ucy5yZWFjdGl2YXRlLCBpdGVtOiBpdGVtfSkgOiAnJ1xyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgbSgnLnctcm93LmNhcmQuY2FyZC10ZXJjaWFyeS51LXJhZGl1cycsIFtcclxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluTm90aWZpY2F0aW9uSGlzdG9yeSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXI6IGl0ZW1cclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkbWluVXNlckRldGFpbDtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5cclxuY29uc3QgZHJvcGRvd24gPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbShcclxuICAgICAgICAgICAgYHNlbGVjdCR7YXJncy5jbGFzc2VzfVtpZD1cIiR7YXJncy5pZH1cIl1gLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBhcmdzLnZhbHVlUHJvcCksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogYXJncy52YWx1ZVByb3AoKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfLm1hcChhcmdzLm9wdGlvbnMsIGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtKCdvcHRpb25bdmFsdWU9XCInICsgZGF0YS52YWx1ZSArICdcIl0nLCBkYXRhLm9wdGlvbik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRyb3Bkb3duO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IGRyb3Bkb3duIGZyb20gJy4vZHJvcGRvd24nO1xyXG5cclxuY29uc3QgZmlsdGVyRHJvcGRvd24gPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCB3cmFwcGVyX2MgPSBhcmdzLndyYXBwZXJfY2xhc3MgfHwgJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTYnO1xyXG4gICAgICAgIHJldHVybiBtKHdyYXBwZXJfYywgW1xyXG4gICAgICAgICAgICBtKCdsYWJlbC5mb250c2l6ZS1zbWFsbGVyW2Zvcj1cIicgKyBhcmdzLmluZGV4ICsgJ1wiXScsIGFyZ3MubGFiZWwpLFxyXG4gICAgICAgICAgICBtLmNvbXBvbmVudChkcm9wZG93biwge1xyXG4gICAgICAgICAgICAgICAgaWQ6IGFyZ3MuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzOiAnLnctc2VsZWN0LnRleHQtZmllbGQucG9zaXRpdmUnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWVQcm9wOiBhcmdzLnZtLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogYXJncy5vcHRpb25zXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmaWx0ZXJEcm9wZG93bjtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgdXNlckxpc3RWTSBmcm9tICcuLi92bXMvdXNlci1saXN0LXZtJztcclxuaW1wb3J0IHVzZXJGaWx0ZXJWTSBmcm9tICcuLi92bXMvdXNlci1maWx0ZXItdm0nO1xyXG5pbXBvcnQgYWRtaW5GaWx0ZXIgZnJvbSAnLi4vYy9hZG1pbi1maWx0ZXInO1xyXG5pbXBvcnQgYWRtaW5MaXN0IGZyb20gJy4uL2MvYWRtaW4tbGlzdCc7XHJcbmltcG9ydCBhZG1pblVzZXJJdGVtIGZyb20gJy4uL2MvYWRtaW4tdXNlci1pdGVtJztcclxuaW1wb3J0IGFkbWluVXNlckRldGFpbCBmcm9tICcuLi9jL2FkbWluLXVzZXItZGV0YWlsJztcclxuaW1wb3J0IGFkbWluVXNlciBmcm9tICcuLi9jL2FkbWluLXVzZXInO1xyXG5pbXBvcnQgZmlsdGVyTWFpbiBmcm9tICcuLi9jL2ZpbHRlci1tYWluJztcclxuaW1wb3J0IGZpbHRlckRyb3Bkb3duIGZyb20gJy4uL2MvZmlsdGVyLWRyb3Bkb3duJztcclxuXHJcbmNvbnN0IGFkbWluVXNlcnMgPSB7XHJcbiAgICBjb250cm9sbGVyKCkge1xyXG4gICAgICAgIGNvbnN0IGxpc3RWTSA9IHVzZXJMaXN0Vk0sXHJcbiAgICAgICAgICAgIGZpbHRlclZNID0gdXNlckZpbHRlclZNLFxyXG4gICAgICAgICAgICBlcnJvciA9IG0ucHJvcCgnJyksXHJcbiAgICAgICAgICAgIGl0ZW1CdWlsZGVyID0gW3tcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogYWRtaW5Vc2VyLFxyXG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnLnctY29sLnctY29sLTQnXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBmaWx0ZXJCdWlsZGVyID0gW3sgLy9uYW1lXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlck1haW4sXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm06IGZpbHRlclZNLmZ1bGxfdGV4dF9pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0J1c3F1ZSBwb3Igbm9tZSwgZS1tYWlsLCBJZHMgZG8gdXN1w6FyaW8uLi4nLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSwgeyAvL3N0YXR1c1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBmaWx0ZXJEcm9wZG93bixcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbSBvIGVzdGFkbycsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6ICdzdGF0dXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkZWFjdGl2YXRlZF9hdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdm06IGZpbHRlclZNLmRlYWN0aXZhdGVkX2F0LFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAnUXVhbHF1ZXIgdW0nXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAnYXRpdm8nXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIW51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ2Rlc2F0aXZhZG8nXHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIHN1Ym1pdCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UoZmlsdGVyVk0ucGFyYW1ldGVycygpKS50aGVuKG51bGwsIGZ1bmN0aW9uKHNlcnZlckVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3Ioc2VydmVyRXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZmlsdGVyVk06IGZpbHRlclZNLFxyXG4gICAgICAgICAgICBmaWx0ZXJCdWlsZGVyOiBmaWx0ZXJCdWlsZGVyLFxyXG4gICAgICAgICAgICBsaXN0Vk06IHtcclxuICAgICAgICAgICAgICAgIGxpc3Q6IGxpc3RWTSxcclxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvclxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWJtaXQ6IHN1Ym1pdFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsKSB7XHJcbiAgICAgICAgY29uc3QgbGFiZWwgPSAnVXN1w6FyaW9zJztcclxuXHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5GaWx0ZXIsIHtcclxuICAgICAgICAgICAgICAgIGZvcm06IGN0cmwuZmlsdGVyVk0uZm9ybURlc2NyaWJlcixcclxuICAgICAgICAgICAgICAgIGZpbHRlckJ1aWxkZXI6IGN0cmwuZmlsdGVyQnVpbGRlcixcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcclxuICAgICAgICAgICAgICAgIHN1Ym1pdDogY3RybC5zdWJtaXRcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluTGlzdCwge1xyXG4gICAgICAgICAgICAgICAgdm06IGN0cmwubGlzdFZNLFxyXG4gICAgICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW06IGFkbWluVXNlckl0ZW0sXHJcbiAgICAgICAgICAgICAgICBsaXN0RGV0YWlsOiBhZG1pblVzZXJEZXRhaWxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Vc2VycztcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLmNvbnRyaWJ1dGlvbkRldGFpbCwgJ2lkLmRlc2MnLCB7J1ByZWZlcic6ICdjb3VudD1leGFjdCd9KTtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcclxuaW1wb3J0IHJlcGxhY2VEaWFjcml0aWNzIGZyb20gJ3JlcGxhY2VEaWFjcml0aWNzJztcclxuXHJcbmNvbnN0IHZtID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XHJcbiAgICAgICAgZnVsbF90ZXh0X2luZGV4OiAnQEAnLFxyXG4gICAgICAgIHN0YXRlOiAnZXEnLFxyXG4gICAgICAgIGdhdGV3YXk6ICdlcScsXHJcbiAgICAgICAgdmFsdWU6ICdiZXR3ZWVuJyxcclxuICAgICAgICBjcmVhdGVkX2F0OiAnYmV0d2VlbidcclxuICAgIH0pLFxyXG5cclxuICAgIHBhcmFtVG9TdHJpbmcgPSBmdW5jdGlvbihwKSB7XHJcbiAgICAgICAgcmV0dXJuIChwIHx8ICcnKS50b1N0cmluZygpLnRyaW0oKTtcclxuICAgIH07XHJcblxyXG4vLyBTZXQgZGVmYXVsdCB2YWx1ZXNcclxudm0uc3RhdGUoJycpO1xyXG52bS5nYXRld2F5KCcnKTtcclxudm0ub3JkZXIoe1xyXG4gICAgaWQ6ICdkZXNjJ1xyXG59KTtcclxuXHJcbnZtLmNyZWF0ZWRfYXQubHRlLnRvRmlsdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZmlsdGVyID0gcGFyYW1Ub1N0cmluZyh2bS5jcmVhdGVkX2F0Lmx0ZSgpKTtcclxuICAgIHJldHVybiBmaWx0ZXIgJiYgaC5tb21lbnRGcm9tU3RyaW5nKGZpbHRlcikuZW5kT2YoJ2RheScpLmZvcm1hdCgnJyk7XHJcbn07XHJcblxyXG52bS5jcmVhdGVkX2F0Lmd0ZS50b0ZpbHRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGZpbHRlciA9IHBhcmFtVG9TdHJpbmcodm0uY3JlYXRlZF9hdC5ndGUoKSk7XHJcbiAgICByZXR1cm4gZmlsdGVyICYmIGgubW9tZW50RnJvbVN0cmluZyhmaWx0ZXIpLmZvcm1hdCgpO1xyXG59O1xyXG5cclxudm0uZnVsbF90ZXh0X2luZGV4LnRvRmlsdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZmlsdGVyID0gcGFyYW1Ub1N0cmluZyh2bS5mdWxsX3RleHRfaW5kZXgoKSk7XHJcbiAgICByZXR1cm4gZmlsdGVyICYmIHJlcGxhY2VEaWFjcml0aWNzKGZpbHRlcikgfHwgdW5kZWZpbmVkO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdm07XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IGFkbWluUHJvamVjdCA9IHtcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLml0ZW07XHJcbiAgICAgICAgcmV0dXJuIG0oJy53LXJvdy5hZG1pbi1wcm9qZWN0JywgW1xyXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC0zLnUtbWFyZ2luYm90dG9tLTEwJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLXByb2plY3QudS1yYWRpdXNbc3JjPScgKyBwcm9qZWN0LnByb2plY3RfaW1nICsgJ11bd2lkdGg9NTBdJylcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC05LnctY29sLXNtYWxsLTknLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1zbWFsbGVyLmxpbmVoZWlnaHQtdGlnaHRlci51LW1hcmdpbmJvdHRvbS0xMCcsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW3RhcmdldD1cIl9ibGFua1wiXVtocmVmPVwiLycgKyBwcm9qZWN0LnBlcm1hbGluayArICdcIl0nLCBwcm9qZWN0LnByb2plY3RfbmFtZSlcclxuICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBwcm9qZWN0LnByb2plY3Rfc3RhdGUpLFxyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCBoLm1vbWVudGlmeShwcm9qZWN0LnByb2plY3Rfb25saW5lX2RhdGUpICsgJyBhICcgKyBoLm1vbWVudGlmeShwcm9qZWN0LnByb2plY3RfZXhwaXJlc19hdCkpXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZG1pblByb2plY3Q7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IGFkbWluQ29udHJpYnV0aW9uID0ge1xyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgY29udHJpYnV0aW9uID0gYXJncy5pdGVtO1xyXG4gICAgICAgIHJldHVybiBtKCcudy1yb3cuYWRtaW4tY29udHJpYnV0aW9uJywgW1xyXG4gICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5saW5laGVpZ2h0LXRpZ2h0ZXIudS1tYXJnaW5ib3R0b20tMTAuZm9udHNpemUtc21hbGwnLCAnUiQnICsgY29udHJpYnV0aW9uLnZhbHVlKSxcclxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCBoLm1vbWVudGlmeShjb250cmlidXRpb24uY3JlYXRlZF9hdCwgJ0REL01NL1lZWVkgSEg6bW1baF0nKSksXHJcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdCcsIFtcclxuICAgICAgICAgICAgICAgICdJRCBkbyBHYXRld2F5OiAnLFxyXG4gICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1t0YXJnZXQ9XCJfYmxhbmtcIl1baHJlZj1cImh0dHBzOi8vZGFzaGJvYXJkLnBhZ2FyLm1lLyMvdHJhbnNhY3Rpb25zLycgKyBjb250cmlidXRpb24uZ2F0ZXdheV9pZCArICdcIl0nLCBjb250cmlidXRpb24uZ2F0ZXdheV9pZClcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkbWluQ29udHJpYnV0aW9uO1xyXG4iLCIvKipcclxuICogd2luZG93LmMuQWRtaW5Db250cmlidXRpb25Vc2VyIGNvbXBvbmVudFxyXG4gKiBBbiBpdGVtYnVpbGRlciBjb21wb25lbnQgdGhhdCByZXR1cm5zIGFkZGl0aW9uYWwgZGF0YVxyXG4gKiB0byBiZSBpbmNsdWRlZCBpbiBBZG1pblVzZXIuXHJcbiAqXHJcbiAqIEV4YW1wbGU6XHJcbiAqIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xyXG4gKiAgICAgcmV0dXJuIHtcclxuICogICAgICAgICBpdGVtQnVpbGRlcjogW3tcclxuICogICAgICAgICAgICAgY29tcG9uZW50OiAnQWRtaW5Db250cmlidXRpb25Vc2VyJyxcclxuICogICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnLnctY29sLnctY29sLTQnXHJcbiAqICAgICAgICAgfV1cclxuICogICAgIH1cclxuICogfVxyXG4gKi9cclxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBhZG1pblVzZXIgZnJvbSAnLi9hZG1pbi11c2VyJztcclxuXHJcbmNvbnN0IGFkbWluQ29udHJpYnV0aW9uVXNlciA9IHtcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhcmdzLml0ZW0sXHJcbiAgICAgICAgICAgICAgdXNlciA9IHtcclxuICAgICAgICAgICAgICAgICAgcHJvZmlsZV9pbWdfdGh1bWJuYWlsOiBpdGVtLnVzZXJfcHJvZmlsZV9pbWcsXHJcbiAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLnVzZXJfaWQsXHJcbiAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0udXNlcl9uYW1lLFxyXG4gICAgICAgICAgICAgICAgICBlbWFpbDogaXRlbS5lbWFpbCxcclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBhZGRpdGlvbmFsRGF0YSA9IG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJ0dhdGV3YXk6ICcgKyBpdGVtLnBheWVyX2VtYWlsKTtcclxuICAgICAgICByZXR1cm4gbS5jb21wb25lbnQoYWRtaW5Vc2VyLCB7aXRlbTogdXNlciwgYWRkaXRpb25hbF9kYXRhOiBhZGRpdGlvbmFsRGF0YX0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Db250cmlidXRpb25Vc2VyO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuXHJcbmNvbnN0IHBheW1lbnRTdGF0dXMgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBsZXQgcGF5bWVudCA9IGFyZ3MuaXRlbSxcclxuICAgICAgICAgICAgY2FyZCA9IG51bGwsXHJcbiAgICAgICAgICAgIGRpc3BsYXlQYXltZW50TWV0aG9kLCBwYXltZW50TWV0aG9kQ2xhc3MsIHN0YXRlQ2xhc3M7XHJcblxyXG4gICAgICAgIGNhcmQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwYXltZW50LmdhdGV3YXlfZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwYXltZW50LmdhdGV3YXkudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vaXAnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfZGlnaXRzOiBwYXltZW50LmdhdGV3YXlfZGF0YS5jYXJ0YW9fYmluLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9kaWdpdHM6IHBheW1lbnQuZ2F0ZXdheV9kYXRhLmNhcnRhb19maW5hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYW5kOiBwYXltZW50LmdhdGV3YXlfZGF0YS5jYXJ0YW9fYmFuZGVpcmFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdwYWdhcm1lJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2RpZ2l0czogcGF5bWVudC5nYXRld2F5X2RhdGEuY2FyZF9maXJzdF9kaWdpdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2RpZ2l0czogcGF5bWVudC5nYXRld2F5X2RhdGEuY2FyZF9sYXN0X2RpZ2l0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYW5kOiBwYXltZW50LmdhdGV3YXlfZGF0YS5jYXJkX2JyYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBkaXNwbGF5UGF5bWVudE1ldGhvZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoIChwYXltZW50LnBheW1lbnRfbWV0aG9kLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2JvbGV0b2JhbmNhcmlvJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnc3BhbiNib2xldG8tZGV0YWlsJywgJycpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2FydGFvZGVjcmVkaXRvJzpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZERhdGEgPSBjYXJkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmREYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcjY3JlZGl0Y2FyZC1kZXRhaWwuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZERhdGEuZmlyc3RfZGlnaXRzICsgJyoqKioqKicgKyBjYXJkRGF0YS5sYXN0X2RpZ2l0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2JyJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkRGF0YS5icmFuZCArICcgJyArIHBheW1lbnQuaW5zdGFsbG1lbnRzICsgJ3gnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBwYXltZW50TWV0aG9kQ2xhc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAocGF5bWVudC5wYXltZW50X21ldGhvZC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdib2xldG9iYW5jYXJpbyc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcuZmEtYmFyY29kZSc7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjYXJ0YW9kZWNyZWRpdG8nOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnLmZhLWNyZWRpdC1jYXJkJztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcuZmEtcXVlc3Rpb24nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc3RhdGVDbGFzcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoIChwYXltZW50LnN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwYWlkJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJy50ZXh0LXN1Y2Nlc3MnO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVmdW5kZWQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnLnRleHQtcmVmdW5kZWQnO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncGVuZGluZyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwZW5kaW5nX3JlZnVuZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcudGV4dC13YWl0aW5nJztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcudGV4dC1lcnJvcic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkaXNwbGF5UGF5bWVudE1ldGhvZDogZGlzcGxheVBheW1lbnRNZXRob2QsXHJcbiAgICAgICAgICAgIHBheW1lbnRNZXRob2RDbGFzczogcGF5bWVudE1ldGhvZENsYXNzLFxyXG4gICAgICAgICAgICBzdGF0ZUNsYXNzOiBzdGF0ZUNsYXNzXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBwYXltZW50ID0gYXJncy5pdGVtO1xyXG5cclxuICAgICAgICByZXR1cm4gbSgnLnctcm93LnBheW1lbnQtc3RhdHVzJywgW1xyXG4gICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC1sb29zZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsIFtcclxuICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtY2lyY2xlJyArIGN0cmwuc3RhdGVDbGFzcygpKSwgJ8KgJyArIHBheW1lbnQuc3RhdGVcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250d2VpZ2h0LXNlbWlib2xkJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnc3Bhbi5mYScgKyBjdHJsLnBheW1lbnRNZXRob2RDbGFzcygpKSwgJyAnLCBtKCdhLmxpbmstaGlkZGVuW2hyZWY9XCIjXCJdJywgcGF5bWVudC5wYXltZW50X21ldGhvZClcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5LmxpbmVoZWlnaHQtdGlnaHQnLCBbXHJcbiAgICAgICAgICAgICAgICBjdHJsLmRpc3BsYXlQYXltZW50TWV0aG9kKClcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBheW1lbnRTdGF0dXM7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IGFkbWluUHJvamVjdCBmcm9tICcuL2FkbWluLXByb2plY3QnO1xyXG5pbXBvcnQgYWRtaW5Db250cmlidXRpb24gZnJvbSAnLi9hZG1pbi1jb250cmlidXRpb24nO1xyXG5pbXBvcnQgYWRtaW5Db250cmlidXRpb25Vc2VyIGZyb20gJy4vYWRtaW4tY29udHJpYnV0aW9uLXVzZXInO1xyXG5pbXBvcnQgcGF5bWVudFN0YXR1cyBmcm9tICcuL3BheW1lbnQtc3RhdHVzJztcclxuXHJcbmNvbnN0IGFkbWluQ29udHJpYnV0aW9uSXRlbSA9IHtcclxuICAgIGNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaXRlbUJ1aWxkZXI6IFt7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGFkbWluQ29udHJpYnV0aW9uVXNlcixcclxuICAgICAgICAgICAgICAgIHdyYXBwZXJDbGFzczogJy53LWNvbC53LWNvbC00J1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGFkbWluUHJvamVjdCxcclxuICAgICAgICAgICAgICAgIHdyYXBwZXJDbGFzczogJy53LWNvbC53LWNvbC00J1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGFkbWluQ29udHJpYnV0aW9uLFxyXG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnLnctY29sLnctY29sLTInXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogcGF5bWVudFN0YXR1cyxcclxuICAgICAgICAgICAgICAgIHdyYXBwZXJDbGFzczogJy53LWNvbC53LWNvbC0yJ1xyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIG0oXHJcbiAgICAgICAgICAgICcudy1yb3cnLFxyXG4gICAgICAgICAgICBfLm1hcChjdHJsLml0ZW1CdWlsZGVyLCBmdW5jdGlvbihwYW5lbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG0ocGFuZWwud3JhcHBlckNsYXNzLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQocGFuZWwuY29tcG9uZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW06IGFyZ3MuaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBhcmdzLmtleVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Db250cmlidXRpb25JdGVtO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5cclxuY29uc3QgYWRtaW5SYWRpb0FjdGlvbiA9IHtcclxuICAgIGNvbnRyb2xsZXIoYXJncykge1xyXG4gICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBhcmdzLmRhdGEsXHJcbiAgICAgICAgICAgIGNvbXBsZXRlID0gbS5wcm9wKGZhbHNlKSxcclxuICAgICAgICAgICAgZGF0YSA9IHt9LFxyXG4gICAgICAgICAgICBlcnJvciA9IG0ucHJvcChmYWxzZSksXHJcbiAgICAgICAgICAgIGZhaWwgPSBtLnByb3AoZmFsc2UpLFxyXG4gICAgICAgICAgICBpdGVtID0gYXJncy5pdGVtKCksXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gbS5wcm9wKGl0ZW0uZGVzY3JpcHRpb24gfHwgJycpLFxyXG4gICAgICAgICAgICBrZXkgPSBidWlsZGVyLmdldEtleSxcclxuICAgICAgICAgICAgbmV3SUQgPSBtLnByb3AoJycpLFxyXG4gICAgICAgICAgICBnZXRGaWx0ZXIgPSB7fSxcclxuICAgICAgICAgICAgc2V0RmlsdGVyID0ge30sXHJcbiAgICAgICAgICAgIHJhZGlvcyA9IG0ucHJvcCgpLFxyXG4gICAgICAgICAgICBnZXRBdHRyID0gYnVpbGRlci5yYWRpb3MsXHJcbiAgICAgICAgICAgIGdldEtleSA9IGJ1aWxkZXIuZ2V0S2V5LFxyXG4gICAgICAgICAgICBnZXRLZXlWYWx1ZSA9IGFyZ3MuZ2V0S2V5VmFsdWUsXHJcbiAgICAgICAgICAgIHVwZGF0ZUtleSA9IGJ1aWxkZXIudXBkYXRlS2V5LFxyXG4gICAgICAgICAgICB1cGRhdGVLZXlWYWx1ZSA9IGFyZ3MudXBkYXRlS2V5VmFsdWUsXHJcbiAgICAgICAgICAgIHZhbGlkYXRlID0gYnVpbGRlci52YWxpZGF0ZSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRJdGVtID0gYnVpbGRlci5zZWxlY3RlZEl0ZW0gfHwgbS5wcm9wKCk7XHJcblxyXG4gICAgICAgIHNldEZpbHRlclt1cGRhdGVLZXldID0gJ2VxJztcclxuICAgICAgICBjb25zdCBzZXRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oc2V0RmlsdGVyKTtcclxuICAgICAgICBzZXRWTVt1cGRhdGVLZXldKHVwZGF0ZUtleVZhbHVlKTtcclxuXHJcbiAgICAgICAgZ2V0RmlsdGVyW2dldEtleV0gPSAnZXEnO1xyXG4gICAgICAgIGNvbnN0IGdldFZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTShnZXRGaWx0ZXIpO1xyXG4gICAgICAgIGdldFZNW2dldEtleV0oZ2V0S2V5VmFsdWUpO1xyXG5cclxuICAgICAgICBjb25zdCBnZXRMb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKGJ1aWxkZXIuZ2V0TW9kZWwuZ2V0UGFnZU9wdGlvbnMoZ2V0Vk0ucGFyYW1ldGVycygpKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNldExvYWRlciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4oYnVpbGRlci51cGRhdGVNb2RlbC5wYXRjaE9wdGlvbnMoc2V0Vk0ucGFyYW1ldGVycygpLCBkYXRhKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVwZGF0ZUl0ZW0gPSAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdJdGVtID0gXy5maW5kV2hlcmUocmFkaW9zKCksIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogZGF0YVswXVtidWlsZGVyLnNlbGVjdEtleV1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtKG5ld0l0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdOZW5odW0gaXRlbSBhdHVhbGl6YWRvJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29tcGxldGUodHJ1ZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgZmV0Y2ggPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGdldExvYWRlci5sb2FkKCkudGhlbihyYWRpb3MsIGVycm9yKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBzdWJtaXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChuZXdJRCgpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsaWRhdGlvbiA9IHZhbGlkYXRlKHJhZGlvcygpLCBuZXdJRCgpKTtcclxuICAgICAgICAgICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKHZhbGlkYXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtidWlsZGVyLnNlbGVjdEtleV0gPSBuZXdJRCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldExvYWRlci5sb2FkKCkudGhlbih1cGRhdGVJdGVtLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogdmFsaWRhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCB1bmxvYWQgPSAoZWwsIGlzaW5pdCwgY29udGV4dCkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0Lm9udW5sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgbmV3SUQoJycpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHNldERlc2NyaXB0aW9uID0gKHRleHQpID0+IHtcclxuICAgICAgICAgICAgZGVzY3JpcHRpb24odGV4dCk7XHJcbiAgICAgICAgICAgIG0ucmVkcmF3KCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZmV0Y2goKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgIHNldERlc2NyaXB0aW9uOiBzZXREZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxyXG4gICAgICAgICAgICBzZXRMb2FkZXI6IHNldExvYWRlcixcclxuICAgICAgICAgICAgZ2V0TG9hZGVyOiBnZXRMb2FkZXIsXHJcbiAgICAgICAgICAgIG5ld0lEOiBuZXdJRCxcclxuICAgICAgICAgICAgc3VibWl0OiBzdWJtaXQsXHJcbiAgICAgICAgICAgIHRvZ2dsZXI6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXHJcbiAgICAgICAgICAgIHVubG9hZDogdW5sb2FkLFxyXG4gICAgICAgICAgICByYWRpb3M6IHJhZGlvc1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3MuZGF0YSxcclxuICAgICAgICAgICAgaXRlbSA9IGFyZ3MuaXRlbSgpLFxyXG4gICAgICAgICAgICBidG5WYWx1ZSA9IChjdHJsLnNldExvYWRlcigpIHx8IGN0cmwuZ2V0TG9hZGVyKCkpID8gJ3BvciBmYXZvciwgYWd1YXJkZS4uLicgOiBkYXRhLmNhbGxUb0FjdGlvbjtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC0yJywgW1xyXG4gICAgICAgICAgICBtKCdidXR0b24uYnRuLmJ0bi1zbWFsbC5idG4tdGVyY2lhcnknLCB7XHJcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnRvZ2dsZXIudG9nZ2xlXHJcbiAgICAgICAgICAgIH0sIGRhdGEub3V0ZXJMYWJlbCksIChjdHJsLnRvZ2dsZXIoKSkgP1xyXG4gICAgICAgICAgICBtKCcuZHJvcGRvd24tbGlzdC5jYXJkLnUtcmFkaXVzLmRyb3Bkb3duLWxpc3QtbWVkaXVtLnppbmRleC0xMCcsIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC51bmxvYWRcclxuICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgbSgnZm9ybS53LWZvcm0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGN0cmwuc3VibWl0XHJcbiAgICAgICAgICAgICAgICB9LCAoIWN0cmwuY29tcGxldGUoKSkgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgKGN0cmwucmFkaW9zKCkpID9cclxuICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLnJhZGlvcygpLCAocmFkaW8sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwubmV3SUQocmFkaW8uaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zZXREZXNjcmlwdGlvbihyYWRpby5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gKHJhZGlvLmlkID09PSAoaXRlbVtkYXRhLnNlbGVjdEtleV0gfHwgaXRlbS5pZCkpID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oJy53LXJhZGlvJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQjci0nICsgaW5kZXggKyAnLnctcmFkaW8taW5wdXRbdHlwZT1yYWRpb11bbmFtZT1cImFkbWluLXJhZGlvXCJdW3ZhbHVlPVwiJyArIHJhZGlvLmlkICsgJ1wiXScgKyAoKHNlbGVjdGVkKSA/ICdbY2hlY2tlZF0nIDogJycpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLnctZm9ybS1sYWJlbFtmb3I9XCJyLScgKyBpbmRleCArICdcIl0nLCAnUiQnICsgcmFkaW8ubWluaW11bV92YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkgOiBoLmxvYWRlcigpLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ3N0cm9uZycsICdEZXNjcmnDp8OjbycpLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AnLCBjdHJsLmRlc2NyaXB0aW9uKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctYnV0dG9uLmJ0bi5idG4tc21hbGxbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIicgKyBidG5WYWx1ZSArICdcIl0nKVxyXG4gICAgICAgICAgICAgICAgXSA6ICghY3RybC5lcnJvcigpKSA/IFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtLWRvbmVbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsICdSZWNvbXBlbnNhIGFsdGVyYWRhIGNvbSBzdWNlc3NvIScpXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0gOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybS1lcnJvcltzdHlsZT1cImRpc3BsYXk6YmxvY2s7XCJdJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdwJywgY3RybC5lcnJvcigpLm1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pIDogJydcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkbWluUmFkaW9BY3Rpb247XHJcbiIsIi8qKlxyXG4gKiB3aW5kb3cuYy5BZG1pbkV4dGVybmFsQWN0aW9uIGNvbXBvbmVudFxyXG4gKiBNYWtlcyBhcmJpdHJhcnkgYWpheCByZXF1ZXN0cyBhbmQgdXBkYXRlIHVuZGVybHlpbmdcclxuICogZGF0YSBmcm9tIHNvdXJjZSBlbmRwb2ludC5cclxuICpcclxuICogRXhhbXBsZTpcclxuICogbS5jb21wb25lbnQoYy5BZG1pbkV4dGVybmFsQWN0aW9uLCB7XHJcbiAqICAgICBkYXRhOiB7fSxcclxuICogICAgIGl0ZW06IHJvd0Zyb21EYXRhYmFzZVxyXG4gKiB9KVxyXG4gKi9cclxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IGFkbWluRXh0ZXJuYWxBY3Rpb24gPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBsZXQgYnVpbGRlciA9IGFyZ3MuZGF0YSxcclxuICAgICAgICAgICAgY29tcGxldGUgPSBtLnByb3AoZmFsc2UpLFxyXG4gICAgICAgICAgICBlcnJvciA9IG0ucHJvcChmYWxzZSksXHJcbiAgICAgICAgICAgIGZhaWwgPSBtLnByb3AoZmFsc2UpLFxyXG4gICAgICAgICAgICBkYXRhID0ge30sXHJcbiAgICAgICAgICAgIGl0ZW0gPSBhcmdzLml0ZW07XHJcblxyXG4gICAgICAgIGJ1aWxkZXIucmVxdWVzdE9wdGlvbnMuY29uZmlnID0gKHhocikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaC5hdXRoZW50aWNpdHlUb2tlbigpKSB7XHJcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1DU1JGLVRva2VuJywgaC5hdXRoZW50aWNpdHlUb2tlbigpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbG9hZCA9IF8uY29tcG9zZShidWlsZGVyLm1vZGVsLmdldFJvd1dpdGhUb2tlbiwgaC5pZFZNLmlkKGl0ZW1bYnVpbGRlci51cGRhdGVLZXldKS5wYXJhbWV0ZXJzKSxcclxuICAgICAgICAgICAgbCA9IG0ucHJvcChmYWxzZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbG9hZEl0ZW0gPSAoKSA9PiByZWxvYWQoKS50aGVuKHVwZGF0ZUl0ZW0pO1xyXG5cclxuICAgICAgICBjb25zdCByZXF1ZXN0RXJyb3IgPSAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGwoZmFsc2UpO1xyXG4gICAgICAgICAgICBjb21wbGV0ZSh0cnVlKTtcclxuICAgICAgICAgICAgZXJyb3IodHJ1ZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgdXBkYXRlSXRlbSA9IChyZXMpID0+IHtcclxuICAgICAgICAgICAgXy5leHRlbmQoaXRlbSwgcmVzWzBdKTtcclxuICAgICAgICAgICAgY29tcGxldGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIGVycm9yKGZhbHNlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBzdWJtaXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGwodHJ1ZSk7XHJcbiAgICAgICAgICAgIG0ucmVxdWVzdChidWlsZGVyLnJlcXVlc3RPcHRpb25zKS50aGVuKHJlbG9hZEl0ZW0sIHJlcXVlc3RFcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCB1bmxvYWQgPSAoZWwsIGlzaW5pdCwgY29udGV4dCkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0Lm9udW5sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBlcnJvcihmYWxzZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbDogbCxcclxuICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlLFxyXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXHJcbiAgICAgICAgICAgIHN1Ym1pdDogc3VibWl0LFxyXG4gICAgICAgICAgICB0b2dnbGVyOiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpLFxyXG4gICAgICAgICAgICB1bmxvYWQ6IHVubG9hZFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3MuZGF0YSxcclxuICAgICAgICAgICAgYnRuVmFsdWUgPSAoY3RybC5sKCkpID8gJ3BvciBmYXZvciwgYWd1YXJkZS4uLicgOiBkYXRhLmNhbGxUb0FjdGlvbjtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC0yJywgW1xyXG4gICAgICAgICAgICBtKCdidXR0b24uYnRuLmJ0bi1zbWFsbC5idG4tdGVyY2lhcnknLCB7XHJcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnRvZ2dsZXIudG9nZ2xlXHJcbiAgICAgICAgICAgIH0sIGRhdGEub3V0ZXJMYWJlbCksIChjdHJsLnRvZ2dsZXIoKSkgP1xyXG4gICAgICAgICAgICBtKCcuZHJvcGRvd24tbGlzdC5jYXJkLnUtcmFkaXVzLmRyb3Bkb3duLWxpc3QtbWVkaXVtLnppbmRleC0xMCcsIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC51bmxvYWRcclxuICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgbSgnZm9ybS53LWZvcm0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGN0cmwuc3VibWl0XHJcbiAgICAgICAgICAgICAgICB9LCAoIWN0cmwuY29tcGxldGUoKSkgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwnLCBkYXRhLmlubmVyTGFiZWwpLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctYnV0dG9uLmJ0bi5idG4tc21hbGxbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIicgKyBidG5WYWx1ZSArICdcIl0nKVxyXG4gICAgICAgICAgICAgICAgXSA6ICghY3RybC5lcnJvcigpKSA/IFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtLWRvbmVbc3R5bGU9XCJkaXNwbGF5OmJsb2NrO1wiXScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgncCcsICdSZXF1aXNpw6fDo28gZmVpdGEgY29tIHN1Y2Vzc28uJylcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSA6IFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtLWVycm9yW3N0eWxlPVwiZGlzcGxheTpibG9jaztcIl0nLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AnLCAnSG91dmUgdW0gcHJvYmxlbWEgbmEgcmVxdWlzacOnw6NvLicpXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pIDogJydcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkbWluRXh0ZXJuYWxBY3Rpb247XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IGFkbWluVHJhbnNhY3Rpb24gPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBjb250cmlidXRpb24gPSBhcmdzLmNvbnRyaWJ1dGlvbjtcclxuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTQnLCBbXHJcbiAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIubGluZWhlaWdodC10aWdodGVyLnUtbWFyZ2luYm90dG9tLTIwJywgJ0RldGFsaGVzIGRvIGFwb2lvJyksXHJcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3NlcicsIFtcclxuICAgICAgICAgICAgICAgICdWYWxvcjogUiQnICsgaC5mb3JtYXROdW1iZXIoY29udHJpYnV0aW9uLnZhbHVlLCAyLCAzKSxcclxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXHJcbiAgICAgICAgICAgICAgICAnVGF4YTogUiQnICsgaC5mb3JtYXROdW1iZXIoY29udHJpYnV0aW9uLmdhdGV3YXlfZmVlLCAyLCAzKSxcclxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXHJcbiAgICAgICAgICAgICAgICAnQWd1YXJkYW5kbyBDb25maXJtYcOnw6NvOiAnICsgKGNvbnRyaWJ1dGlvbi53YWl0aW5nX3BheW1lbnQgPyAnU2ltJyA6ICdOw6NvJyksXHJcbiAgICAgICAgICAgICAgICBtKCdicicpLFxyXG4gICAgICAgICAgICAgICAgJ0Fuw7RuaW1vOiAnICsgKGNvbnRyaWJ1dGlvbi5hbm9ueW1vdXMgPyAnU2ltJyA6ICdOw6NvJyksXHJcbiAgICAgICAgICAgICAgICBtKCdicicpLFxyXG4gICAgICAgICAgICAgICAgJ0lkIHBhZ2FtZW50bzogJyArIGNvbnRyaWJ1dGlvbi5nYXRld2F5X2lkLFxyXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcclxuICAgICAgICAgICAgICAgICdBcG9pbzogJyArIGNvbnRyaWJ1dGlvbi5jb250cmlidXRpb25faWQsXHJcbiAgICAgICAgICAgICAgICBtKCdicicpLFxyXG4gICAgICAgICAgICAgICAgJ0NoYXZlOsKgXFxuJyxcclxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXHJcbiAgICAgICAgICAgICAgICBjb250cmlidXRpb24ua2V5LFxyXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcclxuICAgICAgICAgICAgICAgICdNZWlvOiAnICsgY29udHJpYnV0aW9uLmdhdGV3YXksXHJcbiAgICAgICAgICAgICAgICBtKCdicicpLFxyXG4gICAgICAgICAgICAgICAgJ09wZXJhZG9yYTogJyArIChjb250cmlidXRpb24uZ2F0ZXdheV9kYXRhICYmIGNvbnRyaWJ1dGlvbi5nYXRld2F5X2RhdGEuYWNxdWlyZXJfbmFtZSksXHJcbiAgICAgICAgICAgICAgICBtKCdicicpLFxyXG4gICAgICAgICAgICAgICAgY29udHJpYnV0aW9uLmlzX3NlY29uZF9zbGlwID8gW20oJ2EubGluay1oaWRkZW5baHJlZj1cIiNcIl0nLCAnQm9sZXRvIGJhbmPDoXJpbycpLCAnICcsIG0oJ3NwYW4uYmFkZ2UnLCAnMmEgdmlhJyldIDogJydcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkbWluVHJhbnNhY3Rpb247XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcblxyXG5jb25zdCBhZG1pblRyYW5zYWN0aW9uSGlzdG9yeSA9IHtcclxuICAgIGNvbnRyb2xsZXIoYXJncykge1xyXG4gICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvbiA9IGFyZ3MuY29udHJpYnV0aW9uLFxyXG4gICAgICAgICAgICBtYXBFdmVudHMgPSBfLnJlZHVjZShbe1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogY29udHJpYnV0aW9uLnBhaWRfYXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnQXBvaW8gY29uZmlybWFkbydcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogY29udHJpYnV0aW9uLnBlbmRpbmdfcmVmdW5kX2F0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ1JlZW1ib2xzbyBzb2xpY2l0YWRvJ1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiBjb250cmlidXRpb24ucmVmdW5kZWRfYXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnRXN0b3JubyByZWFsaXphZG8nXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IGNvbnRyaWJ1dGlvbi5jcmVhdGVkX2F0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ0Fwb2lvIGNyaWFkbydcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogY29udHJpYnV0aW9uLnJlZnVzZWRfYXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnQXBvaW8gY2FuY2VsYWRvJ1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiBjb250cmlidXRpb24uZGVsZXRlZF9hdCxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdBcG9pbyBleGNsdcOtZG8nXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IGNvbnRyaWJ1dGlvbi5jaGFyZ2ViYWNrX2F0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ0NoYXJnZWJhY2snXHJcbiAgICAgICAgICAgIH1dLCAobWVtbywgaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uZGF0ZSAhPT0gbnVsbCAmJiBpdGVtLmRhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0ub3JpZ2luYWxEYXRlID0gaXRlbS5kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uZGF0ZSA9IGgubW9tZW50aWZ5KGl0ZW0uZGF0ZSwgJ0REL01NL1lZWVksIEhIOm1tJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lbW8uY29uY2F0KGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBtZW1vO1xyXG4gICAgICAgICAgICB9LCBbXSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG9yZGVyZWRFdmVudHM6IF8uc29ydEJ5KG1hcEV2ZW50cywgJ29yaWdpbmFsRGF0ZScpXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwpIHtcclxuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTQnLCBbXHJcbiAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIubGluZWhlaWdodC10aWdodGVyLnUtbWFyZ2luYm90dG9tLTIwJywgJ0hpc3TDs3JpY28gZGEgdHJhbnNhw6fDo28nKSxcclxuICAgICAgICAgICAgY3RybC5vcmRlcmVkRXZlbnRzLm1hcCgoY0V2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnctcm93LmZvbnRzaXplLXNtYWxsZXN0LmxpbmVoZWlnaHQtbG9vc2VyLmRhdGUtZXZlbnQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3Itc2Vjb25kYXJ5JywgY0V2ZW50LmRhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIGNFdmVudC5uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkbWluVHJhbnNhY3Rpb25IaXN0b3J5O1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcblxyXG5jb25zdCBhZG1pblJld2FyZCA9IHtcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IHJld2FyZCA9IGFyZ3MucmV3YXJkKCksXHJcbiAgICAgICAgICAgIGF2YWlsYWJsZSA9IHBhcnNlSW50KHJld2FyZC5wYWlkX2NvdW50KSArIHBhcnNlSW50KHJld2FyZC53YWl0aW5nX3BheW1lbnRfY291bnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTQnLCBbXHJcbiAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIubGluZWhlaWdodC10aWdodGVyLnUtbWFyZ2luYm90dG9tLTIwJywgJ1JlY29tcGVuc2EnKSxcclxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmxpbmVoZWlnaHQtbG9vc2VyJywgcmV3YXJkLmlkID8gW1xyXG4gICAgICAgICAgICAgICAgJ0lEOiAnICsgcmV3YXJkLmlkLFxyXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcclxuICAgICAgICAgICAgICAgICdWYWxvciBtw61uaW1vOiBSJCcgKyBoLmZvcm1hdE51bWJlcihyZXdhcmQubWluaW11bV92YWx1ZSwgMiwgMyksXHJcbiAgICAgICAgICAgICAgICBtKCdicicpLFxyXG4gICAgICAgICAgICAgICAgbS50cnVzdCgnRGlzcG9uw612ZWlzOiAnICsgYXZhaWxhYmxlICsgJyAvICcgKyAocmV3YXJkLm1heGltdW1fY29udHJpYnV0aW9ucyB8fCAnJmluZmluOycpKSxcclxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXHJcbiAgICAgICAgICAgICAgICAnQWd1YXJkYW5kbyBjb25maXJtYcOnw6NvOiAnICsgcmV3YXJkLndhaXRpbmdfcGF5bWVudF9jb3VudCxcclxuICAgICAgICAgICAgICAgIG0oJ2JyJyksXHJcbiAgICAgICAgICAgICAgICAnRGVzY3Jpw6fDo286ICcgKyByZXdhcmQuZGVzY3JpcHRpb25cclxuICAgICAgICAgICAgXSA6ICdBcG9pbyBzZW0gcmVjb21wZW5zYScpXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZG1pblJld2FyZDtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgYWRtaW5JbnB1dEFjdGlvbiBmcm9tICcuL2FkbWluLWlucHV0LWFjdGlvbic7XHJcbmltcG9ydCBhZG1pblJhZGlvQWN0aW9uIGZyb20gJy4vYWRtaW4tcmFkaW8tYWN0aW9uJztcclxuaW1wb3J0IGFkbWluRXh0ZXJuYWxBY3Rpb24gZnJvbSAnLi9hZG1pbi1leHRlcm5hbC1hY3Rpb24nO1xyXG5pbXBvcnQgYWRtaW5UcmFuc2FjdGlvbiBmcm9tICcuL2FkbWluLXRyYW5zYWN0aW9uJztcclxuaW1wb3J0IGFkbWluVHJhbnNhY3Rpb25IaXN0b3J5IGZyb20gJy4vYWRtaW4tdHJhbnNhY3Rpb24taGlzdG9yeSc7XHJcbmltcG9ydCBhZG1pblJld2FyZCBmcm9tICcuL2FkbWluLXJld2FyZCc7XHJcblxyXG5jb25zdCBhZG1pbkNvbnRyaWJ1dGlvbkRldGFpbCA9IHtcclxuICAgIGNvbnRyb2xsZXIoYXJncykge1xyXG4gICAgICAgIGxldCBsO1xyXG4gICAgICAgIGNvbnN0IGxvYWRSZXdhcmQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsID0gbW9kZWxzLnJld2FyZERldGFpbCxcclxuICAgICAgICAgICAgICAgIHJld2FyZF9pZCA9IGFyZ3MuaXRlbS5yZXdhcmRfaWQsXHJcbiAgICAgICAgICAgICAgICBvcHRzID0gbW9kZWwuZ2V0Um93T3B0aW9ucyhoLmlkVk0uaWQocmV3YXJkX2lkKS5wYXJhbWV0ZXJzKCkpLFxyXG4gICAgICAgICAgICAgICAgcmV3YXJkID0gbS5wcm9wKHt9KTtcclxuXHJcbiAgICAgICAgICAgIGwgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKG9wdHMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJld2FyZF9pZCkge1xyXG4gICAgICAgICAgICAgICAgbC5sb2FkKCkudGhlbihfLmNvbXBvc2UocmV3YXJkLCBfLmZpcnN0KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXdhcmQ7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmV3YXJkOiBsb2FkUmV3YXJkKCksXHJcbiAgICAgICAgICAgIGFjdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHRyYW5zZmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6ICd1c2VyX2lkJyxcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXk6ICdpZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbFRvQWN0aW9uOiAnVHJhbnNmZXJpcicsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJMYWJlbDogJ0lkIGRvIG5vdm8gYXBvaWFkb3I6JyxcclxuICAgICAgICAgICAgICAgICAgICBvdXRlckxhYmVsOiAnVHJhbnNmZXJpciBBcG9pbycsXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdleDogMTI5OTA4JyxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzTWVzc2FnZTogJ0Fwb2lvIHRyYW5zZmVyaWRvIGNvbSBzdWNlc3NvIScsXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnTyBhcG9pbyBuw6NvIGZvaSB0cmFuc2ZlcmlkbyEnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBtb2RlbHMuY29udHJpYnV0aW9uRGV0YWlsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmV3YXJkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0S2V5OiAncHJvamVjdF9pZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlS2V5OiAnY29udHJpYnV0aW9uX2lkJyxcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RLZXk6ICdyZXdhcmRfaWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJhZGlvczogJ3Jld2FyZHMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxUb0FjdGlvbjogJ0FsdGVyYXIgUmVjb21wZW5zYScsXHJcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJMYWJlbDogJ1JlY29tcGVuc2EnLFxyXG4gICAgICAgICAgICAgICAgICAgIGdldE1vZGVsOiBtb2RlbHMucmV3YXJkRGV0YWlsLFxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZU1vZGVsOiBtb2RlbHMuY29udHJpYnV0aW9uRGV0YWlsLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogbG9hZFJld2FyZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlKHJld2FyZHMsIG5ld1Jld2FyZElEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXdhcmQgPSBfLmZpbmRXaGVyZShyZXdhcmRzLCB7aWQ6IG5ld1Jld2FyZElEfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXJncy5pdGVtLnZhbHVlID49IHJld2FyZC5taW5pbXVtX3ZhbHVlKSA/IHVuZGVmaW5lZCA6ICdWYWxvciBtw61uaW1vIGRhIHJlY29tcGVuc2Egw6kgbWFpb3IgZG8gcXVlIG8gdmFsb3IgZGEgY29udHJpYnVpw6fDo28uJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVmdW5kOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlS2V5OiAnaWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxUb0FjdGlvbjogJ1JlZW1ib2xzbyBkaXJldG8nLFxyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyTGFiZWw6ICdUZW0gY2VydGV6YSBxdWUgZGVzZWphIHJlZW1ib2xzYXIgZXNzZSBhcG9pbz8nLFxyXG4gICAgICAgICAgICAgICAgICAgIG91dGVyTGFiZWw6ICdSZWVtYm9sc2FyIEFwb2lvJyxcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogbW9kZWxzLmNvbnRyaWJ1dGlvbkRldGFpbFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlbW92ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiAnc3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUtleTogJ2lkJyxcclxuICAgICAgICAgICAgICAgICAgICBjYWxsVG9BY3Rpb246ICdBcGFnYXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyTGFiZWw6ICdUZW0gY2VydGV6YSBxdWUgZGVzZWphIGFwYWdhciBlc3NlIGFwb2lvPycsXHJcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJMYWJlbDogJ0FwYWdhciBBcG9pbycsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VWYWx1ZTogJ2RlbGV0ZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAnQXBvaW8gcmVtb3ZpZG8gY29tIHN1Y2Vzc28hJyxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICdPIGFwb2lvIG7Do28gZm9pIHJlbW92aWRvIScsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IG1vZGVscy5jb250cmlidXRpb25EZXRhaWxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbDogbFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgbGV0IGFjdGlvbnMgPSBjdHJsLmFjdGlvbnMsXHJcbiAgICAgICAgICAgIGl0ZW0gPSBhcmdzLml0ZW0sXHJcbiAgICAgICAgICAgIHJld2FyZCA9IGN0cmwucmV3YXJkO1xyXG5cclxuICAgICAgICBjb25zdCBhZGRPcHRpb25zID0gKGJ1aWxkZXIsIGlkKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBfLmV4dGVuZCh7fSwgYnVpbGRlciwge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IChgL2FkbWluL2NvbnRyaWJ1dGlvbnMvJHtpZH0vZ2F0ZXdheV9yZWZ1bmRgKSxcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQVVQnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBtKCcjYWRtaW4tY29udHJpYnV0aW9uLWRldGFpbC1ib3gnLCBbXHJcbiAgICAgICAgICAgIG0oJy5kaXZpZGVyLnUtbWFyZ2ludG9wLTIwLnUtbWFyZ2luYm90dG9tLTIwJyksXHJcbiAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0zMCcsIFtcclxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluSW5wdXRBY3Rpb24sIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBhY3Rpb25zLnRyYW5zZmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1cclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKGN0cmwubCgpKSA/IGgubG9hZGVyIDpcclxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluUmFkaW9BY3Rpb24sIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBhY3Rpb25zLnJld2FyZCxcclxuICAgICAgICAgICAgICAgICAgICBpdGVtOiByZXdhcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0S2V5VmFsdWU6IGl0ZW0ucHJvamVjdF9pZCxcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVLZXlWYWx1ZTogaXRlbS5jb250cmlidXRpb25faWRcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5FeHRlcm5hbEFjdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGFkZE9wdGlvbnMoYWN0aW9ucy5yZWZ1bmQsIGl0ZW0uaWQpLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1cclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5JbnB1dEFjdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGFjdGlvbnMucmVtb3ZlLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBtKCcudy1yb3cuY2FyZC5jYXJkLXRlcmNpYXJ5LnUtcmFkaXVzJywgW1xyXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5UcmFuc2FjdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbjogaXRlbVxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pblRyYW5zYWN0aW9uSGlzdG9yeSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbjogaXRlbVxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAoY3RybC5sKCkpID8gaC5sb2FkZXIgOlxyXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5SZXdhcmQsIHtcclxuICAgICAgICAgICAgICAgICAgICByZXdhcmQ6IHJld2FyZCxcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IGl0ZW0ua2V5XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Db250cmlidXRpb25EZXRhaWw7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5cclxuY29uc3QgZmlsdGVyTnVtYmVyUmFuZ2UgPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNicsIFtcclxuICAgICAgICAgICAgbSgnbGFiZWwuZm9udHNpemUtc21hbGxlcltmb3I9XCInICsgYXJncy5pbmRleCArICdcIl0nLCBhcmdzLmxhYmVsKSxcclxuICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUudy1jb2wtc21hbGwtNS53LWNvbC10aW55LTUnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkLnBvc2l0aXZlW2lkPVwiJyArIGFyZ3MuaW5kZXggKyAnXCJdW3R5cGU9XCJ0ZXh0XCJdJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBhcmdzLmZpcnN0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFyZ3MuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXNtYWxsLTIudy1jb2wtdGlueS0yJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLnUtdGV4dC1jZW50ZXIubGluZWhlaWdodC1sb29zZXInLCAnZScpXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01LnctY29sLXNtYWxsLTUudy1jb2wtdGlueS01JywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZC5wb3NpdGl2ZVt0eXBlPVwidGV4dFwiXScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgYXJncy5sYXN0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFyZ3MubGFzdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmaWx0ZXJOdW1iZXJSYW5nZTtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcblxyXG5jb25zdCBmaWx0ZXJEYXRlUmFuZ2UgPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNicsIFtcclxuICAgICAgICAgICAgbSgnbGFiZWwuZm9udHNpemUtc21hbGxlcltmb3I9XCInICsgYXJncy5pbmRleCArICdcIl0nLCBhcmdzLmxhYmVsKSxcclxuICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUudy1jb2wtc21hbGwtNS53LWNvbC10aW55LTUnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkLnBvc2l0aXZlW2lkPVwiJyArIGFyZ3MuaW5kZXggKyAnXCJdW3R5cGU9XCJ0ZXh0XCJdJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBhcmdzLmZpcnN0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFyZ3MuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXNtYWxsLTIudy1jb2wtdGlueS0yJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLnUtdGV4dC1jZW50ZXIubGluZWhlaWdodC1sb29zZXInLCAnZScpXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01LnctY29sLXNtYWxsLTUudy1jb2wtdGlueS01JywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXQudGV4dC1maWVsZC5wb3NpdGl2ZVt0eXBlPVwidGV4dFwiXScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgYXJncy5sYXN0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFyZ3MubGFzdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmaWx0ZXJEYXRlUmFuZ2U7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IGNvbnRyaWJ1dGlvbkxpc3RWTSBmcm9tICcuLi92bXMvY29udHJpYnV0aW9uLWxpc3Qtdm0nO1xyXG5pbXBvcnQgY29udHJpYnV0aW9uRmlsdGVyVk0gZnJvbSAnLi4vdm1zL2NvbnRyaWJ1dGlvbi1maWx0ZXItdm0nO1xyXG5pbXBvcnQgYWRtaW5MaXN0IGZyb20gJy4uL2MvYWRtaW4tbGlzdCc7XHJcbmltcG9ydCBhZG1pbkZpbHRlciBmcm9tICcuLi9jL2FkbWluLWZpbHRlcic7XHJcbmltcG9ydCBhZG1pbkNvbnRyaWJ1dGlvbkl0ZW0gZnJvbSAnLi4vYy9hZG1pbi1jb250cmlidXRpb24taXRlbSc7XHJcbmltcG9ydCBhZG1pbkNvbnRyaWJ1dGlvbkRldGFpbCBmcm9tICcuLi9jL2FkbWluLWNvbnRyaWJ1dGlvbi1kZXRhaWwnO1xyXG5pbXBvcnQgZmlsdGVyTWFpbiBmcm9tICcuLi9jL2ZpbHRlci1tYWluJztcclxuaW1wb3J0IGZpbHRlckRyb3Bkb3duIGZyb20gJy4uL2MvZmlsdGVyLWRyb3Bkb3duJztcclxuaW1wb3J0IGZpbHRlck51bWJlclJhbmdlIGZyb20gJy4uL2MvZmlsdGVyLW51bWJlci1yYW5nZSc7XHJcbmltcG9ydCBmaWx0ZXJEYXRlUmFuZ2UgZnJvbSAnLi4vYy9maWx0ZXItZGF0ZS1yYW5nZSc7XHJcblxyXG5jb25zdCBhZG1pbkNvbnRyaWJ1dGlvbnMgPSB7XHJcbiAgICBjb250cm9sbGVyKCkge1xyXG4gICAgICAgIHZhciBsaXN0Vk0gPSBjb250cmlidXRpb25MaXN0Vk0sXHJcbiAgICAgICAgICAgIGZpbHRlclZNID0gY29udHJpYnV0aW9uRmlsdGVyVk0sXHJcbiAgICAgICAgICAgIGVycm9yID0gbS5wcm9wKCcnKSxcclxuICAgICAgICAgICAgZmlsdGVyQnVpbGRlciA9IFt7IC8vZnVsbF90ZXh0X2luZGV4XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGZpbHRlck1haW4sXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm06IGZpbHRlclZNLmZ1bGxfdGV4dF9pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0J1c3F1ZSBwb3IgcHJvamV0bywgZW1haWwsIElkcyBkbyB1c3XDoXJpbyBlIGRvIGFwb2lvLi4uJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7IC8vc3RhdGVcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogZmlsdGVyRHJvcGRvd24sXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdDb20gbyBlc3RhZG8nLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzdGF0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgdm06IGZpbHRlclZNLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAnUXVhbHF1ZXIgdW0nXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3BhaWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb246ICdwYWlkJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdyZWZ1c2VkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAncmVmdXNlZCdcclxuICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAncGVuZGluZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ3BlbmRpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3BlbmRpbmdfcmVmdW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAncGVuZGluZ19yZWZ1bmQnXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3JlZnVuZGVkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAncmVmdW5kZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2NoYXJnZWJhY2snLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb246ICdjaGFyZ2ViYWNrJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdkZWxldGVkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAnZGVsZXRlZCdcclxuICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7IC8vZ2F0ZXdheVxyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBmaWx0ZXJEcm9wZG93bixcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ2dhdGV3YXknLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnYXRld2F5JyxcclxuICAgICAgICAgICAgICAgICAgICB2bTogZmlsdGVyVk0uZ2F0ZXdheSxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1F1YWxxdWVyIHVtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdQYWdhcm1lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAnUGFnYXJtZSdcclxuICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnTW9JUCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ01vSVAnXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ1BheVBhbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1BheVBhbCdcclxuICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnQ3JlZGl0cycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ0Nyw6lkaXRvcydcclxuICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7IC8vdmFsdWVcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogZmlsdGVyTnVtYmVyUmFuZ2UsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdWYWxvcmVzIGVudHJlJyxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdDogZmlsdGVyVk0udmFsdWUuZ3RlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3Q6IGZpbHRlclZNLnZhbHVlLmx0ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7IC8vY3JlYXRlZF9hdFxyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBmaWx0ZXJEYXRlUmFuZ2UsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdQZXLDrW9kbyBkbyBhcG9pbycsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IGZpbHRlclZNLmNyZWF0ZWRfYXQuZ3RlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3Q6IGZpbHRlclZNLmNyZWF0ZWRfYXQubHRlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBzdWJtaXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcihmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBsaXN0Vk0uZmlyc3RQYWdlKGZpbHRlclZNLnBhcmFtZXRlcnMoKSkudGhlbihudWxsLCAoc2VydmVyRXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcihzZXJ2ZXJFcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmaWx0ZXJWTTogZmlsdGVyVk0sXHJcbiAgICAgICAgICAgIGZpbHRlckJ1aWxkZXI6IGZpbHRlckJ1aWxkZXIsXHJcbiAgICAgICAgICAgIGxpc3RWTToge1xyXG4gICAgICAgICAgICAgICAgbGlzdDogbGlzdFZNLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnQXBvaW9zJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWJtaXQ6IHN1Ym1pdFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIHZpZXcoY3RybCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG0uY29tcG9uZW50KGFkbWluRmlsdGVyLCB7XHJcbiAgICAgICAgICAgICAgICBmb3JtOiBjdHJsLmZpbHRlclZNLmZvcm1EZXNjcmliZXIsXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJCdWlsZGVyOiBjdHJsLmZpbHRlckJ1aWxkZXIsXHJcbiAgICAgICAgICAgICAgICBzdWJtaXQ6IGN0cmwuc3VibWl0XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBtLmNvbXBvbmVudChhZG1pbkxpc3QsIHtcclxuICAgICAgICAgICAgICAgIHZtOiBjdHJsLmxpc3RWTSxcclxuICAgICAgICAgICAgICAgIGxpc3RJdGVtOiBhZG1pbkNvbnRyaWJ1dGlvbkl0ZW0sXHJcbiAgICAgICAgICAgICAgICBsaXN0RGV0YWlsOiBhZG1pbkNvbnRyaWJ1dGlvbkRldGFpbFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZG1pbkNvbnRyaWJ1dGlvbnM7XHJcbiIsIi8qKlxyXG4gKiB3aW5kb3cuYy5sYW5kaW5nU2lnbnVwIGNvbXBvbmVudFxyXG4gKiBBIHZpc3VhbCBjb21wb25lbnQgdGhhdCBkaXNwbGF5cyBzaWdudXAgZW1haWwgdHlwaWNhbGx5IHVzZWQgb24gbGFuZGluZyBwYWdlcy5cclxuICogSXQgYWNjZXB0cyBhIGN1c3RvbSBmb3JtIGFjdGlvbiB0byBhdHRhY2ggdG8gdGhpcmQtcGFydHkgc2VydmljZXMgbGlrZSBNYWlsY2hpbXBcclxuICpcclxuICogRXhhbXBsZTpcclxuICogdmlldzogKCkgPT4ge1xyXG4gKiAgICAgIC4uLlxyXG4gKiAgICAgIG0uY29tcG9uZW50KGMubGFuZGluZ1NpZ251cCwge1xyXG4gKiAgICAgICAgICBidWlsZGVyOiB7XHJcbiAqICAgICAgICAgICAgICBjdXN0b21BY3Rpb246ICdodHRwOi8vZm9ybWVuZHBvaW50LmNvbSdcclxuICogICAgICAgICAgfVxyXG4gKiAgICAgIH0pXHJcbiAqICAgICAgLi4uXHJcbiAqICB9XHJcbiAqL1xyXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcblxyXG5jb25zdCBsYW5kaW5nU2lnbnVwID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgYnVpbGRlciA9IGFyZ3MuYnVpbGRlcixcclxuICAgICAgICAgICAgZW1haWwgPSBtLnByb3AoJycpLFxyXG4gICAgICAgICAgICBlcnJvciA9IG0ucHJvcChmYWxzZSksXHJcbiAgICAgICAgICAgIHN1Ym1pdCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChoLnZhbGlkYXRlRW1haWwoZW1haWwoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxyXG4gICAgICAgICAgICBzdWJtaXQ6IHN1Ym1pdCxcclxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBsZXQgZXJyb3JDbGFzc2VzID0gKCFjdHJsLmVycm9yKSA/ICcucG9zaXRpdmUuZXJyb3InIDogJyc7XHJcbiAgICAgICAgcmV0dXJuIG0oJ2Zvcm0udy1mb3JtW2lkPVwiZW1haWwtZm9ybVwiXVttZXRob2Q9XCJwb3N0XCJdW2FjdGlvbj1cIicgKyBhcmdzLmJ1aWxkZXIuY3VzdG9tQWN0aW9uICsgJ1wiXScse1xyXG4gICAgICAgICAgICBvbnN1Ym1pdDogY3RybC5zdWJtaXRcclxuICAgICAgICB9LFtcclxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnLCBbXHJcbiAgICAgICAgICAgICAgICBtKGBpbnB1dCR7ZXJyb3JDbGFzc2VzfS53LWlucHV0LnRleHQtZmllbGQubWVkaXVtW25hbWU9XCJFTUFJTFwiXVtwbGFjZWhvbGRlcj1cIkRpZ2l0ZSBzZXUgZW1haWxcIl1bdHlwZT1cInRleHRcIl1gLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBoLlJEVHJhY2tlcignbGFuZGluZy1mbGV4JyksXHJcbiAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5lbWFpbCksXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0cmwuZW1haWwoKVxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAoY3RybC5lcnJvcigpID8gbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVyLnRleHQtZXJyb3InLCAnRS1tYWlsIGludsOhbGlkbycpIDogJycpXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMycsIFtcclxuICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctYnV0dG9uLmJ0bi5idG4tbGFyZ2VbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIkNhZGFzdHJhclwiXScpXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBsYW5kaW5nU2lnbnVwO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuY2FyZCcpO1xyXG5jb25zdCBwcm9qZWN0Q2FyZCA9IHtcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QsXHJcbiAgICAgICAgICAgIHByb2dyZXNzID0gcHJvamVjdC5wcm9ncmVzcy50b0ZpeGVkKDIpLFxyXG4gICAgICAgICAgICByZW1haW5pbmdUZXh0T2JqID0gaC50cmFuc2xhdGVkVGltZShwcm9qZWN0LnJlbWFpbmluZ190aW1lKSxcclxuICAgICAgICAgICAgZWxhcHNlZFRleHRPYmogPSBoLnRyYW5zbGF0ZWRUaW1lKHByb2plY3QuZWxhcHNlZF90aW1lKSxcclxuICAgICAgICAgICAgbGluayA9ICcvJyArIHByb2plY3QucGVybWFsaW5rICsgKGFyZ3MucmVmID8gJz9yZWY9JyArIGFyZ3MucmVmIDogJycpLFxyXG4gICAgICAgICAgICB0eXBlID0gYXJncy50eXBlIHx8ICdzbWFsbCcsXHJcbiAgICAgICAgICAgIGNzcyA9IChjYXJkVHlwZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3NzQ2xhc3NlcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAnc21hbGwnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXI6ICcudy1jb2wudy1jb2wtNCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyV3JhcHBlcjogJy5jYXJkLXByb2plY3QuY2FyZC51LXJhZGl1cycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRodW1iOiAnLmNhcmQtcHJvamVjdC10aHVtYicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uV3JhcHBlcjogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnLmNhcmQtcHJvamVjdC1kZXNjcmlwdGlvbi5hbHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJy5mb250d2VpZ2h0LXNlbWlib2xkLnUtdGV4dC1jZW50ZXItc21hbGwtb25seS5saW5laGVpZ2h0LXRpZ2h0LnUtbWFyZ2luYm90dG9tLTEwLmZvbnRzaXplLWJhc2UnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6ICcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5LnUtbWFyZ2luYm90dG9tLTIwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGxpbmU6ICcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5mb250Y29sb3Itc2Vjb25kYXJ5LmZvbnRzaXplLXNtYWxsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaXR5OiAnLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuY2FyZC1wcm9qZWN0LWF1dGhvci5hbHR0J1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ21lZGl1bSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlcjogJy53LWNvbC53LWNvbC02JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJXcmFwcGVyOiAnLmNhcmQtcHJvamVjdC5jYXJkLnUtcmFkaXVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWI6ICcuY2FyZC1wcm9qZWN0LXRodW1iLm1lZGl1bScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uV3JhcHBlcjogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnLmNhcmQtcHJvamVjdC1kZXNjcmlwdGlvbi5hbHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiAnLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeS51LW1hcmdpbmJvdHRvbS0yMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRsaW5lOiAnLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkuZm9udGNvbG9yLXNlY29uZGFyeS5mb250c2l6ZS1zbWFsbGVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2l0eTogJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmNhcmQtcHJvamVjdC1hdXRob3IuYWx0dCdcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdiaWcnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXI6ICcuY2FyZC51LXJhZGl1cy5jYXJkLXByb2plY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lcldyYXBwZXI6ICcudy1yb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYjogJy53LWNvbC53LWNvbC04LnctY29sLW1lZGl1bS02LmNhcmQtcHJvamVjdC10aHVtYi5iaWcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbldyYXBwZXI6ICcudy1jb2wudy1jb2wtNC53LWNvbC1tZWRpdW0tNicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnLmNhcmQtcHJvamVjdC1kZXNjcmlwdGlvbi5iaWcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJy5mb250c2l6ZS1sYXJnZS5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiAnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnkudS1tYXJnaW5ib3R0b20tMjAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkbGluZTogJy5mb250Y29sb3Itc2Vjb25kYXJ5LmZvbnRzaXplLXNtYWxsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaXR5OiAnLnctaGlkZGVuJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXNbY2FyZFR5cGVdO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gbShjc3ModHlwZSkud3JhcHBlciwgW1xyXG4gICAgICAgICAgICBtKGNzcyh0eXBlKS5pbm5lcldyYXBwZXIsIFtcclxuICAgICAgICAgICAgICAgIG0oYGEke2Nzcyh0eXBlKS50aHVtYn1baHJlZj1cIiR7bGlua31cIl1gLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBgdXJsKCR7cHJvamVjdC5wcm9qZWN0X2ltZ30pYCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnYmxvY2snXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBtKGNzcyh0eXBlKS5kZXNjcmlwdGlvbldyYXBwZXIsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKGNzcyh0eXBlKS5kZXNjcmlwdGlvbiwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKGNzcyh0eXBlKS50aXRsZSwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5saW5rLWhpZGRlbltocmVmPVwiJHtsaW5rfVwiXWAsIHByb2plY3QucHJvamVjdF9uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbShjc3ModHlwZSkuYXV0aG9yLCBgJHtJMThuLnQoJ2J5JywgSTE4blNjb3BlKCkpfSAke3Byb2plY3Qub3duZXJfbmFtZX1gKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbShjc3ModHlwZSkuaGVhZGxpbmUsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEubGluay1oaWRkZW5baHJlZj1cIiR7bGlua31cIl1gLCBwcm9qZWN0LmhlYWRsaW5lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oY3NzKHR5cGUpLmNpdHksIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCBbbSgnc3Bhbi5mYS5mYS1tYXAtbWFya2VyLmZhLTEnLCAnICcpLCBgICR7cHJvamVjdC5jaXR5X25hbWUgPyBwcm9qZWN0LmNpdHlfbmFtZSA6ICcnfSwgJHtwcm9qZWN0LnN0YXRlX2Fjcm9ueW0gPyBwcm9qZWN0LnN0YXRlX2Fjcm9ueW0gOiAnJ31gXSlcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICBtKGAuY2FyZC1wcm9qZWN0LW1ldGVyLiR7cHJvamVjdC5zdGF0ZX1gLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChfLmNvbnRhaW5zKFsnc3VjY2Vzc2Z1bCcsICdmYWlsZWQnLCAnd2FpdGluZ19mdW5kcyddLCBwcm9qZWN0LnN0YXRlKSkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgSTE4bi50KCdkaXNwbGF5X3N0YXR1cy4nICsgcHJvamVjdC5zdGF0ZSwgSTE4blNjb3BlKCkpKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5tZXRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5tZXRlci1maWxsJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBgJHsocHJvZ3Jlc3MgPiAxMDAgPyAxMDAgOiBwcm9ncmVzcyl9JWBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5jYXJkLXByb2plY3Qtc3RhdHMnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXNtYWxsLTQudy1jb2wtdGlueS00JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBgJHtNYXRoLmNlaWwocHJvamVjdC5wcm9ncmVzcyl9JWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY29sLXNtYWxsLTQudy1jb2wtdGlueS00LnUtdGV4dC1jZW50ZXItc21hbGwtb25seScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlci5mb250d2VpZ2h0LXNlbWlib2xkJywgYFIkICR7aC5mb3JtYXROdW1iZXIocHJvamVjdC5wbGVkZ2VkKX1gKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC10aWdodGVzdCcsICdMZXZhbnRhZG9zJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQudS10ZXh0LXJpZ2h0JywgcHJvamVjdC5leHBpcmVzX2F0ID8gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBgJHtyZW1haW5pbmdUZXh0T2JqLnRvdGFsfSAke3JlbWFpbmluZ1RleHRPYmoudW5pdH1gKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QubGluZWhlaWdodC10aWdodGVzdCcsIChyZW1haW5pbmdUZXh0T2JqLnRvdGFsID4gMSkgPyAnUmVzdGFudGVzJyA6ICdSZXN0YW50ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LXRpZ2h0JywgWydJbmljaWFkbyBow6EnLG0oJ2JyJyksYCR7ZWxhcHNlZFRleHRPYmoudG90YWx9ICR7ZWxhcHNlZFRleHRPYmoudW5pdH1gXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q2FyZDtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IHByb2plY3RDYXJkIGZyb20gJy4vcHJvamVjdC1jYXJkJztcclxuXHJcbmNvbnN0IHByb2plY3RSb3cgPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gYXJncy5jb2xsZWN0aW9uLFxyXG4gICAgICAgICAgICB0aXRsZSA9IGFyZ3MudGl0bGUgfHwgY29sbGVjdGlvbi50aXRsZSxcclxuICAgICAgICAgICAgcmVmID0gYXJncy5yZWYsXHJcbiAgICAgICAgICAgIHdyYXBwZXIgPSBhcmdzLndyYXBwZXIgfHwgJy53LXNlY3Rpb24uc2VjdGlvbi51LW1hcmdpbmJvdHRvbS00MCc7XHJcblxyXG4gICAgICAgIGlmIChjb2xsZWN0aW9uLmxvYWRlcigpIHx8IGNvbGxlY3Rpb24uY29sbGVjdGlvbigpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG0od3JhcHBlciwgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICghXy5pc1VuZGVmaW5lZChjb2xsZWN0aW9uLnRpdGxlKSB8fCAhXy5pc1VuZGVmaW5lZChjb2xsZWN0aW9uLmhhc2gpKSA/IG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0zMCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtbG9vc2VyJywgdGl0bGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYnRuLmJ0bi1zbWFsbC5idG4tdGVyY2lhcnlbaHJlZj1cIi9wdC9leHBsb3JlP3JlZj0ke3JlZn0jJHtjb2xsZWN0aW9uLmhhc2h9XCJdYCwgJ1ZlciB0b2RvcycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSkgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLmxvYWRlcigpID8gaC5sb2FkZXIoKSA6IG0oJy53LXJvdycsIF8ubWFwKGNvbGxlY3Rpb24uY29sbGVjdGlvbigpLCAocHJvamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQocHJvamVjdENhcmQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6IHJlZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtKCdkaXYnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Um93O1xyXG4iLCIvKipcclxuICogd2luZG93LmMubGFuZGluZ1FBIGNvbXBvbmVudFxyXG4gKiBBIHZpc3VhbCBjb21wb25lbnQgdGhhdCBkaXNwbGF5cyBhIHF1ZXN0aW9uL2Fuc3dlciBib3ggd2l0aCB0b2dnbGVcclxuICpcclxuICogRXhhbXBsZTpcclxuICogdmlldzogKCkgPT4ge1xyXG4gKiAgICAgIC4uLlxyXG4gKiAgICAgIG0uY29tcG9uZW50KGMubGFuZGluZ1FBLCB7XHJcbiAqICAgICAgICAgIHF1ZXN0aW9uOiAnV2hhdHMgeW91ciBuYW1lPycsXHJcbiAqICAgICAgICAgIGFuc3dlcjogJ0RhcnRoIFZhZGVyLidcclxuICogICAgICB9KVxyXG4gKiAgICAgIC4uLlxyXG4gKiAgfVxyXG4gKi9cclxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5cclxuY29uc3QgbGFuZGluZ1FBID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2hvd0Fuc3dlcjogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIG0oJy5jYXJkLnFhLWNhcmQudS1tYXJnaW5ib3R0b20tMjAudS1yYWRpdXMuYnRuLXRlcmNpYXJ5JyxbXHJcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywge1xyXG4gICAgICAgICAgICAgICAgb25jbGljazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0cmwuc2hvd0Fuc3dlci50b2dnbGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBhcmdzLm9uY2xpY2sgJiYgYXJncy5vbmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGFyZ3MucXVlc3Rpb24pLFxyXG4gICAgICAgICAgICBjdHJsLnNob3dBbnN3ZXIoKSA/IG0oJ3AudS1tYXJnaW50b3AtMjAuZm9udHNpemUtc21hbGwnLCBtLnRydXN0KGFyZ3MuYW5zd2VyKSkgOiAnJ1xyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbGFuZGluZ1FBO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCBsYW5kaW5nU2lnbnVwIGZyb20gJy4uL2MvbGFuZGluZy1zaWdudXAnO1xyXG5pbXBvcnQgcHJvamVjdFJvdyBmcm9tICcuLi9jL3Byb2plY3Qtcm93JztcclxuaW1wb3J0IGxhbmRpbmdRQSBmcm9tICcuLi9jL2xhbmRpbmctcWEnO1xyXG5cclxuY29uc3QgRmxleCA9IHtcclxuICAgIGNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdHMgPSBtLnByb3AoW10pLFxyXG4gICAgICAgICAgICBwcm9qZWN0cyA9IG0ucHJvcChbXSksXHJcbiAgICAgICAgICAgIGwgPSBtLnByb3AoKSxcclxuICAgICAgICAgICAgc2FtcGxlMyA9IF8ucGFydGlhbChfLnNhbXBsZSwgXywgMyksXHJcbiAgICAgICAgICAgIGJ1aWxkZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBjdXN0b21BY3Rpb246ICdodHRwOi8vZmF6dW0uY2F0YXJzZS5tZS9vYnJpZ2Fkby1sYW5kaW5nLWNhdGFyc2UtZmxleCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWRkRGlzcXVzID0gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoLmRpc2N1c3MoJ2h0dHBzOi8vY2F0YXJzZS5tZS9mbGV4JywgJ2ZsZXhfcGFnZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmbGV4Vk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcclxuICAgICAgICAgICAgICAgIG1vZGU6ICdlcScsXHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2VxJyxcclxuICAgICAgICAgICAgICAgIHJlY29tbWVuZGVkOiAnZXEnXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzdGF0c0xvYWRlciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obW9kZWxzLnN0YXRpc3RpYy5nZXRSb3dPcHRpb25zKCkpO1xyXG5cclxuICAgICAgICBmbGV4Vk0ubW9kZSgnZmxleCcpLnN0YXRlKCdvbmxpbmUnKS5yZWNvbW1lbmRlZCh0cnVlKTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdHNMb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyKG1vZGVscy5wcm9qZWN0LmdldFBhZ2VPcHRpb25zKGZsZXhWTS5wYXJhbWV0ZXJzKCkpKTtcclxuXHJcbiAgICAgICAgc3RhdHNMb2FkZXIubG9hZCgpLnRoZW4oc3RhdHMpO1xyXG5cclxuICAgICAgICBwcm9qZWN0c0xvYWRlci5sb2FkKCkudGhlbihfLmNvbXBvc2UocHJvamVjdHMsIHNhbXBsZTMpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYWRkRGlzcXVzOiBhZGREaXNxdXMsXHJcbiAgICAgICAgICAgIGJ1aWxkZXI6IGJ1aWxkZXIsXHJcbiAgICAgICAgICAgIHN0YXRzTG9hZGVyOiBzdGF0c0xvYWRlcixcclxuICAgICAgICAgICAgc3RhdHM6IHN0YXRzLFxyXG4gICAgICAgICAgICBwcm9qZWN0c0xvYWRlcjogcHJvamVjdHNMb2FkZXIsXHJcbiAgICAgICAgICAgIHByb2plY3RzOiB7XHJcbiAgICAgICAgICAgICAgICBsb2FkZXI6IHByb2plY3RzTG9hZGVyLFxyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogcHJvamVjdHNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgbGV0IHN0YXRzID0gXy5maXJzdChjdHJsLnN0YXRzKCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLmhlcm8tZnVsbC5oZXJvLXplbG8nLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCdpbWcubG9nby1mbGV4LWhvbWVbc3JjPVxcJy9hc3NldHMvbG9nby1mbGV4LnBuZ1xcJ11bd2lkdGg9XFwnMzU5XFwnXScpLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTYwLnctY29sLXB1c2gtMi53LWNvbC04JywgJ1ZhbW9zIGNvbnN0cnVpciB1bWEgbm92YSBtb2RhbGlkYWRlIGRlIGNyb3dkZnVuZGluZyEgQ2FkYXN0cmUgc2V1IGVtYWlsIGUgc2FpYmEgY29tbyBpbnNjcmV2ZXIgbyBzZXUgcHJvamV0byBubyBmbGV4IScpXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChsYW5kaW5nU2lnbnVwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBjdHJsLmJ1aWxkZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJylcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgXSksIFtcclxuICAgICAgICAgICAgICAgIG0oJy5zZWN0aW9uJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlc3QudS1tYXJnaW50b3AtNDAudS10ZXh0LWNlbnRlcicsICdQcmEgcXVlbSBzZXLDoT8nKSwgbSgnLmZvbnRzaXplLWJhc2UudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS02MCcsICdJbmljaWFyZW1vcyBhIGZhc2UgZGUgdGVzdGVzIGNvbSBjYXRlZ29yaWFzIGRlIHByb2pldG9zIGVzcGVjw61maWNhcycpLCBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNjAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTIwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nW3NyYz1cXCdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2MGUzOTNhMDFiNjZlMjUwYWNhNjdjYl9pY29uLXplbG8tY29tLnBuZ1xcJ11bd2lkdGg9XFwnMjEwXFwnXScpLCBtKCcuZm9udHNpemUtbGFyZ2VzdC5saW5laGVpZ2h0LWxvb3NlJywgJ0NhdXNhcycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCdwLmZvbnRzaXplLWJhc2UnLCAnRmxleGliaWxpZGFkZSBwYXJhIGNhdXNhcyBkZSBpbXBhY3RvISBFc3RhcmVtb3MgYWJlcnRvcyBhIGNhbXBhbmhhcyBkZSBvcmdhbml6YcOnw7VlcyBvdSBwZXNzb2FzIGbDrXNpY2FzIHBhcmEgYXJyZWNhZGHDp8OjbyBkZSByZWN1cnNvcyBwYXJhIGNhdXNhcyBwZXNzb2FpcywgcHJvamV0b3MgYXNzaXN0ZW5jaWFpcywgc2HDumRlLCBhanVkYXMgaHVtYW5pdMOhcmlhcywgcHJvdGXDp8OjbyBhb3MgYW5pbWFpcywgZW1wcmVlbmRlZG9yaXNtbyBzb2Npb2FtYmllbnRhbCwgYXRpdmlzbW8gb3UgcXVhbHF1ZXIgY29pc2EgcXVlIHVuYSBhcyBwZXNzb2FzIHBhcmEgZmF6ZXIgbyBiZW0uJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgnLnctY29sLnctY29sLTYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTIwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nW3NyYz1cXCdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2MGUzOTI5YTBkYWVhMjMwYTVmMTJjZF9pY29uLXplbG8tcGVzc29hbC5wbmdcXCddW3dpZHRoPVxcJzIxMFxcJ10nKSwgbSgnLmZvbnRzaXplLWxhcmdlc3QubGluZWhlaWdodC1sb29zZScsICdWYXF1aW5oYXMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgncC5mb250c2l6ZS1iYXNlJywgJ0NhbXBhbmhhcyBzaW1wbGVzIHF1ZSBwcmVjaXNhbSBkZSBmbGV4aWJpbGlkYWRlIHBhcmEgYXJyZWNhZGFyIGRpbmhlaXJvIGNvbSBwZXNzb2FzIHByw7N4aW1hcy4gRXN0YXJlbW9zIGFiZXJ0b3MgYSB1bWEgdmFyaWVkYWRlIGRlIGNhbXBhbmhhcyBwZXNzb2FpcyBxdWUgcG9kZW0gaXIgZGVzZGUgY29icmlyIGN1c3RvcyBkZSBlc3R1ZG9zIGEgYWp1ZGFyIHF1ZW0gcHJlY2lzYSBkZSB0cmF0YW1lbnRvIG3DqWRpY28uIERlIGp1bnRhciBhIGdyYW5hIHBhcmEgZmF6ZXIgYXF1ZWxhIGZlc3RhIGEgY29tcHJhciBwcmVzZW50ZXMgcGFyYSBhbGd1w6ltIGNvbSBhIGFqdWRhIGRhIGdhbGVyYS4gJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSksIG0oJy53LXNlY3Rpb24uc2VjdGlvbi5iZy1ncmVlbmxpbWUuZm9udGNvbG9yLW5lZ2F0aXZlJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlc3QudS1tYXJnaW50b3AtNDAudS1tYXJnaW5ib3R0b20tNjAudS10ZXh0LWNlbnRlcicsICdDb21vIGZ1bmNpb25hcsOhPycpLCBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNDAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nW3NyYz1cXCdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2MGUzOWM1NzhiMjg0NDkzZTJhNDI4YV96ZWxvLW1vbmV5LnBuZ1xcJ11bd2lkdGg9XFwnMTgwXFwnXScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0xMC51LXRleHQtY2VudGVyLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnRmlxdWUgY29tIHF1YW50byBhcnJlY2FkYXInKSwgbSgncC51LXRleHQtY2VudGVyLmZvbnRzaXplLWJhc2UnLCAnTyBmbGV4IMOpIHBhcmEgaW1wdWxzaW9uYXIgY2FtcGFuaGFzIG9uZGUgdG9kbyBkaW5oZWlybyDDqSBiZW0gdmluZG8hIFZvY8OqIGZpY2EgY29tIHR1ZG8gcXVlIGNvbnNlZ3VpciBhcnJlY2FkYXIuJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcudy1jb2wudy1jb2wtNicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nW3NyYz1cXCdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2MGUzOWQzN2MwMTNkNGEzZWU2ODdkMl9pY29uLXJld2FyZC5wbmdcXCddW3dpZHRoPVxcJzE4MFxcJ10nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMTAudS10ZXh0LWNlbnRlci5mb250d2VpZ2h0LXNlbWlib2xkJywgJ07Do28gcHJlY2lzYSBkZSByZWNvbXBlbnNhcycpLCBtKCdwLnUtdGV4dC1jZW50ZXIuZm9udHNpemUtYmFzZScsICdObyBmbGV4IG9mZXJlY2VyIHJlY29tcGVuc2FzIMOpIG9wY2lvbmFsLiBWb2PDqiBlc2NvbGhlIHNlIG9mZXJlY8OqLWxhcyBmYXogc2VudGlkbyBwYXJhIG8gc2V1IHByb2pldG8gZSBjYW1wYW5oYS4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS00MCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTYwZTM5ZmIwMWI2NmUyNTBhY2E2N2UzX2ljb24tY3VyYWQucG5nXFwnXVt3aWR0aD1cXCcxODBcXCddJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTEwLnUtdGV4dC1jZW50ZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsICdWb2PDqiBtZXNtbyBwdWJsaWNhIHNldSBwcm9qZXRvJyksIG0oJ3AudS10ZXh0LWNlbnRlci5mb250c2l6ZS1iYXNlJywgJ1RvZG9zIG9zIHByb2pldG9zIGluc2NyaXRvcyBubyBmbGV4IGVudHJhbSBubyBhci4gQWdpbGlkYWRlIGUgZmFjaWxpZGFkZSBwYXJhIHZvY8OqIGNhcHRhciByZWN1cnNvcyBhdHJhdsOpcyBkYSBpbnRlcm5ldC4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIG0oJy53LWNvbC53LWNvbC02JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWdbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTYwZTM5ZTc3YzAxM2Q0YTNlZTY4N2Q0X2ljb24tdGltZS5wbmdcXCddW3dpZHRoPVxcJzE4MFxcJ10nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMTAudS10ZXh0LWNlbnRlci5mb250d2VpZ2h0LXNlbWlib2xkJywgJ0VuY2VycmUgYSBjYW1wYW5oYSBxdWFuZG8gcXVpc2VyJyksIG0oJ3AudS10ZXh0LWNlbnRlci5mb250c2l6ZS1iYXNlJywgJ07Do28gaMOhIGxpbWl0ZSBkZSB0ZW1wbyBkZSBjYXB0YcOnw6NvLiBWb2PDqiBlc2NvbGhlICBxdWFuZG8gZW5jZXJyYXIgc3VhIGNhbXBhbmhhIGUgcmVjZWJlciBvcyB2YWxvcmVzIGFycmVjYWRhZG9zLicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWVkaXRhYmxlLmZvbnRzaXplLWxhcmdlci51LW1hcmdpbnRvcC00MC51LW1hcmdpbi1ib3R0b20tNDAudS10ZXh0LWNlbnRlcicsICdDb25oZcOnYSBhbGd1bnMgZG9zIHByaW1laXJvcyBwcm9qZXRvcyBmbGV4JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucHJvamVjdHNMb2FkZXIoKSA/IGgubG9hZGVyKCkgOiBtLmNvbXBvbmVudChwcm9qZWN0Um93LCB7Y29sbGVjdGlvbjogY3RybC5wcm9qZWN0cywgcmVmOiAnY3Ryc2VfZmxleCcsIHdyYXBwZXI6ICcudy1yb3cudS1tYXJnaW50b3AtNDAnfSlcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLmRpdmlkZXInKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS02MC51LW1hcmdpbnRvcC00MCcsICdEw7p2aWRhcycpLCBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tNjAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChsYW5kaW5nUUEsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246ICdRdWFpcyBzw6NvIGFzIHRheGFzIGRhIG1vZGFsaWRhZGUgZmxleMOtdmVsPyAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6ICdDb21vIG5vIENhdGFyc2UsIGVudmlhciB1bSBwcm9qZXRvIG7Do28gY3VzdGEgbmFkYSEgQSB0YXhhIGNvYnJhZGEgbm8gc2VydmnDp28gQ2F0YXJzZSBmbGV4IMOpIGRlIDEzJSBzb2JyZSBvIHZhbG9yIGFycmVjYWRhZG8uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGxhbmRpbmdRQSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ0RlIG9uZGUgdmVtIG8gZGluaGVpcm8gZG8gbWV1IHByb2pldG8/JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiAnRmFtw61saWEsIGFtaWdvcywgZsOjcyBlIG1lbWJyb3MgZGUgY29tdW5pZGFkZXMgcXVlIHZvY8OqIGZheiBwYXJ0ZSBzw6NvIHNldXMgbWFpb3JlcyBjb2xhYm9yYWRvcmVzLiBTw6NvIGVsZXMgcXVlIGlyw6NvIGRpdnVsZ2FyIHN1YSBjYW1wYW5oYSBwYXJhIGFzIHBlc3NvYXMgcXVlIGVsZXMgY29uaGVjZW0sIGUgYXNzaW0gbyBjw61yY3VsbyBkZSBhcG9pYWRvcmVzIHZhaSBhdW1lbnRhbmRvIGUgYSBzdWEgY2FtcGFuaGEgZ2FuaGEgZm9yw6dhLidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChsYW5kaW5nUUEsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246ICdRdWFsIGEgZGlmZXJlbsOnYSBlbnRyZSBvIGZsZXjDrXZlbCBlIG8gXCJ0dWRvIG91IG5hZGFcIj8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6ICdBdHVhbG1lbnRlIG8gQ2F0YXJzZSB1dGlsaXphIGFwZW5hcyBvIG1vZGVsbyBcInR1ZG8gb3UgbmFkYVwiLCBvbmRlIHZvY8OqIHPDsyBmaWNhIGNvbSBvIGRpbmhlaXJvIHNlIGJhdGVyIGEgbWV0YSBkZSBhcnJlY2FkYcOnw6NvIGRlbnRybyBkbyBwcmF6byBkYSBjYW1wYW5oYS4gTyBtb2RlbG8gZmxleMOtdmVsIMOpIGRpZmVyZW50ZSBwb2lzIHBlcm1pdGUgcXVlIG8gcmVhbGl6YWRvciBmaXF1ZSBjb20gbyBxdWUgYXJyZWNhZGFyLCBpbmRlcGVuZGVudGUgZGUgYXRpbmdpciBvdSBuw6NvIGEgbWV0YSBkbyBwcm9qZXRvIG5vIHByYXpvIGRhIGNhbXBhbmhhLiBOw6NvIGhhdmVyw6EgbGltaXRlIGRlIHRlbXBvIHBhcmEgYXMgY2FtcGFuaGFzLiBOb3NzbyBzaXN0ZW1hIGZsZXjDrXZlbCBzZXLDoSBhbGdvIG5vdm8gZW0gcmVsYcOnw6NvIGFvcyBtb2RlbG9zIHF1ZSBleGlzdGVtIGF0dWFsbWVudGUgbm8gbWVyY2Fkby4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgbSgnLnctY29sLnctY29sLTYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQobGFuZGluZ1FBLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAnUG9zc28gaW5zY3JldmVyIHByb2pldG9zIHBhcmEgYSBtb2RhbGlkYWRlIGZsZXjDrXZlbCBqw6E/JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiAnU2ltLiBDYWRhc3RyZSBzZXUgZW1haWwgZSBzYWliYSBjb21vIGluc2NyZXZlciBvIHNldSBwcm9qZXRvIG5vIGZsZXghJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KGxhbmRpbmdRQSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ1BvciBxdcOqIHZvY8OqcyBxdWVyZW0gZmF6ZXIgbyBDYXRhcnNlIGZsZXg/JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiAnQWNyZWRpdGFtb3MgcXVlIG8gYW1iaWVudGUgZG8gY3Jvd2RmdW5kaW5nIGJyYXNpbGVpcm8gYWluZGEgdGVtIGVzcGHDp28gcGFyYSBtdWl0YXMgYcOnw7VlcywgdGVzdGVzIGUgZXhwZXJpbWVudGHDp8O1ZXMgcGFyYSBlbnRlbmRlciBkZSBmYXRvIG8gcXVlIGFzIHBlc3NvYXMgcHJlY2lzYW0uIFNvbmhhbW9zIGNvbSB0b3JuYXIgbyBmaW5hbmNpYW1lbnRvIGNvbGV0aXZvIHVtIGjDoWJpdG8gbm8gQnJhc2lsLiBPIENhdGFyc2UgZmxleCDDqSBtYWlzIHVtIHBhc3NvIG5lc3NhIGRpcmXDp8Ojby4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQobGFuZGluZ1FBLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAnUXVhbmRvIHZvY8OqcyBpcsOjbyBsYW7Dp2FyIG8gQ2F0YXJzZSBmbGV4PycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogJ0FpbmRhIG7Do28gc2FiZW1vcyBxdWFuZG8gYWJyaXJlbW9zIG8gZmxleCBwYXJhIG8gcMO6YmxpY28gZW0gZ2VyYWwsIG1hcyB2b2PDqiBwb2RlIGNhZGFzdHJhciBzZXUgZW1haWwgbmVzc2EgcMOhZ2luYSBlIHJlY2ViZXIgdW0gbWF0ZXJpYWwgZXNwZWNpYWwgZGUgY29tbyBpbnNjcmV2ZXIgc2V1IHByb2pldG8uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi1sYXJnZS51LXRleHQtY2VudGVyLmJnLXB1cnBsZScsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIuZm9udGNvbG9yLW5lZ2F0aXZlJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdCcsICdJbnNjcmV2YSBzZXUgcHJvamV0byEnKSwgbSgnLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tNjAnLCAnQ2FkYXN0cmUgc2V1IGVtYWlsIGUgc2FpYmEgY29tbyBpbnNjcmV2ZXIgbyBzZXUgcHJvamV0byBubyBmbGV4IScpLCBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQobGFuZGluZ1NpZ251cCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGN0cmwuYnVpbGRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pLCBtKCcudy1zZWN0aW9uLnNlY3Rpb24tb25lLWNvbHVtbi5iZy1jYXRhcnNlLXplbG8uc2VjdGlvbi1sYXJnZVtzdHlsZT1cIm1pbi1oZWlnaHQ6IDUwdmg7XCJdJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lci51LXRleHQtY2VudGVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1lZGl0YWJsZS51LW1hcmdpbmJvdHRvbS00MC5mb250c2l6ZS1sYXJnZXIubGluZWhlaWdodC10aWdodC5mb250Y29sb3ItbmVnYXRpdmUnLCAnTyBmbGV4IMOpIHVtIGV4cGVyaW1lbnRvIGUgaW5pY2lhdGl2YSBkbyBDYXRhcnNlLCBtYWlvciBwbGF0YWZvcm1hIGRlIGNyb3dkZnVuZGluZyBkbyBCcmFzaWwuJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LXRleHQtY2VudGVyJywgKGN0cmwuc3RhdHNMb2FkZXIoKSkgPyBoLmxvYWRlcigpIDogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWp1bWJvLnRleHQtc3VjY2Vzcy5saW5laGVpZ2h0LWxvb3NlJywgaC5mb3JtYXROdW1iZXIoc3RhdHMudG90YWxfY29udHJpYnV0b3JzLCAwLCAzKSksIG0oJ3Auc3RhcnQtc3RhdHMuZm9udHNpemUtYmFzZS5mb250Y29sb3ItbmVnYXRpdmUnLCAnUGVzc29hcyBqYSBhcG9pYXJhbSBwZWxvIG1lbm9zIDAxIHByb2pldG8gbm8gQ2F0YXJzZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1qdW1iby50ZXh0LXN1Y2Nlc3MubGluZWhlaWdodC1sb29zZScsIGguZm9ybWF0TnVtYmVyKHN0YXRzLnRvdGFsX3Byb2plY3RzX3N1Y2Nlc3MsIDAsIDMpKSwgbSgncC5zdGFydC1zdGF0cy5mb250c2l6ZS1iYXNlLmZvbnRjb2xvci1uZWdhdGl2ZScsICdQcm9qZXRvcyBqYSBmb3JhbSBmaW5hbmNpYWRvcyBub8KgQ2F0YXJzZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1qdW1iby50ZXh0LXN1Y2Nlc3MubGluZWhlaWdodC1sb29zZScsIHN0YXRzLnRvdGFsX2NvbnRyaWJ1dGVkLnRvU3RyaW5nKCkuc2xpY2UoMCwgMikgKyAnIG1pbGjDtWVzJyksIG0oJ3Auc3RhcnQtc3RhdHMuZm9udHNpemUtYmFzZS5mb250Y29sb3ItbmVnYXRpdmUnLCAnRm9yYW0gaW52ZXN0aWRvcyBlbSBpZGVpYXMgcHVibGljYWRhcyBubyBDYXRhcnNlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLmJnLWJsdWUtb25lLmZvbnRjb2xvci1uZWdhdGl2ZScsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTIwJywgJ1JlY29tZW5kZSBvIENhdGFyc2UgZmxleCBwYXJhIGFtaWdvcyEgJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC02LnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02Lnctc3ViLWNvbC1taWRkbGUnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLmljb24tc2hhcmUtbW9iaWxlW3NyYz1cXCdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzUzYTNmNjZlMDVlYjYxNDQxNzFkOGVkYl9mYWNlYm9vay14eGwucG5nXFwnXScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1idXR0b24uYnRuLmJ0bi1sYXJnZS5idG4tZmJbaHJlZj1cImh0dHA6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9aHR0cHM6Ly93d3cuY2F0YXJzZS5tZS9mbGV4P3JlZj1mYWNlYm9vayZ0aXRsZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCdDb25oZcOnYSBvIG5vdm8gQ2F0YXJzZSBGbGV4IScpICsgJ1wiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLCAnQ29tcGFydGlsaGFyJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcuaWNvbi1zaGFyZS1tb2JpbGVbc3JjPVxcJ2h0dHBzOi8vZGFrczJrM2E0aWIyei5jbG91ZGZyb250Lm5ldC81NGI0NDBiODU2MDhlM2Y0Mzg5ZGIzODcvNTNhM2Y2NTEwNWViNjE0NDE3MWQ4ZWRhX3R3aXR0ZXItMjU2LnBuZ1xcJ10nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tbGFyZ2UuYnRuLXR3ZWV0W2hyZWY9XCJodHRwOi8vdHdpdHRlci5jb20vP3N0YXR1cz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCdWYW1vcyBjb25zdHJ1aXIgdW1hIG5vdmEgbW9kYWxpZGFkZSBkZSBjcm93ZGZ1bmRpbmcgcGFyYSBvIENhdGFyc2UhIEp1bnRlLXNlIGEgbsOzcywgaW5zY3JldmEgc2V1IGVtYWlsIScpICsgJ2h0dHBzOi8vd3d3LmNhdGFyc2UubWUvZmxleD9yZWY9dHdpdHRlclwiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLCAnVHVpdGFyJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKSwgbSgnLnctc2VjdGlvbi5zZWN0aW9uLWxhcmdlLmJnLWdyZWVubGltZScsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJyNwYXJ0aWNpcGUtZG8tZGViYXRlLnUtdGV4dC1jZW50ZXInLCB7Y29uZmlnOiBoLnRvQW5jaG9yKCl9LCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdoMS5mb250c2l6ZS1sYXJnZXN0LmZvbnRjb2xvci1uZWdhdGl2ZScsJ0NvbnN0cnVhIG8gZmxleCBjb25vc2NvJyksIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTYwLmZvbnRjb2xvci1uZWdhdGl2ZScsICdJbmljaWUgdW1hIGNvbnZlcnNhLCBwZXJndW50ZSwgY29tZW50ZSwgY3JpdGlxdWUgZSBmYcOnYSBzdWdlc3TDtWVzIScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcjZGlzcXVzX3RocmVhZC5jYXJkLnUtcmFkaXVzW3N0eWxlPVwibWluLWhlaWdodDogNTB2aDtcIl0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGN0cmwuYWRkRGlzcXVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmxleDtcclxuIiwiLyoqXHJcbiAqIHdpbmRvdy5jLlRvb2x0aXAgY29tcG9uZW50XHJcbiAqIEEgY29tcG9uZW50IHRoYXQgYWxsb3dzIHlvdSB0byBzaG93IGEgdG9vbHRpcCBvblxyXG4gKiBhIHNwZWNpZmllZCBlbGVtZW50IGhvdmVyLiBJdCByZWNlaXZlcyB0aGUgZWxlbWVudCB5b3Ugd2FudFxyXG4gKiB0byB0cmlnZ2VyIHRoZSB0b29sdGlwIGFuZCBhbHNvIHRoZSB0ZXh0IHRvIGRpc3BsYXkgYXMgdG9vbHRpcC5cclxuICpcclxuICogRXhhbXBsZSBvZiB1c2U6XHJcbiAqIHZpZXc6ICgpID0+IHtcclxuICogICAgIGxldCB0b29sdGlwID0gKGVsKSA9PiB7XHJcbiAqICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChjLlRvb2x0aXAsIHtcclxuICogICAgICAgICAgICAgIGVsOiBlbCxcclxuICogICAgICAgICAgICAgIHRleHQ6ICd0ZXh0IHRvIHRvb2x0aXAnLFxyXG4gKiAgICAgICAgICAgICAgd2lkdGg6IDMwMFxyXG4gKiAgICAgICAgICB9KVxyXG4gKiAgICAgfVxyXG4gKlxyXG4gKiAgICAgcmV0dXJuIHRvb2x0aXAoJ2EjbGluay13dGgtdG9vbHRpcFtocmVmPVwiI1wiXScpO1xyXG4gKlxyXG4gKiB9XHJcbiAqL1xyXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcblxyXG5jb25zdCB0b29sdGlwID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgbGV0IHBhcmVudEhlaWdodCA9IG0ucHJvcCgwKSxcclxuICAgICAgICAgICAgd2lkdGggPSBtLnByb3AoYXJncy53aWR0aCB8fCAyODApLFxyXG4gICAgICAgICAgICB0b3AgPSBtLnByb3AoMCksXHJcbiAgICAgICAgICAgIGxlZnQgPSBtLnByb3AoMCksXHJcbiAgICAgICAgICAgIG9wYWNpdHkgPSBtLnByb3AoMCksXHJcbiAgICAgICAgICAgIHBhcmVudE9mZnNldCA9IG0ucHJvcCh7dG9wOiAwLCBsZWZ0OiAwfSksXHJcbiAgICAgICAgICAgIHRvb2x0aXAgPSBoLnRvZ2dsZVByb3AoMCwgMSksXHJcbiAgICAgICAgICAgIHRvZ2dsZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRvb2x0aXAudG9nZ2xlKCk7XHJcbiAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBzZXRQYXJlbnRQb3NpdGlvbiA9IChlbCwgaXNJbml0aWFsaXplZCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpe1xyXG4gICAgICAgICAgICAgICAgcGFyZW50T2Zmc2V0KGguY3VtdWxhdGl2ZU9mZnNldChlbCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0UG9zaXRpb24gPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsVG9wID0gZWwub2Zmc2V0SGVpZ2h0ICsgZWwub2Zmc2V0UGFyZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IChlbC5vZmZzZXRXaWR0aCArIDIgKiBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdMZWZ0KSArIDMwKSl7IC8vMzAgaGVyZSBpcyBhIHNhZmUgbWFyZ2luXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLndpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSAzMDsgLy9BZGRpbmcgdGhlIHNhZmUgbWFyZ2luXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQoLXBhcmVudE9mZnNldCgpLmxlZnQgKyAxNSk7IC8vcG9zaXRpb25pbmcgY2VudGVyIG9mIHdpbmRvdywgY29uc2lkZXJpbmcgbWFyZ2luXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgocGFyZW50T2Zmc2V0KCkubGVmdCArIChlbC5vZmZzZXRXaWR0aCAvIDIpKSA8PSB3aW5kb3cuaW5uZXJXaWR0aCAmJiAocGFyZW50T2Zmc2V0KCkubGVmdCAtIChlbC5vZmZzZXRXaWR0aCAvIDIpKSA+PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCgtZWwub2Zmc2V0V2lkdGggLyAyKTsgLy9Qb3NpdGlvbmluZyB0byB0aGUgY2VudGVyXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgocGFyZW50T2Zmc2V0KCkubGVmdCArIChlbC5vZmZzZXRXaWR0aCAvIDIpKSA+IHdpbmRvdy5pbm5lcldpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQoLWVsLm9mZnNldFdpZHRoICsgZWwub2Zmc2V0UGFyZW50Lm9mZnNldFdpZHRoKTsgLy9Qb3NpdGlvbmluZyB0byB0aGUgbGVmdFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHBhcmVudE9mZnNldCgpLmxlZnQgLSAoZWwub2Zmc2V0V2lkdGggLyAyKSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQoLWVsLm9mZnNldFBhcmVudC5vZmZzZXRXaWR0aCk7IC8vUG9zaXRpb25pbmcgdG8gdGhlIHJpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRvcCgtZWxUb3ApOyAvL1NldHRpbmcgdG9wIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICAgICAgdG9wOiB0b3AsXHJcbiAgICAgICAgICAgIGxlZnQ6IGxlZnQsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHksXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHRvb2x0aXAsXHJcbiAgICAgICAgICAgIHRvZ2dsZTogdG9nZ2xlLFxyXG4gICAgICAgICAgICBzZXRQb3NpdGlvbjogc2V0UG9zaXRpb24sXHJcbiAgICAgICAgICAgIHNldFBhcmVudFBvc2l0aW9uOiBzZXRQYXJlbnRQb3NpdGlvblxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgbGV0IHdpZHRoID0gY3RybC53aWR0aCgpO1xyXG4gICAgICAgIHJldHVybiBtKGFyZ3MuZWwsIHtcclxuICAgICAgICAgICAgb25jbGljazogY3RybC50b2dnbGUsXHJcbiAgICAgICAgICAgIGNvbmZpZzogY3RybC5zZXRQYXJlbnRQb3NpdGlvbixcclxuICAgICAgICAgICAgc3R5bGU6IHtjdXJzb3I6ICdwb2ludGVyJ31cclxuICAgICAgICB9LCBjdHJsLnRvb2x0aXAoKSA/IFtcclxuICAgICAgICAgICAgbShgLnRvb2x0aXAuZGFya1tzdHlsZT1cIndpZHRoOiAke3dpZHRofXB4OyB0b3A6ICR7Y3RybC50b3AoKX1weDsgbGVmdDogJHtjdHJsLmxlZnQoKX1weDtcIl1gLCB7XHJcbiAgICAgICAgICAgICAgICBjb25maWc6IGN0cmwuc2V0UG9zaXRpb25cclxuICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0JywgYXJncy50ZXh0KVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0gOiAnJyk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0b29sdGlwO1xyXG4iLCIvKipcclxuICogd2luZG93LmMuUHJvamVjdERhc2hib2FyZE1lbnUgY29tcG9uZW50XHJcbiAqIGJ1aWxkIGRhc2hib2FyZCBwcm9qZWN0IG1lbnUgZm9yIHByb2plY3Qgb3duZXJzXHJcbiAqIGFuZCBhZG1pbi5cclxuICpcclxuICogRXhhbXBsZTpcclxuICogbS5jb21wb25lbnQoYy5Qcm9qZWN0RGFzaGJvYXJkTWVudSwge1xyXG4gKiAgICAgcHJvamVjdDogcHJvamVjdERldGFpbCBPYmplY3QsXHJcbiAqIH0pXHJcbiAqL1xyXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLmRhc2hib2FyZF9uYXYnKTtcclxuY29uc3QgbGlua3NTY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLmRhc2hib2FyZF9uYXZfbGlua3MnKTtcclxuXHJcbmNvbnN0IHByb2plY3REYXNoYm9hcmRNZW51ID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgbGV0IGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLFxyXG4gICAgICAgICAgICBlZGl0TGlua3NUb2dnbGUgPSBoLnRvZ2dsZVByb3AodHJ1ZSwgZmFsc2UpLFxyXG4gICAgICAgICAgICBzaG93UHVibGlzaCA9IGgudG9nZ2xlUHJvcCh0cnVlLCBmYWxzZSksXHJcbiAgICAgICAgICAgIGJvZHlUb2dnbGVGb3JOYXYgPSBoLnRvZ2dsZVByb3AoJ2JvZHktcHJvamVjdCBvcGVuJywgJ2JvZHktcHJvamVjdCBjbG9zZWQnKTtcclxuXHJcbiAgICAgICAgaWYgKGFyZ3MucHJvamVjdCgpLmlzX3B1Ymxpc2hlZCkge1xyXG4gICAgICAgICAgICBlZGl0TGlua3NUb2dnbGUudG9nZ2xlKGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhcmdzLmhpZGVQdWJsaXNoKSB7XHJcbiAgICAgICAgICAgIHNob3dQdWJsaXNoLnRvZ2dsZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBib2R5OiBib2R5LFxyXG4gICAgICAgICAgICBlZGl0TGlua3NUb2dnbGU6IGVkaXRMaW5rc1RvZ2dsZSxcclxuICAgICAgICAgICAgc2hvd1B1Ymxpc2g6IHNob3dQdWJsaXNoLFxyXG4gICAgICAgICAgICBib2R5VG9nZ2xlRm9yTmF2OiBib2R5VG9nZ2xlRm9yTmF2XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0KCksXHJcbiAgICAgICAgICAgICAgcHJvamVjdFJvdXRlID0gJy9wcm9qZWN0cy8nICsgcHJvamVjdC5pZCxcclxuICAgICAgICAgICAgICBlZGl0Um91dGUgPSBwcm9qZWN0Um91dGUgKyAnL2VkaXQnLFxyXG4gICAgICAgICAgICAgIGVkaXRMaW5rQ2xhc3MgPSAnZGFzaGJvYXJkLW5hdi1saW5rLWxlZnQgJyArIChwcm9qZWN0LmlzX3B1Ymxpc2hlZCA/ICdpbmRlbnQnIDogJycpO1xyXG4gICAgICAgIGxldCBvcHRpb25hbE9wdCA9IG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICcgKG9wY2lvbmFsKScpO1xyXG5cclxuICAgICAgICBjdHJsLmJvZHkuY2xhc3NOYW1lID0gY3RybC5ib2R5VG9nZ2xlRm9yTmF2KCk7XHJcblxyXG4gICAgICAgIHJldHVybiBtKCcjcHJvamVjdC1uYXYnLCBbXHJcbiAgICAgICAgICAgIG0oJy5wcm9qZWN0LW5hdi13cmFwcGVyJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnbmF2Lnctc2VjdGlvbi5kYXNoYm9hcmQtbmF2LnNpZGUnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnYSNkYXNoYm9hcmRfcHJldmlld19saW5rLnctaW5saW5lLWJsb2NrLmRhc2hib2FyZC1wcm9qZWN0LW5hbWVbaHJlZj1cIicgKyAocHJvamVjdC5pc19wdWJsaXNoZWQgPyAnLycgKyBwcm9qZWN0LnBlcm1hbGluayA6IGVkaXRSb3V0ZSArICcjcHJldmlldycpICsgJ1wiXScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLXByb2plY3QtZGFzaGJvYXJkW3NyYz1cIicgKyAoXy5pc051bGwocHJvamVjdC5sYXJnZV9pbWFnZSkgPyAnL2Fzc2V0cy90aHVtYi1wcm9qZWN0LnBuZycgOiBwcm9qZWN0LmxhcmdlX2ltYWdlKSArICdcIl1bd2lkdGg9XCIxMTRcIl0nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1uZWdhdGl2ZS5saW5laGVpZ2h0LXRpZ2h0LmZvbnRzaXplLXNtYWxsJywgcHJvamVjdC5uYW1lKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbShgaW1nLnUtbWFyZ2ludG9wLTEwW3NyYz1cIi9hc3NldHMvY2F0YXJzZV9ib290c3RyYXAvYmFkZ2UtJHtwcm9qZWN0Lm1vZGV9LWgucG5nXCJdW3dpZHRoPTgwXWApXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJyNpbmZvLWxpbmtzJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Rhc2hib2FyZF9ob21lX2xpbmtbY2xhc3M9XCJkYXNoYm9hcmQtbmF2LWxpbmstbGVmdCAnICsgKGgubG9jYXRpb25BY3Rpb25NYXRjaCgnaW5zaWdodHMnKSA/ICdzZWxlY3RlZCcgOiAnJykgKyAnXCJdW2hyZWY9XCInICsgcHJvamVjdFJvdXRlICsgJy9pbnNpZ2h0c1wiXScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtYmFyLWNoYXJ0LmZhLWxnLmZhLWZ3JyksIEkxOG4udCgnc3RhcnRfdGFiJywgSTE4blNjb3BlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLCAocHJvamVjdC5pc19wdWJsaXNoZWQgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2Rhc2hib2FyZF9yZXBvcnRzX2xpbmsuZGFzaGJvYXJkLW5hdi1saW5rLWxlZnRbaHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI3JlcG9ydHMnICsgJ1wiXScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLmZhLXRhYmxlLmZhLWxnLmZhLWZ3JyksIEkxOG4udCgncmVwb3J0c190YWInLCBJMThuU2NvcGUoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNkYXNoYm9hcmRfcmVwb3J0c19saW5rLmRhc2hib2FyZC1uYXYtbGluay1sZWZ0LnUtbWFyZ2luYm90dG9tLTMwW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyNwb3N0cycgKyAnXCJdJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtYnVsbGhvcm4uZmEtZncuZmEtbGcnKSwgSTE4bi50KCdwb3N0c190YWInLCBJMThuU2NvcGUoKSksIG0oJ3NwYW4uYmFkZ2UnLCBwcm9qZWN0LnBvc3RzX2NvdW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSA6ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5lZGl0LXByb2plY3QtZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoIXByb2plY3QuaXNfcHVibGlzaGVkID8gJycgOiBtKCdidXR0b24jdG9nZ2xlLWVkaXQtbWVudS5kYXNoYm9hcmQtbmF2LWxpbmstbGVmdCcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwuZWRpdExpbmtzVG9nZ2xlLnRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLXBlbmNpbC5mYS1mdy5mYS1sZycpLCBJMThuLnQoJ2VkaXRfcHJvamVjdCcsIEkxOG5TY29wZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSksIChjdHJsLmVkaXRMaW5rc1RvZ2dsZSgpID8gbSgnI2VkaXQtbWVudS1pdGVtcycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJyNkYXNoYm9hcmQtbGlua3MnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCghcHJvamVjdC5pc19wdWJsaXNoZWQgfHwgcHJvamVjdC5pc19hZG1pbl9yb2xlKSA/IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNiYXNpY3NfbGlua1tjbGFzcz1cIicgKyBlZGl0TGlua0NsYXNzICsgJ1wiXVtocmVmPVwiJyArIGVkaXRSb3V0ZSArICcjYmFzaWNzJyArICdcIl0nLCBJMThuLnQoYCR7cHJvamVjdC5tb2RlfS5iYXNpY3NfdGFiYCwgbGlua3NTY29wZSgpKSApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhI2dvYWxfbGlua1tjbGFzcz1cIicgKyBlZGl0TGlua0NsYXNzICsgJ1wiXVtocmVmPVwiJyArIGVkaXRSb3V0ZSArICcjZ29hbCcgKyAnXCJdJywgSTE4bi50KGAke3Byb2plY3QubW9kZX0uZ29hbF90YWJgLCBsaW5rc1Njb3BlKCkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogJycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjZGVzY3JpcHRpb25fbGlua1tjbGFzcz1cIicgKyBlZGl0TGlua0NsYXNzICsgJ1wiXVtocmVmPVwiJyArIGVkaXRSb3V0ZSArICcjZGVzY3JpcHRpb24nICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmRlc2NyaXB0aW9uX3RhYmAsIGxpbmtzU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjdmlkZW9fbGlua1tjbGFzcz1cIicgKyBlZGl0TGlua0NsYXNzICsgJ1wiXVtocmVmPVwiJyArIGVkaXRSb3V0ZSArICcjdmlkZW8nICsgJ1wiXScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1bDrWRlbycsIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICcgKG9wY2lvbmFsKScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNidWRnZXRfbGlua1tjbGFzcz1cIicgKyBlZGl0TGlua0NsYXNzICsgJ1wiXVtocmVmPVwiJyArIGVkaXRSb3V0ZSArICcjYnVkZ2V0JyArICdcIl0nLCBJMThuLnQoYCR7cHJvamVjdC5tb2RlfS5idWRnZXRfdGFiYCwgbGlua3NTY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNjYXJkX2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI2NhcmQnICsgJ1wiXScsIEkxOG4udChgJHtwcm9qZWN0Lm1vZGV9LmNhcmRfdGFiYCwgbGlua3NTY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNkYXNoYm9hcmRfcmV3YXJkX2xpbmtbY2xhc3M9XCInICsgZWRpdExpbmtDbGFzcyArICdcIl1baHJlZj1cIicgKyBlZGl0Um91dGUgKyAnI3Jld2FyZCcgKyAnXCJdJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUmVjb21wZW5zYXMnLCBvcHRpb25hbE9wdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjZGFzaGJvYXJkX3VzZXJfYWJvdXRfbGlua1tjbGFzcz1cIicgKyBlZGl0TGlua0NsYXNzICsgJ1wiXVtocmVmPVwiJyArIGVkaXRSb3V0ZSArICcjdXNlcl9hYm91dCcgKyAnXCJdJywgSTE4bi50KGAke3Byb2plY3QubW9kZX0uYWJvdXRfeW91X3RhYmAsIGxpbmtzU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggKHByb2plY3QuaXNfcHVibGlzaGVkIHx8IHByb2plY3Quc3RhdGUgPT09ICdkcmFmdCcpIHx8IHByb2plY3QuaXNfYWRtaW5fcm9sZSA/IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNkYXNoYm9hcmRfdXNlcl9zZXR0aW5nc19saW5rW2NsYXNzPVwiJyArIGVkaXRMaW5rQ2xhc3MgKyAnXCJdW2hyZWY9XCInICsgZWRpdFJvdXRlICsgJyN1c2VyX3NldHRpbmdzJyArICdcIl0nLCBJMThuLnQoYCR7cHJvamVjdC5tb2RlfS5hY2NvdW50X3RhYmAsIGxpbmtzU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJyksICghcHJvamVjdC5pc19wdWJsaXNoZWQgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EjZGFzaGJvYXJkX3ByZXZpZXdfbGlua1tjbGFzcz1cIicgKyBlZGl0TGlua0NsYXNzICsgJ1wiXVtocmVmPVwiJyArIGVkaXRSb3V0ZSArICcjcHJldmlldycgKyAnXCJdJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1mdy5mYS1leWUuZmEtbGcnKSwgSTE4bi50KGAke3Byb2plY3QubW9kZX0ucHJldmlld190YWJgLCBsaW5rc1Njb3BlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoKCFwcm9qZWN0LmlzX3B1Ymxpc2hlZCAmJiBjdHJsLnNob3dQdWJsaXNoKCkpID8gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmJ0bi1zZW5kLWRyYWZ0LWZpeGVkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByb2plY3QubW9kZSA9PT0gJ2FvbicgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocHJvamVjdC5zdGF0ZSA9PT0gJ2RyYWZ0JyA/IG0oJ2EuYnRuLmJ0bi1tZWRpdW1baHJlZj1cIi9wcm9qZWN0cy8nICsgcHJvamVjdC5pZCArICcvdmFsaWRhdGVfcHVibGlzaFwiXScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ3B1Ymxpc2gnLCBJMThuU2NvcGUoKSksIG0udHJ1c3QoJyZuYnNwOyZuYnNwOycpLCBtKCdzcGFuLmZhLmZhLWNoZXZyb24tcmlnaHQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkgOiAnJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSA6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwcm9qZWN0LnN0YXRlID09PSAnZHJhZnQnID8gbSgnYS5idG4uYnRuLW1lZGl1bVtocmVmPVwiL2ZsZXhpYmxlX3Byb2plY3RzLycgKyBwcm9qZWN0LmlkICsgJy92YWxpZGF0ZV9wdWJsaXNoXCJdJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgncHVibGlzaCcsIEkxOG5TY29wZSgpKSwgbS50cnVzdCgnJm5ic3A7Jm5ic3A7JyksIG0oJ3NwYW4uZmEuZmEtY2hldnJvbi1yaWdodCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSA6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgocHJvamVjdC5tb2RlID09PSAnZmxleCcgJiYgcHJvamVjdC5pc19wdWJsaXNoZWQpID8gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5idG4tc2VuZC1kcmFmdC1maXhlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXy5pc051bGwocHJvamVjdC5leHBpcmVzX2F0KSA/IG0oJ2Eudy1idXR0b24uYnRuLmJ0bi1tZWRpdW0uYnRuLXNlY29uZGFyeS1kYXJrW2hyZWY9XCIvcHJvamVjdHMvJyArIHByb2plY3QuaWQgKyAnL2VkaXQjYW5ub3VuY2VfZXhwaXJhdGlvblwiXScsIEkxOG4udCgnYW5ub3VuY2VfZXhwaXJhdGlvbicsIEkxOG5TY29wZSgpKSkgOiAnJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogJycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJ2EuYnRuLWRhc2hib2FyZCBocmVmPVwianM6dm9pZCgwKTtcIicsIHtcclxuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGN0cmwuYm9keVRvZ2dsZUZvck5hdi50b2dnbGVcclxuICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1iYXJzLmZhLWxnJylcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3REYXNoYm9hcmRNZW51O1xyXG4iLCIvKipcclxuICogd2luZG93LmMuTW9kYWxCb3ggY29tcG9uZW50XHJcbiAqIEJ1aWxzIHRoZSB0ZW1wbGF0ZSBmb3IgdXNpbmcgbW9kYWxcclxuICpcclxuICogRXhhbXBsZTpcclxuICogbS5jb21wb25lbnQoYy5Nb2RhbEJveCwge1xyXG4gKiAgICAgZGlzcGxheU1vZGFsOiB0b29nbGVQcm9wT2JqZWN0LFxyXG4gKiAgICAgY29udGVudDogWydDb21wb25lbnROYW1lJywge2FyZ3g6ICd4JywgYXJneTogJ3knfV1cclxuICogfSlcclxuICogQ29tcG9uZW50TmFtZSBzdHJ1Y3R1cmUgPT4gIG0oJ2RpdicsIFtcclxuICogICAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWhlYWRlcicsIFtdKSxcclxuICogICAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQnLCBbXSksXHJcbiAqICAgICAgICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1uYXYtYm90dG9tJywgW10pLFxyXG4gKiAgICAgICAgICAgICAgXSlcclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5cclxuY29uc3QgbW9kYWxCb3ggPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbSgnLm1vZGFsLWJhY2tkcm9wJywgW1xyXG4gICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLW91dGVyJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1pbm5lci5tb2RhbC1kaWFsb2ctc21hbGwnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnYS53LWlubGluZS1ibG9jay5tb2RhbC1jbG9zZS5mYS5mYS1jbG9zZS5mYS1sZ1tocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApO1wiXScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogYXJncy5kaXNwbGF5TW9kYWwudG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYXJncy5jb250ZW50WzBdLCBhcmdzLmNvbnRlbnRbMV0pXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1vZGFsQm94O1xyXG4iLCIvKipcclxuICogd2luZG93LmMuQWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQgY29tcG9uZW50XHJcbiAqIHJlbmRlciBhbiBib3ggd2l0aCBzb21lIHByb2plY3Qgc3RhdGlzdGljcyBpbmZvXHJcbiAqXHJcbiAqIEV4YW1wbGU6XHJcbiAqIG0uY29tcG9uZW50KGMuQWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQsIHtcclxuICogICAgIHJlc291cmNlOiBwcm9qZWN0RGV0YWlsIE9iamVjdCxcclxuICogfSlcclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5cclxuY29uc3QgYWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBsZXQgcHJvamVjdCA9IGFyZ3MucmVzb3VyY2UsXHJcbiAgICAgICAgICAgIGdlbmVyYXRlU3RhdHVzVGV4dCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBzdGF0dXNUZXh0T2JqID0gbS5wcm9wKHt9KSxcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmxpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAndGV4dC1zdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdOTyBBUidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICd0ZXh0LXN1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0ZJTkFOQ0lBRE8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxlZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICd0ZXh0LWVycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdOw4NPIEZJTkFOQ0lBRE8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRpbmdfZnVuZHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAndGV4dC13YWl0aW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdBR1VBUkRBTkRPJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3RlZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICd0ZXh0LWVycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdSRUNVU0FETydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdSQVNDVU5ITydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5fYW5hbHlzaXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdFTSBBTsOBTElTRSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwcm92ZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAndGV4dC1zdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdBUFJPVkFETydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgc3RhdHVzVGV4dE9iaihzdGF0dXNUZXh0W3Byb2plY3Quc3RhdGVdKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdHVzVGV4dE9iajtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNGaW5hbExhcCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIEBUT0RPOiB1c2UgOCBkYXlzIGJlY2F1c2UgdGltZXpvbmUgb24ganNcclxuICAgICAgICAgICAgICAgIHJldHVybiAhXy5pc051bGwocHJvamVjdC5leHBpcmVzX2F0KSAmJiBtb21lbnQoKS5hZGQoOCwgJ2RheXMnKSA+PSBtb21lbnQocHJvamVjdC56b25lX2V4cGlyZXNfYXQpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXHJcbiAgICAgICAgICAgIHN0YXR1c1RleHRPYmo6IGdlbmVyYXRlU3RhdHVzVGV4dCgpLFxyXG4gICAgICAgICAgICByZW1haW5pbmdUZXh0T2JqOiBoLnRyYW5zbGF0ZWRUaW1lKHByb2plY3QucmVtYWluaW5nX3RpbWUpLFxyXG4gICAgICAgICAgICBlbGFwc2VkVGV4dE9iajogaC50cmFuc2xhdGVkVGltZShwcm9qZWN0LmVsYXBzZWRfdGltZSksXHJcbiAgICAgICAgICAgIGlzRmluYWxMYXA6IGlzRmluYWxMYXBcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCkge1xyXG4gICAgICAgIGxldCBwcm9qZWN0ID0gY3RybC5wcm9qZWN0LFxyXG4gICAgICAgICAgICBwcm9ncmVzcyA9IHByb2plY3QucHJvZ3Jlc3MudG9GaXhlZCgyKSxcclxuICAgICAgICAgICAgc3RhdHVzVGV4dE9iaiA9IGN0cmwuc3RhdHVzVGV4dE9iaigpLFxyXG4gICAgICAgICAgICByZW1haW5pbmdUZXh0T2JqID0gY3RybC5yZW1haW5pbmdUZXh0T2JqLFxyXG4gICAgICAgICAgICBlbGFwc2VkVGV4dE9iaiA9IGN0cmwuZWxhcHNlZFRleHRPYmo7XHJcblxyXG4gICAgICAgIHJldHVybiBtKCcucHJvamVjdC1kZXRhaWxzLWNhcmQuY2FyZC51LXJhZGl1cy5jYXJkLXRlcmNpYXJ5LnUtbWFyZ2luYm90dG9tLTIwJywgW1xyXG4gICAgICAgICAgICBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udHdlaWdodC1zZW1pYm9sZCcsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCAnU3RhdHVzOicpLCAnwqAnLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBzdGF0dXNUZXh0T2JqLmNzc0NsYXNzXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgKGN0cmwuaXNGaW5hbExhcCgpICYmIHByb2plY3Qub3Blbl9mb3JfY29udHJpYnV0aW9ucyA/ICdSRVRBIEZJTkFMJyA6IHN0YXR1c1RleHRPYmoudGV4dCkpLCAnwqAnXHJcbiAgICAgICAgICAgICAgICBdKSwgcHJvamVjdC5pc19wdWJsaXNoZWQgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLm1ldGVyLnUtbWFyZ2ludG9wLTIwLnUtbWFyZ2luYm90dG9tLTEwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcubWV0ZXItZmlsbCcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IChwcm9ncmVzcyA+IDEwMCA/IDEwMCA6IHByb2dyZXNzKSArICclJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtMy53LWNvbC10aW55LTYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0ZXIuZm9udHNpemUtc21hbGwnLCAnZmluYW5jaWFkbycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIHByb2dyZXNzICsgJyUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtMy53LWNvbC10aW55LTYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0ZXIuZm9udHNpemUtc21hbGwnLCAnbGV2YW50YWRvcycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUiQgJyArIGguZm9ybWF0TnVtYmVyKHByb2plY3QucGxlZGdlZCwgMiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudy1jb2wtdGlueS02JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkubGluZWhlaWdodC10aWdodGVyLmZvbnRzaXplLXNtYWxsJywgJ2Fwb2lvcycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIHByb2plY3QudG90YWxfY29udHJpYnV0aW9ucylcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zLnctY29sLXNtYWxsLTMudy1jb2wtdGlueS02JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF8uaXNOdWxsKHByb2plY3QuZXhwaXJlc19hdCkgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRjb2xvci1zZWNvbmRhcnkubGluZWhlaWdodC10aWdodGVyLmZvbnRzaXplLXNtYWxsJywgJ2luaWNpYWRvIGjDoScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCBlbGFwc2VkVGV4dE9iai50b3RhbCArICcgJyArIGVsYXBzZWRUZXh0T2JqLnVuaXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLXNlY29uZGFyeS5saW5laGVpZ2h0LXRpZ2h0ZXIuZm9udHNpemUtc21hbGwnLCAncmVzdGFtJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCByZW1haW5pbmdUZXh0T2JqLnRvdGFsICsgJyAnICsgcmVtYWluaW5nVGV4dE9iai51bml0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0gOiAnJ1xyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQ7XHJcbiIsIi8qKlxyXG4gKiB3aW5kb3cuYy5Qcm9qZWN0RGF0YUNoYXJ0IGNvbXBvbmVudFxyXG4gKiBBIGdyYXBoIGJ1aWxkZXIgaW50ZXJmYWNlIHRvIGJlIHVzZWQgb24gcHJvamVjdCByZWxhdGVkIGRhc2hib2FyZHMuXHJcbiAqIEV4YW1wbGU6XHJcbiAqIG0uY29tcG9uZW50KGMuUHJvamVjdERhdGFDaGFydCwge1xyXG4gKiAgICAgY29sbGVjdGlvbjogY3RybC5jb250cmlidXRpb25zUGVyRGF5LFxyXG4gKiAgICAgbGFiZWw6ICdSJCBhcnJlY2FkYWRvcyBwb3IgZGlhJyxcclxuICogICAgIGRhdGFLZXk6ICd0b3RhbF9hbW91bnQnXHJcbiAqIH0pXHJcbiAqL1xyXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBDaGFydCBmcm9tICdjaGFydGpzJztcclxuXHJcbmNvbnN0IHByb2plY3REYXRhQ2hhcnQgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBjb25zdCByZXNvdXJjZSA9IF8uZmlyc3QoYXJncy5jb2xsZWN0aW9uKCkpLFxyXG4gICAgICAgICAgICAgIHNvdXJjZSA9ICghXy5pc1VuZGVmaW5lZChyZXNvdXJjZSkgPyByZXNvdXJjZS5zb3VyY2UgOiBbXSksXHJcblxyXG4gICAgICAgICAgICBtb3VudERhdGFzZXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3tcclxuICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICdyZ2JhKDEyNiwxOTQsNjksMC4yKScsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICdyZ2JhKDEyNiwxOTQsNjksMSknLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50Q29sb3I6ICdyZ2JhKDEyNiwxOTQsNjksMSknLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50U3Ryb2tlQ29sb3I6ICcjZmZmJyxcclxuICAgICAgICAgICAgICAgICAgICBwb2ludEhpZ2hsaWdodEZpbGw6ICcjZmZmJyxcclxuICAgICAgICAgICAgICAgICAgICBwb2ludEhpZ2hsaWdodFN0cm9rZTogJ3JnYmEoMjIwLDIyMCwyMjAsMSknLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IF8ubWFwKHNvdXJjZSwgKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1bYXJncy5kYXRhS2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlbmRlckNoYXJ0ID0gKGVsZW1lbnQsIGlzSW5pdGlhbGl6ZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IGVsZW1lbnQuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IENoYXJ0KGN0eCkuTGluZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsczogXy5tYXAoc291cmNlLCAoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MueEF4aXMoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0czogbW91bnREYXRhc2V0KClcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlbmRlckNoYXJ0OiByZW5kZXJDaGFydFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIG0oJy5jYXJkLnUtcmFkaXVzLm1lZGl1bS51LW1hcmdpbmJvdHRvbS0zMCcsIFtcclxuICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMTAuZm9udHNpemUtbGFyZ2UudS10ZXh0LWNlbnRlcicsIGFyZ3MubGFiZWwpLFxyXG4gICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTIub3ZlcmZsb3ctYXV0bycsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCdjYW52YXNbaWQ9XCJjaGFydFwiXVt3aWR0aD1cIjg2MFwiXVtoZWlnaHQ9XCIzMDBcIl0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC5yZW5kZXJDaGFydFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3REYXRhQ2hhcnQ7XHJcbiIsIi8qKlxyXG4gKiB3aW5kb3cuYy5Qcm9qZWN0RGF0YVRhYmxlIGNvbXBvbmVudFxyXG4gKiBBIHRhYmxlIGludGVyZmFjZSBjb25zdHJ1Y3RvciB0aGF0IHNob3VsZCBiZSB1c2VkIG9uIHByb2plY3QgcmVsYXRlZCBkYXNoYm9hcmRzLlxyXG4gKiBJdCB0YWtlcyBhbiBhcnJheSBhbmQgYSBsYWJsZSBhcyBpdCdzIHNvdXJjZXMuXHJcbiAqIFRoZSBmaXJzdCBpdGVtIGluIHRoZSBhcnJheSBpcyB0aGUgaGVhZGVyIGRlc2NyaXB0b3IgYW5kIHRoZSByZXN0IG9mIHRoZW0gYXJlIHJvdyBkYXRhLlxyXG4gKiBSb3dzIG1heSByZXR1cm4gYSBzdHJpbmcgb3IgYW4gYXJyYXkgYW5kIHRoaXMgdmFsdWUgd2lsbCBiZSB1c2VkIGFzIGEgcm93IG91dHB1dC5cclxuICogQWxsIHRhYmxlIHJvd3MgYXJlIHNvcnRhYmxlIGJ5IGRlZmF1bHQuIElmIHlvdSB3YW50IHRvIHVzZSBhIGN1c3RvbSB2YWx1ZSBhcyBzb3J0IHBhcmFtZXRlclxyXG4gKiB5b3UgbWF5IHNldCBhIDJEIGFycmF5IGFzIHJvdy4gSW4gdGhpcyBjYXNlLCB0aGUgZmlyc3QgYXJyYXkgdmFsdWUgd2lsbCBiZSB0aGUgY3VzdG9tIHZhbHVlXHJcbiAqIHdoaWxlIHRoZSBvdGhlciB3aWxsIGJlIHRoZSBhY3R1YWwgb3V0cHV0LlxyXG4gKiBFeGFtcGxlOlxyXG4gKiBtLmNvbXBvbmVudChjLlByb2plY3REYXRhVGFibGUsIHtcclxuICogICAgICBsYWJlbDogJ1RhYmxlIGxhYmVsJyxcclxuICogICAgICB0YWJsZTogW1xyXG4gKiAgICAgICAgICBbJ2NvbCBoZWFkZXIgMScsICdjb2wgaGVhZGVyIDInXSxcclxuICogICAgICAgICAgWyd2YWx1ZSAxeDEnLCBbMywgJ3ZhbHVlIDF4MiddXSxcclxuICogICAgICAgICAgWyd2YWx1ZSAyeDEnLCBbMSwgJ3ZhbHVlIDJ4MiddXSAvL1dlIGFyZSB1c2luZyBhIGN1c3RvbSBjb21wYXJhdG9yIHR3byBjb2wgMiB2YWx1ZXNcclxuICogICAgICBdLFxyXG4gKiAgICAgIC8vQWxsb3dzIHlvdSB0byBzZXQgYSBzcGVjaWZpYyBjb2x1bW4gdG8gYmUgb3JkZXJlZCBieSBkZWZhdWx0LlxyXG4gKiAgICAgIC8vSWYgbm8gdmFsdWUgaXMgc2V0LCB0aGUgZmlyc3Qgcm93IHdpbGwgYmUgdGhlIGRlZmF1bHQgb25lIHRvIGJlIG9yZGVyZWQuXHJcbiAqICAgICAgLy9OZWdhdGl2ZSB2YWx1ZXMgbWVhbiB0aGF0IHRoZSBvcmRlciBzaG91bGQgYmUgcmV2ZXJ0ZWRcclxuICogICAgICBkZWZhdWx0U29ydEluZGV4OiAtM1xyXG4gKiAgfSlcclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IHByb2plY3REYXRhVGFibGUgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBjb25zdCB0YWJsZSA9IG0ucHJvcChhcmdzLnRhYmxlKSxcclxuICAgICAgICAgICAgc29ydEluZGV4ID0gbS5wcm9wKC0xKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29tcGFyYXRvciA9IChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBpZHggPSBzb3J0SW5kZXgoKSxcclxuICAgICAgICAgICAgICAgIC8vQ2hlY2sgaWYgYSBjdXN0b20gY29tcGFyYXRvciBpcyB1c2VkID0+IFJlYWQgY29tcG9uZW50IGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICB4ID0gKF8uaXNBcnJheShhW2lkeF0pICYmIGFbaWR4XS5sZW5ndGggPiAxKSA/IGFbaWR4XVswXSA6IGFbaWR4XSxcclxuICAgICAgICAgICAgICAgIHkgPSAoXy5pc0FycmF5KGJbaWR4XSkgJiYgYltpZHhdLmxlbmd0aCA+IDEpID8gYltpZHhdWzBdIDogYltpZHhdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHggPCB5KXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeSA8IHgpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgc29ydFRhYmxlID0gKGlkeCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaGVhZGVyID0gXy5maXJzdCh0YWJsZSgpKSxcclxuICAgICAgICAgICAgICAgIGJvZHk7XHJcbiAgICAgICAgICAgIGlmIChzb3J0SW5kZXgoKSA9PT0gaWR4KXtcclxuICAgICAgICAgICAgICAgIGJvZHkgPSBfLnJlc3QodGFibGUoKSkucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc29ydEluZGV4KGlkeCk7XHJcbiAgICAgICAgICAgICAgICBib2R5ID0gXy5yZXN0KHRhYmxlKCkpLnNvcnQoY29tcGFyYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRhYmxlKF8udW5pb24oW2hlYWRlcl0sYm9keSkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNvcnRUYWJsZShNYXRoLmFicyhhcmdzLmRlZmF1bHRTb3J0SW5kZXgpIHx8IDApO1xyXG5cclxuICAgICAgICBpZiAoYXJncy5kZWZhdWx0U29ydEluZGV4IDwgMCl7XHJcbiAgICAgICAgICAgIHNvcnRUYWJsZShNYXRoLmFicyhhcmdzLmRlZmF1bHRTb3J0SW5kZXgpIHx8IDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGFibGU6IHRhYmxlLFxyXG4gICAgICAgICAgICBzb3J0VGFibGU6IHNvcnRUYWJsZVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyID0gXy5maXJzdChjdHJsLnRhYmxlKCkpLFxyXG4gICAgICAgICAgICBib2R5ID0gXy5yZXN0KGN0cmwudGFibGUoKSk7XHJcbiAgICAgICAgcmV0dXJuIG0oJy50YWJsZS1vdXRlci51LW1hcmdpbmJvdHRvbS02MCcsIFtcclxuICAgICAgICAgICAgbSgnLnctcm93LnRhYmxlLXJvdy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLXNtYWxsZXIuaGVhZGVyJyxcclxuICAgICAgICAgICAgICAgIF8ubWFwKGhlYWRlciwgKGhlYWRpbmcsIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzb3J0ID0gKCkgPT4gY3RybC5zb3J0VGFibGUoaWR4KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnctY29sLnctY29sLTQudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQudGFibGUtY29sJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuW2hyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCJdJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogc29ydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtoZWFkaW5nfSBgLCBtKCdzcGFuLmZhLmZhLXNvcnQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKSwgbSgnLnRhYmxlLWlubmVyLmZvbnRzaXplLXNtYWxsJyxcclxuICAgICAgICAgICAgICAgIF8ubWFwKGJvZHksIChyb3dEYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oJy53LXJvdy50YWJsZS1yb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChyb3dEYXRhLCAocm93KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0NoZWNrIGlmIGEgY3VzdG9tIGNvbXBhcmF0b3IgaXMgdXNlZCA9PiBSZWFkIGNvbXBvbmVudCBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gKF8uaXNBcnJheShyb3cpICYmIHJvdy5sZW5ndGggPiAxKSA/IHJvd1sxXSA6IHJvdztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1zbWFsbC00LnctY29sLXRpbnktNC50YWJsZS1jb2wnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2Jywgcm93KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3REYXRhVGFibGU7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5cclxuY29uc3QgcHJvamVjdFJlbWluZGVyQ291bnQgPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5yZXNvdXJjZTtcclxuICAgICAgICByZXR1cm4gbSgnI3Byb2plY3QtcmVtaW5kZXItY291bnQuY2FyZC51LXJhZGl1cy51LXRleHQtY2VudGVyLm1lZGl1bS51LW1hcmdpbmJvdHRvbS04MCcsIFtcclxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnVG90YWwgZGUgcGVzc29hcyBxdWUgY2xpY2FyYW0gbm8gYm90w6NvIExlbWJyYXItbWUnKSxcclxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIudS1tYXJnaW5ib3R0b20tMzAnLCAnVW0gbGVtYnJldGUgcG9yIGVtYWlsIMOpIGVudmlhZG8gNDggaG9yYXMgYW50ZXMgZG8gdMOpcm1pbm8gZGEgc3VhIGNhbXBhbmhhJyksXHJcbiAgICAgICAgICAgIG0oJy5mb250c2l6ZS1qdW1ibycsIHByb2plY3QucmVtaW5kZXJfY291bnQpXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0UmVtaW5kZXJDb3VudDtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB0b29sdGlwIGZyb20gJy4uL2MvdG9vbHRpcCc7XHJcbmltcG9ydCBwcm9qZWN0RGFzaGJvYXJkTWVudSBmcm9tICcuLi9jL3Byb2plY3QtZGFzaGJvYXJkLW1lbnUnO1xyXG5pbXBvcnQgbW9kYWxCb3ggZnJvbSAnLi4vYy9tb2RhbC1ib3gnO1xyXG5pbXBvcnQgYWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQgZnJvbSAnLi4vYy9hZG1pbi1wcm9qZWN0LWRldGFpbHMtY2FyZCc7XHJcbmltcG9ydCBwcm9qZWN0RGF0YUNoYXJ0IGZyb20gJy4uL2MvcHJvamVjdC1kYXRhLWNoYXJ0JztcclxuaW1wb3J0IHByb2plY3REYXRhVGFibGUgZnJvbSAnLi4vYy9wcm9qZWN0LWRhdGEtdGFibGUnO1xyXG5pbXBvcnQgcHJvamVjdFJlbWluZGVyQ291bnQgZnJvbSAnLi4vYy9wcm9qZWN0LXJlbWluZGVyLWNvdW50JztcclxuXHJcbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLmluc2lnaHRzJyk7XHJcblxyXG5jb25zdCBpbnNpZ2h0cyA9IHtcclxuICAgIGNvbnRyb2xsZXIoYXJncykge1xyXG4gICAgICAgIGxldCBmaWx0ZXJzVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcclxuICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6ICdlcSdcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGRpc3BsYXlNb2RhbCA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXHJcbiAgICAgICAgICAgIHByb2plY3REZXRhaWxzID0gbS5wcm9wKFtdKSxcclxuICAgICAgICAgICAgY29udHJpYnV0aW9uc1BlckRheSA9IG0ucHJvcChbXSksXHJcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbiA9IG0ucHJvcChbXSksXHJcbiAgICAgICAgICAgIGxvYWRlciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW47XHJcblxyXG4gICAgICAgIGlmIChoLnBhcmFtQnlOYW1lKCdvbmxpbmVfc3VjY2VzcycpID09PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgZGlzcGxheU1vZGFsLnRvZ2dsZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmlsdGVyc1ZNLnByb2plY3RfaWQoYXJncy5yb290LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpKTtcclxuXHJcbiAgICAgICAgY29uc3QgbCA9IGxvYWRlcihtb2RlbHMucHJvamVjdERldGFpbC5nZXRSb3dPcHRpb25zKGZpbHRlcnNWTS5wYXJhbWV0ZXJzKCkpKTtcclxuICAgICAgICBsLmxvYWQoKS50aGVuKHByb2plY3REZXRhaWxzKTtcclxuXHJcbiAgICAgICAgY29uc3QgbENvbnRyaWJ1dGlvbnNQZXJEYXkgPSBsb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyRGF5LmdldFJvd09wdGlvbnMoZmlsdGVyc1ZNLnBhcmFtZXRlcnMoKSkpO1xyXG4gICAgICAgIGxDb250cmlidXRpb25zUGVyRGF5LmxvYWQoKS50aGVuKGNvbnRyaWJ1dGlvbnNQZXJEYXkpO1xyXG5cclxuICAgICAgICBsZXQgY29udHJpYnV0aW9uc1BlckxvY2F0aW9uVGFibGUgPSBbWydFc3RhZG8nLCAnQXBvaW9zJywgJ1IkIGFwb2lhZG9zICglIGRvIHRvdGFsKSddXTtcclxuICAgICAgICBjb25zdCBidWlsZFBlckxvY2F0aW9uVGFibGUgPSAoY29udHJpYnV0aW9ucykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gKCFfLmlzRW1wdHkoY29udHJpYnV0aW9ucykpID8gXy5tYXAoXy5maXJzdChjb250cmlidXRpb25zKS5zb3VyY2UsIChjb250cmlidXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW4gPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb2x1bW4ucHVzaChjb250cmlidXRpb24uc3RhdGVfYWNyb255bSB8fCAnT3V0cm8vb3RoZXInKTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKGNvbnRyaWJ1dGlvbi50b3RhbF9jb250cmlidXRpb25zKTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKFtjb250cmlidXRpb24udG90YWxfY29udHJpYnV0ZWQsWy8vQWRkaW5nIHJvdyB3aXRoIGN1c3RvbSBjb21wYXJhdG9yID0+IHJlYWQgcHJvamVjdC1kYXRhLXRhYmxlIGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgbShgaW5wdXRbdHlwZT1cImhpZGRlblwiXVt2YWx1ZT1cIiR7Y29udHJpYnV0aW9uLnRvdGFsX2NvbnRyaWJ1dGVkfVwiYCksXHJcbiAgICAgICAgICAgICAgICAgICAgJ1IkICcsXHJcbiAgICAgICAgICAgICAgICAgICAgaC5mb3JtYXROdW1iZXIoY29udHJpYnV0aW9uLnRvdGFsX2NvbnRyaWJ1dGVkLCAyLCAzKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCAnICgnICsgY29udHJpYnV0aW9uLnRvdGFsX29uX3BlcmNlbnRhZ2UudG9GaXhlZCgyKSArICclKScpXHJcbiAgICAgICAgICAgICAgICBdXSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udHJpYnV0aW9uc1BlckxvY2F0aW9uVGFibGUucHVzaChjb2x1bW4pO1xyXG4gICAgICAgICAgICB9KSA6IFtdO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGxDb250cmlidXRpb25zUGVyTG9jYXRpb24gPSBsb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyTG9jYXRpb24uZ2V0Um93T3B0aW9ucyhmaWx0ZXJzVk0ucGFyYW1ldGVycygpKSk7XHJcbiAgICAgICAgbENvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvbi5sb2FkKCkudGhlbihidWlsZFBlckxvY2F0aW9uVGFibGUpO1xyXG5cclxuICAgICAgICBsZXQgY29udHJpYnV0aW9uc1BlclJlZlRhYmxlID0gW1tcclxuICAgICAgICAgICAgSTE4bi50KCdyZWZfdGFibGUuaGVhZGVyLm9yaWdpbicsIEkxOG5TY29wZSgpKSxcclxuICAgICAgICAgICAgSTE4bi50KCdyZWZfdGFibGUuaGVhZGVyLmNvbnRyaWJ1dGlvbnMnLCBJMThuU2NvcGUoKSksXHJcbiAgICAgICAgICAgIEkxOG4udCgncmVmX3RhYmxlLmhlYWRlci5hbW91bnQnLCBJMThuU2NvcGUoKSlcclxuICAgICAgICBdXTtcclxuICAgICAgICBjb25zdCBidWlsZFBlclJlZlRhYmxlID0gKGNvbnRyaWJ1dGlvbnMpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICghXy5pc0VtcHR5KGNvbnRyaWJ1dGlvbnMpKSA/IF8ubWFwKF8uZmlyc3QoY29udHJpYnV0aW9ucykuc291cmNlLCAoY29udHJpYnV0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL1Rlc3QgaWYgdGhlIHN0cmluZyBtYXRjaGVzIGEgd29yZCBzdGFydGluZyB3aXRoIGN0cnNlXyBhbmQgZm9sbG93ZWQgYnkgYW55IG5vbi1kaWdpdCBncm91cCBvZiBjaGFyYWN0ZXJzXHJcbiAgICAgICAgICAgICAgICAvL1RoaXMgYWxsb3dzIHRvIHJlbW92ZSBhbnkgdmVyc2lvbmVkIHJlZmVycmFsIChpLmUuOiBjdHJzZV9uZXdzbGV0dGVyXzEyMykgd2hpbGUgc3RpbGwgZ2V0dGluZyBjdHJzZV90ZXN0X3JlZlxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmUgPSAvKGN0cnNlX1tcXERdKikvLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlc3QgPSByZS5leGVjKGNvbnRyaWJ1dGlvbi5yZWZlcnJhbF9saW5rKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29sdW1uID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRlc3Qpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vUmVtb3ZlcyBsYXN0IHVuZGVyc2NvcmUgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uLnJlZmVycmFsX2xpbmsgPSB0ZXN0WzBdLnN1YnN0cigtMSkgPT09ICdfJyA/IHRlc3RbMF0uc3Vic3RyKDAsIHRlc3RbMF0ubGVuZ3RoIC0gMSkgOiB0ZXN0WzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKGNvbnRyaWJ1dGlvbi5yZWZlcnJhbF9saW5rID8gSTE4bi50KCdyZWZlcnJhbC4nICsgY29udHJpYnV0aW9uLnJlZmVycmFsX2xpbmssIEkxOG5TY29wZSh7ZGVmYXVsdFZhbHVlOiBjb250cmlidXRpb24ucmVmZXJyYWxfbGlua30pKSA6IEkxOG4udCgncmVmZXJyYWwub3RoZXJzJywgSTE4blNjb3BlKCkpKTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKGNvbnRyaWJ1dGlvbi50b3RhbCk7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW4ucHVzaChbY29udHJpYnV0aW9uLnRvdGFsX2Ftb3VudCxbXHJcbiAgICAgICAgICAgICAgICAgICAgbShgaW5wdXRbdHlwZT1cImhpZGRlblwiXVt2YWx1ZT1cIiR7Y29udHJpYnV0aW9uLnRvdGFsX2NvbnRyaWJ1dGVkfVwiYCksXHJcbiAgICAgICAgICAgICAgICAgICAgJ1IkICcsXHJcbiAgICAgICAgICAgICAgICAgICAgaC5mb3JtYXROdW1iZXIoY29udHJpYnV0aW9uLnRvdGFsX2Ftb3VudCwgMiwgMyksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgJyAoJyArIGNvbnRyaWJ1dGlvbi50b3RhbF9vbl9wZXJjZW50YWdlLnRvRml4ZWQoMikgKyAnJSknKVxyXG4gICAgICAgICAgICAgICAgXV0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyaWJ1dGlvbnNQZXJSZWZUYWJsZS5wdXNoKGNvbHVtbik7XHJcbiAgICAgICAgICAgIH0pIDogW107XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgbENvbnRyaWJ1dGlvbnNQZXJSZWYgPSBsb2FkZXIobW9kZWxzLnByb2plY3RDb250cmlidXRpb25zUGVyUmVmLmdldFJvd09wdGlvbnMoZmlsdGVyc1ZNLnBhcmFtZXRlcnMoKSkpO1xyXG4gICAgICAgIGxDb250cmlidXRpb25zUGVyUmVmLmxvYWQoKS50aGVuKGJ1aWxkUGVyUmVmVGFibGUpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsOiBsLFxyXG4gICAgICAgICAgICBsQ29udHJpYnV0aW9uc1BlclJlZjogbENvbnRyaWJ1dGlvbnNQZXJSZWYsXHJcbiAgICAgICAgICAgIGxDb250cmlidXRpb25zUGVyTG9jYXRpb246IGxDb250cmlidXRpb25zUGVyTG9jYXRpb24sXHJcbiAgICAgICAgICAgIGxDb250cmlidXRpb25zUGVyRGF5OiBsQ29udHJpYnV0aW9uc1BlckRheSxcclxuICAgICAgICAgICAgZGlzcGxheU1vZGFsOiBkaXNwbGF5TW9kYWwsXHJcbiAgICAgICAgICAgIGZpbHRlcnNWTTogZmlsdGVyc1ZNLFxyXG4gICAgICAgICAgICBwcm9qZWN0RGV0YWlsczogcHJvamVjdERldGFpbHMsXHJcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJEYXk6IGNvbnRyaWJ1dGlvbnNQZXJEYXksXHJcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlOiBjb250cmlidXRpb25zUGVyTG9jYXRpb25UYWJsZSxcclxuICAgICAgICAgICAgY29udHJpYnV0aW9uc1BlclJlZlRhYmxlOiBjb250cmlidXRpb25zUGVyUmVmVGFibGVcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCkge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBfLmZpcnN0KGN0cmwucHJvamVjdERldGFpbHMoKSkgfHwge1xyXG4gICAgICAgICAgICB1c2VyOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnUmVhbGl6YWRvcidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3NNb2RhbEMgPSBbJ09ubGluZVN1Y2Vzc01vZGFsQ29udGVudCddLFxyXG4gICAgICAgICAgICBidWlsZFRvb2x0aXAgPSAoZWwpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudCh0b29sdGlwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWw6IGVsLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0luZm9ybWEgZGUgb25kZSB2aWVyYW0gb3MgYXBvaW9zIGRlIHNldSBwcm9qZXRvLiBTYWliYSBjb21vIHVzYXIgZXNzYSB0YWJlbGEgZSBwbGFuZWphciBtZWxob3Igc3VhcyBhw6fDtWVzIGRlIGNvbXVuaWNhw6fDo28gJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbShgYVtocmVmPVwiJHtJMThuLnQoJ3JlZl90YWJsZS5oZWxwX3VybCcsIEkxOG5TY29wZSgpKX1cIl1bdGFyZ2V0PSdfYmxhbmsnXWAsICdhcXVpLicpXHJcbiAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMzgwXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcHJvamVjdC51c2VyLm5hbWUgPSBwcm9qZWN0LnVzZXIubmFtZSB8fCAnUmVhbGl6YWRvcic7XHJcblxyXG4gICAgICAgIHJldHVybiBtKCcucHJvamVjdC1pbnNpZ2h0cycsICFjdHJsLmwoKSA/IFtcclxuICAgICAgICAgICAgKHByb2plY3QuaXNfb3duZXJfb3JfYWRtaW4gPyBtLmNvbXBvbmVudChwcm9qZWN0RGFzaGJvYXJkTWVudSwge1xyXG4gICAgICAgICAgICAgICAgcHJvamVjdDogbS5wcm9wKHByb2plY3QpXHJcbiAgICAgICAgICAgIH0pIDogJycpLFxyXG4gICAgICAgICAgICAoY3RybC5kaXNwbGF5TW9kYWwoKSA/IG0uY29tcG9uZW50KG1vZGFsQm94LCB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5TW9kYWw6IGN0cmwuZGlzcGxheU1vZGFsLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogc3VjY2Vzc01vZGFsQ1xyXG4gICAgICAgICAgICB9KSA6ICcnKSxcclxuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJyksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTguZGFzaGJvYXJkLWhlYWRlci51LXRleHQtY2VudGVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZXIubGluZWhlaWdodC1sb29zZXIudS1tYXJnaW5ib3R0b20tMTAnLCBJMThuLnQoJ2NhbXBhaWduX3RpdGxlJywgSTE4blNjb3BlKCkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoYWRtaW5Qcm9qZWN0RGV0YWlsc0NhcmQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlOiBwcm9qZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdwLicgKyBwcm9qZWN0LnN0YXRlICsgJy1wcm9qZWN0LXRleHQuZm9udHNpemUtc21hbGwubGluZWhlaWdodC1sb29zZScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QubW9kZSA9PT0gJ2ZsZXgnICYmIF8uaXNOdWxsKHByb2plY3QuZXhwaXJlc19hdCkgJiYgcHJvamVjdC5zdGF0ZSAhPT0gJ2RyYWZ0JyA/IG0oJ3NwYW4nLCBbSTE4bi50KCdmaW5pc2hfZXhwbGFuYXRpb24nLCBJMThuU2NvcGUoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XCJodHRwOi8vc3Vwb3J0ZS5jYXRhcnNlLm1lL2hjL3B0LWJyL2FydGljbGVzLzIwNjUwNzg2My1DYXRhcnNlLWZsZXgtUHJpbmNpcGFpcy1wZXJndW50YXMtZS1yZXNwb3N0YXMtXCJdW3RhcmdldD1cIl9ibGFua1wiXScsIEkxOG4udCgna25vd19tb3JlJywgSTE4blNjb3BlKCkpKV0pIDogbS50cnVzdChJMThuLnQoYGNhbXBhaWduLiR7cHJvamVjdC5tb2RlfS4ke3Byb2plY3Quc3RhdGV9YCwgSTE4blNjb3BlKHt1c2VybmFtZTogcHJvamVjdC51c2VyLm5hbWUsIGV4cGlyZXNfYXQ6IGgubW9tZW50aWZ5KHByb2plY3Quem9uZV9leHBpcmVzX2F0KSwgc2VudF90b19hbmFseXNpc19hdDogaC5tb21lbnRpZnkocHJvamVjdC5zZW50X3RvX2FuYWx5c2lzX2F0KX0pKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKSwgKHByb2plY3QuaXNfcHVibGlzaGVkKSA/IFtcclxuICAgICAgICAgICAgICAgIG0oJy5kaXZpZGVyJyksXHJcbiAgICAgICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24tb25lLWNvbHVtbi5zZWN0aW9uLmJnLWdyYXkuYmVmb3JlLWZvb3RlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogJzMwMHB4J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhY3RybC5sQ29udHJpYnV0aW9uc1BlckRheSgpID8gbS5jb21wb25lbnQocHJvamVjdERhdGFDaGFydCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjdHJsLmNvbnRyaWJ1dGlvbnNQZXJEYXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBJMThuLnQoJ2Ftb3VudF9wZXJfZGF5X2xhYmVsJywgSTE4blNjb3BlKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhS2V5OiAndG90YWxfYW1vdW50JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXM6IChpdGVtKSA9PiBoLm1vbWVudGlmeShpdGVtLnBhaWRfYXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBoLmxvYWRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogJzMwMHB4J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhY3RybC5sQ29udHJpYnV0aW9uc1BlckRheSgpID8gbS5jb21wb25lbnQocHJvamVjdERhdGFDaGFydCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjdHJsLmNvbnRyaWJ1dGlvbnNQZXJEYXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBJMThuLnQoJ2NvbnRyaWJ1dGlvbnNfcGVyX2RheV9sYWJlbCcsIEkxOG5TY29wZSgpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUtleTogJ3RvdGFsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXM6IChpdGVtKSA9PiBoLm1vbWVudGlmeShpdGVtLnBhaWRfYXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBoLmxvYWRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMi51LXRleHQtY2VudGVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5wcm9qZWN0LWNvbnRyaWJ1dGlvbnMtcGVyLXJlZicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMTAuZm9udHNpemUtbGFyZ2UudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkxOG4udCgncmVmX29yaWdpbl90aXRsZScsIEkxOG5TY29wZSgpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgubmV3RmVhdHVyZUJhZGdlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZFRvb2x0aXAoJ3NwYW4uZm9udHNpemUtc21hbGxlc3QudG9vbHRpcC13cmFwcGVyLmZhLmZhLXF1ZXN0aW9uLWNpcmNsZS5mb250Y29sb3Itc2Vjb25kYXJ5JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjdHJsLmxDb250cmlidXRpb25zUGVyUmVmKCkgPyBtLmNvbXBvbmVudChwcm9qZWN0RGF0YVRhYmxlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZTogY3RybC5jb250cmlidXRpb25zUGVyUmVmVGFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U29ydEluZGV4OiAtMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6IGgubG9hZGVyKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTIudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcucHJvamVjdC1jb250cmlidXRpb25zLXBlci1yZWYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXInLCBJMThuLnQoJ2xvY2F0aW9uX29yaWdpbl90aXRsZScsIEkxOG5TY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjdHJsLmxDb250cmlidXRpb25zUGVyTG9jYXRpb24oKSA/IG0uY29tcG9uZW50KHByb2plY3REYXRhVGFibGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiBjdHJsLmNvbnRyaWJ1dGlvbnNQZXJMb2NhdGlvblRhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNvcnRJbmRleDogLTJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBoLmxvYWRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEyLnUtdGV4dC1jZW50ZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdFJlbWluZGVyQ291bnQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6IHByb2plY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0gOiAnJ1xyXG4gICAgICAgIF0gOiBoLmxvYWRlcigpKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGluc2lnaHRzO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5cclxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncGFnZXMuam9icycpO1xyXG5cclxuY29uc3Qgam9icyA9IHtcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uaGVyby1qb2JzLmhlcm8tbWVkaXVtJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmUudS10ZXh0LWNlbnRlcicsW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2ltZy5pY29uLWhlcm9bc3JjPVwiL2Fzc2V0cy9sb2dvLXdoaXRlLnBuZ1wiXScpLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTIwLmZvbnRzaXplLWxhcmdlc3QnLCBJMThuLnQoJ3RpdGxlJywgSTE4blNjb3BlKCkpKVxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbicsIFtcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lci51LW1hcmdpbnRvcC00MCcsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXB1c2gtMi51LXRleHQtY2VudGVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCdpbmZvJywgSTE4blNjb3BlKCkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2FbaHJlZj1cIi9wcm9qZWN0cy9uZXdcIl0udy1idXR0b24uYnRuLmJ0bi1sYXJnZS5idG4taW5saW5lJywgSTE4bi50KCdjdGEnLCBJMThuU2NvcGUoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGpvYnM7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IGxpdmVTdGF0aXN0aWNzID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzID0ge30pIHtcclxuICAgICAgICBjb25zdCBwYWdlU3RhdGlzdGljcyA9IG0ucHJvcChbXSksXHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkRhdGEgPSBtLnByb3Aoe30pO1xyXG5cclxuICAgICAgICBtb2RlbHMuc3RhdGlzdGljLmdldFJvdygpLnRoZW4ocGFnZVN0YXRpc3RpY3MpO1xyXG4gICAgICAgIC8vIGFyZ3Muc29ja2V0IGlzIGEgc29ja2V0IHByb3ZpZGVkIGJ5IHNvY2tldC5pb1xyXG4gICAgICAgIC8vIGNhbiBzZWUgdGhlcmUgaHR0cHM6Ly9naXRodWIuY29tL2NhdGFyc2UvY2F0YXJzZS1saXZlL2Jsb2IvbWFzdGVyL3B1YmxpYy9pbmRleC5qcyNMOFxyXG4gICAgICAgIGlmIChhcmdzLnNvY2tldCAmJiBfLmlzRnVuY3Rpb24oYXJncy5zb2NrZXQub24pKSB7XHJcbiAgICAgICAgICAgIGFyZ3Muc29ja2V0Lm9uKCduZXdfcGFpZF9jb250cmlidXRpb25zJywgKG1zZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uRGF0YShKU09OLnBhcnNlKG1zZy5wYXlsb2FkKSk7XHJcbiAgICAgICAgICAgICAgICBtb2RlbHMuc3RhdGlzdGljLmdldFJvdygpLnRoZW4ocGFnZVN0YXRpc3RpY3MpO1xyXG4gICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwYWdlU3RhdGlzdGljczogcGFnZVN0YXRpc3RpY3MsXHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkRhdGE6IG5vdGlmaWNhdGlvbkRhdGFcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBjdHJsLm5vdGlmaWNhdGlvbkRhdGEoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uYmctc3RhdHMuc2VjdGlvbi5taW4taGVpZ2h0LTEwMCcsIFtcclxuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtdGV4dC1jZW50ZXInLCBfLm1hcChjdHJsLnBhZ2VTdGF0aXN0aWNzKCksIChzdGF0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW20oJ2ltZy51LW1hcmdpbmJvdHRvbS02MFtzcmM9XCJodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU1YWRhNWRkMTFiMzZhNTI2MTZkOTdkZl9zeW1ib2wtY2F0YXJzZS5wbmdcIl0nKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udGNvbG9yLW5lZ2F0aXZlLnUtbWFyZ2luYm90dG9tLTQwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbWVnYWp1bWJvLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUiQgJyArIGguZm9ybWF0TnVtYmVyKHN0YXQudG90YWxfY29udHJpYnV0ZWQsIDIsIDMpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlJywgJ0RvYWRvcyBwYXJhIHByb2pldG9zIHB1YmxpY2Fkb3MgcG9yIGFxdWknKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250Y29sb3ItbmVnYXRpdmUudS1tYXJnaW5ib3R0b20tNjAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1tZWdhanVtYm8uZm9udHdlaWdodC1zZW1pYm9sZCcsIHN0YXQudG90YWxfY29udHJpYnV0b3JzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlJywgJ1Blc3NvYXMgasOhIGFwb2lhcmFtIHBlbG8gbWVub3MgMSBwcm9qZXRvIG5vIENhdGFyc2UnKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9KSksICghXy5pc0VtcHR5KGRhdGEpID8gbSgnLnctY29udGFpbmVyJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5jYXJkLnUtcmFkaXVzLnUtbWFyZ2luYm90dG9tLTYwLm1lZGl1bScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1zbWFsbC00JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLnUtcm91bmRbc3JjPVwiJyArIGgudXNlQXZhdGFyT3JEZWZhdWx0KGRhdGEudXNlcl9pbWFnZSkgKyAnXCJdJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04LnctY29sLXNtYWxsLTgnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UubGluZWhlaWdodC10aWdodCcsIGRhdGEudXNlcl9uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnUtdGV4dC1jZW50ZXIuZm9udHNpemUtYmFzZS51LW1hcmdpbnRvcC0yMCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCAnYWNhYm91IGRlIGFwb2lhciBvJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1zbWFsbC00JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLXByb2plY3QudS1yYWRpdXNbc3JjPVwiJyArIGRhdGEucHJvamVjdF9pbWFnZSArICdcIl1bd2lkdGg9XCI3NVwiXScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC53LWNvbC1zbWFsbC04JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmxpbmVoZWlnaHQtdGlnaHQnLCBkYXRhLnByb2plY3RfbmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgXSkgOiAnJyksXHJcbiAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTEwLmZvbnRjb2xvci1uZWdhdGl2ZScsIFtcclxuICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW4uZm9udGNvbG9yLW5lZ2F0aXZlW2hyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vY2F0YXJzZVwiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1naXRodWInLCAnLicpLCAnIE9wZW4gU291cmNlIGNvbSBvcmd1bGhvISAnXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxpdmVTdGF0aXN0aWNzO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcblxyXG5jb25zdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0SGVhZGVyID0ge1xyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyQnVpbGRlciA9IGFyZ3MuZmlsdGVyQnVpbGRlcixcclxuICAgICAgICAgICAgICBwYXltZW50U3RhdGVGaWx0ZXIgPSAgXy5maW5kV2hlcmUoZmlsdGVyQnVpbGRlciwge2xhYmVsOiAncGF5bWVudF9zdGF0ZSd9KSxcclxuICAgICAgICAgICAgICByZXdhcmRGaWx0ZXIgPSBfLmZpbmRXaGVyZShmaWx0ZXJCdWlsZGVyLCB7bGFiZWw6ICdyZXdhcmRfZmlsdGVyJ30pLFxyXG4gICAgICAgICAgICAgIG1haW5GaWx0ZXIgPSBfLmZpbmRXaGVyZShmaWx0ZXJCdWlsZGVyLCB7Y29tcG9uZW50OiAnRmlsdGVyTWFpbid9KSxcclxuICAgICAgICAgICAgICBwcm9qZWN0X2lkID0gYXJncy5maWx0ZXJWTS5wcm9qZWN0X2lkKCk7XHJcblxyXG4gICAgICAgIHJld2FyZEZpbHRlci5kYXRhLm9wdGlvbnMgPSBhcmdzLm1hcFJld2FyZHNUb09wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uZGFzaGJvYXJkLWhlYWRlcicsIFtcclxuICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJyksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIudS10ZXh0LWNlbnRlci5mb250d2VpZ2h0LXNlbWlib2xkLmxpbmVoZWlnaHQtbG9vc2VyLnUtbWFyZ2luYm90dG9tLTMwJywgJ1JlbGF0w7NyaW8gZGUgYXBvaW9zJyldKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMycpXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LWZvcm0nLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZm9ybScsIHtvbnN1Ym1pdDogYXJncy5zdWJtaXR9LCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC01JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoY1twYXltZW50U3RhdGVGaWx0ZXIuY29tcG9uZW50XSwgcGF5bWVudFN0YXRlRmlsdGVyLmRhdGEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoY1tyZXdhcmRGaWx0ZXIuY29tcG9uZW50XSwgcmV3YXJkRmlsdGVyLmRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTcudS1tYXJnaW50b3AtMjAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC5fdy1zdWItY29sJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoY1ttYWluRmlsdGVyLmNvbXBvbmVudF0sIG1haW5GaWx0ZXIuZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctY2xlYXJmaXgudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYWx0LWxpbmsudS1yaWdodC5mb250c2l6ZS1zbWFsbC5saW5laGVpZ2h0LWxvb3Nlclt0YXJnZXQ9XCJfX2JsYW5rXCIgaHJlZj1cIi9wcm9qZWN0cy8ke3Byb2plY3RfaWR9L2VkaXQjcmVwb3J0c1wiXWAsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLWRvd25sb2FkJywgJy4nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIEJhaXhhciByZWxhdMOzcmlvcydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0SGVhZGVyO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5cclxuY29uc3QgcHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydENvbnRlbnRDYXJkID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGVDbGFzcyA9IChzdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjbGFzc2VzID0ge1xyXG4gICAgICAgICAgICAgICAgJ3BhaWQnOiAndGV4dC1zdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgICdyZWZ1bmRlZCc6ICd0ZXh0LXJlZnVuZGVkJyxcclxuICAgICAgICAgICAgICAgICdwZW5kaW5nX3JlZnVuZCc6ICd0ZXh0LXJlZnVuZGVkJyxcclxuICAgICAgICAgICAgICAgICdwZW5kaW5nJzogJ3RleHQtd2FpdGluZycsXHJcbiAgICAgICAgICAgICAgICAncmVmdXNlZCc6ICd0ZXh0LWVycm9yJ1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNsYXNzZXNbc3RhdGVdO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXRlQ2xhc3M6IHN0YXRlQ2xhc3NcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGxldCBjb250cmlidXRpb24gPSBhcmdzLmNvbnRyaWJ1dGlvbigpLFxyXG4gICAgICAgICAgICBwcm9maWxlX2ltZyA9IChfLmlzRW1wdHkoY29udHJpYnV0aW9uLnByb2ZpbGVfaW1nX3RodW1ibmFpbCkgPyAnL2Fzc2V0cy9jYXRhcnNlX2Jvb3RzdHJhcC91c2VyLmpwZycgOiBjb250cmlidXRpb24ucHJvZmlsZV9pbWdfdGh1bWJuYWlsKSxcclxuICAgICAgICAgICAgcmV3YXJkID0gY29udHJpYnV0aW9uLnJld2FyZCB8fCB7bWluaW11bV92YWx1ZTogMCwgZGVzY3JpcHRpb246ICdOZW5odW1hIHJlY29tcGVuc2Egc2VsZWNpb25hZGEnfTtcclxuICAgICAgICByZXR1cm4gbSgnLnctY2xlYXJmaXguY2FyZC5jYXJkLWNsaWNrYWJsZScsIFtcclxuICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEudy1jb2wtdGlueS0xJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oYGltZy51c2VyLWF2YXRhci51LW1hcmdpbmJvdHRvbS0xMFtzcmM9JyR7cHJvZmlsZV9pbWd9J11gKVxyXG4gICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEudy1jb2wtdGlueS0xMScsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtc21hbGxlci5saW5laGVpZ2h0LXRpZ2h0ZXInLCBjb250cmlidXRpb24udXNlcl9uYW1lKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5saW5laGVpZ2h0LWxvb3NlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29udHJpYnV0aW9uLmhhc19hbm90aGVyID8gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuLWxpZ2h0LmJhZGdlLmJhZGdlLWxpZ2h0JywgJysxIGFwb2lvJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSA6ICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29udHJpYnV0aW9uLmFub255bW91cyA/IG0oJ3NwYW4uZmEuZmEtZXllLXNsYXNoLmZvbnRjb2xvci1zZWNvbmRhcnknKSA6ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmxpbmVoZWlnaHQtdGlnaHRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBzcGFuLmZhLmZhLWNpcmNsZS5mb250c2l6ZS1zbWFsbGVzdC4ke2N0cmwuc3RhdGVDbGFzcyhjb250cmlidXRpb24uc3RhdGUpfWAsICcuJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyDCoMKgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLWxhcmdlJywgYFIkICR7aC5mb3JtYXROdW1iZXIoY29udHJpYnV0aW9uLnZhbHVlLCAyLCAzKX1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVzdC5mb250d2VpZ2h0LXNlbWlib2xkJywgYFJlY29tcGVuc2E6wqBSJCAke2guZm9ybWF0TnVtYmVyKHJld2FyZC5taW5pbXVtX3ZhbHVlLCAyLCAzKX1gKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QnLCByZXdhcmQuZGVzY3JpcHRpb24uc3Vic3RyaW5nKDAsIDgwKSArICcuLi4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgXSkvKixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbShcIi53LWNvbC53LWNvbC0yLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnkudS10ZXh0LWNlbnRlclwiLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnlcIiwgXCJFbnZpZWkhXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIi5mb250c2l6ZS1zbWFsbGVzdC51LW1hcmdpbmJvdHRvbS0yMC5saW5laGVpZ2h0LWxvb3NlXCIsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiYS5jaGVja2JveC1iaWdbaHJlZj0nIyddXCIsIFwiLlwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIudy1jb2wudy1jb2wtMlwiLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiLmZvbnRzaXplLXNtYWxsZXN0XCIsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiYS5saW5rLWhpZGRlbltocmVmPScjJ11cIiwgXCJRdWVzdGlvbsOhcmlvXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLFwiIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLG0oXCJzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQudGV4dC13YWl0aW5nXCIsIFwiZW52aWFkb1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci10ZXJjaWFyeVwiLCBcImVtIDI5LzEwLzIwMTVcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSkqL1xyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgLy9tKFwiYS53LWlubGluZS1ibG9jay5hcnJvdy1hZG1pbi5mYS5mYS1jaGV2cm9uLWRvd24uZm9udGNvbG9yLXNlY29uZGFyeVtkYXRhLWl4PSdzaG93LWRldGFpbC1ib3gnXVtocmVmPScjJ11cIilcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3RDb250cmlidXRpb25SZXBvcnRDb250ZW50Q2FyZDtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IHByb2plY3RDb250cmlidXRpb25SZXBvcnRDb250ZW50Q2FyZCBmcm9tICcuL3Byb2plY3QtY29udHJpYnV0aW9uLXJlcG9ydC1jb250ZW50LWNhcmQnO1xyXG5cclxuY29uc3QgcHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydENvbnRlbnQgPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBsaXN0ID0gYXJncy5saXN0O1xyXG4gICAgICAgIHJldHVybiBtKCcudy1zZWN0aW9uLmJnLWdyYXkuYmVmb3JlLWZvb3Rlci5zZWN0aW9uJywgW1xyXG4gICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tMjAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTkudy1jb2wtc21hbGwtNi53LWNvbC10aW55LTYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgKGxpc3QuaXNMb2FkaW5nKCkgPyAnJyA6IGxpc3QudG90YWwoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBhcG9pb3MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL20oXCIuZm9udHNpemUtbGFyZ2UuZm9udHdlaWdodC1zZW1pYm9sZFwiLCBcIlIkIDEyLjAwMCwwMFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgIFRPRE86IG9yZGVyaW5nIGZpbHRlciB0ZW1wbGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIG0oXCIudy1jb2wudy1jb2wtMy53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNlwiLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIudy1mb3JtXCIsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJmb3JtW2RhdGEtbmFtZT0nRW1haWwgRm9ybSA1J11baWQ9J2VtYWlsLWZvcm0tNSddW25hbWU9J2VtYWlsLWZvcm0tNSddXCIsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnlcIiwgXCJPcmRlbmFyIHBvcjpcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcInNlbGVjdC53LXNlbGVjdC50ZXh0LWZpZWxkLnBvc2l0aXZlLmZvbnRzaXplLXNtYWxsZXN0W2lkPSdmaWVsZC05J11bbmFtZT0nZmllbGQtOSddXCIsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIm9wdGlvblt2YWx1ZT0nJ11cIiwgXCJEYXRhIChyZWNlbnRlcyBwYXJhIGFudGlnb3MpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwib3B0aW9uW3ZhbHVlPScnXVwiLCBcIkRhdGEgKGFudGlnb3MgcGFyYSByZWNlbnRlcylcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJvcHRpb25bdmFsdWU9JyddXCIsIFwiVmFsb3IgKG1haW9yIHBhcmEgbWVub3IpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwib3B0aW9uW3ZhbHVlPSdGaXJzdCddXCIsIFwiVmFsb3IgKG1lbm9yIHBhcmEgbWFpb3IpXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSkqL1xyXG4gICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICBfLm1hcChsaXN0LmNvbGxlY3Rpb24oKSwgKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250cmlidXRpb24gPSBtLnByb3AoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KHByb2plY3RDb250cmlidXRpb25SZXBvcnRDb250ZW50Q2FyZCwge2NvbnRyaWJ1dGlvbjogY29udHJpYnV0aW9ufSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLmJnLWdyYXknLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTYwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1wdXNoLTUnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIWxpc3QuaXNMb2FkaW5nKCkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsaXN0LmlzTGFzdFBhZ2UoKSA/ICcnIDogbSgnYnV0dG9uI2xvYWQtbW9yZS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGxpc3QubmV4dFBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnQ2FycmVnYXIgbWFpcycpKSA6IGgubG9hZGVyKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKVxyXG5cclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3RDb250cmlidXRpb25SZXBvcnRDb250ZW50O1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IHJlcGxhY2VEaWFjcml0aWNzIGZyb20gJ3JlcGxhY2VEaWFjcml0aWNzJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcblxyXG5jb25zdCB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xyXG4gICAgZnVsbF90ZXh0X2luZGV4OiAnQEAnLFxyXG4gICAgc3RhdGU6ICdlcScsXHJcbiAgICByZXdhcmRfaWQ6ICdlcScsXHJcbiAgICBwcm9qZWN0X2lkOiAnZXEnXHJcbn0pLFxyXG4gICAgICBwYXJhbVRvU3RyaW5nID0gKHApID0+IHtcclxuICAgICAgICAgIHJldHVybiAocCB8fCAnJykudG9TdHJpbmcoKS50cmltKCk7XHJcbiAgICAgIH07XHJcblxyXG52bS5zdGF0ZSgnJyk7XHJcbnZtLm9yZGVyKHtcclxuICAgIGlkOiAnZGVzYydcclxufSk7XHJcblxyXG52bS5mdWxsX3RleHRfaW5kZXgudG9GaWx0ZXIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBmaWx0ZXIgPSBwYXJhbVRvU3RyaW5nKHZtLmZ1bGxfdGV4dF9pbmRleCgpKTtcclxuICAgIHJldHVybiBmaWx0ZXIgJiYgcmVwbGFjZURpYWNyaXRpY3MoZmlsdGVyKSB8fCB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB2bTtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IHByb2plY3REYXNoYm9hcmRNZW51IGZyb20gJy4uL2MvcHJvamVjdC1kYXNoYm9hcmQtbWVudSc7XHJcbmltcG9ydCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0SGVhZGVyIGZyb20gJy4uL2MvcHJvamVjdC1jb250cmlidXRpb24tcmVwb3J0LWhlYWRlcic7XHJcbmltcG9ydCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0Q29udGVudCBmcm9tICcuLi9jL3Byb2plY3QtY29udHJpYnV0aW9uLXJlcG9ydC1jb250ZW50JztcclxuaW1wb3J0IHByb2plY3RzQ29udHJpYnV0aW9uUmVwb3J0Vk0gZnJvbSAnLi4vdm1zL3Byb2plY3RzLWNvbnRyaWJ1dGlvbi1yZXBvcnQtdm0nO1xyXG5cclxuY29uc3QgcHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydCA9IHtcclxuICAgIGNvbnRyb2xsZXIoYXJncykge1xyXG4gICAgICAgIGNvbnN0IGxpc3RWTSA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnByb2plY3RDb250cmlidXRpb24sICdpZC5kZXNjJywgeydQcmVmZXInOiAnY291bnQ9ZXhhY3QnfSksXHJcbiAgICAgICAgICAgICAgZmlsdGVyVk0gPSBwcm9qZWN0c0NvbnRyaWJ1dGlvblJlcG9ydFZNLFxyXG4gICAgICAgICAgICAgIHByb2plY3QgPSBtLnByb3Aoe30pLFxyXG4gICAgICAgICAgICAgIHJld2FyZHMgPSBtLnByb3AoW10pLFxyXG4gICAgICAgICAgICAgIGZpbHRlckJ1aWxkZXIgPSBbXHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ0ZpbHRlck1haW4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0V3JhcHBlckNsYXNzOiAnLnctaW5wdXQudGV4dC1maWVsZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQ2xhc3M6ICcuYnRuLmJ0bi1tZWRpdW0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZtOiBmaWx0ZXJWTS5mdWxsX3RleHRfaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdCdXNxdWUgcG9yIG5vbWUgb3UgZW1haWwgZG8gYXBvaWFkb3InXHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAncmV3YXJkX2ZpbHRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdGaWx0ZXJEcm9wZG93bicsXHJcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdSZWNvbXBlbnNhJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncmV3YXJkX2lkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB2bTogZmlsdGVyVk0ucmV3YXJkX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXJfY2xhc3M6ICcudy1jb2wudy1jb2wtNi53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNi5fdy1zdWItY29sLW1pZGRsZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW11cclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdwYXltZW50X3N0YXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ0ZpbHRlckRyb3Bkb3duJyxcclxuICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1N0YXR1cyBkbyBhcG9pbycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3N0YXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB2bTogZmlsdGVyVk0uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlcl9jbGFzczogJy53LWNvbC53LWNvbC02LnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02Ll93LXN1Yi1jb2wtbWlkZGxlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1RvZG9zJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdwYWlkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiAnUGFnbydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAncmVmdXNlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ0NhbmNlbGFkbydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAncGVuZGluZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1BlbmRlbnRlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdwZW5kaW5nX3JlZnVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ1JlZW1ib2xzbyBwZW5kZW50ZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAncmVmdW5kZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb246ICdSZWVtYm9sc2FkbydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnY2hhcmdlYmFjaycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogJ0NvbnRlc3RhZG8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgc3VibWl0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBsaXN0Vk0uZmlyc3RQYWdlKGZpbHRlclZNLnBhcmFtZXRlcnMoKSkudGhlbihudWxsKTtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIGZpbHRlclZNLnByb2plY3RfaWQoYXJncy5yb290LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpKTtcclxuXHJcbiAgICAgICAgY29uc3QgbFJld2FyZCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obW9kZWxzLnJld2FyZERldGFpbC5nZXRQYWdlT3B0aW9ucyh7cHJvamVjdF9pZDogYGVxLiR7ZmlsdGVyVk0ucHJvamVjdF9pZCgpfWB9KSk7XHJcbiAgICAgICAgY29uc3QgbFByb2plY3QgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKG1vZGVscy5wcm9qZWN0RGV0YWlsLmdldFBhZ2VPcHRpb25zKHtwcm9qZWN0X2lkOiBgZXEuJHtmaWx0ZXJWTS5wcm9qZWN0X2lkKCl9YH0pKTtcclxuXHJcbiAgICAgICAgbFJld2FyZC5sb2FkKCkudGhlbihyZXdhcmRzKTtcclxuICAgICAgICBsUHJvamVjdC5sb2FkKCkudGhlbihwcm9qZWN0KTtcclxuXHJcbiAgICAgICAgY29uc3QgbWFwUmV3YXJkc1RvT3B0aW9ucyA9ICgpID0+IHtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgaWYgKCFsUmV3YXJkKCkpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBfLm1hcChyZXdhcmRzKCksIChyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHIuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogYFIkICR7aC5mb3JtYXROdW1iZXIoci5taW5pbXVtX3ZhbHVlLCAyLCAzKX0gLSAke3IuZGVzY3JpcHRpb24uc3Vic3RyaW5nKDAsIDIwKX1gXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvcHRpb25zLnVuc2hpZnQoe1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICcnLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uOiAnVG9kYXMnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKCFsaXN0Vk0uY29sbGVjdGlvbigpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsaXN0Vk0uZmlyc3RQYWdlKGZpbHRlclZNLnBhcmFtZXRlcnMoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsaXN0Vk06IGxpc3RWTSxcclxuICAgICAgICAgICAgZmlsdGVyVk06IGZpbHRlclZNLFxyXG4gICAgICAgICAgICBmaWx0ZXJCdWlsZGVyOiBmaWx0ZXJCdWlsZGVyLFxyXG4gICAgICAgICAgICBzdWJtaXQ6IHN1Ym1pdCxcclxuICAgICAgICAgICAgbFJld2FyZDogbFJld2FyZCxcclxuICAgICAgICAgICAgcmV3YXJkczogcmV3YXJkcyxcclxuICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCxcclxuICAgICAgICAgICAgbWFwUmV3YXJkc1RvT3B0aW9uczogbWFwUmV3YXJkc1RvT3B0aW9uc1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdCA9IGN0cmwubGlzdFZNO1xyXG5cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0RGFzaGJvYXJkTWVudSwge3Byb2plY3Q6IG0ucHJvcChfLmZpcnN0KGN0cmwucHJvamVjdCgpKSl9KSxcclxuICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdENvbnRyaWJ1dGlvblJlcG9ydEhlYWRlciwge1xyXG4gICAgICAgICAgICAgICAgc3VibWl0OiBjdHJsLnN1Ym1pdCxcclxuICAgICAgICAgICAgICAgIGZpbHRlckJ1aWxkZXI6IGN0cmwuZmlsdGVyQnVpbGRlcixcclxuICAgICAgICAgICAgICAgIGZvcm06IGN0cmwuZmlsdGVyVk0uZm9ybURlc2NyaWJlcixcclxuICAgICAgICAgICAgICAgIG1hcFJld2FyZHNUb09wdGlvbnM6IGN0cmwubWFwUmV3YXJkc1RvT3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIGZpbHRlclZNOiBjdHJsLmZpbHRlclZNXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbnRvcC0zMCcpLFxyXG4gICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0Q29udGVudCwge1xyXG4gICAgICAgICAgICAgICAgbGlzdDogbGlzdFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q29udHJpYnV0aW9uUmVwb3J0O1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5jb25zdCBwcm9qZWN0Vk0gPSAocHJvamVjdF9pZCwgcHJvamVjdF91c2VyX2lkKSA9PiB7XHJcbiAgICBjb25zdCB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xyXG4gICAgICAgIHByb2plY3RfaWQ6ICdlcSdcclxuICAgIH0pLFxyXG4gICAgICAgICAgaWRWTSA9IGguaWRWTSxcclxuICAgICAgICAgIHByb2plY3REZXRhaWxzID0gbS5wcm9wKFtdKSxcclxuICAgICAgICAgIHVzZXJEZXRhaWxzID0gbS5wcm9wKFtdKSxcclxuICAgICAgICAgIHJld2FyZERldGFpbHMgPSBtLnByb3AoW10pO1xyXG5cclxuICAgIHZtLnByb2plY3RfaWQocHJvamVjdF9pZCk7XHJcbiAgICBpZFZNLmlkKHByb2plY3RfdXNlcl9pZCk7XHJcblxyXG4gICAgY29uc3QgbFByb2plY3QgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKG1vZGVscy5wcm9qZWN0RGV0YWlsLmdldFJvd09wdGlvbnModm0ucGFyYW1ldGVycygpKSksXHJcbiAgICAgICAgICBsVXNlciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obW9kZWxzLnVzZXJEZXRhaWwuZ2V0Um93T3B0aW9ucyhpZFZNLnBhcmFtZXRlcnMoKSkpLFxyXG4gICAgICAgICAgbFJld2FyZCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obW9kZWxzLnJld2FyZERldGFpbC5nZXRQYWdlT3B0aW9ucyh2bS5wYXJhbWV0ZXJzKCkpKSxcclxuICAgICAgICAgIGlzTG9hZGluZyA9ICgpID0+IHsgcmV0dXJuIChsUHJvamVjdCgpIHx8IGxVc2VyKCkgfHwgbFJld2FyZCgpKTsgfTtcclxuXHJcbiAgICBsUHJvamVjdC5sb2FkKCkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgIGxVc2VyLmxvYWQoKS50aGVuKHVzZXJEZXRhaWxzKTtcclxuICAgICAgICBsUmV3YXJkLmxvYWQoKS50aGVuKHJld2FyZERldGFpbHMpO1xyXG5cclxuICAgICAgICBwcm9qZWN0RGV0YWlscyhkYXRhKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcHJvamVjdERldGFpbHM6IF8uY29tcG9zZShfLmZpcnN0LCBwcm9qZWN0RGV0YWlscyksXHJcbiAgICAgICAgdXNlckRldGFpbHM6IHVzZXJEZXRhaWxzLFxyXG4gICAgICAgIHJld2FyZERldGFpbHM6IHJld2FyZERldGFpbHMsXHJcbiAgICAgICAgaXNMb2FkaW5nOiBpc0xvYWRpbmdcclxuICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Vk07XHJcbiIsIi8qKlxyXG4gKiB3aW5kb3cuYy5yb290LlByb2plY3RzRGFzaGJvYXJkIGNvbXBvbmVudFxyXG4gKiBBIHJvb3QgY29tcG9uZW50IHRvIG1hbmFnZSBwcm9qZWN0c1xyXG4gKlxyXG4gKiBFeGFtcGxlOlxyXG4gKiBUbyBtb3VudCB0aGlzIGNvbXBvbmVudCBqdXN0IGNyZWF0ZSBhIERPTSBlbGVtZW50IGxpa2U6XHJcbiAqIDxkaXYgZGF0YS1taXRocmlsPVwiUHJvamVjdHNEYXNoYm9hcmRcIj5cclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcbmltcG9ydCBwcm9qZWN0Vk0gZnJvbSAnLi4vdm1zL3Byb2plY3Qtdm0nO1xyXG5pbXBvcnQgcHJvamVjdERhc2hib2FyZE1lbnUgZnJvbSAnLi4vYy9wcm9qZWN0LWRhc2hib2FyZC1tZW51JztcclxuXHJcbmNvbnN0IHByb2plY3RzRGFzaGJvYXJkID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb2plY3RWTShhcmdzLnByb2plY3RfaWQsIGFyZ3MucHJvamVjdF91c2VyX2lkKTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwpIHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gY3RybC5wcm9qZWN0RGV0YWlscztcclxuICAgICAgICByZXR1cm4gcHJvamVjdCgpLmlzX293bmVyX29yX2FkbWluID9cclxuICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdERhc2hib2FyZE1lbnUsIHtwcm9qZWN0OiBwcm9qZWN0fSkgOiAnJztcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3RzRGFzaGJvYXJkO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcclxuXHJcbmNvbnN0IHByb2plY3RGaWx0ZXJzVk0gPSAoKSA9PiB7XHJcbiAgICBjb25zdCBmaWx0ZXJzVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNLFxyXG4gICAgICAgIGFsbCA9IGZpbHRlcnNWTSh7XHJcbiAgICAgICAgICAgIHN0YXRlOiAnZXEnXHJcbiAgICAgICAgfSkuc3RhdGUoJ29ubGluZScpLFxyXG5cclxuICAgICAgICBuZWFyTWUgPSBmaWx0ZXJzVk0oe1xyXG4gICAgICAgICAgICBuZWFyX21lOiAnZXEnLFxyXG4gICAgICAgICAgICBvcGVuX2Zvcl9jb250cmlidXRpb25zOiAnZXEnXHJcbiAgICAgICAgfSkub3Blbl9mb3JfY29udHJpYnV0aW9ucygndHJ1ZScpLm5lYXJfbWUodHJ1ZSksXHJcblxyXG4gICAgICAgIGV4cGlyaW5nID0gZmlsdGVyc1ZNKHtcclxuICAgICAgICAgICAgZXhwaXJlc19hdDogJ2x0ZScsXHJcbiAgICAgICAgICAgIG9wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6ICdlcSdcclxuICAgICAgICB9KS5vcGVuX2Zvcl9jb250cmlidXRpb25zKCd0cnVlJykuZXhwaXJlc19hdChtb21lbnQoKS5hZGQoMTQsICdkYXlzJykuZm9ybWF0KCdZWVlZLU1NLUREJykpLFxyXG5cclxuICAgICAgICByZWNlbnQgPSBmaWx0ZXJzVk0oe1xyXG4gICAgICAgICAgICBvbmxpbmVfZGF0ZTogJ2d0ZScsXHJcbiAgICAgICAgICAgIG9wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6ICdlcSdcclxuICAgICAgICB9KS5vcGVuX2Zvcl9jb250cmlidXRpb25zKCd0cnVlJykub25saW5lX2RhdGUobW9tZW50KCkuc3VidHJhY3QoNSwgJ2RheXMnKS5mb3JtYXQoJ1lZWVktTU0tREQnKSksXHJcblxyXG4gICAgICAgIHNjb3JlID0gZmlsdGVyc1ZNKHtcclxuICAgICAgICAgICAgc2NvcmU6ICdndGUnLFxyXG4gICAgICAgICAgICBvcGVuX2Zvcl9jb250cmlidXRpb25zOiAnZXEnXHJcbiAgICAgICAgfSkuc2NvcmUoJzEnKS5vcGVuX2Zvcl9jb250cmlidXRpb25zKCd0cnVlJyksXHJcblxyXG4gICAgICAgIG9ubGluZSA9IGZpbHRlcnNWTSh7XHJcbiAgICAgICAgICAgIG9wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6ICdlcSdcclxuICAgICAgICB9KS5vcGVuX2Zvcl9jb250cmlidXRpb25zKCd0cnVlJyksXHJcblxyXG4gICAgICAgIHN1Y2Nlc3NmdWwgPSBmaWx0ZXJzVk0oe1xyXG4gICAgICAgICAgICBzdGF0ZTogJ2VxJ1xyXG4gICAgICAgIH0pLnN0YXRlKCdzdWNjZXNzZnVsJyksXHJcblxyXG4gICAgICAgIGZpbmlzaGVkID0gZmlsdGVyc1ZNKHt9KSxcclxuXHJcbiAgICAgICAgZmlsdGVycyA9IHtcclxuICAgICAgICAgICAgYWxsOiB7XHJcbiAgICAgICAgICAgICAgdGl0bGU6ICdUb2RhcyBhcyBDYXRlZ29yaWFzJyxcclxuICAgICAgICAgICAgICBmaWx0ZXI6IGFsbCxcclxuICAgICAgICAgICAgICBuaWNlbmFtZTogJ05vIGFyJyxcclxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdhbGwnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzY29yZToge1xyXG4gICAgICAgICAgICAgIHRpdGxlOiAnVG9kYXMgYXMgQ2F0ZWdvcmlhcycsXHJcbiAgICAgICAgICAgICAgZmlsdGVyOiBzY29yZSxcclxuICAgICAgICAgICAgICBuaWNlbmFtZTogJ1BvcHVsYXJlcycsXHJcbiAgICAgICAgICAgICAgaXNDb250ZXh0dWFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICBrZXlOYW1lOiAnc2NvcmUnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbmxpbmU6IHtcclxuICAgICAgICAgICAgICB0aXRsZTogJ05vIGFyJyxcclxuICAgICAgICAgICAgICBmaWx0ZXI6IG9ubGluZSxcclxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdvbmxpbmUnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHBpcmluZzoge1xyXG4gICAgICAgICAgICAgIHRpdGxlOiAnUmV0YSBmaW5hbCcsXHJcbiAgICAgICAgICAgICAgZmlsdGVyOiBleHBpcmluZyxcclxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdleHBpcmluZydcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3NmdWw6IHtcclxuICAgICAgICAgICAgICB0aXRsZTogJ1RvZGFzIGFzIENhdGVnb3JpYXMnLFxyXG4gICAgICAgICAgICAgIGZpbHRlcjogc3VjY2Vzc2Z1bCxcclxuICAgICAgICAgICAgICBuaWNlbmFtZTogJ0ZpbmFuY2lhZG9zJyxcclxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdzdWNjZXNzZnVsJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmluaXNoZWQ6IHtcclxuICAgICAgICAgICAgICB0aXRsZTogJ1RvZGFzIGFzIENhdGVnb3JpYXMnLFxyXG4gICAgICAgICAgICAgIGZpbHRlcjogZmluaXNoZWQsXHJcbiAgICAgICAgICAgICAgbmljZW5hbWU6ICdGaW5hbGl6YWRvcycsXHJcbiAgICAgICAgICAgICAgaXNDb250ZXh0dWFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICBrZXlOYW1lOiAnZmluaXNoZWQnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWNlbnQ6IHtcclxuICAgICAgICAgICAgICB0aXRsZTogJ1JlY2VudGVzJyxcclxuICAgICAgICAgICAgICBmaWx0ZXI6IHJlY2VudCxcclxuICAgICAgICAgICAgICBpc0NvbnRleHR1YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGtleU5hbWU6ICdyZWNlbnQnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBuZWFyX21lOiB7XHJcbiAgICAgICAgICAgICAgdGl0bGU6ICdQcsOzeGltb3MgYSBtaW0nLFxyXG4gICAgICAgICAgICAgIGZpbHRlcjogbmVhck1lLFxyXG4gICAgICAgICAgICAgIGlzQ29udGV4dHVhbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAga2V5TmFtZTogJ25lYXJfbWUnXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICBjb25zdCBzZXRDb250ZXh0RmlsdGVycyA9IChjb250ZXh0RmlsdGVycykgPT4ge1xyXG4gICAgICAgIF8ubWFwKGNvbnRleHRGaWx0ZXJzLCAoZmlsdGVyS2V5KSA9PiBmaWx0ZXJzW2ZpbHRlcktleV0uaXNDb250ZXh0dWFsID0gdHJ1ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmaWx0ZXJzO1xyXG4gICAgfSxcclxuICAgICAgICAgICAgZ2V0Q29udGV4dEZpbHRlcnMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5maWx0ZXIoZmlsdGVycywgKGZpbHRlcikgPT4gZmlsdGVyLmlzQ29udGV4dHVhbCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlbW92ZUNvbnRleHRGaWx0ZXIgPSAoZmlsdGVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJzW2ZpbHRlci5rZXlOYW1lXS5pc0NvbnRleHR1YWwgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVycztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmaWx0ZXJzOiBmaWx0ZXJzLFxyXG4gICAgICAgICAgICBzZXRDb250ZXh0RmlsdGVyczogc2V0Q29udGV4dEZpbHRlcnMsXHJcbiAgICAgICAgICAgIGdldENvbnRleHRGaWx0ZXJzOiBnZXRDb250ZXh0RmlsdGVycyxcclxuICAgICAgICAgICAgcmVtb3ZlQ29udGV4dEZpbHRlcjogcmVtb3ZlQ29udGV4dEZpbHRlclxyXG4gICAgICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0RmlsdGVyc1ZNO1xyXG4iLCIvKipcclxuICogd2luZG93LmMuU2VhcmNoIGNvbXBvbmVudFxyXG4gKiBSZXR1cm5zIGEgc2VhcmNoIGlucHV0XHJcbiAqXHJcbiAqIEV4YW1wbGU6XHJcbiAqIG0uY29tcG9uZW50KGMuU2VhcmNoLCB7YWN0aW9uOiAnL3NlYXJjaCcsIG1ldGhvZDogJ0dFVCd9KVxyXG4gKi9cclxuXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5cclxuY29uc3Qgc2VhcmNoID0ge1xyXG4gICAgdmlldyhjdHJsLCBhcmdzID0ge30pIHtcclxuICAgICAgICBjb25zdCBhY3Rpb24gPSBhcmdzLmFjdGlvbiB8fCAnL3B0L2V4cGxvcmUnLFxyXG4gICAgICAgICAgICBtZXRob2QgPSBhcmdzLm1ldGhvZCB8fCAnR0VUJztcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJyNzZWFyY2gudy1jb250YWluZXIudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0nLCBbXHJcbiAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMC51LW1hcmdpbmJvdHRvbS0yMCcsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdmb3JtI2VtYWlsLWZvcm0nLCB7YWN0aW9uOiBhY3Rpb24sIG1ldGhvZDogbWV0aG9kfSwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMC53LWNvbC1zbWFsbC0xMC53LWNvbC10aW55LTEwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dFt0eXBlPVwidGV4dFwiXVtuYW1lPVwicGdfc2VhcmNoXCJdW3BsYWNlaG9sZGVyPVwiQnVzcXVlIHByb2pldG9zXCJdI3BnX3NlYXJjaF9pbnNpZGUudy1pbnB1dC50ZXh0LWZpZWxkLm5lZ2F0aXZlLnByZWZpeCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtc21hbGwtMi53LWNvbC10aW55LTInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2J1dHRvbi53LWlubGluZS1ibG9jay5idG4uYnRuLWRhcmsuYnRuLWF0dGFjaGVkLnBvc3RmaXgnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcuaGVhZGVyLWx1cGFbc3JjPVwiaHR0cHM6Ly9kYWtzMmszYTRpYjJ6LmNsb3VkZnJvbnQubmV0LzU0YjQ0MGI4NTYwOGUzZjQzODlkYjM4Ny81NGU0NDE3OGIyMTM1ZmNlMmI2Y2QyMzVfbHVwYS5wbmdcIl0nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2VhcmNoO1xyXG4iLCIvKipcclxuICogd2luZG93LmMuQ2F0ZWdvcnlCdXR0b24gY29tcG9uZW50XHJcbiAqIFJldHVybiBhIGxpbmsgd2l0aCBhIGJ0bi1jYXRlZ29yeSBjbGFzcy5cclxuICogSXQgdXNlcyBhIGNhdGVnb3J5IHBhcmFtZXRlci5cclxuICpcclxuICogRXhhbXBsZTpcclxuICogbS5jb21wb25lbnQoYy5DYXRlZ29yeUJ1dHRvbiwge1xyXG4gKiAgICAgY2F0ZWdvcnk6IHtcclxuICogICAgICAgICBpZDogMSxcclxuICogICAgICAgICBuYW1lOiAnVmlkZW8nLFxyXG4gKiAgICAgICAgIG9ubGluZV9wcm9qZWN0czogMVxyXG4gKiAgICAgfVxyXG4gKiB9KVxyXG4gKi9cclxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcblxyXG5jb25zdCBjYXRlZ29yeUJ1dHRvbiA9IHtcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gYXJncy5jYXRlZ29yeTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXNtYWxsLTYudy1jb2wtdGlueS02JywgW1xyXG4gICAgICAgICAgICBtKGBhLnctaW5saW5lLWJsb2NrLmJ0bi1jYXRlZ29yeVtocmVmPScjYnlfY2F0ZWdvcnlfaWQvJHtjYXRlZ29yeS5pZH0nXWAsIFtcclxuICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uYmFkZ2UuZXhwbG9yZScsIGNhdGVnb3J5Lm9ubGluZV9wcm9qZWN0cylcclxuICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICBdKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2F0ZWdvcnlCdXR0b247XHJcbiIsIi8qKlxyXG4gKiB3aW5kb3cucm9vdC5Qcm9qZWN0c0V4cGxvcmUgY29tcG9uZW50XHJcbiAqIEEgcm9vdCBjb21wb25lbnQgdG8gc2hvdyBwcm9qZWN0cyBhY2NvcmRpbmcgdG8gdXNlciBkZWZpbmVkIGZpbHRlcnNcclxuICpcclxuICogRXhhbXBsZTpcclxuICogVG8gbW91bnQgdGhpcyBjb21wb25lbnQganVzdCBjcmVhdGUgYSBET00gZWxlbWVudCBsaWtlOlxyXG4gKiA8ZGl2IGRhdGEtbWl0aHJpbD1cIlByb2plY3RzRXhwbG9yZVwiPlxyXG4gKi9cclxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgcHJvamVjdEZpbHRlcnMgZnJvbSAnLi4vdm1zL3Byb2plY3QtZmlsdGVycy12bSc7XHJcbmltcG9ydCBzZWFyY2ggZnJvbSAnLi4vYy9zZWFyY2gnO1xyXG5pbXBvcnQgY2F0ZWdvcnlCdXR0b24gZnJvbSAnLi4vYy9jYXRlZ29yeS1idXR0b24nO1xyXG5pbXBvcnQgcHJvamVjdENhcmQgZnJvbSAnLi4vYy9wcm9qZWN0LWNhcmQnO1xyXG5cclxuY29uc3QgcHJvamVjdHNFeHBsb3JlID0ge1xyXG4gICAgY29udHJvbGxlcigpIHtcclxuICAgICAgICBjb25zdCBmaWx0ZXJzID0gcG9zdGdyZXN0LmZpbHRlcnNWTSxcclxuICAgICAgICAgICAgICBwcm9qZWN0RmlsdGVyc1ZNID0gcHJvamVjdEZpbHRlcnMoKSxcclxuICAgICAgICAgICAgICBmaWx0ZXJzTWFwID0gcHJvamVjdEZpbHRlcnNWTS5maWx0ZXJzLFxyXG4gICAgICAgICAgICAgIGRlZmF1bHRGaWx0ZXIgPSBoLnBhcmFtQnlOYW1lKCdmaWx0ZXInKSB8fCAnc2NvcmUnLFxyXG4gICAgICAgICAgICAgIGZhbGxiYWNrRmlsdGVyID0gJ2FsbCcsXHJcbiAgICAgICAgICAgICAgY3VycmVudEZpbHRlciA9IG0ucHJvcChmaWx0ZXJzTWFwW2RlZmF1bHRGaWx0ZXJdKSxcclxuICAgICAgICAgICAgICBjaGFuZ2VGaWx0ZXIgPSAobmV3RmlsdGVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaWx0ZXIoZmlsdGVyc01hcFtuZXdGaWx0ZXJdKTtcclxuICAgICAgICAgICAgICAgICAgbG9hZFJvdXRlKCk7XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICByZXNldENvbnRleHRGaWx0ZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaWx0ZXIoZmlsdGVyc01hcFtkZWZhdWx0RmlsdGVyXSk7XHJcbiAgICAgICAgICAgICAgICAgIHByb2plY3RGaWx0ZXJzVk0uc2V0Q29udGV4dEZpbHRlcnMoWydzY29yZScsICdmaW5pc2hlZCcsICdhbGwnXSk7XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBpc1NlYXJjaCA9IG0ucHJvcChmYWxzZSksXHJcbiAgICAgICAgICAgICAgY2F0ZWdvcnlDb2xsZWN0aW9uID0gbS5wcm9wKFtdKSxcclxuICAgICAgICAgICAgICBjYXRlZ29yeUlkID0gbS5wcm9wKCksXHJcbiAgICAgICAgICAgICAgZmluZENhdGVnb3J5ID0gKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfLmZpbmQoY2F0ZWdvcnlDb2xsZWN0aW9uKCksIGZ1bmN0aW9uKGMpeyByZXR1cm4gYy5pZCA9PT0gcGFyc2VJbnQoaWQpOyB9KTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGNhdGVnb3J5ID0gXy5jb21wb3NlKGZpbmRDYXRlZ29yeSwgY2F0ZWdvcnlJZCksXHJcbiAgICAgICAgICAgICAgbG9hZENhdGVnb3JpZXMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBtb2RlbHMuY2F0ZWdvcnkuZ2V0UGFnZVdpdGhUb2tlbihmaWx0ZXJzKHt9KS5vcmRlcih7bmFtZTogJ2FzYyd9KS5wYXJhbWV0ZXJzKCkpLnRoZW4oY2F0ZWdvcnlDb2xsZWN0aW9uKTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIC8vIEZha2UgcHJvamVjdHMgb2JqZWN0IHRvIGJlIGFibGUgdG8gcmVuZGVyIHBhZ2Ugd2hpbGUgbG9hZGRpbmcgKGluIGNhc2Ugb2Ygc2VhcmNoKVxyXG4gICAgICAgICAgICAgIHByb2plY3RzID0gbS5wcm9wKHtjb2xsZWN0aW9uOiBtLnByb3AoW10pLCBpc0xvYWRpbmc6ICgpID0+IHsgcmV0dXJuIHRydWU7IH0sIGlzTGFzdFBhZ2U6ICgpID0+IHsgcmV0dXJuIHRydWU7IH19KSxcclxuICAgICAgICAgICAgICBsb2FkUm91dGUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gd2luZG93LmxvY2F0aW9uLmhhc2gubWF0Y2goL1xcIyhbXlxcL10qKVxcLz8oXFxkKyk/LyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdCA9IHJvdXRlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZVsyXSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluZENhdGVnb3J5KHJvdXRlWzJdKSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckZyb21Sb3V0ZSA9ICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBieUNhdGVnb3J5ID0gZmlsdGVycyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlfaWQ6ICdlcSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3V0ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlWzFdICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyc01hcFtyb3V0ZVsxXV0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGl0bGU6IGNhdC5uYW1lLCBmaWx0ZXI6IGJ5Q2F0ZWdvcnkuY2F0ZWdvcnlfaWQoY2F0LmlkKX07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgPSBmaWx0ZXJGcm9tUm91dGUoKSB8fCBjdXJyZW50RmlsdGVyKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaCA9IGgucGFyYW1CeU5hbWUoJ3BnX3NlYXJjaCcpLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoUHJvamVjdHMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihtb2RlbHMucHJvamVjdFNlYXJjaC5wb3N0T3B0aW9ucyh7cXVlcnk6IHNlYXJjaH0pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UgPSB7IC8vIFdlIGJ1aWxkIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGludGVyZmFjZSBhcyBwYWdpbmF0aW9uVk1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBtLnByb3AoW10pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTG9hZGluZzogbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0xhc3RQYWdlOiAoKSA9PiB7IHJldHVybiB0cnVlOyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQYWdlOiAoKSA9PiB7IHJldHVybiBmYWxzZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwubG9hZCgpLnRoZW4ocGFnZS5jb2xsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFByb2plY3RzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFnZXMgPSBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy5wcm9qZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBfLmV4dGVuZCh7fSwgY3VycmVudEZpbHRlcigpLmZpbHRlci5wYXJhbWV0ZXJzKCksIGZpbHRlci5maWx0ZXIub3JkZXIoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5fZm9yX2NvbnRyaWJ1dGlvbnM6ICdkZXNjJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZV9vcmRlcjogJ2FzYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICdkZXNjJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogJ2Rlc2MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsZWRnZWQ6ICdkZXNjJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkucGFyYW1ldGVycygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VzLmZpcnN0UGFnZShwYXJhbWV0ZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWdlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRGaW5pc2hlZFByb2plY3RzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFnZXMgPSBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKG1vZGVscy5maW5pc2hlZFByb2plY3QpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVycyA9IF8uZXh0ZW5kKHt9LCBjdXJyZW50RmlsdGVyKCkuZmlsdGVyLnBhcmFtZXRlcnMoKSwgZmlsdGVyLmZpbHRlci5vcmRlcih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVfb3JkZXI6ICdhc2MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAnZGVzYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxlZGdlZDogJ2Rlc2MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5wYXJhbWV0ZXJzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZXMuZmlyc3RQYWdlKHBhcmFtZXRlcnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWdlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGlmIChfLmlzU3RyaW5nKHNlYXJjaCkgJiYgc2VhcmNoLmxlbmd0aCA+IDAgJiYgcm91dGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGlzU2VhcmNoKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGUoJ0J1c2NhICcgKyBzZWFyY2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMoc2VhcmNoUHJvamVjdHMoKSk7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudEZpbHRlcigpLmtleU5hbWUgPT09ICdmaW5pc2hlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGlzU2VhcmNoKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RzKGxvYWRGaW5pc2hlZFByb2plY3RzKCkpO1xyXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaXNTZWFyY2goZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGUoZmlsdGVyLnRpdGxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc051bGwocm91dGUpICYmIHJvdXRlWzFdID09ICdmaW5pc2hlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cyhsb2FkRmluaXNoZWRQcm9qZWN0cygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMobG9hZFByb2plY3RzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGNhdGVnb3J5SWQoY2F0ICYmIGNhdC5pZCk7XHJcbiAgICAgICAgICAgICAgICAgIHJvdXRlIHx8IChfLmlzU3RyaW5nKHNlYXJjaCkgJiYgc2VhcmNoLmxlbmd0aCA+IDApID8gdG9nZ2xlQ2F0ZWdvcmllcyhmYWxzZSkgOiB0b2dnbGVDYXRlZ29yaWVzKHRydWUpO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgdGl0bGUgPSBtLnByb3AoKSxcclxuICAgICAgICAgICAgICB0b2dnbGVDYXRlZ29yaWVzID0gaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKTtcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc2V0Q29udGV4dEZpbHRlcigpO1xyXG4gICAgICAgICAgICBsb2FkUm91dGUoKTtcclxuICAgICAgICAgICAgbS5yZWRyYXcoKTtcclxuICAgICAgICB9LCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWwgbG9hZHNcclxuICAgICAgICByZXNldENvbnRleHRGaWx0ZXIoKTtcclxuICAgICAgICBtb2RlbHMucHJvamVjdC5wYWdlU2l6ZSg5KTtcclxuICAgICAgICBsb2FkQ2F0ZWdvcmllcygpLnRoZW4obG9hZFJvdXRlKTtcclxuXHJcbiAgICAgICAgaWYgKCFjdXJyZW50RmlsdGVyKCkpIHtcclxuICAgICAgICAgICAgY3VycmVudEZpbHRlcihmaWx0ZXJzTWFwW2RlZmF1bHRGaWx0ZXJdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3J5Q29sbGVjdGlvbixcclxuICAgICAgICAgICAgY2hhbmdlRmlsdGVyOiBjaGFuZ2VGaWx0ZXIsXHJcbiAgICAgICAgICAgIGZhbGxiYWNrRmlsdGVyOiBmYWxsYmFja0ZpbHRlcixcclxuICAgICAgICAgICAgcHJvamVjdHM6IHByb2plY3RzLFxyXG4gICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXHJcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgZmlsdGVyc01hcDogZmlsdGVyc01hcCxcclxuICAgICAgICAgICAgY3VycmVudEZpbHRlcjogY3VycmVudEZpbHRlcixcclxuICAgICAgICAgICAgcHJvamVjdEZpbHRlcnNWTTogcHJvamVjdEZpbHRlcnNWTSxcclxuICAgICAgICAgICAgdG9nZ2xlQ2F0ZWdvcmllczogdG9nZ2xlQ2F0ZWdvcmllcyxcclxuICAgICAgICAgICAgaXNTZWFyY2g6IGlzU2VhcmNoXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBpZiAoIWN0cmwucHJvamVjdHMoKS5pc0xvYWRpbmcoKSAmJiBfLmlzRW1wdHkoY3RybC5wcm9qZWN0cygpLmNvbGxlY3Rpb24oKSkgJiYgIWN0cmwuaXNTZWFyY2goKSl7XHJcbiAgICAgICAgICAgIGN0cmwucHJvamVjdEZpbHRlcnNWTS5yZW1vdmVDb250ZXh0RmlsdGVyKGN0cmwuY3VycmVudEZpbHRlcigpKTtcclxuICAgICAgICAgICAgY3RybC5jaGFuZ2VGaWx0ZXIoY3RybC5mYWxsYmFja0ZpbHRlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLmhlcm8tc2VhcmNoJywgW1xyXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQoc2VhcmNoKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lci51LW1hcmdpbmJvdHRvbS0xMCcsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS00MCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYSNleHBsb3JlLW9wZW4ubGluay1oaWRkZW4td2hpdGUuZm9udHdlaWdodC1saWdodC5mb250c2l6ZS1sYXJnZXJbaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIl0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge29uY2xpY2s6ICgpID0+IGN0cmwudG9nZ2xlQ2F0ZWdvcmllcy50b2dnbGUoKX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ0V4cGxvcmUgcHJvamV0b3MgaW5jcsOtdmVpcyAnLCBtKGBzcGFuI2V4cGxvcmUtYnRuLmZhLmZhLWFuZ2xlLWRvd24ke2N0cmwudG9nZ2xlQ2F0ZWdvcmllcygpID8gJy5vcGVuZWQnIDogJyd9YCwgJycpXSlcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICBtKGAjY2F0ZWdvcmllcy5jYXRlZ29yeS1zbGlkZXIke2N0cmwudG9nZ2xlQ2F0ZWdvcmllcygpID8gJy5vcGVuZWQnIDogJyd9YCwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tMzAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLmNhdGVnb3JpZXMoKSwgKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KGNhdGVnb3J5QnV0dG9uLCB7Y2F0ZWdvcnk6IGNhdGVnb3J5fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgXSksXHJcblxyXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTkudy1jb2wtc21hbGwtOC53LWNvbC10aW55LTgnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyJywgY3RybC50aXRsZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtNC53LWNvbC10aW55LTQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWN0cmwuaXNTZWFyY2goKSA/IG0oJ3NlbGVjdC53LXNlbGVjdC50ZXh0LWZpZWxkLnBvc2l0aXZlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5jaGFuZ2VGaWx0ZXIpfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChjdHJsLnByb2plY3RGaWx0ZXJzVk0uZ2V0Q29udGV4dEZpbHRlcnMoKSwgKHBhZ2VGaWx0ZXIsIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0cyA9IGN0cmwucHJvamVjdHMoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQgPSBjdHJsLmN1cnJlbnRGaWx0ZXIoKSA9PSBwYWdlRmlsdGVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oYG9wdGlvblt2YWx1ZT1cIiR7cGFnZUZpbHRlci5rZXlOYW1lfVwiXWAse3NlbGVjdGVkOiBpc1NlbGVjdGVkfSxwYWdlRmlsdGVyLm5pY2VuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgXSksXHJcblxyXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24nLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBfLm1hcChjdHJsLnByb2plY3RzKCkuY29sbGVjdGlvbigpLCAocHJvamVjdCwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FyZFR5cGUgPSAnc21hbGwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9ICdjdHJzZV9leHBsb3JlJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC5jdXJyZW50RmlsdGVyKCkua2V5TmFtZSA9PT0gJ3Njb3JlJyAmJiAhY3RybC5pc1NlYXJjaCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkVHlwZSA9ICdiaWcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSAnY3Ryc2VfZXhwbG9yZV9mZWF0dXJlZF9iaWcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaWR4ID09PSAxIHx8IGlkeCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkVHlwZSA9ICdtZWRpdW0nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSAnY3Ryc2VfZXhwbG9yZV9mZWF0dXJlZF9tZWRpdW0nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9ICdjdHJzZV9leHBsb3JlX2ZlYXR1cmVkJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KHByb2plY3RDYXJkLCB7cHJvamVjdDogcHJvamVjdCwgcmVmOiByZWYsIHR5cGU6IGNhcmRUeXBlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5wcm9qZWN0cygpLmlzTG9hZGluZygpID8gaC5sb2FkZXIoKSA6IF8uaXNFbXB0eShjdHJsLnByb2plY3RzKCkuY29sbGVjdGlvbigpKSA/IG0oJy5mb250c2l6ZS1iYXNlLnctY29sLnctY29sLTEyJywgJ05lbmh1bSBwcm9qZXRvIHBhcmEgbW9zdHJhci4nKSA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pLFxyXG5cclxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi51LW1hcmdpbmJvdHRvbS04MCcsIFtcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXB1c2gtNScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAoY3RybC5wcm9qZWN0cygpLmlzTGFzdFBhZ2UoKSB8fCBjdHJsLnByb2plY3RzKCkuaXNMb2FkaW5nKCkgfHwgXy5pc0VtcHR5KGN0cmwucHJvamVjdHMoKS5jb2xsZWN0aW9uKCkpKSA/ICcnIDogbSgnYS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnlbaHJlZj1cXCcjbG9hZE1vcmVcXCddJywge29uY2xpY2s6ICgpID0+IHsgY3RybC5wcm9qZWN0cygpLm5leHRQYWdlKCk7IHJldHVybiBmYWxzZTsgfX0sICdDYXJyZWdhciBtYWlzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pLFxyXG5cclxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLWxhcmdlLmJlZm9yZS1mb290ZXIudS1tYXJnaW50b3AtODAuYmctZ3JheS5kaXZpZGVyJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtdGV4dC1jZW50ZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnUtbWFyZ2luYm90dG9tLTIwLmljb24taGVybycsIHtzcmM6ICdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2ZjQ0MTRkM2EwZmNjMDEyNGVjOWEyNF9pY29uLWxhdW5jaC1leHBsb3JlLnBuZyd9KSxcclxuICAgICAgICAgICAgICAgICAgICBtKCdoMi5mb250c2l6ZS1sYXJnZXIudS1tYXJnaW5ib3R0b20tNjAnLCAnTGFuY2Ugc3VhIGNhbXBhbmhhIG5vIENhdGFyc2UhJyksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1wdXNoLTQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tbGFyZ2UnLCB7aHJlZjogJy9zdGFydD9yZWY9Y3Ryc2VfZXhwbG9yZSd9LCAnQXByZW5kYSBjb21vJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdHNFeHBsb3JlO1xyXG4iLCJpbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcclxuXHJcbmNvbnN0IGhvbWVWTSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGkxOG5TdGFydCA9IEkxOG4udHJhbnNsYXRpb25zW0kxOG4uY3VycmVudExvY2FsZSgpXS5wcm9qZWN0cy5ob21lLFxyXG4gICAgICAgIGJhbm5lcnMgPSBpMThuU3RhcnQuYmFubmVycztcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJhbm5lcnM6IGJhbm5lcnNcclxuICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBob21lVk07XHJcbiIsIi8qKlxyXG4gKiB3aW5kb3cuYy5TbGlkZXIgY29tcG9uZW50XHJcbiAqIEJ1aWxkIGEgc2xpZGVyIGZyb20gYW55IGFycmF5IG9mIG1pdGhyaWwgZWxlbWVudHNcclxuICpcclxuICogRXhhbXBsZSBvZiB1c2U6XHJcbiAqIHZpZXc6ICgpID0+IHtcclxuICogICAgIC4uLlxyXG4gKiAgICAgbS5jb21wb25lbnQoYy5TbGlkZXIsIHtcclxuICogICAgICAgICBzbGlkZXM6IFttKCdzbGlkZTEnKSwgbSgnc2xpZGUyJyksIG0oJ3NsaWRlMycpXSxcclxuICogICAgICAgICB0aXRsZTogJ08gcXVlIGVzdMOjbyBkaXplbmRvIHBvciBhw60uLi4nXHJcbiAqICAgICB9KVxyXG4gKiAgICAgLi4uXHJcbiAqIH1cclxuICovXHJcblxyXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcblxyXG5jb25zdCBzbGlkZXIgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBsZXQgaW50ZXJ2YWw7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRTbGlkZUlkeCA9IG0ucHJvcCgwKSxcclxuICAgICAgICAgICAgdHJhbnNsYXRpb25TaXplID0gbS5wcm9wKDE2MDApLFxyXG4gICAgICAgICAgICBzbGlkZXJUaW1lID0gYXJncy5zbGlkZXJUaW1lIHx8IDY1MDAsXHJcbiAgICAgICAgICAgIGRlY3JlbWVudFNsaWRlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkU2xpZGVJZHgoKSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFNsaWRlSWR4KHNlbGVjdGVkU2xpZGVJZHgoKSAtIDEpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFNsaWRlSWR4KGFyZ3Muc2xpZGVzLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbmNyZW1lbnRTbGlkZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZFNsaWRlSWR4KCkgPCAoYXJncy5zbGlkZXMubGVuZ3RoIC0gMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFNsaWRlSWR4KHNlbGVjdGVkU2xpZGVJZHgoKSArIDEpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFNsaWRlSWR4KDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGFydFNsaWRlclRpbWVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50U2xpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgfSwgc2xpZGVyVGltZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlc2V0U2xpZGVyVGltZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0U2xpZGVyVGltZXIoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29uZmlnID0gKGVsLCBpc0luaXRpYWxpemVkLCBjb250ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uU2l6ZShNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApKTtcclxuICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm9udW5sb2FkID0gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHN0YXJ0U2xpZGVyVGltZXIoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29uZmlnOiBjb25maWcsXHJcbiAgICAgICAgICAgIHNlbGVjdGVkU2xpZGVJZHg6IHNlbGVjdGVkU2xpZGVJZHgsXHJcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uU2l6ZTogdHJhbnNsYXRpb25TaXplLFxyXG4gICAgICAgICAgICBkZWNyZW1lbnRTbGlkZTogZGVjcmVtZW50U2xpZGUsXHJcbiAgICAgICAgICAgIGluY3JlbWVudFNsaWRlOiBpbmNyZW1lbnRTbGlkZSxcclxuICAgICAgICAgICAgcmVzZXRTbGlkZXJUaW1lcjogcmVzZXRTbGlkZXJUaW1lclxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3Qgc2xpZGVDbGFzcyA9IGFyZ3Muc2xpZGVDbGFzcyB8fCAnJyxcclxuICAgICAgICAgICAgd3JhcHBlckNsYXNzID0gYXJncy53cmFwcGVyQ2xhc3MgfHwgJycsXHJcbiAgICAgICAgICAgIGVmZmVjdCA9IGFyZ3MuZWZmZWN0IHx8ICdzbGlkZScsXHJcbiAgICAgICAgICAgIHNsaWRlckNsaWNrID0gKGZuLCBwYXJhbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZm4ocGFyYW0pO1xyXG4gICAgICAgICAgICAgICAgY3RybC5yZXNldFNsaWRlclRpbWVyKCk7XHJcbiAgICAgICAgICAgICAgICBhcmdzLm9uY2hhbmdlICYmIGFyZ3Mub25jaGFuZ2UoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZWZmZWN0U3R5bGUgPSAoaWR4LCB0cmFuc2xhdGVTdHIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlRnggPSBgdHJhbnNmb3JtOiAke3RyYW5zbGF0ZVN0cn07IC13ZWJraXQtdHJhbnNmb3JtOiAke3RyYW5zbGF0ZVN0cn07IC1tcy10cmFuc2Zvcm06JHt0cmFuc2xhdGVTdHJ9YCxcclxuICAgICAgICAgICAgICAgICAgICBmYWRlRnggPSBpZHggPT09IGN0cmwuc2VsZWN0ZWRTbGlkZUlkeCgpID8gJ29wYWNpdHk6IDE7IHZpc2liaWxpdHk6IHZpc2libGU7JyA6ICdvcGFjaXR5OiAwOyB2aXNpYmlsaXR5OiBoaWRkZW47JztcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWZmZWN0ID09PSAnZmFkZScgPyBmYWRlRnggOiBzbGlkZUZ4O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gbShgLnctc2xpZGVyLiR7d3JhcHBlckNsYXNzfWAsIHtcclxuICAgICAgICAgICAgY29uZmlnOiBjdHJsLmNvbmZpZ1xyXG4gICAgICAgIH0sIFtcclxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlcicsIGFyZ3MudGl0bGUpLFxyXG4gICAgICAgICAgICBtKCcudy1zbGlkZXItbWFzaycsIFtcclxuICAgICAgICAgICAgICAgIF8ubWFwKGFyZ3Muc2xpZGVzLCAoc2xpZGUsIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc2xhdGVWYWx1ZSA9IChpZHggLSBjdHJsLnNlbGVjdGVkU2xpZGVJZHgoKSkgKiBjdHJsLnRyYW5zbGF0aW9uU2l6ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVTdHIgPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVWYWx1ZX1weCwgMCwgMClgO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbShgLnNsaWRlLnctc2xpZGUuJHtzbGlkZUNsYXNzfWAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGAke2VmZmVjdFN0eWxlKGlkeCwgdHJhbnNsYXRlU3RyKX0gJHtzbGlkZS5jdXN0b21TdHlsZX1gXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgudy1jb2wtcHVzaC0yJywgc2xpZGUuY29udGVudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIG0oJyNzbGlkZS1wcmV2Lnctc2xpZGVyLWFycm93LWxlZnQudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsIHtcclxuICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiBzbGlkZXJDbGljayhjdHJsLmRlY3JlbWVudFNsaWRlKVxyXG4gICAgICAgICAgICAgICAgfSxbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctaWNvbi1zbGlkZXItbGVmdC5mYS5mYS1sZy5mYS1hbmdsZS1sZWZ0LmZvbnRjb2xvci10ZXJjaWFyeScpXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIG0oJyNzbGlkZS1uZXh0Lnctc2xpZGVyLWFycm93LXJpZ2h0LnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogKCkgPT4gc2xpZGVyQ2xpY2soY3RybC5pbmNyZW1lbnRTbGlkZSlcclxuICAgICAgICAgICAgICAgIH0sW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWljb24tc2xpZGVyLXJpZ2h0LmZhLmZhLWxnLmZhLWFuZ2xlLXJpZ2h0LmZvbnRjb2xvci10ZXJjaWFyeScpXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LXNsaWRlci1uYXYudy1zbGlkZXItbmF2LWludmVydC53LXJvdW5kLnNsaWRlLW5hdicsIF8oYXJncy5zbGlkZXMubGVuZ3RoKS50aW1lcygoaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oYC5zbGlkZS1idWxsZXQudy1zbGlkZXItZG90JHtjdHJsLnNlbGVjdGVkU2xpZGVJZHgoKSA9PT0gaWR4ID8gJy53LWFjdGl2ZScgOiAnJ31gLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ICgpID0+IHNsaWRlckNsaWNrKGN0cmwuc2VsZWN0ZWRTbGlkZUlkeCwgaWR4KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzbGlkZXI7XHJcbiIsIi8qKlxyXG4gKiB3aW5kb3cuYy5Db250cmlidXRpb25BY3Rpdml0aWVzIGNvbXBvbmVudFxyXG4gKiBSZW5kZXIgYSBjb21wb25lbnQgdGhhdCBwYXNzIG9uIGNvbmZpcm1lZCBjb250cmlidXRpb25zIGluIDI0aG91cnMgaW50ZXJ2YWxcclxuICpcclxuICpcclxuICogRXhhbXBsZSBvZiB1c2U6XHJcbiAqIHZpZXc6ICgpID0+IHtcclxuICogICAgIC4uLlxyXG4gKiAgICAgbS5jb21wb25lbnQoYy5Db250cmlidXRpb25BY3Rpdml0aWVzKVxyXG4gKiAgICAgLi4uXHJcbiAqIH1cclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5jb25zdCBjb250cmlidXRpb25BY3Rpdml0aWVzID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgbGV0IGludGVydmFsO1xyXG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBtLnByb3AoW10pLFxyXG4gICAgICAgICAgICAgIHJlc291cmNlID0gbS5wcm9wKCksXHJcbiAgICAgICAgICAgICAgY29sbGVjdGlvbkluZGV4ID0gbS5wcm9wKDApLFxyXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25TaXplID0gbS5wcm9wKCksXHJcbiAgICAgICAgICAgICAgY29sbGVjdGlvbkwgPSBwb3N0Z3Jlc3QubG9hZGVyKFxyXG4gICAgICAgICAgICAgICAgICBtb2RlbHMuY29udHJpYnV0aW9uQWN0aXZpdHkuZ2V0UGFnZU9wdGlvbnMoKSksXHJcbiAgICAgICAgICAgICAgbmV4dFJlc291cmNlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoKGNvbGxlY3Rpb25JbmRleCgpICsgMSkgPiBjb2xsZWN0aW9uU2l6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSW5kZXgoMCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JbmRleChjb2xsZWN0aW9uSW5kZXgoKSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICByZXNvdXJjZShjb2xsZWN0aW9uKClbY29sbGVjdGlvbkluZGV4KCldKTtcclxuICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIHN0YXJ0Q29uZmlnID0gKGVsLCBpc2luaXRpYWxpemVkLCBjb250ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQub251bmxvYWQgPSAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIHN0YXJ0VGltZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGludGVydmFsID0gc2V0SW50ZXJ2YWwobmV4dFJlc291cmNlLCAxNTAwMCk7XHJcbiAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29sbGVjdGlvbkwubG9hZCgpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgY29sbGVjdGlvbihkYXRhKTtcclxuICAgICAgICAgICAgY29sbGVjdGlvblNpemUoZGF0YS5sZW5ndGgpO1xyXG4gICAgICAgICAgICByZXNvdXJjZShfLmZpcnN0KGRhdGEpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc3RhcnRUaW1lcigpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uLFxyXG4gICAgICAgICAgICBjb2xsZWN0aW9uTDogY29sbGVjdGlvbkwsXHJcbiAgICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZSxcclxuICAgICAgICAgICAgY29sbGVjdGlvblNpemU6IGNvbGxlY3Rpb25TaXplXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBpZiAoIWN0cmwuY29sbGVjdGlvbkwoKSAmJiAhXy5pc1VuZGVmaW5lZChjdHJsLnJlc291cmNlKCkpICYmIChjdHJsLmNvbGxlY3Rpb25TaXplKCkgfHwgMCkgPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCByZXNvdXJjZSA9IGN0cmwucmVzb3VyY2UoKSxcclxuICAgICAgICAgICAgICAgIGVsYXBzZWQgPSBoLnRyYW5zbGF0ZWRUaW1lKHJlc291cmNlLmVsYXBzZWRfdGltZSksXHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2xpbmsgPSBgaHR0cHM6Ly9jYXRhcnNlLm1lLyR7cmVzb3VyY2UucGVybWFsaW5rfT9yZWY9Y3Ryc2VfaG9tZV9hY3Rpdml0aWVzYDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBtKCcudy1zZWN0aW9uLnNlY3Rpb24uYmctYmFja3MtY2Fycm9zZWwnLCB7Y29uZmlnOiBjdHJsLnN0YXJ0Q29uZmlnfSwgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyLnUtdGV4dC1jZW50ZXIuZm9udGNvbG9yLW5lZ2F0aXZlJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIGBow6EgJHtwYXJzZUludChlbGFwc2VkLnRvdGFsKX0gJHtlbGFwc2VkLnVuaXR9Li4uYCksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY2xlYXJmaXgudy1pbmxpbmUtYmxvY2sudS1tYXJnaW5ib3R0b20tMTAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EnLCB7aHJlZjogcHJvamVjdF9saW5rfSwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLWF1dGhvci51LXJvdW5kJywge3NyYzogcmVzb3VyY2UudGh1bWJuYWlsLCB3aWR0aDogODB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy50aHVtYi1hdXRob3IudS1yb3VuZCcsIHtzcmM6ICdodHRwczovL2Rha3MyazNhNGliMnouY2xvdWRmcm9udC5uZXQvNTRiNDQwYjg1NjA4ZTNmNDM4OWRiMzg3LzU2ZDY0NmY3NzEwYTcxMjYzMzhiNDZmZl9sb2dvLWNhdGFyc2UtYmFjay1jYXJyb3NlbC5wbmcnfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EnLCB7aHJlZjogcHJvamVjdF9saW5rfSwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW1nLnRodW1iLWF1dGhvci51LXJvdW5kJywge3NyYzogcmVzb3VyY2UucHJvamVjdF90aHVtYm5haWwsIHdpZHRoOiA4MCwgc3R5bGU6ICdtYXJnaW4tcmlnaHQ6IDA7J30pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZScsIGAke3Jlc291cmNlLm5hbWV9IGFwb2lvdWApLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW4td2hpdGUnLCB7aHJlZjogcHJvamVjdF9saW5rfSwgcmVzb3VyY2UucHJvamVjdF9uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbSgnZGl2Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29udHJpYnV0aW9uQWN0aXZpdGllcztcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgcHJvamVjdEZpbHRlcnMgZnJvbSAnLi4vdm1zL3Byb2plY3QtZmlsdGVycy12bSc7XHJcbmltcG9ydCBob21lVk0gZnJvbSAnLi4vdm1zL2hvbWUtdm0nO1xyXG5pbXBvcnQgc2xpZGVyIGZyb20gJy4uL2Mvc2xpZGVyJztcclxuaW1wb3J0IHByb2plY3RSb3cgZnJvbSAnLi4vYy9wcm9qZWN0LXJvdyc7XHJcbmltcG9ydCBjb250cmlidXRpb25BY3Rpdml0aWVzIGZyb20gJy4uL2MvY29udHJpYnV0aW9uLWFjdGl2aXRpZXMnO1xyXG5cclxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAncHJvamVjdHMuaG9tZScpO1xyXG5cclxuY29uc3QgcHJvamVjdHNIb21lID0ge1xyXG4gICAgY29udHJvbGxlcigpIHtcclxuICAgICAgICBsZXQgc2FtcGxlNiA9IF8ucGFydGlhbChfLnNhbXBsZSwgXywgNiksXHJcbiAgICAgICAgICAgIGxvYWRlciA9IHBvc3RncmVzdC5sb2FkZXIsXHJcbiAgICAgICAgICAgIHByb2plY3QgPSBtb2RlbHMucHJvamVjdCxcclxuICAgICAgICAgICAgZmlsdGVycyA9IHByb2plY3RGaWx0ZXJzKCkuZmlsdGVycyxcclxuICAgICAgICAgICAgdm0gPSBob21lVk0oKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBfLm1hcChbJ3Njb3JlJ10sIChuYW1lKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGYgPSBmaWx0ZXJzW25hbWVdLFxyXG4gICAgICAgICAgICAgICAgICBjTG9hZGVyID0gbG9hZGVyKHByb2plY3QuZ2V0UGFnZU9wdGlvbnMoXy5leHRlbmQoe30sIHtvcmRlcjogJ3Njb3JlLmRlc2MnfSwgZi5maWx0ZXIucGFyYW1ldGVycygpKSkpLFxyXG4gICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uID0gbS5wcm9wKFtdKTtcclxuXHJcbiAgICAgICAgICAgIGNMb2FkZXIubG9hZCgpLnRoZW4oXy5jb21wb3NlKGNvbGxlY3Rpb24sIHNhbXBsZTYpKTtcclxuXHJcbiAgICAgICAgICAgIHByb2plY3QucGFnZVNpemUoMjApO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBmLnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgaGFzaDogbmFtZSxcclxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICBsb2FkZXI6IGNMb2FkZXJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29sbGVjdGlvbnM6IGNvbGxlY3Rpb25zLFxyXG4gICAgICAgICAgICBzbGlkZXNDb250ZW50OiB2bS5iYW5uZXJzXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwpIHtcclxuICAgICAgICBjb25zdCBzbGlkZXMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBfLm1hcChjdHJsLnNsaWRlc0NvbnRlbnQsIChzbGlkZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VzdG9tU3R5bGUgPSBgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7c2xpZGUuaW1hZ2V9KTtgO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IG0oJy53LWNvbnRhaW5lci51LXRleHQtY2VudGVyJyxbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdoMS5mb250Y29sb3ItbmVnYXRpdmUuZm9udHNpemUtbWVnYWp1bWJvLnUtbWFyZ2luYm90dG9tLTIwJywgc2xpZGUudGl0bGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdoMi5mb250Y29sb3ItbmVnYXRpdmUuZm9udHNpemUtbGFyZ2UnLCBtLnRydXN0KHNsaWRlLnN1YnRpdGxlKSlcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCdhLmJ0bi5idG4tbGFyZ2UudS1tYXJnaW5ib3R0b20tMTAuYnRuLWlubGluZScse2hyZWY6IHNsaWRlLmxpbmt9LCBzbGlkZS5jdGEpXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tU3R5bGU6IGN1c3RvbVN0eWxlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtLmNvbXBvbmVudChzbGlkZXIsIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlczogc2xpZGVzKCksXHJcbiAgICAgICAgICAgICAgICBlZmZlY3Q6ICdmYWRlJyxcclxuICAgICAgICAgICAgICAgIHNsaWRlQ2xhc3M6ICdoZXJvLXNsaWRlIHN0YXJ0JyxcclxuICAgICAgICAgICAgICAgIHdyYXBwZXJDbGFzczogJ2hlcm8tZnVsbCBoZXJvLWZ1bGwtc2xpZGUnLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVyVGltZTogMTAwMDBcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIF8ubWFwKGN0cmwuY29sbGVjdGlvbnMsIChjb2xsZWN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQocHJvamVjdFJvdywge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IEkxOG4udCgncm93X3RpdGxlJywgSTE4blNjb3BlKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlZjogYGhvbWVfJHtjb2xsZWN0aW9uLmhhc2h9YFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBtLmNvbXBvbmVudChjb250cmlidXRpb25BY3Rpdml0aWVzKVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0c0hvbWU7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IHByb2plY3RTaGFyZUJveCA9IHtcclxuICAgIGNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZGlzcGxheUVtYmVkOiBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbSgnLnBvcC1zaGFyZScsIHtcclxuICAgICAgICAgICAgc3R5bGU6ICdkaXNwbGF5OiBibG9jazsnXHJcbiAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICBtKCcudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0udy1jbGVhcmZpeCcsIFtcclxuICAgICAgICAgICAgICAgIG0oJ2EuYnRuLmJ0bi1zbWFsbC5idG4tdGVyY2lhcnkuYnRuLWlubGluZS51LXJpZ2h0Jywge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGFyZ3MuZGlzcGxheVNoYXJlQm94LnRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgfSwgJ0ZlY2hhcicpLFxyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMzAnLCAnQ29tcGFydGlsaGUgZXN0ZSBwcm9qZXRvJylcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJy53LXdpZGdldC53LXdpZGdldC1mYWNlYm9vay53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LnNoYXJlLWJsb2NrJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnaWZyYW1lW2FsbG93dHJhbnNwYXJlbmN5PVwidHJ1ZVwiXVt3aWR0aD1cIjE1MHB4XCJdW2hlaWdodD1cIjIycHhcIl1bZnJhbWVib3JkZXI9XCIwXCJdW3Njcm9sbGluZz1cIm5vXCJdW3NyYz1cImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS92Mi4wL3BsdWdpbnMvc2hhcmVfYnV0dG9uLnBocD9hcHBfaWQ9MTczNzQ3MDQyNjYxNDkxJmNoYW5uZWw9aHR0cHMlM0ElMkYlMkZzLXN0YXRpYy5hay5mYWNlYm9vay5jb20lMkZjb25uZWN0JTJGeGRfYXJiaXRlciUyRjQ0T3dLNzR1MEllLmpzJTNGdmVyc2lvbiUzRDQxJTIzY2IlM0RmN2Q5YjkwMGMlMjZkb21haW4lM0R3d3cuY2F0YXJzZS5tZSUyNm9yaWdpbiUzRGh0dHBzJTI1M0ElMjUyRiUyNTJGd3d3LmNhdGFyc2UubWUlMjUyRmY0YjNhZDBjOCUyNnJlbGF0aW9uJTNEcGFyZW50LnBhcmVudCZjb250YWluZXJfd2lkdGg9MCZocmVmPWh0dHBzJTNBJTJGJTJGd3d3LmNhdGFyc2UubWUlMkZwdCUyRicgKyBhcmdzLnByb2plY3QoKS5wZXJtYWxpbmsgKyAnJTNGcmVmJTNEZmFjZWJvb2slMjZ1dG1fc291cmNlJTNEZmFjZWJvb2suY29tJTI2dXRtX21lZGl1bSUzRHNvY2lhbCUyNnV0bV9jYW1wYWlnbiUzRHByb2plY3Rfc2hhcmUmbGF5b3V0PWJ1dHRvbl9jb3VudCZsb2NhbGU9cHRfQlImc2RrPWpvZXlcIl0nKVxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgbSgnLnctd2lkZ2V0Lnctd2lkZ2V0LXR3aXR0ZXIudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5zaGFyZS1ibG9jaycsIFtcclxuICAgICAgICAgICAgICAgIG0oJ2lmcmFtZVthbGxvd3RyYW5zcGFyZW5jeT1cInRydWVcIl1bd2lkdGg9XCIxMjBweFwiXVtoZWlnaHQ9XCIyMnB4XCJdW2ZyYW1lYm9yZGVyPVwiMFwiXVtzY3JvbGxpbmc9XCJub1wiXVtzcmM9XCIvL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMvdHdlZXRfYnV0dG9uLjhkMDA3ZGRmYzE4NGU2Nzc2YmU3NmZlOWU1ZTUyZDY5LmVuLmh0bWwjXz0xNDQyNDI1OTg0OTM2JmNvdW50PWhvcml6b250YWwmZG50PWZhbHNlJmlkPXR3aXR0ZXItd2lkZ2V0LTEmbGFuZz1lbiZvcmlnaW5hbF9yZWZlcmVyPWh0dHBzJTNBJTJGJTJGd3d3LmNhdGFyc2UubWUlMkZwdCUyRicgKyBhcmdzLnByb2plY3QoKS5wZXJtYWxpbmsgKyAnJnNpemU9bSZ0ZXh0PUNvbmZpcmElMjBvJTIwcHJvamV0byUyMCcgKyBhcmdzLnByb2plY3QoKS5uYW1lICsgJyUyMG5vJTIwJTQwY2F0YXJzZSZ0eXBlPXNoYXJlJnVybD1odHRwcyUzQSUyRiUyRnd3dy5jYXRhcnNlLm1lJTJGcHQlMkYnICsgYXJncy5wcm9qZWN0KCkucGVybWFsaW5rICsgJyUzRnJlZiUzRHR3aXR0ZXIlMjZ1dG1fc291cmNlJTNEdHdpdHRlci5jb20lMjZ1dG1fbWVkaXVtJTNEc29jaWFsJTI2dXRtX2NhbXBhaWduJTNEcHJvamVjdF9zaGFyZSZ2aWE9Y2F0YXJzZVwiXScpXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBtKCdhLnctaGlkZGVuLXNtYWxsLndpZGdldC1lbWJlZC53LWhpZGRlbi10aW55LmZvbnRzaXplLXNtYWxsLmxpbmstaGlkZGVuLmZvbnRjb2xvci1zZWNvbmRhcnlbaHJlZj1cImpzOnZvaWQoMCk7XCJdJywge1xyXG4gICAgICAgICAgICAgICAgb25jbGljazogY3RybC5kaXNwbGF5RW1iZWQudG9nZ2xlXHJcbiAgICAgICAgICAgIH0sICc8IGVtYmVkID4nKSwgKGN0cmwuZGlzcGxheUVtYmVkKCkgPyBtKCcuZW1iZWQtZXhwYW5kZWQudS1tYXJnaW50b3AtMzAnLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0yMCcsICdJbnNpcmEgdW0gd2lkZ2V0IGVtIHNldSBzaXRlJyksXHJcbiAgICAgICAgICAgICAgICBtKCcudy1mb3JtJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0LnctaW5wdXRbdHlwZT1cInRleHRcIl1bdmFsdWU9XCI8aWZyYW1lIGZyYW1lYm9yZGVyPVwiMFwiIGhlaWdodD1cIjMxNHB4XCIgc3JjPVwiaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS9wdC9wcm9qZWN0cy8nICsgYXJncy5wcm9qZWN0KCkuaWQgKyAnL2VtYmVkXCIgd2lkdGg9XCIzMDBweFwiIHNjcm9sbGluZz1cIm5vXCI+PC9pZnJhbWU+XCJdJylcclxuICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgbSgnLmNhcmQtZW1iZWQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnaWZyYW1lW2ZyYW1lYm9yZGVyPVwiMFwiXVtoZWlnaHQ9XCIzNTBweFwiXVtzcmM9XCIvcHJvamVjdHMvJyArIGFyZ3MucHJvamVjdCgpLmlkICsgJy9lbWJlZFwiXVt3aWR0aD1cIjMwMHB4XCJdW3Njcm9sbGluZz1cIm5vXCJdJylcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pIDogJycpLFxyXG4gICAgICAgICAgICBtKCdhLnctaGlkZGVuLW1haW4udy1oaWRkZW4tbWVkaXVtLmJ0bi5idG4tbWVkaXVtLmJ0bi1mYi51LW1hcmdpbmJvdHRvbS0yMFtocmVmPVwiaHR0cDovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/dT1odHRwczovL3d3dy5jYXRhcnNlLm1lLycgKyBhcmdzLnByb2plY3QoKS5wZXJtYWxpbmsgKyAnJTNGcmVmJTNEZmFjZWJvb2slMjZ1dG1fc291cmNlJTNEZmFjZWJvb2suY29tJTI2dXRtX21lZGl1bSUzRHNvY2lhbCUyNnV0bV9jYW1wYWlnbiUzRHByb2plY3Rfc2hhcmUmdGl0bGU9JyArIGFyZ3MucHJvamVjdCgpLm5hbWUgKyAnXCJdW3RhcmdldD1cIl9ibGFua1wiXScsIFtcclxuICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtZmFjZWJvb2snKSwgJyBDb21wYXJ0aWxoZSdcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJ2Eudy1oaWRkZW4tbWFpbi53LWhpZGRlbi1tZWRpdW0uYnRuLmJ0bi1tZWRpdW0uYnRuLXR3ZWV0LnUtbWFyZ2luYm90dG9tLTIwW2hyZWY9XCJodHRwOi8vdHdpdHRlci5jb20vP3N0YXR1cz1BY2FiZWklMjBkZSUyMGFwb2lhciUyMG8lMjBwcm9qZXRvJTIwJyArIGFyZ3MucHJvamVjdCgpLm5hbWUgKyAnJTIwaHR0cHM6Ly93d3cuY2F0YXJzZS5tZS8nICsgYXJncy5wcm9qZWN0KCkucGVybWFsaW5rICsgJyUzRnJlZiUzRHR3aXR0ZXIlMjZ1dG1fc291cmNlJTNEdHdpdHRlci5jb20lMjZ1dG1fbWVkaXVtJTNEc29jaWFsJTI2dXRtX2NhbXBhaWduJTNEcHJvamVjdF9zaGFyZVwiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLCBbXHJcbiAgICAgICAgICAgICAgICBtKCdzcGFuLmZhLmZhLXR3aXR0ZXInKSwgJyBUd2VldCdcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0U2hhcmVCb3g7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcbmltcG9ydCBwcm9qZWN0U2hhcmVCb3ggZnJvbSAnLi9wcm9qZWN0LXNoYXJlLWJveCc7XHJcblxyXG5jb25zdCBwcm9qZWN0SGlnaGxpZ2h0ID0ge1xyXG4gICAgY29udHJvbGxlcigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkaXNwbGF5U2hhcmVCb3g6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSlcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QsXHJcbiAgICAgICAgICAgIGFkZHJlc3MgPSBwcm9qZWN0KCkuYWRkcmVzcyB8fCB7c3RhdGVfYWNyb255bTogJycsIGNpdHk6ICcnfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJyNwcm9qZWN0LWhpZ2hsaWdodCcsIFtcclxuICAgICAgICAgICAgKHByb2plY3QoKS52aWRlb19lbWJlZF91cmwgPyBtKCcudy1lbWJlZC53LXZpZGVvLnByb2plY3QtdmlkZW8nLCB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZTogJ21pbi1oZWlnaHQ6IDI0MHB4OydcclxuICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgbSgnaWZyYW1lLmVtYmVkbHktZW1iZWRbaXRlbXByb3A9XCJ2aWRlb1wiXVtzcmM9XCInICsgcHJvamVjdCgpLnZpZGVvX2VtYmVkX3VybCArICdcIl1bZnJhbWVib3JkZXI9XCIwXCJdW2FsbG93RnVsbFNjcmVlbl0nKVxyXG4gICAgICAgICAgICBdKSA6IG0oJy5wcm9qZWN0LWltYWdlJywge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6ICdiYWNrZ3JvdW5kLWltYWdlOnVybCgnICsgcHJvamVjdCgpLm9yaWdpbmFsX2ltYWdlICsgJyk7J1xyXG4gICAgICAgICAgICB9KSksXHJcbiAgICAgICAgICAgIG0oJy5wcm9qZWN0LWJsdXJiJywgcHJvamVjdCgpLmhlYWRsaW5lKSxcclxuICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXItc21hbGwtb25seS51LW1hcmdpbmJvdHRvbS0zMCcsIFtcclxuICAgICAgICAgICAgICAgICghXy5pc051bGwoYWRkcmVzcykgP1xyXG4gICAgICAgICAgICAgICAgIG0oYGEuYnRuLmJ0bi1pbmxpbmUuYnRuLXNtYWxsLmJ0bi10cmFuc3BhcmVudC5saW5rLWhpZGRlbi1saWdodC51LW1hcmdpbmJvdHRvbS0xMFtocmVmPVwiL3B0L2V4cGxvcmU/cGdfc2VhcmNoPSR7YWRkcmVzcy5zdGF0ZV9hY3JvbnltfVwiXWAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9sb2NhdGlvbl9saW5rJyxsYmw6IGFkZHJlc3MuY2l0eSArICcgJyArIGFkZHJlc3Muc3RhdGVfYWNyb255bSxwcm9qZWN0OiBwcm9qZWN0KCl9KVxyXG4gICAgICAgICAgICAgICAgIH0sIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mYS5mYS1tYXAtbWFya2VyJyksIGAgJHthZGRyZXNzLmNpdHl9LCAke2FkZHJlc3Muc3RhdGVfYWNyb255bX1gXHJcbiAgICAgICAgICAgICAgICAgICAgXSkgOiAnJ1xyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgIG0oYGEuYnRuLmJ0bi1pbmxpbmUuYnRuLXNtYWxsLmJ0bi10cmFuc3BhcmVudC5saW5rLWhpZGRlbi1saWdodFtocmVmPVwiL3B0L2V4cGxvcmUjYnlfY2F0ZWdvcnlfaWQvJHtwcm9qZWN0KCkuY2F0ZWdvcnlfaWR9XCJdYCwge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3ZpZXcnLGFjdDogJ3Byb2plY3RfY2F0ZWdvcnlfbGluaycsbGJsOiBwcm9qZWN0KCkuY2F0ZWdvcnlfbmFtZSxwcm9qZWN0OiBwcm9qZWN0KCl9KVxyXG4gICAgICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtdGFnJyksICcgJyxcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0KCkuY2F0ZWdvcnlfbmFtZVxyXG4gICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICBtKCdidXR0b24jc2hhcmUtYm94LmJ0bi5idG4tc21hbGwuYnRuLXRlcmNpYXJ5LmJ0bi1pbmxpbmUnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC5kaXNwbGF5U2hhcmVCb3gudG9nZ2xlXHJcbiAgICAgICAgICAgICAgICB9LCAnQ29tcGFydGlsaGFyJyksIChjdHJsLmRpc3BsYXlTaGFyZUJveCgpID8gbS5jb21wb25lbnQocHJvamVjdFNoYXJlQm94LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdCxcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5U2hhcmVCb3g6IGN0cmwuZGlzcGxheVNoYXJlQm94XHJcbiAgICAgICAgICAgICAgICB9KSA6ICcnKVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdEhpZ2hsaWdodDtcclxuIiwiLyoqXHJcbiAqIHdpbmRvdy5jLlByb2plY3RNb2RlIGNvbXBvbmVudFxyXG4gKiBBIHNpbXBsZSBjb21wb25lbnQgdGhhdCBkaXNwbGF5cyBhIGJhZGdlIHdpdGggdGhlIGN1cnJlbnQgcHJvamVjdCBtb2RlXHJcbiAqIHRvZ2V0aGVyIHdpdGggYSBkZXNjcmlwdGlvbiBvZiB0aGUgbW9kZSwgc2hvd24gaW5zaWRlIGEgdG9vbHRpcC5cclxuICogSXQgcmVjZWl2ZXMgYSBwcm9qZWN0IGFzIHJlc291cmNlXHJcbiAqXHJcbiAqIEV4YW1wbGU6XHJcbiAqICB2aWV3OiB7XHJcbiAqICAgICAgcmV0dXJuIG0uY29tcG9uZW50KGMuUHJvamVjdE1vZGUsIHtwcm9qZWN0OiBwcm9qZWN0fSlcclxuICogIH1cclxuICovXHJcblxyXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgdG9vbHRpcCBmcm9tICcuL3Rvb2x0aXAnO1xyXG5cclxuY29uc3QgcHJvamVjdE1vZGUgPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0KCksXHJcbiAgICAgICAgICAgIG1vZGUgPSBwcm9qZWN0Lm1vZGUsXHJcbiAgICAgICAgICAgIG1vZGVJbWdTcmMgPSAobW9kZSA9PT0gJ2FvbicpID8gJy9hc3NldHMvYW9uLWJhZGdlLnBuZycgOiAnL2Fzc2V0cy9mbGV4LWJhZGdlLnBuZycsXHJcbiAgICAgICAgICAgIG1vZGVUaXRsZSA9IChtb2RlID09PSAnYW9uJykgPyAnQ2FtcGFuaGEgVHVkby1vdS1uYWRhICcgOiAnQ2FtcGFuaGEgRmxleMOtdmVsICcsXHJcbiAgICAgICAgICAgIGdvYWwgPSAoXy5pc051bGwocHJvamVjdC5nb2FsKSA/ICduw6NvIGRlZmluaWRhJyA6IGguZm9ybWF0TnVtYmVyKHByb2plY3QuZ29hbCkpLFxyXG4gICAgICAgICAgICBidWlsZFRvb2x0aXAgPSAoZWwpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudCh0b29sdGlwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWw6IGVsLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IChtb2RlID09PSAnYW9uJykgPyBgU29tZW50ZSByZWNlYmVyw6Egb3MgcmVjdXJzb3Mgc2UgYXRpbmdpciBvdSB1bHRyYXBhc3NhciBhIG1ldGEgYXTDqSBvIGRpYSAke2gubW9tZW50aWZ5KHByb2plY3Quem9uZV9leHBpcmVzX2F0LCAnREQvTU0vWVlZWScpfS5gIDogJ08gcmVhbGl6YWRvciByZWNlYmVyw6EgdG9kb3Mgb3MgcmVjdXJzb3MgcXVhbmRvIGVuY2VycmFyIGEgY2FtcGFuaGEsIG1lc21vIHF1ZSBuw6NvIHRlbmhhIGF0aW5naWRvIGVzdGEgbWV0YS4nLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyODBcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gbShgIyR7bW9kZX0udy1yb3dgLCBbXHJcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXNtYWxsLTIudy1jb2wtdGlueS0yJywgW1xyXG4gICAgICAgICAgICAgICAgIV8uaXNFbXB0eShwcm9qZWN0KSA/IG0oYGltZ1tzcmM9XCIke21vZGVJbWdTcmN9XCJdW3dpZHRoPSczMCddYCkgOiAnJ1xyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnctY29sLXNtYWxsLTEwLnctY29sLXRpbnktMTAnLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS5mb250d2VpZ2h0LXNlbWlib2xkJywgJ01ldGEgUiQgJyArIGguc2VsZk9yRW1wdHkoZ29hbCwgJy0tJykpLFxyXG4gICAgICAgICAgICAgICAgbSgnLnctaW5saW5lLWJsb2NrLmZvbnRzaXplLXNtYWxsZXN0Ll93LWlubGluZS1ibG9jaycsIFtcclxuICAgICAgICAgICAgICAgICAgICAhXy5pc0VtcHR5KHByb2plY3QpID8gbW9kZVRpdGxlIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRUb29sdGlwKCdzcGFuLnctaW5saW5lLWJsb2NrLnRvb2x0aXAtd3JhcHBlci5mYS5mYS1xdWVzdGlvbi1jaXJjbGUuZm9udGNvbG9yLXNlY29uZGFyeScpXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdE1vZGU7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IHBvcE5vdGlmaWNhdGlvbiA9IHtcclxuICAgIGNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZGlzcGxheU5vdGlmaWNhdGlvbjogaC50b2dnbGVQcm9wKHRydWUsIGZhbHNlKVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIChjdHJsLmRpc3BsYXlOb3RpZmljYXRpb24oKSA/IG0oJy5mbGFzaC53LWNsZWFyZml4LmNhcmQuY2FyZC1ub3RpZmljYXRpb24udS1yYWRpdXMuemluZGV4LTIwJywgW1xyXG4gICAgICAgICAgICBtKCdpbWcuaWNvbi1jbG9zZVtzcmM9XCIvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL3gucG5nXCJdW3dpZHRoPVwiMTJcIl1bYWx0PVwiZmVjaGFyXCJdJywge1xyXG4gICAgICAgICAgICAgICAgb25jbGljazogY3RybC5kaXNwbGF5Tm90aWZpY2F0aW9uLnRvZ2dsZVxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsJywgYXJncy5tZXNzYWdlKVxyXG4gICAgICAgIF0pIDogbSgnc3BhbicpKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBvcE5vdGlmaWNhdGlvbjtcclxuIiwiLyoqXHJcbiAqIHdpbmRvdy5jLlByb2plY3RSZW1pbmRlciBjb21wb25lbnRcclxuICogQSBjb21wb25lbnQgdGhhdCBkaXNwbGF5cyBhIGNsaWNrYWJsZSBwcm9qZWN0IHJlbWluZGVyIGVsZW1lbnQuXHJcbiAqIFRoZSBjb21wb25lbnQgY2FuIGJlIG9mIHR3byB0eXBlczogYSAnbGluaycgb3IgYSAnYnV0dG9uJ1xyXG4gKlxyXG4gKiBFeGFtcGxlOlxyXG4gKiAgdmlldzoge1xyXG4gKiAgICAgIHJldHVybiBtLmNvbXBvbmVudChjLlByb2plY3RSZW1pbmRlciwge3Byb2plY3Q6IHByb2plY3QsIHR5cGU6ICdidXR0b24nfSlcclxuICogIH1cclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgcG9wTm90aWZpY2F0aW9uIGZyb20gJy4vcG9wLW5vdGlmaWNhdGlvbic7XHJcblxyXG5jb25zdCBwcm9qZWN0UmVtaW5kZXIgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBsZXQgbCA9IG0ucHJvcChmYWxzZSk7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCxcclxuICAgICAgICAgICAgZmlsdGVyVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcclxuICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6ICdlcSdcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHN0b3JlUmVtaW5kZXJOYW1lID0gJ3JlbWluZF8nICsgcHJvamVjdCgpLmlkLFxyXG4gICAgICAgICAgICBwb3BOb3RpZmljYXRpb24gPSBtLnByb3AoZmFsc2UpLFxyXG4gICAgICAgICAgICBzdWJtaXRSZW1pbmRlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghaC5nZXRVc2VyKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBoLnN0b3JlQWN0aW9uKHN0b3JlUmVtaW5kZXJOYW1lLCBzdWJtaXRSZW1pbmRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgubmF2aWdhdGVUb0RldmlzZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGxvYWRlck9wdHMgPSBwcm9qZWN0KCkuaW5fcmVtaW5kZXIgPyBtb2RlbHMucHJvamVjdFJlbWluZGVyLmRlbGV0ZU9wdGlvbnMoZmlsdGVyVk0ucGFyYW1ldGVycygpKSA6IG1vZGVscy5wcm9qZWN0UmVtaW5kZXIucG9zdE9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6IHByb2plY3QoKS5pZFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBsID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihsb2FkZXJPcHRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsLmxvYWQoKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0KCkuaW5fcmVtaW5kZXIgPSAhcHJvamVjdCgpLmluX3JlbWluZGVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvamVjdCgpLmluX3JlbWluZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcE5vdGlmaWNhdGlvbih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3BOb3RpZmljYXRpb24oZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wTm90aWZpY2F0aW9uKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaC5jYWxsU3RvcmVkQWN0aW9uKHN0b3JlUmVtaW5kZXJOYW1lLCBzdWJtaXRSZW1pbmRlcik7XHJcbiAgICAgICAgZmlsdGVyVk0ucHJvamVjdF9pZChwcm9qZWN0KCkuaWQpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsOiBsLFxyXG4gICAgICAgICAgICBzdWJtaXRSZW1pbmRlcjogc3VibWl0UmVtaW5kZXIsXHJcbiAgICAgICAgICAgIHBvcE5vdGlmaWNhdGlvbjogcG9wTm90aWZpY2F0aW9uXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBtYWluQ2xhc3MgPSAoYXJncy50eXBlID09PSAnYnV0dG9uJykgPyAnJyA6ICcudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0zMCcsXHJcbiAgICAgICAgICAgIGJ1dHRvbkNsYXNzID0gKGFyZ3MudHlwZSA9PT0gJ2J1dHRvbicpID8gJ3ctYnV0dG9uIGJ0biBidG4tdGVyY2lhcnkgYnRuLW5vLWJvcmRlcicgOiAnYnRuLWxpbmsgbGluay1oaWRkZW4gZm9udHNpemUtc21hbGwnLFxyXG4gICAgICAgICAgICBoaWRlVGV4dE9uTW9iaWxlID0gYXJncy5oaWRlVGV4dE9uTW9iaWxlIHx8IGZhbHNlLFxyXG4gICAgICAgICAgICBwcm9qZWN0ID0gYXJncy5wcm9qZWN0O1xyXG5cclxuICAgICAgICByZXR1cm4gbShgI3Byb2plY3QtcmVtaW5kZXIke21haW5DbGFzc31gLCBbXHJcbiAgICAgICAgICAgIG0oYGJ1dHRvbltjbGFzcz1cIiR7YnV0dG9uQ2xhc3N9ICR7KHByb2plY3QoKS5pbl9yZW1pbmRlciA/ICdsaW5rLWhpZGRlbi1zdWNjZXNzJyA6ICdmb250Y29sb3Itc2Vjb25kYXJ5Jyl9IGZvbnR3ZWlnaHQtc2VtaWJvbGRcIl1gLCB7XHJcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2Zsb2F0aW5ncmVtaW5kZXJfY2xpY2snLCBwcm9qZWN0OiBwcm9qZWN0KCl9LCBjdHJsLnN1Ym1pdFJlbWluZGVyKVxyXG4gICAgICAgICAgICB9LCBbXHJcbiAgICAgICAgICAgICAgICAoY3RybC5sKCkgPyAnYWd1YXJkZSAuLi4nIDogbSgnc3Bhbi5mYS5mYS1jbG9jay1vJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oYHNwYW4ke2hpZGVUZXh0T25Nb2JpbGUgPyAnLnctaGlkZGVuLW1lZGl1bScgOiAnJ31gLCBwcm9qZWN0KCkuaW5fcmVtaW5kZXIgPyAnIExlbWJyZXRlIGF0aXZvJyA6ICcgTGVtYnJhci1tZScpXHJcbiAgICAgICAgICAgICAgICBdKSlcclxuICAgICAgICAgICAgXSksIChjdHJsLnBvcE5vdGlmaWNhdGlvbigpID8gbS5jb21wb25lbnQocG9wTm90aWZpY2F0aW9uLCB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnT2shIFZhbW9zIHRlIG1hbmRhciB1bSBsZW1icmV0ZSBwb3IgZS1tYWlsIDQ4IGhvcmFzIGFudGVzIGRvIGZpbSBkYSBjYW1wYW5oYSdcclxuICAgICAgICAgICAgfSkgOiAnJylcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3RSZW1pbmRlcjtcclxuIiwiLyoqXHJcbiAqIHdpbmRvdy5jLk93bmVyTWVzc2FnZUNvbnRlbnQgY29tcG9uZW50XHJcbiAqIFJlbmRlciBwcm9qZWN0IG93bmVyIGNvbnRhY3QgZm9ybVxyXG4gKlxyXG4gKi9cclxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuY29uc3Qgb3duZXJNZXNzYWdlQ29udGVudCA9IHtcclxuICAgIGNvbnRyb2xsZXIoYXJncykge1xyXG4gICAgICAgIGxldCBsID0gbS5wcm9wKGZhbHNlKSxcclxuICAgICAgICAgICAgc2VuZFN1Y2Nlc3MgPSBtLnByb3AoZmFsc2UpLFxyXG4gICAgICAgICAgICBzdWJtaXREaXNhYmxlZCA9IG0ucHJvcChmYWxzZSksXHJcbiAgICAgICAgICAgIC8vc2V0cyBkZWZhdWx0IHZhbHVlcyB3aGVuIHVzZXIgaXMgbm90IGxvZ2dlZCBpblxyXG4gICAgICAgICAgICB1c2VyID0gaC5nZXRVc2VyKCkgfHwge25hbWU6ICcnLCBlbWFpbDogJyd9LFxyXG4gICAgICAgICAgICBmcm9tX25hbWUgPSBtLnByb3AodXNlci5uYW1lKSxcclxuICAgICAgICAgICAgZnJvbV9lbWFpbCA9IG0ucHJvcCh1c2VyLmVtYWlsKSxcclxuICAgICAgICAgICAgY29udGVudCA9IG0ucHJvcCgnJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbmRNZXNzYWdlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAobCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3VibWl0RGlzYWJsZWQodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgbG9hZGVyT3B0cyA9IG1vZGVscy5kaXJlY3RNZXNzYWdlLnBvc3RPcHRpb25zKHtcclxuICAgICAgICAgICAgICAgIGZyb21fbmFtZTogZnJvbV9uYW1lKCksXHJcbiAgICAgICAgICAgICAgICBmcm9tX2VtYWlsOiBmcm9tX2VtYWlsKCksXHJcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiBoLmdldFVzZXIoKS51c2VyX2lkLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogY29udGVudCgpLFxyXG4gICAgICAgICAgICAgICAgcHJvamVjdF9pZDogaC5nZXRDdXJyZW50UHJvamVjdCgpLnByb2plY3RfaWQsXHJcbiAgICAgICAgICAgICAgICB0b191c2VyX2lkOiBoLmdldEN1cnJlbnRQcm9qZWN0KCkucHJvamVjdF91c2VyX2lkXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbCA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obG9hZGVyT3B0cyk7XHJcblxyXG4gICAgICAgICAgICBsLmxvYWQoKS50aGVuKHNlbmRTdWNjZXNzKHRydWUpKTtcclxuXHJcbiAgICAgICAgICAgIHN1Ym1pdERpc2FibGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNlbmRNZXNzYWdlOiBzZW5kTWVzc2FnZSxcclxuICAgICAgICAgICAgc3VibWl0RGlzYWJsZWQ6IHN1Ym1pdERpc2FibGVkLFxyXG4gICAgICAgICAgICBzZW5kU3VjY2Vzczogc2VuZFN1Y2Nlc3MsXHJcbiAgICAgICAgICAgIHVzZXJEZXRhaWxzOiBhcmdzLFxyXG4gICAgICAgICAgICBmcm9tX25hbWU6IGZyb21fbmFtZSxcclxuICAgICAgICAgICAgZnJvbV9lbWFpbDogZnJvbV9lbWFpbCxcclxuICAgICAgICAgICAgY29udGVudDogY29udGVudCxcclxuICAgICAgICAgICAgbDogbFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3Qgc3VjY2Vzc01lc3NhZ2UgPSBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgIG0oJy5mYS5mYS1jaGVjay1jaXJjbGUuZmEtNXgudGV4dC1zdWNjZXNzLnUtbWFyZ2luYm90dG9tLTQwJyksXHJcbiAgICAgICAgICAgICAgICBtKCdwLmZvbnRzaXplLWxhcmdlJywgYFN1YSBtZW5zYWdlbSBmb2kgZW52aWFkYSBjb20gc3VjZXNzbyBwYXJhICR7Xy5maXJzdChjdHJsLnVzZXJEZXRhaWxzKCkpLm5hbWV9LiBWb2PDqiB2YWkgcmVjZWJlciB1bWEgY8OzcGlhIG5vIHNldSBlbWFpbCBlIHBvZGUgc2VndWlyIGEgY29udmVyc2EgcG9yIGzDoSFgKVxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgY29udGFjdEZvcm0gPSBbXHJcbiAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZm9ybScsIHtvbnN1Ym1pdDogaC52YWxpZGF0ZSgpLnN1Ym1pdChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogY3RybC5mcm9tX25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZTogJ3RleHQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6IGN0cmwuZnJvbV9lbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlOiAnZW1haWwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6IGN0cmwuY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlOiAndGV4dCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXSwgY3RybC5zZW5kTWVzc2FnZSl9LCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1zdWItY29sJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdsYWJlbC5mb250c2l6ZS1zbWFsbGVyJywgJ1NldSBub21lJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGlucHV0LnctaW5wdXQudGV4dC1maWVsZFt2YWx1ZT0nJHtjdHJsLmZyb21fbmFtZSgpfSddW3R5cGU9J3RleHQnXVtyZXF1aXJlZD0ncmVxdWlyZWQnXWAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuZnJvbV9uYW1lKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBoLnZhbGlkYXRlKCkuaGFzRXJyb3IoY3RybC5mcm9tX25hbWUpID8gJ2Vycm9yJyA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2xhYmVsLmZvbnRzaXplLXNtYWxsZXInLCAnU2V1IGVtYWlsJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGlucHV0LnctaW5wdXQudGV4dC1maWVsZFt2YWx1ZT0nJHtjdHJsLmZyb21fZW1haWwoKX0nXVt0eXBlPSd0ZXh0J11bcmVxdWlyZWQ9J3JlcXVpcmVkJ11gLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLmZyb21fZW1haWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGgudmFsaWRhdGUoKS5oYXNFcnJvcihjdHJsLmZyb21fZW1haWwpID8gJ2Vycm9yJyA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWwnLCAnTWVuc2FnZW0nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3RleHRhcmVhLnctaW5wdXQudGV4dC1maWVsZC5oZWlnaHQtc21hbGxbcmVxdWlyZWQ9XFwncmVxdWlyZWRcXCddJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwuY29udGVudCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGgudmFsaWRhdGUoKS5oYXNFcnJvcihjdHJsLmNvbnRlbnQpID8gJ2Vycm9yJyA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0xMC5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3ItdGVyY2lhcnknLCAnVm9jw6ogcmVjZWJlcsOhIHVtYSBjw7NwaWEgZGVzdGEgbWVuc2FnZW0gZW0gc2V1IGVtYWlsLicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgaC52YWxpZGF0aW9uRXJyb3JzKCkubGVuZ3RoID8gXy5tYXAoaC52YWxpZGF0aW9uRXJyb3JzKCksIGVycm9ycyA9PiBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LnRleHQtZXJyb3InLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZmEuZmEtZXhjbGFtYXRpb24tdHJpYW5nbGUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCAke2Vycm9ycy5tZXNzYWdlfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2JyJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSkgOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5tb2RhbC1kaWFsb2ctbmF2LWJvdHRvbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtcHVzaC0zJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjdHJsLmwoKSA/IG0oJ2lucHV0LnctYnV0dG9uLmJ0bi5idG4tbGFyZ2VbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIkVudmlhciBtZW5zYWdlbVwiXScsIHtkaXNhYmxlZDogY3RybC5zdWJtaXREaXNhYmxlZCgpfSkgOiBoLmxvYWRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgbSgnLm1vZGFsLWRpYWxvZy1oZWFkZXInLFxyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtdGV4dC1jZW50ZXInLCAnRW52aWFyIG1lbnNhZ2VtJylcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgY3RybC5zZW5kU3VjY2VzcygpID8gc3VjY2Vzc01lc3NhZ2UgOiBjb250YWN0Rm9ybVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgb3duZXJNZXNzYWdlQ29udGVudDtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IG93bmVyTWVzc2FnZUNvbnRlbnQgZnJvbSAnLi9vd25lci1tZXNzYWdlLWNvbnRlbnQnO1xyXG5pbXBvcnQgbW9kYWxCb3ggZnJvbSAnLi9tb2RhbC1ib3gnO1xyXG5cclxuY29uc3QgcHJvamVjdFVzZXJDYXJkID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIHtkaXNwbGF5TW9kYWw6IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSl9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3Q7XHJcbiAgICAgICAgY29uc3QgY29udGFjdE1vZGFsQyA9IFtvd25lck1lc3NhZ2VDb250ZW50LCBhcmdzLnVzZXJEZXRhaWxzXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJyN1c2VyLWNhcmQnLCBfLm1hcChhcmdzLnVzZXJEZXRhaWxzKCksICh1c2VyRGV0YWlsKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBtKCcudS1tYXJnaW5ib3R0b20tMzAudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgW1xyXG4gICAgICAgICAgICAgICAgKGN0cmwuZGlzcGxheU1vZGFsKCkgPyBtLmNvbXBvbmVudChtb2RhbEJveCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlNb2RhbDogY3RybC5kaXNwbGF5TW9kYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGFjdE1vZGFsQ1xyXG4gICAgICAgICAgICAgICAgfSkgOiAnJyksXHJcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy50aHVtYi51LW1hcmdpbmJvdHRvbS0zMC51LXJvdW5kW3dpZHRoPVwiMTAwXCJdW2l0ZW1wcm9wPVwiaW1hZ2VcIl1bc3JjPVwiJyArIHVzZXJEZXRhaWwucHJvZmlsZV9pbWdfdGh1bWJuYWlsICsgJ1wiXScpXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC5saW5rLWhpZGRlbi5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2luYm90dG9tLTEwLmxpbmVoZWlnaHQtdGlnaHRbaXRlbXByb3A9XCJuYW1lXCJdJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWhpZGRlbltocmVmPVwiL3VzZXJzLycgKyB1c2VyRGV0YWlsLmlkICsgJ1wiXScse29uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3ZpZXcnLGFjdDogJ3Byb2plY3RfY3JlYXRvcl9saW5rJyxsYmw6IHVzZXJEZXRhaWwuaWQscHJvamVjdDogcHJvamVjdCgpfSl9LCB1c2VyRGV0YWlsLm5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLnBsdXJhbGl6ZSh1c2VyRGV0YWlsLnRvdGFsX3B1Ymxpc2hlZF9wcm9qZWN0cywgJyBjcmlhZG8nLCAnIGNyaWFkb3MnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOyZuYnNwO3wmbmJzcDsmbmJzcDsnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgucGx1cmFsaXplKHVzZXJEZXRhaWwudG90YWxfY29udHJpYnV0ZWRfcHJvamVjdHMsICcgYXBvaWFkbycsICcgYXBvaWFkb3MnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgndWwudy1oaWRkZW4tdGlueS53LWhpZGRlbi1zbWFsbC53LWxpc3QtdW5zdHlsZWQuZm9udHNpemUtc21hbGxlci5mb250d2VpZ2h0LXNlbWlib2xkLnUtbWFyZ2ludG9wLTIwLnUtbWFyZ2luYm90dG9tLTIwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFfLmlzRW1wdHkodXNlckRldGFpbC5mYWNlYm9va19saW5rKSA/IG0oJ2xpJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW5baXRlbXByb3A9XCJ1cmxcIl1baHJlZj1cIicgKyB1c2VyRGV0YWlsLmZhY2Vib29rX2xpbmsgKyAnXCJdW3RhcmdldD1cIl9ibGFua1wiXScse29uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3ZpZXcnLGFjdDogJ3Byb2plY3RfY3JlYXRvcl9mYicsbGJsOiB1c2VyRGV0YWlsLmZhY2Vib29rX2xpbmsscHJvamVjdDogcHJvamVjdCgpfSl9LCAnUGVyZmlsIG5vIEZhY2Vib29rJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogJycpLCAoIV8uaXNFbXB0eSh1c2VyRGV0YWlsLnR3aXR0ZXJfdXNlcm5hbWUpID8gbSgnbGknLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5saW5rLWhpZGRlbltpdGVtcHJvcD1cInVybFwiXVtocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS8nICsgdXNlckRldGFpbC50d2l0dGVyX3VzZXJuYW1lICsgJ1wiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLHtvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2NyZWF0b3JfdHdpdHRlcicsbGJsOiB1c2VyRGV0YWlsLnR3aXR0ZXJfdXNlcm5hbWUscHJvamVjdDogcHJvamVjdCgpfSl9LCAnUGVyZmlsIG5vIFR3aXR0ZXInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkgOiAnJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcCh1c2VyRGV0YWlsLmxpbmtzLCAobGluaykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWRMaW5rID0gaC5wYXJzZVVybChsaW5rKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICghXy5pc0VtcHR5KHBhcnNlZExpbmsuaG9zdG5hbWUpID8gbSgnbGknLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2EubGluay1oaWRkZW5baXRlbXByb3A9XCJ1cmxcIl1baHJlZj1cIicgKyBsaW5rICsgJ1wiXVt0YXJnZXQ9XCJfYmxhbmtcIl0nLHtvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2NyZWF0b3Jfb3RoZXJsaW5rcycsbGJsOiBsaW5rLHByb2plY3Q6IHByb2plY3QoKX0pfSwgcGFyc2VkTGluay5ob3N0bmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoIV8uaXNFbXB0eSh1c2VyRGV0YWlsKSA/IFttKCdhLnctYnV0dG9uLmJ0bi5idG4tdGVyY2lhcnkuYnRuLXNtYWxsLmJ0bi1pbmxpbmVbaHJlZj1cXCdqYXZhc2NyaXB0OnZvaWQoMCk7XFwnXScse29uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3ZpZXcnLGFjdDogJ3Byb2plY3RfY3JlYXRvcl9zZW5kbXNnJyxsYmw6IHVzZXJEZXRhaWwuaWQscHJvamVjdDogcHJvamVjdCgpfSwgY3RybC5kaXNwbGF5TW9kYWwudG9nZ2xlKX0sICdFbnZpYXIgbWVuc2FnZW0nKV0gOiAnJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHJvamVjdCgpLmlzX2FkbWluX3JvbGUgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdwJywgdXNlckRldGFpbC5lbWFpbCkgOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3RVc2VyQ2FyZDtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcbmltcG9ydCBwcm9qZWN0TW9kZSBmcm9tICcuL3Byb2plY3QtbW9kZSc7XHJcbmltcG9ydCBwcm9qZWN0UmVtaW5kZXIgZnJvbSAnLi9wcm9qZWN0LXJlbWluZGVyJztcclxuaW1wb3J0IHByb2plY3RVc2VyQ2FyZCBmcm9tICcuL3Byb2plY3QtdXNlci1jYXJkJztcclxuXHJcbmNvbnN0IEkxOG5TY29wZSA9IF8ucGFydGlhbChoLmkxOG5TY29wZSwgJ3Byb2plY3RzLnByb2plY3Rfc2lkZWJhcicpO1xyXG5cclxuY29uc3QgcHJvamVjdFNpZGViYXIgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0LFxyXG4gICAgICAgICAgICBhbmltYXRlUHJvZ3Jlc3MgPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhbmltYXRpb24sIHByb2dyZXNzID0gMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxlZGdlZCA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9ycyA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsZWRnZWRJbmNyZW1lbnQgPSBwcm9qZWN0KCkucGxlZGdlZCAvIHByb2plY3QoKS5wcm9ncmVzcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzSW5jcmVtZW50ID0gcHJvamVjdCgpLnRvdGFsX2NvbnRyaWJ1dG9ycyAvIHByb2plY3QoKS5wcm9ncmVzcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NCYXInKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxlZGdlZEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsZWRnZWQnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udHJpYnV0b3JzJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24gPSBzZXRJbnRlcnZhbChpbmNyZW1lbnRQcm9ncmVzcywgMjgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnRQcm9ncmVzcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzcyA8PSBwYXJzZUludChwcm9qZWN0KCkucHJvZ3Jlc3MpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBgJHtwcm9ncmVzc30lYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGVkZ2VkRWwuaW5uZXJUZXh0ID0gYFIkICR7aC5mb3JtYXROdW1iZXIocGxlZGdlZCl9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmlidXRvcnNFbC5pbm5lclRleHQgPSBgJHtwYXJzZUludChjb250cmlidXRvcnMpfSBwZXNzb2FzYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbm5lclRleHQgPSBgJHtwcm9ncmVzc30lYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGVkZ2VkID0gcGxlZGdlZCArIHBsZWRnZWRJbmNyZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzID0gY29udHJpYnV0b3JzICsgY29udHJpYnV0b3JzSW5jcmVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gcHJvZ3Jlc3MgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMTgwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFuaW1hdGVQcm9ncmVzczogYW5pbWF0ZVByb2dyZXNzXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0LFxyXG4gICAgICAgICAgICBlbGFwc2VkID0gcHJvamVjdCgpLmVsYXBzZWRfdGltZSxcclxuICAgICAgICAgICAgcmVtYWluaW5nID0gcHJvamVjdCgpLnJlbWFpbmluZ190aW1lLFxyXG4gICAgICAgICAgICBkaXNwbGF5Q2FyZENsYXNzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICd3YWl0aW5nX2Z1bmRzJzogJ2NhcmQtd2FpdGluZycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3NmdWwnOiAnY2FyZC1zdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICAnZmFpbGVkJzogJ2NhcmQtZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICdkcmFmdCc6ICdjYXJkLWRhcmsnLFxyXG4gICAgICAgICAgICAgICAgICAgICdpbl9hbmFseXNpcyc6ICdjYXJkLWRhcmsnLFxyXG4gICAgICAgICAgICAgICAgICAgICdhcHByb3ZlZCc6ICdjYXJkLWRhcmsnXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiAoc3RhdGVzW3Byb2plY3QoKS5zdGF0ZV0gPyAnY2FyZCB1LXJhZGl1cyB6aW5kZXgtMTAgJyArIHN0YXRlc1twcm9qZWN0KCkuc3RhdGVdIDogJycpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaXNwbGF5U3RhdHVzVGV4dCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAnYXBwcm92ZWQnOiBJMThuLnQoJ2Rpc3BsYXlfc3RhdHVzLmFwcHJvdmVkJywgSTE4blNjb3BlKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICdvbmxpbmUnOiBoLmV4aXN0eShwcm9qZWN0KCkuem9uZV9leHBpcmVzX2F0KSA/IEkxOG4udCgnZGlzcGxheV9zdGF0dXMub25saW5lJywgSTE4blNjb3BlKHtkYXRlOiBoLm1vbWVudGlmeShwcm9qZWN0KCkuem9uZV9leHBpcmVzX2F0KX0pKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICdmYWlsZWQnOiBJMThuLnQoJ2Rpc3BsYXlfc3RhdHVzLmZhaWxlZCcsIEkxOG5TY29wZSh7ZGF0ZTogaC5tb21lbnRpZnkocHJvamVjdCgpLnpvbmVfZXhwaXJlc19hdCksIGdvYWw6IHByb2plY3QoKS5nb2FsfSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICdyZWplY3RlZCc6IEkxOG4udCgnZGlzcGxheV9zdGF0dXMucmVqZWN0ZWQnLCBJMThuU2NvcGUoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgJ2luX2FuYWx5c2lzJzogSTE4bi50KCdkaXNwbGF5X3N0YXR1cy5pbl9hbmFseXNpcycsIEkxOG5TY29wZSgpKSxcclxuICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzc2Z1bCc6IEkxOG4udCgnZGlzcGxheV9zdGF0dXMuc3VjY2Vzc2Z1bCcsIEkxOG5TY29wZSh7ZGF0ZTogaC5tb21lbnRpZnkocHJvamVjdCgpLnpvbmVfZXhwaXJlc19hdCl9KSksXHJcbiAgICAgICAgICAgICAgICAgICAgJ3dhaXRpbmdfZnVuZHMnOiBJMThuLnQoJ2Rpc3BsYXlfc3RhdHVzLndhaXRpbmdfZnVuZHMnLCBJMThuU2NvcGUoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RyYWZ0JzogSTE4bi50KCdkaXNwbGF5X3N0YXR1cy5kcmFmdCcsIEkxOG5TY29wZSgpKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVzW3Byb2plY3QoKS5zdGF0ZV07XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBtKCcjcHJvamVjdC1zaWRlYmFyLmFzaWRlJywgW1xyXG4gICAgICAgICAgICBtKCcucHJvamVjdC1zdGF0cycsIFtcclxuICAgICAgICAgICAgICAgIG0oJy5wcm9qZWN0LXN0YXRzLWlubmVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5wcm9qZWN0LXN0YXRzLWluZm8nLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS0yMCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJyNwbGVkZ2VkLmZvbnRzaXplLWxhcmdlc3QuZm9udHdlaWdodC1zZW1pYm9sZC51LXRleHQtY2VudGVyLXNtYWxsLW9ubHknLCBgUiQgJHtwcm9qZWN0KCkucGxlZGdlZCA/IGguZm9ybWF0TnVtYmVyKHByb2plY3QoKS5wbGVkZ2VkKSA6ICcwJ31gKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC51LXRleHQtY2VudGVyLXNtYWxsLW9ubHknLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCdjb250cmlidXRvcnNfY2FsbCcsIEkxOG5TY29wZSgpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuI2NvbnRyaWJ1dG9ycy5mb250d2VpZ2h0LXNlbWlib2xkJywgSTE4bi50KCdjb250cmlidXRvcnNfY291bnQnLCBJMThuU2NvcGUoe2NvdW50OiBwcm9qZWN0KCkudG90YWxfY29udHJpYnV0b3JzfSkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIXByb2plY3QoKS5leHBpcmVzX2F0ICYmIGVsYXBzZWQpID8gJyBlbSAnICsgSTE4bi50KCdkYXRldGltZS5kaXN0YW5jZV9pbl93b3Jkcy54XycgKyBlbGFwc2VkLnVuaXQsIHtjb3VudDogZWxhcHNlZC50b3RhbH0sIEkxOG5TY29wZSgpKSA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLm1ldGVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnI3Byb2dyZXNzQmFyLm1ldGVyLWZpbGwnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGAke3Byb2plY3QoKS5wcm9ncmVzc30lYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW50b3AtMTAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNS53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udHdlaWdodC1zZW1pYm9sZC5saW5laGVpZ2h0LXRpZ2h0ZXInLCBgJHtwcm9qZWN0KCkucHJvZ3Jlc3MgPyBwYXJzZUludChwcm9qZWN0KCkucHJvZ3Jlc3MpIDogJzAnfSVgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNy53LWNvbC1zbWFsbC02LnctY29sLXRpbnktNi53LWNsZWFyZml4JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LXJpZ2h0LmZvbnRzaXplLXNtYWxsLmxpbmVoZWlnaHQtdGlnaHRlcicsIHJlbWFpbmluZyAmJiByZW1haW5pbmcudG90YWwgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIHJlbWFpbmluZy50b3RhbCksIEkxOG4udCgncmVtYWluaW5nX3RpbWUuJyArIHJlbWFpbmluZy51bml0LCBJMThuU2NvcGUoe2NvdW50OiByZW1haW5pbmcudG90YWx9KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIDogJycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdE1vZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICwgKHByb2plY3QoKS5vcGVuX2Zvcl9jb250cmlidXRpb25zID8gbSgnYSNjb250cmlidXRlX3Byb2plY3RfZm9ybS5idG4uYnRuLWxhcmdlLnUtbWFyZ2luYm90dG9tLTIwW2hyZWY9XCIvcHJvamVjdHMvJyArIHByb2plY3QoKS5pZCArICcvY29udHJpYnV0aW9ucy9uZXdcIl0nLHtcclxuICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAnY29udHJpYnV0aW9uX2NyZWF0ZScsYWN0OiAnY29udHJpYnV0aW9uX2J1dHRvbl9jbGljaycsIHByb2plY3Q6IHByb2plY3QoKX0pXHJcbiAgICAgICAgICAgICAgICB9LCBJMThuLnQoJ3N1Ym1pdCcsIEkxOG5TY29wZSgpKSkgOiAnJylcclxuICAgICAgICAgICAgICAgICwgKChwcm9qZWN0KCkub3Blbl9mb3JfY29udHJpYnV0aW9ucykgPyBtLmNvbXBvbmVudChwcm9qZWN0UmVtaW5kZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5rJ1xyXG4gICAgICAgICAgICAgICAgfSkgOiAnJyksXHJcbiAgICAgICAgICAgICAgICBtKCdkaXZbY2xhc3M9XCJmb250c2l6ZS1zbWFsbGVyIHUtbWFyZ2luYm90dG9tLTMwICcgKyBkaXNwbGF5Q2FyZENsYXNzKCkgKyAnXCJdJywgZGlzcGxheVN0YXR1c1RleHQoKSlcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJy51c2VyLWMnLCBtLmNvbXBvbmVudChwcm9qZWN0VXNlckNhcmQsIHtcclxuICAgICAgICAgICAgICAgIHVzZXJEZXRhaWxzOiBhcmdzLnVzZXJEZXRhaWxzLFxyXG4gICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdFxyXG4gICAgICAgICAgICB9KSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3RTaWRlYmFyO1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgcHJvamVjdEhpZ2hsaWdodCBmcm9tICcuL3Byb2plY3QtaGlnaGxpZ2h0JztcclxuaW1wb3J0IHByb2plY3RTaWRlYmFyIGZyb20gJy4vcHJvamVjdC1zaWRlYmFyJztcclxuXHJcbmNvbnN0IHByb2plY3RIZWFkZXIgPSB7XHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBsZXQgcHJvamVjdCA9IGFyZ3MucHJvamVjdDtcclxuXHJcbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQocHJvamVjdCgpKSl7XHJcbiAgICAgICAgICAgIHByb2plY3QgPSBtLnByb3Aoe30pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJyNwcm9qZWN0LWhlYWRlcicsIFtcclxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLXByb2R1Y3QuJyArIHByb2plY3QoKS5tb2RlKSxcclxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5wYWdlLWhlYWRlci51LXRleHQtY2VudGVyJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2gxLmZvbnRzaXplLWxhcmdlci5mb250d2VpZ2h0LXNlbWlib2xkLnByb2plY3QtbmFtZVtpdGVtcHJvcD1cIm5hbWVcIl0nLCBoLnNlbGZPckVtcHR5KHByb2plY3QoKS5uYW1lKSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnaDIuZm9udHNpemUtYmFzZS5saW5laGVpZ2h0LWxvb3NlcltpdGVtcHJvcD1cImF1dGhvclwiXScsIChwcm9qZWN0KCkudXNlcikgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb3IgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdCgpLnVzZXIubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIF0gOiAnJylcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnByb2plY3QtbWFpbicsIFtcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cucHJvamVjdC1tYWluJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOC5wcm9qZWN0LWhpZ2hsaWdodCcsIG0uY29tcG9uZW50KHByb2plY3RIaWdobGlnaHQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIG0uY29tcG9uZW50KHByb2plY3RTaWRlYmFyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRldGFpbHM6IGFyZ3MudXNlckRldGFpbHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdEhlYWRlcjtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgcHJvamVjdFJlbWluZGVyIGZyb20gJy4vcHJvamVjdC1yZW1pbmRlcic7XHJcblxyXG5jb25zdCBwcm9qZWN0VGFicyA9IHtcclxuICAgIGNvbnRyb2xsZXIoYXJncykge1xyXG4gICAgICAgIGNvbnN0IGlzRml4ZWQgPSBtLnByb3AoZmFsc2UpLFxyXG4gICAgICAgICAgICBvcmlnaW5hbFBvc2l0aW9uID0gbS5wcm9wKC0xKTtcclxuXHJcbiAgICAgICAgY29uc3QgZml4T25TY3JvbGwgPSAoZWwpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB2aWV3cG9ydE9mZnNldCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuc2Nyb2xsWSA8PSBvcmlnaW5hbFBvc2l0aW9uKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFBvc2l0aW9uKC0xKTtcclxuICAgICAgICAgICAgICAgICAgICBpc0ZpeGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh2aWV3cG9ydE9mZnNldC50b3AgPCAwIHx8ICh3aW5kb3cuc2Nyb2xsWSA+IG9yaWdpbmFsUG9zaXRpb24oKSAmJiBvcmlnaW5hbFBvc2l0aW9uKCkgPiAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNGaXhlZCgpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxQb3NpdGlvbih3aW5kb3cuc2Nyb2xsWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRml4ZWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IG5hdkRpc3BsYXkgPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFpc0luaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaXhOYXZCYXIgPSBmaXhPblNjcm9sbChlbCk7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZml4TmF2QmFyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5hdkRpc3BsYXk6IG5hdkRpc3BsYXksXHJcbiAgICAgICAgICAgIGlzRml4ZWQ6IGlzRml4ZWRcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QsXHJcbiAgICAgICAgICAgIHJld2FyZHMgPSBhcmdzLnJld2FyZERldGFpbHM7XHJcblxyXG4gICAgICAgIGxldCBtYWluQ2xhc3MgPSAoIWN0cmwuaXNGaXhlZCgpIHx8IHByb2plY3QoKS5pc19vd25lcl9vcl9hZG1pbikgPyAnLnctc2VjdGlvbi5wcm9qZWN0LW5hdicgOiAnLnctc2VjdGlvbi5wcm9qZWN0LW5hdi5wcm9qZWN0LW5hdi1maXhlZCc7XHJcblxyXG4gICAgICAgIHJldHVybiBtKCduYXYtd3JhcHBlcicsIHByb2plY3QoKSA/IFtcclxuICAgICAgICAgICAgbShtYWluQ2xhc3MsIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZzogY3RybC5uYXZEaXNwbGF5XHJcbiAgICAgICAgICAgIH0sIFtcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04JywgWyFfLmlzRW1wdHkocmV3YXJkcygpKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhW2lkPVwicmV3YXJkcy1saW5rXCJdW2NsYXNzPVwidy1oaWRkZW4tbWFpbiB3LWhpZGRlbi1tZWRpdW0gZGFzaGJvYXJkLW5hdi1saW5rIG1mICcgKyAoaC5oYXNoTWF0Y2goJyNyZXdhcmRzJykgPyAnc2VsZWN0ZWQnIDogJycpICsgJ1wiXVtocmVmPVwiI3Jld2FyZHNcIl0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdmbG9hdDogbGVmdDsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3ZpZXcnLGFjdDogJ3Byb2plY3RfcmV3YXJkc192aWV3Jyxwcm9qZWN0OiBwcm9qZWN0KCl9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ1JlY29tcGVuc2FzJykgOiBtKCdhW2lkPVwicmV3YXJkcy1saW5rXCJdW2NsYXNzPVwidy1oaWRkZW4tbWFpbiB3LWhpZGRlbi1tZWRpdW0gZGFzaGJvYXJkLW5hdi1saW5rIG1mICcgKyAoaC5oYXNoTWF0Y2goJyNjb250cmlidXRpb25fc3VnZ2VzdGlvbnMnKSA/ICdzZWxlY3RlZCcgOiAnJykgKyAnXCJdW2hyZWY9XCIjY29udHJpYnV0aW9uX3N1Z2dlc3Rpb25zXCJdJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnZmxvYXQ6IGxlZnQ7JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2NvbnRyaWJzdWdnZXN0aW9uc192aWV3Jyxwcm9qZWN0OiBwcm9qZWN0KCl9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ1ZhbG9yZXMgU3VnZXJpZG9zJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhW2lkPVwiYWJvdXQtbGlua1wiXVtjbGFzcz1cImRhc2hib2FyZC1uYXYtbGluayBtZiAnICsgKGguaGFzaE1hdGNoKCcjYWJvdXQnKSB8fCBoLmhhc2hNYXRjaCgnJykgPyAnc2VsZWN0ZWQnIDogJycpICsgJyBcIl1baHJlZj1cIiNhYm91dFwiXScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2Zsb2F0OiBsZWZ0OycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9hYm91dF92aWV3Jyxwcm9qZWN0OiBwcm9qZWN0KCl9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ1NvYnJlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhW2lkPVwicG9zdHMtbGlua1wiXVtjbGFzcz1cImRhc2hib2FyZC1uYXYtbGluayBtZiAnICsgKGguaGFzaE1hdGNoKCcjcG9zdHMnKSA/ICdzZWxlY3RlZCcgOiAnJykgKyAnXCJdW2hyZWY9XCIjcG9zdHNcIl0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdmbG9hdDogbGVmdDsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3ZpZXcnLGFjdDogJ3Byb2plY3RfcG9zdHNfdmlldycscHJvamVjdDogcHJvamVjdCgpfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTm92aWRhZGVzICcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5iYWRnZScsIHByb2plY3QoKSA/IHByb2plY3QoKS5wb3N0c19jb3VudCA6ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhW2lkPVwiY29udHJpYnV0aW9ucy1saW5rXCJdW2NsYXNzPVwidy1oaWRkZW4tc21hbGwgdy1oaWRkZW4tdGlueSBkYXNoYm9hcmQtbmF2LWxpbmsgbWYgJyArIChoLmhhc2hNYXRjaCgnI2NvbnRyaWJ1dGlvbnMnKSA/ICdzZWxlY3RlZCcgOiAnJykgKyAnXCJdW2hyZWY9XCIjY29udHJpYnV0aW9uc1wiXScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2Zsb2F0OiBsZWZ0OycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9jb250cmlidXRpb25zX3ZpZXcnLHByb2plY3Q6IHByb2plY3QoKX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Fwb2lvcyAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uYmFkZ2Uudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueScsIHByb2plY3QoKSA/IHByb2plY3QoKS50b3RhbF9jb250cmlidXRpb25zIDogJy0nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhW2lkPVwiY29tbWVudHMtbGlua1wiXVtjbGFzcz1cImRhc2hib2FyZC1uYXYtbGluayBtZiAnICsgKGguaGFzaE1hdGNoKCcjY29tbWVudHMnKSA/ICdzZWxlY3RlZCcgOiAnJykgKyAnXCJdW2hyZWY9XCIjY29tbWVudHNcIl0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdmbG9hdDogbGVmdDsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3ZpZXcnLGFjdDogJ3Byb2plY3RfY29tbWVudHNfdmlldycscHJvamVjdDogcHJvamVjdCgpfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29tZW50w6FyaW9zICcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdCgpID8gbSgnZmI6Y29tbWVudHMtY291bnRbaHJlZj1cImh0dHA6Ly93d3cuY2F0YXJzZS5tZS8nICsgcHJvamVjdCgpLnBlcm1hbGluayArICdcIl1bY2xhc3M9XCJiYWRnZSBwcm9qZWN0LWZiLWNvbW1lbnQgdy1oaWRkZW4tc21hbGwgdy1oaWRkZW4tdGlueVwiXVtzdHlsZT1cImRpc3BsYXk6IGlubGluZVwiXScsIG0udHJ1c3QoJyZuYnNwOycpKSA6ICctJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0KCkgPyBtKCcudy1jb2wudy1jb2wtNC53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgcHJvamVjdCgpLm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cucHJvamVjdC1uYXYtYmFjay1idXR0b24nLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtbWVkaXVtLTgnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2Eudy1idXR0b24uYnRuW2hyZWY9XCIvcHJvamVjdHMvJyArIHByb2plY3QoKS5pZCArICcvY29udHJpYnV0aW9ucy9uZXdcIl0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAnY29udHJpYnV0aW9uX2NyZWF0ZScsYWN0OiAnY29udHJpYnV0aW9uX2Zsb2F0aW5nYnRuX2NsaWNrJywgcHJvamVjdDogcHJvamVjdCgpfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ0Fwb2lhcsKg4oCNZXN0ZcKgcHJvamV0bycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYudy1jb2wtbWVkaXVtLTQnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3ZpZXcnLGFjdDogJ3Byb2plY3RfZmxvYXRpbmdyZW1pbmRlcl9jbGljaycsIHByb2plY3Q6IHByb2plY3QoKX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0UmVtaW5kZXIsIHtwcm9qZWN0OiBwcm9qZWN0LCB0eXBlOiAnYnV0dG9uJywgaGlkZVRleHRPbk1vYmlsZTogdHJ1ZX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0gOiAnJykgOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgKGN0cmwuaXNGaXhlZCgpICYmICFwcm9qZWN0KCkuaXNfb3duZXJfb3JfYWRtaW4pID8gbSgnLnctc2VjdGlvbi5wcm9qZWN0LW5hdicpIDogJydcclxuICAgICAgICBdIDogJycpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFRhYnM7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcblxyXG5jb25zdCBwcm9qZWN0UmV3YXJkTGlzdCA9IHtcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIC8vRklYTUU6IE1JU1NJTkcgQURKVVNUU1xyXG4gICAgICAgIC8vIC0gYWRkIGRyYWZ0IGFkbWluIG1vZGlmaWNhdGlvbnNcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXJncy5wcm9qZWN0O1xyXG4gICAgICAgIHJldHVybiBtKCcjcmV3YXJkcy51LW1hcmdpbmJvdHRvbS0zMCcsIF8ubWFwKGFyZ3MucmV3YXJkRGV0YWlscygpLCAocmV3YXJkKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyaWJ1dGlvblVybFdpdGhSZXdhcmQgPSAnL3Byb2plY3RzLycgKyBwcm9qZWN0KCkuaWQgKyAnL2NvbnRyaWJ1dGlvbnMvbmV3P3Jld2FyZF9pZD0nICsgcmV3YXJkLmlkO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG0oJ2FbY2xhc3M9XCInICsgKGgucmV3YXJkU291bGRPdXQocmV3YXJkKSA/ICdjYXJkLWdvbmUnIDogJ2NhcmQtcmV3YXJkICcgKyAocHJvamVjdCgpLm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMgPyAnY2xpY2thYmxlJyA6ICcnKSkgKyAnIGNhcmQgY2FyZC1zZWNvbmRhcnkgdS1tYXJnaW5ib3R0b20tMTBcIl1baHJlZj1cIicgKyAocHJvamVjdCgpLm9wZW5fZm9yX2NvbnRyaWJ1dGlvbnMgJiYgIWgucmV3YXJkU291bGRPdXQocmV3YXJkKSA/IGNvbnRyaWJ1dGlvblVybFdpdGhSZXdhcmQgOiAnanM6dm9pZCgwKTsnKSArICdcIl0nLCB7XHJcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAnY29udHJpYnV0aW9uX2NyZWF0ZScsYWN0OiAnY29udHJpYnV0aW9uX3Jld2FyZF9jbGljaycsIGxibDogcmV3YXJkLm1pbmltdW1fdmFsdWUsIHByb2plY3Q6IHByb2plY3QoKSwgZXh0cmFEYXRhOiB7cmV3YXJkX2lkOiByZXdhcmQuaWQsIHJld2FyZF92YWx1ZTogcmV3YXJkLm1pbmltdW1fdmFsdWV9fSlcclxuICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnUtbWFyZ2luYm90dG9tLTIwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUGFyYSBSJCAnICsgaC5mb3JtYXROdW1iZXIocmV3YXJkLm1pbmltdW1fdmFsdWUpICsgJyBvdSBtYWlzJyksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIuZm9udHdlaWdodC1zZW1pYm9sZCcsIGgucGx1cmFsaXplKHJld2FyZC5wYWlkX2NvdW50LCAnIGFwb2lvJywgJyBhcG9pb3MnKSksIChyZXdhcmQubWF4aW11bV9jb250cmlidXRpb25zID4gMCA/IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHJld2FyZC53YWl0aW5nX3BheW1lbnRfY291bnQgPiAwID8gbSgnLm1heGltdW1fY29udHJpYnV0aW9ucy5pbl90aW1lX3RvX2NvbmZpcm0uY2xlYXJmaXgnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcucGVuZGluZy5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgaC5wbHVyYWxpemUocmV3YXJkLndhaXRpbmdfcGF5bWVudF9jb3VudCwgJyBhcG9pbyBlbSBwcmF6byBkZSBjb25maXJtYcOnw6NvJywgJyBhcG9pb3MgZW0gcHJhem8gZGUgY29uZmlybWHDp8Ojby4nKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSkgOiAnJyksIChoLnJld2FyZFNvdWxkT3V0KHJld2FyZCkgPyBtKCcudS1tYXJnaW50b3AtMTAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmJhZGdlLmJhZGdlLWdvbmUuZm9udHNpemUtc21hbGxlcicsICdFc2dvdGFkYScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pIDogbSgnLnUtbWFyZ2ludG9wLTEwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5iYWRnZS5iYWRnZS1hdHRlbnRpb24uZm9udHNpemUtc21hbGxlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtYm9sZCcsICdMaW1pdGFkYScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgKCcgKyBoLnJld2FyZFJlbWFuaW5nKHJld2FyZCkgKyAnIGRlICcgKyByZXdhcmQubWF4aW11bV9jb250cmlidXRpb25zICsgJyBkaXNwb27DrXZlaXMpJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgXSA6ICcnKSxcclxuICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXIudS1tYXJnaW50b3AtMjAnLCBtLnRydXN0KGguc2ltcGxlRm9ybWF0KGguc3RyaXAocmV3YXJkLmRlc2NyaXB0aW9uKSkpKSwgKCFfLmlzRW1wdHkocmV3YXJkLmRlbGl2ZXJfYXQpID9cclxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnYicsICdFc3RpbWF0aXZhIGRlIEVudHJlZ2E6ICcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoLm1vbWVudGlmeShyZXdhcmQuZGVsaXZlcl9hdCwgJ01NTS9ZWVlZJylcclxuICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSwgKHByb2plY3QoKS5vcGVuX2Zvcl9jb250cmlidXRpb25zICYmICFoLnJld2FyZFNvdWxkT3V0KHJld2FyZCkgP1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5wcm9qZWN0LXJld2FyZC1ib3gtaG92ZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5wcm9qZWN0LXJld2FyZC1ib3gtc2VsZWN0LXRleHQudS10ZXh0LWNlbnRlcicsICdTZWxlY2lvbmUgZXNzYSByZWNvbXBlbnNhJylcclxuICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0UmV3YXJkTGlzdDtcclxuIiwiLyoqXHJcbiAqIHdpbmRvdy5jLlByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zIGNvbXBvbmVudFxyXG4gKiBBIFByb2plY3Qtc2hvdyBwYWdlIGhlbHBlciB0byBzaG93IHN1Z2dlc3RlZCBhbW91bnRzIG9mIGNvbnRyaWJ1dGlvbnNcclxuICpcclxuICogRXhhbXBsZSBvZiB1c2U6XHJcbiAqIHZpZXc6ICgpID0+IHtcclxuICogICAuLi5cclxuICogICBtLmNvbXBvbmVudChjLlByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zLCB7cHJvamVjdDogcHJvamVjdH0pXHJcbiAqICAgLi4uXHJcbiAqIH1cclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuXHJcbmNvbnN0IHByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zID0ge1xyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25VcmwgPSAoYW1vdW50KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBgL3Byb2plY3RzLyR7cHJvamVjdC5wcm9qZWN0X2lkfS9jb250cmlidXRpb25zL25ldz9hbW91bnQ9JHthbW91bnR9YDtcclxuICAgICAgICB9LCBzdWdnZXN0ZWRWYWx1ZXMgPSBbMTAsIDI1LCA1MCwgMTAwXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJyNzdWdnZXN0aW9ucycsIF8ubWFwKHN1Z2dlc3RlZFZhbHVlcywgKGFtb3VudCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gbShgYVtocmVmPVwiJHtzdWdnZXN0aW9uVXJsKGFtb3VudCl9XCJdLmNhcmQtcmV3YXJkLmNhcmQtYmlnLmNhcmQtc2Vjb25kYXJ5LnUtbWFyZ2luYm90dG9tLTIwYCwgW1xyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlcicsIGBSJMKgJHthbW91bnR9YClcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFN1Z2dlc3RlZENvbnRyaWJ1dGlvbnM7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IHByb2plY3RDb250cmlidXRpb25zID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdFZNID0gcG9zdGdyZXN0LnBhZ2luYXRpb25WTShtb2RlbHMucHJvamVjdENvbnRyaWJ1dGlvbiksXHJcbiAgICAgICAgICAgIGZpbHRlclZNID0gcG9zdGdyZXN0LmZpbHRlcnNWTSh7XHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiAnZXEnLFxyXG4gICAgICAgICAgICAgICAgd2FpdGluZ19wYXltZW50OiAnZXEnXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB0b2dnbGVXYWl0aW5nID0gKHdhaXRpbmcgPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJWTS53YWl0aW5nX3BheW1lbnQod2FpdGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdFZNLmZpcnN0UGFnZShmaWx0ZXJWTS5wYXJhbWV0ZXJzKCkpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZmlsdGVyVk0ucHJvamVjdF9pZChhcmdzLnByb2plY3QoKS5pZCkud2FpdGluZ19wYXltZW50KGZhbHNlKTtcclxuXHJcbiAgICAgICAgaWYgKCFsaXN0Vk0uY29sbGVjdGlvbigpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsaXN0Vk0uZmlyc3RQYWdlKGZpbHRlclZNLnBhcmFtZXRlcnMoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsaXN0Vk06IGxpc3RWTSxcclxuICAgICAgICAgICAgZmlsdGVyVk06IGZpbHRlclZNLFxyXG4gICAgICAgICAgICB0b2dnbGVXYWl0aW5nOiB0b2dnbGVXYWl0aW5nXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBsaXN0ID0gY3RybC5saXN0Vk07XHJcbiAgICAgICAgcmV0dXJuIG0oJyNwcm9qZWN0X2NvbnRyaWJ1dGlvbnMuY29udGVudC53LWNvbC53LWNvbC0xMicsIFtcclxuICAgICAgICAgICAgKGFyZ3MucHJvamVjdCgpLmlzX293bmVyX29yX2FkbWluID9cclxuICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS0yMCcsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXRbY2hlY2tlZD1cImNoZWNrZWRcIl1baWQ9XCJjb250cmlidXRpb25fc3RhdGVfYXZhaWxhYmxlX3RvX2NvdW50XCJdW25hbWU9XCJ3YWl0aW5nX3BheW1lbnRcIl1bdHlwZT1cInJhZGlvXCJdW3ZhbHVlPVwiYXZhaWxhYmxlX3RvX2NvdW50XCJdJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC50b2dnbGVXYWl0aW5nKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWxbZm9yPVwiY29udHJpYnV0aW9uX3N0YXRlX2F2YWlsYWJsZV90b19jb3VudFwiXScsICdDb25maXJtYWRvcycpXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0W2lkPVwiY29udHJpYnV0aW9uX3N0YXRlX3dhaXRpbmdfY29uZmlybWF0aW9uXCJdW3R5cGU9XCJyYWRpb1wiXVtuYW1lPVwid2FpdGluZ19wYXltZW50XCJdW3ZhbHVlPVwid2FpdGluZ19jb25maXJtYXRpb25cIl0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBjdHJsLnRvZ2dsZVdhaXRpbmcodHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnbGFiZWxbZm9yPVwiY29udHJpYnV0aW9uX3N0YXRlX3dhaXRpbmdfY29uZmlybWF0aW9uXCJdJywgJ1BlbmRlbnRlcycpXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pIDogJycpLFxyXG4gICAgICAgICAgICBtKCcucHJvamVjdC1jb250cmlidXRpb25zJywgXy5tYXAobGlzdC5jb2xsZWN0aW9uKCksIChjb250cmlidXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy1jbGVhcmZpeCcsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tMjAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYVtocmVmPVwiL3VzZXJzLycgKyBjb250cmlidXRpb24udXNlcl9pZCArICdcIl0nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3RfdmlldycsYWN0OiAncHJvamVjdF9iYWNrZXJfbGluaycsbGJsOiBjb250cmlidXRpb24udXNlcl9pZCxwcm9qZWN0OiBhcmdzLnByb2plY3QoKX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudGh1bWIudS1sZWZ0LnUtcm91bmRbc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJyArICghXy5pc0VtcHR5KGNvbnRyaWJ1dGlvbi5wcm9maWxlX2ltZ190aHVtYm5haWwpID8gY29udHJpYnV0aW9uLnByb2ZpbGVfaW1nX3RodW1ibmFpbCA6ICcvYXNzZXRzL2NhdGFyc2VfYm9vdHN0cmFwL3VzZXIuanBnJykgKyAnKTsgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1wiXScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmxpbmstaGlkZGVuLWRhcmtbaHJlZj1cIi91c2Vycy8nICsgY29udHJpYnV0aW9uLnVzZXJfaWQgKyAnXCJdJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X2JhY2tlcl9saW5rJyxsYmw6IGNvbnRyaWJ1dGlvbi51c2VyX2lkLHByb2plY3Q6IGFyZ3MucHJvamVjdCgpfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjb250cmlidXRpb24udXNlcl9uYW1lKSwgKGNvbnRyaWJ1dGlvbi5pc19vd25lcl9vcl9hZG1pbiA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbGVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1IkICcgKyBoLmZvcm1hdE51bWJlcihjb250cmlidXRpb24udmFsdWUsIDIsIDMpLCAoY29udHJpYnV0aW9uLmFub255bW91cyA/IFttLnRydXN0KCcmbmJzcDstJm5ic3A7JyksIG0oJ3N0cm9uZycsICdBcG9pYWRvciBhbsO0bmltbycpXSA6ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6ICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlcicsIGgubW9tZW50aWZ5KGNvbnRyaWJ1dGlvbi5jcmVhdGVkX2F0LCAnREQvTU0vWVlZWSwgSEg6bW0nKSArICdoJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXInLCAoY29udHJpYnV0aW9uLnRvdGFsX2NvbnRyaWJ1dGVkX3Byb2plY3RzID4gMSA/ICdBcG9pb3UgZXN0ZSBlIG1haXMgb3V0cm9zICcgKyBjb250cmlidXRpb24udG90YWxfY29udHJpYnV0ZWRfcHJvamVjdHMgKyAnIHByb2pldG9zJyA6ICdBcG9pb3Ugc29tZW50ZSBlc3RlIHByb2pldG8gYXTDqSBhZ29yYScpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbmJvdHRvbS0yMCcpXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgfSkpLFxyXG4gICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMi53LWNvbC1wdXNoLTUnLCBbIWxpc3QuaXNMb2FkaW5nKCkgP1xyXG4gICAgICAgICAgICAgICAgICAgIChsaXN0LmlzTGFzdFBhZ2UoKSA/ICcnIDogbSgnYnV0dG9uI2xvYWQtbW9yZS5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnknLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGxpc3QubmV4dFBhZ2VcclxuICAgICAgICAgICAgICAgICAgICB9LCAnQ2FycmVnYXIgbWFpcycpKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgaC5sb2FkZXIoKSxcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0Q29udHJpYnV0aW9ucztcclxuIiwiLyoqXHJcbiAqIHdpbmRvdy5jLnByb2plY3RSZXBvcnQgY29tcG9uZW50XHJcbiAqIFJlbmRlciBwcm9qZWN0IHJlcG9ydCBmb3JtXHJcbiAqXHJcbiAqL1xyXG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IHBvc3RncmVzdCBmcm9tICdtaXRocmlsLXBvc3RncmVzdCc7XHJcblxyXG5jb25zdCBwcm9qZWN0UmVwb3J0ID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgbGV0IGRpc3BsYXlGb3JtID0gaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKSxcclxuICAgICAgICAgICAgc2VuZFN1Y2Nlc3MgPSBtLnByb3AoZmFsc2UpLFxyXG4gICAgICAgICAgICBzdWJtaXREaXNhYmxlZCA9IG0ucHJvcChmYWxzZSksXHJcbiAgICAgICAgICAgIHVzZXIgPSBoLmdldFVzZXIoKSB8fCB7bmFtZTogJycsIGVtYWlsOiAnJ30sXHJcbiAgICAgICAgICAgIGVtYWlsID0gbS5wcm9wKHVzZXIuZW1haWwpLFxyXG4gICAgICAgICAgICBkZXRhaWxzID0gbS5wcm9wKCcnKSxcclxuICAgICAgICAgICAgcmVhc29uID0gbS5wcm9wKCcnKSxcclxuICAgICAgICAgICAgbCA9IG0ucHJvcChmYWxzZSksXHJcbiAgICAgICAgICAgICAgc2VuZFJlcG9ydCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgc3VibWl0RGlzYWJsZWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgIGxldCBsb2FkZXJPcHRzID0gbW9kZWxzLnByb2plY3RSZXBvcnQucG9zdE9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGRldGFpbHMoKSxcclxuICAgICAgICAgICAgICAgICAgICByZWFzb246IHJlYXNvbigpICxcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiBoLmdldEN1cnJlbnRQcm9qZWN0KCkucHJvamVjdF9pZFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIGwgPSBwb3N0Z3Jlc3QubG9hZGVyV2l0aFRva2VuKGxvYWRlck9wdHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgbC5sb2FkKCkudGhlbihzZW5kU3VjY2Vzcyh0cnVlKSk7XHJcbiAgICAgICAgICAgICAgICAgIHN1Ym1pdERpc2FibGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXlGb3JtOiBkaXNwbGF5Rm9ybSxcclxuICAgICAgICAgICAgc2VuZFN1Y2Nlc3M6IHNlbmRTdWNjZXNzLFxyXG4gICAgICAgICAgICBzdWJtaXREaXNhYmxlZDogc3VibWl0RGlzYWJsZWQsXHJcbiAgICAgICAgICAgIHNlbmRSZXBvcnQ6IHNlbmRSZXBvcnQsXHJcbiAgICAgICAgICAgIHVzZXI6IHVzZXIsXHJcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcclxuICAgICAgICAgICAgZGV0YWlsczogZGV0YWlscyxcclxuICAgICAgICAgICAgcmVhc29uOiByZWFzb25cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCB1c2VyID0gY3RybC51c2VyO1xyXG4gICAgICAgIHJldHVybiBtKCcuY2FyZC5jYXJkLXRlcmNpYXJ5LnUtcmFkaXVzJyxcclxuICAgICAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwudS1tYXJnaW5ib3R0b20tMjAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ0VzdGUgcHJvamV0byBkZXNyZXNwZWl0YScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVxcJ2h0dHA6Ly9zdXBvcnRlLmNhdGFyc2UubWUvaGMvcHQtYnIvYXJ0aWNsZXMvMjAyMzg3NjM4XFwnXVt0YXJnZXQ9XFwnX2JsYW5rXFwnXScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbm9zc2FzIHJlZ3Jhcz8gJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc2VuZFN1Y2Nlc3MoKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdPYnJpZ2FkbyEgQSBzdWEgZGVuw7puY2lhIGZvaSByZWNlYmlkYS4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuYS53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bS5idG4tdGVyY2lhcnkuYnRuLWlubGluZVtocmVmPVxcJ2phdmFzY3JpcHQ6dm9pZCgwKTtcXCddJyx7b25jbGljazogY3RybC5kaXNwbGF5Rm9ybS50b2dnbGV9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnRGVudW5jaWFyIGVzdGUgcHJvamV0bydcclxuICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICBjdHJsLmRpc3BsYXlGb3JtKCkgPyBtKCcjcmVwb3J0LWZvcm0udS1tYXJnaW50b3AtMzAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1mb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdmb3JtJywge29uc3VibWl0OiBjdHJsLnNlbmRSZXBvcnR9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1BvciBxdWUgdm9jw6ogZXN0w6EgZGVudW5jaWFuZG8gZXN0ZSBwcm9qZXRvPydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc2VsZWN0Lnctc2VsZWN0LnRleHQtZmllbGQucG9zaXRpdmVbcmVxdWlyZWQ9XFwncmVxdWlyZWRcXCddJywge29uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIGN0cmwucmVhc29uKX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ1xcJ10nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU2VsZWNpb25lIHVtIG1vdGl2bydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnVmlvbGHDp8OjbyBkZSBwcm9wcmllZGFkZSBpbnRlbGVjdHVhbFxcJ10nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVmlvbGHDp8OjbyBkZSBwcm9wcmllZGFkZSBpbnRlbGVjdHVhbCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XFwnQ2Fsw7puaWEsIGluasO6cmlhLCBkaWZhbWHDp8OjbyBvdSBkaXNjcmltaW5hw6fDo29cXCddJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NhbMO6bmlhLCBpbmrDunJpYSwgZGlmYW1hw6fDo28gb3UgZGlzY3JpbWluYcOnw6NvJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdFc2NvcG8gZGUgcHJvamV0byBwcm9pYmlkb1xcJ10nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRXNjb3BvIGRlIHByb2pldG8gcHJvaWJpZG8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnb3B0aW9uW3ZhbHVlPVxcJ1JlY29tcGVuc2FzIHByb2liaWRhc1xcJ10nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUmVjb21wZW5zYXMgcHJvaWJpZGFzJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdDZW5hcyBkZSBzZXhvIGV4cGzDrWNpdGFzIGUgZ3JhdHVpdGFzXFwnXScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDZW5hcyBkZSBzZXhvIGV4cGzDrWNpdGFzIGUgZ3JhdHVpdGFzJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdBYnVzbyBkZSBTUEFNXFwnXScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBYnVzbyBkZSBTUEFNJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ29wdGlvblt2YWx1ZT1cXCdPdXRyb3NcXCddJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ091dHJvcydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3RleHRhcmVhLnctaW5wdXQudGV4dC1maWVsZC5wb3NpdGl2ZS51LW1hcmdpbmJvdHRvbS0zMCcsIHtwbGFjZWhvbGRlcjogJ1BvciBmYXZvciwgZMOqIG1haXMgZGV0YWxoZXMgcXVlIG5vcyBhanVkZW0gYSBpZGVudGlmaWNhciBvIHByb2JsZW1hJywgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgY3RybC5kZXRhaWxzKX0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0xMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NldSBlbWFpbCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkLnBvc2l0aXZlLnUtbWFyZ2luYm90dG9tLTMwW3JlcXVpcmVkPSdyZXF1aXJlZCddW3R5cGU9J3RleHQnXVt2YWx1ZT1cIiR7Y3RybC5lbWFpbCgpfVwiXWAsIHtvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCBjdHJsLmVtYWlsKX0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbnB1dC53LWJ1dHRvbi5idG4uYnRuLW1lZGl1bS5idG4taW5saW5lLmJ0bi1kYXJrW3R5cGU9XFwnc3VibWl0XFwnXVt2YWx1ZT1cXCdFbnZpYXIgZGVuw7puY2lhXFwnXScsIHtkaXNhYmxlZDogY3RybC5zdWJtaXREaXNhYmxlZCgpfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICkgOiAnJ11cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHJvamVjdFJlcG9ydDtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgcHJvamVjdFJld2FyZExpc3QgZnJvbSAnLi9wcm9qZWN0LXJld2FyZC1saXN0JztcclxuaW1wb3J0IHByb2plY3RSZXBvcnQgZnJvbSAnLi9wcm9qZWN0LXJlcG9ydCc7XHJcbmltcG9ydCBwcm9qZWN0U3VnZ2VzdGVkQ29udHJpYnV0aW9ucyBmcm9tICcuL3Byb2plY3Qtc3VnZ2VzdGVkLWNvbnRyaWJ1dGlvbnMnO1xyXG5cclxuY29uc3QgcHJvamVjdEFib3V0ID0ge1xyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCgpIHx8IHt9LFxyXG4gICAgICAgICAgICBvbmxpbmVEYXlzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpZmYgPSBtb21lbnQocHJvamVjdC56b25lX29ubGluZV9kYXRlKS5kaWZmKG1vbWVudChwcm9qZWN0LnpvbmVfZXhwaXJlc19hdCkpLFxyXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gbW9tZW50LmR1cmF0aW9uKGRpZmYpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiAtTWF0aC5jZWlsKGR1cmF0aW9uLmFzRGF5cygpKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBsZXQgZnVuZGluZ1BlcmlvZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIChwcm9qZWN0LmlzX3B1Ymxpc2hlZCAmJiBoLmV4aXN0eShwcm9qZWN0LnpvbmVfZXhwaXJlc19hdCkpID8gbSgnLmZ1bmRpbmctcGVyaW9kJywgW1xyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgJ1BlcsOtb2RvIGRlIGNhbXBhbmhhJyksXHJcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGwudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5JywgYCR7aC5tb21lbnRpZnkocHJvamVjdC56b25lX29ubGluZV9kYXRlKX0gLSAke2gubW9tZW50aWZ5KHByb2plY3Quem9uZV9leHBpcmVzX2F0KX0gKCR7b25saW5lRGF5cygpfSBkaWFzKWApXHJcbiAgICAgICAgICAgIF0pIDogJyc7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJyNwcm9qZWN0LWFib3V0JywgW1xyXG4gICAgICAgICAgICBtKCcucHJvamVjdC1hYm91dC53LWNvbC53LWNvbC04Jywge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnOiBoLlVJSGVscGVyKClcclxuICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1iYXNlJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ3N0cm9uZycsICdPIHByb2pldG8nKSxcclxuICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2VbaXRlbXByb3A9XCJhYm91dFwiXScsIG0udHJ1c3QoaC5zZWxmT3JFbXB0eShwcm9qZWN0LmFib3V0X2h0bWwsICcuLi4nKSkpLFxyXG4gICAgICAgICAgICAgICAgcHJvamVjdC5idWRnZXQgPyBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnT3LDp2FtZW50bycpLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtYmFzZScsIG0udHJ1c3QocHJvamVjdC5idWRnZXQpKVxyXG4gICAgICAgICAgICAgICAgXSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdFJlcG9ydClcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00LnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCAhXy5pc0VtcHR5KGFyZ3MucmV3YXJkRGV0YWlscygpKSA/IFtcclxuICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMzAnLCAnUmVjb21wZW5zYXMnKSxcclxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3RSZXdhcmRMaXN0LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogYXJncy5wcm9qZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIHJld2FyZERldGFpbHM6IGFyZ3MucmV3YXJkRGV0YWlsc1xyXG4gICAgICAgICAgICAgICAgfSksIGZ1bmRpbmdQZXJpb2QoKVxyXG4gICAgICAgICAgICBdIDogW1xyXG4gICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UuZm9udHdlaWdodC1zZW1pYm9sZC51LW1hcmdpbmJvdHRvbS0zMCcsICdTdWdlc3TDtWVzwqBkZcKgYXBvaW8nKSxcclxuICAgICAgICAgICAgICAgIG0uY29tcG9uZW50KHByb2plY3RTdWdnZXN0ZWRDb250cmlidXRpb25zLCB7cHJvamVjdDogYXJncy5wcm9qZWN0fSksXHJcbiAgICAgICAgICAgICAgICBmdW5kaW5nUGVyaW9kKClcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3RBYm91dDtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgcHJvamVjdFJlcG9ydCBmcm9tICcuL3Byb2plY3QtcmVwb3J0JztcclxuXHJcbmNvbnN0IHByb2plY3RDb21tZW50cyA9IHtcclxuICAgIGNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgY29uc3QgbG9hZENvbW1lbnRzID0gKGVsLCBpc0luaXRpYWxpemVkKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0luaXRpYWxpemVkKSB7cmV0dXJuO31cclxuICAgICAgICAgICAgICAgIGguZmJQYXJzZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7bG9hZENvbW1lbnRzOiBsb2FkQ29tbWVudHN9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhcmdzLnByb2plY3QoKTtcclxuICAgICAgICByZXR1cm4gbSgnLnctcm93JyxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC03JyxcclxuICAgICAgICAgICAgICAgIG0oJy5mYi1jb21tZW50c1tkYXRhLWhyZWY9XCJodHRwOi8vd3d3LmNhdGFyc2UubWUvJyArIHByb2plY3QucGVybWFsaW5rICsgJ1wiXVtkYXRhLW51bS1wb3N0cz01MF1bZGF0YS13aWR0aD1cIjYxMFwiXScsIHtjb25maWc6IGN0cmwubG9hZENvbW1lbnRzKCl9KVxyXG4gICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTUnLCBtLmNvbXBvbmVudChwcm9qZWN0UmVwb3J0KSlcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3RDb21tZW50cztcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBwb3N0Z3Jlc3QgZnJvbSAnbWl0aHJpbC1wb3N0Z3Jlc3QnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuXHJcbmNvbnN0IHByb2plY3RQb3N0cyA9IHtcclxuICAgIGNvbnRyb2xsZXIoYXJncykge1xyXG4gICAgICAgIGNvbnN0IGxpc3RWTSA9IHBvc3RncmVzdC5wYWdpbmF0aW9uVk0obW9kZWxzLnByb2plY3RQb3N0RGV0YWlsKSxcclxuICAgICAgICAgICAgZmlsdGVyVk0gPSBwb3N0Z3Jlc3QuZmlsdGVyc1ZNKHtcclxuICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6ICdlcSdcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZpbHRlclZNLnByb2plY3RfaWQoYXJncy5wcm9qZWN0KCkuaWQpO1xyXG5cclxuICAgICAgICBpZiAoIWxpc3RWTS5jb2xsZWN0aW9uKCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxpc3RWTS5maXJzdFBhZ2UoZmlsdGVyVk0ucGFyYW1ldGVycygpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxpc3RWTTogbGlzdFZNLFxyXG4gICAgICAgICAgICBmaWx0ZXJWTTogZmlsdGVyVk1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IGxpc3QgPSBjdHJsLmxpc3RWTSxcclxuICAgICAgICAgICAgcHJvamVjdCA9IGFyZ3MucHJvamVjdCgpIHx8IHt9O1xyXG5cclxuICAgICAgICByZXR1cm4gbSgnLnByb2plY3QtcG9zdHMudy1zZWN0aW9uJywgW1xyXG4gICAgICAgICAgICBtKCcudy1jb250YWluZXIudS1tYXJnaW50b3AtMjAnLCBbXHJcbiAgICAgICAgICAgICAgICAocHJvamVjdC5pc19vd25lcl9vcl9hZG1pbiA/IFtcclxuICAgICAgICAgICAgICAgICAgICAoIWxpc3QuaXNMb2FkaW5nKCkpID9cclxuICAgICAgICAgICAgICAgICAgICAoXy5pc0VtcHR5KGxpc3QuY29sbGVjdGlvbigpKSA/IG0oJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZS51LW1hcmdpbmJvdHRvbS0zMC51LW1hcmdpbnRvcC0yMCcsICdUb2RhIG5vdmlkYWRlIHB1YmxpY2FkYSBubyBDYXRhcnNlIMOpIGVudmlhZGEgZGlyZXRhbWVudGUgcGFyYSBvIGVtYWlsIGRlIHF1ZW0gasOhIGFwb2lvdSBzZXUgcHJvamV0byBlIHRhbWLDqW0gZmljYSBkaXNwb27DrXZlbCBwYXJhIHZpc3VhbGl6YcOnw6NvIG5vIHNpdGUuIFZvY8OqIHBvZGUgb3B0YXIgcG9yIGRlaXjDoS1sYSBww7pibGljYSwgb3Ugdmlzw612ZWwgc29tZW50ZSBwYXJhIHNldXMgYXBvaWFkb3JlcyBhcXVpIG5lc3RhIGFiYS4nKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pIDogJycpIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTIwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGEuYnRuLmJ0bi1lZGl0LmJ0bi1zbWFsbFtocmVmPScvcHQvcHJvamVjdHMvJHtwcm9qZWN0LmlkfS9lZGl0I3Bvc3RzJ11gLCAnRXNjcmV2ZXIgbm92aWRhZGUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnKSxcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSA6ICcnKSwgKF8ubWFwKGxpc3QuY29sbGVjdGlvbigpLCAocG9zdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5wb3N0JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy51LW1hcmdpbmJvdHRvbS02MCAudy1jbGVhcmZpeCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnRjb2xvci1zZWNvbmRhcnkudS10ZXh0LWNlbnRlcicsIGgubW9tZW50aWZ5KHBvc3QuY3JlYXRlZF9hdCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZXIudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0zMCcsIHBvc3QudGl0bGUpLCAoIV8uaXNFbXB0eShwb3N0LmNvbW1lbnRfaHRtbCkgPyBtKCcuZm9udHNpemUtYmFzZScsIG0udHJ1c3QocG9zdC5jb21tZW50X2h0bWwpKSA6IG0oJy5mb250c2l6ZS1iYXNlJywgJ1Bvc3QgZXhjbHVzaXZvIHBhcmEgYXBvaWFkb3Jlcy4nKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZGl2aWRlci51LW1hcmdpbmJvdHRvbS02MCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEnKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgfSkpLFxyXG4gICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yLnctY29sLXB1c2gtNScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKCFsaXN0LmlzTG9hZGluZygpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsaXN0LmlzTGFzdFBhZ2UoKSA/ICdOZW5odW1hIG5vdmlkYWRlLicgOiBtKCdidXR0b24jbG9hZC1tb3JlLmJ0bi5idG4tbWVkaXVtLmJ0bi10ZXJjaWFyeScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBsaXN0Lm5leHRQYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnQ2FycmVnYXIgbWFpcycpKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmxvYWRlcigpKSxcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0UG9zdHM7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcbmltcG9ydCBwcm9qZWN0UmV3YXJkTGlzdCBmcm9tICcuL3Byb2plY3QtcmV3YXJkLWxpc3QnO1xyXG5pbXBvcnQgcHJvamVjdFN1Z2dlc3RlZENvbnRyaWJ1dGlvbnMgZnJvbSAnLi9wcm9qZWN0LXN1Z2dlc3RlZC1jb250cmlidXRpb25zJztcclxuaW1wb3J0IHByb2plY3RDb250cmlidXRpb25zIGZyb20gJy4vcHJvamVjdC1jb250cmlidXRpb25zJztcclxuaW1wb3J0IHByb2plY3RBYm91dCBmcm9tICcuL3Byb2plY3QtYWJvdXQnO1xyXG5pbXBvcnQgcHJvamVjdENvbW1lbnRzIGZyb20gJy4vcHJvamVjdC1jb21tZW50cyc7XHJcbmltcG9ydCBwcm9qZWN0UG9zdHMgZnJvbSAnLi9wcm9qZWN0LXBvc3RzJztcclxuXHJcbmNvbnN0IHByb2plY3RNYWluID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFyZ3MucHJvamVjdCxcclxuICAgICAgICAgICAgICBkaXNwbGF5VGFiQ29udGVudCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjX29wdHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI3Jld2FyZHMnOiBtKCcudy1jb2wudy1jb2wtMTInLCBtLmNvbXBvbmVudChwcm9qZWN0UmV3YXJkTGlzdCwgXy5leHRlbmQoe30sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXdhcmREZXRhaWxzOiBhcmdzLnJld2FyZERldGFpbHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNfb3B0cykpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjY29udHJpYnV0aW9uX3N1Z2dlc3Rpb25zJzogbS5jb21wb25lbnQocHJvamVjdFN1Z2dlc3RlZENvbnRyaWJ1dGlvbnMsIGNfb3B0cyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2NvbnRyaWJ1dGlvbnMnOiBtLmNvbXBvbmVudChwcm9qZWN0Q29udHJpYnV0aW9ucywgY19vcHRzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjYWJvdXQnOiBtLmNvbXBvbmVudChwcm9qZWN0QWJvdXQsIF8uZXh0ZW5kKHt9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV3YXJkRGV0YWlsczogYXJncy5yZXdhcmREZXRhaWxzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjX29wdHMpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjY29tbWVudHMnOiBtLmNvbXBvbmVudChwcm9qZWN0Q29tbWVudHMsIGNfb3B0cyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI3Bvc3RzJzogbS5jb21wb25lbnQocHJvamVjdFBvc3RzLCBjX29wdHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICBpZiAoXy5pc0VtcHR5KGhhc2gpIHx8IGhhc2ggPT09ICcjXz1fJyB8fCBoYXNoID09PSAnI3ByZXZpZXcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFic1snI2Fib3V0J107XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJzW2hhc2hdO1xyXG4gICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIGgucmVkcmF3SGFzaENoYW5nZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkaXNwbGF5VGFiQ29udGVudDogZGlzcGxheVRhYkNvbnRlbnRcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIHJldHVybiBtKCdzZWN0aW9uLnNlY3Rpb25baXRlbXR5cGU9XCJodHRwOi8vc2NoZW1hLm9yZy9DcmVhdGl2ZVdvcmtcIl0nLCBbXHJcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcclxuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIGFyZ3MucHJvamVjdCgpID8gY3RybC5kaXNwbGF5VGFiQ29udGVudCgpIDogJycpXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0TWFpbjtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IHByb2plY3RWTSBmcm9tICcuLi92bXMvcHJvamVjdC12bSc7XHJcbmltcG9ydCBwcm9qZWN0SGVhZGVyIGZyb20gJy4uL2MvcHJvamVjdC1oZWFkZXInO1xyXG5pbXBvcnQgcHJvamVjdFRhYnMgZnJvbSAnLi4vYy9wcm9qZWN0LXRhYnMnO1xyXG5pbXBvcnQgcHJvamVjdE1haW4gZnJvbSAnLi4vYy9wcm9qZWN0LW1haW4nO1xyXG5pbXBvcnQgcHJvamVjdERhc2hib2FyZE1lbnUgZnJvbSAnLi4vYy9wcm9qZWN0LWRhc2hib2FyZC1tZW51JztcclxuXHJcbmNvbnN0IHByb2plY3RzU2hvdyA9IHtcclxuICAgIGNvbnRyb2xsZXIoYXJncykge1xyXG4gICAgICAgIGguYW5hbHl0aWNzLndpbmRvd1Njcm9sbCh7Y2F0OiAncHJvamVjdF92aWV3JyxhY3Q6ICdwcm9qZWN0X3BhZ2Vfc2Nyb2xsJ30pO1xyXG4gICAgICAgIHJldHVybiBwcm9qZWN0Vk0oYXJncy5wcm9qZWN0X2lkLCBhcmdzLnByb2plY3RfdXNlcl9pZCk7XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsKSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGN0cmwucHJvamVjdERldGFpbHM7XHJcblxyXG4gICAgICAgIHJldHVybiBtKCcucHJvamVjdC1zaG93JywgW1xyXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdEhlYWRlciwge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgdXNlckRldGFpbHM6IGN0cmwudXNlckRldGFpbHNcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgbS5jb21wb25lbnQocHJvamVjdFRhYnMsIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIHJld2FyZERldGFpbHM6IGN0cmwucmV3YXJkRGV0YWlsc1xyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBtLmNvbXBvbmVudChwcm9qZWN0TWFpbiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHByb2plY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgcmV3YXJkRGV0YWlsczogY3RybC5yZXdhcmREZXRhaWxzXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIChwcm9qZWN0KCkgJiYgcHJvamVjdCgpLmlzX293bmVyX29yX2FkbWluID8gbS5jb21wb25lbnQocHJvamVjdERhc2hib2FyZE1lbnUsIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBwcm9qZWN0XHJcbiAgICAgICAgICAgICAgICB9KSA6ICcnKVxyXG4gICAgICAgICAgICBdKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb2plY3RzU2hvdztcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgSTE4biBmcm9tICdpMThuLWpzJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IHByb2plY3REYXNoYm9hcmRNZW51IGZyb20gJy4uL2MvcHJvamVjdC1kYXNoYm9hcmQtbWVudSc7XHJcblxyXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwcm9qZWN0cy5wdWJsaXNoJyk7XHJcblxyXG5jb25zdCBwdWJsaXNoID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgbGV0IGZpbHRlcnNWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe1xyXG4gICAgICAgICAgICAgICAgcHJvamVjdF9pZDogJ2VxJ1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgcHJvamVjdEFjY291bnQgPSBtLnByb3AoW10pLFxyXG4gICAgICAgICAgICBwcm9qZWN0RGV0YWlscyA9IG0ucHJvcChbXSksXHJcbiAgICAgICAgICAgIGFjY2VwdFRlcm0gPSBtLnByb3AoW3RydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlXSksXHJcbiAgICAgICAgICAgIGZsZXhBY2NlcHRUZXJtID0gbS5wcm9wKFt0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZV0pLFxyXG4gICAgICAgICAgICBzaG93TmV4dFRlcm0gPSAoaW5kZXgsIGFjY2VwdFRlcm1zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVybXMgPSBhY2NlcHRUZXJtcygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRlcm1zW2luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlcm1zW2luZGV4XSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjY2VwdFRlcm1zKHRlcm1zKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFRlcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd3LWhpZGRlbiBwdWJsaXNoLXJ1bGVzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRUZXJtWzBdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFRlcm1bMF0uY2xhc3NMaXN0LnJlbW92ZSgndy1oaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgcHVibGlzaCBidXR0b24gYWZ0ZXIgYWNjZXB0aW5nIGFsbCBydWxlc1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0ZXJtcy5sZW5ndGggLSAxKXtcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwdWJsaXNoLWJ0bi1zZWN0aW9uJylbMF0uY2xhc3NMaXN0LnJlbW92ZSgndy1oaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9hZGVyID0gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbjtcclxuXHJcbiAgICAgICAgZmlsdGVyc1ZNLnByb2plY3RfaWQoYXJncy5yb290LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpKTtcclxuXHJcbiAgICAgICAgY29uc3QgbCA9IGxvYWRlcihtb2RlbHMucHJvamVjdERldGFpbC5nZXRSb3dPcHRpb25zKGZpbHRlcnNWTS5wYXJhbWV0ZXJzKCkpKSxcclxuICAgICAgICAgICAgYWNjb3VudEwgPSBsb2FkZXIobW9kZWxzLnByb2plY3RBY2NvdW50LmdldFJvd09wdGlvbnMoZmlsdGVyc1ZNLnBhcmFtZXRlcnMoKSkpO1xyXG4gICAgICAgIGwubG9hZCgpLnRoZW4ocHJvamVjdERldGFpbHMpO1xyXG4gICAgICAgIGFjY291bnRMLmxvYWQoKS50aGVuKHByb2plY3RBY2NvdW50KTtcclxuXHJcbiAgICAgICAgbGV0IGV4cGlyZXNBdCA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJvamVjdCA9IF8uZmlyc3QocHJvamVjdERldGFpbHMoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQoKS5hZGQocHJvamVjdC5vbmxpbmVfZGF5cywgJ2RheXMnKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbDogbCxcclxuICAgICAgICAgICAgYWNjb3VudEw6IGFjY291bnRMLFxyXG4gICAgICAgICAgICBleHBpcmVzQXQ6IGV4cGlyZXNBdCxcclxuICAgICAgICAgICAgZmlsdGVyc1ZNOiBmaWx0ZXJzVk0sXHJcbiAgICAgICAgICAgIGFjY2VwdFRlcm06IGFjY2VwdFRlcm0sXHJcbiAgICAgICAgICAgIGZsZXhBY2NlcHRUZXJtOiBmbGV4QWNjZXB0VGVybSxcclxuICAgICAgICAgICAgc2hvd05leHRUZXJtOiBzaG93TmV4dFRlcm0sXHJcbiAgICAgICAgICAgIHByb2plY3RBY2NvdW50OiBwcm9qZWN0QWNjb3VudCxcclxuICAgICAgICAgICAgcHJvamVjdERldGFpbHM6IHByb2plY3REZXRhaWxzXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gXy5maXJzdChjdHJsLnByb2plY3REZXRhaWxzKCkpLFxyXG4gICAgICAgICAgYWNjb3VudCA9IF8uZmlyc3QoY3RybC5wcm9qZWN0QWNjb3VudCgpKSxcclxuICAgICAgICAgIGZsZXhUZXJtcyA9IChwcm9qZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzEvOScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1JlZ3JhcyBkYSBtb2RhbGlkYWRlIEZMRVgnKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsICdWb2PDqiBlc2NvbGhldSBhIGNhbXBhbmhhIGZsZXjDrXZlbC4gRGVzc2EgbWFuZWlyYSwgdm9jw6ogaXLDoSByZWNlYmVyIHRvZG9zIG9zIHJlY3Vyc29zIGFycmVjYWRhZG9zIGp1bnRvIGFvcyBhcG9pYWRvcmVzIGFvIGZpbmFsIGRvIHByYXpvIGRhIGNhbXBhbmhhIChkZXNjb250YW5kbyBhIHRheGEgZG8gQ2F0YXJzZSkgZSBkZXZlcsOhIGN1bXByaXIgY29tIGEgZXhlY3XDp8OjbyBkbyBwcm9qZXRvIGUgY29tIGEgZW50cmVnYSBkYXMgcmVjb21wZW5zYXMgb2ZlcmVjaWRhcyBpbmRlcGVuZGVudGUgZG8gcXVhbnRvIGFycmVjYWRhci4nKVxyXG4gICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzIvOScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ01ldGEgZGUgYXJyZWNhZGHDp8OjbycpXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgJ0EgbWV0YSBuw6NvIHBvZGVyw6Egc2VyIGFsdGVyYWRhIGFww7NzIG8gcHVibGljYcOnw6NvIGRvIHByb2pldG8uJylcclxuICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICczLzknKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcclxuICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdUYXhhcycpXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgJ0FvIGZpbmFsIGRhIGNhbXBhbmhhLCBjb2JyYXJlbW9zIDEzJSBzb2JyZSBvICcsXHJcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAndmFsb3IgdG90YWwgYXJyZWNhZGFkby4nKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnNC85JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUHJhem8gZGEgY2FtcGFuaGEnKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsICdVbWEgdmV6IGRlZmluaWRvLCBvIHByYXpvIGRlIGVuY2VycmFtZW50byBuw6NvIHBvZGVyw6Egc2VyIGFsdGVyYWRvLiBDYXNvIHZvY8OqIHRlbmhhIGluaWNpYWRvIGEgY2FtcGFuaGEgY29tIG8gcHJhem8gZW0gYWJlcnRvLCBkZXZlcsOhIGRlZmluaS1sbyBkdXJhbnRlIGEgY2FtcGFuaGEsIHBvZGVuZG8gZGVpeGFyIGEgY2FtcGFuaGEgYWJlcnRhIHBvciBubyBtw6F4aW1vIDEyIG1lc2VzLicpXHJcbiAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnNS85JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUHJhem8gcGFyYSByZXBhc3NlJylcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCAnQXDDs3MgZW5jZXJyYXIgYSBzdWEgY2FtcGFuaGEgZSBjb25maXJtYXIgc2V1cyBkYWRvcyBiYW5jw6FyaW9zLCBvIENhdGFyc2UgcmVhbGl6YXLDoSBvIHJlcGFzc2UgZGlyZXRhbWVudGUgbmEgc3VhIGNvbnRhIGNvcnJlbnRlIGVtIGF0w6kgMTAgZGlhcyDDunRlaXMuIE8gdmFsb3IgZGVwb3NpdGFkbyBqw6EgZXN0YXLDoSBjb25zaWRlcmFuZG8gbyBkZXNjb250byBkZSAxMyUgZGEgdGF4YS4nKVxyXG4gICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzYvOScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ08gcXVlIHBvZGUgZSBuw6NvIHBvZGUgYWx0ZXJhciBuYSBww6FnaW5hIGRvIHByb2pldG8gYSBwYXJ0aXIgZGEgcHVibGljYcOnw6NvPycpXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgIFttKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1ZvY8OqIG7Do28gcG9kZXLDoTonKSwnIGFsdGVyYXIgbyB0aXBvIGRlIGZpbmFuY2lhbWVudG8sIG5vbWUgZG8gcHJvamV0bywgYSBVUkwgKGxpbmspIGRvIHByb2pldG8sIGEgY2F0ZWdvcmlhIGVzY29saGlkYSwgYSBtZXRhIGRlIGFycmVjYWRhw6fDo28sIG8gcHJhem8gKGNhc28gasOhIHRlbmhhIGRlZmluaWRvKSwgYXMgcmVjb21wZW5zYXMgb25kZSBleGlzdGlyZW0gYXBvaW9zIGrDoSBlZmV0dWFkb3MgZSBhIGNvbnRhIGJhbmPDoXJpYSByZWdpc3RyYWRhLlxcXHJcbiAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgICAgICAgICAgICAgICAgICAgLG0oJ2JyJyksbSgnYnInKSxtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnVm9jw6ogcG9kZXLDoTogJyksJ2VkaXRhciBvIGNvbnRlw7pkbyBkYSBkZXNjcmnDp8OjbyBkbyBwcm9qZXRvLCBhbHRlcmFyIG8gdsOtZGVvIHByaW5jaXBhbCBkYSBjYW1wYW5oYSwgYSBpbWFnZW0gZG8gcHJvamV0bywgYSBmcmFzZSBkZSBlZmVpdG8sIGFzIHJlY29tcGVuc2FzIG9uZGUgbsOjbyBleGlzdGlyZW0gYXBvaW9zIGVmZXR1YWRvcywgYWzDqW0gZGUgYWRpY2lvbmFyIG5vdmFzIHJlY29tcGVuc2FzIGR1cmFudGUgYSBhcnJlY2FkYcOnw6NvLiddKV1cclxuICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc3LzknKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcclxuICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdSZXNwb25zYWJpbGlkYWRlIGRvIENhdGFyc2UnKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICBbbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdPIENhdGFyc2Ugw6kgcmVzcG9uc8OhdmVsOicpLCfCoHBlbG8gZGVzZW52b2x2aW1lbnRvIHRlY25vbMOzZ2ljbyBkYSBwbGF0YWZvcm1hLCBhdGVuZGltZW50byBkZSBkw7p2aWRhcyBlIHByb2JsZW1hcyAodGFudG8gZGUgYXBvaWFkb3JlcyBxdWFudG8gZGUgcmVhbGl6YWRvcmVzKSwgcG9yIGhvc3BlZGFyIG8gcHJvamV0byBuYSBwbGF0YWZvcm1hIGUgcG9yIGdhcmFudGlyIGEgc2VndXJhbsOnYSBkYXMgdHJhbnNhw6fDtWVzIGZpbmFuY2VpcmFzLlxcICcsbSgnYnInKSxtKCdicicpLG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdPIENhdGFyc2UgbsOjbyDDqSByZXNwb25zw6F2ZWw6JyksJ8KgcGVsbyBmaW5hbmNpYW1lbnRvLCBkaXZ1bGdhw6fDo28gZSBleGVjdcOnw6NvLCBuZW0gcGVsYSBlbnRyZWdhIGRlIHJlY29tcGVuc2FzIGRvcyBwcm9qZXRvcyBpbnNjcml0b3MuJ10pXVxyXG4gICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzgvOScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1N1YXMgcmVzcG9uc2FiaWxpZGFkZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnKSxtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnKSwnw4kgc3VhIHJlc3BvbnNhYmlsaWRhZGUgdHVkbyBhcXVpbG8gcXVlIGRpeiByZXNwZWl0byBhIGZvcm1hdGHDp8OjbyBkbyBwcm9qZXRvLCBwbGFuZWphbWVudG8gZSBkaXZ1bGdhw6fDo28gZGEgY2FtcGFuaGEgZGUgYXJyZWNhZGHDp8OjbywgbW9iaWxpemHDp8OjbyBkZSBhcG9pYWRvcmVzLCBleGVjdcOnw6NvIGRvIHByb2pldG8sIHByb2R1w6fDo28gZSBlbnRyZWdhIGRlIHJlY29tcGVuc2FzIGRlbnRybyBkbyBwcmF6byBlc3RpbWFkbyBlIGNvbXVuaWNhw6fDo28gY29tIGFwb2lhZG9yZXMuJ10pXHJcbiAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzkvOScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcclxuICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7c3R5bGU6IHsnZm9udC13ZWlnaHQnOiAnIDYwMCd9fSwgJ1JldGlyYWRhcyBkZSBwcm9qZXRvcyBubyBhcicpXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLCdPIENBVEFSU0UgcmVzZXJ2YS1zZSBvIGRpcmVpdG8gZGUsIGEgc2V1IGV4Y2x1c2l2byBjcml0w6lyaW8gZSB1bWEgdmV6IG5vdGlmaWNhZG8gYSByZXNwZWl0bywgY2FuY2VsYXIgcHJvamV0b3MgZSBlbmNlcnJhciBhcyBjb250YXMgZGUgQ1JJQURPUkVTIERFIFBST0pFVE9TIHF1ZSB2aW9sZW0gbm9zc2FzICcsbSgnYS5hbHQtbGlua1tocmVmPVxcJ2h0dHA6Ly9zdXBvcnRlLmNhdGFyc2UubWUvaGMvcHQtYnIvYXJ0aWNsZXMvMjAyMzg3NjM4LURpcmV0cml6ZXMtcGFyYS1jcmlhJUMzJUE3JUMzJUEzby1kZS1wcm9qZXRvc1xcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnUmVncmFzIGRvIEpvZ28nKSwnIGUgJyxtKCdhLmFsdC1saW5rW2hyZWY9XFwnaHR0cDovL3d3dy5jYXRhcnNlLm1lL3Rlcm1zLW9mLXVzZVxcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnVGVybW9zIGRlIFVzbycpLCcuJ10pXHJcbiAgICAgICAgICAgICAgICAgIF0pXHJcblxyXG4gICAgICAgICAgXTtcclxuICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgdGVybXMgPSAocHJvamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiBbbSgnLnctY29sLnctY29sLTExJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnMS85JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1JlZ3JhcyBkYSBtb2RhbGlkYWRlIFR1ZG8tb3UtbmFkYScpXHJcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFsnVm9jw6ogZXNjb2xoZXUgYSBjYW1wYW5oYSB0dWRvLW91LW5hZGEuIERlc3NhIG1hbmVpcmEsIHZvY8OqIHPDsyBpcsOhIHJlY2ViZXIgb3MgcmVjdXJzb3MgYXJyZWNhZGFkb3MgJyxtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnY2FzbyBhdGluamEgb3Ugc3VwZXJlIGEgbWV0YSBkZSBhcnJlY2FkYcOnw6NvJyksJy4gQ2FzbyBjb250csOhcmlvLCB0b2RvcyBzZXVzIGFwb2lhZG9yZXMgc2Vyw6NvIHJlZW1ib2xzYWRvcy4gVm9jw6ogc2Vyw6EgcmVzcG9uc8OhdmVsIHBlbGEgZW50cmVnYSBkYXMgcmVjb21wZW5zYXMgb2ZlcmVjaWRhcyBzZSBzZXUgcHJvamV0byBhbGNhbsOnYXIgYSBtZXRhIGRlIGFycmVjYWRhw6fDo28uJ10pXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzIvOScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdNZXRhIGRlIGFycmVjYWRhw6fDo28nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCAnQSBtZXRhIG7Do28gcG9kZXLDoSBzZXIgYWx0ZXJhZGEgYXDDs3MgbyBwdWJsaWNhw6fDo28gZG8gcHJvamV0by4nKSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzMvOScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdUYXhhcycpXHJcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvYnJhbW9zIDEzJSBzb2JyZSBvICcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICd2YWxvciB0b3RhbCBhcnJlY2FkYWRvJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcgcGVsbyBzZXUgcHJvamV0byBjYXNvIGVsZSBhdGluamEgb3Ugc3VwZXJlIGEgbWV0YSBkZW50cm8gZG8gcHJhem8gZGEgY2FtcGFuaGEuIFNlIG8gcHJvamV0byBuw6NvIGF0aW5naXIgYSBtZXRhLCBuZW5odW1hIHRheGEgc2Vyw6EgY29icmFkYS4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnNC85JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7c3R5bGU6IHsnZm9udC13ZWlnaHQnOiAnIDYwMCd9fSwgJ1ByYXpvIGRhIGNhbXBhbmhhJylcclxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgYFNldSBwcm9qZXRvIGVzdGFyw6EgZW0gYXJyZWNhZGHDp8OjbyBubyBDYXRhcnNlIGF0w6kgbyBkaWEgJHtoLm1vbWVudGlmeShjdHJsLmV4cGlyZXNBdCgpKX0gw6BzIDIzaDU5bWluNTlzLiBFc3RlIHByYXpvIG7Do28gcG9kZXLDoSBzZXIgYWx0ZXJhZG8gYXDDs3MgYSBwdWJsaWNhw6fDo28gZG8gcHJvamV0by5gKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc1LzknKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3BhbicsIHtzdHlsZTogeydmb250LXdlaWdodCc6ICcgNjAwJ319LCAnUmVncmFzIGRvIHJlcGFzc2UgZSByZWVtYm9sc28nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbJ0Fww7NzIGVuY2VycmFyIG8gc2V1IHByb2pldG8gZSBjb25maXJtYXIgc2V1cyBkYWRvcyBiYW5jw6FyaW9zLCBvIENhdGFyc2UgZGVwb3NpdGFyw6EgbyB2YWxvciBhcnJlY2FkYWRvLCBqw6EgY29tIG8gZGVzY29udG8gZGEgdGF4YSwgbmEgc3VhIGNvbnRhIGNvcnJlbnRlIGVtIGF0w6kgMTAgZGlhcyDDunRlaXMuIENhc28gbyBwcm9qZXRvIG7Do28gYXRpbmphIDEwMCUgZGEgbWV0YSBkZW50cm8gZG8gcHJhem8sIG8gQ2F0YXJzZSBpcsOhIHJlZW1ib2xzYXIgb3MgYXBvaWFkb3Jlcy4gJyxtKCdhLmFsdC1saW5rW2hyZWY9XFwnaHR0cDovL3N1cG9ydGUuY2F0YXJzZS5tZS9oYy9wdC1ici9hcnRpY2xlcy8yMDIzNjU1MDdcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJywgJ1NhaWJhIG1haXMgc29icmUgbyBwcm9jZXNzbyBkZSByZWVtYm9sc28nKSwnLiddKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc2LzknKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3BhbicsIHtzdHlsZTogeydmb250LXdlaWdodCc6ICcgNjAwJ319LCAnTyBxdWUgcG9kZSBlIG7Do28gcG9kZSBhbHRlcmFyIG5hIHDDoWdpbmEgZG8gcHJvamV0byBhIHBhcnRpciBkYSBwdWJsaWNhw6fDo28/JylcclxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIFttKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1ZvY8OqIG7Do28gcG9kZXLDoTonKSwnIGFsdGVyYXIgbyBub21lIGRvIHByb2pldG8sIGEgVVJMIChsaW5rKSBkbyBwcm9qZXRvLCBhIGNhdGVnb3JpYSBlc2NvbGhpZGEsIG8gdGlwbyBkZSBmaW5hbmNpYW1lbnRvLCBhIGNvbnRhIGJhbmPDoXJpYSwgYSBtZXRhIGRlIGFycmVjYWRhw6fDo28sIG8gcHJhem8gZXNjb2xoaWRvIGUgYXMgcmVjb21wZW5zYXMgb25kZSBleGlzdGlyZW0gYXBvaW9zIGrDoSBlZmV0dWFkb3MuXFwgJyxtKCdicicpLG0oJ2JyJyksbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ1ZvY8OqIHBvZGVyw6E6ICcpLCdlZGl0YXIgbyBjb250ZcO6ZG8gZGEgZGVzY3Jpw6fDo28gZG8gcHJvamV0bywgYWx0ZXJhciBvIHbDrWRlbyBwcmluY2lwYWwgZGEgY2FtcGFuaGEsIGEgaW1hZ2VtIGRvIHByb2pldG8sIGEgZnJhc2UgZGUgZWZlaXRvLCBhcyByZWNvbXBlbnNhcyBvbmRlIG7Do28gZXhpc3RpcmVtIGFwb2lvcyBlZmV0dWFkb3MsIGFsw6ltIGRlIGFkaWNpb25hciBub3ZhcyByZWNvbXBlbnNhcyBkdXJhbnRlIGEgYXJyZWNhZGHDp8Ojby4nXSldXSksXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVzdC5mb250Y29sb3Itc2Vjb25kYXJ5JywgJzcvOScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnwqAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuJywge3N0eWxlOiB7J2ZvbnQtd2VpZ2h0JzogJyA2MDAnfX0sICdSZXNwb25zYWJpbGlkYWRlIGRvIENhdGFyc2UnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgW20oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnKSxtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnTyBDYXRhcnNlIMOpIHJlc3BvbnPDoXZlbDonKSwnwqBwZWxvIGRlc2Vudm9sdmltZW50byB0ZWNub2zDs2dpY28gZGEgcGxhdGFmb3JtYSwgYXRlbmRpbWVudG8gZGUgZMO6dmlkYXMgZSBwcm9ibGVtYXMgKHRhbnRvIGRlIGFwb2lhZG9yZXMgcXVhbnRvIGRlIHJlYWxpemFkb3JlcyksIHBvciBob3NwZWRhciBvIHByb2pldG8gbmEgcGxhdGFmb3JtYSBlIHBvciBnYXJhbnRpciBhIHNlZ3VyYW7Dp2EgZGFzIHRyYW5zYcOnw7VlcyBmaW5hbmNlaXJhcy5cXCAnLG0oJ2JyJyksbSgnYnInKSxtKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnTyBDYXRhcnNlIG7Do28gw6kgcmVzcG9uc8OhdmVsOicpLCfCoHBlbG8gZmluYW5jaWFtZW50bywgZGl2dWxnYcOnw6NvIGUgZXhlY3XDp8OjbywgbmVtIHBlbGEgZW50cmVnYSBkZSByZWNvbXBlbnNhcyBkb3MgcHJvamV0b3MgaW5zY3JpdG9zLiddKV1dKSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci1zZWNvbmRhcnknLCAnOC85JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICfCoCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7c3R5bGU6IHsnZm9udC13ZWlnaHQnOiAnIDYwMCd9fSwgJ1N1YXMgcmVzcG9uc2FiaWxpZGFkZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyksbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJyksJ8OJIHN1YSByZXNwb25zYWJpbGlkYWRlIHR1ZG8gYXF1aWxvIHF1ZSBkaXogcmVzcGVpdG8gYSBmb3JtYXRhw6fDo28gZG8gcHJvamV0bywgcGxhbmVqYW1lbnRvIGUgZGl2dWxnYcOnw6NvIGRhIGNhbXBhbmhhIGRlIGFycmVjYWRhw6fDo28sIG1vYmlsaXphw6fDo28gZGUgYXBvaWFkb3JlcywgZXhlY3XDp8OjbyBkbyBwcm9qZXRvLCBwcm9kdcOnw6NvIGUgZW50cmVnYSBkZSByZWNvbXBlbnNhcyBkZW50cm8gZG8gcHJhem8gZXN0aW1hZG8gZSBjb211bmljYcOnw6NvIGNvbSBhcG9pYWRvcmVzLiddKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTEnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICc5LzknKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ8KgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3BhbicsIHtzdHlsZTogeydmb250LXdlaWdodCc6ICcgNjAwJ319LCAnUmV0aXJhZGFzIGRlIHByb2pldG9zIG5vIGFyJylcclxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcpLCdPIENBVEFSU0UgcmVzZXJ2YS1zZSBvIGRpcmVpdG8gZGUsIGEgc2V1IGV4Y2x1c2l2byBjcml0w6lyaW8gZSB1bWEgdmV6IG5vdGlmaWNhZG8gYSByZXNwZWl0bywgY2FuY2VsYXIgcHJvamV0b3MgZSBlbmNlcnJhciBhcyBjb250YXMgZGUgQ1JJQURPUkVTIERFIFBST0pFVE9TIHF1ZSB2aW9sZW0gbm9zc2FzICcsbSgnYS5hbHQtbGlua1tocmVmPVxcJ2h0dHA6Ly9zdXBvcnRlLmNhdGFyc2UubWUvaGMvcHQtYnIvYXJ0aWNsZXMvMjAyMzg3NjM4LURpcmV0cml6ZXMtcGFyYS1jcmlhJUMzJUE3JUMzJUEzby1kZS1wcm9qZXRvc1xcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnUmVncmFzIGRvIEpvZ28nKSwnIGUgJyxtKCdhLmFsdC1saW5rW2hyZWY9XFwnaHR0cDovL3d3dy5jYXRhcnNlLm1lL3Rlcm1zLW9mLXVzZVxcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnVGVybW9zIGRlIFVzbycpLCcuJ10pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuXHJcbiAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBbIWN0cmwubCgpICYmICFjdHJsLmFjY291bnRMKCkgPyBbXHJcbiAgICAgICAgKHByb2plY3QuaXNfb3duZXJfb3JfYWRtaW4gPyBtLmNvbXBvbmVudChwcm9qZWN0RGFzaGJvYXJkTWVudSwge1xyXG4gICAgICAgICAgICBwcm9qZWN0OiBtLnByb3AocHJvamVjdCksXHJcbiAgICAgICAgICAgIGhpZGVQdWJsaXNoOiB0cnVlXHJcbiAgICAgICAgfSkgOiAnJyksXHJcbiAgICAgICAgbShgLnctc2VjdGlvbi5zZWN0aW9uLXByb2R1Y3QuJHtwcm9qZWN0Lm1vZGV9YCksXHJcbiAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uJywgW1xyXG4gICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xyXG4gICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKSxcclxuICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcclxuICAgICAgICAgICAgICAgIG0oJy51LXRleHQtY2VudGVyJywgW1xyXG4gICAgICAgICAgICAgICAgICBtKCdpbWcudS1tYXJnaW5ib3R0b20tMjBbc3JjPVxcJy9hc3NldHMvY2F0YXJzZV9ib290c3RyYXAvbGF1bmNoLWljb24ucG5nXFwnXVt3aWR0aD1cXCc5NFxcJ10nKSxcclxuICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tMjAnLCAnUHJvbnRvIHBhcmEgbGFuw6dhciBzdWEgY2FtcGFuaGE/JyksXHJcbiAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTMwJywgJ1ByZXBhcmFtb3MgdW1hIGxpc3RhIGNvbSBpbmZvcm1hw6fDtWVzIGltcG9ydGFudGVzIHBhcmEgdm9jw6ogY2hlY2FyIGFudGVzIGRlIGNvbG9jYXIgc2V1IHByb2pldG8gbm8gYXIhJylcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgICAgXSlcclxuICAgICAgICBdKSxcclxuICAgICAgICBtKCcuZGl2aWRlcicpLFxyXG4gICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi1vbmUtY29sdW1uLmJnLWdyYXkuc2VjdGlvbi5iZWZvcmUtZm9vdGVyJywgW1xyXG4gICAgICAgICAgbSgnLnctY29udGFpbmVyJywgW1xyXG4gICAgICAgICAgICBtKCcuY2FyZC5tZWRpdW0udS1tYXJnaW5ib3R0b20tNjAuY2FyZC10ZXJjaWFyeScsIFtcclxuICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNi53LWNsZWFyZml4JywgW1xyXG4gICAgICAgICAgICAgICAgICBtKCdpbWcuY2FyZC1wcm9qZWN0LXRodW1iLnUtcmlnaHRbc3JjPScgKyBwcm9qZWN0LmxhcmdlX2ltYWdlICsgJ10nKVxyXG4gICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcclxuICAgICAgICAgICAgICAgICAgbSgnLnUtbWFyZ2luYm90dG9tLTMwLmZvbnRzaXplLWJhc2UnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdUw610dWxvOiAnKSwgcHJvamVjdC5uYW1lXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdMaW5rOiAnKSxgd3d3LmNhdGFyc2UubWUvJHtwcm9qZWN0LnBlcm1hbGlua31gXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdNb2RhbGlkYWRlIGRlIGZpbmFuY2lhbWVudG86ICcpLCBJMThuLnQocHJvamVjdC5tb2RlLCBJMThuU2NvcGUoKSldKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbbSgnc3Bhbi5mb250d2VpZ2h0LXNlbWlib2xkJywgJ01ldGEgZGUgYXJyZWNhZGHDp8OjbzogJyksYFIkICR7aC5mb3JtYXROdW1iZXIocHJvamVjdC5nb2FsLCAyLCAzKX1gXSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHByb2plY3Qub25saW5lX2RheXMgIT09IG51bGwpID8gbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsIGBQcmF6bzogJHtwcm9qZWN0Lm9ubGluZV9kYXlzfSAkeyhwcm9qZWN0Lm9ubGluZV9kYXlzID4gMSkgPyAnZGlhcycgOiAnZGlhJyB9YCldKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFttKCdzcGFuLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCAnUmVzcG9uc8OhdmVsOiAnKSwgYWNjb3VudC5vd25lcl9uYW1lXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW20oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdDUEYvQ05QSjogJyksIGFjY291bnQub3duZXJfZG9jdW1lbnRdKVxyXG4gICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEnKSxcclxuICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5kaXZpZGVyLnUtbWFyZ2luYm90dG9tLTEwJyksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLmZvbnRjb2xvci1zZWNvbmRhcnknLCAnT3MgZGFkb3MgYWNpbWEgbsOjbyBwb2RlbSBzZXIgYWx0ZXJhZG9zIGFww7NzIG8gcHJvamV0byBlbnRyYXIgbm8gYXIuIFNlIHZvY8OqIHByZWNpc2EgZmF6ZXIgbXVkYW7Dp2FzLCBuYXZlZ3VlIG5hIGJhcnJhIGxhdGVyYWwgZSB2b2x0ZSBhcXVpIHF1YW5kbyBlc3RpdmVyIHR1ZG8gcHJvbnRvIScpXHJcbiAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMScpXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBtKCcuY2FyZC5tZWRpdW0udS1yYWRpdXMudS1tYXJnaW5ib3R0b20tNjAnLCBbXHJcbiAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tNjAnLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UuZm9udHdlaWdodC1zZW1pYm9sZCcsICdSZWxlbWJyZSBub3NzYXMgcmVncmFzJyksXHJcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJyksXHJcbiAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC04JywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbCcsIFsnQW50ZXMgZGUgcHVibGljYXIsIGNsaXF1ZSBub3MgY8OtcmN1bG9zIGFiYWl4byBlIGNvbmZpcm1lIHF1ZSB2b2PDqiBlc3TDoSBjaWVudGUgZGUgY29tbyBmdW5jaW9uYSBvIENhdGFyc2UuIFF1YWxxdWVyIGTDunZpZGEsICcsbSgnYS5hbHQtbGlua1tocmVmPVxcJ2h0dHBzOi8vZXF1aXBlY2F0YXJzZS56ZW5kZXNrLmNvbS9hY2NvdW50L2Ryb3Bib3hlcy8yMDI5ODUzN1xcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnZW50cmUgZW0gY29udGF0bycpLCchJ10pXHJcbiAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgIF0pLFxyXG5cclxuICAgICAgICAgICAgICBfLm1hcChwcm9qZWN0Lm1vZGUgPT0gJ2ZsZXgnID8gZmxleFRlcm1zKHByb2plY3QpIDogdGVybXMocHJvamVjdCksICh0ZXJtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gbShgLnUtbWFyZ2luYm90dG9tLTMwLmZvbnRzaXplLWJhc2Uke2luZGV4ID09IDAgPyAnJyA6ICcudy1oaWRkZW4ucHVibGlzaC1ydWxlcyd9YCwgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oYC53LXJvd1tpZD0ncnVsZS0ke2luZGV4fSddYCwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oKHByb2plY3QubW9kZSA9PSAnZmxleCcgPyBjdHJsLmZsZXhBY2NlcHRUZXJtKCkgOiBjdHJsLmFjY2VwdFRlcm0oKSlbaW5kZXhdID8gYGEudy1pbmxpbmUtYmxvY2suY2hlY2tib3gtYmlnW2hyZWY9JyNydWxlLSR7aW5kZXggKyAxfSddYCA6IGBhLnctaW5saW5lLWJsb2NrLmNoZWNrYm94LWJpZy5jaGVja2JveC0tc2VsZWN0ZWQuZmEuZmEtY2hlY2suZmEtbGdbaHJlZj0nI3J1bGUtJHtpbmRleCArIDF9J11gLCB7b25jbGljazogKCkgPT4gY3RybC5zaG93TmV4dFRlcm0oaW5kZXgsIChwcm9qZWN0Lm1vZGUgPT0gJ2ZsZXgnID8gY3RybC5mbGV4QWNjZXB0VGVybSA6IGN0cmwuYWNjZXB0VGVybSkpfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGVybVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIG0oJy53LXJvdy5wdWJsaXNoLWJ0bi1zZWN0aW9uLnctaGlkZGVuJywgW1xyXG4gICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JyksXHJcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXHJcbiAgICAgICAgICAgICAgICBtKGBhLmJ0bi5idG4tbGFyZ2UudS1tYXJnaW5ib3R0b20tMjBbaHJlZj0vJHtwcm9qZWN0Lm1vZGUgPT0gJ2ZsZXgnID8gJ2ZsZXhpYmxlX3Byb2plY3RzJyA6ICdwcm9qZWN0cyd9LyR7cHJvamVjdC5pZH0vcHVzaF90b19vbmxpbmVdYCwgJ1B1YmxpY2FyIGFnb3JhIScpLFxyXG4gICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXIuZm9udHNpemUtc21hbGxlcicsIFtcclxuICAgICAgICAgICAgICAgICAgJ0FvIHB1YmxpY2FyIG8gc2V1IHByb2pldG8sIHZvY8OqIGVzdMOhIGFjZWl0YW5kbyBvcyAnLFxyXG4gICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XFwnL3Rlcm1zLW9mLXVzZVxcJ11bdGFyZ2V0PVxcJ19ibGFua1xcJ10nLCAnVGVybW9zIGRlIFVzbycpLFxyXG4gICAgICAgICAgICAgICAgICAnLCAnLFxyXG4gICAgICAgICAgICAgICAgICBwcm9qZWN0Lm1vZGUgPT0gJ2ZsZXgnID9cclxuICAgICAgICAgICAgICAgICAgICBtKCdhLmFsdC1saW5rW2hyZWY9XFwnaHR0cDovL3N1cG9ydGUuY2F0YXJzZS5tZS9oYy9wdC1ici9hcnRpY2xlcy8yMDY1NzQ4MzMtUmVncmFzLXBhcmEtYS1mYXNlLWRlLXRlc3Rlcy1kby1DYXRhcnNlLUZsZXhcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJywgJ1JlZ3JhcyBkbyBGbGV4JykgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgJyBlICcsXHJcbiAgICAgICAgICAgICAgICAgIG0oJ2EuYWx0LWxpbmtbaHJlZj1cXCcvcHJpdmFjeS1wb2xpY3lcXCddW3RhcmdldD1cXCdfYmxhbmtcXCddJywgJ1BvbGl0aWNhIGRlIFByaXZhY2lkYWRlJylcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnKVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgICAgXSlcclxuICAgICAgICBdKSxcclxuICAgICAgICAnXFxcclxuICAgICdcclxuICAgICAgXSA6IGgubG9hZGVyKCldO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHVibGlzaDtcclxuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcblxyXG5jb25zdCBzdGFydFZNID0gKEkxOG4pID0+IHtcclxuICAgIGNvbnN0IGkxOG5TdGFydCA9IEkxOG4udHJhbnNsYXRpb25zW0kxOG4uY3VycmVudExvY2FsZSgpXS5wYWdlcy5zdGFydCxcclxuICAgICAgICB0ZXN0aW1vbmlhbHMgPSBpMThuU3RhcnQudGVzdGltb25pYWxzLFxyXG4gICAgICAgIGNhdGVnb3J5UHJvamVjdHMgPSBpMThuU3RhcnQuY2F0ZWdvcnlQcm9qZWN0cyxcclxuICAgICAgICBwYW5lcyA9IGkxOG5TdGFydC5wYW5lcyxcclxuICAgICAgICBxYSA9IGkxOG5TdGFydC5xYTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRlc3RpbW9uaWFsczogXy5tYXAodGVzdGltb25pYWxzLCAodGVzdGltb25pYWwpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRodW1iVXJsOiB0ZXN0aW1vbmlhbC50aHVtYixcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRlc3RpbW9uaWFsLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiB0ZXN0aW1vbmlhbC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgdG90YWxzOiB0ZXN0aW1vbmlhbC50b3RhbHNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KSxcclxuICAgICAgICBwYW5lczogXy5tYXAocGFuZXMsIChwYW5lKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogcGFuZS5sYWJlbCxcclxuICAgICAgICAgICAgICAgIHNyYzogcGFuZS5zcmNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KSxcclxuICAgICAgICBxdWVzdGlvbnM6IHtcclxuICAgICAgICAgICAgY29sXzE6IF8ubWFwKHFhLmNvbF8xLCAocXVlc3Rpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246IHF1ZXN0aW9uLnF1ZXN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuc3dlcjogcXVlc3Rpb24uYW5zd2VyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgY29sXzI6IF8ubWFwKHFhLmNvbF8yLCAocXVlc3Rpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246IHF1ZXN0aW9uLnF1ZXN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuc3dlcjogcXVlc3Rpb24uYW5zd2VyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2F0ZWdvcnlQcm9qZWN0czogXy5tYXAoY2F0ZWdvcnlQcm9qZWN0cywgKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yeUlkOiBjYXRlZ29yeS5jYXRlZ29yeV9pZCxcclxuICAgICAgICAgICAgICAgIHNhbXBsZVByb2plY3RzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkuc2FtcGxlX3Byb2plY3RfaWRzLnByaW1hcnksXHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkuc2FtcGxlX3Byb2plY3RfaWRzLnNlY29uZGFyeVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pXHJcbiAgICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3RhcnRWTTtcclxuIiwiLyoqXHJcbiAqIHdpbmRvdy5jLnlvdXR1YmVMaWdodGJveCBjb21wb25lbnRcclxuICogQSB2aXN1YWwgY29tcG9uZW50IHRoYXQgZGlzcGxheXMgYSBsaWdodGJveCB3aXRoIGEgeW91dHViZSB2aWRlb1xyXG4gKlxyXG4gKiBFeGFtcGxlOlxyXG4gKiB2aWV3OiAoKSA9PiB7XHJcbiAqICAgICAgLi4uXHJcbiAqICAgICAgbS5jb21wb25lbnQoYy55b3V0dWJlTGlnaHRib3gsIHtzcmM6ICdodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUZsRlRjRFNLbkxNJ30pXHJcbiAqICAgICAgLi4uXHJcbiAqICB9XHJcbiAqL1xyXG5cclxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcblxyXG5jb25zdCB5b3V0dWJlTGlnaHRib3ggPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBsZXQgcGxheWVyO1xyXG4gICAgICAgIGNvbnN0IHNob3dMaWdodGJveCA9IGgudG9nZ2xlUHJvcChmYWxzZSwgdHJ1ZSksXHJcbiAgICAgICAgICAgIHNldFlvdXR1YmUgPSAoZWwsIGlzSW5pdGlhbGl6ZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFNjcmlwdFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcclxuICAgICAgICAgICAgICAgICAgICB0YWcuc3JjID0gJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGknO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRhZywgZmlyc3RTY3JpcHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vbllvdVR1YmVJZnJhbWVBUElSZWFkeSA9IGNyZWF0ZVBsYXllcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2xvc2VWaWRlbyA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChwbGF5ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLnBhdXNlVmlkZW8oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzaG93TGlnaHRib3gudG9nZ2xlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjcmVhdGVQbGF5ZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIgPSBuZXcgWVQuUGxheWVyKCd5dHZpZGVvJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzUyOCcsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc5NDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvSWQ6IGFyZ3Muc3JjLFxyXG4gICAgICAgICAgICAgICAgICAgIHBsYXllclZhcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0luZm86IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVzdEJyYW5kaW5nOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBldmVudHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ29uU3RhdGVDaGFuZ2UnOiAoc3RhdGUpID0+IChzdGF0ZS5kYXRhID09PSAwKSA/IGNsb3NlVmlkZW8oKSA6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNob3dMaWdodGJveDogc2hvd0xpZ2h0Ym94LFxyXG4gICAgICAgICAgICBzZXRZb3V0dWJlOiBzZXRZb3V0dWJlLFxyXG4gICAgICAgICAgICBjbG9zZVZpZGVvOiBjbG9zZVZpZGVvXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbSgnI3lvdXR1YmUtbGlnaHRib3gnLCBbXHJcbiAgICAgICAgICAgIG0oJ2EjeW91dHViZS1wbGF5LnctbGlnaHRib3gudy1pbmxpbmUtYmxvY2suZmEuZmEtcGxheS1jaXJjbGUuZm9udGNvbG9yLW5lZ2F0aXZlLmZhLTV4W2hyZWY9XFwnamF2YXNjcmlwdDp2b2lkKDApO1xcJ10nLCB7XHJcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3RybC5zaG93TGlnaHRib3gudG9nZ2xlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJncy5vbmNsaWNrICYmIGFyZ3Mub25jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbShgI2xpZ2h0Ym94LnctbGlnaHRib3gtYmFja2Ryb3Bbc3R5bGU9XCJkaXNwbGF5OiR7Y3RybC5zaG93TGlnaHRib3goKSA/ICdibG9jaycgOiAnbm9uZSd9XCJdYCwgW1xyXG4gICAgICAgICAgICAgICAgbSgnLnctbGlnaHRib3gtY29udGFpbmVyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWxpZ2h0Ym94LWNvbnRlbnQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWxpZ2h0Ym94LXZpZXcnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1saWdodGJveC1mcmFtZScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdmaWd1cmUudy1saWdodGJveC1maWd1cmUnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2ltZy53LWxpZ2h0Ym94LWltZy53LWxpZ2h0Ym94LWltYWdlW3NyYz1cXCdkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwlM0NzdmclMjB4bWxucz0lMjJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyUyMiUyMHdpZHRoPSUyMjk0MCUyMiUyMGhlaWdodD0lMjI1MjglMjIvJTNFXFwnXScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcjeXR2aWRlby5lbWJlZGx5LWVtYmVkLnctbGlnaHRib3gtZW1iZWQnLCB7Y29uZmlnOiBjdHJsLnNldFlvdXR1YmV9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctbGlnaHRib3gtc3Bpbm5lci53LWxpZ2h0Ym94LWhpZGUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctbGlnaHRib3gtY29udHJvbC53LWxpZ2h0Ym94LWxlZnQudy1saWdodGJveC1pbmFjdGl2ZScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1saWdodGJveC1jb250cm9sLnctbGlnaHRib3gtcmlnaHQudy1saWdodGJveC1pbmFjdGl2ZScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcjeW91dHViZS1jbG9zZS53LWxpZ2h0Ym94LWNvbnRyb2wudy1saWdodGJveC1jbG9zZScsIHtvbmNsaWNrOiBjdHJsLmNsb3NlVmlkZW99KVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWxpZ2h0Ym94LXN0cmlwJylcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB5b3V0dWJlTGlnaHRib3g7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IGggZnJvbSAnLi4vaCc7XHJcbmltcG9ydCBJMThuIGZyb20gJ2kxOG4tanMnO1xyXG5pbXBvcnQgc3RhcnRWTSBmcm9tICcuLi92bXMvc3RhcnQtdm0nO1xyXG5pbXBvcnQgeW91dHViZUxpZ2h0Ym94IGZyb20gJy4uL2MveW91dHViZS1saWdodGJveCc7XHJcbmltcG9ydCBzbGlkZXIgZnJvbSAnLi4vYy9zbGlkZXInO1xyXG5pbXBvcnQgbGFuZGluZ1FBIGZyb20gJy4uL2MvbGFuZGluZy1xYSc7XHJcblxyXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICdwYWdlcy5zdGFydCcpO1xyXG5cclxuY29uc3Qgc3RhcnQgPSB7XHJcbiAgICBjb250cm9sbGVyKCkge1xyXG4gICAgICAgIGguYW5hbHl0aWNzLndpbmRvd1Njcm9sbCh7Y2F0OiAncHJvamVjdF9zdGFydCcsYWN0OiAnc3RhcnRfcGFnZV9zY3JvbGwnfSk7XHJcbiAgICAgICAgY29uc3Qgc3RhdHMgPSBtLnByb3AoW10pLFxyXG4gICAgICAgICAgICBjYXRlZ29yaWVzID0gbS5wcm9wKFtdKSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRQYW5lID0gbS5wcm9wKDApLFxyXG4gICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5ID0gbS5wcm9wKFtdKSxcclxuICAgICAgICAgICAgZmVhdHVyZWRQcm9qZWN0cyA9IG0ucHJvcChbXSksXHJcbiAgICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnlJZHggPSBtLnByb3AoLTEpLFxyXG4gICAgICAgICAgICBzdGFydHZtID0gc3RhcnRWTShJMThuKSxcclxuICAgICAgICAgICAgZmlsdGVycyA9IHBvc3RncmVzdC5maWx0ZXJzVk0sXHJcbiAgICAgICAgICAgIHBhbmVJbWFnZXMgPSBzdGFydHZtLnBhbmVzLFxyXG4gICAgICAgICAgICBjYXRlZ29yeXZtID0gZmlsdGVycyh7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yeV9pZDogJ2VxJ1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgcHJvamVjdHZtID0gZmlsdGVycyh7XHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiAnZXEnXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB1c2Vydm0gPSBmaWx0ZXJzKHtcclxuICAgICAgICAgICAgICAgIGlkOiAnZXEnXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBsb2FkZXIgPSBwb3N0Z3Jlc3QubG9hZGVyLFxyXG4gICAgICAgICAgICBzdGF0c0xvYWRlciA9IGxvYWRlcihtb2RlbHMuc3RhdGlzdGljLmdldFJvd09wdGlvbnMoKSksXHJcbiAgICAgICAgICAgIGxvYWRDYXRlZ29yaWVzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVscy5jYXRlZ29yeS5nZXRQYWdlKGZpbHRlcnMoe30pLm9yZGVyKHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYXNjJ1xyXG4gICAgICAgICAgICAgICAgfSkucGFyYW1ldGVycygpKS50aGVuKGNhdGVnb3JpZXMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZWxlY3RQYW5lID0gKGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFBhbmUoaWR4KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxDYXRlZ29yeSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkZXIobW9kZWxzLmNhdGVnb3J5VG90YWxzLmdldFJvd09wdGlvbnMoY2F0ZWdvcnl2bS5wYXJhbWV0ZXJzKCkpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbFByb2plY3QgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGVyKG1vZGVscy5wcm9qZWN0RGV0YWlsLmdldFJvd09wdGlvbnMocHJvamVjdHZtLnBhcmFtZXRlcnMoKSkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsVXNlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkZXIobW9kZWxzLnVzZXJEZXRhaWwuZ2V0Um93T3B0aW9ucyh1c2Vydm0ucGFyYW1ldGVycygpKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlbGVjdENhdGVnb3J5ID0gKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnlJZHgoY2F0ZWdvcnkuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5dm0uY2F0ZWdvcnlfaWQoY2F0ZWdvcnkuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnkoW2NhdGVnb3J5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBsQ2F0ZWdvcnkoKS5sb2FkKCkudGhlbihsb2FkQ2F0ZWdvcnlQcm9qZWN0cyk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRVc2VyID0gKHVzZXIsIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZmVhdHVyZWRQcm9qZWN0cygpW2lkeF0gPSBfLmV4dGVuZCh7fSwgZmVhdHVyZWRQcm9qZWN0cygpW2lkeF0sIHtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyVGh1bWI6ICBfLmZpcnN0KHVzZXIpLnByb2ZpbGVfaW1nX3RodW1ibmFpbFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldFByb2plY3QgPSAocHJvamVjdCwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBmZWF0dXJlZFByb2plY3RzKClbaWR4XSA9IF8uZmlyc3QocHJvamVjdCk7XHJcbiAgICAgICAgICAgICAgICB1c2Vydm0uaWQoXy5maXJzdChwcm9qZWN0KS51c2VyLmlkKTtcclxuICAgICAgICAgICAgICAgIGxVc2VyKCkubG9hZCgpLnRoZW4oKHVzZXIpID0+IHNldFVzZXIodXNlciwgaWR4KSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxvYWRDYXRlZ29yeVByb2plY3RzID0gKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5KGNhdGVnb3J5KTtcclxuICAgICAgICAgICAgICAgIGxldCBjYXRlZ29yeVByb2plY3RzID0gXy5maW5kV2hlcmUoc3RhcnR2bS5jYXRlZ29yeVByb2plY3RzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlJZDogXy5maXJzdChjYXRlZ29yeSkuY2F0ZWdvcnlfaWRcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZmVhdHVyZWRQcm9qZWN0cyhbXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQoY2F0ZWdvcnlQcm9qZWN0cykpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLm1hcChjYXRlZ29yeVByb2plY3RzLnNhbXBsZVByb2plY3RzLCAocHJvamVjdF9pZCwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChwcm9qZWN0X2lkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdHZtLnByb2plY3RfaWQocHJvamVjdF9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsUHJvamVjdCgpLmxvYWQoKS50aGVuKChwcm9qZWN0KSA9PiBzZXRQcm9qZWN0KHByb2plY3QsIGlkeCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHN0YXRzTG9hZGVyLmxvYWQoKS50aGVuKHN0YXRzKTtcclxuICAgICAgICBsb2FkQ2F0ZWdvcmllcygpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0czogc3RhdHMsXHJcbiAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXMsXHJcbiAgICAgICAgICAgIHBhbmVJbWFnZXM6IHBhbmVJbWFnZXMsXHJcbiAgICAgICAgICAgIHNlbGVjdENhdGVnb3J5OiBzZWxlY3RDYXRlZ29yeSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeTogc2VsZWN0ZWRDYXRlZ29yeSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeUlkeDogc2VsZWN0ZWRDYXRlZ29yeUlkeCxcclxuICAgICAgICAgICAgc2VsZWN0UGFuZTogc2VsZWN0UGFuZSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRQYW5lOiBzZWxlY3RlZFBhbmUsXHJcbiAgICAgICAgICAgIGZlYXR1cmVkUHJvamVjdHM6IGZlYXR1cmVkUHJvamVjdHMsXHJcbiAgICAgICAgICAgIHRlc3RpbW9uaWFsczogc3RhcnR2bS50ZXN0aW1vbmlhbHMsXHJcbiAgICAgICAgICAgIHF1ZXN0aW9uczogc3RhcnR2bS5xdWVzdGlvbnNcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGxldCBzdGF0cyA9IF8uZmlyc3QoY3RybC5zdGF0cygpKTtcclxuICAgICAgICBjb25zdCB0ZXN0aW1vbmlhbHMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBfLm1hcChjdHJsLnRlc3RpbW9uaWFscywgKHRlc3RpbW9uaWFsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gbSgnLmNhcmQudS1yYWRpdXMuY2FyZC1iaWcuY2FyZC10ZXJjaWFyeScsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0yMCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbShgaW1nLnRodW1iLXRlc3RpbW9uaWFsLnUtcm91bmQudS1tYXJnaW5ib3R0b20tMjBbc3JjPVwiJHt0ZXN0aW1vbmlhbC50aHVtYlVybH1cIl1gKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMzAnLCBgXCIke3Rlc3RpbW9uaWFsLmNvbnRlbnR9XCJgKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCcudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCB0ZXN0aW1vbmlhbC5uYW1lKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UnLCB0ZXN0aW1vbmlhbC50b3RhbHMpXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uaGVyby1mdWxsLmhlcm8tc3RhcnQnLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbWVnYWp1bWJvLmZvbnR3ZWlnaHQtc2VtaWJvbGQudS1tYXJnaW5ib3R0b20tNDAnLCBJMThuLnQoJ3Nsb2dhbicsIEkxOG5TY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93LnUtbWFyZ2luYm90dG9tLTQwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1wdXNoLTQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLmJ0bi5idG4tbGFyZ2UudS1tYXJnaW5ib3R0b20tMTBbaHJlZj1cIiNzdGFydC1mb3JtXCJdJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogaC5zY3JvbGxUbygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3N0YXJ0JyxhY3Q6ICdzdGFydF9idG5zdGFydF9jbGljayd9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgSTE4bi50KCdzdWJtaXQnLCBJMThuU2NvcGUoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgXy5pc0VtcHR5KHN0YXRzKSA/ICcnIDogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXN0LmxpbmVoZWlnaHQtbG9vc2UnLCBoLmZvcm1hdE51bWJlcihzdGF0cy50b3RhbF9jb250cmlidXRvcnMsIDAsIDMpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtc21hbGwuc3RhcnQtc3RhdHMnLCBJMThuLnQoJ2hlYWRlci5wZW9wbGUnLCBJMThuU2NvcGUoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXN0LmxpbmVoZWlnaHQtbG9vc2UnLCBzdGF0cy50b3RhbF9jb250cmlidXRlZC50b1N0cmluZygpLnNsaWNlKDAsIDIpICsgJyBtaWxow7VlcycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1zbWFsbC5zdGFydC1zdGF0cycsIEkxOG4udCgnaGVhZGVyLm1vbmV5JywgSTE4blNjb3BlKCkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VzdC5saW5laGVpZ2h0LWxvb3NlJywgaC5mb3JtYXROdW1iZXIoc3RhdHMudG90YWxfcHJvamVjdHNfc3VjY2VzcywgMCwgMykpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgncC5mb250c2l6ZS1zbWFsbC5zdGFydC1zdGF0cycsIEkxOG4udCgnaGVhZGVyLnN1Y2Nlc3MnLCBJMThuU2NvcGUoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24nLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMTAudy1jb2wtcHVzaC0xLnUtdGV4dC1jZW50ZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyLnUtbWFyZ2luYm90dG9tLTEwLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBJMThuLnQoJ3BhZ2UtdGl0bGUnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsJywgSTE4bi50KCdwYWdlLXN1YnRpdGxlJywgSTE4blNjb3BlKCkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jbGVhcmZpeC5ob3ctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5ob3ctY29sLTAxJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmluZm8taG93d29ya3MtYmFja2VycycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZScsIEkxOG4udCgnYmFubmVyLjEnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdiYW5uZXIuMicsIEkxOG5TY29wZSgpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmluZm8taG93d29ya3MtYmFja2VycycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZScsIEkxOG4udCgnYmFubmVyLjMnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdiYW5uZXIuNCcsIEkxOG5TY29wZSgpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuaG93LWNvbC0wMicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuaG93LWNvbC0wMycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWxhcmdlJywgSTE4bi50KCdiYW5uZXIuNScsIEkxOG5TY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtYmFzZScsIEkxOG4udCgnYmFubmVyLjYnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnR3ZWlnaHQtc2VtaWJvbGQuZm9udHNpemUtbGFyZ2UudS1tYXJnaW50b3AtMzAnLCBJMThuLnQoJ2Jhbm5lci43JywgSTE4blNjb3BlKCkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdiYW5uZXIuOCcsIEkxOG5TY29wZSgpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWhpZGRlbi1tYWluLnctaGlkZGVuLW1lZGl1bS5ob3ctY29sLTAxJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmluZm8taG93d29ya3MtYmFja2VycycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZScsIEkxOG4udCgnYmFubmVyLjEnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdiYW5uZXIuMicsIEkxOG5TY29wZSgpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmluZm8taG93d29ya3MtYmFja2VycycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHdlaWdodC1zZW1pYm9sZC5mb250c2l6ZS1sYXJnZScsIEkxOG4udCgnYmFubmVyLjMnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlJywgIEkxOG4udCgnYmFubmVyLjQnLCBJMThuU2NvcGUoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5kaXZpZGVyJyksXHJcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uc2VjdGlvbi1sYXJnZScsIFtcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lci51LXRleHQtY2VudGVyLnUtbWFyZ2luYm90dG9tLTYwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1sYXJnZXN0LmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBJMThuLnQoJ2ZlYXR1cmVzLnRpdGxlJywgSTE4blNjb3BlKCkpKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWhpZGRlbi1zbWFsbC53LWhpZGRlbi10aW55LmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTIwJywgSTE4bi50KCdmZWF0dXJlcy5zdWJ0aXRsZScsIEkxOG5TY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctaGlkZGVuLW1haW4udy1oaWRkZW4tbWVkaXVtLnUtbWFyZ2ludG9wLTMwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMzAnLCBJMThuLnQoJ2ZlYXR1cmVzLmZlYXR1cmVfMScsIEkxOG5TY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIEkxOG4udCgnZmVhdHVyZXMuZmVhdHVyZV8yJywgSTE4blNjb3BlKCkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTMwJywgSTE4bi50KCdmZWF0dXJlcy5mZWF0dXJlXzMnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMzAnLCBJMThuLnQoJ2ZlYXR1cmVzLmZlYXR1cmVfNCcsIEkxOG5TY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0zMCcsIEkxOG4udCgnZmVhdHVyZXMuZmVhdHVyZV81JywgSTE4blNjb3BlKCkpKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy10YWJzLnctaGlkZGVuLXNtYWxsLnctaGlkZGVuLXRpbnknLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXRhYi1tZW51LnctY29sLnctY29sLTQnLCBfLm1hcChjdHJsLnBhbmVJbWFnZXMsIChwYW5lLCBpZHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKGBidG4udy10YWItbGluay53LWlubGluZS1ibG9jay50YWItbGlzdC1pdGVtJHsoaWR4ID09PSBjdHJsLnNlbGVjdGVkUGFuZSgpKSA/ICcuc2VsZWN0ZWQnIDogJyd9YCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3N0YXJ0JyxhY3Q6ICdzdGFydF9zb2x1dGlvbl9jbGljaycsbGJsOiBwYW5lLmxhYmVsfSxjdHJsLnNlbGVjdFBhbmUoaWR4KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHBhbmUubGFiZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXRhYi1jb250ZW50LnctY29sLnctY29sLTgnLCBfLm1hcChjdHJsLnBhbmVJbWFnZXMsIChwYW5lLCBpZHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy10YWItcGFuZScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBpbWdbc3JjPVwiJHtwYW5lLnNyY31cIl0ucGFuZS1pbWFnZSR7KGlkeCA9PT0gY3RybC5zZWxlY3RlZFBhbmUoKSkgPyAnLnNlbGVjdGVkJyA6ICcnfWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBtKCcudy1zZWN0aW9uLnNlY3Rpb24tbGFyZ2UuYmctYmx1ZS1vbmUnLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXIudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyLmxpbmVoZWlnaHQtdGlnaHQuZm9udGNvbG9yLW5lZ2F0aXZlLnUtbWFyZ2luYm90dG9tLTIwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ3ZpZGVvLnRpdGxlJywgSTE4blNjb3BlKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdicicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ3ZpZGVvLnN1YnRpdGxlJywgSTE4blNjb3BlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbS5jb21wb25lbnQoeW91dHViZUxpZ2h0Ym94LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogSTE4bi50KCd2aWRlby5zcmMnLCBJMThuU2NvcGUoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGguYW5hbHl0aWNzLmV2ZW50KHtjYXQ6ICdwcm9qZWN0X3N0YXJ0JyxhY3Q6ICdzdGFydF92aWRlb19wbGF5J30pXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBtKCcudy1oaWRkZW4tc21hbGwudy1oaWRkZW4tdGlueS5zZWN0aW9uLWNhdGVnb3JpZXMnLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnUtdGV4dC1jZW50ZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0xMC53LWNvbC1wdXNoLTEnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlLnUtbWFyZ2luYm90dG9tLTQwLmZvbnRjb2xvci1uZWdhdGl2ZScsIEkxOG4udCgnY2F0ZWdvcmllcy50aXRsZScsIEkxOG5TY29wZSgpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctdGFicycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctdGFiLW1lbnUudS10ZXh0LWNlbnRlcicsIF8ubWFwKGN0cmwuY2F0ZWdvcmllcygpLCAoY2F0ZWdvcnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKGBhLnctdGFiLWxpbmsudy1pbmxpbmUtYmxvY2suYnRuLWNhdGVnb3J5LnNtYWxsLmJ0bi1pbmxpbmUkeyhjdHJsLnNlbGVjdGVkQ2F0ZWdvcnlJZHgoKSA9PT0gY2F0ZWdvcnkuaWQpID8gJy53LS1jdXJyZW50JyA6ICcnfWAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF9zdGFydCcsYWN0OiAnc3RhcnRfY2F0ZWdvcnlfY2xpY2snLGxibDogY2F0ZWdvcnkubmFtZX0sIGN0cmwuc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIGNhdGVnb3J5Lm5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy10YWItY29udGVudC51LW1hcmdpbnRvcC00MCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXRhYi1wYW5lLnctLXRhYi1hY3RpdmUnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgKGN0cmwuc2VsZWN0ZWRDYXRlZ29yeUlkeCgpICE9PSAtMSkgPyBfLm1hcChjdHJsLnNlbGVjdGVkQ2F0ZWdvcnkoKSwgKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtanVtYm8udS1tYXJnaW5ib3R0b20tMjAnLCBjYXRlZ29yeS5uYW1lKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdhLnctYnV0dG9uLmJ0bi5idG4tbWVkaXVtLmJ0bi1pbmxpbmUuYnRuLWRhcmtbaHJlZj1cIiNzdGFydC1mb3JtXCJdJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGguc2Nyb2xsVG8oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIEkxOG4udCgnc3VibWl0JywgSTE4blNjb3BlKCkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbWVnYWp1bWJvLmZvbnRjb2xvci1uZWdhdGl2ZScsIGBSJCAke2NhdGVnb3J5LnRvdGFsX3N1Y2Nlc3NmdWxfdmFsdWUgPyBoLmZvcm1hdE51bWJlcihjYXRlZ29yeS50b3RhbF9zdWNjZXNzZnVsX3ZhbHVlLCAyLCAzKSA6ICcuLi4nfWApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZS51LW1hcmdpbmJvdHRvbS0yMCcsICdEb2Fkb3MgcGFyYSBwcm9qZXRvcycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1tZWdhanVtYm8uZm9udGNvbG9yLW5lZ2F0aXZlJywgKGNhdGVnb3J5LnN1Y2Nlc3NmdWxfcHJvamVjdHMpID8gY2F0ZWdvcnkuc3VjY2Vzc2Z1bF9wcm9qZWN0cyA6ICcuLi4nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS1tYXJnaW5ib3R0b20tMzAnLCAnUHJvamV0b3MgZmluYW5jaWFkb3MnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhXy5pc0VtcHR5KGN0cmwuZmVhdHVyZWRQcm9qZWN0cygpKSA/IF8ubWFwKGN0cmwuZmVhdHVyZWRQcm9qZWN0cygpLCAocHJvamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIV8uaXNVbmRlZmluZWQocHJvamVjdCkgPyBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tMTAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKGBpbWcudXNlci1hdmF0YXJbc3JjPVwiJHtoLnVzZUF2YXRhck9yRGVmYXVsdChwcm9qZWN0LnVzZXJUaHVtYil9XCJdYClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTExJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLmZvbnR3ZWlnaHQtc2VtaWJvbGQnLCBwcm9qZWN0LnVzZXIubmFtZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJMThuLnQoJ2NhdGVnb3JpZXMucGxlZGdlZCcsIEkxOG5TY29wZSh7cGxlZGdlZDogaC5mb3JtYXROdW1iZXIocHJvamVjdC5wbGVkZ2VkKSwgY29udHJpYnV0b3JzOiBwcm9qZWN0LnRvdGFsX2NvbnRyaWJ1dG9yc30pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgYS5saW5rLWhpZGRlbltocmVmPVwiLyR7cHJvamVjdC5wZXJtYWxpbmt9XCJdYCwgcHJvamVjdC5uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6IG0oJy5mb250c2l6ZS1iYXNlJywgSTE4bi50KCdjYXRlZ29yaWVzLmxvYWRpbmdfZmVhdHVyZWQnLCBJMThuU2NvcGUoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogJycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgbS5jb21wb25lbnQoc2xpZGVyLCB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXM6IHRlc3RpbW9uaWFscygpLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IEkxOG4udCgndGVzdGltb25pYWxzX3RpdGxlJywgSTE4blNjb3BlKCkpLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVDbGFzczogJ3NsaWRlLXRlc3RpbW9uaWFscy1jb250ZW50JyxcclxuICAgICAgICAgICAgICAgIHdyYXBwZXJDbGFzczogJ3NsaWRlLXRlc3RpbW9uaWFscycsXHJcbiAgICAgICAgICAgICAgICBvbmNoYW5nZTogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3Rfc3RhcnQnLGFjdDogJ3N0YXJ0X3Rlc3RpbW9uaWFsc19jaGFuZ2UnfSlcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG0oJy53LXNlY3Rpb24uZGl2aWRlci51LW1hcmdpbnRvcC0zMCcpLFxyXG4gICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyLnUtdGV4dC1jZW50ZXIudS1tYXJnaW5ib3R0b20tNjAudS1tYXJnaW50b3AtNDAnLCBJMThuLnQoJ3FhX3RpdGxlJywgSTE4blNjb3BlKCkpKSxcclxuICAgICAgICAgICAgICAgIG0oJy53LXJvdy51LW1hcmdpbmJvdHRvbS02MCcsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIF8ubWFwKGN0cmwucXVlc3Rpb25zLmNvbF8xLCAocXVlc3Rpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29tcG9uZW50KGxhbmRpbmdRQSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246IHF1ZXN0aW9uLnF1ZXN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiBxdWVzdGlvbi5hbnN3ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBoLmFuYWx5dGljcy5ldmVudCh7Y2F0OiAncHJvamVjdF9zdGFydCcsYWN0OiAnc3RhcnRfcWFfY2xpY2snLGxibDogcXVlc3Rpb24ucXVlc3Rpb259KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTYnLCBfLm1hcChjdHJsLnF1ZXN0aW9ucy5jb2xfMiwgKHF1ZXN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmNvbXBvbmVudChsYW5kaW5nUUEsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiBxdWVzdGlvbi5xdWVzdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogcXVlc3Rpb24uYW5zd2VyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogaC5hbmFseXRpY3MuZXZlbnQoe2NhdDogJ3Byb2plY3Rfc3RhcnQnLGFjdDogJ3N0YXJ0X3FhX2NsaWNrJyxsYmw6IHF1ZXN0aW9uLnF1ZXN0aW9ufSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgbSgnI3N0YXJ0LWZvcm0udy1zZWN0aW9uLnNlY3Rpb24tbGFyZ2UudS10ZXh0LWNlbnRlci5iZy1wdXJwbGUuYmVmb3JlLWZvb3RlcicsIFtcclxuICAgICAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtanVtYm8uZm9udGNvbG9yLW5lZ2F0aXZlLnUtbWFyZ2luYm90dG9tLTYwJywgJ0NyaWUgbyBzZXUgcmFzY3VuaG8gZ3JhdHVpdGFtZW50ZSEnKSxcclxuICAgICAgICAgICAgICAgICAgICBtKCdmb3JtW2FjdGlvbj1cIi9wcm9qZWN0cy9mYWxsYmFja19jcmVhdGVcIl1bbWV0aG9kPVwiR0VUXCJdLnctcm93LnctZm9ybScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25zdWJtaXQ6IGguYW5hbHl0aWNzLm9uZVRpbWVFdmVudCh7Y2F0OiAncHJvamVjdF9jcmVhdGUnLGFjdDogJ2NyZWF0ZV9mb3JtX3N1Ym1pdCd9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1sYXJnZXIuZm9udGNvbG9yLW5lZ2F0aXZlLnUtbWFyZ2luYm90dG9tLTEwJywgSTE4bi50KCdmb3JtLnRpdGxlJywgSTE4blNjb3BlKCkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2lucHV0W25hbWU9XCJ1dGY4XCJdW3R5cGU9XCJoaWRkZW5cIl1bdmFsdWU9XCLinJNcIl0nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oYGlucHV0W25hbWU9XCJhdXRoZW50aWNpdHlfdG9rZW5cIl1bdHlwZT1cImhpZGRlblwiXVt2YWx1ZT1cIiR7aC5hdXRoZW50aWNpdHlUb2tlbigpfVwiXWApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnaW5wdXQudy1pbnB1dC50ZXh0LWZpZWxkLm1lZGl1bS51LW1hcmdpbmJvdHRvbS0zMFt0eXBlPVwidGV4dFwiXScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHJvamVjdFtuYW1lXScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U6IGguYW5hbHl0aWNzLm9uZVRpbWVFdmVudCh7Y2F0OiAncHJvamVjdF9jcmVhdGUnLGFjdDogJ2NyZWF0ZV9mb3JtX2NoYW5nZScsbGJsOiAnbmFtZSd9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyLmZvbnRjb2xvci1uZWdhdGl2ZS51LW1hcmdpbmJvdHRvbS0xMCcsICduYSBjYXRlZ29yaWEnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NlbGVjdC53LXNlbGVjdC50ZXh0LWZpZWxkLm1lZGl1bS51LW1hcmdpbmJvdHRvbS00MCcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHJvamVjdFtjYXRlZ29yeV9pZF0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBoLmFuYWx5dGljcy5vbmVUaW1lRXZlbnQoe2NhdDogJ3Byb2plY3RfY3JlYXRlJyxhY3Q6ICdjcmVhdGVfZm9ybV9jaGFuZ2UnLGxibDogJ2NhdGVnb3J5J30pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdvcHRpb25bdmFsdWU9XCJcIl0nLCBJMThuLnQoJ2Zvcm0uc2VsZWN0X2RlZmF1bHQnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGN0cmwuY2F0ZWdvcmllcygpLCAoY2F0ZWdvcnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0oYG9wdGlvblt2YWx1ZT1cIiR7Y2F0ZWdvcnkuaWR9XCJdYCwgY2F0ZWdvcnkubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW5ib3R0b20tODAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNC53LWNvbC1wdXNoLTQudS1tYXJnaW50b3AtNDAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgaW5wdXRbdHlwZT1cInN1Ym1pdFwiXVt2YWx1ZT1cIiR7STE4bi50KCdmb3JtLnN1Ym1pdCcsIEkxOG5TY29wZSgpKX1cIl0udy1idXR0b24uYnRuLmJ0bi1sYXJnZWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzdGFydDtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5jb25zdCB0ZWFtVG90YWwgPSB7XHJcbiAgICBjb250cm9sbGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHZtID0ge1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uOiBtLnByb3AoW10pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbW9kZWxzLnRlYW1Ub3RhbC5nZXRSb3coKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHZtLmNvbGxlY3Rpb24oZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZtOiB2bVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIG0oJyN0ZWFtLXRvdGFsLXN0YXRpYy53LXNlY3Rpb24uc2VjdGlvbi1vbmUtY29sdW1uLnNlY3Rpb24udS1tYXJnaW50b3AtNDAudS10ZXh0LWNlbnRlci51LW1hcmdpbmJvdHRvbS0yMCcsIFtcclxuICAgICAgICAgICAgY3RybC52bS5jb2xsZWN0aW9uKCkubWFwKCh0ZWFtVG90YWwpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtOCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1iYXNlLnUtbWFyZ2luYm90dG9tLTMwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSG9qZSBzb21vcyAnICsgdGVhbVRvdGFsLm1lbWJlcl9jb3VudCArICcgcGVzc29hcyBlc3BhbGhhZGFzIHBvciAnICsgdGVhbVRvdGFsLnRvdGFsX2NpdGllcyArICcgY2lkYWRlcyBlbSAnICsgdGVhbVRvdGFsLmNvdW50cmllcy5sZW5ndGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgcGHDrXNlcyAoJyArIHRlYW1Ub3RhbC5jb3VudHJpZXMudG9TdHJpbmcoKSArICcpISBPIENhdGFyc2Ugw6kgaW5kZXBlbmRlbnRlLCBzZW0gaW52ZXN0aWRvcmVzLCBkZSBjw7NkaWdvIGFiZXJ0byBlIGNvbnN0cnXDrWRvIGNvbSBhbW9yLiBOb3NzYSBwYWl4w6NvIMOpIGNvbnN0cnVpciB1bSBhbWJpZW50ZSBvbmRlIGNhZGEgdmV6IG1haXMgcHJvamV0b3MgcG9zc2FtIGdhbmhhciB2aWRhLicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWxhcmdlci5saW5laGVpZ2h0LXRpZ2h0LnRleHQtc3VjY2VzcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vc3NhIGVxdWlwZSwganVudGEsIGrDoSBhcG9pb3UgUiQnICsgaC5mb3JtYXROdW1iZXIodGVhbVRvdGFsLnRvdGFsX2Ftb3VudCkgKyAnIHBhcmEgJyArIHRlYW1Ub3RhbC50b3RhbF9jb250cmlidXRlZF9wcm9qZWN0cyArICcgcHJvamV0b3MhJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0yJylcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0ZWFtVG90YWw7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuY29uc3QgdGVhbU1lbWJlcnMgPSB7XHJcbiAgICBjb250cm9sbGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHZtID0ge1xyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogbS5wcm9wKFtdKVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgZ3JvdXBDb2xsZWN0aW9uID0gKGNvbGxlY3Rpb24sIGdyb3VwVG90YWwpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfLm1hcChfLnJhbmdlKE1hdGguY2VpbChjb2xsZWN0aW9uLmxlbmd0aCAvIGdyb3VwVG90YWwpKSwgKGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zbGljZShpICogZ3JvdXBUb3RhbCwgKGkgKyAxKSAqIGdyb3VwVG90YWwpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIG1vZGVscy50ZWFtTWVtYmVyLmdldFBhZ2UoKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHZtLmNvbGxlY3Rpb24oZ3JvdXBDb2xsZWN0aW9uKGRhdGEsIDQpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdm06IHZtXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwpIHtcclxuICAgICAgICByZXR1cm4gbSgnI3RlYW0tbWVtYmVycy1zdGF0aWMudy1zZWN0aW9uLnNlY3Rpb24nLCBbXHJcbiAgICAgICAgICAgIG0oJy53LWNvbnRhaW5lcicsIFtcclxuICAgICAgICAgICAgICAgIF8ubWFwKGN0cmwudm0uY29sbGVjdGlvbigpLCAoZ3JvdXApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnctcm93LnUtdGV4dC1jZW50ZXInLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGdyb3VwLCAobWVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnRlYW0tbWVtYmVyLnctY29sLnctY29sLTMudy1jb2wtc21hbGwtMy53LWNvbC10aW55LTYudS1tYXJnaW5ib3R0b20tNDAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnYS5hbHQtbGlua1tocmVmPVwiL3VzZXJzLycgKyBtZW1iZXIuaWQgKyAnXCJdJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdpbWcudGh1bWIuYmlnLnUtcm91bmQudS1tYXJnaW5ib3R0b20tMTBbc3JjPVwiJyArIG1lbWJlci5pbWcgKyAnXCJdJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250d2VpZ2h0LXNlbWlib2xkLmZvbnRzaXplLWJhc2UnLCBtZW1iZXIubmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtc21hbGxlc3QuZm9udGNvbG9yLXNlY29uZGFyeScsICdBcG9pb3UgJyArIG1lbWJlci50b3RhbF9jb250cmlidXRlZF9wcm9qZWN0cyArICcgcHJvamV0b3MnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdGVhbU1lbWJlcnM7XHJcbiIsImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgdGVhbVRvdGFsIGZyb20gJy4uL2MvdGVhbS10b3RhbCc7XHJcbmltcG9ydCB0ZWFtTWVtYmVycyBmcm9tICcuLi9jL3RlYW0tbWVtYmVycyc7XHJcblxyXG5jb25zdCB0ZWFtID0ge1xyXG4gICAgdmlldygpIHtcclxuICAgICAgICByZXR1cm4gbSgnI3N0YXRpYy10ZWFtLWFwcCcsIFtcclxuICAgICAgICAgICAgbS5jb21wb25lbnQodGVhbVRvdGFsKSxcclxuICAgICAgICAgICAgbS5jb21wb25lbnQodGVhbU1lbWJlcnMpXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0ZWFtO1xyXG4iLCIvKipcclxuICogd2luZG93LmMuVXNlckJhbGFuY2VSZXF1ZXN0TW9kYWxDb250ZW50IGNvbXBvbmVudFxyXG4gKiBSZW5kZXIgdGhlIGN1cnJlbnQgdXNlciBiYW5rIGFjY291bnQgdG8gY29uZmlybSBmdW5kIHJlcXVlc3RcclxuICpcclxuICogRXhhbXBsZTpcclxuICogbS5jb21wb25lbnQoYy5Vc2VyQmFsYW5jZVJlcXVlc3RNb2RlbENvbnRlbnQsIHtcclxuICogICAgIGJhbGFuY2U6IHt1c2VyX2lkOiAxMjMsIGFtb3VudDogMTIzfSAvLyB1c2VyQmFsYW5jZSBzdHJ1Y3RcclxuICogfSlcclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IEkxOG4gZnJvbSAnaTE4bi1qcyc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5jb25zdCBJMThuU2NvcGUgPSBfLnBhcnRpYWwoaC5pMThuU2NvcGUsICd1c2Vycy5iYWxhbmNlJyk7XHJcblxyXG5jb25zdCB1c2VyQmFsYW5jZVJlcXVlc3RNb2RlbENvbnRlbnQgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBjb25zdCB2bSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3VzZXJfaWQ6ICdlcSd9KSxcclxuICAgICAgICAgICAgICBiYWxhbmNlID0gYXJncy5iYWxhbmNlLFxyXG4gICAgICAgICAgICAgIGxvYWRlck9wdHMgPSBtb2RlbHMuYmFsYW5jZVRyYW5zZmVyLnBvc3RPcHRpb25zKHtcclxuICAgICAgICAgICAgICAgICAgdXNlcl9pZDogYmFsYW5jZS51c2VyX2lkfSksXHJcbiAgICAgICAgICAgICAgcmVxdWVzdExvYWRlciA9IHBvc3RncmVzdC5sb2FkZXJXaXRoVG9rZW4obG9hZGVyT3B0cyksXHJcbiAgICAgICAgICAgICAgZGlzcGxheURvbmUgPSBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpLFxyXG4gICAgICAgICAgICAgIHJlcXVlc3RGdW5kID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICByZXF1ZXN0TG9hZGVyLmxvYWQoKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcmdzLmJhbGFuY2VNYW5hZ2VyLmxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFyZ3MuYmFsYW5jZVRyYW5zYWN0aW9uTWFuYWdlci5sb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5RG9uZS50b2dnbGUoKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYXJncy5iYW5rQWNjb3VudE1hbmFnZXIubG9hZCgpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXF1ZXN0TG9hZGVyOiByZXF1ZXN0TG9hZGVyLFxyXG4gICAgICAgICAgICByZXF1ZXN0RnVuZDogcmVxdWVzdEZ1bmQsXHJcbiAgICAgICAgICAgIGJhbmtBY2NvdW50czogYXJncy5iYW5rQWNjb3VudE1hbmFnZXIuY29sbGVjdGlvbixcclxuICAgICAgICAgICAgZGlzcGxheURvbmU6IGRpc3BsYXlEb25lLFxyXG4gICAgICAgICAgICBsb2FkQmFua0E6IGFyZ3MuYmFua0FjY291bnRNYW5hZ2VyLmxvYWRlclxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgYmFsYW5jZSA9IGFyZ3MuYmFsYW5jZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChjdHJsLmxvYWRCYW5rQSgpID8gaC5sb2FkZXIoKSA6IG0oJ2RpdicsIF8ubWFwKGN0cmwuYmFua0FjY291bnRzKCksIChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLWhlYWRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2UudS10ZXh0LWNlbnRlcicsIEkxOG4udCgnd2l0aGRyYXcnLCBJMThuU2NvcGUoKSkpXHJcbiAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIChjdHJsLmRpc3BsYXlEb25lKCkgPyBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQudS10ZXh0LWNlbnRlcicsIFtcclxuICAgICAgICAgICAgICAgICAgICBtKCcuZmEuZmEtY2hlY2stY2lyY2xlLmZhLTV4LnRleHQtc3VjY2Vzcy51LW1hcmdpbmJvdHRvbS00MCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AuZm9udHNpemUtbGFyZ2UnLCBJMThuLnQoJ3N1Y2Vzc19tZXNzYWdlJywgSTE4blNjb3BlKCkpKVxyXG4gICAgICAgICAgICAgICAgXSkgOiBtKCcubW9kYWwtZGlhbG9nLWNvbnRlbnQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tMjAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHdlaWdodC1zZW1pYm9sZCcsICdWYWxvcjonKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4udGV4dC1zdWNjZXNzJywgYFIkICR7aC5mb3JtYXROdW1iZXIoYmFsYW5jZS5hbW91bnQsIDIsIDMpfWApXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLWJhc2UudS1tYXJnaW5ib3R0b20tMTAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4nLCB7c3R5bGU6IHsnZm9udC13ZWlnaHQnOiAnIDYwMCd9fSwgSTE4bi50KCdiYW5rLmFjY291bnQnLCBJMThuU2NvcGUoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsLnUtbWFyZ2luYm90dG9tLTEwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ2JhbmsubmFtZScsIEkxOG5TY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub3duZXJfbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdiYW5rLmNwZl9jbnBqJywgSTE4blNjb3BlKCkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5vd25lcl9kb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdiYW5rLmJhbmtfbmFtZScsIEkxOG5TY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRydXN0KCcmbmJzcDsnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uYmFua19uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ2JhbmsuYWdlbmN5JywgSTE4blNjb3BlKCkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7aXRlbS5hZ2VuY3l9LSR7aXRlbS5hZ2VuY3lfZGlnaXR9YFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCdiYW5rLmFjY291bnQnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtpdGVtLmFjY291bnR9LSR7aXRlbS5hY2NvdW50X2RpZ2l0fWBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgIF0pKSxcclxuICAgICAgICAgICAgICAgICghY3RybC5kaXNwbGF5RG9uZSgpID9cclxuICAgICAgICAgICAgICAgICBtKCcubW9kYWwtZGlhbG9nLW5hdi1ib3R0b20nLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdycsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC0zJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY3RybC5yZXF1ZXN0TG9hZGVyKCkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmxvYWRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbSgnYS5idG4uYnRuLWxhcmdlLmJ0bi1yZXF1ZXN0LWZ1bmRbaHJlZj1cImpzOnZvaWQoMCk7XCJdJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvbmNsaWNrOiBjdHJsLnJlcXVlc3RGdW5kfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTb2xpY2l0YXIgc2FxdWUnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTMnKVxyXG4gICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgIF0pIDogJycpXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgfSkpKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZXJCYWxhbmNlUmVxdWVzdE1vZGVsQ29udGVudDtcclxuIiwiLyoqXHJcbiAqIHdpbmRvdy5jLlVzZXJCYWxhbmNlIGNvbXBvbmVudFxyXG4gKiBSZW5kZXIgdGhlIGN1cnJlbnQgdXNlciB0b3RhbCBiYWxhbmNlIGFuZCByZXF1ZXN0IGZ1bmQgYWN0aW9uXHJcbiAqXHJcbiAqIEV4YW1wbGU6XHJcbiAqIG0uY29tcG9uZW50KGMuVXNlckJhbGFuY2UsIHtcclxuICogICAgIHVzZXJfaWQ6IDEyMyxcclxuICogfSlcclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IG1vZGVscyBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgaCBmcm9tICcuLi9oJztcclxuaW1wb3J0IG1vZGFsQm94IGZyb20gJy4vbW9kYWwtYm94JztcclxuaW1wb3J0IHVzZXJCYWxhbmNlUmVxdWVzdE1vZGFsQ29udGVudCBmcm9tICcuL3VzZXItYmFsYW5jZS1yZXF1ZXN0LW1vZGFsLWNvbnRlbnQnO1xyXG5cclxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAndXNlcnMuYmFsYW5jZScpO1xyXG5cclxuY29uc3QgdXNlckJhbGFuY2UgPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBhcmdzLmJhbGFuY2VNYW5hZ2VyLmxvYWQoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlckJhbGFuY2VzOiBhcmdzLmJhbGFuY2VNYW5hZ2VyLmNvbGxlY3Rpb24sXHJcbiAgICAgICAgICAgIGRpc3BsYXlNb2RhbDogaC50b2dnbGVQcm9wKGZhbHNlLCB0cnVlKVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdmlldyhjdHJsLCBhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgYmFsYW5jZSA9IF8uZmlyc3QoY3RybC51c2VyQmFsYW5jZXMoKSksXHJcbiAgICAgICAgICAgIGJhbGFuY2VSZXF1ZXN0TW9kYWxDID0gW1xyXG4gICAgICAgICAgICAgICAgdXNlckJhbGFuY2VSZXF1ZXN0TW9kYWxDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgXy5leHRlbmQoe30sIHtiYWxhbmNlOiBiYWxhbmNlfSwgYXJncylcclxuICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0oJy53LXNlY3Rpb24uc2VjdGlvbi51c2VyLWJhbGFuY2Utc2VjdGlvbicsIFtcclxuICAgICAgICAgICAgKGN0cmwuZGlzcGxheU1vZGFsKCkgPyBtLmNvbXBvbmVudChtb2RhbEJveCwge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheU1vZGFsOiBjdHJsLmRpc3BsYXlNb2RhbCxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGJhbGFuY2VSZXF1ZXN0TW9kYWxDXHJcbiAgICAgICAgICAgIH0pIDogJycpLFxyXG4gICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTgudS10ZXh0LWNlbnRlci1zbWFsbC1vbmx5LnUtbWFyZ2luYm90dG9tLTIwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKCcuZm9udHNpemUtbGFyZ2VyJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCd0b3RhbHMnLCBJMThuU2NvcGUoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLnRleHQtc3VjY2VzcycsIGBSJCAke2guZm9ybWF0TnVtYmVyKGJhbGFuY2UuYW1vdW50LCAyLCAzKX1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtKGBhW2NsYXNzPVwici1mdW5kLWJ0biB3LWJ1dHRvbiBidG4gYnRuLW1lZGl1bSB1LW1hcmdpbmJvdHRvbS0xMCAkeyhiYWxhbmNlLmFtb3VudCA8PSAwID8gJ2J0bi1pbmFjdGl2ZScgOiAnJyl9XCJdW2hyZWY9XCJqczp2b2lkKDApO1wiXWAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAge29uY2xpY2s6IChiYWxhbmNlLmFtb3VudCA+IDAgPyBjdHJsLmRpc3BsYXlNb2RhbC50b2dnbGUgOiAnanM6dm9pZCgwKTsnKX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgSTE4bi50KCd3aXRoZHJhd19jdGEnLCBJMThuU2NvcGUoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2VyQmFsYW5jZTtcclxuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5cclxuY29uc3QgSTE4blNjb3BlID0gXy5wYXJ0aWFsKGguaTE4blNjb3BlLCAndXNlcnMuYmFsYW5jZScpO1xyXG5cclxuY29uc3QgdXNlckJhbGFuY2VUcmFzYWN0aW9uUm93ID0ge1xyXG4gICAgY29udHJvbGxlcihhcmdzKSB7XHJcbiAgICAgICAgY29uc3QgZXhwYW5kZWQgPSBoLnRvZ2dsZVByb3AoZmFsc2UsIHRydWUpO1xyXG5cclxuICAgICAgICBpZiAoYXJncy5pbmRleCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGV4cGFuZGVkLnRvZ2dsZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZXhwYW5kZWQ6IGV4cGFuZGVkXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gYXJncy5pdGVtLFxyXG4gICAgICAgICAgICAgIGNyZWF0ZWRBdCA9IGgubW9tZW50RnJvbVN0cmluZyhpdGVtLmNyZWF0ZWRfYXQsICdZWVlZLU1NLUREJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBtKGBkaXZbY2xhc3M9J2JhbGFuY2UtY2FyZCAkeyhjdHJsLmV4cGFuZGVkKCkgPyAnY2FyZC1kZXRhaWxlZC1vcGVuJyA6ICcnKX0nXWAsXHJcbiAgICAgICAgICAgICAgICAgbSgnLnctY2xlYXJmaXguY2FyZC5jYXJkLWNsaWNrYWJsZScsIFtcclxuICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtdGlueS0yJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5mb250c2l6ZS1zbWFsbC5saW5laGVpZ2h0LXRpZ2h0ZXN0JywgY3JlYXRlZEF0LmZvcm1hdCgnRCBNTU0nKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLmZvbnRzaXplLXNtYWxsZXN0LmZvbnRjb2xvci10ZXJjaWFyeScsIGNyZWF0ZWRBdC5mb3JtYXQoJ1lZWVknKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwLnctY29sLXRpbnktMTAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctcm93JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtNCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ2RpdicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdzcGFuLmZvbnRzaXplLXNtYWxsZXIuZm9udGNvbG9yLXNlY29uZGFyeScsIEkxOG4udCgnZGViaXQnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtYmFzZS50ZXh0LWVycm9yJywgYFIkICR7aC5mb3JtYXROdW1iZXIoTWF0aC5hYnMoaXRlbS5kZWJpdCksIDIsIDMpfWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTQnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1zbWFsbGVyLmZvbnRjb2xvci1zZWNvbmRhcnknLCBJMThuLnQoJ2NyZWRpdCcsIEkxOG5TY29wZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cnVzdCgnJm5ic3A7JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnc3Bhbi5mb250c2l6ZS1iYXNlLnRleHQtc3VjY2VzcycsIGBSJCAke2guZm9ybWF0TnVtYmVyKGl0ZW0uY3JlZGl0LCAyLCAzKX1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LWNvbC53LWNvbC00JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnZGl2JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtc21hbGxlci5mb250Y29sb3Itc2Vjb25kYXJ5JywgSTE4bi50KCd0b3RhbHMnLCBJMThuU2NvcGUoKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJ1c3QoJyZuYnNwOycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oJ3NwYW4uZm9udHNpemUtYmFzZScsIGBSJCAke2guZm9ybWF0TnVtYmVyKGl0ZW0udG90YWxfYW1vdW50LCAyLCAzKX1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgIG0oYGEudy1pbmxpbmUtYmxvY2suYXJyb3ctYWRtaW4uJHsoY3RybC5leHBhbmRlZCgpID8gJ2Fycm93LWFkbWluLW9wZW5lZCcgOiAnJyl9LmZhLmZhLWNoZXZyb24tZG93bi5mb250Y29sb3Itc2Vjb25kYXJ5W2hyZWY9XCJqczoodm9pZCgwKSk7XCJdYCwge29uY2xpY2s6IGN0cmwuZXhwYW5kZWQudG9nZ2xlfSlcclxuICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAoY3RybC5leHBhbmRlZCgpID8gbSgnLmNhcmQnLCBfLm1hcChpdGVtLnNvdXJjZSwgKHRyYW5zYWN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgIGxldCBwb3MgPSB0cmFuc2FjdGlvbi5hbW91bnQgPj0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKCdkaXYnLFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy53LXJvdy5mb250c2l6ZS1zbWFsbC51LW1hcmdpbmJvdHRvbS0xMCcsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCcudy1jb2wudy1jb2wtMicsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShgLnRleHQtJHsocG9zID8gJ3N1Y2Nlc3MnIDogJ2Vycm9yJyl9YCwgYCR7cG9zID8gJysnIDogJy0nfSBSJCAke2guZm9ybWF0TnVtYmVyKE1hdGguYWJzKHRyYW5zYWN0aW9uLmFtb3VudCksIDIsIDMpfWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTEwJywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdkaXYnLCBgJHt0cmFuc2FjdGlvbi5ldmVudF9uYW1lfSAke3RyYW5zYWN0aW9uLm9yaWdpbl9vYmplY3QubmFtZX1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIG0oJy5kaXZpZGVyLnUtbWFyZ2luYm90dG9tLTEwJylcclxuICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgfSkpIDogJycpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXNlckJhbGFuY2VUcmFzYWN0aW9uUm93O1xyXG4iLCJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBoIGZyb20gJy4uL2gnO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB1c2VyQmFsYW5jZVRyYW5zYWN0aW9uUm93IGZyb20gJy4vdXNlci1iYWxhbmNlLXRyYW5zYWN0aW9uLXJvdyc7XHJcblxyXG5jb25zdCB1c2VyQmFsYW5jZVRyYW5zYWN0aW9ucyA9IHtcclxuICAgIGNvbnRyb2xsZXIoYXJncykge1xyXG4gICAgICAgIGFyZ3MuYmFsYW5jZVRyYW5zYWN0aW9uTWFuYWdlci5sb2FkKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxpc3Q6IGFyZ3MuYmFsYW5jZVRyYW5zYWN0aW9uTWFuYWdlci5saXN0XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB2aWV3KGN0cmwsIGFyZ3MpIHtcclxuICAgICAgICBjb25zdCBsaXN0ID0gY3RybC5saXN0O1xyXG5cclxuICAgICAgICByZXR1cm4gbSgnLnctc2VjdGlvbi5zZWN0aW9uLmNhcmQtdGVyY2lhcnkuYmVmb3JlLWZvb3Rlci5iYWxhbmNlLXRyYW5zYWN0aW9ucy1hcmVhJywgW1xyXG4gICAgICAgICAgICBtKCcudy1jb250YWluZXInLCBfLm1hcChsaXN0LmNvbGxlY3Rpb24oKSwgKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbS5jb21wb25lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgdXNlckJhbGFuY2VUcmFuc2FjdGlvblJvdywge2l0ZW06IGl0ZW0sIGluZGV4OiBpbmRleH0pO1xyXG4gICAgICAgICAgICB9KSksXHJcbiAgICAgICAgICAgIG0oJy5jb250YWluZXInLCBbXHJcbiAgICAgICAgICAgICAgICBtKCcudy1yb3cudS1tYXJnaW50b3AtNDAnLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbSgnLnctY29sLnctY29sLTIudy1jb2wtcHVzaC01JywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAhbGlzdC5pc0xvYWRpbmcoKSA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuaXNMYXN0UGFnZSgpID8gJycgOiBtKCdidXR0b24jbG9hZC1tb3JlLmJ0bi5idG4tbWVkaXVtLmJ0bi10ZXJjaWFyeScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBsaXN0Lm5leHRQYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnQ2FycmVnYXIgbWFpcycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoLmxvYWRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2VyQmFsYW5jZVRyYW5zYWN0aW9ucztcclxuIiwiLyoqXHJcbiAqIHdpbmRvdy5jLnJvb3QuQmFsYW5jZSBjb21wb25lbnRcclxuICogQSByb290IGNvbXBvbmVudCB0byBzaG93IHVzZXIgYmFsYW5jZSBhbmQgdHJhbnNhY3Rpb25zXHJcbiAqXHJcbiAqIEV4YW1wbGU6XHJcbiAqIFRvIG1vdW50IHRoaXMgY29tcG9uZW50IGp1c3QgY3JlYXRlIGEgRE9NIGVsZW1lbnQgbGlrZTpcclxuICogPGRpdiBkYXRhLW1pdGhyaWw9XCJVc2Vyc0JhbGFuY2VcIiBkYXRhLXBhcmFtZXRlcnM9XCJ7J3VzZXJfaWQnOiAxMH1cIj5cclxuICovXHJcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xyXG5pbXBvcnQgcG9zdGdyZXN0IGZyb20gJ21pdGhyaWwtcG9zdGdyZXN0JztcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHVzZXJCYWxhbmNlIGZyb20gJy4uL2MvdXNlci1iYWxhbmNlJztcclxuaW1wb3J0IHVzZXJCYWxhbmNlVHJhbnNhY3Rpb25zIGZyb20gJy4uL2MvdXNlci1iYWxhbmNlLXRyYW5zYWN0aW9ucyc7XHJcblxyXG5jb25zdCB1c2VyQmFsYW5jZU1haW4gPSB7XHJcbiAgICBjb250cm9sbGVyKGFyZ3MpIHtcclxuICAgICAgICBjb25zdCB1c2VySWRWTSA9IHBvc3RncmVzdC5maWx0ZXJzVk0oe3VzZXJfaWQ6ICdlcSd9KTtcclxuXHJcbiAgICAgICAgdXNlcklkVk0udXNlcl9pZChhcmdzLnVzZXJfaWQpO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGVzIHdpdGggdXNlciBiYWxhbmNlIHJlcXVlc3QgZGF0YVxyXG4gICAgICAgIGNvbnN0IGJhbGFuY2VNYW5hZ2VyID0gKCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG0ucHJvcChbe2Ftb3VudDogMCwgdXNlcl9pZDogYXJncy51c2VyX2lkfV0pLFxyXG4gICAgICAgICAgICAgICAgICBsb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZWxzLmJhbGFuY2UuZ2V0Um93V2l0aFRva2VuKHVzZXJJZFZNLnBhcmFtZXRlcnMoKSkudGhlbihjb2xsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgbG9hZDogbG9hZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pKCksXHJcblxyXG4gICAgICAgICAgICAgIC8vIEhhbmRsZXMgd2l0aCB1c2VyIGJhbGFuY2UgdHJhbnNhY3Rpb25zIGxpc3QgZGF0YVxyXG4gICAgICAgICAgICAgIGJhbGFuY2VUcmFuc2FjdGlvbk1hbmFnZXIgPSAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBsaXN0Vk0gPSBwb3N0Z3Jlc3QucGFnaW5hdGlvblZNKFxyXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZWxzLmJhbGFuY2VUcmFuc2FjdGlvbiwgJ2NyZWF0ZWRfYXQuZGVzYycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFZNLmZpcnN0UGFnZSh1c2VySWRWTS5wYXJhbWV0ZXJzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGxvYWQ6IGxvYWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICBsaXN0OiBsaXN0Vk1cclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICB9KSgpLFxyXG5cclxuICAgICAgICAgICAgICAvLyBIYW5kbGVzIHdpdGggYmFuayBhY2NvdW50IHRvIGNoZWNrXHJcbiAgICAgICAgICAgICAgYmFua0FjY291bnRNYW5hZ2VyID0gKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG0ucHJvcChbXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlciA9ICgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zdGdyZXN0LmxvYWRlcldpdGhUb2tlbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbHMuYmFua0FjY291bnQuZ2V0Um93T3B0aW9ucyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcklkVk0ucGFyYW1ldGVycygpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXIubG9hZCgpLnRoZW4oY29sbGVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgIGxvYWQ6IGxvYWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICBsb2FkZXI6IGxvYWRlclxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJhbmtBY2NvdW50TWFuYWdlcjogYmFua0FjY291bnRNYW5hZ2VyLFxyXG4gICAgICAgICAgICBiYWxhbmNlTWFuYWdlcjogYmFsYW5jZU1hbmFnZXIsXHJcbiAgICAgICAgICAgIGJhbGFuY2VUcmFuc2FjdGlvbk1hbmFnZXI6IGJhbGFuY2VUcmFuc2FjdGlvbk1hbmFnZXJcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHZpZXcoY3RybCwgYXJncykge1xyXG4gICAgICAgIGNvbnN0IG9wdHMgPSBfLmV4dGVuZCh7fSwgYXJncywgY3RybCk7XHJcbiAgICAgICAgcmV0dXJuIG0oJyNiYWxhbmNlLWFyZWEnLCBbXHJcbiAgICAgICAgICAgIG0uY29tcG9uZW50KHVzZXJCYWxhbmNlLCBvcHRzKSxcclxuICAgICAgICAgICAgbSgnLmRpdmlkZXInKSxcclxuICAgICAgICAgICAgbS5jb21wb25lbnQodXNlckJhbGFuY2VUcmFuc2FjdGlvbnMsIG9wdHMpLFxyXG4gICAgICAgICAgICBtKCcudS1tYXJnaW5ib3R0b20tNDAnKSxcclxuICAgICAgICAgICAgbSgnLnctc2VjdGlvbi5zZWN0aW9uLmNhcmQtdGVyY2lhcnkuYmVmb3JlLWZvb3RlcicpXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2VyQmFsYW5jZU1haW47XHJcbiIsImltcG9ydCBhZG1pblVzZXJzIGZyb20gJy4vcm9vdC9hZG1pbi11c2Vycyc7XHJcbmltcG9ydCBhZG1pbkNvbnRyaWJ1dGlvbnMgZnJvbSAnLi9yb290L2FkbWluLWNvbnRyaWJ1dGlvbnMnO1xyXG5pbXBvcnQgZmxleCBmcm9tICcuL3Jvb3QvZmxleCc7XHJcbmltcG9ydCBpbnNpZ2h0cyBmcm9tICcuL3Jvb3QvaW5zaWdodHMnO1xyXG5pbXBvcnQgam9icyBmcm9tICcuL3Jvb3Qvam9icyc7XHJcbmltcG9ydCBsaXZlU3RhdGlzdGljcyBmcm9tICcuL3Jvb3QvbGl2ZS1zdGF0aXN0aWNzJztcclxuaW1wb3J0IHByb2plY3RzQ29udHJpYnV0aW9uUmVwb3J0IGZyb20gJy4vcm9vdC9wcm9qZWN0cy1jb250cmlidXRpb24tcmVwb3J0JztcclxuaW1wb3J0IHByb2plY3RzRGFzaGJvYXJkIGZyb20gJy4vcm9vdC9wcm9qZWN0cy1kYXNoYm9hcmQnO1xyXG5pbXBvcnQgcHJvamVjdHNFeHBsb3JlIGZyb20gJy4vcm9vdC9wcm9qZWN0cy1leHBsb3JlJztcclxuaW1wb3J0IHByb2plY3RzSG9tZSBmcm9tICcuL3Jvb3QvcHJvamVjdHMtaG9tZSc7XHJcbmltcG9ydCBwcm9qZWN0c1Nob3cgZnJvbSAnLi9yb290L3Byb2plY3RzLXNob3cnO1xyXG5pbXBvcnQgcHVibGlzaCBmcm9tICcuL3Jvb3QvcHVibGlzaCc7XHJcbmltcG9ydCBzdGFydCBmcm9tICcuL3Jvb3Qvc3RhcnQnO1xyXG5pbXBvcnQgdGVhbSBmcm9tICcuL3Jvb3QvdGVhbSc7XHJcbmltcG9ydCB1c2Vyc0JhbGFuY2VNYWluIGZyb20gJy4vcm9vdC91c2Vycy1iYWxhbmNlLW1haW4nO1xyXG5cclxuY29uc3QgYyA9IHtcclxuICAgIHJvb3Q6IHtcclxuICAgICAgICBBZG1pblVzZXJzOiBhZG1pblVzZXJzLFxyXG4gICAgICAgIEFkbWluQ29udHJpYnV0aW9uczogYWRtaW5Db250cmlidXRpb25zLFxyXG4gICAgICAgIEZsZXg6IGZsZXgsXHJcbiAgICAgICAgSW5zaWdodHM6IGluc2lnaHRzLFxyXG4gICAgICAgIEpvYnM6IGpvYnMsXHJcbiAgICAgICAgTGl2ZVN0YXRpc3RpY3M6IGxpdmVTdGF0aXN0aWNzLFxyXG4gICAgICAgIFByb2plY3RzQ29udHJpYnV0aW9uUmVwb3J0OiBwcm9qZWN0c0NvbnRyaWJ1dGlvblJlcG9ydCxcclxuICAgICAgICBQcm9qZWN0c0Rhc2hib2FyZDogcHJvamVjdHNEYXNoYm9hcmQsXHJcbiAgICAgICAgUHJvamVjdHNFeHBsb3JlOiBwcm9qZWN0c0V4cGxvcmUsXHJcbiAgICAgICAgUHJvamVjdHNIb21lOiBwcm9qZWN0c0hvbWUsXHJcbiAgICAgICAgUHJvamVjdHNTaG93OiBwcm9qZWN0c1Nob3csXHJcbiAgICAgICAgUHVibGlzaDogcHVibGlzaCxcclxuICAgICAgICBTdGFydDogc3RhcnQsXHJcbiAgICAgICAgVGVhbTogdGVhbSxcclxuICAgICAgICBVc2Vyc0JhbGFuY2U6IHVzZXJzQmFsYW5jZU1haW5cclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGM7XHJcbiJdLCJuYW1lcyI6WyJtb21lbnQiLCJJMThuIiwicG9zdGdyZXN0IiwiXyIsInVzZXJGaWx0ZXJWTSIsInZtIiwicGFyYW1Ub1N0cmluZyIsImNvbnRyaWJ1dGlvbkZpbHRlclZNIiwiSTE4blNjb3BlIiwicHJvamVjdHNDb250cmlidXRpb25SZXBvcnRWTSIsInByb2plY3RGaWx0ZXJzVk0iLCJwcm9qZWN0RmlsdGVycyIsInVzZXJCYWxhbmNlUmVxdWVzdE1vZGFsQ29udGVudCIsInVzZXJCYWxhbmNlVHJhbnNhY3Rpb25Sb3ciLCJjIiwiZmxleCIsInByb2plY3RzQ29udHJpYnV0aW9uUmVwb3J0IiwidXNlcnNCYWxhbmNlTWFpbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7TUFLSSxhQUFhLEVBRGpCO01BRUksWUFBWSxTQUFaLFNBQVksQ0FBQyxHQUFELEVBQVM7QUFBRSxFQUFBLFdBQU8sT0FBTyxRQUFQLENBQWdCLElBQWhCLEtBQXlCLEdBQWhDO0FBQXNDLEVBQUEsQ0FGakU7TUFHSSxjQUFjLFNBQWQsV0FBYyxDQUFDLElBQUQsRUFBVTtBQUNwQixFQUFBLFFBQU0sYUFBYSxLQUFLLE9BQUwsQ0FBYSxNQUFiLEVBQXFCLEtBQXJCLEVBQTRCLE9BQTVCLENBQW9DLE1BQXBDLEVBQTRDLEtBQTVDLENBQW5CO1VBQ0ksUUFBUSxJ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
